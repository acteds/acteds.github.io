<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-10-09T19:43:27+08:00</updated><id>/feed.xml</id><title type="html">个人博客</title><subtitle></subtitle><author><name>acteds</name></author><entry><title type="html">Seata分布式事务</title><link href="/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/" rel="alternate" type="text/html" title="Seata分布式事务" /><published>2024-09-21T00:00:00+08:00</published><updated>2024-09-21T00:00:00+08:00</updated><id>/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1</id><content type="html" xml:base="/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"><![CDATA[<h1 id="引言">引言</h1>
<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>

<p>官方网站：<a href="https://seata.apache.org/zh-cn/">Apache Seata</a>，Demo1：<a href="https://github.com/apache/incubator-seata-samples/tree/master">apache/incubator-seata-sample</a>，Demo2：<a href="https://github.com/Kerry2019/seata-tcc-demo">Kerry2019/seata-tcc-demo</a>，扩展：<a href="https://seata.apache.org/zh-cn/docs/user/appendix/global-transaction-status">事务状态</a>，<a href="https://seata.apache.org/zh-cn/docs/user/appendix/isolation">事务隔离</a>。。</p>

<h1 id="seata">Seata</h1>

<h2 id="seata-tcc-模式">Seata TCC 模式</h2>

<h3 id="准备环境">准备环境</h3>

<p>首先下载Seata：<a href="https://seata.apache.org/zh-cn/unversioned/download/seata-server/">Seata Java Download  Apache Seata</a>，选择二进制版本。</p>

<p>修改<code class="language-plaintext highlighter-rouge">conf\application.yml</code>，注册到consul，并使用mysql做为存储方式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Seata 服务器配置</span>
<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">7091</span>  <span class="c1"># 设置 Seata 服务器的端口为 7091</span>

<span class="c1"># Spring 应用配置</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">seata-server</span>  <span class="c1"># 设置 Spring 应用的名称为 seata-server</span>

<span class="c1"># 日志配置</span>
<span class="na">logging</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span> <span class="s">classpath:logback-spring.xml</span>  <span class="c1"># 指定 Logback 的配置文件路径</span>
  <span class="na">file</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">${log.home:${user.home}/logs/seata}</span>  <span class="c1"># 指定日志文件的保存路径</span>
  <span class="na">extend</span><span class="pi">:</span>
    <span class="na">logstash-appender</span><span class="pi">:</span>
      <span class="na">destination</span><span class="pi">:</span> <span class="s">127.0.0.1:4560</span>  <span class="c1"># 将日志发送到 Logstash 的地址</span>
    <span class="na">kafka-appender</span><span class="pi">:</span>
      <span class="na">bootstrap-servers</span><span class="pi">:</span> <span class="s">127.0.0.1:9092</span>  <span class="c1"># Kafka 服务器的地址</span>
      <span class="na">topic</span><span class="pi">:</span> <span class="s">logback_to_logstash</span>  <span class="c1"># Kafka 日志主题</span>

<span class="c1"># 控制台用户配置</span>
<span class="na">console</span><span class="pi">:</span>
  <span class="na">user</span><span class="pi">:</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">seata</span>  <span class="c1"># 控制台用户名</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">seata</span>  <span class="c1"># 控制台密码</span>

<span class="c1"># Seata 配置</span>
<span class="na">seata</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="c1"># support: nacos, consul, apollo, zk, etcd3, file</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">file</span> <span class="c1"># 配置 Seata 的配置方式为文件模式</span>
  <span class="na">registry</span><span class="pi">:</span>
    <span class="c1"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">consul</span> <span class="c1"># 使用 Consul 作为注册中心</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">application</span><span class="pi">:</span> <span class="s">seata-server</span>  <span class="c1"># 在 Consul 中注册的服务名称</span>
      <span class="na">server-addr</span><span class="pi">:</span> <span class="s">127.0.0.1:8500</span>  <span class="c1"># Consul 服务器的地址</span>
      <span class="na">acl-token</span><span class="pi">:</span>  <span class="c1"># ACL token，用于 Consul（如果需要，可以设置为空）</span>
      <span class="na">cluster</span><span class="pi">:</span> <span class="s">seata1</span>  <span class="c1"># Consul 集群的名称,即控制中心出现的服务的名称</span>
  <span class="na">store</span><span class="pi">:</span>
    <span class="c1"># support: file 、 db 、 redis 、 raft</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">db</span> <span class="c1"># 配置 Seata 的存储方式为数据库模式</span>
    <span class="na">db</span><span class="pi">:</span>
      <span class="na">datasource</span><span class="pi">:</span> <span class="s">druid</span> <span class="c1"># 使用 Druid 作为数据源</span>
      <span class="na">db-type</span><span class="pi">:</span> <span class="s">mysql</span> <span class="c1"># 数据库类型为 MySQL</span>
      <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span> <span class="c1"># 数据库驱动类名</span>
      <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true</span> <span class="c1"># 数据库连接 URL</span>
      <span class="na">user</span><span class="pi">:</span> <span class="s">root</span> <span class="c1"># 数据库用户名</span>
      <span class="na">password</span><span class="pi">:</span> <span class="s">root</span> <span class="c1"># 数据库密码</span>

  <span class="na">security</span><span class="pi">:</span>
    <span class="na">secretKey</span><span class="pi">:</span> <span class="s">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span> <span class="c1"># 安全密钥</span>
    <span class="na">tokenValidityInMilliseconds</span><span class="pi">:</span> <span class="m">1800000</span> <span class="c1"># Token 的有效时间（30 分钟）</span>
    <span class="na">ignore</span><span class="pi">:</span>
      <span class="c1"># 指定不需要进行安全检查的 URL 路径</span>
      <span class="na">urls</span><span class="pi">:</span> <span class="s">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login,/version.json,/health,/error</span>
</code></pre></div></div>

<p>mysql新建数据库<code class="language-plaintext highlighter-rouge">seata</code>，并运行：<code class="language-plaintext highlighter-rouge">script\server\db\mysql.sql</code>，初始化表。（也可以使用<code class="language-plaintext highlighter-rouge">file</code> 模式）</p>

<p>然后先启动consul，再启动seata，可以访问<code class="language-plaintext highlighter-rouge">http://127.0.0.1:7091/</code>，进入后台，账号密码在上面的配置文件中，即<code class="language-plaintext highlighter-rouge">seata</code>。</p>

<p>客户端配置：</p>

<p>首先consul要注册上：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-consul-discovery<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">demo-service</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8500</span>
      <span class="na">discovery</span><span class="pi">:</span>
        <span class="na">service-name</span><span class="pi">:</span> <span class="s">demo-service</span>
        <span class="na">health-check</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">/actuator/health</span>
          <span class="na">interval</span><span class="pi">:</span> <span class="s">30s</span>

<span class="na">management</span><span class="pi">:</span>
  <span class="na">endpoints</span><span class="pi">:</span>
    <span class="na">web</span><span class="pi">:</span>
      <span class="na">exposure</span><span class="pi">:</span>
        <span class="na">include</span><span class="pi">:</span> <span class="s">health,info</span>
</code></pre></div></div>

<p>然后配置seata：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/io.seata/seata-spring-boot-starter --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.seata<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>seata-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">seata</span><span class="pi">:</span>
  <span class="na">registry</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="c1"># Consul 服务器的地址和端口</span>
      <span class="na">server-addr</span><span class="pi">:</span> <span class="s">127.0.0.1:8500</span>
      <span class="c1"># ACL token 用于访问 Consul。如果 Consul 配置了 ACL，需提供相应的 token。可以为空或省略。</span>
      <span class="na">acl-token</span><span class="pi">:</span>
      <span class="c1"># Consul 集群的名称。可以根据实际情况修改为相应的集群名称。</span>
      <span class="na">cluster</span><span class="pi">:</span> <span class="s">seata1</span>
    <span class="c1"># 注册中心类型，这里设置为 Consul</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">consul</span>

  <span class="c1"># 事务服务组的名称。这个配置用于指定事务服务组，Seata 将使用该组处理分布式事务。</span>
  <span class="c1"># 1.4.2 版本的默认事务分组名称为 `my_test_tx_group`，1.5 版本将改为 `default_tx_group`。</span>
  <span class="na">tx-service-group</span><span class="pi">:</span> <span class="s">default_tx_group</span>

  <span class="na">service</span><span class="pi">:</span>
    <span class="c1"># 事务分组与服务集群的映射关系</span>
    <span class="na">vgroup-mapping</span><span class="pi">:</span>
      <span class="c1"># 事务分组名称与服务集群名称的映射</span>
      <span class="c1"># 这里将 `default_tx_group` 映射到 `seata1` 服务集群</span>
      <span class="na">default_tx_group</span><span class="pi">:</span> <span class="s">seata1</span>

    <span class="c1"># 默认的服务集群配置</span>
    <span class="na">default</span><span class="pi">:</span>
      <span class="c1"># 服务集群列表。在此配置中，指定 `grouplist` 为 `consul`，表明 Seata 将使用 Consul 作为服务发现机制</span>
      <span class="na">grouplist</span><span class="pi">:</span> <span class="s">consul</span>
</code></pre></div></div>

<h3 id="tcc接口示例">TCC接口示例</h3>

<p>TCC 模式（Try-Confirm-Cancel）是一种确保分布式系统中事务一致性的方法，分为三个步骤：</p>

<ol>
  <li>Try：尝试执行某个操作，预留资源，确保所有操作能够成功执行，<strong>不实际执行操作，如果异常，必须能被Cancel阶段完全回滚</strong>。</li>
  <li>Confirm：所有操作成功执行后，提交资源的最终变更，<strong>实际执行操作</strong>。</li>
  <li>Cancel：如果操作失败，撤销预留的资源，回滚操作，<strong>注意：需要手动写代码还原状态</strong>。</li>
</ol>

<p>TCC模式确保了分布式事务的最终一致性，且通过 TCC 模式能减少锁竞争，提高性能。</p>

<p><strong>注意事项</strong></p>

<ul>
  <li>业务操作应确保幂等性，以防止重复操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Try</code> 阶段通常是“冻结资源”，而 <code class="language-plaintext highlighter-rouge">Confirm</code> 阶段是“实际扣减资源”。</li>
</ul>

<p>一个可能需要回滚，且是分布式调用的接口，现在需要<strong>拆分为3个方法</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@LocalTCC</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderServiceImpl</span> <span class="kd">implements</span> <span class="nc">OrderService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">OrderRepository</span> <span class="n">orderRepository</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"prepareCreateOrder"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareCreateOrder</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">userId</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Try 阶段：创建订单</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setProductId</span><span class="o">(</span><span class="n">productId</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setCount</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"PENDING"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">,</span> <span class="n">order</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">commit</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Confirm 阶段：确认订单</span>
        <span class="nc">Long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"CONFIRMED"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">rollback</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Cancel 阶段：取消订单</span>
        <span class="nc">Long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"CANCELLED"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><strong>以上即是对单一接口需要使用seata TCC模式的一个前提。运行流程</strong>：</p>

<ol>
  <li><strong>Try 阶段</strong>：在  <code class="language-plaintext highlighter-rouge">prepareCreateOrder</code> 方法中，会创建“未确认”的订单。</li>
  <li><strong>Confirm 阶段</strong>：如果整个事务正常执行，在 <code class="language-plaintext highlighter-rouge">commit</code> 方法中会<strong>确认订单状态</strong>。</li>
  <li><strong>Cancel 阶段</strong>：如果事务过程中出错，<code class="language-plaintext highlighter-rouge">rollback</code> 方法会<strong>取消订单</strong>。</li>
</ol>

<hr />

<p>以下是对它们的具体解释和关系：</p>

<p><strong>Try 阶段（<code class="language-plaintext highlighter-rouge">prepareCreateOrder</code>）</strong>：</p>

<ul>
  <li>检查业务资源是否满足执行条件（例如：检查库存是否足够）。预留或冻结资源，使得资源在本次操作中不可用（例如：检查库存是否足够、创建一个“待确认”的订单）。</li>
  <li>还可以记录一些重要的上下文信息（例如订单 ID），以便在后续的 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code> 阶段使用。</li>
  <li>这个阶段的操作<strong>必须是可补偿的</strong>（即可以撤销的）。</li>
  <li>如果这个阶段失败，整个事务将被终止，不会继续执行 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code>。</li>
  <li>如果在这个阶段出现异常抛出，则会进入<code class="language-plaintext highlighter-rouge">rollback</code>阶段。</li>
</ul>

<p>在上面的示例， <code class="language-plaintext highlighter-rouge">prepareCreateOrder</code> 方法中，订单服务会创建一个“待确认”的订单，其状态通常是 <code class="language-plaintext highlighter-rouge">PENDING</code> 或类似状态。</p>

<p>这个订单还没有被正式确认，这样做的目的是为订单创建过程预留一个位置，防止后续操作影响该资源。</p>

<p><strong>Confirm 阶段（<code class="language-plaintext highlighter-rouge">commit</code>）：</strong></p>

<ul>
  <li>当整个事务的所有 Try 阶段操作都成功时，Seata 将进入 <code class="language-plaintext highlighter-rouge">commit</code> 阶段。</li>
  <li>这个阶段正式确认事务操作，即最终提交资源变更（例如：实际扣减库存、确认订单，如将订单状态从 <code class="language-plaintext highlighter-rouge">PENDING</code> 改为 <code class="language-plaintext highlighter-rouge">CONFIRMED</code>），完成资源的最终变更。</li>
  <li><strong>注意</strong>：Confirm 操作必须保证最终一致性。它<strong>不应出现失败</strong>，因为这会影响事务的一致性。</li>
  <li>一旦进入 Confirm 阶段，意味着事务已经被提交，后续<strong>不能再回滚</strong>。</li>
</ul>

<p>在上面的示例，在 <code class="language-plaintext highlighter-rouge">commit</code> 方法中，将订单状态从 <code class="language-plaintext highlighter-rouge">PENDING</code> 更改为 <code class="language-plaintext highlighter-rouge">CONFIRMED</code>，表示订单已经正式生成。此时，订单信息已经固定下来，任何异常情况下都不应再取消订单。</p>

<p><strong>Cancel 阶段（<code class="language-plaintext highlighter-rouge">rollback</code>）：</strong></p>

<ul>
  <li>如果 Try 阶段执行失败或在业务中途发生了异常，Seata 会自动调用 <code class="language-plaintext highlighter-rouge">rollback</code> 方法来撤销所有已做的操作。</li>
  <li><strong>撤销 Try 阶段的操作</strong>，回滚已做的变更（例如：释放预扣库存、取消订单）。</li>
  <li>Rollback 需要保证事务的可补偿性，即<strong>能撤销所有在 Try 阶段完成的操作</strong>（例如，如果库存扣减操作成功，但确认阶段失败，你需要恢复库存）。</li>
</ul>

<p>在上面的示例，在 <code class="language-plaintext highlighter-rouge">rollback</code> 方法中，如果订单处于 <code class="language-plaintext highlighter-rouge">PENDING</code> 状态，则将其状态更改为 <code class="language-plaintext highlighter-rouge">CANCELLED</code>，表明订单被取消。这样，整个事务回滚了，订单不会被正式创建，用户也不会产生实际的购买行为。</p>

<h3 id="注解说明">注解说明</h3>

<p><strong><code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解需要<strong>标记在 <code class="language-plaintext highlighter-rouge">try</code> 阶段的方法</strong>，用于指定 TCC 事务的提交和回滚方法。具体参数说明如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 事务的名称，用于标识这个 TCC 事务。</li>
  <li><code class="language-plaintext highlighter-rouge">commitMethod</code>: 提交方法的名称。当事务被确认（Confirm）时调用。</li>
  <li><code class="language-plaintext highlighter-rouge">rollbackMethod</code>: 回滚方法的名称。当事务被取消（Cancel）时调用。</li>
</ul>

<p>这些参数帮助 Seata 在事务的 Confirm 和 Cancel 阶段正确地调用相应的方法，确保分布式事务的正确性。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@LocalTCC</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@LocalTCC</code> 注解用于标识一个实现了 TCC 模式的本地事务服务。它通常不需要参数，它的主要作用是标识类中哪些方法是需要支持 TCC 事务的。Seata 会扫描带有 <code class="language-plaintext highlighter-rouge">@LocalTCC</code> 注解的类，并自动将它们纳入 TCC 事务管理范围。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 是 Seata TCC 模式下用于标识在 TCC 事务的 <code class="language-plaintext highlighter-rouge">Try</code> 方法中需要传递到事务上下文中的参数的注解。这个注解可以帮助 Seata 将这些参数从 <code class="language-plaintext highlighter-rouge">Try</code> 阶段传递到 <code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。</p>

<p><strong>主要属性</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">value</code> / <code class="language-plaintext highlighter-rouge">paramName</code></strong>: 用于指定参数的名称，默认值为空字符串。<code class="language-plaintext highlighter-rouge">value</code> 和 <code class="language-plaintext highlighter-rouge">paramName</code> 是等效的，主要用于获取参数名称以在上下文中查找。</p>

<p><strong><code class="language-plaintext highlighter-rouge">isShardingParam</code></strong> (已废弃):表示是否是分片参数，但这个属性现在已经不再使用。</p>

<p><strong><code class="language-plaintext highlighter-rouge">index</code></strong>:用于指定参数在参数列表中的索引位置。此属性主要用于处理参数是以列表形式传递的情况。</p>

<p><strong><code class="language-plaintext highlighter-rouge">isParamInProperty</code></strong>:表示参数是否是对象的属性。如果 <code class="language-plaintext highlighter-rouge">index</code> 大于等于 0，这个属性指定是否需要从对象的属性中获取参数值。</p>

<p><strong>使用示例</strong></p>

<p>假设你有一个 <code class="language-plaintext highlighter-rouge">Try</code> 方法的签名如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareDecreaseInventory</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span>
</code></pre></div></div>

<p>可以使用 <code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 注解来指定哪些参数需要传递到事务上下文中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"InventoryService"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareDecreaseInventory</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span>
                                         <span class="nd">@BusinessActionContextParameter</span><span class="o">(</span><span class="n">paramName</span> <span class="o">=</span> <span class="s">"productId"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span>
                                         <span class="nd">@BusinessActionContextParameter</span><span class="o">(</span><span class="n">paramName</span> <span class="o">=</span> <span class="s">"count"</span><span class="o">)</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Try 阶段的逻辑</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">productId</code> 和 <code class="language-plaintext highlighter-rouge">count</code> 参数会被传递到 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中，这样它们可以在 <code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 方法中使用。</p>

<p><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 注解的作用类似于 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的 <code class="language-plaintext highlighter-rouge">addActionContext</code> 方法。通过这个注解，可以在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段自动将指定的参数添加到 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中，而不需要手动调用 <code class="language-plaintext highlighter-rouge">addActionContext</code> 方法，Seata 会自动处理这些参数的传递和保存。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 是 Seata 提供的一个注解，用于标记一个全局事务的开始。它主要用于处理分布式事务的场景，将多个本地事务组合成一个全局事务。</p>

<p><strong>作用</strong></p>

<p><strong>开启全局事务</strong>: <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 用于标记一个方法为全局事务的入口点。Seata 会为这个方法创建一个全局事务，并将方法内部调用的所有涉及的本地事务都纳入这个全局事务中。</p>

<p><strong>事务协调</strong>: 在方法执行过程中，Seata 会跟踪并协调这个全局事务中涉及的所有本地事务。如果方法执行成功，Seata 会提交全局事务；如果方法抛出异常，则会回滚全局事务，确保数据一致性。</p>

<p><strong>全局事务的传播</strong>: <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 会将其内部的所有本地事务纳入一个全局事务中，从而实现事务的分布式管理和一致性。</p>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解是 Seata 的核心注解之一，用于定义全局事务的行为和配置。它的参数允许你精确控制事务的超时、回滚策略、锁策略等。在配置分布式事务时，这些参数帮助确保事务的一致性和正确性。</p>

<p><strong>参数详解</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">timeoutMills</code></strong>:指定全局事务的超时时间（单位：毫秒）。如果全局事务在这个时间内没有完成，Seata 会<strong>强制回滚</strong>这个事务。默认值为<code class="language-plaintext highlighter-rouge">60000ms</code>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">name</code></strong>:指定全局事务的名称。可以用来在日志和监控中识别这个全局事务。默认值: 空字符串。</p>

<p><strong><code class="language-plaintext highlighter-rouge">rollbackFor</code></strong>:指定<strong>需要回滚</strong>的异常类型。当方法执行过程中抛出这些异常时，全局事务会被回滚。默认值: 空数组。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">rollbackForClassName</code></strong>:指定<strong>需要回滚</strong>的异常类名。与 <code class="language-plaintext highlighter-rouge">rollbackFor</code> 类似，但使用异常类名的字符串形式。默认值：空数组。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">rollbackForClassName</span> <span class="o">=</span> <span class="o">{</span><span class="s">"java.lang.RuntimeException"</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">noRollbackFor</code></strong>:指定不需要回滚的异常类型。当方法抛出这些异常时，全局事务<strong>不会回滚</strong>。默认值: 空数组。<strong>示例</strong>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">noRollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">noRollbackForClassName</code></strong>: 指定不需要回滚的异常类名。与 <code class="language-plaintext highlighter-rouge">noRollbackFor</code> 类似，但使用异常类名的字符串形式。默认值: 空数组，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">noRollbackForClassName</span> <span class="o">=</span> <span class="o">{</span><span class="s">"java.lang.IllegalArgumentException"</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">propagation</code></strong>:指定全局事务的传播行为。定义了事务的传播方式。默认值: <code class="language-plaintext highlighter-rouge">Propagation.REQUIRED</code>，即如果 transaction 存在，则使用当前事务执行，否则使用新事务执行。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="nc">Propagation</span><span class="o">.</span><span class="na">REQUIRES_NEW</span><span class="o">)</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryInterval</code></strong>:自定义全局锁的重试间隔时间（单位：毫秒）。用于覆盖全局配置中的锁重试间隔。默认值: 0，表示使用全局配置。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockRetryInterval</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">)</span> 
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryInternal</code></strong> (已过时):自定义全局锁的重试间隔时间（单位：毫秒）。与 <code class="language-plaintext highlighter-rouge">lockRetryInterval</code> 类似，但这个参数已经过时，不再推荐使用。默认值: 0，示例:</p>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryTimes</code></strong>:自定义全局锁的重试次数。用于覆盖全局配置中的锁重试次数。默认值: -1，表示使用全局配置，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockRetryTimes</span> <span class="o">=</span> <span class="mi">5</span><span class="o">)</span> 
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockStrategyMode</code></strong>:指定锁的策略模式。可以选择乐观锁（<code class="language-plaintext highlighter-rouge">OPTIMISTIC</code>）或悲观锁（<code class="language-plaintext highlighter-rouge">PESSIMISTIC</code>）。默认值: <code class="language-plaintext highlighter-rouge">LockStrategyMode.PESSIMISTIC</code>，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockStrategyMode</span> <span class="o">=</span> <span class="nc">LockStrategyMode</span><span class="o">.</span><span class="na">OPTIMISTIC</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="使用全局事务">使用全局事务</h3>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解主要用于管理分布式事务的全局事务，确保在不同微服务之间的操作能够保持一致性。它的作用主要集中在 <strong>Try</strong>、<strong>Confirm</strong> 和 <strong>Cancel</strong> 阶段的事务管理上。</p>

<p>在使用 <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解的方法中，也可以自由地使用普通的查询接口或服务方法，只要它们本身不涉及事务的提交或回滚。查询接口一般不参与全局事务的管理，因此不需要处理回滚或提交的问题。具体来说，这些查询接口可以是：</p>

<ul>
  <li><strong>数据库查询</strong>：如使用 MyBatis、JPA、Hibernate 等进行的数据库查询。</li>
  <li><strong>调用其他服务</strong>：如调用其他微服务的 REST API 或 Feign 客户端。</li>
</ul>

<p><strong>需要注意的事项</strong></p>

<p><strong>事务一致性</strong>：</p>

<ul>
  <li>如果<code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 方法中使用了普通的查询接口，需要确保这些操作不会影响到全局事务的一致性。</li>
  <li>确保在全局事务的 Try 阶段中进行的所有操作都能够在 Confirm 和 Cancel 阶段得到正确的处理。</li>
</ul>

<p><strong>性能影响</strong>：</p>

<ul>
  <li>如果查询操作涉及到大量的数据或复杂的逻辑，这可能会对全局事务的性能产生影响。</li>
  <li>确保查询操作是优化过的，并且不会导致长时间的锁定或延迟。</li>
</ul>

<p><strong>异常处理</strong>：</p>

<ul>
  <li>在全局事务中，如果查询接口出现异常，确保这些异常能够被捕获并正确处理，以避免事务的回滚机制被破坏。</li>
</ul>

<p>使用全局事务，调用之前适配好分布式事务的接口示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span>
<span class="nd">@Autowired</span>
<span class="kd">private</span> <span class="nc">OrderService</span> <span class="n">orderService</span><span class="o">;</span>
<span class="nd">@GlobalTransactional</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test1"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test1</span><span class="o">(){</span>
	<span class="n">orderService</span><span class="o">.</span><span class="na">prepareCreateOrder</span><span class="o">(...);</span>
    <span class="o">...</span>
<span class="o">}</span>
<span class="o">...</span>
</code></pre></div></div>

<h3 id="各阶段的数据传递">各阶段的数据传递</h3>

<p>在Seata的TCC（Try-Confirm-Cancel）模式中，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是一个非常关键的对象，它用于在分布式事务的各个阶段（Try、Confirm、Cancel）之间传递数据和上下文信息。它帮助事务中的每个阶段共享信息，确保整个TCC事务的正确执行。</p>

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是由 Seata 框架在调用 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解的 TCC 接口时<strong>自动创建和传递的</strong>。它是分布式事务的上下文对象，包含了事务ID（XID）以及在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段生成的业务参数。以下是 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的来源和生命周期：</p>

<p><strong>在Try阶段生成：</strong></p>
<ul>
  <li>当执行标记为 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 的方法时，Seata会自动创建一个 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象会自动传递给 <code class="language-plaintext highlighter-rouge">Try</code> 方法的参数。</li>
  <li>在 <code class="language-plaintext highlighter-rouge">Try</code> 方法中，可以将需要共享的数据存入 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，这些数据将在后续的 <code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段使用。</li>
</ul>

<p><strong>在Confirm和Cancel阶段使用：</strong></p>
<ul>
  <li>当事务成功（调用 <code class="language-plaintext highlighter-rouge">Confirm</code> 方法）或回滚（调用 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法）时，Seata会将同样的 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象传递给对应的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法可以从 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中获取在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段存储的数据（如业务ID、状态等），确保业务的一致性处理。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的作用</strong></p>

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的主要作用是<strong>传递事务上下文数据</strong>，确保分布式事务各个阶段的数据一致性和可用性。即：</p>

<p><strong>携带全局事务ID（XID）：</strong>Seata TCC事务的每个阶段（Try、Confirm、Cancel）需要关联同一个全局事务ID（XID）。<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中包含了这个事务ID，确保所有阶段都属于同一事务。</p>

<p><strong>传递业务参数：</strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 允许在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段传递参数，并在 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段读取这些参数。你可以在 <code class="language-plaintext highlighter-rouge">Try</code> 方法中将需要的数据（例如订单ID、用户ID等）放入 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，并在 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 中使用。</p>

<p><strong>支持幂等性处理：</strong>在分布式系统中，网络波动或其他异常情况可能会导致 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法被多次调用。通过 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递的数据，可以用来做幂等性检查，避免重复执行业务操作。</p>

<p><strong>支持悬挂控制：</strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 还可以用于处理“悬挂问题”，即当 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段执行在 <code class="language-plaintext highlighter-rouge">Try</code> 之前时，通过 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 可以检测是否存在 <code class="language-plaintext highlighter-rouge">Try</code> 的执行，进而决定是否执行 <code class="language-plaintext highlighter-rouge">Cancel</code>。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code>具有以下方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">getActionContext()</code></strong>：获取在 Try 阶段存储的业务数据。通常在 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code> 阶段，通过 <code class="language-plaintext highlighter-rouge">getActionContext()</code> 方法获取在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段存储的数据。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"key"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li><strong>参数</strong>：<code class="language-plaintext highlighter-rouge">key</code> 是存储数据时的键。</li>
  <li><strong>返回值</strong>：返回与该键关联的值，类型为 <code class="language-plaintext highlighter-rouge">Object</code>，需要进行类型转换。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">addActionContext()</code></strong>：在 Try 阶段保存业务数据，用于后续的 Confirm 或 Rollback 阶段使用。在 <code class="language-plaintext highlighter-rouge">prepare</code> 方法中，调用 <code class="language-plaintext highlighter-rouge">addActionContext()</code> 将业务数据存储在上下文中。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">context</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">,</span> <span class="n">orderId</span><span class="o">);</span>
<span class="n">context</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"userId"</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li><strong>参数</strong>：<code class="language-plaintext highlighter-rouge">key</code>：数据的键，<code class="language-plaintext highlighter-rouge">value</code>：要存储的数据值。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">getXid()</code></strong>：获取全局事务ID（<code class="language-plaintext highlighter-rouge">Xid</code>），用于标识当前事务，在事务处理或日志中非常有用。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">xid</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getXid</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getBranchId()</code></strong>：获取当前分支事务的ID。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">branchId</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBranchId</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isDelayReporting()</code></strong>：判断当前事务是否设置了延迟上报。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">isDelayed</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">isDelayReporting</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getPhase()</code></strong>：获取当前事务的阶段（如 Try、Confirm、Rollback）。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BusinessActionContext</span><span class="o">.</span><span class="na">BusinessActionContextPhase</span> <span class="n">phase</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getPhase</span><span class="o">();</span>
</code></pre></div></div>

<ul>
  <li><strong>返回值</strong>：返回事务的当前阶段，类型为 <code class="language-plaintext highlighter-rouge">BusinessActionContext.BusinessActionContextPhase</code>。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code></strong> <strong>是必须的</strong>。它是Seata框架用来传递事务上下文信息的关键组件，即在TCC这三个方式的第一个形参必须是<code class="language-plaintext highlighter-rouge">BusinessActionContext</code>。</p>

<p>即使你的业务代码中不直接使用 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，你仍然需要在 TCC 接口方法中留一个 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 作为第一个参数，以便 Seata 能够正常控制事务。它负责管理和传递事务上下文信息，从而让 Seata 知道如何协调 Try、Confirm 和 Cancel 阶段的操作。</p>

<hr />

<p>对于使用<code class="language-plaintext highlighter-rouge">BusinessActionContext</code>传递信息，还有一些注意的问题：</p>

<p>在 Seata TCC 模式下，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 会通过分布式系统进行传递，这个过程通常涉及到<strong>序列化</strong>和<strong>反序列化</strong>。在序列化和反序列化的过程中，Java 对象的类型可能发生变化，尤其是涉及基础数据类型时。</p>

<p>示例：<code class="language-plaintext highlighter-rouge">long</code> 类型传值导致的类型变化</p>

<p><strong>Try 阶段：传递 <code class="language-plaintext highlighter-rouge">long</code> 类型值</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@LocalTCC</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TCCInventoryChange</span> <span class="o">{</span>

    <span class="nd">@Transactional</span>
    <span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TCCInventoryChange"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepare</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="kt">long</span> <span class="n">productId</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 将 long 类型的 productId 放入 ActionContext</span>
        <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">,</span> <span class="n">productId</span><span class="o">);</span>  
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>  <span class="c1">// 返回成功</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Commit 阶段：取出 <code class="language-plaintext highlighter-rouge">productId</code></strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">commit</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 试图以 long 类型取出 productId</span>
    <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">);</span>
    <span class="c1">// 处理业务逻辑...</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是，实际在执行时可能会抛出 <code class="language-plaintext highlighter-rouge">ClassCastException</code>，因为 <code class="language-plaintext highlighter-rouge">actionContext.getActionContext("productId")</code> 实际上返回的是 <code class="language-plaintext highlighter-rouge">Integer</code>，而不是 <code class="language-plaintext highlighter-rouge">Long</code>，即使我们在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段传递的是 <code class="language-plaintext highlighter-rouge">long</code> 类型。</p>

<p><strong>问题出现原因：序列化导致的类型变化</strong></p>

<p>这是由于 Java 序列化机制在处理基础数据类型时的行为不同。例如，Java 会自动进行类型提升和转换。在 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 经过序列化和反序列化后，Seata 可能将原本的 <code class="language-plaintext highlighter-rouge">long</code> 类型转换成了 <code class="language-plaintext highlighter-rouge">Integer</code>。</p>

<p>详细说明</p>

<p><strong>序列化与反序列化过程</strong>
   在分布式系统中，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 会在不同的节点间传递，传递时会进行序列化和反序列化。序列化是指将对象转换为字节流以便传输，而反序列化则是将字节流重新转换为对象。在序列化过程中，某些数据类型，特别是基础类型（如 <code class="language-plaintext highlighter-rouge">long</code>、<code class="language-plaintext highlighter-rouge">int</code>），有时会在反序列化后出现类型变化。例如，<code class="language-plaintext highlighter-rouge">long</code> 类型可能会因为存储方式在反序列化后变成 <code class="language-plaintext highlighter-rouge">Integer</code>。</p>

<p><strong>基础类型自动转换</strong>
   Java 在处理基础类型时，可能会进行自动的类型提升或缩减。例如，如果你存储一个数值类型较小的 <code class="language-plaintext highlighter-rouge">long</code>，它在某些情况下可能会被自动转换为 <code class="language-plaintext highlighter-rouge">Integer</code>。特别是在序列化时，Java 可能将小范围的 <code class="language-plaintext highlighter-rouge">long</code>（如 <code class="language-plaintext highlighter-rouge">long</code> 值不超过 <code class="language-plaintext highlighter-rouge">Integer.MAX_VALUE</code>）转换为 <code class="language-plaintext highlighter-rouge">Integer</code>，以节省存储空间。</p>

<p><strong>Seata 内部机制</strong>
   Seata 在 TCC 模式下可能通过 JSON 序列化（如使用 Jackson 或 FastJSON）来传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>。在某些情况下，JSON 序列化的机制会对数值类型进行优化，并且在反序列化时，如果没有明确指定类型，较小范围的 <code class="language-plaintext highlighter-rouge">long</code> 会被当作 <code class="language-plaintext highlighter-rouge">Integer</code> 反序列化。</p>

<p>解决方案</p>

<p>为了避免这种类型转换的问题，尤其是在处理基础数据类型时，可以采取以下几种措施：</p>

<p><strong>使用显式类型检查和转换</strong>
   在获取上下文参数时，显式地检查对象的类型，避免直接进行类型转换。可以先检查 <code class="language-plaintext highlighter-rouge">Object</code> 的类型再进行强制转换：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Object</span> <span class="n">productIdObj</span> <span class="o">=</span> <span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">);</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">productIdObj</span> <span class="k">instanceof</span> <span class="nc">Long</span><span class="o">)</span> <span class="o">{</span>
       <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">productIdObj</span><span class="o">;</span>
   <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">productIdObj</span> <span class="k">instanceof</span> <span class="nc">Integer</span><span class="o">)</span> <span class="o">{</span>
       <span class="c1">// 处理 long 被序列化为 Integer 的情况</span>
       <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">((</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">productIdObj</span><span class="o">).</span><span class="na">longValue</span><span class="o">();</span>
   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
       <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"Unexpected type for productId"</span><span class="o">);</span>
   <span class="o">}</span>
</code></pre></div></div>

<p><strong>序列化时强制指定类型</strong>
   在传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 数据时，使用 <code class="language-plaintext highlighter-rouge">Long</code> 对象来代替基础类型 <code class="language-plaintext highlighter-rouge">long</code>。这样，序列化时会保留对象的精确类型：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">,</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">productId</span><span class="o">));</span>
</code></pre></div></div>

<p><strong>使用 JSON 序列化配置</strong>
   如果使用的是 JSON 序列化框架（如 Jackson 或 FastJSON），可以通过配置序列化框架来确保数值类型不会在序列化或反序列化过程中发生变化。例如，使用 Jackson 的 <code class="language-plaintext highlighter-rouge">DeserializationFeature.USE_LONG_FOR_INTS</code> 选项，可以强制将所有整数类型都反序列化为 <code class="language-plaintext highlighter-rouge">long</code> 类型。</p>

<p>使用 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递基础类型时，序列化导致类型变化的情况主要发生在基础类型（如 <code class="language-plaintext highlighter-rouge">long</code> 和 <code class="language-plaintext highlighter-rouge">int</code>）的自动转换过程中。为了避免这种情况，建议在代码中加入类型检查，或者通过序列化框架的配置确保类型的一致性。</p>

<h3 id="方法返回值类型">方法返回值类型</h3>

<p>在 Seata TCC 模式下，方法的返回值并没有严格的要求，但有一些约定和最佳实践，特别是在 <code class="language-plaintext highlighter-rouge">Try</code>、<code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段执行时：</p>

<p><strong>Try 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Try</code> 方法需要返回一个布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>）的值，表示准备操作是否成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示 Try 阶段执行成功，Seata 会继续执行 <code class="language-plaintext highlighter-rouge">Confirm</code> 阶段。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示 Try 阶段执行失败，Seata 会立即执行 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。</li>
</ul>

<p><strong>Confirm 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Confirm</code> 方法的返回值通常也是布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>），用于告诉 Seata 确认操作是否执行成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示 <code class="language-plaintext highlighter-rouge">Confirm</code> 操作成功，事务可以提交。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示 <code class="language-plaintext highlighter-rouge">Confirm</code> 操作失败，但一般不会影响全局事务，因为全局事务在 <code class="language-plaintext highlighter-rouge">Try</code> 成功后已经被认为提交。</li>
</ul>

<p><strong>Cancel 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Cancel</code> 方法的返回值同样是布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>），用于告诉 Seata 回滚操作是否执行成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示回滚成功，Seata 会认为事务已经被成功回滚。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示回滚失败，此时 Seata 可能会进行重试，直到回滚成功或达到重试上限。</li>
</ul>

<p><strong>返回值的影响</strong></p>

<ul>
  <li><strong>Try 阶段返回值</strong>：<strong>影响全局事务的决策</strong>，如果 Try 返回 <code class="language-plaintext highlighter-rouge">false</code>，Seata 会立即调用 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法，标记事务失败。</li>
  <li><strong>Confirm 阶段返回值</strong>：理论上不会影响全局事务的提交，即使 <code class="language-plaintext highlighter-rouge">Confirm</code> 方法失败，Seata 也会认为事务已经提交成功。</li>
  <li><strong>Cancel 阶段返回值</strong>：如果 <code class="language-plaintext highlighter-rouge">Cancel</code> 返回 <code class="language-plaintext highlighter-rouge">false</code>，Seata 会进行<strong>重试</strong>，确保事务资源被成功回滚。</li>
</ul>

<p><strong>其他返回值</strong></p>

<p>虽然 TCC 的标准返回类型为 <code class="language-plaintext highlighter-rouge">boolean</code>，但如果你有自定义需求，可以返回其他类型的值， Seata <strong>仅关心 <code class="language-plaintext highlighter-rouge">Try</code> 方法的返回值是否为 <code class="language-plaintext highlighter-rouge">true</code></strong>，来决定是否继续 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code>。</p>

<h3 id="调用接口">调用接口</h3>

<p>在Seata的TCC模式下，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是由Seata自动注入的，但它<strong>必须</strong>放在TCC接口方法的<strong>第一个参数位置</strong>，然后才是业务参数。</p>

<p>Seata的TCC拦截器要求 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是第一个参数，这样Seata才能在执行全局事务的各个阶段时自动注入这个上下文。如果放在其他位置，Seata无法识别该参数，从而导致TCC事务处理失败。</p>

<p>当你调用 TCC 的 <code class="language-plaintext highlighter-rouge">prepare</code>方法时，不需要显式创建或传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，Seata会在执行拦截时自动注入。也就是说，当你调用时，可以将 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递为 <code class="language-plaintext highlighter-rouge">null</code>，Seata在执行过程中会为其生成并注入实际的上下文对象。</p>

<p>对于之前省略实参的：<code class="language-plaintext highlighter-rouge">orderService.prepareCreateOrder(...);</code>，正确的调用方式为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">orderService</span><span class="o">.</span><span class="na">prepareCreateOrder</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="n">userId</span><span class="o">,</span><span class="n">productId</span><span class="o">,</span><span class="n">count</span><span class="o">);</span>
</code></pre></div></div>

<p>另外，在Seata的TCC模式下，<code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 是由Seata在全局事务的不同阶段<strong>自动调用</strong>的。你只需要在业务代码中显式调用 <code class="language-plaintext highlighter-rouge">prepare</code>（也称为Try方法）来尝试预留资源。</p>

<p>具体来说：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">prepare</code>（Try阶段）是由你的业务代码<strong>显式调用</strong>的，用于预留资源或执行其他初步操作。</li>
  <li><code class="language-plaintext highlighter-rouge">commit</code>（Confirm阶段）和<code class="language-plaintext highlighter-rouge">rollback</code>（Cancel阶段）会根据全局事务的执行结果（成功或失败）由Seata自动调用，以完成事务提交或回滚。</li>
</ul>

<p><strong>你不需要也不能直接调用 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code>，它们会根据全局事务的状态自动触发</strong>。</p>

<h3 id="与本地事务的比较">与本地事务的比较</h3>

<p>本地事务（使用 <code class="language-plaintext highlighter-rouge">@Transactional</code>）</p>

<ul>
  <li><strong>回滚机制</strong>：当在一个单一的数据源中操作时，Spring 的 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解可以在发生异常时自动进行回滚。这意味着如果在事务过程中出现任何运行时异常（或被配置为回滚的异常），Spring 会自动回滚事务，撤销所有对数据库的更改，确保数据一致性。</li>
  <li><strong>事务管理</strong>：Spring 自动管理事务的开始、提交和回滚。只需配置 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解，并确保异常能够被捕获并且未被处理。</li>
</ul>

<p>分布式事务（使用 Seata TCC、XA、等）</p>

<ul>
  <li><strong>事务模型</strong>：在分布式环境中，事务涉及多个服务或数据源，不能依赖于单一的事务管理机制。因此，需要使用分布式事务解决方案（如 Seata、XA、TCC）来协调这些事务的执行。
    <ul>
      <li><strong>TCC</strong>（Try-Confirm-Cancel）：分为 <code class="language-plaintext highlighter-rouge">Try</code>、<code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。<strong>需要自己实现这些阶段的逻辑，以确保在失败情况下能够进行回滚或恢复</strong>。</li>
      <li><strong>XA</strong>：基于两阶段提交协议，适用于需要强一致性的分布式事务，但实现和维护较复杂。</li>
    </ul>
  </li>
  <li><strong>自定义回滚逻辑</strong>：分布式事务通常需要手动管理回滚逻辑。如果某个服务的操作失败，需要确保其他服务能够正确地执行回滚操作，恢复系统到一致性状态。这通常通过实现 <code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 方法来完成。</li>
</ul>

<p>为什么分布式事务需要更多手动处理？</p>

<ul>
  <li><strong>复杂性</strong>：在分布式环境中，事务涉及多个服务或数据源，它们可能在网络上分布，事务的协调和管理变得更加复杂。</li>
  <li><strong>一致性保障</strong>：为了确保系统的一致性和完整性，需要手动实现各个阶段的逻辑，确保在任何阶段的失败都能够正确地进行回滚或恢复。</li>
  <li><strong>网络和系统故障</strong>：分布式系统中可能会遇到网络延迟、故障或其他不可预见的问题，这要求分布式事务解决方案具备更强的容错性和恢复能力。</li>
</ul>

<p>总之，分布式事务相较于本地事务更复杂，需要额外的事务协调机制和手动管理回滚逻辑。然而，它们为分布式系统提供了必要的一致性保证，使得在多服务或多数据源环境中进行可靠的事务处理成为可能。</p>

<hr />

<p>在使用分布式事务框架（如 Seata 的 TCC 模式）时，<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解在每个方法中的作用和意义如下：</p>

<p><strong>确保本地事务的一致性</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 注解用于标记一个方法需要运行在事务中。它确保方法内的数据库操作是原子的，即要么全部成功，要么全部失败。在 TCC 模式下，即使分布式事务的各个步骤有独立的事务控制，<code class="language-plaintext highlighter-rouge">@Transactional</code> 仍然是必要的：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">prepare</code> 方法</strong>：确保即使在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段操作失败或发生异常，本地事务也能正确回滚，避免数据不一致。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">commit</code> 方法</strong>：确保在 <code class="language-plaintext highlighter-rouge">commit</code> 阶段对数据库的操作是原子的。虽然 <code class="language-plaintext highlighter-rouge">commit</code> 只是确认操作，但仍然需要事务保证操作的一致性。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">rollback</code> 方法</strong>：如果在 <code class="language-plaintext highlighter-rouge">commit</code> 阶段失败，<code class="language-plaintext highlighter-rouge">rollback</code> 方法应当回滚 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段的操作，<code class="language-plaintext highlighter-rouge">@Transactional</code> 确保这一回滚是安全的。</li>
</ul>

<p><strong>提供事务隔离和一致性</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 控制事务的隔离级别、传播行为、超时时间等，确保方法内部的数据库操作符合预期的事务要求：</p>

<ul>
  <li><strong>隔离级别</strong>：防止不同事务之间的干扰，避免读到不一致的数据。</li>
  <li><strong>传播行为</strong>：确定方法执行时事务的传播方式，比如是否加入到当前事务中。</li>
</ul>

<p><strong>异常处理和事务回滚</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 确保方法内部抛出的运行时异常（unchecked exception）会导致事务回滚。这样可以保证在遇到异常时，所有的数据库操作都能够被回滚到操作之前的状态，保持数据的一致性。</p>

<p>虽然 TCC 模式主要处理分布式事务的协调，<strong>但在每个本地事务中，使用 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解仍然是确保数据一致性的关键。</strong></p>

<h3 id="事务幂等悬挂和空回滚">事务幂等、悬挂和空回滚</h3>

<p><strong>空回滚</strong></p>

<p>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。</p>

<p>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</p>

<p><strong>业务悬挂</strong></p>

<p>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</p>

<p>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</p>

<hr />

<p>TCC 模式中存在的三大问题是幂等、悬挂和空回滚，而新版seata解决了上述问题：<a href="https://seata.apache.org/zh-cn/blog/seata-tcc-fence/">链接</a>。</p>

<p>在 Seata1.5.1 版本中，增加了一张事务控制表，表名是 <code class="language-plaintext highlighter-rouge">tcc_fence_log</code> 来解决这个问题。 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解中有一个属性 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 就是来指定是否开启这个机制，这个属性值默认是 <code class="language-plaintext highlighter-rouge">false</code>。</p>

<p>首先，在自己的数据库添加一个事务控制表：<code class="language-plaintext highlighter-rouge">tcc_fence_log</code>， 建表语句如下（MySQL 语法）：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="nv">`tcc_fence_log`</span>
<span class="p">(</span>
    <span class="nv">`xid`</span>           <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>  <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'global id'</span><span class="p">,</span>
    <span class="nv">`branch_id`</span>     <span class="nb">BIGINT</span>        <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'branch id'</span><span class="p">,</span>
    <span class="nv">`action_name`</span>   <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'action name'</span><span class="p">,</span>
    <span class="nv">`status`</span>        <span class="nb">TINYINT</span>       <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'status(tried:1;committed:2;rollbacked:3;suspended:4)'</span><span class="p">,</span>
    <span class="nv">`gmt_create`</span>    <span class="nb">DATETIME</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'create time'</span><span class="p">,</span>
    <span class="nv">`gmt_modified`</span>  <span class="nb">DATETIME</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'update time'</span><span class="p">,</span>
    <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="nv">`xid`</span><span class="p">,</span> <span class="nv">`branch_id`</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nv">`idx_gmt_modified`</span> <span class="p">(</span><span class="nv">`gmt_modified`</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nv">`idx_status`</span> <span class="p">(</span><span class="nv">`status`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span> <span class="o">=</span> <span class="n">InnoDB</span>
<span class="k">DEFAULT</span> <span class="n">CHARSET</span> <span class="o">=</span> <span class="n">utf8mb4</span><span class="p">;</span>
</code></pre></div></div>

<p>然后在<code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code>，开启<code class="language-plaintext highlighter-rouge">useTCCFence</code>即可。</p>

<p>开启<code class="language-plaintext highlighter-rouge">useTCCFence</code>后，TCC阶段的转换逻辑会发生变化：</p>

<table>
  <thead>
    <tr>
      <th>阶段</th>
      <th>useTCCFence</th>
      <th>异常</th>
      <th>程序停止</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>try</td>
      <td>true</td>
      <td>暂停</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Confirm</td>
      <td>true</td>
      <td>重试</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Cancel</td>
      <td>true</td>
      <td>重试</td>
      <td>重试</td>
    </tr>
    <tr>
      <td>try</td>
      <td>false</td>
      <td>多次执行Cancel</td>
      <td>无操作/还原（加本地事务）</td>
    </tr>
    <tr>
      <td>Confirm</td>
      <td>false</td>
      <td>多次重试</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Cancel</td>
      <td>false</td>
      <td>多次重试</td>
      <td>无操作</td>
    </tr>
  </tbody>
</table>

<p>开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后的行为主要与解决 TCC 模式下的悬挂问题有关。悬挂问题指的是在 TCC 模式下，当 Confirm 或 Cancel 阶段因为某种原因没有被执行时，可能会导致资源长时间处于锁定状态，影响系统的正常运行。<code class="language-plaintext highlighter-rouge">useTCCFence</code> 就是用来防止这类问题的发生。</p>

<p>以下是开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后的行为总结：</p>

<ol>
  <li>
    <p><strong>记录尝试操作</strong>：当开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后，在执行 TCC 的 Try 阶段时，Seata 会记录这次操作，并将其持久化到数据库中。</p>
  </li>
  <li>
    <p><strong>检查确认/取消请求</strong>：在 Confirm 或 Cancel 阶段到来之前，Seata 会先检查是否有对应的 Try 操作记录存在。如果没有找到匹配的 Try 记录，则认为这是一个非法的请求，可能是由于网络重试或其他异常情况导致的重复调用。</p>
  </li>
  <li>
    <p><strong>避免悬挂事务</strong>：通过上述机制，可以有效地避免因 Confirm 或 Cancel 请求丢失而造成的悬挂事务问题。如果系统重启或服务宕机后恢复，未完成的 TCC 事务可以通过这些记录来进行补偿处理。</p>
  </li>
  <li>
    <p><strong>清理过期记录</strong>：对于那些已经完成了 Confirm 或 Cancel 操作的 Try 记录，Seata 会在一段时间之后自动清理它们以节省存储空间并保持系统清洁。</p>
  </li>
  <li>
    <p><strong>提高系统稳定性</strong>：整体而言，启用 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 能够帮助增强 TCC 模式的鲁棒性，减少由外部因素引起的服务不稳定状况，确保分布式事务能够按照预期的方式正确地执行完毕。</p>
  </li>
</ol>

<p>需要注意的是，使用 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 功能可能需要对现有的 TCC 业务代码进行一些调整，并且要保证相应的存储支持持久化记录的能力。此外，还需要合理配置超时时间等参数以适应不同的业务场景。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">GitLabSSH认证</title><link href="/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81/" rel="alternate" type="text/html" title="GitLabSSH认证" /><published>2024-09-19T00:00:00+08:00</published><updated>2024-09-19T00:00:00+08:00</updated><id>/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81</id><content type="html" xml:base="/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81/"><![CDATA[<h1 id="引言">引言</h1>

<p>对于GitLab的SSH认证，和GitHub认证步骤差不多，主要是SSH密钥可能需要指定的版本。</p>

<h1 id="gitlab">GitLab</h1>

<blockquote>
  <p>要使用 SSH 与 GitLab 通信，您需要：</p>

  <ul>
    <li>OpenSSH 客户端，预装在 GNU/Linux、macOS 和 Windows 10 上。</li>
    <li>SSH 版本 6.5 或更高版本。早期版本使用 MD5 签名，这并不安全。</li>
  </ul>

  <p>要查看系统上安装的 SSH 版本，请运行 <code class="language-plaintext highlighter-rouge">ssh -V</code>。</p>

  <p>支持的 SSH 密钥类型</p>

  <p>要与 GitLab 通信，您可以使用以下 SSH 密钥类型：</p>

  <ul>
    <li><a href="#ed25519-ssh-keys">ED25519</a></li>
    <li><a href="#rsa-ssh-keys">RSA</a></li>
    <li>DSA（在 11.0 版本中<a href="https://about.gitlab.com/releases/2018/06/22/gitlab-11-0-released/#support-for-dsa-ssh-keys">已弃用</a>。</li>
    <li>ECDSA（如 <a href="https://leanpub.com/gocrypto/read#leanpub-auto-ecdsa">Practical Cryptography With Go</a> 中所述，与 DSA 相关的安全问题也适用于 ECDSA。</li>
  </ul>

</blockquote>

<p>对于RSA算法，需要至少2048位密钥，首选ED25519算法。</p>

<h2 id="生成ssh密钥对">生成SSH密钥对</h2>

<p>对于 ED25519：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"&lt;comment&gt;"</span>
</code></pre></div></div>

<p>对于 2048 位 RSA：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 2048 <span class="nt">-C</span> <span class="s2">"&lt;comment&gt;"</span>
</code></pre></div></div>

<h2 id="配置-ssh-以指向不同的目录">配置 SSH 以指向不同的目录</h2>

<p>如果未将 SSH 密钥对保存在默认目录中，请将 SSH 客户端配置为指向存储私钥的目录。</p>

<p>打开终端并运行以下命令：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="si">$(</span>ssh-agent <span class="nt">-s</span><span class="si">)</span>
ssh-add &lt;directory to private SSH key&gt;
</code></pre></div></div>

<p>将这些设置保存在 ~/.ssh/config 文件中。例如：</p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># GitLab.com
</span><span class="n">Host</span> <span class="n">gitlab</span>.<span class="n">com</span>
  <span class="n">PreferredAuthentications</span> <span class="n">publickey</span>
  <span class="n">IdentityFile</span> ~/.<span class="n">ssh</span>/<span class="n">gitlab_com_rsa</span>

<span class="c"># Private GitLab instance
</span><span class="n">Host</span> <span class="n">gitlab</span>.<span class="n">company</span>.<span class="n">com</span>
  <span class="n">PreferredAuthentications</span> <span class="n">publickey</span>
  <span class="n">IdentityFile</span> ~/.<span class="n">ssh</span>/<span class="n">example_com_rsa</span>
</code></pre></div></div>

<p>公共 SSH 密钥对于 GitLab 必须是唯一的，因为它们绑定到您的帐户。当使用 SSH 推送代码时，SSH 密钥是唯一标识符。它必须唯一地映射到单个用户。</p>]]></content><author><name>acteds</name></author><category term="Git" /><category term="GitLab" /><summary type="html"><![CDATA[GITLabSSH认证]]></summary></entry><entry><title type="html">多个Git托管平台的配置</title><link href="/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="多个Git托管平台的配置" /><published>2024-09-19T00:00:00+08:00</published><updated>2024-09-19T00:00:00+08:00</updated><id>/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE/"><![CDATA[<h1 id="引言">引言</h1>

<p>作为一个程序员，在工作中，可能需要将代码推送到公司的自建 Git 代码托管平台上（如 GitLab）。在生活中，当参与一些个人的开源项目，则又需要将代码推送到社区的 Git 代码托管平台上（如 Github 或 Gieet）。</p>

<h1 id="git">Git</h1>

<h2 id="多个git托管平台的配置">多个Git托管平台的配置</h2>

<p>最简单的解决方法就是，多个Git代码托管平台配置同一个SSH公钥。</p>

<p>第二种方法就是使用多组密钥指定给不同的平台：</p>

<p>SSH 允许统一个操作系统中存在多对密钥，因此可以使用 <code class="language-plaintext highlighter-rouge">ssh-keygen</code> 指令生成多组密钥，将不同的密钥分配给不通的 Git 代码托管平台。</p>

<p>通过平台要求的密钥加密算法生成SSH密钥后，可以通过：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-add id_rsa_github
</code></pre></div></div>

<p>这里的<code class="language-plaintext highlighter-rouge">id_rsa_github</code>是SSH密钥的名称。</p>

<p>如果不使用 <code class="language-plaintext highlighter-rouge">ssh-add</code> 指令添加新的密钥到 <code class="language-plaintext highlighter-rouge">ssh agent</code> 中，系统会仍然使用 <code class="language-plaintext highlighter-rouge">id_rsa</code> 作为默认的 SSH Key，因为 <code class="language-plaintext highlighter-rouge">id_rsa</code> 是被默认添加到 <code class="language-plaintext highlighter-rouge">ssh agent</code> 中。</p>

<h3 id="为远程服务器配置密钥">为远程服务器配置密钥</h3>

<p><code class="language-plaintext highlighter-rouge">~/.ssh</code> 目录下存在一个 <code class="language-plaintext highlighter-rouge">config</code> 文件，如果不存在可以使用 <code class="language-plaintext highlighter-rouge">touch config</code> 指令这个文件。</p>

<p>这个文件用于配置 SSH 客户端的信息，例如主机名、端口号、用户名、密钥等，对于 Git 代码托管平台来说，可以通过这个配置为不通的 Git 代码托管平台服务器配置不同的 SSH 密钥。创建 config 文件后，使用 vim 或者其他任意编辑器编辑 config 文件，输入以下内容：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host github
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github

Host company-git
    User git
    # 替换为你公司的 Git 代码托管平台的服务器
    Hostname company-git-repo.com
    # 你公司 SSH 服务的端口号
    Port 22
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_company
</code></pre></div></div>

<p>config 配置文件中的各项配置意思为：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Host</code>：指定连接到的主机名，可以随意指定，相当于实际连接目标主机的<strong>别名</strong>；</li>
  <li><code class="language-plaintext highlighter-rouge">User</code>：指定使用的用户名，通常为 <code class="language-plaintext highlighter-rouge">git</code>，也可以不指定；</li>
  <li><code class="language-plaintext highlighter-rouge">Hostname</code>：指定连接到的主机的实际域名或IP地址。如果是向 Github 推送代码，则为 <code class="language-plaintext highlighter-rouge">github.com</code>，如果是向公司的 Git 代码托管平台推送代码，则填写公司主机的地址</li>
  <li><code class="language-plaintext highlighter-rouge">Port</code>：SSH 服务的端口号，默认为 <code class="language-plaintext highlighter-rouge">22</code>，可以不写</li>
  <li><code class="language-plaintext highlighter-rouge">PreferredAuthentications</code>：指定优先使用的身份验证方法，指定为<code class="language-plaintext highlighter-rouge">publickey</code>，即使用公钥进行身份认证。</li>
  <li><code class="language-plaintext highlighter-rouge">IdentityFile</code>：指定要使用的私钥文件路径，即指向你创建的私钥，这里分别为不通的 Git 代码托管平台指定了不同的私钥</li>
</ul>

<p>然后将<strong>公钥</strong>在对应的平台上添加SSH。</p>

<p>如果出现：<code class="language-plaintext highlighter-rouge">fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists.</code></p>

<p>就需要更改<code class="language-plaintext highlighter-rouge">.ssh</code>文件夹的权限，使其只对文件所有者可读写。（可以留下SYSTEM和Administrators用户组）</p>

<h3 id="配置不同的-git-用户名以及邮箱">配置不同的 git 用户名以及邮箱</h3>

<p>除了解决了不同平台使用不通的公私钥问题外，在不通的仓库提交代码时用的用户名和邮箱也可能需要不一样，比如：</p>

<ul>
  <li>在 Github 上，需要用网名来隐藏我的真实身份，因此提交代码的用户名为 <code class="language-plaintext highlighter-rouge">github-user</code>，邮箱为 <code class="language-plaintext highlighter-rouge">github-user@github.com</code>；</li>
  <li>而在工作中，公司则要求提交代码时的 git 用户名必须为我的真实姓名拼音，邮箱则为公司邮箱。</li>
</ul>

<p>这些配置就跟 SSH 的配置无关了，这些就需要调整我们的 git 配置。</p>

<p>首先，在全局配置一个 git 用户名和邮箱，这里建议使用你在 Github 上想要使用的用户名和邮箱，毕竟 Github 常驻，而公司不常驻：</p>

<pre><code class="language-cmd">git config --global user.email github-user@github.com[更改成你的邮箱]
git config --global user.name github-user[更改成你的网名]
</code></pre>

<p>此时，在 git 的配置文件 <code class="language-plaintext highlighter-rouge">~/.gitconfig</code> 中就可以看到如下的配置段，表示已经配置成功：</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[user]</span>
    <span class="py">name</span> <span class="p">=</span> <span class="s">github-user</span>
    <span class="py">email</span> <span class="p">=</span> <span class="s">github-user@github.com</span>
</code></pre></div></div>

<p>当我们提交代码的时候就会使用这个默认的用户名和邮箱来提交代码了。</p>

<p>除此之外，git 也支持通过在 git 项目内添加一个『本地配置』来单独配置每个项目的用户名和密码。利用这个能力，当我们将公司的代码 clone 到本地之后，进入到代码仓库，<strong>首先要做的第一件事情就是为这个公司的代码仓库设置独立的 git 用户名和密码</strong>。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--local</span> user.name zhangsan[改为你的真实姓名]
git config <span class="nt">--local</span> user.name zhangsan@company.com[改为你公司的邮箱]
</code></pre></div></div>

<p>总结，在使用 Github 提交提交代码的时候，无需在项目内单独设置 git 用户名和邮箱，因为会自动使用我们全局设置好的；当在编写公司项目的时候，当代码拉下来之后要单独为这个项目设置一个用户名和邮箱。</p>

<h2 id="同时配置多个-github-账号">同时配置多个 Github 账号</h2>

<p>还是使用上节的方法生成多个SSH密钥，然后追加到SSH config文件中。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># github 主账号的配置
Host github
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github
    
# github 新账号的配置
Host github_x
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github_x
</code></pre></div></div>

<p>这个时候，你从小号的 Github 中 clone 下来一个仓库，假设地址为 <code class="language-plaintext highlighter-rouge">git@github.com:user_x/blog.git</code>，那么就在终端中输入：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:user_x/blog.git
</code></pre></div></div>

<p>然后 commit 一些代码后，执行 push 操作时，就会发现出错啦：</p>

<pre><code class="language-subunit">ERROR: Permission to user_x/blog.git denied to xxx.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>SSH 授权出问题了。</p>

<p>实际上，在使用 <code class="language-plaintext highlighter-rouge">git push</code> 提交代码的时候，由于代码的仓库源在 Github 上，因此 SSH 连接的主机就是 <code class="language-plaintext highlighter-rouge">github.com</code>，当 SSH 发起连接的时候，它会发现你的 SSH config 文件中配置了<strong>两段 <code class="language-plaintext highlighter-rouge">Hostname</code> 都为 <code class="language-plaintext highlighter-rouge">github.com</code> 的配置</strong>， SSH 会<strong>优先使用第一段</strong>配置中的公钥向 Github 建立身份认证连接。那么当身份认证请求到达 Github 的时候，Github 拿出公钥进行身份认证签名对比后发现不是小号，那么自然就会拒绝你的提交代码的请求。</p>

<p>首先可以解析一下<code class="language-plaintext highlighter-rouge">git@github.com:user_x/blog.git</code> 这一串的组成，<code class="language-plaintext highlighter-rouge">git</code>是建立SSH连接时使用的用户名，<code class="language-plaintext highlighter-rouge">github.com</code>是目标服务器，而<code class="language-plaintext highlighter-rouge">user_x/blog.git</code>是具体代码仓库的路径。</p>

<p>清楚了以上各个部分代表的意思后，可以利用 SSH 建立连接的一个特性：目标服务器可以直接写成为服务器地址，同时也可以写为在 SSH config 文件中配置的 <code class="language-plaintext highlighter-rouge">Host</code>，也就是服务器的别名。</p>

<p>因此可以将仓库的源改为 <code class="language-plaintext highlighter-rouge">git@github_x:user_x/blog.git</code> ：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote set-url origin git@github_x:user_x/blog.git
</code></pre></div></div>

<p>此外别忘了必须使用 <code class="language-plaintext highlighter-rouge">ssh-add</code> 指令将生成的 SSH key 添加到 ssh-agent 的身份验证代理中：<code class="language-plaintext highlighter-rouge">ssh-add ~/.ssh/id_rsa_github_x</code>。否则建立 SSH 连接时，会使用 <code class="language-plaintext highlighter-rouge">id_rsa_github</code> 的密钥对。</p>

<p>可以通过<code class="language-plaintext highlighter-rouge">ssh -T git@github_x</code>，进行测试连接。</p>

<p>其实在clone的时候就可以修改为别名了，这样就不需要再重新设置仓库源了：</p>

<pre><code class="language-cmd">git clone git@github_x:user_x/blog.git
</code></pre>]]></content><author><name>acteds</name></author><category term="Git" /><category term="GitLab" /><category term="Github" /><summary type="html"><![CDATA[GITLabSSH认证]]></summary></entry><entry><title type="html">OpenFeign的使用</title><link href="/2024/09/18/OpenFeign/" rel="alternate" type="text/html" title="OpenFeign的使用" /><published>2024-09-18T00:00:00+08:00</published><updated>2024-09-18T00:00:00+08:00</updated><id>/2024/09/18/OpenFeign</id><content type="html" xml:base="/2024/09/18/OpenFeign/"><![CDATA[<h1 id="引言">引言</h1>

<p><strong>OpenFeign</strong> 是一个声明式的 HTTP 客户端，主要用于简化微服务之间的通信。它通过注解和接口的形式定义远程服务的调用，帮助开发者省去了编写大量 HTTP 请求的样板代码。在 Spring Cloud 中，OpenFeign 与 Spring Boot 和 Spring Cloud 集成良好，能够与负载均衡、断路器等组件搭配使用。</p>

<h1 id="openfeign">OpenFeign</h1>

<p>在微服务架构中，不同的服务通过 HTTP 进行通信。常规做法是手动使用 <code class="language-plaintext highlighter-rouge">RestTemplate</code> 或 <code class="language-plaintext highlighter-rouge">HttpClient</code> 发起 HTTP 请求，这样的代码通常冗长且容易出错。<strong>OpenFeign</strong> 的优势在于它通过接口与注解的形式，使得调用远程服务就像调用本地方法一样简单。</p>

<p><strong>使用场景：</strong></p>

<ul>
  <li><strong>简化服务调用</strong>：你不需要手动构造 HTTP 请求，而是通过调用本地接口来完成服务的远程调用。</li>
  <li><strong>更好的集成性</strong>：OpenFeign 可以与其他 Spring Cloud 组件（如 Ribbon、Hystrix 等）无缝集成，提供负载均衡、超时、断路器等功能。</li>
</ul>

<p><strong>OpenFeign 的优点</strong>：</p>

<ol>
  <li><strong>声明式的编程风格</strong>：使用注解（例如 <code class="language-plaintext highlighter-rouge">@FeignClient</code>、<code class="language-plaintext highlighter-rouge">@RequestMapping</code> 等）定义远程服务调用，使代码简洁、易读。调用远程服务就像调用本地方法一样，无需关心底层的 HTTP 请求细节。</li>
  <li><strong>自动集成负载均衡</strong>：通过与 Spring Cloud Ribbon 集成，OpenFeign 可以自动实现对多个实例的负载均衡。你只需定义服务名，它会根据服务注册中心的实例列表选择目标。</li>
  <li><strong>与 Hystrix 结合</strong>：OpenFeign 可以与 Hystrix 集成，实现熔断和降级策略。在微服务架构中，当某个服务不可用时，Hystrix 可以帮助服务调用快速失败，避免级联故障。</li>
  <li><strong>与 Spring Boot 深度集成</strong>：OpenFeign 在 Spring Cloud 中具有很好的集成支持，能够通过注解、配置文件等方式轻松配置超时、重试等策略。</li>
  <li><strong>自定义配置</strong>：OpenFeign 允许你自定义拦截器、编码器、解码器、日志等，来满足个性化需求。</li>
</ol>

<p><strong>OpenFeign 的缺点</strong>：</p>

<ol>
  <li><strong>依赖反射，性能稍差</strong>：OpenFeign 是基于反射的声明式框架，性能上比手写的 HTTP 客户端（如 <code class="language-plaintext highlighter-rouge">RestTemplate</code>、<code class="language-plaintext highlighter-rouge">HttpClient</code>）稍差，适用于业务较轻或中等的服务调用场景。</li>
  <li><strong>缺少部分高级 HTTP 控制</strong>：OpenFeign 的简洁性是它的优势，但它也使得一些高级的 HTTP 请求控制（例如复杂的请求头操作、流式数据处理等）不如手动编写 HTTP 客户端灵活。</li>
  <li><strong>调试相对复杂</strong>：在使用 OpenFeign 时，问题调试（例如网络问题、超时等）比手写 HTTP 请求更加抽象，出错时可能需要深入了解 Feign 的工作机制。</li>
  <li><strong>依赖服务注册中心</strong>：在分布式系统中，OpenFeign 通常依赖服务注册中心（如 Eureka、Consul 等）来发现服务实例，因此在服务注册中心出现故障时可能会影响服务调用。</li>
</ol>

<hr />

<p>导入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-openfeign<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>程序入口添加注解：<code class="language-plaintext highlighter-rouge">@EnableFeignClients</code>。</p>

<p>可以配置超时时间：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">feign</span><span class="pi">:</span>
  <span class="na">client</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span>
      <span class="na">default</span><span class="pi">:</span>
        <span class="na">connectTimeout</span><span class="pi">:</span> <span class="m">20000</span> <span class="c1"># feign 的超时设置</span>
        <span class="na">readTimeout</span><span class="pi">:</span> <span class="m">60000</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"domainresourcesservice"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">ResourcesServiceFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ResourcesService</span> <span class="o">{</span>
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span><span class="s">"/resources/rolePersionInfo/savePersionRoleAndGroupV2"</span><span class="o">)</span>
    <span class="nc">Wrapper</span> <span class="nf">savePersionRoleAndGroup</span><span class="o">(</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"persionId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">persionId</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"groupIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">groupIds</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"roleIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">roleIds</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"jiean_projectName"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">jiean_projectName</span>
    <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意：<strong><code class="language-plaintext highlighter-rouge">@RequestMapping</code> 注解不能直接用于 <code class="language-plaintext highlighter-rouge">@FeignClient</code> 接口</strong>。<code class="language-plaintext highlighter-rouge">FeignClient</code> 接口不允许在类级别使用 <code class="language-plaintext highlighter-rouge">@RequestMapping</code>，应该仅在方法级别使用 <code class="language-plaintext highlighter-rouge">@GetMapping</code>、<code class="language-plaintext highlighter-rouge">@PostMapping</code>、<code class="language-plaintext highlighter-rouge">@RequestParam</code> 等注解来定义 HTTP 请求。</p>

<p>配置类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">feign.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeginConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">Logger</span><span class="o">.</span><span class="na">Level</span> <span class="nf">feignLoggerLevel</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">Level</span><span class="o">.</span><span class="na">FULL</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>回滚类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourcesServiceFallBack</span> <span class="kd">implements</span> <span class="nc">ResourcesService</span> <span class="o">{</span>
    <span class="cm">/**
     * 新增人员和角色关系表
     * @param jiean_projectName
     * @param persionId
     * @param groupIds
     * @return
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Wrapper</span> <span class="nf">savePersionRoleAndGroup</span><span class="o">(</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"persionId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">persionId</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"groupIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">groupIds</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"roleIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">roleIds</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"jiean_projectName"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">jiean_projectName</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">WrapMapper</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="mi">5001</span><span class="o">,</span><span class="s">"Feign 新增人员和角色关系失败"</span><span class="o">);</span>
    <span class="o">}</span>   
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@FeignClient</code></strong>：用于声明一个 Feign 客户端，并指定该客户端要调用的服务。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">name = "domainresourcesservice"</code></strong>：指定服务的名称。Feign 会根据这个名称从服务注册中心（如 Consul 或 Eureka）获取服务实例的地址，并发起请求。这个名字应该与注册中心中的服务名一致。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">fallback = ResourcesServiceFallBack.class</code></strong>：指定一个回退类，当远程调用失败时会执行 <code class="language-plaintext highlighter-rouge">ResourcesServiceFallBack</code> 中定义的回退逻辑。回退类通常用于实现熔断或降级功能，以提高服务的稳定性。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">configuration = {FeginConfig.class}</code></strong>：指定 Feign 客户端的配置类 <code class="language-plaintext highlighter-rouge">FeginConfig</code>，该类可以包含自定义的 Feign 配置，如超时时间、编码器、解码器、拦截器等。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">@RequestMapping</code></strong>：表示这个接口方法对应的 HTTP 请求。<code class="language-plaintext highlighter-rouge">value = "/resources/rolePersionInfo/savePersionRoleAndGroupV2"</code> 表示该方法将发送到路径 <code class="language-plaintext highlighter-rouge">/resources/rolePersionInfo/savePersionRoleAndGroupV2</code> 的请求。</p>

<ul>
  <li>默认情况下，这是一个 <code class="language-plaintext highlighter-rouge">POST</code> 或 <code class="language-plaintext highlighter-rouge">GET</code> 请求（具体取决于 Feign 的配置），可以根据需求指定请求方法。</li>
</ul>

<p>这段代码是一个 Feign 客户端的接口，它用于调用名为 <code class="language-plaintext highlighter-rouge">domainresourcesservice</code> 的微服务下的 <code class="language-plaintext highlighter-rouge">/resources/rolePersionInfo/savePersionRoleAndGroupV2</code> 接口，执行保存某个用户的角色和组信息操作。</p>

<hr />

<p>在使用 Feign 客户端时，有以下几点需要特别注意：</p>

<p><strong>服务名要一致</strong>：<code class="language-plaintext highlighter-rouge">@FeignClient(name = "domainresourcesservice")</code> 中指定的服务名称 <strong><code class="language-plaintext highlighter-rouge">domainresourcesservice</code></strong> 必须与服务注册中心（如 Consul、Eureka）中的服务名称一致。否则，Feign 客户端将无法找到目标服务的实例，导致请求失败。</p>

<p><strong>回退类 <code class="language-plaintext highlighter-rouge">fallback</code></strong>：<code class="language-plaintext highlighter-rouge">fallback = ResourcesServiceFallBack.class</code> 指定了降级处理类，当远程服务不可用或者超时时，Feign 会自动调用回退方法。这有助于增强系统的容错性，防止服务故障蔓延到整个系统。</p>

<ul>
  <li>确保 <code class="language-plaintext highlighter-rouge">ResourcesServiceFallBack</code> 类已经实现了 <code class="language-plaintext highlighter-rouge">ResourcesService</code> 接口，并提供了具体的回退逻辑。</li>
  <li>如果没有正确配置 Hystrix 或 Resilience4j 等熔断器，回退逻辑可能无法生效。</li>
</ul>

<p><strong>请求参数</strong></p>

<ul>
  <li><strong>参数类型</strong>：确保所有参数在远程服务的 API 中是匹配的。这里使用 <code class="language-plaintext highlighter-rouge">@RequestParam</code> 注解，表示参数会被作为查询参数或表单数据传递。对应的远程服务也应该相应处理这些参数。</li>
  <li><strong>参数格式和验证</strong>：确保传递的参数格式正确。例如，<code class="language-plaintext highlighter-rouge">groupIds</code> 和 <code class="language-plaintext highlighter-rouge">roleIds</code> 可能是逗号分隔的字符串。如果后端要求某种特殊格式，确保在调用时传递的值是正确的。</li>
</ul>

<p><strong>自定义配置</strong></p>

<p><strong>Feign 配置 <code class="language-plaintext highlighter-rouge">FeginConfig.class</code></strong>：如果你有自定义的 Feign 配置（如超时设置、重试机制、编码解码器等），确保 <code class="language-plaintext highlighter-rouge">FeginConfig</code> 配置正确，并且 Feign 客户端能够应用这些配置。</p>

<p>比如，可以在 <code class="language-plaintext highlighter-rouge">FeginConfig</code> 中指定连接超时、读取超时等，以防止因网络延迟导致的请求失败。</p>

<p><strong>错误处理</strong></p>

<ul>
  <li><strong>错误响应处理</strong>：<code class="language-plaintext highlighter-rouge">Wrapper</code> 是接口的返回类型，确保你能够处理远程服务可能返回的错误响应。需要检查 <code class="language-plaintext highlighter-rouge">Wrapper</code> 类是否能处理错误码、错误消息等，并且调用方能够正确处理错误。</li>
  <li><strong>异常处理</strong>：Feign 在请求失败时可能抛出各种异常（如 <code class="language-plaintext highlighter-rouge">FeignException</code>、<code class="language-plaintext highlighter-rouge">ConnectException</code> 等），在接口的实现类中应做好异常捕获和处理，避免应用崩溃。</li>
</ul>

<p><strong>日志与调试</strong></p>

<ul>
  <li>
    <p><strong>启用 Feign 日志</strong>：如果需要调试 Feign 请求，可以在配置中启用 Feign 的详细日志功能，查看请求和响应的完整信息。</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">feign:</span>
  <span class="nl">client:</span>
    <span class="nl">config:</span>
      <span class="k">default</span><span class="o">:</span>
        <span class="nl">loggerLevel:</span> <span class="no">FULL</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>这样可以帮助你调试 Feign 请求的问题，尤其是遇到请求失败或响应不符合预期时。</p>
  </li>
</ul>

<p><strong>超时和重试</strong></p>

<ul>
  <li><strong>超时设置</strong>：如果目标服务响应较慢，可能会导致 Feign 请求超时，导致熔断触发。确保 Feign 配置中设置了适当的超时时间，以平衡性能和可用性。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">Request</span><span class="o">.</span><span class="na">Options</span> <span class="nf">feignOptions</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Request</span><span class="o">.</span><span class="na">Options</span><span class="o">(</span><span class="mi">5000</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span> <span class="c1">// 连接超时 5 秒，读取超时 10 秒</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>服务健康检查与负载均衡</strong></p>

<ul>
  <li><strong>服务健康检查</strong>：确保目标服务在注册中心是健康的，否则 Feign 会找不到可用的实例。可以定期检查目标服务的健康状态。</li>
  <li><strong>负载均衡</strong>：Feign 通常与 Ribbon 一起使用，支持负载均衡调用多实例服务。确保注册中心中的服务实例都能够被正确负载均衡。</li>
</ul>

<p><strong>版本兼容性</strong></p>

<ul>
  <li><strong>服务接口版本兼容</strong>：远程服务的接口可能会发生变更，因此需要定期检查服务接口是否有变化，确保调用方和提供方之间的接口保持兼容性，尤其是请求参数或返回值格式的变化。</li>
</ul>

<p>确保这些关键点能够帮助你在使用 Feign 客户端时避免常见的错误，并确保系统的健壮性和可扩展性。</p>

<hr />

<p>一个简单的完整实例：</p>

<p>假设服务<code class="language-plaintext highlighter-rouge">A</code>，有如下接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/pi"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductInventoryController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ProductInventoryMapper</span> <span class="n">productInventoryMapper</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">productInventoryMapper</span><span class="o">.</span><span class="na">selectAll</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">productInventoryMapper</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>则服务<code class="language-plaintext highlighter-rouge">B</code>，如果需要调用服务<code class="language-plaintext highlighter-rouge">A</code>的接口，可以这样定义Feign：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"A"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">DemoServiceFeignFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DemoServiceFeign</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/pi/getAll"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">();</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/pi/add"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意<code class="language-plaintext highlighter-rouge">ProductInventory</code>类结构要保持一致。</p>

<p>然后可以这样调用Feign：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/feign"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignTestController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">DemoServiceFeign</span> <span class="n">demoServiceFeign</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">getAllUsers</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果不希望在服务 <code class="language-plaintext highlighter-rouge">B</code> 中创建 <code class="language-plaintext highlighter-rouge">ProductInventory</code> 类，可以使用 <code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt;</code> 或 <code class="language-plaintext highlighter-rouge">JSONObject</code> 来代替对象传递数据。这样，<code class="language-plaintext highlighter-rouge">Feign</code> 接口可以通过动态对象来进行调用。</p>

<p>修改后的 Feign 接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"A"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">DemoServiceFeignFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DemoServiceFeign</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/pi/getAll"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllUsers</span><span class="o">();</span>  <span class="c1">// 使用 Map 代替 ProductInventory</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/pi/add"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">productInventory</span><span class="o">);</span>  <span class="c1">// 使用 Map 传递数据</span>
<span class="o">}</span>
</code></pre></div></div>

<p>修改后的调用方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/feign"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignTestController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">DemoServiceFeign</span> <span class="n">demoServiceFeign</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">getAllUsers</span><span class="o">();</span>  <span class="c1">// 获取 Map 类型的结果</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>  <span class="c1">// 传递 Map 类型的数据</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>优点</strong>：避免了在服务 <code class="language-plaintext highlighter-rouge">B</code> 中定义 <code class="language-plaintext highlighter-rouge">ProductInventory</code> 类。</p>

<p><strong>缺点</strong>：使用 <code class="language-plaintext highlighter-rouge">Map</code> 或 <code class="language-plaintext highlighter-rouge">JSONObject</code> 使代码的类型检查变得不那么严格，容易出错，并且不如直接使用实体类那么清晰和安全。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Git的拆分与删除</title><link href="/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4/" rel="alternate" type="text/html" title="Git的拆分与删除" /><published>2024-09-18T00:00:00+08:00</published><updated>2024-09-18T00:00:00+08:00</updated><id>/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4</id><content type="html" xml:base="/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4/"><![CDATA[<h1 id="引言">引言</h1>
<p>拆分仓库可以减少单个仓库的体积，提高开发效率。Git 仓库的历史记录会随着项目的发展而膨胀。拆分仓库有助于删除不必要的历史记录，只保留当前需要的部分，减少仓库的冗余数据。对于删除来说也是如此，在全部的提交中删除不需要的文件或文件夹可以减少仓库的体积。</p>

<h1 id="git">Git</h1>

<h2 id="拆分">拆分</h2>

<p>要将某个文件夹或文件单独生成一个 Git 仓库，并保留其历史记录，可以使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 简单的完成。</p>

<p>要安装<code class="language-plaintext highlighter-rouge">git-fiter-repo</code>，对于环境有如下依赖：</p>

<ul>
  <li>git &gt;= 2.22.0 ；对于某些功能需要 git &gt;= 2.24.0</li>
  <li>python3 &gt;= 3.6</li>
</ul>

<p>然后运行<code class="language-plaintext highlighter-rouge">pip install git-filter-repo</code> 即可，要验证是否安装成功，可以执行：<code class="language-plaintext highlighter-rouge">git filter-repo --version</code>。</p>

<hr />

<p>首先，克隆或者复制包含该文件/文件夹的原始仓库，然后使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 命令，就可以提取目标文件夹或文件，并移除其他无关内容了。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> <span class="o">[</span>&lt;folder-name&gt;|&lt;file-name&gt;]
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--path &lt;folder-name&gt;</code> 或 <code class="language-plaintext highlighter-rouge">--path &lt;file-name&gt;</code>：这个参数指定你要保留的路径。这个命令将只保留该路径中的文件，删除仓库中的其他所有内容。</li>
</ul>

<p>例如，要提取名为 <code class="language-plaintext highlighter-rouge">src</code> 的文件夹，可以运行：<code class="language-plaintext highlighter-rouge">git filter-repo --path src</code>如果提取单个文件，比如 <code class="language-plaintext highlighter-rouge">README.md</code>：<code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code></p>

<p>执行 <code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code> 后，Git 仓库将会只保留 <code class="language-plaintext highlighter-rouge">README.md</code> 文件及其所有历史记录，其他的文件和文件夹（及其对应的提交历史）将会被<strong>完全移除</strong>，包括：</p>

<p><strong>历史记录过滤</strong>：Git 会过滤所有提交记录，只保留那些与 <code class="language-plaintext highlighter-rouge">README.md</code> 文件相关的提交。任何与其他文件或文件夹相关的提交都会被删除。</p>

<p><strong>仓库内容变化</strong>：</p>

<ul>
  <li><strong>保留的文件</strong>：最终的仓库中只会包含 <code class="language-plaintext highlighter-rouge">README.md</code> 文件，且这个文件的所有历史记录都会保留在提交历史中。</li>
  <li><strong>移除的文件和文件夹</strong>：所有其他文件和文件夹会从仓库的所有历史版本中完全消失，不再存在于提交记录中。</li>
</ul>

<p><strong>提交历史</strong>：</p>

<ul>
  <li>仓库中的提交历史会被重新写入，只有那些影响 <code class="language-plaintext highlighter-rouge">README.md</code> 文件的提交会保留，其他提交记录（与其他文件相关的提交）将被丢弃。</li>
</ul>

<p><strong>其他分支和标签</strong>：</p>

<ul>
  <li>这些过滤操作会影响所有的分支和标签。它会对整个仓库的历史进行重写。因此，在其他分支和标签中，只有 <code class="language-plaintext highlighter-rouge">README.md</code> 及其相关的提交会保留。</li>
</ul>

<p>假设有如下仓库结构：</p>

<pre><code class="language-ascii">repo/
├── README.md
├── src/
│   └── main.java
└── docs/
    └── guide.md
</code></pre>
<p>并且有以下提交历史：</p>
<ol>
  <li>创建 <code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li>添加 <code class="language-plaintext highlighter-rouge">src/main.java</code></li>
  <li>修改 <code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li>添加 <code class="language-plaintext highlighter-rouge">docs/guide.md</code></li>
</ol>

<p>当执行 <code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code> 后：</p>
<ul>
  <li>仓库中<strong>只会保留</strong> <code class="language-plaintext highlighter-rouge">README.md</code> 文件。</li>
  <li>提交历史中<strong>只保留</strong>涉及 <code class="language-plaintext highlighter-rouge">README.md</code> 的提交（即提交 1 和 3），其他提交（例如 2 和 4）会被删除。</li>
  <li><code class="language-plaintext highlighter-rouge">src/</code> 和 <code class="language-plaintext highlighter-rouge">docs/</code> 文件夹及其内容（如 <code class="language-plaintext highlighter-rouge">main.java</code> 和 <code class="language-plaintext highlighter-rouge">guide.md</code>）将从仓库的所有历史版本中被<strong>完全移除</strong>，就像它们从未存在过一样。</li>
</ul>

<hr />

<p><strong>保留多个文件或文件夹</strong></p>

<p>在使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 时，如果想保留多个文件或文件夹的历史记录，可以通过 <code class="language-plaintext highlighter-rouge">--path</code> 参数指定多个路径。<code class="language-plaintext highlighter-rouge">git filter-repo</code> 支持同时保留多个文件或文件夹的历史。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> &lt;path1&gt; <span class="nt">--path</span> &lt;path2&gt; <span class="nt">--path</span> &lt;path3&gt; ...
</code></pre></div></div>

<p>假设仓库结构如下：</p>
<pre><code class="language-ascii">repo/
├── README.md
├── src/
│   ├── main.java
│   └── utils.java
└── docs/
    └── guide.md
</code></pre>

<p>需要保留以下文件和文件夹：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li><code class="language-plaintext highlighter-rouge">src/</code> 文件夹</li>
  <li><code class="language-plaintext highlighter-rouge">docs/guide.md</code></li>
</ul>

<p>可以执行以下命令：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> README.md <span class="nt">--path</span> src <span class="nt">--path</span> docs/guide.md
</code></pre></div></div>

<p>保留子文件夹：</p>

<p>也可以只保留某个子文件夹内的部分内容，例如只保留 <code class="language-plaintext highlighter-rouge">src/utils.java</code> 而不是整个 <code class="language-plaintext highlighter-rouge">src</code> 文件夹。命令如下：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> src/utils.java
</code></pre></div></div>

<p>注意事项：</p>
<ul>
  <li>
    <p>如果要保留的文件路径很多，建议提前备份仓库，因为 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 会直接修改历史记录。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">git filter-repo</code> 操作会影响所有分支和标签，所以操作之前需要明确想要保留的内容。</p>
  </li>
</ul>

<h2 id="删除">删除</h2>

<p>要在全部的提交中删除某个文件或者文件夹，可以使用如下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> <span class="o">[</span>&lt;folder-name&gt;|&lt;file-name&gt;] <span class="nt">--invert-paths</span> <span class="nt">--force</span>
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--path &lt;folder-name&gt; | &lt;file-name&gt;</code>：指定要操作的文件夹或文件路径。如果是文件夹，请使用 <code class="language-plaintext highlighter-rouge">/</code> 结尾，如 <code class="language-plaintext highlighter-rouge">logs/</code>。如果是文件，提供完整路径如 <code class="language-plaintext highlighter-rouge">config/secret.txt</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">--invert-paths</code>：该参数表示反转路径过滤，意思是删除指定的路径及其历史，而保留其他所有内容。没有 <code class="language-plaintext highlighter-rouge">--invert-paths</code> 则会保留指定的路径并删除其他内容。</li>
  <li><code class="language-plaintext highlighter-rouge">--force</code>：在某些情况下，如果运行 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 后尝试再次运行时，Git 可能会警告已经处理过一次了。<code class="language-plaintext highlighter-rouge">--force</code> 选项允许你在这些情况下强制执行命令。</li>
</ul>

<p>这会<strong>永久性地修改历史记录</strong>，所有历史中的该文件或文件夹将被彻底移除，因此其他开发人员也需要强制更新他们的本地仓库。</p>

<hr />

<p>如果已经把仓库推送到远程，删除了本地的文件历史后，必须强制推送历史变更：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin <span class="nt">--force</span> <span class="nt">--all</span>
git push origin <span class="nt">--force</span> <span class="nt">--tags</span>
</code></pre></div></div>

<p>如果需要清理已经被删除的文件的本地缓存，可以运行以下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> .git/refs/original/
git reflog expire <span class="nt">--expire</span><span class="o">=</span>now <span class="nt">--all</span>
git gc <span class="nt">--prune</span><span class="o">=</span>now <span class="nt">--aggressive</span>
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="Git" /><summary type="html"><![CDATA[Git的拆分与删除]]></summary></entry><entry><title type="html">Charles证书更新</title><link href="/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0/" rel="alternate" type="text/html" title="Charles证书更新" /><published>2024-09-06T00:00:00+08:00</published><updated>2024-09-06T00:00:00+08:00</updated><id>/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0</id><content type="html" xml:base="/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0/"><![CDATA[<h1 id="引言">引言</h1>
<p>在某一天，正要抓包时，一直出现：</p>

<p><code class="language-plaintext highlighter-rouge">SSL handshake with client failed: When access control was applied the certificate was rejected (access_denied)</code></p>

<p>这就是证书失效了。</p>

<h1 id="详解">详解</h1>

<p>要解决这个问题，非常简单，首先要卸载失效的证书，有几种方式进入证书管理：</p>

<ul>
  <li>win+R：<code class="language-plaintext highlighter-rouge">Certmgr.msc</code>，这个是当前用户的证书。</li>
  <li>按一次win，输入<code class="language-plaintext highlighter-rouge">cer</code>，可以看到一个<code class="language-plaintext highlighter-rouge">管理计算机证书</code>，这个就是管理应用于全部用户证书。</li>
  <li>同上，还可以看到一个<code class="language-plaintext highlighter-rouge">管理用户证书</code>，这是当前用户的证书。</li>
</ul>

<p>通过哪种方式进入都可以，但这两个地方是不同的，可以都找找，侧栏点击一下最上面的<code class="language-plaintext highlighter-rouge">证书-本地计算机</code>，然后点击操作-查找证书-输入<code class="language-plaintext highlighter-rouge">Charles</code>，然后开始查找，找到的都删除，用户证书同理。</p>

<p>卸载完失效的证书后，在<code class="language-plaintext highlighter-rouge">Charles</code>里生成新的证书，<code class="language-plaintext highlighter-rouge">Help</code>-<code class="language-plaintext highlighter-rouge">SSL Proxying</code>-<code class="language-plaintext highlighter-rouge">Reset Charles Root Certificate...</code>，然后重新安装证书：<code class="language-plaintext highlighter-rouge">Help</code>-<code class="language-plaintext highlighter-rouge">SSL Proxying</code>-<code class="language-plaintext highlighter-rouge">Install Charles Root Certificate</code>-<code class="language-plaintext highlighter-rouge">安装证书...</code>-选<code class="language-plaintext highlighter-rouge">当前用户</code>即可-<code class="language-plaintext highlighter-rouge">下一步</code>-<code class="language-plaintext highlighter-rouge">将所有的证书都放入下列存储</code>-<code class="language-plaintext highlighter-rouge">浏览...</code>-<code class="language-plaintext highlighter-rouge">选择受信任的根证书颁发机构</code>-<code class="language-plaintext highlighter-rouge">确定</code>-<code class="language-plaintext highlighter-rouge">下一步</code>-<code class="language-plaintext highlighter-rouge">完成</code>-若有警告点击确认。</p>

<p>这样就完成了证书的更新操作，重启<code class="language-plaintext highlighter-rouge">Charles</code>后即可恢复正常。</p>]]></content><author><name>acteds</name></author><category term="Android" /><summary type="html"><![CDATA[Charles证书更新]]></summary></entry><entry><title type="html">Spring Cloud</title><link href="/2024/08/26/Spring-Clud/" rel="alternate" type="text/html" title="Spring Cloud" /><published>2024-08-26T00:00:00+08:00</published><updated>2024-08-26T00:00:00+08:00</updated><id>/2024/08/26/Spring%20Clud</id><content type="html" xml:base="/2024/08/26/Spring-Clud/"><![CDATA[<h1 id="引言">引言</h1>
<p>Spring Clud笔记。</p>

<h1 id="spring-cloud">Spring Cloud</h1>

<p>为了简化版本和依赖管理，用<code class="language-plaintext highlighter-rouge">parent</code>模块管理最基础的<code class="language-plaintext highlighter-rouge">pom.xml</code>，其他模块直接从<code class="language-plaintext highlighter-rouge">parent</code>继承，能大大简化各自的<code class="language-plaintext highlighter-rouge">pom.xml</code>。<code class="language-plaintext highlighter-rouge">parent</code>模块<code class="language-plaintext highlighter-rouge">pom.xml</code>内容如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>
<span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>parent<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>

    <span class="c">&lt;!-- 继承自SpringBoot Starter Parent --&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="c">&lt;!-- SpringBoot版本 --&gt;</span>
        <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>

    <span class="nt">&lt;properties&gt;</span>
        <span class="c">&lt;!-- 项目版本 --&gt;</span>
        <span class="nt">&lt;project.version&gt;</span>1.0<span class="nt">&lt;/project.version&gt;</span>
        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
        <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>

        <span class="c">&lt;!-- Java编译和运行版本 --&gt;</span>
        <span class="nt">&lt;maven.compiler.source&gt;</span>17<span class="nt">&lt;/maven.compiler.source&gt;</span>
        <span class="nt">&lt;maven.compiler.target&gt;</span>17<span class="nt">&lt;/maven.compiler.target&gt;</span>
        <span class="nt">&lt;java.version&gt;</span>17<span class="nt">&lt;/java.version&gt;</span>

        <span class="c">&lt;!-- 定义第三方组件的版本 --&gt;</span>
        <span class="nt">&lt;pebble.version&gt;</span>3.2.0<span class="nt">&lt;/pebble.version&gt;</span>
        <span class="nt">&lt;springcloud.version&gt;</span>2022.0.0<span class="nt">&lt;/springcloud.version&gt;</span>
        <span class="nt">&lt;springdoc.version&gt;</span>2.0.0<span class="nt">&lt;/springdoc.version&gt;</span>
        <span class="nt">&lt;vertx.version&gt;</span>4.3.1<span class="nt">&lt;/vertx.version&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>

    <span class="c">&lt;!-- 引入SpringCloud依赖 --&gt;</span>
    <span class="nt">&lt;dependencyManagement&gt;</span>
        <span class="nt">&lt;dependencies&gt;</span>
            <span class="nt">&lt;dependency&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;version&gt;</span>${springcloud.version}<span class="nt">&lt;/version&gt;</span>
                <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
                <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
            <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;/dependencies&gt;</span>
    <span class="nt">&lt;/dependencyManagement&gt;</span>

    <span class="c">&lt;!-- 共享的依赖管理 --&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
        <span class="c">&lt;!-- 依赖JUnit5 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-api<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-params<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-engine<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="c">&lt;!-- 依赖SpringTest --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>

    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;pluginManagement&gt;</span>
            <span class="nt">&lt;plugins&gt;</span>
                <span class="c">&lt;!-- 引入创建可执行Jar的插件 --&gt;</span>
                <span class="nt">&lt;plugin&gt;</span>
                    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                    <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;/plugin&gt;</span>
            <span class="nt">&lt;/plugins&gt;</span>
        <span class="nt">&lt;/pluginManagement&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>上述<code class="language-plaintext highlighter-rouge">pom.xml</code>中，除了写死的Spring Boot版本、Java运行版本、项目版本外，其他引入的版本均以<code class="language-plaintext highlighter-rouge">&lt;xxx.version&gt;1.23&lt;/xxx.version&gt;</code>的形式定义，以便后续可以用<code class="language-plaintext highlighter-rouge">${xxx.version}</code>引用版本号，避免了同一个组件出现多个写死的版本定义。</p>

<p>对其他业务模块，引入<code class="language-plaintext highlighter-rouge">parent</code>的<code class="language-plaintext highlighter-rouge">pom.xml</code>可大大简化配置。以<code class="language-plaintext highlighter-rouge">ui</code>模块为例，其<code class="language-plaintext highlighter-rouge">pom.xml</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>
<span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="c">&lt;!-- 指定Parent --&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
        <span class="c">&lt;!-- Parent POM的相对路径 --&gt;</span>
        <span class="nt">&lt;relativePath&gt;</span>../parent/pom.xml<span class="nt">&lt;/relativePath&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>

    <span class="c">&lt;!-- 当前模块名称 --&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>ui<span class="nt">&lt;/artifactId&gt;</span>

    <span class="nt">&lt;dependencies&gt;</span>
        <span class="c">&lt;!-- 依赖SpringCloud Config客户端 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖SpringBoot Actuator --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖Common模块 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>common<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>${project.version}<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖第三方模块 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>pebble-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>${pebble.version}<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>

    <span class="nt">&lt;build&gt;</span>
        <span class="c">&lt;!-- 指定输出文件名 --&gt;</span>
        <span class="nt">&lt;finalName&gt;</span>${project.artifactId}<span class="nt">&lt;/finalName&gt;</span>
        <span class="c">&lt;!-- 创建SpringBoot可执行jar --&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">parent</code>的<code class="language-plaintext highlighter-rouge">pom.xml</code>中引入了Spring Cloud的依赖管理，因此，无需指定相关组件的版本。只有自己编写的组件和未在Spring Boot和Spring Cloud中引入的组件，才需要指定版本。</p>

<p>还需要一个<code class="language-plaintext highlighter-rouge">build</code>模块，把所有模块放到一起编译。建立<code class="language-plaintext highlighter-rouge">build</code>文件夹并创建<code class="language-plaintext highlighter-rouge">pom.xml</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/maven-v4_0_0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>build<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
    <span class="nt">&lt;name&gt;</span>Warp Exchange<span class="nt">&lt;/name&gt;</span>

    <span class="c">&lt;!-- 按相对路径列出所有模块 --&gt;</span>
    <span class="nt">&lt;modules&gt;</span>
        <span class="nt">&lt;module&gt;</span>../common<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../config<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../parent<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../ui<span class="nt">&lt;/module&gt;</span>
    <span class="nt">&lt;/modules&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>还需要创建目录<code class="language-plaintext highlighter-rouge">config-repo</code>来存储Spring Cloud Config服务器端的配置文件。</p>

<p>最后，将所有模块导入IDE，可正常开发、编译、运行。如果要在命令行模式下运行，进入<code class="language-plaintext highlighter-rouge">build</code>文件夹使用Maven编译即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn clean package
</code></pre></div></div>

<hr />

<p><strong>本地开发环境</strong></p>

<p>在本地开发时，需要经常调试代码。除了安装JDK，选择一个IDE外，还需要在本地运行MySQL、Redis、Kafka，以及Kafka依赖的ZooKeeper服务。</p>

<p>可以使用<a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>来运行这些基础服务，需要在<code class="language-plaintext highlighter-rouge">build</code>目录下编写一个<code class="language-plaintext highlighter-rouge">docker-compose.yml</code>文件定义要运行的所有服务：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">zookeeper</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/zookeeper:3.5</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">zookeeper</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">2181:2181"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ALLOW_ANONYMOUS_LOGIN=yes</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/zookeeper-data:/bitnami"</span>

  <span class="na">kafka</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/kafka:3.0</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">kafka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9092:9092"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">zookeeper</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">KAFKA_BROKER_ID=1</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true</span>
      <span class="pi">-</span> <span class="s">ALLOW_PLAINTEXT_LISTENER=yes</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/kafka-data:/bitnami"</span>

  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.2</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">6379:6379"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/redis-data:/data"</span>

  <span class="na">mysql</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">--default-authentication-plugin=mysql_native_password</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_ROOT_PASSWORD=password</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./sql/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql:ro"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/mysql-data:/var/lib/mysql"</span>
</code></pre></div></div>

<p>在上述<code class="language-plaintext highlighter-rouge">docker-compose.yml</code>文件中，定义了MySQL、Redis、Kafka以及Kafka依赖的ZooKeeper服务，各服务均暴露标准端口，且MySQL的<code class="language-plaintext highlighter-rouge">root</code>口令设置为<code class="language-plaintext highlighter-rouge">password</code>，第一次启动MySQL时，使用<code class="language-plaintext highlighter-rouge">sql/schema.sql</code>文件初始化数据库表结构。所有数据盘均挂载到<code class="language-plaintext highlighter-rouge">build</code>目录下的<code class="language-plaintext highlighter-rouge">docker</code>目录。</p>

<p>在<code class="language-plaintext highlighter-rouge">build</code>目录下运行<code class="language-plaintext highlighter-rouge">docker-compose up -d</code>即可启动容器：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>build $ docker-compose up -d
Creating network "build_default" with the default driver
Creating zookeeper ... done
Creating mysql     ... done
Creating redis     ... done
Creating kafka     ... done
</code></pre></div></div>

<p>在Docker Desktop中也可看到运行状态。</p>

<p>如果要删除开发环境的所有数据，首先停止运行Docker容器进程并删除，然后删除<code class="language-plaintext highlighter-rouge">build</code>目录下的<code class="language-plaintext highlighter-rouge">docker</code>目录，重新运行<code class="language-plaintext highlighter-rouge">docker-compose</code>即可。</p>

<h2 id="spring-cloud-config">Spring Cloud Config</h2>

<p>Spring Cloud Config是Spring Cloud的一个子项目，它的主要目的是解决多个Spring Boot应用启动时，应该如何读取配置文件的问题。</p>

<p>对于单体应用，即一个独立的Spring Boot应用，我们会把配置写在<code class="language-plaintext highlighter-rouge">application.yml</code>文件中。如果配置需要针对多个环境，可以用<code class="language-plaintext highlighter-rouge">---</code>分隔并标注好环境：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># application.yml</span>
<span class="c1"># 通用配置:</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost/test</span>

<span class="nn">---</span>

<span class="c1"># test profile:</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://172.16.0.100/test</span>
</code></pre></div></div>

<p>这种配置方式针对单个Spring Boot应用是可行的，但是，针对分布式应用，有多个Spring Boot应用需要启动时，分散在各个应用中的配置既不便于管理，也不便于复用相同的配置。</p>

<p>Spring Cloud Config提供了一个通用的分布式应用的配置解决方案。它把配置分为两部分：</p>

<ul>
  <li>Config Server：配置服务器，负责读取所有配置；</li>
  <li>Config Client：嵌入到各个Spring Boot应用中，<strong>本地无配置信息</strong>，启动时向服务器请求配置。</li>
</ul>

<p>要搭建一个Spring Cloud Config Server，即配置服务器，首先，在<code class="language-plaintext highlighter-rouge">config</code>模块中引入<code class="language-plaintext highlighter-rouge">spring-cloud-config-server</code>依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-config-server<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后，编写一个<code class="language-plaintext highlighter-rouge">ConfigApplication</code>入口，标注<code class="language-plaintext highlighter-rouge">@EnableConfigServer</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableConfigServer</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfigApplication</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">ConfigApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>最后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中设置如何搜索配置。Spring Cloud Config支持多种配置方式，包括从本地文件、Git仓库、数据库等多个地方读取配置。这里选择以本地文件的方式读取配置文件，这也是最简单的一种配置方式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 配置服务器的端口，通常设置为8888:</span>
<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8888</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">config-server</span>
  <span class="na">profiles</span><span class="pi">:</span>
    <span class="c1"># 从文件读取配置时，Config Server激活的profile必须设定为native:</span>
    <span class="na">active</span><span class="pi">:</span> <span class="s">native</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span>
      <span class="na">server</span><span class="pi">:</span>
        <span class="na">native</span><span class="pi">:</span>
          <span class="c1"># 设置配置文件的搜索路径:</span>
          <span class="na">search-locations</span><span class="pi">:</span> <span class="s">file:./config-repo, file:../config-repo, file:../../config-repo</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">config-repo</code>目录下，存放的就是一系列配置文件：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config-repo/
├── application-default.yml
├── application-test.yml
├── application.yml
├── push.yml
├── quotation.yml
├── trading-api.yml
├── trading-engine.yml
├── trading-sequencer.yml
├── ui-default.yml
└── ui.yml
</code></pre></div></div>

<p>至此，配置服务器就完成了，直接运行<code class="language-plaintext highlighter-rouge">ConfigApplication</code>即可启动配置服务器。在开发过程中，保持配置服务器在后台运行即可。</p>

<p>接下来，对于每个负责业务的Spring Boot应用，需要从Spring Cloud Config Server读取配置。读取配置并不是说本地零配置，还是需要一点基础配置信息。以<code class="language-plaintext highlighter-rouge">ui</code>项目为例，编写<code class="language-plaintext highlighter-rouge">application.yml</code>如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="c1"># 设置app名称:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ui</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="c1"># 导入Config Server地址:</span>
    <span class="na">import</span><span class="pi">:</span> <span class="s">configserver:${CONFIG_SERVER:http://localhost:8888}</span>
</code></pre></div></div>

<p>上述默认的Config Server配置为<code class="language-plaintext highlighter-rouge">http://localhost:8888</code>，也可以通过环境变量指定Config Server的地址。</p>

<p>下一步是在<code class="language-plaintext highlighter-rouge">ui</code>模块的<code class="language-plaintext highlighter-rouge">pom.xml</code>中添加依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>接下来正常启动<code class="language-plaintext highlighter-rouge">UIApplication</code>，该应用就会自动从Config Server读取配置。由于指定了应用的名称是<code class="language-plaintext highlighter-rouge">ui</code>，且默认的<code class="language-plaintext highlighter-rouge">profile</code>是<code class="language-plaintext highlighter-rouge">default</code>，因此，Config Server将返回以下4个配置文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ui-default.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-default.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">ui.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>前面的配置文件优先级较高，后面的配置文件优先级较低。如果出现相同的配置项，则在优先级高的配置生效。</p>

<p>可以在浏览器访问<code class="language-plaintext highlighter-rouge">http://localhost:8888/ui/default</code>看到Config Server返回的配置，它是一个JSON文件：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ui"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"profiles"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"default"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"state"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"propertySources"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/ui-default.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/application-default.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/ui.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/application.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>如果启动<code class="language-plaintext highlighter-rouge">UIApplication</code>时传入<code class="language-plaintext highlighter-rouge">SPRING_PROFILES_ACTIVE=test</code>，将profile设置为<code class="language-plaintext highlighter-rouge">test</code>，则Config Server返回的文件如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ui-test.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-test.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">ui.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>可以通过<code class="language-plaintext highlighter-rouge">http://localhost:8888/ui/test</code>查看返回的配置。由于文件<code class="language-plaintext highlighter-rouge">ui-test.yml</code>不存在，因此，实际配置由3个文件合并而成。</p>

<p>可以很容易地看到，一个Spring Boot应用在启动时，首先要设置自己的<code class="language-plaintext highlighter-rouge">name</code>并导入Config Server的URL，再根据当前活动的<code class="language-plaintext highlighter-rouge">profile</code>，由Config Server返回多个配置文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">{name}-{profile}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-{profile}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">{name}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>其中，<code class="language-plaintext highlighter-rouge">{name}-{xxx}.yml</code>是针对某个应用+某个<code class="language-plaintext highlighter-rouge">profile</code>的特定配置，<code class="language-plaintext highlighter-rouge">{name}.yml</code>是针对某个应用+所有profile的配置，<code class="language-plaintext highlighter-rouge">application-{profile}.yml</code>是针对某个<code class="language-plaintext highlighter-rouge">profile</code>的全局配置，<code class="language-plaintext highlighter-rouge">application.yml</code>是所有应用的全局配置。搭配各种配置文件就可以灵活组合配置。一般来说，全局默认的配置放在<code class="language-plaintext highlighter-rouge">application.yml</code>中，例如数据库连接：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost/test</span>
</code></pre></div></div>

<p>这样保证了默认连接到本地数据库，在生产环境中会直接报错而不是连接到错误的数据库。</p>

<p>在生产环境，例如<code class="language-plaintext highlighter-rouge">profile</code>设置为<code class="language-plaintext highlighter-rouge">prod</code>，则可以将数据库连接写在<code class="language-plaintext highlighter-rouge">application-prod.yml</code>中，使得所有生产环境的应用读取到的数据库连接是一致的：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://172.16.0.100/prod_db</span>
</code></pre></div></div>

<p>某个应用自己特定的配置则应当放到<code class="language-plaintext highlighter-rouge">{name}.yml</code>和<code class="language-plaintext highlighter-rouge">{name}-{profile}.yml</code>中。</p>

<p>在设置好各个配置文件后，应当通过浏览器检查Config Server返回的配置是否符合预期。</p>

<p>Spring Cloud Config还支持配置多个profile，以及从加密的配置源读取配置等。如果遇到更复杂的需求，可参考<a href="https://spring.io/projects/spring-cloud-config#learn">Spring Cloud Config的文档</a>。</p>

<h2 id="consul">consul</h2>

<p>Consul 是一个开源的服务发现和配置管理工具，由 HashiCorp 开发。它主要用于微服务架构中，提供服务注册、服务发现、健康检查和配置管理等功能。Consul 的主要特点包括：</p>

<ol>
  <li><strong>服务发现</strong></li>
</ol>

<p>Consul 允许服务在集群中进行注册和发现。服务可以向 Consul 注册其网络地址和其他元数据，其他服务可以通过查询 Consul 来找到这些服务。这样，服务间的通信就不再依赖硬编码的地址，而是通过 Consul 的服务发现功能进行动态定位。</p>

<ol>
  <li><strong>健康检查</strong></li>
</ol>

<p>Consul 提供了内置的健康检查机制，确保注册的服务实例处于健康状态。Consul 可以定期执行 HTTP、TCP、或者自定义命令的健康检查，并根据检查结果决定是否将服务实例从服务列表中移除。这样可以确保负载均衡器只将请求发送到健康的服务实例。</p>

<ol>
  <li><strong>服务注册和注销</strong></li>
</ol>

<p>服务可以在启动时向 Consul 注册自己，并在关闭时注销自己。Consul 维护一个最新的服务列表，并自动更新服务的状态。服务注册可以包括服务的元数据，如版本号、环境等信息。</p>

<ol>
  <li><strong>配置管理</strong></li>
</ol>

<p>Consul 提供了一个键值存储系统，允许应用程序存储和读取配置数据。配置可以被组织成层次结构，并且支持动态更新。应用程序可以在运行时从 Consul 中读取配置，并在配置变更时进行调整。</p>

<ol>
  <li><strong>多数据中心支持</strong></li>
</ol>

<p>Consul 支持跨数据中心的服务发现和配置管理，允许在多个地理位置的数据中心中运行 Consul 实例，并进行数据同步。这使得跨地域的微服务架构可以更容易地进行管理。</p>

<ol>
  <li><strong>安全性</strong></li>
</ol>

<p>Consul 提供了安全特性，如访问控制、加密和身份验证。它支持使用 TLS 对服务之间的通信进行加密，并允许通过 ACL（访问控制列表）来控制对 Consul 数据的访问权限。</p>

<hr />

<p>以下是如何在 Spring Boot 应用程序中使用 Consul 进行服务发现的基本步骤：</p>

<p><strong>添加依赖</strong></p>

<p>在 <code class="language-plaintext highlighter-rouge">pom.xml</code> 文件中添加 Consul 相关的依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-consul-discovery<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><strong>配置 Consul</strong></p>

<p>在 <code class="language-plaintext highlighter-rouge">application.yml</code> 文件中配置 Consul 相关的设置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">host</span><span class="pi">:</span> <span class="s">127.0.0.1</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8500</span>
      <span class="na">discovery</span><span class="pi">:</span>
        <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">service-name</span><span class="pi">:</span> <span class="s">my-service</span>
</code></pre></div></div>

<p><strong>使用 Consul 进行服务发现</strong></p>

<p>在应用程序中，可以使用 <code class="language-plaintext highlighter-rouge">@LoadBalanced</code> 注解和 <code class="language-plaintext highlighter-rouge">RestTemplate</code> 进行服务发现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="nd">@LoadBalanced</span>
    <span class="kd">public</span> <span class="nc">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">RestTemplate</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/call-service"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">callService</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 使用服务名称进行调用</span>
        <span class="k">return</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="s">"http://my-service/some-endpoint"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>相关命令</strong></p>

<p>启动 Consul 服务器（开发模式）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul agent <span class="nt">-dev</span>
</code></pre></div></div>

<p>注册一个服务到 Consul：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"service"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-service"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"primary"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">8080</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul services register service.json
</code></pre></div></div>

<p>查询服务：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul catalog services
</code></pre></div></div>

<p>Consul 提供了一整套解决方案来管理微服务的生命周期和配置，使得微服务架构的管理变得更加高效和可靠。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Spring Boot</title><link href="/2024/07/09/Spring-Boot/" rel="alternate" type="text/html" title="Spring Boot" /><published>2024-07-09T00:00:00+08:00</published><updated>2024-07-09T00:00:00+08:00</updated><id>/2024/07/09/Spring%20Boot</id><content type="html" xml:base="/2024/07/09/Spring-Boot/"><![CDATA[<h1 id="引言">引言</h1>
<p>Spring Boot笔记，集成mybatis、使用spring-boot-devtools、打包、瘦身、Actuator、Profiles、Conditional、加载配置文件、禁用自动配置、Filter、生命周期、集成Open API、Redis、Artemis、RabbitMQ、Kafka。</p>

<h1 id="spring-boot">Spring Boot</h1>

<p>Spring框架，它的主要功能包括IoC容器、AOP支持、事务支持、MVC开发以及强大的第三方集成功能等。而Spring Boot是一个基于Spring的套件，它帮我们预组装了Spring的一系列组件，以便以尽可能少的代码和配置来开发基于Spring的Java应用程序。</p>

<p>Spring Boot的目标就是提供一个开箱即用的应用程序架构，基于Spring Boot的预置结构继续开发，省时省力。</p>

<p>Spring Boot3.x版与Spring Boot 2.x版本，两者有以下不同：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">Spring Boot 2.x</th>
      <th style="text-align: left">Spring Boot 3.x</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Spring版本</td>
      <td style="text-align: left">Spring 5.x</td>
      <td style="text-align: left">Spring 6.x</td>
    </tr>
    <tr>
      <td style="text-align: left">JDK版本</td>
      <td style="text-align: left">&gt;= 1.8</td>
      <td style="text-align: left">&gt;= 17</td>
    </tr>
    <tr>
      <td style="text-align: left">Tomcat版本</td>
      <td style="text-align: left">9.x</td>
      <td style="text-align: left">10.x</td>
    </tr>
    <tr>
      <td style="text-align: left">Annotation包</td>
      <td style="text-align: left">javax.annotation</td>
      <td style="text-align: left">jakarta.annotation</td>
    </tr>
    <tr>
      <td style="text-align: left">Servlet包</td>
      <td style="text-align: left">javax.servlet</td>
      <td style="text-align: left">jakarta.servlet</td>
    </tr>
    <tr>
      <td style="text-align: left">JMS包</td>
      <td style="text-align: left">javax.jms</td>
      <td style="text-align: left">jakarta.jms</td>
    </tr>
    <tr>
      <td style="text-align: left">JavaMail包</td>
      <td style="text-align: left">javax.mail</td>
      <td style="text-align: left">jakarta.mail</td>
    </tr>
  </tbody>
</table>

<p>如果使用Spring Boot的其他版本，则需要根据需要调整代码。</p>

<p><a href="https://spring.io/projects/spring-boot">Spring Boot的官网</a>。</p>

<h2 id="标准spring-boot应用">标准Spring Boot应用</h2>

<p>新建一个<code class="language-plaintext highlighter-rouge">springboot-hello</code>的工程，创建标准的Maven目录结构如下：</p>

<pre><code class="language-ascii">springboot-hello
├── pom.xml
├── src
│   └── main
│       ├── java
│       └── resources
│           ├── application.yml
│           ├── logback-spring.xml
│           ├── static
│           └── templates
└── target
</code></pre>

<p>其中，在<code class="language-plaintext highlighter-rouge">src/main/resources</code>目录下：</p>

<p><strong>application.yml</strong></p>

<p>是Spring Boot默认的配置文件，它采用<a href="https://yaml.org/">YAML</a>格式而不是<code class="language-plaintext highlighter-rouge">.properties</code>格式，<strong>文件名必须是<code class="language-plaintext highlighter-rouge">application.yml</code>而不是其他名称。</strong></p>

<p>YAML格式比<code class="language-plaintext highlighter-rouge">key=value</code>格式的<code class="language-plaintext highlighter-rouge">.properties</code>文件更易读。比较一下两者的写法：</p>

<p>使用<code class="language-plaintext highlighter-rouge">.properties</code>格式：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># application.properties
</span>
<span class="py">spring.application.name</span><span class="p">=</span><span class="s">${APP_NAME:unnamed}</span>

<span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb</span>
<span class="py">spring.datasource.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">spring.datasource.password</span><span class="p">=</span>
<span class="py">spring.datasource.driver-class-name</span><span class="p">=</span><span class="s">org.hsqldb.jdbc.JDBCDriver</span>

<span class="py">spring.datasource.hikari.auto-commit</span><span class="p">=</span><span class="s">false</span>
<span class="py">spring.datasource.hikari.connection-timeout</span><span class="p">=</span><span class="s">3000</span>
<span class="py">spring.datasource.hikari.validation-timeout</span><span class="p">=</span><span class="s">3000</span>
<span class="py">spring.datasource.hikari.max-lifetime</span><span class="p">=</span><span class="s">60000</span>
<span class="py">spring.datasource.hikari.maximum-pool-size</span><span class="p">=</span><span class="s">20</span>
<span class="py">spring.datasource.hikari.minimum-idle</span><span class="p">=</span><span class="s">1</span>
</code></pre></div></div>

<p>使用YAML格式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># application.yml</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">${APP_NAME:unnamed}</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:mem:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
    <span class="na">hikari</span><span class="pi">:</span>
      <span class="na">auto-commit</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">connection-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">validation-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">max-lifetime</span><span class="pi">:</span> <span class="m">60000</span>
      <span class="na">maximum-pool-size</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">minimum-idle</span><span class="pi">:</span> <span class="m">1</span>
</code></pre></div></div>

<p>可见，YAML是一种层级格式，它和<code class="language-plaintext highlighter-rouge">.properties</code>很容易互相转换，它的优点是去掉了大量重复的前缀，并且更加易读。</p>

<p><strong>也可以使用<code class="language-plaintext highlighter-rouge">application.properties</code>作为配置文件</strong>，但不如YAML格式简单。</p>

<p><strong>使用环境变量</strong></p>

<p>在配置文件中，经常使用如下的格式对某个key进行配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">app</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">${DB_HOST:localhost}</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">${DB_USER:root}</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${DB_PASSWORD:password}</span>
</code></pre></div></div>

<p>这种<code class="language-plaintext highlighter-rouge">${DB_HOST:localhost}</code>意思是，首先从环境变量查找<code class="language-plaintext highlighter-rouge">DB_HOST</code>，如果环境变量定义了，那么使用环境变量的值，否则，使用默认值<code class="language-plaintext highlighter-rouge">localhost</code>。</p>

<p>这使得我们在开发和部署时更加方便，因为开发时无需设定任何环境变量，直接使用默认值即本地数据库，而实际线上运行的时候，只需要传入环境变量即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ DB_HOST</span><span class="o">=</span>10.0.1.123 <span class="nv">DB_USER</span><span class="o">=</span>prod <span class="nv">DB_PASSWORD</span><span class="o">=</span>xxxx java <span class="nt">-jar</span> xxx.jar
</code></pre></div></div>

<hr />

<p><strong>logback-spring.xml</strong>是Spring Boot的logback配置文件名称（也可以使用<code class="language-plaintext highlighter-rouge">logback.xml</code>），一个标准的写法如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;configuration&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">resource=</span><span class="s">"org/springframework/boot/logging/logback/defaults.xml"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"CONSOLE"</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.ConsoleAppender"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;encoder&gt;</span>
            <span class="nt">&lt;pattern&gt;</span>${CONSOLE_LOG_PATTERN}<span class="nt">&lt;/pattern&gt;</span>
            <span class="nt">&lt;charset&gt;</span>utf8<span class="nt">&lt;/charset&gt;</span>
        <span class="nt">&lt;/encoder&gt;</span>
    <span class="nt">&lt;/appender&gt;</span>

    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"APP_LOG"</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;encoder&gt;</span>
            <span class="nt">&lt;pattern&gt;</span>${FILE_LOG_PATTERN}<span class="nt">&lt;/pattern&gt;</span>
            <span class="nt">&lt;charset&gt;</span>utf8<span class="nt">&lt;/charset&gt;</span>
        <span class="nt">&lt;/encoder&gt;</span>
          <span class="nt">&lt;file&gt;</span>app.log<span class="nt">&lt;/file&gt;</span>
        <span class="nt">&lt;rollingPolicy</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;maxIndex&gt;</span>1<span class="nt">&lt;/maxIndex&gt;</span>
            <span class="nt">&lt;fileNamePattern&gt;</span>app.log.%i<span class="nt">&lt;/fileNamePattern&gt;</span>
        <span class="nt">&lt;/rollingPolicy&gt;</span>
        <span class="nt">&lt;triggeringPolicy</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;MaxFileSize&gt;</span>1MB<span class="nt">&lt;/MaxFileSize&gt;</span>
        <span class="nt">&lt;/triggeringPolicy&gt;</span>
    <span class="nt">&lt;/appender&gt;</span>

    <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">"INFO"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">"CONSOLE"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">"APP_LOG"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/root&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<p>它主要通过<code class="language-plaintext highlighter-rouge">&lt;include resource="..." /&gt;</code>引入了Spring Boot的一个缺省配置，这样我们就可以引用类似<code class="language-plaintext highlighter-rouge">${CONSOLE_LOG_PATTERN}</code>这样的变量。上述配置定义了一个控制台输出和文件输出，可根据需要修改。</p>

<p><code class="language-plaintext highlighter-rouge">static</code>是静态文件目录，<code class="language-plaintext highlighter-rouge">templates</code>是模板文件目录，它们不再存放在<code class="language-plaintext highlighter-rouge">src/main/webapp</code>下，而是直接放到<code class="language-plaintext highlighter-rouge">src/main/resources</code>这个classpath目录，因为在Spring Boot中已经不需要专门的webapp目录了。</p>

<p>以上就是Spring Boot的标准目录结构，它完全是一个基于Java应用的普通Maven项目。</p>

<p>源码的目录结构：</p>

<pre><code class="language-ascii">src/main/java
└── com.aotmd
    ├── Application.java
    ├── entity
    │   └── User.java
    ├── service
    │   └── UserService.java
    └── web
        └── UserController.java
</code></pre>

<p>在存放源码的<code class="language-plaintext highlighter-rouge">src/main/java</code>目录中，Spring Boot对Java包的层级结构有一个要求。根package是<code class="language-plaintext highlighter-rouge">com.aotmd</code>，下面还有<code class="language-plaintext highlighter-rouge">entity</code>、<code class="language-plaintext highlighter-rouge">service</code>、<code class="language-plaintext highlighter-rouge">web</code>等子package。Spring Boot要求<code class="language-plaintext highlighter-rouge">main()</code>方法所在的启动类必须放到根package下，命名不做要求，这里以<code class="language-plaintext highlighter-rouge">Application.java</code>命名，它的内容如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动Spring Boot应用程序只需要一行代码加上一个注解<code class="language-plaintext highlighter-rouge">@SpringBootApplication</code>，该注解实际上又包含了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@SpringBootConfiguration</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@Configuration</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@EnableAutoConfiguration</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@AutoConfigurationPackage</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@ComponentScan</code></li>
</ul>

<p>这样一个注解就相当于启动了自动配置和自动扫描。</p>

<p><code class="language-plaintext highlighter-rouge">pom.xml</code>内容如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="nt">&lt;groupId&gt;</span>org.example<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-hello<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;properties&gt;</span>
        <span class="nt">&lt;maven.compiler.source&gt;</span>11<span class="nt">&lt;/maven.compiler.source&gt;</span>
        <span class="nt">&lt;maven.compiler.target&gt;</span>11<span class="nt">&lt;/maven.compiler.target&gt;</span>
        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.2.4.RELEASE<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-jdbc<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="c">&lt;!-- 集成Pebble View --&gt;</span>
        <span class="c">&lt;!-- https://mvnrepository.com/artifact/io.pebbletemplates/pebble-spring-boot-starter --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>pebble-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>3.1.3<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>


        <span class="c">&lt;!-- JDBC驱动 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>使用Spring Boot时，强烈推荐从<code class="language-plaintext highlighter-rouge">spring-boot-starter-parent</code>继承，因为这样就可以引入Spring Boot的预置配置。</p>

<p>紧接着，引入了依赖<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>和<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>，它们分别引入了Spring MVC相关依赖和Spring JDBC相关依赖，无需指定版本号，因为引入的<code class="language-plaintext highlighter-rouge">&lt;parent&gt;</code>内已经指定了，只有我们自己引入的某些第三方jar包需要指定版本号。这里引入<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>作为View，以及<code class="language-plaintext highlighter-rouge">hsqldb</code>作为嵌入式数据库。<code class="language-plaintext highlighter-rouge">hsqldb</code>已在<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>中预置了版本号，因此此处无需指定版本号。</p>

<p><strong>第三方jar的版本兼容性可以查看<a href="https://mvnrepository.com/artifact/io.pebbletemplates/pebble-spring-boot-starter/3.1.3">mvnrepository</a>下的Compile Dependencies查看兼容性。</strong></p>

<p>根据<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>的<a href="https://pebbletemplates.io/wiki/guide/spring-boot-integration/">文档</a>，加入如下配置到<code class="language-plaintext highlighter-rouge">application.yml</code>：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pebble</span><span class="pi">:</span>
  <span class="c1"># 默认为".peb"，改为"":</span>
  <span class="na">suffix</span><span class="pi">:</span>
  <span class="c1"># 开发阶段禁用模板缓存:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">prefix</span><span class="pi">:</span> <span class="s">/templates/</span>
</code></pre></div></div>

<p>对<code class="language-plaintext highlighter-rouge">Application</code>稍作改动，添加<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>这个Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 映射路径`/static/`到classpath路径:</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"classpath:/static/"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在就可以直接运行<code class="language-plaintext highlighter-rouge">Application</code>，Spring Boot自动启动了嵌入式Tomcat，当看到<code class="language-plaintext highlighter-rouge">Started Application in xxx seconds</code>时，Spring Boot应用启动成功。</p>

<p>添加测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">TestController</span><span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">test</span><span class="o">(){</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"body"</span><span class="o">,</span><span class="s">"你好"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"title"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">test.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/test1</code>：</p>

<p>显示：<code class="language-plaintext highlighter-rouge">你好</code></p>

<hr />

<p>之前我们定义的数据源、声明式事务、JdbcTemplate在哪创建的？怎么就可以直接注入到自己编写的<code class="language-plaintext highlighter-rouge">UserService</code>中呢？</p>

<p>这些自动创建的Bean就是Spring Boot的特色：AutoConfiguration。</p>

<p>当引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>时，启动时会自动扫描所有的<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DataSourceAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">DataSource</code>，其中配置项从<code class="language-plaintext highlighter-rouge">application.yml</code>的<code class="language-plaintext highlighter-rouge">spring.datasource</code>读取；</li>
  <li><code class="language-plaintext highlighter-rouge">DataSourceTransactionManagerAutoConfiguration</code>：自动创建了一个基于JDBC的事务管理器；</li>
  <li><code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>：自动创建了一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。</li>
</ul>

<p>因此，自动得到了一个<code class="language-plaintext highlighter-rouge">DataSource</code>、一个<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。</p>

<p>类似的，当引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>时，自动创建了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ServletWebServerFactoryAutoConfiguration</code>：自动创建一个嵌入式Web服务器，默认是Tomcat；</li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServletAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">HttpEncodingAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">CharacterEncodingFilter</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">WebMvcAutoConfiguration</code>：自动创建若干与MVC相关的Bean。</li>
  <li>…</li>
</ul>

<p>引入第三方<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>时，自动创建了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PebbleAutoConfiguration</code>：自动创建了一个<code class="language-plaintext highlighter-rouge">PebbleViewResolver</code>。</li>
</ul>

<p>Spring Boot大量使用<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>来使得许多组件被自动化配置并创建，而这些创建过程又大量使用了Spring的Conditional功能。例如<code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>，它的代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@ConditionalOnClass</span><span class="o">({</span> <span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">JdbcTemplate</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="nd">@ConditionalOnSingleCandidate</span><span class="o">(</span><span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@AutoConfigureAfter</span><span class="o">(</span><span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="nc">JdbcProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">JdbcTemplateConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">NamedParameterJdbcTemplateConfiguration</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcTemplateAutoConfiguration</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当满足条件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnClass</code>：在classpath中能找到<code class="language-plaintext highlighter-rouge">DataSource</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnSingleCandidate(DataSource.class)</code>：在当前Bean的定义中能找到唯一的<code class="language-plaintext highlighter-rouge">DataSource</code>；</li>
</ul>

<p>该<code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>就会起作用。实际创建由导入的<code class="language-plaintext highlighter-rouge">JdbcTemplateConfiguration</code>完成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="nc">JdbcOperations</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">JdbcTemplateConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nd">@Primary</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">,</span> <span class="nc">JdbcProperties</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="nc">JdbcProperties</span><span class="o">.</span><span class="na">Template</span> <span class="n">template</span> <span class="o">=</span> <span class="n">properties</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">();</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setFetchSize</span><span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getFetchSize</span><span class="o">());</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setMaxRows</span><span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getMaxRows</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getQueryTimeout</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setQueryTimeout</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">template</span><span class="o">.</span><span class="na">getQueryTimeout</span><span class="o">().</span><span class="na">getSeconds</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>创建<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>之前，要满足<code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean(JdbcOperations.class)</code>，即不存在<code class="language-plaintext highlighter-rouge">JdbcOperations</code>的Bean。</p>

<p>如果自己创建了一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，例如，在<code class="language-plaintext highlighter-rouge">Application</code>中自己写个方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>那么根据条件<code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean(JdbcOperations.class)</code>，Spring Boot就不会再创建一个重复的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>（因为<code class="language-plaintext highlighter-rouge">JdbcOperations</code>是<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的父类）。</p>

<p>可见，Spring Boot自动装配功能是通过自动扫描+条件装配实现的，这一套机制在默认情况下工作得很好，但是，如果要手动控制某个Bean的创建，就需要详细地了解Spring Boot自动创建的原理，很多时候还要跟踪<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>，以便设定条件使得某个Bean不会被自动创建。</p>

<hr />

<h2 id="集成mybatis">集成mybatis</h2>

<p>引入对应版本的依赖即可：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.2.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>yml文件添加映射文件位置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">mybatis</span><span class="pi">:</span>
  <span class="na">mapper-locations</span><span class="pi">:</span> <span class="s">classpath:mapper/*.xml</span>

<span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">root</span><span class="pi">:</span> <span class="s">INFO</span>
    <span class="na">com.aotmd</span><span class="pi">:</span> <span class="s">DEBUG</span>
    <span class="na">org.mybatis</span><span class="pi">:</span> <span class="s">DEBUG</span>
</code></pre></div></div>

<p>然后添加之前Spring的非配置部分：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", createdAt="</span> <span class="o">+</span> <span class="n">createdAt</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">User</span> <span class="nf">getByEmailAndByPassword</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">=</span><span class="n">userMapper</span><span class="o">.</span><span class="na">getByEmailAndByPassword</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>映射文件也与之前相同：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.aotmd.UserMapper"</span><span class="nt">&gt;</span><span class="c">&lt;!--命名空间为接口名称--&gt;</span>
    <span class="c">&lt;!--id需与接口方法完全一致,parameterType形参,resultType返回值类型--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getById"</span> <span class="na">parameterType=</span><span class="s">"Long"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getAll"</span>  <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users LIMIT #{offset}, #{maxResults}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getByEmailAndByPassword"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE email = #{user.email} and
        password=#{user.password}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert2"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span> <span class="na">useGeneratedKeys=</span><span class="s">"true"</span> <span class="na">keyProperty=</span><span class="s">"id"</span> <span class="na">keyColumn=</span><span class="s">"id"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>

    <span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateName"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        UPDATE users
        SET name = #{user.name}
        WHERE id = #{user.id}
    <span class="nt">&lt;/update&gt;</span>

    <span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">"deleteById"</span> <span class="na">parameterType=</span><span class="s">"long"</span><span class="nt">&gt;</span>
        DELETE
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/delete&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<p>启动，然后post访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/signin</code>，附带json：<code class="language-plaintext highlighter-rouge">{"email":"tom@example.com","password":"tomcat","name":"test"}</code>，返回body：<code class="language-plaintext highlighter-rouge">{"user":{"id":0,"email":"tom@example.com","password":"tomcat","name":"test","createdAt":***}}</code></p>

<p>再get访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/users</code>，得到：<code class="language-plaintext highlighter-rouge">[{"id":0,"email":"tom@example.com","password":"tomcat","name":"test","createdAt":***}]</code></p>

<p>功能正常。</p>

<h2 id="spring-boot-devtools">spring-boot-devtools</h2>

<p>在开发阶段，我们经常要修改代码，然后重启Spring Boot应用。经常手动停止再启动，比较麻烦。</p>

<p>Spring Boot提供了一个开发者工具，可以监控classpath路径上的文件。只要源码或配置文件发生修改，Spring Boot应用可以自动重启。在开发阶段，这个功能比较有用。</p>

<p>要使用这一开发者功能，只需添加如下依赖到<code class="language-plaintext highlighter-rouge">pom.xml</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后，没有然后了。直接启动应用程序，然后试着修改源码，保存，观察日志输出，Spring Boot会自动重新加载。</p>

<p>默认配置下，针对<code class="language-plaintext highlighter-rouge">/static</code>、<code class="language-plaintext highlighter-rouge">/public</code>和<code class="language-plaintext highlighter-rouge">/templates</code>目录中的文件修改，不会自动重启，因为禁用缓存后，这些文件的修改可以实时更新。</p>

<hr />

<p>如果没有效果，那需要修改以下设置：</p>

<ol>
  <li>设置IDEA的编译器：
    <ul>
      <li>File-&gt;Settings…-&gt;Build,Execution,Deployment-&gt;Compiler，勾选”Build project automatically”</li>
      <li>文件-&gt;设置…-&gt;构建、执行、部署-&gt;编译器，勾选”自动构建项目”</li>
    </ul>
  </li>
  <li>应用程序运行时允许编译器自动生成：
    <ul>
      <li>在IntellijIDEA中：按Ctrl+Shift+a，然后键入“注册表”并点击它。然后启用选项“compiler.Automake.Allow.When.app.Running”。</li>
      <li>在新版本这个选项已经被移到了高级设置中，文件-&gt;设置…-&gt;高级设置-&gt;编译器栏-&gt;“即使开发的应用程序当前正在运行，也允许自动make启动”。</li>
    </ul>
  </li>
</ol>

<p>还有可能是项目名称的问题：</p>

<p>在决定类路径上的条目更改时是否应触发重启时，<strong>DevTools会自动忽略名为：</strong><code class="language-plaintext highlighter-rouge">Spring-Boot</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-DevTools</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-Autoconfiguration</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-Actuator</code>和<code class="language-plaintext highlighter-rouge">Spring-Boot-starter</code>的项目。</p>

<p>使用Ctrl+F9构建项目<strong>会自动触发重新启动</strong>。如果您希望在保存类文件后立即自动触发，可以按照问题中提供的热插拔链接进行操作。</p>

<p>Spring Boot还具有在特定文件发生更改时触发重新启动的选项，可以使用以下属性在应用程序中配置该选项</p>

<blockquote>
  <p>spring.devtools.restart.trigger-file=</p>

  <p>Spring.devtools.restart.rigger-file=</p>
</blockquote>

<p>参见： <a href="https://stackoverflow.com/questions/53569745/spring-boot-developer-tools-auto-restart-doesnt-work-in-intellij">Spring Boot Developer Tools Auto restart doesn’t work in IntelliJ</a></p>

<h2 id="打包spring-boot应用">打包Spring Boot应用</h2>

<p>在Spring Boot应用中，Spring Boot自带一个更简单的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>插件用来打包，只需要在<code class="language-plaintext highlighter-rouge">pom.xml</code>中加入以下配置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>无需任何配置，Spring Boot的这款插件会自动定位应用程序的入口Class，执行以下Maven命令即可打包：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn clean package
</code></pre></div></div>

<p>以<code class="language-plaintext highlighter-rouge">spring-boot-hello</code>项目为例，打包后在<code class="language-plaintext highlighter-rouge">target</code>目录下可以看到两个jar文件：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring-boot-hello-1.0-SNAPSHOT.jar
spring-boot-hello-1.0-SNAPSHOT.jar.original
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar.original</code>是Maven标准打包插件打的jar包，它只包含我们自己的Class，不包含依赖，而<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>是Spring Boot打包插件创建的包含依赖的jar，可以直接运行：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> springboot-exec-jar-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>这样，部署一个Spring Boot应用就非常简单，无需预装任何服务器，只需要上传jar包即可。</p>

<p>在打包的时候，因为打包后的Spring Boot应用不会被修改，因此，默认情况下，<code class="language-plaintext highlighter-rouge">spring-boot-devtools</code>这个依赖不会被打包进去。但是要注意，使用早期的Spring Boot版本时，需要配置一下才能排除<code class="language-plaintext highlighter-rouge">spring-boot-devtools</code>这个依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;excludeDevtools&gt;</span>true<span class="nt">&lt;/excludeDevtools&gt;</span>
    <span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<p>如果不喜欢默认的项目名+版本号作为文件名，可以加一个配置指定文件名：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;finalName&gt;</span>awesome-app<span class="nt">&lt;/finalName&gt;</span>
        ...
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>这样打包后的文件名就是<code class="language-plaintext highlighter-rouge">awesome-app.jar</code>。</p>

<hr />

<p>在 IntelliJ IDEA 中运行打包好的 Spring Boot JAR 文件，可以按照以下步骤操作：</p>

<p><strong>方法 1：使用终端运行 JAR 文件</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到终端（View -&gt; Tool Windows -&gt; Terminal）。</li>
  <li>切换到包含 JAR 文件的目录，例如：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">cd </span>target
</code></pre></div>    </div>
  </li>
  <li>使用以下命令运行 JAR 文件：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> java <span class="nt">-jar</span> your-application.jar
</code></pre></div>    </div>
    <p>替换 <code class="language-plaintext highlighter-rouge">your-application.jar</code> 为实际的 JAR 文件名。</p>
  </li>
</ol>

<p><strong>方法 2：创建运行配置</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到 “Run/Debug Configurations”（Run -&gt; Edit Configurations）。</li>
  <li>点击左上角的 <code class="language-plaintext highlighter-rouge">+</code> 号，选择 <code class="language-plaintext highlighter-rouge">Application</code>。</li>
  <li>配置运行配置：
    <ul>
      <li><strong>Name</strong>: 运行配置的名称，例如 <code class="language-plaintext highlighter-rouge">Run Jar</code>.</li>
      <li><strong>Main class</strong>: 选择 <code class="language-plaintext highlighter-rouge">org.springframework.boot.loader.JarLauncher</code>。</li>
      <li><strong>Program arguments</strong>: 填写 JAR 文件的路径，例如 <code class="language-plaintext highlighter-rouge">path/to/your-application.jar</code>。</li>
    </ul>
  </li>
  <li>点击 “OK” 保存运行配置。</li>
  <li>在 IntelliJ IDEA 的工具栏上选择新创建的运行配置，然后点击 “Run” 按钮。</li>
</ol>

<p><strong>方法 3：使用 JAR 文件配置</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到 “Run/Debug Configurations”（Run -&gt; Edit Configurations）。</li>
  <li>点击左上角的 <code class="language-plaintext highlighter-rouge">+</code> 号，选择 <code class="language-plaintext highlighter-rouge">JAR Application</code>。</li>
  <li>配置运行配置：
    <ul>
      <li><strong>Name</strong>: 运行配置的名称，例如 <code class="language-plaintext highlighter-rouge">Run Jar</code>.</li>
      <li><strong>Path to JAR</strong>: 选择 JAR 文件的路径，例如 <code class="language-plaintext highlighter-rouge">target/your-application.jar</code>。</li>
      <li><strong>Working Directory</strong>: 设置为项目的根目录。</li>
      <li><strong>VM options</strong>: 根据需要填写，例如 <code class="language-plaintext highlighter-rouge">-Xmx1024m</code>。</li>
    </ul>
  </li>
  <li>点击 “OK” 保存运行配置。</li>
  <li>在 IntelliJ IDEA 的工具栏上选择新创建的运行配置，然后点击 “Run” 按钮。</li>
</ol>

<h2 id="瘦身spring-boot应用">瘦身Spring Boot应用</h2>

<p>使用Spring Boot提供的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>打包Spring Boot应用，可以直接获得一个完整的可运行的jar包，把它上传到服务器上再运行就极其方便。</p>

<p>但是这种方式也不是没有缺点。最大的缺点就是包太大了，动不动几十MB，在网速不给力的情况下，上传服务器非常耗时。引用到的Tomcat、Spring和其他第三方组件，只要版本号不变，这些jar就相当于每次都重复打进去，再重复上传了一遍。</p>

<p>真正经常改动的代码其实是自己编写的代码。如果只打包自己编写的代码，通常jar包也就几百KB。但是，运行的时候，classpath中没有依赖的jar包，肯定会报错。</p>

<p>如何只打自己编写的代码，同时又自动把依赖包下载到某处，并自动引入到classpath中。解决方案就是使用<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>。</p>

<p>修改<code class="language-plaintext highlighter-rouge">&lt;build&gt;</code>-<code class="language-plaintext highlighter-rouge">&lt;plugins&gt;</code>-<code class="language-plaintext highlighter-rouge">&lt;plugin&gt;</code>，给原来的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>增加一个<code class="language-plaintext highlighter-rouge">&lt;dependency&gt;</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;dependencies&gt;</span>
                    <span class="nt">&lt;dependency&gt;</span>
                        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
                        <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
                        <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
                    <span class="nt">&lt;/dependency&gt;</span>
                <span class="nt">&lt;/dependencies&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
                <span class="nt">&lt;executions&gt;</span>
                    <span class="c">&lt;!--在构建时下载依赖项--&gt;</span>
                    <span class="nt">&lt;execution&gt;</span>
                        <span class="nt">&lt;id&gt;</span>resolve<span class="nt">&lt;/id&gt;</span>
                        <span class="nt">&lt;goals&gt;</span>
                            <span class="nt">&lt;goal&gt;</span>resolve<span class="nt">&lt;/goal&gt;</span>
                        <span class="nt">&lt;/goals&gt;</span>
                        <span class="nt">&lt;inherited&gt;</span>false<span class="nt">&lt;/inherited&gt;</span>
                    <span class="nt">&lt;/execution&gt;</span>
                <span class="nt">&lt;/executions&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
    <span class="c">&lt;!-- 阿里云maven仓库 --&gt;</span>
    <span class="nt">&lt;repositories&gt;</span>
        <span class="nt">&lt;repository&gt;</span>
            <span class="nt">&lt;id&gt;</span>public<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;name&gt;</span>aliyun nexus<span class="nt">&lt;/name&gt;</span>
            <span class="nt">&lt;url&gt;</span>https://maven.aliyun.com/repository/public<span class="nt">&lt;/url&gt;</span>
            <span class="nt">&lt;releases&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/releases&gt;</span>
        <span class="nt">&lt;/repository&gt;</span>
    <span class="nt">&lt;/repositories&gt;</span>
    <span class="nt">&lt;pluginRepositories&gt;</span>
        <span class="nt">&lt;pluginRepository&gt;</span>
            <span class="nt">&lt;id&gt;</span>public<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;name&gt;</span>aliyun nexus<span class="nt">&lt;/name&gt;</span>
            <span class="nt">&lt;url&gt;</span>https://maven.aliyun.com/repository/public<span class="nt">&lt;/url&gt;</span>
            <span class="nt">&lt;releases&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/releases&gt;</span>
            <span class="nt">&lt;snapshots&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/snapshots&gt;</span>
        <span class="nt">&lt;/pluginRepository&gt;</span>
    <span class="nt">&lt;/pluginRepositories&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>如果无法自动下载：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>可以把它加入到</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
	<span class="nt">&lt;dependencies&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>加载完毕后删除。</p>

<p>然后不需要任何其他改动了，直接按正常的流程打包，执行<code class="language-plaintext highlighter-rouge">mvn clean package</code>，<code class="language-plaintext highlighter-rouge">target</code>目录最终生成的可执行<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>只有79KB左右。</p>

<p>直接运行<code class="language-plaintext highlighter-rouge">java -jar spring-boot-hello-1.0-SNAPSHOT.jar</code>，效果和上一节完全一样。显然，79KB的jar肯定无法放下Tomcat和Spring。那么，运行时这个<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>又是怎么找到它自己依赖的jar包呢？</p>

<p>实际上<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>这个插件改变了<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>的默认行为。它输出的jar包只包含自己代码编译后的class，一个很小的<code class="language-plaintext highlighter-rouge">ThinJarWrapper</code>，以及解析<code class="language-plaintext highlighter-rouge">pom.xml</code>后得到的所有依赖jar的列表。</p>

<p>运行的时候，入口实际上是<code class="language-plaintext highlighter-rouge">ThinJarWrapper</code>，它会先在指定目录搜索看看依赖的jar包是否都存在，如果不存在，先从Maven中央仓库下载到本地，然后，再执行我们自己编写的<code class="language-plaintext highlighter-rouge">main()</code>入口方法。这种方式有点类似很多在线安装程序：用户下载后得到的是一个很小的exe安装程序，执行安装程序时，会首先在线下载所需的若干巨大的文件，再进行真正的安装。</p>

<p>这个<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>在启动时搜索的默认目录是用户主目录的<code class="language-plaintext highlighter-rouge">.m2</code>，也可以指定下载目录，例如，将下载目录指定为当前目录：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-Dthin</span>.root<span class="o">=</span><span class="nb">.</span> <span class="nt">-jar</span> spring-boot-hello-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>上述命令通过环境变量<code class="language-plaintext highlighter-rouge">thin.root</code>传入当前目录，执行后发现当前目录下自动生成了一个<code class="language-plaintext highlighter-rouge">repository</code>目录，这和Maven的默认下载目录<code class="language-plaintext highlighter-rouge">~/.m2/repository</code>的结构是完全一样的，只是它仅包含<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>所需的运行期依赖项。</p>

<p>注意：只有首次运行时会自动下载依赖项，再次运行时由于无需下载，所以启动速度会大大加快。如果删除了repository目录，再次运行时就会再次触发下载。</p>

<p><strong>预热</strong></p>

<p>把79KB大小的<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>直接扔到服务器执行，上传过程就非常快。但是，第一次在服务器上运行<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>时，仍需要从Maven中央仓库下载大量的jar包，所以，<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>还提供了一个<code class="language-plaintext highlighter-rouge">dryrun</code>选项，专门用来下载依赖项而不执行实际代码：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-Dthin</span>.dryrun<span class="o">=</span><span class="nb">true</span> <span class="nt">-Dthin</span>.root<span class="o">=</span><span class="nb">.</span> <span class="nt">-jar</span> spring-boot-hello-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>执行上述代码会在当前目录创建<code class="language-plaintext highlighter-rouge">repository</code>目录，并下载所有依赖项，但并不会运行我们编写的<code class="language-plaintext highlighter-rouge">main()</code>方法。此过程称之为“预热”（warm up）。</p>

<p>如果服务器由于安全限制不允许从外网下载文件，那么可以在本地预热，然后把<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>和<code class="language-plaintext highlighter-rouge">repository</code>目录上传到服务器。只要依赖项没有变化，后续改动只需要上传<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>即可。</p>

<p>如果在maven中使用相对路径引入了自己的jar,使用 <code class="language-plaintext highlighter-rouge">java -jar .\xxx.jar --thin.root=.</code> 会报错。如：<code class="language-plaintext highlighter-rouge">&lt;systemPath&gt;${project.basedir}/src/main/resources/lib/spring-file-storage-0.4.0.jar&lt;/systemPath&gt;</code></p>

<p><code class="language-plaintext highlighter-rouge">thin.root</code>根目录默认用的是本地的m2目录：<code class="language-plaintext highlighter-rouge">${user.home}/.m2</code></p>

<p>把自己的jar直接复制到开发环境和部署环境的m2目录下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;systemPath&gt;</span>
  ${user.home}/.m2/repository/com/***/abc.jar
<span class="nt">&lt;/systemPath&gt;</span>
</code></pre></div></div>

<p>这样就不会提示找不到依赖了。</p>

<p><a href="https://github.com/spring-projects-experimental/spring-boot-thin-launcher">Spring Boot Thin Launcher官网</a></p>

<h2 id="actuator">Actuator</h2>

<p>如果需要对应用程序的状态进行监控，</p>

<p>使用JMX需要把一些监控信息以MBean的形式暴露给JMX Server，而Spring Boot已经内置了一个监控功能叫Actuator。</p>

<p>使用Actuator非常简单，只需添加如下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后正常启动应用程序，Actuator会把它能收集到的所有信息都暴露给JMX。此外，Actuator还可以通过URL<code class="language-plaintext highlighter-rouge">/actuator/</code>挂载一些监控点，例如，输入<code class="language-plaintext highlighter-rouge">http://localhost:8080/actuator/health</code>，可以查看应用程序当前状态：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"UP"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Actuator默认把<strong>所有访问点暴露给JMX</strong>，但处于安全原因，只有<code class="language-plaintext highlighter-rouge">health</code>和<code class="language-plaintext highlighter-rouge">info</code>会暴露给Web。Actuator提供的所有访问点均在官方文档列出，要暴露更多的访问点给Web，需要在<code class="language-plaintext highlighter-rouge">application.yml</code>中加上配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">management</span><span class="pi">:</span>
  <span class="na">endpoints</span><span class="pi">:</span>
    <span class="na">web</span><span class="pi">:</span>
      <span class="na">exposure</span><span class="pi">:</span>
        <span class="na">include</span><span class="pi">:</span> <span class="s">info, health, beans, env, metrics</span>
</code></pre></div></div>

<p>要特别注意暴露的URL的安全性，例如，<code class="language-plaintext highlighter-rouge">/actuator/env</code>可以获取当前机器的所有环境变量，不可暴露给公网。</p>

<h2 id="profiles">Profiles</h2>

<p>Profile本身是Spring提供的功能，Profile表示一个环境的概念，如开发、测试和生产这3个环境：</p>

<ul>
  <li>native</li>
  <li>test</li>
  <li>production</li>
</ul>

<p>或者按git分支定义master、dev这些环境：</p>

<ul>
  <li>master</li>
  <li>dev</li>
</ul>

<p>在启动一个Spring应用程序的时候，可以传入一个或多个环境，例如：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-Dspring</span>.profiles.active<span class="o">=</span><span class="nb">test</span>,master
</code></pre></div></div>

<p>大多数情况下，使用一个环境就足够了。</p>

<p>Spring Boot对Profiles的支持在于，可以在<code class="language-plaintext highlighter-rouge">application.yml</code>中为每个环境进行配置。下面是一个示例配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">${APP_NAME:unnamed}</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
    <span class="na">hikari</span><span class="pi">:</span>
      <span class="na">auto-commit</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">connection-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">validation-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">max-lifetime</span><span class="pi">:</span> <span class="m">60000</span>
      <span class="na">maximum-pool-size</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">minimum-idle</span><span class="pi">:</span> <span class="m">1</span>

<span class="na">pebble</span><span class="pi">:</span>
  <span class="na">suffix</span><span class="pi">:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">false</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="s">${APP_PORT:8080}</span>

<span class="nn">---</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">test</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8000</span>

<span class="nn">---</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">production</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>

<span class="na">pebble</span><span class="pi">:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p>分隔符<code class="language-plaintext highlighter-rouge">---</code>，最前面的配置是默认配置，不需要指定Profile，后面的每段配置都必须以<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: xxx</code>开头，表示一个Profile。上述配置默认使用8080端口，但是在<code class="language-plaintext highlighter-rouge">test</code>环境下，使用<code class="language-plaintext highlighter-rouge">8000</code>端口，在<code class="language-plaintext highlighter-rouge">production</code>环境下，使用<code class="language-plaintext highlighter-rouge">80</code>端口，并且启用Pebble的缓存。</p>

<p>如果不指定任何Profile，直接启动应用程序，那么Profile实际上就是<code class="language-plaintext highlighter-rouge">default</code>，可以从Spring Boot启动日志看出：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>... INFO 54252 --- [  restartedMain] com.aotmd.Application                    : No active profile set, falling back to default profiles: default
</code></pre></div></div>

<p>上述日志显示未设置Profile，使用默认的Profile为<code class="language-plaintext highlighter-rouge">default</code>。</p>

<p>要以<code class="language-plaintext highlighter-rouge">test</code>环境启动，可输入如下命令：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java -Dspring.profiles.active=test -jar springboot-profiles-1.0-SNAPSHOT.jar
...
INFO 58848 --- [  restartedMain] com.aotmd.Application                    : The following profiles are active: test
...
INFO 13510 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8000 (http) with context path ''
...
</code></pre></div></div>

<p>从日志看到活动的Profile是<code class="language-plaintext highlighter-rouge">test</code>，Tomcat的监听端口是<code class="language-plaintext highlighter-rouge">8000</code>。</p>

<p>通过Profile可以实现一套代码在不同环境启用不同的配置和功能。</p>

<p>在启动一个Spring应用程序的时候，可以传入一个或多个环境。如<code class="language-plaintext highlighter-rouge">-Dspring.profiles.active=test,master</code>，那最终会以哪个为准呢？答案是：先合并配置，如果有冲突，后面的覆盖前面的。</p>

<p>也可以多文件配置，将单文件中用—分割的文档块，分离到单个文件，主配置文件<code class="language-plaintext highlighter-rouge">application.yml</code>，环境配置文件<code class="language-plaintext highlighter-rouge">application-{profile}.yml</code>，因为已经通过文件名称设置了<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: xxx</code>，因此不再需要重复写了，则<code class="language-plaintext highlighter-rouge">application-test.yml</code>的文件内容为：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8000</span>
</code></pre></div></div>

<p>通过主配置文件中<code class="language-plaintext highlighter-rouge">spring.profiles.active: test</code>进行激活环境</p>

<p>或者使用环境参数激活：</p>

<ul>
  <li>VM options参数：<code class="language-plaintext highlighter-rouge">-Dspring.profiles.active=test</code></li>
  <li>Program argument参数：<code class="language-plaintext highlighter-rouge">--spring.profiles.active=test</code></li>
</ul>

<p>在新版本中<code class="language-plaintext highlighter-rouge">spring.profiles: test</code>更换成了<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: test</code></p>

<p>假设需要一个存储服务，在本地开发时，直接使用文件存储即可，但是，在测试和生产环境，需要存储到云端，如何通过Profile实现该功能？首先，要定义存储接口<code class="language-plaintext highlighter-rouge">StorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StorageService</span> <span class="o">{</span>

    <span class="c1">// 根据URI打开InputStream:</span>
    <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>

    <span class="c1">// 根据扩展名+InputStream保存并返回URI:</span>
    <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>本地存储可通过<code class="language-plaintext highlighter-rouge">LocalStorageService</code>实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"default"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local:/var/static}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">localStorageRootDir</span><span class="o">;</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">private</span> <span class="nc">File</span> <span class="n">localStorageRoot</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Intializing local storage with root dir: {}"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">localStorageRootDir</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRootDir</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">File</span> <span class="n">targetFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span><span class="o">,</span> <span class="n">uri</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">targetFile</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">extName</span><span class="o">;</span>
        <span class="nc">File</span> <span class="n">targetFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">targetFile</span><span class="o">)))</span> <span class="o">{</span>
            <span class="n">input</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">fileName</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>而云端存储可通过<code class="language-plaintext highlighter-rouge">CloudStorageService</code>实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"!default"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CloudStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.bucket:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">bucket</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.access-key:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">accessKey</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.access-secret:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">accessSecret</span><span class="o">;</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Initializing cloud storage..."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"File not found: "</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Unable to access cloud storage."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LocalStorageService</code>使用了条件装配<code class="language-plaintext highlighter-rouge">@Profile("default")</code>，即默认启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>，而<code class="language-plaintext highlighter-rouge">CloudStorageService</code>使用了条件装配<code class="language-plaintext highlighter-rouge">@Profile("!default")</code>，即非<code class="language-plaintext highlighter-rouge">default</code>环境时，自动启用<code class="language-plaintext highlighter-rouge">CloudStorageService</code>。这样，一套代码，就实现了不同环境启用不同的配置。</p>

<h2 id="conditional">Conditional</h2>

<p>使用Profile能根据不同的Profile进行条件装配，但是Profile控制比较糙，如果想要精细控制，用Profile就很难实现。</p>

<p>Spring本身提供了条件装配<code class="language-plaintext highlighter-rouge">@Conditional</code>，但是要自己编写比较复杂的<code class="language-plaintext highlighter-rouge">Condition</code>来做判断，比较麻烦。Spring Boot则准备好了几个非常有用的条件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>：如果有指定的配置，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnBean</code>：如果有指定的Bean，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code>：如果没有指定的Bean，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingClass</code>：如果没有指定的Class，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnWebApplication</code>：在Web环境中条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnExpression</code>：根据表达式判断条件是否生效。</li>
</ul>

<p>以最常用的<code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>为例，把上一节的<code class="language-plaintext highlighter-rouge">StorageService</code>改写如下。首先，定义配置<code class="language-plaintext highlighter-rouge">storage.type=xxx</code>，用来判断条件，默认为<code class="language-plaintext highlighter-rouge">local</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">${STORAGE_TYPE:local}</span>
</code></pre></div></div>

<p>设定为<code class="language-plaintext highlighter-rouge">local</code>时，启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"local"</span><span class="o">,</span> <span class="n">matchIfMissing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LocalStorageService</code>的注解，当指定配置为<code class="language-plaintext highlighter-rouge">local</code>，或者配置不存在，均启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>。</p>

<p>设定为<code class="language-plaintext highlighter-rouge">aws</code>时，启用<code class="language-plaintext highlighter-rouge">AwsStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"aws"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>设定为<code class="language-plaintext highlighter-rouge">aliyun</code>时，启用<code class="language-plaintext highlighter-rouge">AliyunStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"aliyun"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AliyunStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>：当指定的配置属性存在且符合预期时，条件生效。</p>

<p><strong>常用属性:</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的属性名称。</li>
  <li><code class="language-plaintext highlighter-rouge">havingValue</code>: 属性值必须与此值匹配才生效。</li>
  <li><code class="language-plaintext highlighter-rouge">matchIfMissing</code>: 如果属性不存在，是否匹配。默认值是 <code class="language-plaintext highlighter-rouge">false</code>。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"feature.enabled"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"true"</span><span class="o">,</span> <span class="n">matchIfMissing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeatureConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnBean</code>：当指定的Bean存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code> 或 <code class="language-plaintext highlighter-rouge">type</code>: 要检查的Bean类型。</li>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的Bean名称。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnBean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"myBean"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanDependentConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code>：当指定的Bean不存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code> 或 <code class="language-plaintext highlighter-rouge">type</code>: 要检查的Bean类型。</li>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的Bean名称。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"myBean"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MissingBeanConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingClass</code>：当指定的类不存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code>: 要检查的类名。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnMissingClass</span><span class="o">(</span><span class="s">"com.example.SomeClass"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MissingClassConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnWebApplication</code>：在Web应用环境中，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code>: Web应用的类型，可以是 <code class="language-plaintext highlighter-rouge">SERVLET</code> 或 <code class="language-plaintext highlighter-rouge">REACTIVE</code>。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnWebApplication</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">ConditionalOnWebApplication</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">SERVLET</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebAppConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnExpression</code>：根据SpEL表达式判断条件是否生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code>: SpEL表达式。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnExpression</span><span class="o">(</span><span class="s">"'${env}'.equals('dev')"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DevEnvConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="加载配置文件">加载配置文件</h2>

<p>加载配置文件可以直接使用注解<code class="language-plaintext highlighter-rouge">@Value</code>，例如，我们定义了一个最大允许上传的文件大小配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="m">102400</span>
</code></pre></div></div>

<p>在某个<code class="language-plaintext highlighter-rouge">FileUploader</code>里，需要获取该配置，可使用<code class="language-plaintext highlighter-rouge">@Value</code>注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileUploader</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local.max-size:102400}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>

    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在另一个<code class="language-plaintext highlighter-rouge">UploadFilter</code>中，因为要检查文件的MD5，同时也要检查输入流的大小，因此，也需要该配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local.max-size:100000}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>

    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>多次引用同一个<code class="language-plaintext highlighter-rouge">@Value</code>不但麻烦，而且<code class="language-plaintext highlighter-rouge">@Value</code>使用字符串，缺少编译器检查，容易造成多处引用不一致（例如，<code class="language-plaintext highlighter-rouge">UploadFilter</code>把缺省值误写为<code class="language-plaintext highlighter-rouge">100000</code>）。</p>

<p>为了更好地管理配置，Spring Boot允许创建一个Bean，持有一组配置，并由Spring Boot自动注入。</p>

<p>假设在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加了如下配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="c1"># 文件存储根目录:</span>
    <span class="na">root-dir</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_ROOT:/var/storage}</span>
    <span class="c1"># 最大文件大小，默认100K:</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_MAX_SIZE:102400}</span>
    <span class="c1"># 是否允许空文件:</span>
    <span class="na">allow-empty</span><span class="pi">:</span> <span class="no">false</span>
    <span class="c1"># 允许的文件类型:</span>
    <span class="na">allow-types</span><span class="pi">:</span> <span class="s">jpg, png, gif</span>
</code></pre></div></div>

<p>可以首先定义一个Java Bean，持有该组配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span><span class="c1">//注意使用驼峰替代横线</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

    <span class="c1">// TODO: getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<p>保证Java Bean的属性名称与配置一致即可。然后，添加两个注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"storage.local"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConfigurationProperties("storage.local")</code>表示将从配置项<code class="language-plaintext highlighter-rouge">storage.local</code>读取该项的所有子项配置，并且，<code class="language-plaintext highlighter-rouge">@Configuration</code>表示<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>也是一个Spring管理的Bean，可直接注入到其他Bean中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">StorageConfiguration</span> <span class="n">storageConfig</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: root-dir = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getRootDir</span><span class="o">());</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: max-size = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getMaxSize</span><span class="o">());</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: allowed-types = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getAllowTypes</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样一来，引入<code class="language-plaintext highlighter-rouge">storage.local</code>的相关配置就很容易了，因为只需要注入<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>这个Bean，这样可以由编译器检查类型，无需编写重复的<code class="language-plaintext highlighter-rouge">@Value</code>注解。</p>

<hr />

<p>如果你的配置项有嵌套结构，可以在Java Bean中定义对应的嵌套类。下面是一个示例，其中包括嵌套配置项的处理。</p>

<p>首先，你的<code class="language-plaintext highlighter-rouge">application.yml</code>配置文件内容如下：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="na">root-dir</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_ROOT:/var/storage}</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_MAX_SIZE:102400}</span>
    <span class="na">allow-empty</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">allow-types</span><span class="pi">:</span> <span class="s">jpg, png, gif</span>
  <span class="na">remote</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">${STORAGE_REMOTE_URL:http://example.com}</span>
    <span class="na">timeout</span><span class="pi">:</span> <span class="s">${STORAGE_REMOTE_TIMEOUT:5000}</span>
</code></pre></div></div>

<p>接下来，你需要定义对应的Java Bean类来表示这个配置。可以将<code class="language-plaintext highlighter-rouge">local</code>和<code class="language-plaintext highlighter-rouge">remote</code>配置项分别封装到嵌套的类中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.context.properties.ConfigurationProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"storage"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Local</span> <span class="n">local</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Remote</span> <span class="n">remote</span><span class="o">;</span>

    <span class="c1">// Getters and setters for `local` and `remote`</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Local</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

        <span class="c1">// Getters and setters for `rootDir`, `maxSize`, `allowEmpty`, and `allowTypes`</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Remote</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">url</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">;</span>

        <span class="c1">// Getters and setters for `url` and `timeout`</span>
    <span class="o">}</span>

    <span class="c1">// Getters and setters for `local` and `remote`</span>
    <span class="kd">public</span> <span class="nc">Local</span> <span class="nf">getLocal</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">local</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLocal</span><span class="o">(</span><span class="nc">Local</span> <span class="n">local</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">local</span> <span class="o">=</span> <span class="n">local</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Remote</span> <span class="nf">getRemote</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">remote</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRemote</span><span class="o">(</span><span class="nc">Remote</span> <span class="n">remote</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">remote</span> <span class="o">=</span> <span class="n">remote</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上述代码中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Configuration</code>注解表示<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>是一个Spring管理的Bean。</li>
  <li><code class="language-plaintext highlighter-rouge">@ConfigurationProperties("storage")</code>注解表示从<code class="language-plaintext highlighter-rouge">storage</code>前缀开始读取配置项。</li>
  <li><code class="language-plaintext highlighter-rouge">Local</code>和<code class="language-plaintext highlighter-rouge">Remote</code>是两个静态嵌套类，用于表示嵌套的配置项。</li>
</ul>

<p>通过这种方式，Spring Boot会自动将配置文件中的值绑定到相应的Java Bean中。</p>

<p>你还需要为嵌套类定义getter和setter方法，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Local</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

    <span class="c1">// Getters and setters</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getRootDir</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRootDir</span><span class="o">(</span><span class="nc">String</span> <span class="n">rootDir</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">rootDir</span> <span class="o">=</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMaxSize</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMaxSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">maxSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxSize</span> <span class="o">=</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAllowEmpty</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAllowEmpty</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">allowEmpty</span> <span class="o">=</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getAllowTypes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">allowTypes</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAllowTypes</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">allowTypes</span> <span class="o">=</span> <span class="n">allowTypes</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Remote</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">url</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">;</span>

    <span class="c1">// Getters and setters</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getUrl</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">url</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUrl</span><span class="o">(</span><span class="nc">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">url</span> <span class="o">=</span> <span class="n">url</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getTimeout</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">timeout</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTimeout</span><span class="o">(</span><span class="kt">int</span> <span class="n">timeout</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">timeout</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，配置文件中的值就会自动绑定到对应的Java Bean中，并且可以在你的应用程序中通过注入<code class="language-plaintext highlighter-rouge">StorageConfiguration</code> Bean来访问这些配置值。</p>

<h2 id="禁用自动配置">禁用自动配置</h2>

<p>Spring Boot大量使用自动配置和默认配置，极大地减少了代码，通常只需要加上几个注解，并按照默认规则设定一下必要的配置即可。例如，配置JDBC，默认情况下，只需要配置一个<code class="language-plaintext highlighter-rouge">spring.datasource</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:mem:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
</code></pre></div></div>

<p>Spring Boot就会自动创建出<code class="language-plaintext highlighter-rouge">DataSource</code>、<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>、<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>，非常方便。</p>

<p>但是有时候又必须要禁用某些自动配置。例如，系统有主从两个数据库，而Spring Boot的自动配置只能配一个。</p>

<p>这个时候，针对<code class="language-plaintext highlighter-rouge">DataSource</code>相关的自动配置，就必须关掉。需要用<code class="language-plaintext highlighter-rouge">exclude</code>指定需要关掉的自动配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="c1">// 启动自动配置，但排除指定的自动配置:</span>
<span class="nd">@EnableAutoConfiguration</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>或者：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在，Spring Boot不再自动创建<code class="language-plaintext highlighter-rouge">DataSource</code>、<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>和<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>了。</p>

<hr />

<p>要实现主从数据库支持，首先需要把主从数据库配置写到<code class="language-plaintext highlighter-rouge">application.yml</code>中，仍然按照Spring Boot默认的格式写，但<code class="language-plaintext highlighter-rouge">datasource</code>改为<code class="language-plaintext highlighter-rouge">datasource-master</code>和<code class="language-plaintext highlighter-rouge">datasource-slave</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource-master</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
  <span class="na">datasource-slave</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
</code></pre></div></div>

<p>两个数据库实际上是同一个库。如果使用MySQL，可以创建一个只读用户，作为<code class="language-plaintext highlighter-rouge">datasource-slave</code>的用户来模拟一个从库。</p>

<p>分别创建两个HikariCP的<code class="language-plaintext highlighter-rouge">DataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MasterDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-master"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SlaveDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-slave"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意到上述class并未添加<code class="language-plaintext highlighter-rouge">@Configuration</code>和<code class="language-plaintext highlighter-rouge">@Component</code>，要使之生效，可以使用<code class="language-plaintext highlighter-rouge">@Import</code>导入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">MasterDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">SlaveDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述两个<code class="language-plaintext highlighter-rouge">DataSource</code>的Bean名称分别为<code class="language-plaintext highlighter-rouge">masterDataSource</code>和<code class="language-plaintext highlighter-rouge">slaveDataSource</code>，我们还需要一个最终的<code class="language-plaintext highlighter-rouge">@Primary</code>标注的<code class="language-plaintext highlighter-rouge">DataSource</code>，它采用Spring提供的<code class="language-plaintext highlighter-rouge">AbstractRoutingDataSource</code>，代码实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceContext</span> <span class="kd">implements</span> <span class="nc">AutoCloseable</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setDataSourceRoutingKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getDataSourceRoutingKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">RoutingDataSource</code>本身并不是真正的<code class="language-plaintext highlighter-rouge">DataSource</code>，它通过Map关联一组<code class="language-plaintext highlighter-rouge">DataSource</code>，下面的代码创建了包含两个<code class="language-plaintext highlighter-rouge">DataSource</code>的<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>，关联的key分别为<code class="language-plaintext highlighter-rouge">masterDataSource</code>和<code class="language-plaintext highlighter-rouge">slaveDataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">masterDataSource</span><span class="o">,</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">slaveDataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RoutingDataSource</span><span class="o">();</span>
        <span class="c1">// 关联两个DataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setTargetDataSources</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="s">"masterDataSource"</span><span class="o">,</span> <span class="n">masterDataSource</span><span class="o">,</span>
                <span class="s">"slaveDataSource"</span><span class="o">,</span> <span class="n">slaveDataSource</span><span class="o">));</span>
        <span class="c1">// 默认使用masterDataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setDefaultTargetDataSource</span><span class="o">(</span><span class="n">masterDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSourceTransactionManager</span> <span class="nf">dataSourceTransactionManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>仍然需要自己创建<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>和<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>，注入的是标记为<code class="language-plaintext highlighter-rouge">@Primary</code>的<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>。</p>

<p>这样，通过如下的代码就可以切换<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>底层使用的真正的<code class="language-plaintext highlighter-rouge">DataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
<span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(...);</span>
</code></pre></div></div>

<p>只不过写代码切换DataSource即麻烦又容易出错，更好的方式是通过注解配合AOP实现自动切换，这样，客户端代码实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
	<span class="nd">@RoutingWithSlave</span> <span class="c1">// &lt;-- 指示在此方法中使用slave数据库</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>自定义的注解 <code class="language-plaintext highlighter-rouge">@RoutingWithSlave</code> 的作用只是调用 <code class="language-plaintext highlighter-rouge">RoutingDataSourceContext</code> 的构造方法向 <code class="language-plaintext highlighter-rouge">ThreadLocal</code> 储存了字符串 <code class="language-plaintext highlighter-rouge">slaveDataSource</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="nd">@interface</span> <span class="nc">RoutingWithSlave</span><span class="o">{</span>
<span class="o">}</span>
<span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingAspect</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(routingWithSlave)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">RoutingWithSlave</span> <span class="n">routingWithSlave</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意这里使用了形参名称，注意编译时添加<code class="language-plaintext highlighter-rouge">-parameters</code>参数，保留形参名称，参见<a href="/2021/09/14/JavaWeb/#MVC">设计MVC框架</a>。<code class="language-plaintext highlighter-rouge">-parameters</code>的作用是在编译后的类文件中<strong>保留方法参数的名称</strong>。默认情况下，Java编译器在编译过程中会丢弃方法参数的名称，而只保留参数的顺序。</p>

<p>或者使用完全限定名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(com.aotmd.RoutingWithSlave)"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span>
        <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
    <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果想要确认是否真的切换了<code class="language-plaintext highlighter-rouge">DataSource</code>，可以覆写<code class="language-plaintext highlighter-rouge">determineTargetDataSource()</code>方法并打印出<code class="language-plaintext highlighter-rouge">DataSource</code>的名称：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">DataSource</span> <span class="nf">determineTargetDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">determineTargetDataSource</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"determin target datasource: {}"</span><span class="o">,</span> <span class="n">ds</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以用一个图表示创建的DataSource以及相关Bean的关系：</p>

<pre><code class="language-ascii">┌────────────────────┐       ┌──────────────────┐
│@Primary            │&lt;──────│   JdbcTemplate   │
│RoutingDataSource   │       └──────────────────┘
│ ┌────────────────┐ │       ┌──────────────────┐
│ │MasterDataSource│ │&lt;──────│DataSource        │
│ └────────────────┘ │       │TransactionManager│
│ ┌────────────────┐ │       └──────────────────┘
│ │SlaveDataSource │ │
│ └────────────────┘ │
└────────────────────┘
</code></pre>

<p><code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>引用的都是<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>，所以，这种设计的一个限制就是：在一个请求中，一旦切换了内部数据源，在同一个事务中，不能再切到另一个，否则，<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>操作的就不是同一个数据库连接。</p>

<p>完整代码：</p>

<p><code class="language-plaintext highlighter-rouge">RoutingDataSource.java</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Around</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Aspect</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.jdbc.DataSourceProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.context.properties.ConfigurationProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Primary</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Retention</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Target</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">MasterDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-master"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SlaveDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-slave"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">DataSource</span> <span class="nf">determineTargetDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">determineTargetDataSource</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"determin target datasource: {}"</span><span class="o">,</span> <span class="n">ds</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceContext</span> <span class="kd">implements</span> <span class="nc">AutoCloseable</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setDataSourceRoutingKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getDataSourceRoutingKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">masterDataSource</span><span class="o">,</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">slaveDataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RoutingDataSource</span><span class="o">();</span>
        <span class="c1">// 关联两个DataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setTargetDataSources</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="s">"masterDataSource"</span><span class="o">,</span> <span class="n">masterDataSource</span><span class="o">,</span>
                <span class="s">"slaveDataSource"</span><span class="o">,</span> <span class="n">slaveDataSource</span><span class="o">));</span>
        <span class="c1">// 默认使用masterDataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setDefaultTargetDataSource</span><span class="o">(</span><span class="n">masterDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSourceTransactionManager</span> <span class="nf">dataSourceTransactionManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="nd">@interface</span> <span class="nc">RoutingWithSlave</span><span class="o">{</span>

<span class="o">}</span>
<span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">RoutingAspect</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(routingWithSlave)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">RoutingWithSlave</span> <span class="n">routingWithSlave</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Application.java</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd"</span><span class="o">)</span>
<span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">MasterDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">SlaveDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 映射路径`/static/`到classpath路径:</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"classpath:/static/"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>访问数据库可以用之前的。</p>

<h2 id="filter">Filter</h2>

<p>在Spring Boot中，添加一个<code class="language-plaintext highlighter-rouge">Filter</code>更简单了，可以做到零配置。</p>

<p>Spring Boot会自动扫描所有的<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>类型的Bean，然后，将它们返回的<code class="language-plaintext highlighter-rouge">Filter</code>自动注册到Servlet容器中，无需任何配置。</p>

<p>以<code class="language-plaintext highlighter-rouge">AuthFilter</code>为例，首先编写一个<code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>，它继承自<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthFilterRegistrationBean</span> <span class="kd">extends</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Filter</span> <span class="nf">getFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setOrder</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthFilter</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">class</span> <span class="nc">AuthFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>本身不是<code class="language-plaintext highlighter-rouge">Filter</code>，它实际上是<code class="language-plaintext highlighter-rouge">Filter</code>的工厂。Spring Boot会调用<code class="language-plaintext highlighter-rouge">getFilter()</code>，把返回的<code class="language-plaintext highlighter-rouge">Filter</code>注册到Servlet容器中。因为可以在<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>中注入需要的资源，然后，在返回的<code class="language-plaintext highlighter-rouge">AuthFilter</code>中，这个内部类可以引用外部类的所有字段，自然也包括注入的<code class="language-plaintext highlighter-rouge">UserService</code>，所以，整个过程完全基于Spring的IoC容器完成。</p>

<p><code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>使用了<code class="language-plaintext highlighter-rouge">setOrder(10)</code>，因为Spring Boot支持给多个<code class="language-plaintext highlighter-rouge">Filter</code>排序，<strong>数字小的在前面</strong>，所以，多个<code class="language-plaintext highlighter-rouge">Filter</code>的顺序是可以固定的。</p>

<p>再编写一个<code class="language-plaintext highlighter-rouge">ApiFilter</code>，专门过滤<code class="language-plaintext highlighter-rouge">/api/*</code>这样的URL。首先编写一个<code class="language-plaintext highlighter-rouge">ApiFilterRegistrationBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiFilterRegistrationBean</span> <span class="kd">extends</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setOrder</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">setFilter</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApiFilter</span><span class="o">());</span>
        <span class="n">setUrlPatterns</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">class</span> <span class="nc">ApiFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">ApiFilterRegistrationBean</code>和<code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>又有所不同。因为要过滤URL，而不是针对所有URL生效，因此，在<code class="language-plaintext highlighter-rouge">@PostConstruct</code>方法中，通过<code class="language-plaintext highlighter-rouge">setFilter()</code>设置一个<code class="language-plaintext highlighter-rouge">Filter</code>实例后，再调用<code class="language-plaintext highlighter-rouge">setUrlPatterns()</code>传入要过滤的URL列表。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 是 Spring Framework 中的一个类，用于注册和配置 Servlet 过滤器。它提供了一些常用的方法来控制过滤器的注册和行为。以下是 <code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 的一些常用方法及其简要说明：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">setFilter(Filter filter)</code></strong>：设置过滤器实例。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="n">registrationBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;&gt;();</span>
<span class="n">registrationBean</span><span class="o">.</span><span class="na">setFilter</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyFilter</span><span class="o">());</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setUrlPatterns(Collection&lt;String&gt; urlPatterns)</code></strong>：设置过滤器的 URL 模式。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setUrlPatterns</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">addUrlPatterns(String... urlPatterns)</code></strong>：添加过滤器的 URL 模式。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">addUrlPatterns</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setServletNames(Collection&lt;String&gt; servletNames)</code></strong>：设置过滤器要应用的 Servlet 名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setServletNames</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"myServlet"</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">addServletNames(String... servletNames)</code></strong>：添加过滤器要应用的 Servlet 名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">addServletNames</span><span class="o">(</span><span class="s">"myServlet"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setOrder(int order)</code></strong>：设置过滤器的执行顺序，值越小优先级越高。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setDispatcherTypes(EnumSet&lt;DispatcherType&gt; dispatcherTypes)</code></strong>：设置过滤器的分发类型（如 <code class="language-plaintext highlighter-rouge">REQUEST</code>、<code class="language-plaintext highlighter-rouge">FORWARD</code>、<code class="language-plaintext highlighter-rouge">INCLUDE</code> 等）。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setDispatcherTypes</span><span class="o">(</span><span class="nc">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">,</span> <span class="nc">DispatcherType</span><span class="o">.</span><span class="na">FORWARD</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setAsyncSupported(boolean isAsyncSupported)</code></strong>：设置过滤器是否支持异步操作。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setAsyncSupported</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setName(String name)</code></strong>：设置过滤器的名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"myFilter"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setInitParameters(Map&lt;String, String&gt; initParameters)</code></strong>：设置过滤器的初始化参数。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">initParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">initParams</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"param1"</span><span class="o">,</span> <span class="s">"value1"</span><span class="o">);</span>
<span class="n">registrationBean</span><span class="o">.</span><span class="na">setInitParameters</span><span class="o">(</span><span class="n">initParams</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>以下是一个完整的示例，展示如何使用 <code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 来注册和配置一个过滤器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.web.servlet.FilterRegistrationBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.Filter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.FilterChain</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.FilterConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.EnumSet</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="nf">myFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="n">registrationBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;&gt;();</span>
        
        <span class="nc">Filter</span> <span class="n">myFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Filter</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">FilterConfig</span> <span class="n">filterConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>
                <span class="c1">// 初始化代码</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
                    <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
                <span class="c1">// 过滤器逻辑</span>
                <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
                <span class="c1">// 销毁代码</span>
            <span class="o">}</span>
        <span class="o">};</span>
        
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setFilter</span><span class="o">(</span><span class="n">myFilter</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setUrlPatterns</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setDispatcherTypes</span><span class="o">(</span><span class="nc">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">));</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setAsyncSupported</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"myFilter"</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setInitParameters</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"param1"</span><span class="o">,</span> <span class="s">"value1"</span><span class="o">));</span>
        
        <span class="k">return</span> <span class="n">registrationBean</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个示例中，<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 被用来注册一个简单的过滤器，并设置了一些常见的配置选项。</p>

<h2 id="在项目启动后运行一段代码">在项目启动后运行一段代码</h2>

<p>在Spring Boot项目启动后运行一段代码，你可以使用<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口。两者的用法类似，都可以在应用程序启动完成后执行特定代码。</p>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">CommandLineRunner</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">CommandLineRunner</code>接口提供了一个<code class="language-plaintext highlighter-rouge">run</code>方法，在Spring Boot启动后立即执行。你可以创建一个实现此接口的类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 在应用程序启动后运行的代码</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Spring Boot 应用程序已启动，执行自定义代码..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">ApplicationRunner</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口与<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>类似，但它接受一个<code class="language-plaintext highlighter-rouge">ApplicationArguments</code>对象，可以更方便地访问应用程序参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.ApplicationArguments</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.ApplicationRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplicationRunner</span> <span class="kd">implements</span> <span class="nc">ApplicationRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 在应用程序启动后运行的代码</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Spring Boot 应用程序已启动，执行自定义代码..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果有多个<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>实现，并且希望它们按特定顺序执行，你可以实现<code class="language-plaintext highlighter-rouge">Ordered</code>接口或使用<code class="language-plaintext highlighter-rouge">@Order</code>注解。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.core.annotation.Order</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner1</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"第一个运行的 CommandLineRunner"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner2</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"第二个运行的 CommandLineRunner"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，<code class="language-plaintext highlighter-rouge">MyCommandLineRunner1</code>将会在<code class="language-plaintext highlighter-rouge">MyCommandLineRunner2</code>之前执行。</p>

<p>在Spring Boot应用启动后运行代码的两种常用方法是实现<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口。选择其中之一，并将所需逻辑放入<code class="language-plaintext highlighter-rouge">run</code>方法中。通过实现<code class="language-plaintext highlighter-rouge">Ordered</code>接口或使用<code class="language-plaintext highlighter-rouge">@Order</code>注解，你可以控制多个运行器的执行顺序。</p>

<h2 id="集成open-api">集成Open API</h2>

<p><a href="https://www.openapis.org/">Open API</a>是一个标准，它的主要作用是<strong>描述REST API</strong>，既可以作为文档给开发者阅读，又可以让机器根据这个文档自动生成客户端代码等。</p>

<p>在Spring Boot应用中，假设编写了一堆REST API，只需要在<code class="language-plaintext highlighter-rouge">pom.xml</code>中加入以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springdoc<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>直接启动应用，打开浏览器输入<code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui.html</code></p>

<p>立刻可以看到自动生成的API文档，点击某个API还可以交互，即输入API参数，点“Try it out”按钮，获得运行结果。</p>

<p>因为引入<code class="language-plaintext highlighter-rouge">springdoc-openapi-ui</code>这个依赖后，它自动引入Swagger UI用来创建API文档。可以给API加入一些描述信息，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Operation</span><span class="o">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s">"Get specific user object by it's id."</span><span class="o">)</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@Parameter</span><span class="o">(</span><span class="n">description</span> <span class="o">=</span> <span class="s">"id of the user."</span><span class="o">)</span> <span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUserById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
	<span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@Operation</code>可以对API进行描述，<code class="language-plaintext highlighter-rouge">@Parameter</code>可以对参数进行描述，它们的目的是用于生成API文档的描述信息。</p>

<p>大多数情况下，不需要任何配置，就直接得到了一个运行时动态生成的可交互的API文档，该API文档总是和代码保持同步，大大简化了文档的编写工作。</p>

<p>要自定义文档的样式、控制某些API显示等，请参考<a href="https://springdoc.org/">springdoc文档</a>。</p>

<p><strong>配置反向代理</strong></p>

<p>如果在服务器上，用户访问的域名是<code class="language-plaintext highlighter-rouge">https://example.com</code>，但内部是通过类似Nginx这样的反向代理访问实际的Spring Boot应用，比如<code class="language-plaintext highlighter-rouge">http://localhost:8080</code>，这个时候，在页面<code class="language-plaintext highlighter-rouge">https://example.com/swagger-ui.html</code>上，显示的URL仍然是<code class="language-plaintext highlighter-rouge">http://localhost:8080</code>，这样一来，就无法直接在页面执行API，非常不方便。</p>

<p>这是因为Spring Boot内置的Tomcat默认获取的服务器名称是<code class="language-plaintext highlighter-rouge">localhost</code>，端口是实际监听端口，而不是对外暴露的域名和<code class="language-plaintext highlighter-rouge">80</code>或<code class="language-plaintext highlighter-rouge">443</code>端口。要让Tomcat获取到对外暴露的域名等信息，必须在Nginx配置中传入必要的HTTP Header，常用的配置如下：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Nginx配置</span>
<span class="n">server</span> <span class="p">{</span>
    <span class="o">...</span>
    <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
        <span class="n">proxy_pass</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8080</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$host</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">Proto</span> <span class="vg">$scheme</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后，在Spring Boot的<code class="language-plaintext highlighter-rouge">application.yml</code>中，加入如下配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="c1"># 实际监听端口:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
  <span class="c1"># 从反向代理读取相关的HTTP Header:</span>
  <span class="na">forward-headers-strategy</span><span class="pi">:</span> <span class="s">native</span>
</code></pre></div></div>

<p>重启Spring Boot应用，即可在Swagger中显示正确的URL。</p>

<p><strong>使用knife4j</strong></p>

<p>在日常开发中，写接口文档是我们必不可少的，而Knife4j就是一个接口文档工具，可以看作是Swagger的升级版，但是界面比Swagger更好看，功能更丰富</p>

<p>早期，swagger-boostrap-ui是1.x版本，如今swagger-bootsrap-ui到2.x，同时也更改名字Knife4j，适用于单体和微服务项目。</p>

<p><a href="https://doc.xiaominfo.com/">Knife4j官方网站</a>。</p>

<p>导入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.github.xiaoymin<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>knife4j-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>创建配置类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.swagger.annotations.ApiOperation</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.ApiInfoBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.PathSelectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.RequestHandlerSelectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.service.ApiInfo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.service.ApiKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.spi.DocumentationType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.spring.web.plugins.Docket</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.swagger2.annotations.EnableSwagger2</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">collect</span><span class="o">.</span><span class="na">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">;</span>



<span class="cm">/**
 * Swagger2配置信息
 * 这里分了两组显示
 * 第一组是api，当作用户端接口
 * 第二组是admin，当作后台管理接口
 * 也可以根据实际情况来减少或者增加组
 */</span>

<span class="nd">@Configuration</span>
<span class="nd">@EnableSwagger2</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Swagger2Config</span><span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">Docket</span> <span class="nf">createRestApi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Docket</span><span class="o">(</span><span class="nc">DocumentationType</span><span class="o">.</span><span class="na">SWAGGER_2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">apiInfo</span><span class="o">(</span><span class="n">apiInfo</span><span class="o">())</span>
                <span class="o">.</span><span class="na">select</span><span class="o">()</span>
                <span class="c1">//加了ApiOperation注解的类，生成接口文档</span>
                <span class="o">.</span><span class="na">apis</span><span class="o">(</span><span class="nc">RequestHandlerSelectors</span><span class="o">.</span><span class="na">withMethodAnnotation</span><span class="o">(</span><span class="nc">ApiOperation</span><span class="o">.</span><span class="na">class</span><span class="o">))</span>
                <span class="c1">//包下的类，生成接口文档</span>
                <span class="c1">//.apis(RequestHandlerSelectors.basePackage("com.aotmd"))</span>
                <span class="o">.</span><span class="na">paths</span><span class="o">(</span><span class="nc">PathSelectors</span><span class="o">.</span><span class="na">any</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                <span class="o">.</span><span class="na">directModelSubstitute</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">securitySchemes</span><span class="o">(</span><span class="n">security</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">ApiInfo</span> <span class="nf">apiInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiInfoBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">"`文档`"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">"文档"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">termsOfServiceUrl</span><span class="o">(</span><span class="s">"*"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">version</span><span class="o">(</span><span class="s">"2.0.0"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ApiKey</span><span class="o">&gt;</span> <span class="nf">security</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">newArrayList</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">ApiKey</span><span class="o">(</span><span class="s">"token"</span><span class="o">,</span> <span class="s">"token"</span><span class="o">,</span> <span class="s">"header"</span><span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实体类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ApiModel</span><span class="o">(</span><span class="s">"用户实体类"</span><span class="o">)</span>
<span class="nd">@Data</span>
<span class="nd">@Builder</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwaggerUser</span> <span class="o">{</span>
    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">"用户Id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">"用户名称"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Api</span><span class="o">(</span><span class="n">tags</span> <span class="o">=</span> <span class="s">"用户端控制器"</span><span class="o">)</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>

    <span class="nd">@ApiOperation</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"获取数据"</span><span class="o">)</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SwaggerUser</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@ApiParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户Id"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">,</span>
                                  <span class="nd">@ApiParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"name"</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户名称"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SwaggerUser</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">SwaggerUser</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">id</span><span class="o">(</span><span class="n">id</span><span class="o">).</span><span class="na">name</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行后访问<code class="language-plaintext highlighter-rouge">http://127.0.0.1:8080/doc.html</code>即可。</p>

<h2 id="集成redis">集成Redis</h2>

<p>在Spring Boot中，要访问Redis，可以直接引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-data-redis</code>依赖，它实际上是Spring Data的一个子项目——Spring Data Redis，主要用到了这几个组件：</p>

<ul>
  <li>Lettuce：一个基于Netty的高性能Redis客户端；</li>
  <li>RedisTemplate：一个类似于JdbcTemplate的接口，用于简化Redis的操作。</li>
</ul>

<p>因为Spring Data Redis引入的依赖项很多，如果只是为了使用Redis，完全可以只引入Lettuce，剩下的操作都自己来完成。</p>

<p>如何把一个第三方组件引入到Spring Boot中：</p>

<p>首先，添加必要的几个依赖项：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.lettuce<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>lettuce-core<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>commons-pool2<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">spring-boot-starter-parent</code>中已经把常用组件的版本号确定下来了，因此不需要显式设置版本号。</p>

<p>第一步是在配置文件<code class="language-plaintext highlighter-rouge">application.yml</code>中添加Redis的相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">${REDIS_HOST:localhost}</span>
    <span class="na">port</span><span class="pi">:</span> <span class="s">${REDIS_PORT:6379}</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${REDIS_PASSWORD:}</span>
    <span class="na">ssl</span><span class="pi">:</span> <span class="s">${REDIS_SSL:false}</span>
    <span class="na">database</span><span class="pi">:</span> <span class="s">${REDIS_DATABASE:0}</span>
</code></pre></div></div>

<p>然后，通过<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>来加载它：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">host</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">database</span><span class="o">;</span>

    <span class="c1">// getters and setters...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再编写一个<code class="language-plaintext highlighter-rouge">@Bean</code>方法来创建<code class="language-plaintext highlighter-rouge">RedisClient</code>，可以直接放在<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Bean</span>
    <span class="nc">RedisClient</span> <span class="nf">redisClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">""</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">trim</span><span class="o">()))</span> <span class="o">{</span>
     		<span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="o">}</span>
        <span class="nc">RedisURI</span> <span class="n">uri</span> <span class="o">=</span> <span class="nc">RedisURI</span><span class="o">.</span><span class="na">Builder</span><span class="o">.</span><span class="na">redis</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">host</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">port</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withPassword</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withDatabase</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">database</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="k">return</span> <span class="nc">RedisClient</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在启动入口引入该配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@Import</span><span class="o">(</span><span class="nc">RedisConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 加载Redis配置</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果在<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>中标注<code class="language-plaintext highlighter-rouge">@Configuration</code>，则可通过Spring Boot的自动扫描机制自动加载，否则需要使用<code class="language-plaintext highlighter-rouge">@Import</code>手动加载。</p>

<p>用一个<code class="language-plaintext highlighter-rouge">RedisService</code>来封装所有的Redis操作。基础代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">RedisClient</span> <span class="n">redisClient</span><span class="o">;</span>

    <span class="nc">GenericObjectPool</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">redisConnectionPool</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">poolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;&gt;();</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxTotal</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxIdle</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestOnReturn</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestWhileIdle</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span> <span class="o">=</span> <span class="nc">ConnectionPoolSupport</span><span class="o">.</span><span class="na">createGenericObjectPool</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">redisClient</span><span class="o">.</span><span class="na">connect</span><span class="o">(),</span> <span class="n">poolConfig</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PreDestroy</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisClient</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码引入了Commons Pool的一个对象池，用于缓存Redis连接。因为Lettuce本身是基于Netty的异步驱动，在异步访问时并不需要创建连接池，但基于Servlet模型的同步访问时，连接池是有必要的。连接池在<code class="language-plaintext highlighter-rouge">@PostConstruct</code>方法中初始化，在<code class="language-plaintext highlighter-rouge">@PreDestroy</code>方法中关闭。</p>

<p>下一步，是在<code class="language-plaintext highlighter-rouge">RedisService</code>中添加Redis访问方法。为了简化代码，仿照<code class="language-plaintext highlighter-rouge">JdbcTemplate.execute(ConnectionCallback)</code>方法，传入回调函数，可大幅减少样板代码。</p>

<p>首先定义回调函数接口<code class="language-plaintext highlighter-rouge">SyncCommandCallback</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// 在此操作Redis:</span>
    <span class="no">T</span> <span class="nf">doInConnection</span><span class="o">(</span><span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写<code class="language-plaintext highlighter-rouge">executeSync</code>方法，在该方法中，获取Redis连接，利用callback操作Redis，最后释放连接，并返回操作结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">executeSync</span><span class="o">(</span><span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">redisConnectionPool</span><span class="o">.</span><span class="na">borrowObject</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setAutoFlushCommands</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">callback</span><span class="o">.</span><span class="na">doInConnection</span><span class="o">(</span><span class="n">commands</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"executeSync redis failed."</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以针对常用操作把它封装一下，例如<code class="language-plaintext highlighter-rouge">set</code>和<code class="language-plaintext highlighter-rouge">get</code>命令：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>类似的，<code class="language-plaintext highlighter-rouge">hget</code>和<code class="language-plaintext highlighter-rouge">hset</code>操作如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hset</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">hget</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="nf">hgetall</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hgetall</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>常用命令可以提供方法接口，如果要执行任意复杂的操作，就可以通过<code class="language-plaintext highlighter-rouge">executeSync(SyncCommandCallback&lt;T&gt;)</code>来完成。</p>

<p>完成了<code class="language-plaintext highlighter-rouge">RedisService</code>后，就可以使用Redis了。例如，在<code class="language-plaintext highlighter-rouge">UserController</code>中，在Session中只存放登录用户的ID，用户信息存放到Redis，提供两个方法用于读写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">KEY_USER_ID</span> <span class="o">=</span> <span class="s">"__userid__"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">KEY_USERS</span> <span class="o">=</span> <span class="s">"__users__"</span><span class="o">;</span>

    <span class="nd">@Autowired</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>
    <span class="nd">@Autowired</span> <span class="nc">RedisService</span> <span class="n">redisService</span><span class="o">;</span>

    <span class="c1">// 把User写入Redis:</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">putUserIntoRedis</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">redisService</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="no">KEY_USERS</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">user</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="c1">// 从Redis读取User:</span>
    <span class="kd">private</span> <span class="nc">User</span> <span class="nf">getUserFromRedis</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="no">KEY_USER_ID</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">redisService</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="no">KEY_USERS</span><span class="o">,</span> <span class="n">id</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用户登录成功后，把ID放入Session，把<code class="language-plaintext highlighter-rouge">User</code>实例放入Redis：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">doSignin</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"email"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"password"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">signin</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="no">KEY_USER_ID</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">putUserIntoRedis</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"signin.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="n">email</span><span class="o">,</span> <span class="s">"error"</span><span class="o">,</span> <span class="s">"Signin failed"</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"redirect:/profile"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>需要获取<code class="language-plaintext highlighter-rouge">User</code>时，从Redis取出：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">getUserFromRedis</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"redirect:/signin"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"profile.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>从Redis读写Java对象时，序列化和反序列化是应用程序的工作，上述代码使用JSON作为序列化方案，简单可靠。也可将相关序列化操作封装到<code class="language-plaintext highlighter-rouge">RedisService</code>中，这样可以提供更加通用的方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>redis在各大操作系统中的安装使用都非常简单，默认配置就是监听<code class="language-plaintext highlighter-rouge">127.0.0.1:6379</code>，且无帐号密码。</p>

<p><a href="https://redis.io/docs/latest/operate/oss_and_stack/install/install-redis/install-redis-on-windows/">在windows通过虚拟机安装redis</a>，或通过doker镜像运行：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull redis
docker run <span class="nt">--name</span> my-redis <span class="nt">-p</span> 6379:6379 <span class="nt">-d</span> redis
</code></pre></div></div>

<p>也可以使用<a href="https://github.com/microsoftarchive/redis">古早版本</a>，输入：<code class="language-plaintext highlighter-rouge">redis-server redis.windows.conf</code> 即可启动redis。</p>

<p>如果要部署Redis为windows下的服务，可以输入：<code class="language-plaintext highlighter-rouge">redis-server --service-install redis.windows.conf</code>。</p>

<p>其他常用命令：</p>

<ul>
  <li>卸载服务：<code class="language-plaintext highlighter-rouge">redis-server --service-uninstall</code></li>
  <li>开启服务：<code class="language-plaintext highlighter-rouge">redis-server --service-start</code></li>
  <li>停止服务：<code class="language-plaintext highlighter-rouge">redis-server --service-stop</code></li>
</ul>

<p>测试：</p>

<p>可以通过set、get指令查看是否成功启动：</p>

<pre><code class="language-cmd">C:\Redis&gt;redis-cli
127.0.0.1:6379&gt;set A 123
127.0.0.1:6379&gt;get A
</code></pre>

<h2 id="集成artemis">集成Artemis</h2>

<p>ActiveMQ Artemis是一个JMS服务器，在<a href="/2024/06/05/Spring/#集成jms">集成JMS</a>一节中介绍如何在Spring中集成Artemis，现在介绍在Spring Boot中集成Artemis。</p>

<p>创建一个<code class="language-plaintext highlighter-rouge">springboot-jms</code>工程，引入的依赖除了<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>，<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>等以外，新增<code class="language-plaintext highlighter-rouge">spring-boot-starter-artemis</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-artemis<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>同样无需指定版本号。</p>

<p>如何创建Artemis服务器已经在集成JMS一节中详细讲述了，此处不再重复。创建Artemis服务器后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中加入相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">artemis</span><span class="pi">:</span>
    <span class="c1"># 指定连接外部Artemis服务器，而不是启动嵌入式服务:</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">native</span>
    <span class="c1"># 服务器地址和端口号:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">127.0.0.1</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">61616</span>
    <span class="c1"># 连接用户名和口令由创建Artemis服务器时指定:</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">password</span>
</code></pre></div></div>

<p>和Spring版本的JMS代码相比，使用Spring Boot集成JMS时，只要引入了<code class="language-plaintext highlighter-rouge">spring-boot-starter-artemis</code>，Spring Boot会自动创建JMS相关的<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>、<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>、<code class="language-plaintext highlighter-rouge">JmsTemplate</code>等，无需再手动配置了。</p>

<p>发送消息时只需要引入<code class="language-plaintext highlighter-rouge">JmsTemplate</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMailMessage</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"..."</span><span class="o">;</span>
        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">MessageCreator</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">createMessage</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JMSException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>接收消息时只需要标注<code class="language-plaintext highlighter-rouge">@JmsListener</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailMessageListener</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@JmsListener</span><span class="o">(</span><span class="n">destination</span> <span class="o">=</span> <span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="n">concurrency</span> <span class="o">=</span> <span class="s">"10"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMailMessageReceived</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received message: "</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>应用程序收发消息的逻辑和Spring中使用JMS完全相同，只是通过Spring Boot，可以把工程简化到只需要设定Artemis相关配置。</p>

<h2 id="集成rabbitmq">集成RabbitMQ</h2>

<p>JMS是JavaEE的消息服务标准接口，但是，如果Java程序要和另一种语言编写的程序通过消息服务器进行通信，那么JMS就不太适合了。</p>

<p>AMQP是一种使用广泛的独立于语言的消息协议，它的全称是Advanced Message Queuing Protocol，即高级消息队列协议，它定义了一种二进制格式的消息流，任何编程语言都可以实现该协议。实际上，Artemis也支持AMQP，但实际应用最广泛的AMQP服务器是使用<a href="https://www.erlang.org/">Erlang</a>编写的<a href="https://www.rabbitmq.com/">RabbitMQ</a>。</p>

<p><strong>安装RabbitMQ</strong></p>

<p>先从RabbitMQ的官网<a href="https://www.rabbitmq.com/download.html">下载</a>并安装RabbitMQ，安装和启动RabbitMQ请参考官方文档。要验证启动是否成功，可以访问RabbitMQ的管理后台<a href="http://localhost:15672/">http://localhost:15672</a>，RabbitMQ后台管理的默认用户名和口令均为<code class="language-plaintext highlighter-rouge">guest</code>。</p>

<p><strong>AMQP协议</strong></p>

<p>AMQP协议和JMS协议有所不同。在JMS中，有两种类型的消息通道：</p>

<ol>
  <li>点对点的Queue，即Producer发送消息到指定的Queue，接收方从Queue收取消息；</li>
  <li>一对多的Topic，即Producer发送消息到指定的Topic，任意多个在线的接收方均可从Topic获得一份完整的消息副本。</li>
</ol>

<p>而AMQP协议比JMS要复杂一点，它只有Queue，没有Topic，并且引入了Exchange的概念。当Producer想要发送消息的时候，它将消息发送给Exchange，由Exchange将消息根据各种规则投递到一个或多个Queue：</p>

<pre><code class="language-ascii">                                    ┌───────┐
                                ┌──▶│Queue-1│
                  ┌──────────┐  │   └───────┘
              ┌──▶│Exchange-1│──┤
┌──────────┐  │   └──────────┘  │   ┌───────┐
│Producer-1│──┤                 ├──▶│Queue-2│
└──────────┘  │   ┌──────────┐  │   └───────┘
              └──▶│Exchange-2│──┤
                  └──────────┘  │   ┌───────┐
                                └──▶│Queue-3│
                                    └───────┘
</code></pre>

<p>如果某个Exchange总是把消息发送到固定的Queue，那么这个消息通道就相当于JMS的Queue。如果某个Exchange把消息发送到多个Queue，那么这个消息通道就相当于JMS的Topic。和JMS的Topic相比，Exchange的投递规则更灵活，比如一个“登录成功”的消息被投递到Queue-1和Queue-2，而“登录失败”的消息则被投递到Queue-3。这些路由规则称之为Binding，通常都在RabbitMQ的管理后台设置。</p>

<p>在RabbitMQ中，首先创建3个Queue，分别用于发送邮件、短信和App通知：q_app、q_mail、q_sms。</p>

<p>创建Queue时注意到可配置为持久化（Durable）和非持久化（Transient），当Consumer不在线时，持久化的Queue会暂存消息，非持久化的Queue会丢弃消息。</p>

<p>然后在Exchanges中创建一个Direct类型的Exchange，命名为<code class="language-plaintext highlighter-rouge">registration</code>，并添加q_mail、q_sms到Binding。</p>

<p>Binding的规则就是：凡是发送到<code class="language-plaintext highlighter-rouge">registration</code>这个Exchange的消息，均被发送到<code class="language-plaintext highlighter-rouge">q_mail</code>和<code class="language-plaintext highlighter-rouge">q_sms</code>这两个Queue。</p>

<p>再创建一个Direct类型的Exchange，命名为<code class="language-plaintext highlighter-rouge">login</code>，并添加q_app、q_mail、q_sms到Binding，且指定q_sms，Routing Key=”login_failed”。</p>

<p>当发送消息给<code class="language-plaintext highlighter-rouge">login</code>这个Exchange时，如果消息没有指定Routing Key，则被投递到<code class="language-plaintext highlighter-rouge">q_app</code>和<code class="language-plaintext highlighter-rouge">q_mail</code>，如果消息指定了Routing Key=”login_failed”，那么消息被投递到<code class="language-plaintext highlighter-rouge">q_sms</code>。</p>

<p>配置好RabbitMQ后，就可以基于Spring Boot开发AMQP程序。</p>

<p><strong>使用RabbitMQ</strong></p>

<p>首先创建Spring Boot工程<code class="language-plaintext highlighter-rouge">springboot-rabbitmq</code>，并添加如下依赖引入RabbitMQ：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加RabbitMQ相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">rabbitmq</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">5672</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">guest</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">guest</span>
</code></pre></div></div>

<p>并在<code class="language-plaintext highlighter-rouge">Application</code>中添加一个<code class="language-plaintext highlighter-rouge">MessageConverter</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.amqp.support.converter.MessageConverter</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Bean</span>
    <span class="nc">MessageConverter</span> <span class="nf">createMessageConverter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Jackson2JsonMessageConverter</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MessageConverter</code>用于将Java对象转换为RabbitMQ的消息。默认情况下，Spring Boot使用<code class="language-plaintext highlighter-rouge">SimpleMessageConverter</code>，只能发送<code class="language-plaintext highlighter-rouge">String</code>和<code class="language-plaintext highlighter-rouge">byte[]</code>类型的消息，不太方便。使用<code class="language-plaintext highlighter-rouge">Jackson2JsonMessageConverter</code>，就可以发送JavaBean对象，由Spring Boot自动序列化为JSON并以文本消息传递。</p>

<p>因为引入了starter，所有RabbitMQ相关的Bean均自动装配。</p>

<p>可以直接注入<code class="language-plaintext highlighter-rouge">RabbitTemplate</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRegistrationMessage</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="s">"registration"</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendLoginMessage</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">routingKey</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">success</span> <span class="o">?</span> <span class="s">""</span> <span class="o">:</span> <span class="s">"login_failed"</span><span class="o">;</span>
        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="n">routingKey</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>发送消息时，使用<code class="language-plaintext highlighter-rouge">convertAndSend(exchange, routingKey, message)</code>可以指定Exchange、Routing Key以及消息本身。这里传入JavaBean后会自动序列化为JSON文本。上述代码将<code class="language-plaintext highlighter-rouge">RegistrationMessage</code>发送到<code class="language-plaintext highlighter-rouge">registration</code>，将<code class="language-plaintext highlighter-rouge">LoginMessage</code>发送到<code class="language-plaintext highlighter-rouge">login</code>，并根据登录是否成功来指定Routing Key。</p>

<p>接收消息时，需要在消息处理的方法上标注<code class="language-plaintext highlighter-rouge">@RabbitListener</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueMessageListener</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_MAIL</span> <span class="o">=</span> <span class="s">"q_mail"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_SMS</span> <span class="o">=</span> <span class="s">"q_sms"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_APP</span> <span class="o">=</span> <span class="s">"q_app"</span><span class="o">;</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_MAIL</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessageFromMailQueue</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="no">QUEUE_MAIL</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_SMS</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessageFromSmsQueue</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="no">QUEUE_SMS</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_MAIL</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromMailQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_MAIL</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_SMS</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromSmsQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_SMS</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_APP</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromAppQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_APP</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码一共定义了5个Consumer，监听3个Queue。</p>

<p>启动应用程序，注册一个新用户，然后发送一条<code class="language-plaintext highlighter-rouge">RegistrationMessage</code>消息。此时，根据<code class="language-plaintext highlighter-rouge">registration</code>这个Exchange的设定，会在两个Queue收到消息：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try register by bob@example.com...
user registered: bob@example.com
queue q_mail received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
queue q_sms received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
</code></pre></div></div>

<p>当登录失败时，发送<code class="language-plaintext highlighter-rouge">LoginMessage</code>并设定Routing Key为<code class="language-plaintext highlighter-rouge">login_failed</code>，此时，只有<code class="language-plaintext highlighter-rouge">q_sms</code>会收到消息：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try login by bob@example.com...
queue q_sms received message: [LoginMessage: email=bob@example.com, name=(unknown), success=false]
</code></pre></div></div>

<p>登录成功后，发送<code class="language-plaintext highlighter-rouge">LoginMessage</code>，此时，<code class="language-plaintext highlighter-rouge">q_mail</code>和<code class="language-plaintext highlighter-rouge">q_app</code>将收到消息：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try login by bob@example.com...
queue q_mail received message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
queue q_app received message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
</code></pre></div></div>

<p>RabbitMQ还提供了使用Topic的Exchange（此Topic指消息的标签，并非JMS的Topic概念），可以使用<code class="language-plaintext highlighter-rouge">*</code>进行匹配并路由。可见，掌握RabbitMQ的核心是理解其消息的路由规则。</p>

<p>直接指定一个Queue并投递消息也是可以的，此时指定Routing Key为Queue的名称即可，因为RabbitMQ提供了一个<code class="language-plaintext highlighter-rouge">default exchange</code>用于根据Routing Key查找Queue并直接投递消息到指定的Queue。但是要实现一对多的投递就必须自己配置Exchange。</p>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_APP</span><span class="o">,</span> <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_MAIL</span><span class="o">,</span>
                          <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_SMS</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueMessageListener</span> <span class="o">{</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_MAIL</span> <span class="o">=</span> <span class="s">"q_mail"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_SMS</span> <span class="o">=</span> <span class="s">"q_sms"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_APP</span> <span class="o">=</span> <span class="s">"q_app"</span><span class="o">;</span>

    <span class="nd">@RabbitHandler</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">messageOriginal</span><span class="o">,</span> <span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">messageOriginal</span><span class="o">.</span><span class="na">getMessageProperties</span><span class="o">().</span><span class="na">getConsumerQueue</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitHandler</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">messageOriginal</span><span class="o">,</span> <span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">messageOriginal</span><span class="o">.</span><span class="na">getMessageProperties</span><span class="o">().</span><span class="na">getConsumerQueue</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received login message: {}"</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>解释：</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">@RabbitListener(queues = {...})</code></strong>:  这个注解用于声明该类监听哪些队列的消息。在这个示例中，<code class="language-plaintext highlighter-rouge">QueueMessageListener</code> 类监听 <code class="language-plaintext highlighter-rouge">QUEUE_APP</code>、<code class="language-plaintext highlighter-rouge">QUEUE_MAIL</code> 和 <code class="language-plaintext highlighter-rouge">QUEUE_SMS</code> 三个队列的消息。当这些队列有新消息到达时，该类会被触发。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@RabbitHandler</code></strong>:  该注解用于标记处理消息的方法。一个类可以有多个 <code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 方法，它们会根据消息的类型来自动选择对应的方法进行处理。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">onRegistrationMessage(Message messageOriginal, RegistrationMessage message)</code></strong>:  是一个处理注册消息的方法。<code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 注解表明这个方法会处理 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 类型的消息。
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">Message messageOriginal</code></strong>:  这个参数是原始的 RabbitMQ 消息对象，包含消息的元数据（如消息属性、队列名等）。</li>
      <li><strong><code class="language-plaintext highlighter-rouge">RegistrationMessage message</code></strong>:  这是实际的消息体，Spring 会自动将消息反序列化为 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 对象。</li>
      <li><strong><code class="language-plaintext highlighter-rouge">queueName</code></strong>:  使用 <code class="language-plaintext highlighter-rouge">messageOriginal.getMessageProperties().getConsumerQueue()</code> 获取当前消息来自的队列名称。这在日志中用于记录消息来自哪个队列。</li>
    </ul>
  </li>
</ul>

<p>当 RabbitMQ 中的 <code class="language-plaintext highlighter-rouge">q_mail</code>、<code class="language-plaintext highlighter-rouge">q_sms</code> 或 <code class="language-plaintext highlighter-rouge">q_app</code> 队列有新消息时，<code class="language-plaintext highlighter-rouge">QueueMessageListener</code> 会自动接收消息。Spring AMQP 框架根据消息的类型（例如 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 或 <code class="language-plaintext highlighter-rouge">LoginMessage</code>）来选择合适的 <code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 方法处理消息。</p>

<ul>
  <li>如果消息是 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 类型的，则调用<code class="language-plaintext highlighter-rouge">onRegistrationMessage</code> 方法。</li>
  <li>如果消息是 <code class="language-plaintext highlighter-rouge">LoginMessage</code> 类型的，则调用 <code class="language-plaintext highlighter-rouge">onLoginMessage</code> 方法。</li>
</ul>

<p>该机制允许根据消息的不同类型，使用不同的方法进行处理，简化了消息处理逻辑的组织。</p>

<h2 id="集成kafka">集成Kafka</h2>

<p>JMS是JavaEE的标准消息接口，Artemis是一个JMS实现产品，AMQP是跨语言的一个标准消息接口，RabbitMQ是一个AMQP实现产品。</p>

<p>Kafka也是一个消息服务器，它的特点一是快，二是有巨大的吞吐量，Kafka没有实现任何标准的消息接口，它自己提供的API就是Kafka的接口。</p>

<p>Kafka本身是Scala编写的，运行在JVM之上。Producer和Consumer都通过Kafka的客户端使用网络来与之通信。从逻辑上讲，Kafka设计非常简单，它只有一种类似JMS的Topic的消息通道：</p>

<pre><code class="language-ascii">                           ┌──────────┐
                       ┌──▶│Consumer-1│
                       │   └──────────┘
┌────────┐    ┌─────┐  │   ┌──────────┐
│Producer│───▶│Topic│──┼──▶│Consumer-2│
└────────┘    └─────┘  │   └──────────┘
                       │   ┌──────────┐
                       └──▶│Consumer-3│
                           └──────────┘
</code></pre>

<p>Kafka的一个Topic可以有一个至多个Partition，并且可以分布到多台机器上：</p>

<pre><code class="language-ascii">            ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
             Topic
            │                   │
                ┌───────────┐        ┌──────────┐
            │┌─▶│Partition-1│──┐│┌──▶│Consumer-1│
             │  └───────────┘  │ │   └──────────┘
┌────────┐  ││  ┌───────────┐  │││   ┌──────────┐
│Producer│───┼─▶│Partition-2│──┼─┼──▶│Consumer-2│
└────────┘  ││  └───────────┘  │││   └──────────┘
             │  ┌───────────┐  │ │   ┌──────────┐
            │└─▶│Partition-3│──┘│└──▶│Consumer-3│
                └───────────┘        └──────────┘
            └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>Kafka只保证<strong>在一个Partition内部，消息是有序的</strong>，但是，存在多个Partition的情况下，Producer发送的3个消息会依次发送到Partition-1、Partition-2和Partition-3，Consumer从3个Partition接收的消息并不一定是Producer发送的顺序，因此，多个Partition只能保证接收消息大概率按发送时间有序，并不能保证完全按Producer发送的顺序。这一点在使用Kafka作为消息服务器时要特别注意，对发送顺序有严格要求的Topic只能有一个Partition。</p>

<p>Kafka的另一个特点是消息发送和接收都尽量使用批处理，一次处理几十甚至上百条消息，比一次一条效率要高很多。</p>

<p>最后要注意的是消息的持久性。Kafka总是将消息写入Partition对应的文件，消息保存多久取决于服务器的配置，可以按照时间删除（默认3天），也可以按照文件大小删除，因此，只要Consumer在离线期内的消息还没有被删除，再次上线仍然可以接收到完整的消息流。这一功能实际上是客户端自己实现的，客户端会存储它接收到的最后一个消息的<code class="language-plaintext highlighter-rouge">offsetId</code>，再次上线后按上次的<code class="language-plaintext highlighter-rouge">offsetId</code>查询。<code class="language-plaintext highlighter-rouge">offsetId</code>是Kafka标识某个Partion的每一条消息的递增整数，客户端通常将它存储在ZooKeeper中。</p>

<p><strong>安装Kafka</strong></p>

<p>首先从Kafka官网<a href="https://kafka.apache.org/downloads">下载</a>最新版Kafaka，解压后在<code class="language-plaintext highlighter-rouge">bin</code>目录找到两个文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">zookeeper-server-start.sh</code>：启动ZooKeeper（已内置在Kafka中）；</li>
  <li><code class="language-plaintext highlighter-rouge">kafka-server-start.sh</code>：启动Kafka。</li>
</ul>

<p>先启动ZooKeeper：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./zookeeper-server-start.sh ../config/zookeeper.properties 
</code></pre></div></div>

<p>再启动Kafka：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./kafka-server-start.sh ../config/server.properties
</code></pre></div></div>

<p>看到如下输出表示启动成功：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>... INFO [KafkaServer id=0] started (kafka.server.KafkaServer)
</code></pre></div></div>

<p>如果要关闭Kafka和ZooKeeper，依次按Ctrl-C退出即可。</p>

<p><strong>使用Kafka</strong></p>

<p>在Spring Boot中使用Kafka，首先要引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.kafka<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-kafka<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>注意这个依赖是<code class="language-plaintext highlighter-rouge">spring-kafka</code>项目提供的。</p>

<p>然后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加Kafka配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">kafka</span><span class="pi">:</span>
    <span class="na">bootstrap-servers</span><span class="pi">:</span> <span class="s">localhost:9092</span>
    <span class="na">consumer</span><span class="pi">:</span>
      <span class="na">auto-offset-reset</span><span class="pi">:</span> <span class="s">latest</span>
      <span class="na">max-poll-records</span><span class="pi">:</span> <span class="m">100</span>
      <span class="na">max-partition-fetch-bytes</span><span class="pi">:</span> <span class="m">1000000</span>
</code></pre></div></div>

<p>除了<code class="language-plaintext highlighter-rouge">bootstrap-servers</code>必须指定外，<code class="language-plaintext highlighter-rouge">consumer</code>相关的配置项均为调优选项。例如，<code class="language-plaintext highlighter-rouge">max-poll-records</code>表示一次最多抓取100条消息。如果要查看配置名称，可以在IDE里定义一个<code class="language-plaintext highlighter-rouge">KafkaProperties.Consumer</code>的变量：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">KafkaProperties</span><span class="o">.</span><span class="na">Consumer</span> <span class="n">c</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</code></pre></div></div>

<p>然后按住Ctrl查看源码即可。</p>

<p><strong>发送消息</strong></p>

<p>Spring Boot自动创建了一个<code class="language-plaintext highlighter-rouge">KafkaTemplate</code>用于发送消息。这是一个泛型类，而默认配置总是使用<code class="language-plaintext highlighter-rouge">String</code>作为Kafka消息的类型，所以注入<code class="language-plaintext highlighter-rouge">KafkaTemplate&lt;String, String&gt;</code>即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="nd">@Autowired</span> <span class="nc">KafkaTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">kafkaTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRegistrationMessage</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">send</span><span class="o">(</span><span class="s">"topic_registration"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendLoginMessage</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">send</span><span class="o">(</span><span class="s">"topic_login"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="nc">String</span> <span class="n">topic</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">ProducerRecord</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">pr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProducerRecord</span><span class="o">&lt;&gt;(</span><span class="n">topic</span><span class="o">,</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">msg</span><span class="o">));</span>
        <span class="n">pr</span><span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"type"</span><span class="o">,</span> <span class="n">msg</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">().</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
        <span class="n">kafkaTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">pr</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>发送消息时，需指定Topic名称，消息正文。为了发送一个JavaBean，这里没有使用<code class="language-plaintext highlighter-rouge">MessageConverter</code>来转换JavaBean，而是直接把消息类型作为Header添加到消息中，Header名称为<code class="language-plaintext highlighter-rouge">type</code>，值为Class全名。消息正文是序列化的JSON。</p>

<p><strong>接收消息</strong></p>

<p>接收消息可以使用<code class="language-plaintext highlighter-rouge">@KafkaListener</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TopicMessageListener</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_registration"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">RegistrationMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received registration message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_login"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">LoginMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received login message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_login"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processLoginMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">LoginMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"process login message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getType</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// TODO: use cache:</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;)</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在接收消息的方法中，使用<code class="language-plaintext highlighter-rouge">@Payload</code>表示传入的是消息正文，使用<code class="language-plaintext highlighter-rouge">@Header</code>可传入消息的指定Header，这里传入<code class="language-plaintext highlighter-rouge">@Header("type")</code>，就是我们发送消息时指定的Class全名。接收消息时，我们需要根据Class全名来反序列化获得JavaBean。</p>

<p>上述代码一共定义了3个Listener，其中有两个方法监听的是同一个Topic，但它们的Group ID不同。假设Producer发送的消息流是A、B、C、D，Group ID不同表示这是<strong>两个不同的Consumer</strong>，它们将分别收取完整的消息流，即各自均收到A、B、C、D。Group ID相同的多个Consumer实际上被视作<strong>一个</strong>Consumer，即如果有两个Group ID相同的Consumer，那么它们各自收到的很可能是A、C和B、D。</p>

<p>运行应用程序，注册新用户后：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try register by bob@example.com...
user registered: bob@example.com
 received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
</code></pre></div></div>

<p>用户登录后，观察日志输出：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try login by bob@example.com...
received login message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
process login message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
</code></pre></div></div>

<p>因为Group ID不同，同一个消息被两个Consumer分别独立接收。如果把Group ID改为相同，那么同一个消息只会被两者之一接收。</p>

<p>在Kafka中是如何创建Topic的？又如何指定某个Topic的分区数量？</p>

<p>实际上开发使用的Kafka默认允许自动创建Topic，创建Topic时默认的分区数量是2，可以通过<code class="language-plaintext highlighter-rouge">server.properties</code>修改默认分区数量。</p>

<p>在生产环境中通常会关闭自动创建功能，Topic需要由运维人员先创建好。和RabbitMQ相比，Kafka并不提供网页版管理后台，管理Topic需要使用命令行，比较繁琐，只有云服务商通常会提供更友好的管理后台。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Spring</title><link href="/2024/06/05/Spring/" rel="alternate" type="text/html" title="Spring" /><published>2024-06-05T00:00:00+08:00</published><updated>2024-06-05T00:00:00+08:00</updated><id>/2024/06/05/Spring</id><content type="html" xml:base="/2024/06/05/Spring/"><![CDATA[<h1 id="引言">引言</h1>
<p>Spring、Spring MVC框架笔记，包括IoC、AOP、使用JDBC、事务、集成Hibernate、Mybatis、JPA，REST风格代码、集成Filter、使用Interceptor、处理异常、跨域、国际化、集成WebSocket、JavaMail、JMS、JMX、使用Scheduler。</p>

<h1 id="spring">Spring</h1>

<p>Spring是一个支持快速开发Java EE应用程序的框架。它提供了一系列底层容器和基础设施，并可以和大量常用的开源框架无缝集成，可以说是开发Java EE应用程序的必备。</p>

<p>Spring Framework主要包括几个模块：</p>

<ul>
  <li>支持IoC和AOP的容器；</li>
  <li>支持JDBC和ORM的数据访问模块；</li>
  <li>支持声明式事务的模块；</li>
  <li>支持基于Servlet的MVC开发；</li>
  <li>支持基于Reactive的Web开发；</li>
  <li>以及集成JMS、JavaMail、JMX、缓存等其他模块。</li>
</ul>

<h2 id="ioc">IoC</h2>

<p>容器是一种为某种特定组件的运行提供必要支持的一个软件环境。例如，Tomcat就是一个Servlet容器，它可以为Servlet的运行提供运行环境。类似Docker这样的软件也是一个容器，它提供了必要的Linux环境以便运行一个特定的Linux进程。</p>

<p>通常来说，使用容器运行组件，除了提供一个组件运行环境之外，容器还提供了许多底层服务。例如，Servlet容器底层实现了TCP连接，解析HTTP协议等非常复杂的服务，如果没有容器来提供这些服务，我们就无法编写像Servlet这样代码简单，功能强大的组件。早期的JavaEE服务器提供的EJB容器最重要的功能就是通过声明式事务服务，使得EJB组件的开发人员不必自己编写冗长的事务处理代码，所以极大地简化了事务处理。</p>

<p>Spring的核心就是提供了一个IoC容器，它可以管理所有轻量级的JavaBean组件，提供的底层服务包括组件的生命周期管理、配置和组装服务、AOP支持，以及建立在AOP基础上的声明式事务服务等。</p>

<p>IoC全称Inversion of Control，直译为控制反转。</p>

<p>假定一个在线书店，通过<code class="language-plaintext highlighter-rouge">BookService</code>获取书籍：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nc">Book</span> <span class="nf">getBook</span><span class="o">(</span><span class="kt">long</span> <span class="n">bookId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">())</span> <span class="o">{</span>
            <span class="o">...</span>
            <span class="k">return</span> <span class="n">book</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>为了从数据库查询书籍，<code class="language-plaintext highlighter-rouge">BookService</code>持有一个<code class="language-plaintext highlighter-rouge">DataSource</code>。为了实例化一个<code class="language-plaintext highlighter-rouge">HikariDataSource</code>，又不得不实例化一个<code class="language-plaintext highlighter-rouge">HikariConfig</code>。</p>

<p>现在，继续编写<code class="language-plaintext highlighter-rouge">UserService</code>获取用户：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUser</span><span class="o">(</span><span class="kt">long</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">())</span> <span class="o">{</span>
            <span class="o">...</span>
            <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为<code class="language-plaintext highlighter-rouge">UserService</code>也需要访问数据库，因此，不得不也实例化一个<code class="language-plaintext highlighter-rouge">HikariDataSource</code>。</p>

<p>上述每个组件都采用了一种简单的通过<code class="language-plaintext highlighter-rouge">new</code>创建实例并持有的方式。会有以下缺点：</p>

<ol>
  <li>实例化一个组件其实很难，例如，<code class="language-plaintext highlighter-rouge">BookService</code>和<code class="language-plaintext highlighter-rouge">UserService</code>要创建<code class="language-plaintext highlighter-rouge">HikariDataSource</code>，实际上需要读取配置，才能先实例化<code class="language-plaintext highlighter-rouge">HikariConfig</code>，再实例化<code class="language-plaintext highlighter-rouge">HikariDataSource</code>。</li>
  <li>没有必要让<code class="language-plaintext highlighter-rouge">BookService</code>和<code class="language-plaintext highlighter-rouge">UserService</code>分别创建<code class="language-plaintext highlighter-rouge">DataSource</code>实例，完全可以共享同一个<code class="language-plaintext highlighter-rouge">DataSource</code>，但谁负责创建<code class="language-plaintext highlighter-rouge">DataSource</code>，谁负责获取其他组件已经创建的<code class="language-plaintext highlighter-rouge">DataSource</code>，不好处理。</li>
  <li>很多组件需要销毁以便释放资源，例如<code class="language-plaintext highlighter-rouge">DataSource</code>，但如果该组件被多个组件共享，如何确保它的使用方都已经全部被销毁？</li>
  <li>测试某个组件，例如<code class="language-plaintext highlighter-rouge">BookService</code>，是复杂的，因为必须要在真实的数据库环境下执行。</li>
</ol>

<p>如果一个系统有大量的组件，其生命周期和相互之间的依赖关系如果由组件自身来维护，不但大大增加了系统的复杂度，而且会导致组件之间极为紧密的耦合，继而给测试和维护带来了极大的困难。</p>

<p>因此，核心问题是：谁负责创建组件？谁负责根据依赖关系组装组件？销毁时，如何按依赖顺序正确销毁？解决这一问题的核心方案就是IoC。</p>

<p>传统的应用程序中，控制权在程序本身，程序的控制流程完全由开发者控制，例如：</p>

<p><code class="language-plaintext highlighter-rouge">CartServlet</code>创建了<code class="language-plaintext highlighter-rouge">BookService</code>，在创建<code class="language-plaintext highlighter-rouge">BookService</code>的过程中，又创建了<code class="language-plaintext highlighter-rouge">DataSource</code>组件。这种模式的缺点是，一个组件如果要使用另一个组件，必须先知道如何正确地创建它。</p>

<p>在IoC模式下，控制权发生了反转，即从应用程序转移到了IoC容器，所有组件不再由应用程序自己创建和配置，而是由IoC容器负责，这样，应用程序只需要直接使用已经创建好并且配置好的组件。为了能让组件在IoC容器中被“装配”出来，需要某种“注入”机制，例如，<code class="language-plaintext highlighter-rouge">BookService</code>自己并不会创建<code class="language-plaintext highlighter-rouge">DataSource</code>，而是等待外部通过<code class="language-plaintext highlighter-rouge">setDataSource()</code>方法来注入一个<code class="language-plaintext highlighter-rouge">DataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>不直接<code class="language-plaintext highlighter-rouge">new</code>一个<code class="language-plaintext highlighter-rouge">DataSource</code>，而是注入一个<code class="language-plaintext highlighter-rouge">DataSource</code>，这个小小的改动虽然简单，却带来了一系列好处：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">BookService</code>不再关心如何创建<code class="language-plaintext highlighter-rouge">DataSource</code>，因此，不必编写读取数据库配置之类的代码；</li>
  <li><code class="language-plaintext highlighter-rouge">DataSource</code>实例被注入到<code class="language-plaintext highlighter-rouge">BookService</code>，同样也可以注入到<code class="language-plaintext highlighter-rouge">UserService</code>，因此，共享一个组件非常简单；</li>
  <li>测试<code class="language-plaintext highlighter-rouge">BookService</code>更容易，因为注入的是<code class="language-plaintext highlighter-rouge">DataSource</code>，可以使用内存数据库，而不是真实的MySQL配置。</li>
</ol>

<p>IoC又称为依赖注入（DI：Dependency Injection），它解决了一个最主要的问题：将组件的创建+配置与组件的使用相分离，并且，由IoC容器负责管理组件的生命周期。</p>

<p>因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系。一种最简单的配置是通过XML文件来实现，例如：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;beans&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"HikariDataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"bookService"</span> <span class="na">class=</span><span class="s">"BookService"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userService"</span> <span class="na">class=</span><span class="s">"UserService"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>上述XML配置文件指示IoC容器创建3个JavaBean组件，并把id为<code class="language-plaintext highlighter-rouge">dataSource</code>的组件通过属性<code class="language-plaintext highlighter-rouge">dataSource</code>（即调用<code class="language-plaintext highlighter-rouge">setDataSource()</code>方法）注入到另外两个组件中。</p>

<p>依赖注入可以通过<code class="language-plaintext highlighter-rouge">set()</code>方法实现，也可以通过构造方法实现。</p>

<p>把<code class="language-plaintext highlighter-rouge">BookService</code>改造为通过构造方法注入，那么实现代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BookService</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring的IoC容器同时支持属性注入和构造方法注入，并允许混合使用。</p>

<p>在设计上，Spring的IoC容器是一个高度可扩展的无侵入容器。所谓无侵入，是指应用程序的组件无需实现Spring的特定接口，或者说，组件根本不知道自己在Spring的容器中运行。这种无侵入的设计有以下好处：</p>

<ol>
  <li>应用程序组件既可以在Spring的IoC容器中运行，也可以自己编写代码自行组装配置；</li>
  <li>测试的时候并不依赖Spring容器，可单独进行测试，大大提高了开发效率。</li>
</ol>

<h3 id="ioc装配">IoC装配</h3>

<p>首先引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>测试代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写一个特定的<code class="language-plaintext highlighter-rouge">application.xml</code>配置文件，告诉Spring的IoC容器应该如何创建并组装Bean：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<hr />

<h3 id="bean的配置">Bean的配置</h3>

<p>在 Spring中，XML配置文件的根元素是<code class="language-plaintext highlighter-rouge">&lt; beans&gt;</code>，其下包含了<code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>子元素，每个<code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>子元素定义了一个Bean，并描述了该Bean如何被装配到Spring容器中。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>元素中包含了多个<em>属性</em>。其常用属性如下：</p>

<table>
  <thead>
    <tr>
      <th><strong>属性</strong></th>
      <th><strong>解释</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td>实例化对象名称</td>
    </tr>
    <tr>
      <td>name</td>
      <td>可以为bean指定多个名称，用逗号分隔</td>
    </tr>
    <tr>
      <td>class</td>
      <td>类文件的全局名称</td>
    </tr>
    <tr>
      <td>scope</td>
      <td>实例的生存空间或有效范围</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>元素中同样包含了多个<em>子</em>元素，其子元素如下</p>

<p><code class="language-plaintext highlighter-rouge">constructor-arg</code>、<code class="language-plaintext highlighter-rouge">property</code>、<code class="language-plaintext highlighter-rouge">ref</code>、<code class="language-plaintext highlighter-rouge">value</code>、<code class="language-plaintext highlighter-rouge">list</code>、<code class="language-plaintext highlighter-rouge">set</code>、<code class="language-plaintext highlighter-rouge">map</code>、<code class="language-plaintext highlighter-rouge">entry</code></p>

<h3 id="bean的实例化">Bean的实例化</h3>

<p><strong>构造方法实例化，使用类的无参数构造创建</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"testdemo"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">dao</span><span class="o">.</span><span class="na">TestDemo</span><span class="err">"</span><span class="o">&gt;&lt;/</span><span class="n">bean</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><strong>使用静态工厂实例化</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"b2"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">SpringBean</span><span class="o">.</span><span class="na">Factory</span><span class="s">" factory-method="</span><span class="n">newBean</span><span class="err">"</span><span class="o">/&gt;</span>
</code></pre></div></div>

<p>参数：id 实例化对象名称，class 静态工厂绝对名称，factory-method 工厂的静态方法名称</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Bean</span> <span class="nf">newBean</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="k">new</span> <span class="nc">Bean</span><span class="o">();}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ap</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"Factory.xml"</span><span class="o">);</span>
        <span class="n">ap</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"b2"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Bean</span><span class="o">{}</span>
</code></pre></div></div>

<p><strong>实例工厂实例化</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"factory"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">SpringBean</span><span class="o">.</span><span class="na">Factory</span><span class="s">" /&gt;
&lt;bean id="</span><span class="n">b3</span><span class="s">" factory-bean="</span><span class="n">factory</span><span class="s">" factory-method="</span><span class="n">newBean2</span><span class="err">"</span><span class="o">/&gt;</span>
</code></pre></div></div>

<p>参数：id 实例化对象名称，factory-bean 实例化的工厂名称，factory-method 工厂的方法名称</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Bean</span> <span class="nf">newBean2</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="k">new</span> <span class="nc">Bean</span><span class="o">();}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ap</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"Factory.xml"</span><span class="o">);</span>
        <span class="n">ap</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"b3"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Bean</span><span class="o">{}</span>
</code></pre></div></div>

<h3 id="注入方式">注入方式</h3>

<p>对于构造方法注入，通过设置<code class="language-plaintext highlighter-rouge">constructor-arg</code>标签完成：</p>

<p><code class="language-plaintext highlighter-rouge">constructor-arg</code>参数:<code class="language-plaintext highlighter-rouge">type</code> 形参类型，<code class="language-plaintext highlighter-rouge">name</code> 形参变量名，<code class="language-plaintext highlighter-rouge">value</code> 属性值，<code class="language-plaintext highlighter-rouge">ref</code> 引用实例对象，<code class="language-plaintext highlighter-rouge">index</code> 索引值。</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<ul>
  <li>每个<code class="language-plaintext highlighter-rouge">&lt;bean ...&gt;</code>都有一个<code class="language-plaintext highlighter-rouge">id</code>标识，相当于Bean的唯一ID；</li>
  <li>在<code class="language-plaintext highlighter-rouge">a</code>Bean中，通过<code class="language-plaintext highlighter-rouge">&lt;constructor-arg index="0" ref="b"/&gt;</code>以<strong>构造方法注入</strong>了另一个<code class="language-plaintext highlighter-rouge">b</code>Bean；</li>
  <li>Bean的顺序不重要，Spring根据依赖关系会自动正确初始化。</li>
</ul>

<p>把上述XML配置文件用Java代码写出来，就像这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">B</span> <span class="n">b</span><span class="o">=</span><span class="k">new</span> <span class="no">B</span><span class="o">();</span>
<span class="no">A</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="no">A</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</code></pre></div></div>

<p>只不过Spring容器是通过读取XML文件后使用反射完成的。</p>

<p>其实这里不写<code class="language-plaintext highlighter-rouge">constructor-arg</code>，也可以，在 Spring XML 配置文件中，如果类 <code class="language-plaintext highlighter-rouge">A</code> 只有<strong>一个构造函数</strong>，并且这个构造函数需要一个 <code class="language-plaintext highlighter-rouge">B</code> 类型的参数，Spring 会自动匹配并注入所需的依赖。因此，如果只有一个构造函数并且只有一个参数类型可以匹配，则<strong>可以省略</strong> <code class="language-plaintext highlighter-rouge">&lt;constructor-arg&gt;</code> 标签。</p>

<p>还可以使用c命名空间简化注入,对应<code class="language-plaintext highlighter-rouge">constructor-arg</code>。</p>

<p><code class="language-plaintext highlighter-rouge">beans</code>标签添加属性: <code class="language-plaintext highlighter-rouge">xmlns:c="http://www.springframework.org/schema/c"</code>。</p>

<p>使用c命名空间，直接在bean添加参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"a1"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">A</span><span class="s">" c:_0-ref="</span><span class="n">b</span><span class="s">"/&gt;
&lt;bean id="</span><span class="n">a2</span><span class="s">" class="</span><span class="n">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">A</span><span class="s">" c:b-ref="</span><span class="n">b</span><span class="err">"</span><span class="o">/&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">c:_索引值</code> 对应 <code class="language-plaintext highlighter-rouge">index="索引值"</code>， 加<code class="language-plaintext highlighter-rouge">-ref</code>表示引用实例对象</p>

<p><code class="language-plaintext highlighter-rouge">c:形参变量名</code> 对应 <code class="language-plaintext highlighter-rouge">name="形参变量名"</code>,加<code class="language-plaintext highlighter-rouge">-ref</code>表示引用实例对象，不加则是设置普通数据类型，上面的式子如果不加，则<code class="language-plaintext highlighter-rouge">"b"</code>视为字符串。</p>

<p>需要注意的是<code class="language-plaintext highlighter-rouge">c:b-ref</code>这种方式只对以debug方式编译的class有效，因为对于非debug方式编译的class文件Spring将无法获取到对应构造方法的<code class="language-plaintext highlighter-rouge">参数名</code>，因为被优化掉了。之前在JavaWeb有说，可以设置编译器参数：<code class="language-plaintext highlighter-rouge">-parameters</code>，保留形参变量名。</p>

<hr />

<p>对于set方法注入，通过设置<code class="language-plaintext highlighter-rouge">property</code>标签完成：</p>

<p>如果要改成<strong>通过<code class="language-plaintext highlighter-rouge">set</code>方法注入</strong>，则xml修改为：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"b"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">property</code>参数： <code class="language-plaintext highlighter-rouge">name</code> 变量名，<code class="language-plaintext highlighter-rouge">value</code> 属性值，<code class="language-plaintext highlighter-rouge">ref</code> 引用实例对象。</p>

<p>同样的，可以使用p命名空间简化注入,对应<code class="language-plaintext highlighter-rouge">property</code>。</p>

<p><code class="language-plaintext highlighter-rouge">beans</code>标签添加属性: <code class="language-plaintext highlighter-rouge">xmlns:p="http://www.springframework.org/schema/p"</code>。</p>

<p>使用p命名空间，直接在bean添加参数：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="na">p:b-ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">p:变量名</code> 对应 <code class="language-plaintext highlighter-rouge">name="变量名"</code>，加<code class="language-plaintext highlighter-rouge">-ref</code>表示引用实例对象。</p>

<p>注意：<code class="language-plaintext highlighter-rouge">property</code>对应的是set方法，而<strong>不是</strong>对应的属性。如<code class="language-plaintext highlighter-rouge">name="world"</code>实际对应<code class="language-plaintext highlighter-rouge">setWorld()</code>方法，这个时候<strong>不管</strong>是否真的存在名为<code class="language-plaintext highlighter-rouge">world</code>的属性.</p>

<hr />

<h3 id="自动装配">自动装配</h3>

<p>Spring的<code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>元素中包含个 <code class="language-plaintext highlighter-rouge">autowire</code>属性，可通过设置 <code class="language-plaintext highlighter-rouge">autowire</code>的属性来自动装配Bean。自动装配，就是将一个Bean注入到其他Bean的Property中。autowire属性值及说明如下:</p>

<table>
  <thead>
    <tr>
      <th>属性值</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>default</td>
      <td>默认值。</td>
    </tr>
    <tr>
      <td>byName</td>
      <td>根据 Property的Name自动装配。</td>
    </tr>
    <tr>
      <td>byType</td>
      <td>根据 Property的数据类型（TYPE）自动装配</td>
    </tr>
    <tr>
      <td>constructor</td>
      <td>根据构造函数参数的数据类型。</td>
    </tr>
    <tr>
      <td>autodetect</td>
      <td>如果发现默认的构造函数，用constructor模式，否则用byType模式</td>
    </tr>
    <tr>
      <td>no</td>
      <td>不适用自动装配，Bean依赖必须通过ref元素定义。</td>
    </tr>
  </tbody>
</table>

<p>默认情况下，<code class="language-plaintext highlighter-rouge">autowire</code>属性的默认值为<code class="language-plaintext highlighter-rouge">default</code>。默认情况下Spring会根据<code class="language-plaintext highlighter-rouge">byName</code>的方式进行自动装配。如果Spring在容器中找到与属性名相同的Bean，则会将该Bean注入到相应的属性中。如果找不到与属性名相同的Bean，Spring会抛出<code class="language-plaintext highlighter-rouge">NoSuchBeanDefinitionException</code>异常。</p>

<h3 id="注入的类型">注入的类型</h3>

<p>如果注入的不是Bean，而是<code class="language-plaintext highlighter-rouge">boolean</code>、<code class="language-plaintext highlighter-rouge">int</code>、<code class="language-plaintext highlighter-rouge">String</code>这样的数据类型，则通过设置<code class="language-plaintext highlighter-rouge">value</code>注入（构造方法注入同理），例如，创建一个<code class="language-plaintext highlighter-rouge">HikariDataSource</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"com.zaxxer.hikari.HikariDataSource"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jdbcUrl"</span> <span class="na">value=</span><span class="s">"jdbc:mysql://localhost:3306/test"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">"root"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"password"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maximumPoolSize"</span> <span class="na">value=</span><span class="s">"10"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"autoCommit"</span> <span class="na">value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>如果是Map类型，则通过嵌套<code class="language-plaintext highlighter-rouge">map</code>标签进行设置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"map"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;map&gt;</span>
            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"1"</span> <span class="na">value=</span><span class="s">"唱"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"2"</span> <span class="na">value=</span><span class="s">"跳"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"3"</span> <span class="na">value=</span><span class="s">"RAP"</span> <span class="na">value-type=</span><span class="s">"java.lang.String"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/map&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>如果是List类型，则通过嵌套<code class="language-plaintext highlighter-rouge">list</code>标签进行设置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"b"</span> <span class="na">index=</span><span class="s">"0"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"list"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;list&gt;&lt;value&gt;</span>唱<span class="nt">&lt;/value&gt;&lt;value&gt;</span>跳<span class="nt">&lt;/value&gt;&lt;value&gt;</span>RAR<span class="nt">&lt;/value&gt;&lt;/list&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>如果是Set类型，则通过嵌套<code class="language-plaintext highlighter-rouge">set</code>标签进行设置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"set"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;set&gt;&lt;value</span> <span class="nt">&gt;</span>唱<span class="nt">&lt;/value&gt;&lt;value&gt;</span>跳<span class="nt">&lt;/value&gt;&lt;value&gt;</span>RAR<span class="nt">&lt;/value&gt;&lt;/set&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>前面有说name属性对应的是set方法，这里是<code class="language-plaintext highlighter-rouge">"set"</code>,所以对应<code class="language-plaintext highlighter-rouge">setList</code>方法，也可以改成其他的名字。</p>

<p>如果是数组，则通过嵌套<code class="language-plaintext highlighter-rouge">array</code>标签进行设置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"list"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;array&gt;&lt;value&gt;</span>唱<span class="nt">&lt;/value&gt;&lt;value&gt;</span>跳<span class="nt">&lt;/value&gt;&lt;value&gt;</span>RAR<span class="nt">&lt;/value&gt;&lt;/array&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">call</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">call</span> <span class="o">=</span> <span class="o">(</span><span class="no">B</span><span class="o">)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"key1"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">map</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">call</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>application.xml：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;map&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"1"</span> <span class="na">value=</span><span class="s">"唱"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"2"</span> <span class="na">value=</span><span class="s">"跳"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"3"</span> <span class="na">value=</span><span class="s">"RAP"</span> <span class="na">value-type=</span><span class="s">"java.lang.String"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"4"</span> <span class="na">value=</span><span class="s">"1"</span> <span class="na">value-type=</span><span class="s">"java.lang.Integer"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"key1"</span> <span class="na">value-ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/map&gt;</span>
        <span class="nt">&lt;/constructor-arg&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"array"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;array&gt;&lt;value&gt;</span>唱<span class="nt">&lt;/value&gt;&lt;value&gt;</span>跳<span class="nt">&lt;/value&gt;&lt;value&gt;</span>RAR<span class="nt">&lt;/value&gt;&lt;/array&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{1=唱, 2=跳, 3=RAP, 4=1, key1=com.aotmd.test.B@53de625d}
[唱, 跳, RAR]
hello
</code></pre></div></div>

<h3 id="applicationcontext">ApplicationContext</h3>

<p>Spring容器就是<code class="language-plaintext highlighter-rouge">ApplicationContext</code>，它是一个接口，有很多实现类，这里选择<code class="language-plaintext highlighter-rouge">ClassPathXmlApplicationContext</code>，表示它会自动从classpath中查找指定的XML配置文件。</p>

<p>获得了<code class="language-plaintext highlighter-rouge">ApplicationContext</code>的实例，就获得了IoC容器的引用。从<code class="language-plaintext highlighter-rouge">ApplicationContext</code>中可以根据Bean的ID获取Bean，也可以根据Bean的类型获取Bean的引用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
<span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
</code></pre></div></div>

<p>Spring还提供另一种IoC容器叫<code class="language-plaintext highlighter-rouge">BeanFactory</code>，使用方式和<code class="language-plaintext highlighter-rouge">ApplicationContext</code>类似：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BeanFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XmlBeanFactory</span><span class="o">(</span><span class="k">new</span> <span class="nc">ClassPathResource</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">));</span>
<span class="no">A</span> <span class="n">a</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BeanFactory</code>和<code class="language-plaintext highlighter-rouge">ApplicationContext</code>的区别在于，<code class="language-plaintext highlighter-rouge">BeanFactory</code>的实现是<strong>按需创建</strong>，即第一次获取Bean时才创建这个Bean，而<code class="language-plaintext highlighter-rouge">ApplicationContext</code>会一次性创建所有的Bean。实际上，<code class="language-plaintext highlighter-rouge">ApplicationContext</code>接口是从<code class="language-plaintext highlighter-rouge">BeanFactory</code>接口继承而来的，并且，<code class="language-plaintext highlighter-rouge">ApplicationContext</code>提供了一些额外的功能，包括国际化支持、事件和通知机制等。通常情况下，总是使用<code class="language-plaintext highlighter-rouge">ApplicationContext</code>，很少会考虑使用<code class="language-plaintext highlighter-rouge">BeanFactory</code>。</p>

<hr />

<p>创建 <code class="language-plaintext highlighter-rouge">ApplicationContext</code>接口实例通常有三种方法：</p>

<p><strong>通过<code class="language-plaintext highlighter-rouge">ClassPathXmlApplicationContext</code>创建</strong>
<code class="language-plaintext highlighter-rouge">ClassPathXmlApplicationContext</code>将从类路径classPath目录寻找指定的XML配置文件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>通过<code class="language-plaintext highlighter-rouge">FileSystemXmlApplicationContext</code>创建</strong></p>

<p><code class="language-plaintext highlighter-rouge">FileSystemXmlApplicationContext</code>将从指定文件的<strong>绝对路径</strong>中寻找XML配置文件，找到并装载完成<code class="language-plaintext highlighter-rouge">ApplicationContext</code>的实例化工作。采用绝对路径的加载方式将导致程序的灵活性变差， 一般<strong>不推荐使用</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">"C:\\XXX\\application.xml"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>通过Web服务器实例化<code class="language-plaintext highlighter-rouge">ApplicationContext</code>容器</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;</span>classpath:application.xml<span class="nt">&lt;/param-value&gt;</span>
<span class="nt">&lt;/context-param&gt;</span>
</code></pre></div></div>

<p>如果有多个Spring配置文件，则在<code class="language-plaintext highlighter-rouge">param-value</code>里，以逗号分隔，如果没有定义则默认加载<code class="language-plaintext highlighter-rouge">/WEB-INF/applicationContext.xml</code>文件，<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>是参数值，固定不变。</p>

<p>Web服务器实例化<code class="language-plaintext highlighter-rouge">ApplicationContext</code>容器时，一般使用基于<code class="language-plaintext highlighter-rouge">org.springframework.web.context.ContextLoaderListener</code>的实现方法只需要在<code class="language-plaintext highlighter-rouge">web.xml</code>中添加代码:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;</span>classpath:application.xml<span class="nt">&lt;/param-value&gt;</span>
<span class="nt">&lt;/context-param&gt;</span>
<span class="nt">&lt;listener&gt;</span>
    <span class="nt">&lt;listener-class&gt;</span>
        org.springframework.web.context.ContextLoaderListener
    <span class="nt">&lt;/listener-class&gt;</span>
<span class="nt">&lt;/listener&gt;</span>
</code></pre></div></div>

<p>需要web依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-web<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>使用，首先<strong>获取<code class="language-plaintext highlighter-rouge">ServletContext</code></strong>，这里列出几种方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ServletContext</span> <span class="n">sc</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
<span class="n">sc</span><span class="o">=((</span><span class="nc">HttpServletRequest</span><span class="o">)</span><span class="n">request</span><span class="o">).</span><span class="na">getSession</span><span class="o">().</span><span class="na">getServletContext</span><span class="o">();</span>
<span class="n">sc</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</code></pre></div></div>

<p>普通类获取方法（普通类若不经过服务器调用(如servlet调用)则会报<code class="language-plaintext highlighter-rouge">NullPointerException</code>）</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ServletContext</span> <span class="n">sc</span> <span class="o">=</span> <span class="nc">ContextLoader</span><span class="o">.</span><span class="na">getCurrentWebApplicationContext</span><span class="o">().</span><span class="na">getServletContext</span><span class="o">();</span>
</code></pre></div></div>

<p>然后<strong>通过<code class="language-plaintext highlighter-rouge">ServletContext</code>获取<code class="language-plaintext highlighter-rouge">ApplicationContext</code>：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getWebApplicationContext</span><span class="o">(</span><span class="n">sc</span><span class="o">);</span><span class="c1">// 这种方法 获取失败时返回null</span>
<span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unused"</span><span class="o">)</span>
<span class="nc">WebApplicationContext</span> <span class="n">ctx</span><span class="o">=</span><span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getRequiredWebApplicationContext</span><span class="o">(</span><span class="n">sc</span><span class="o">);</span><span class="c1">// 这种方法 获取失败时抛出异常</span>
<span class="n">ac</span> <span class="o">=</span> <span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getRequiredWebApplicationContext</span><span class="o">(</span><span class="n">sc</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<p><strong>销毁</strong></p>

<p>对于手动加载的Spring，<code class="language-plaintext highlighter-rouge">ApplicationContext</code>怎么销毁:</p>

<p>在非Web应用中，手工加载Spring IoC容器，不能用<code class="language-plaintext highlighter-rouge">ApplicationContext</code>，要用<code class="language-plaintext highlighter-rouge">AbstractApplicationContext</code>。用完以后要记得调用<code class="language-plaintext highlighter-rouge">ctx.close()</code>关闭容器。如果不记得关闭容器，最典型的问题就是数据库连接不能释放。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">((</span><span class="nc">AbstractApplicationContext</span><span class="o">)</span><span class="n">appcon</span><span class="o">).</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="完整实例">完整实例</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
        <span class="c1">// 这种方法 获取失败时返回null</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getWebApplicationContext</span><span class="o">(</span><span class="n">servletContext</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">call</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCall</span><span class="o">(</span><span class="no">B</span> <span class="n">call</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">call</span> <span class="o">=</span> <span class="n">call</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">call</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>application.xml:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"call"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>web.xml:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>
         <span class="na">version=</span><span class="s">"4.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;context-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>classpath:application.xml<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/context-param&gt;</span>
    <span class="nt">&lt;listener&gt;</span>
        <span class="nt">&lt;listener-class&gt;</span>
            org.springframework.web.context.ContextLoaderListener
        <span class="nt">&lt;/listener-class&gt;</span>
    <span class="nt">&lt;/listener&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<h3 id="bean的生命周期">Bean的生命周期</h3>

<p>在Spring框架中，Bean的生命周期包括创建（实例化与初始化）、使用以及销毁等阶段。Spring提供了多个接口和配置方式，允许开发者在这三个过程的前后进行操作。在Spring中，实例化是为Bean对象分配内存空间，初始化则是对Bean的属性进行设置。</p>

<p>对于singleton作用域的Bean，Spring容器可以精确地管理其生命周期，包括创建、初始化和销毁。而对于prototype作用域的Bean，Spring只负责创建实例，之后Bean的生命周期由客户端代码管理，Spring容器不再跟踪其状态。</p>

<p>Spring中Bean的生命周期可以参考Servlet的生命周期模型：实例化→初始化→请求处理→销毁。在singleton作用域下，Bean的生命周期包括以下阶段：</p>

<ol>
  <li>根据Bean的配置实例化Bean。</li>
  <li>对实例化的Bean进行依赖注入，即对属性进行初始化。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanNameAware</code>接口，将调用其<code class="language-plaintext highlighter-rouge">setBeanName(String beanName)</code>方法，传递的是Bean在Spring配置文件中的id。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanFactoryAware</code>接口，将调用其<code class="language-plaintext highlighter-rouge">setBeanFactory</code>方法，传递的是当前Spring工厂实例的引用。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanFactoryPostProcessor</code>接口，将调用其<code class="language-plaintext highlighter-rouge">postProcessBeanFactory()</code>方法，允许在Bean工厂实例化Bean之前对Bean定义进行修改。实现该接口可以在容器实例化Bean之前对Bean定义进行一些自定义的处理。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">ApplicationContextAware</code>接口，将调用其<code class="language-plaintext highlighter-rouge">setApplicationContext(ApplicationContext)</code>方法，传递的是Spring上下文实例的引用。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanPostProcessor</code>接口，将调用其<code class="language-plaintext highlighter-rouge">postProcessBeforeInitialization(Object obj, String beanName)</code>方法，在Bean初始化前对Bean进行操作。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">InitializingBean</code>接口，将调用其<code class="language-plaintext highlighter-rouge">afterPropertiesSet</code>方法，Bean在属性设置完成后会调用该方法进行初始化操作。</li>
  <li>如果Bean在配置文件中配置了<code class="language-plaintext highlighter-rouge">init-method</code>属性，将自动调用配置的初始化方法。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanPostProcessor</code>接口，将调用其<code class="language-plaintext highlighter-rouge">postProcessBeforeInitialization()</code>和<code class="language-plaintext highlighter-rouge">postProcessAfterInitialization(Object obj, String beanName)</code>方法，允许在Bean初始化前后进行一些自定义处理操作。实现该接口可以在Bean初始化前后对Bean进行一些额外的处理。</li>
</ol>

<p>注意：完成上述工作后，Bean可以被使用。由于是singleton作用域，因此调用的是同一个Bean实例。</p>

<ol>
  <li>当Bean不再需要时，进入销毁阶段。如果Bean实现了<code class="language-plaintext highlighter-rouge">DisposableBean</code>接口，将调用其<code class="language-plaintext highlighter-rouge">destroy</code>方法来销毁Bean。</li>
  <li>如果在配置文件中通过<code class="language-plaintext highlighter-rouge">destroy-method</code>属性指定了Bean的销毁方法，将调用配置的销毁方法进行Bean的销毁操作。</li>
</ol>

<p>在Spring中，通过实现特定接口或配置<code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>元素的属性，开发者可以影响Bean的生命周期过程。建议谨慎使用Bean实现接口，以避免过度耦合代码与Spring框架。</p>

<h2 id="使用注解">使用注解</h2>

<p>使用Spring的IoC容器，实际上就是通过类似XML这样的配置文件，把Bean的依赖关系描述出来，然后让容器来创建并装配Bean。一旦容器初始化完毕，就可以直接从容器中获取Bean使用它们。</p>

<p>使用XML配置的优点是所有的Bean都能一目了然地列出来，并通过配置注入能直观地看到每个Bean的依赖。它的缺点是写起来非常繁琐，每增加一个组件，就必须把新的Bean配置到XML中。</p>

<p>还可以使用Annotation配置，让Spring自动扫描Bean并组装它们。</p>

<p>原代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>xml：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>使用注解后：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@Component</code>注解就相当于定义了一个Bean，默认名称为小写开头的类名，可以指定<code class="language-plaintext highlighter-rouge">value</code>显示设置Bean名称。这里是使用构造方法装配，也可以使用<code class="language-plaintext highlighter-rouge">@Autowired</code>把指定类型的Bean注入到指定的字段中，它可以写在set方法上，也可以写在字段上，还可以写在构造方法形参上。如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>一般把<code class="language-plaintext highlighter-rouge">@Autowired</code>写在字段上：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对于xml配置部分，通过标注<code class="language-plaintext highlighter-rouge">@Configuration</code>，表示<code class="language-plaintext highlighter-rouge">Test</code>是一个配置类，并且标注<code class="language-plaintext highlighter-rouge">@ComponentScan</code>告诉容器，自动搜索<strong>当前配置类所在的包以及子包</strong>的注解并装配。因此要特别注意包的层次结构。通常来说，启动配置类要位于自定义的顶层包。当然也可以指定要扫描的包<code class="language-plaintext highlighter-rouge">@ComponentScan("com.aotmd.test")</code>，这样就不用特定配置类的位置了。</p>

<p>如果不想使用配置类，也可以使用xml扫描注解：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"com.aotmd.test"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p>常用的装配注解：</p>

<table>
  <thead>
    <tr>
      <th>注解</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Component</code></td>
      <td>描述Spring中的Bean，但是它时一个泛化的概念，仅仅表示一个组件（Bean）并且可以作用在任何层次；</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Repository</code></td>
      <td>用于将数据访问层（DAO）层的类标识为Spring中的Bean</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Service</code></td>
      <td>作用在业务层（service层），用于将业务层的类标识为Spring中的Bean</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Controller</code></td>
      <td>作用在控制层（如Spring MVC 的 controller层），用于将控制层的类标识为Spring中的Bean</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Autowired</code></td>
      <td>该注解可以对类成员变量、方法及构造方法进行标注，完成自动装配的工作。  通过<code class="language-plaintext highlighter-rouge">@Autowired</code>的使用来消除setter 和getter方法。默认按照Bean的<strong>类型进行装配</strong>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Resource</code></td>
      <td>该注解与<code class="language-plaintext highlighter-rouge">@Autowired</code>功能一样。区别在于，该注解默认是按照<strong>名称</strong>来装配注入的，只有当找不到与名称匹配的Bean才会按照类型来装配注入； <code class="language-plaintext highlighter-rouge">@Resource</code>注解有两个属性；<code class="language-plaintext highlighter-rouge">name</code>和<code class="language-plaintext highlighter-rouge">type</code>。<code class="language-plaintext highlighter-rouge">name</code>属性指定Bean实例名称，即按照名称来装配注入；<code class="language-plaintext highlighter-rouge">type</code>属性指定Bean类型，即按照Bean的类型进行装配</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Qualifier</code></td>
      <td>该注解与<code class="language-plaintext highlighter-rouge">@Autowired</code>注解配合使用。当<code class="language-plaintext highlighter-rouge">@Autowired</code>注解需要按照<strong>名称</strong>来装配注入，则需要结合该注解一起使用，Bean的实例名称由<code class="language-plaintext highlighter-rouge">@Qualifier</code>注解的参数指定。</td>
    </tr>
  </tbody>
</table>

<p>注意: <code class="language-plaintext highlighter-rouge">@Component</code>、<code class="language-plaintext highlighter-rouge">@Repository</code>、<code class="language-plaintext highlighter-rouge">@Service</code>、<code class="language-plaintext highlighter-rouge">@Controller</code>注解默认无参数生成的Bean是<strong>首字母小写</strong>的类名,但若<strong>类名第一第二都是大写</strong>则将<strong>类名</strong>做为生成的Bean,若类名首字母是小写则一样以类名作为标识符。</p>

<p>上面几个注解中，虽然<code class="language-plaintext highlighter-rouge">@Repository</code>、<code class="language-plaintext highlighter-rouge">@Service</code>和<code class="language-plaintext highlighter-rouge">@Controller</code>等注解的功能与<code class="language-plaintext highlighter-rouge">@Component</code>相同，但为了使标注类的用途更加清晰（层次化），在实际开发中推荐使用<code class="language-plaintext highlighter-rouge">@Repository</code>标注数据访问层（DAO层）、使用<code class="language-plaintext highlighter-rouge">@Service</code>标注业务逻辑层（Service层）以及使用<code class="language-plaintext highlighter-rouge">@Controller</code>标注控制器层（控制层）。</p>

<h3 id="configuration">Configuration</h3>

<p><code class="language-plaintext highlighter-rouge">@Configuration</code>注解用于标识一个类是Spring的配置类，它通常与<code class="language-plaintext highlighter-rouge">@Bean</code>注解一起使用，用于定义Bean的创建和配置。主要作用包括：</p>

<ol>
  <li><strong>定义Bean</strong>：在配置类中使用<code class="language-plaintext highlighter-rouge">@Bean</code>注解定义Bean的创建方法，Spring容器会根据这些方法创建相应的Bean实例。</li>
  <li><strong>替代XML配置</strong>：<code class="language-plaintext highlighter-rouge">@Configuration</code>注解可以替代传统的XML配置文件，通过Java类的方式来配置应用程序的Bean。</li>
  <li><strong>组件扫描</strong>：<code class="language-plaintext highlighter-rouge">@Configuration</code>注解通常与<code class="language-plaintext highlighter-rouge">@ComponentScan</code>注解一起使用，用于启用组件扫描，自动发现和注册Spring的Bean。</li>
  <li><strong>条件化配置</strong>：可以结合条件注解如<code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>等，根据条件来决定是否应用某个配置。</li>
  <li><strong>AOP支持</strong>：<code class="language-plaintext highlighter-rouge">@Configuration</code>类中的方法可以使用<code class="language-plaintext highlighter-rouge">@Bean</code>注解来声明切面等AOP相关的Bean。</li>
  <li><strong>配置属性绑定</strong>：可以使用<code class="language-plaintext highlighter-rouge">@Value</code>注解将配置文件中的属性值注入到<code class="language-plaintext highlighter-rouge">@Configuration</code>类中的Bean中。</li>
</ol>

<p>如果没有该注解，也可以正常使用，但它的缺陷是被调用的@Bean方法产生的实例在容器中不是唯一的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">);</span>
        
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">)</span>
    <span class="no">A</span> <span class="nf">getA</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getB</span><span class="o">()</span> <span class="o">==</span> <span class="n">getB</span><span class="o">());</span> <span class="c1">//结果是false，说明每调用一次getB()都会产生新的实例。加上@Configuration之后结果就是true了。</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="no">B</span> <span class="nf">getB</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{}</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">B</span><span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="prototype">Prototype</h3>

<p>对于Spring容器来说，把一个Bean标记为<code class="language-plaintext highlighter-rouge">@Component</code>后，它就会自动创建一个单例（Singleton），即容器初始化时创建Bean，容器关闭前销毁Bean。在容器运行期间，调用<code class="language-plaintext highlighter-rouge">getBean(Class)</code>获取到的Bean总是同一个实例。</p>

<p>还有一种Bean，每次调用<code class="language-plaintext highlighter-rouge">getBean(Class)</code>，容器都返回一个<strong>新的实例</strong>，这种Bean称为Prototype（原型），它的生命周期和Singleton不同。声明一个Prototype的Bean时，需要添加一个额外的<code class="language-plaintext highlighter-rouge">@Scope</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scope</span><span class="o">(</span><span class="nc">ConfigurableBeanFactory</span><span class="o">.</span><span class="na">SCOPE_PROTOTYPE</span><span class="o">)</span><span class="c1">//"prototype"</span>
</code></pre></div></div>

<p>即：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a1</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="no">A</span> <span class="n">a2</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a1</span><span class="o">==</span><span class="n">a2</span><span class="o">);</span><span class="c1">//false</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="nd">@Scope</span><span class="o">(</span><span class="nc">ConfigurableBeanFactory</span><span class="o">.</span><span class="na">SCOPE_PROTOTYPE</span><span class="o">)</span><span class="c1">//"prototype"</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>具体来说有如下几个作用域：</p>

<table>
  <thead>
    <tr>
      <th><strong>作用域名称</strong></th>
      <th><strong>描述</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>singleton</strong></td>
      <td>默认的作用域，使用singleton定义的Bean在Spring容器中只有一个Bean实例。</td>
    </tr>
    <tr>
      <td><strong>prototype</strong></td>
      <td>Spring容器每次获取prototype定义的Bean，容器都将创建一个新的Bean实例。</td>
    </tr>
    <tr>
      <td><strong>request</strong></td>
      <td>在一次HTTP请求中容器将返回一个Bean实例，不同的HTTP请求返回不同的Bean实例。仅在Web Spring应用程序上下文中使用。</td>
    </tr>
    <tr>
      <td><strong>session</strong></td>
      <td>在一个HTTP Session中，容器将返回同一个Bean实例。仅在Web Spring应用程序上下文中使用。</td>
    </tr>
    <tr>
      <td><strong>application</strong></td>
      <td>为每个ServletContext对象创建一个实例，即同一个应用共享一个Bean实例。仅在Web Spring应用程序上下文中使用。</td>
    </tr>
    <tr>
      <td><strong>websocket</strong></td>
      <td>为每个WebSocket对象创建一个Bean实例。仅在Web Spring应用程序上下文中使用。</td>
    </tr>
  </tbody>
</table>

<h3 id="注入list">注入List</h3>

<p>有些时候，会有一系列接口相同，不同实现类的Bean。例如，注册用户时，要对<code class="language-plaintext highlighter-rouge">email</code>、<code class="language-plaintext highlighter-rouge">password</code>和<code class="language-plaintext highlighter-rouge">name</code>这3个变量进行验证。为了便于扩展，先定义验证接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Validator</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后，分别使用3个<code class="language-plaintext highlighter-rouge">Validator</code>对用户参数进行验证：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">EmailValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">user</span><span class="o">.</span><span class="na">email</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">"^[a-z0-9]+@[a-z0-9]+\\.[a-z]{2,10}$"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"invalid email: "</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">email</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">PasswordValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">"^.{6,20}$"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"invalid password"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">NameValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"invalid name: "</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>最后，通过一个<code class="language-plaintext highlighter-rouge">Validators</code>作为入口进行验证：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">Validators</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Validator</span><span class="o">&gt;</span> <span class="n">validators</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">validator</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">validators</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">validator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Validators</span> <span class="n">validators</span><span class="o">=</span> <span class="o">(</span><span class="nc">Validators</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"validators"</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"123@qq.com"</span><span class="o">,</span> <span class="s">"123123"</span><span class="o">,</span> <span class="s">"45ddf"</span><span class="o">);</span>
        <span class="n">validators</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Validators</code>被注入了一个<code class="language-plaintext highlighter-rouge">List&lt;Validator&gt;</code>，Spring会自动把所有类型为<code class="language-plaintext highlighter-rouge">Validator</code>的Bean装配为一个<code class="language-plaintext highlighter-rouge">List</code>注入进来，这样一来，每新增一个<code class="language-plaintext highlighter-rouge">Validator</code>类型，就自动被Spring装配到<code class="language-plaintext highlighter-rouge">Validators</code>中了，非常方便。</p>

<p>因为Spring是通过扫描classpath获取到所有的Bean，而<code class="language-plaintext highlighter-rouge">List</code>是有序的，要指定<code class="language-plaintext highlighter-rouge">List</code>中Bean的顺序，可以加上<code class="language-plaintext highlighter-rouge">@Order</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">EmailValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{}</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">PasswordValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{}</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">NameValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{}</span>
</code></pre></div></div>

<h3 id="可选注入">可选注入</h3>

<p>默认情况下，当标记了一个<code class="language-plaintext highlighter-rouge">@Autowired</code>后，Spring如果没有找到对应类型的Bean，它会<strong>抛出<code class="language-plaintext highlighter-rouge">NoSuchBeanDefinitionException</code>异常</strong>。可以给<code class="language-plaintext highlighter-rouge">@Autowired</code>增加一个<code class="language-plaintext highlighter-rouge">required = false</code>的参数，表示如果找不到就忽略，不抛出异常。这种方式非常适合有定义就使用定义，没有就使用默认值的情况。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="创建第三方bean">创建第三方Bean</h3>

<p>如果想给<code class="language-plaintext highlighter-rouge">A</code>注入<code class="language-plaintext highlighter-rouge">HikariDataSource</code>，但是这个类位于<code class="language-plaintext highlighter-rouge">com.zaxxer.hikari</code>包中，并且<code class="language-plaintext highlighter-rouge">HikariDataSource</code>也不可能有<code class="language-plaintext highlighter-rouge">@Component</code>注解，如何告诉IoC容器创建并配置<code class="language-plaintext highlighter-rouge">HikariDataSource</code>？</p>

<p>当然是在<code class="language-plaintext highlighter-rouge">@Configuration</code>类中编写一个Java方法创建并返回它，并注意给方法标记一个<code class="language-plaintext highlighter-rouge">@Bean</code>注解，这个方法返回一个<code class="language-plaintext highlighter-rouge">HikariDataSource</code>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">jdbc</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"dataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">HikariDataSource</span> <span class="nf">getDataSource</span><span class="o">(){</span>
        <span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"jdbcUrl"</span><span class="o">,</span><span class="s">"jdbc:mysql://localhost:3306/studentdb?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&amp;useSSL=false"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"username"</span><span class="o">,</span><span class="s">"root"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"password"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"cachePrepStmts"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">HikariDataSource</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">jdbc</span><span class="o">(){</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">ResultSet</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">"select name from student"</span><span class="o">).</span><span class="na">executeQuery</span><span class="o">();</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">next</span><span class="o">()){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring对标记为<code class="language-plaintext highlighter-rouge">@Bean</code>的方法只调用一次，因此返回的Bean仍然是单例。</p>

<h3 id="初始化和销毁">初始化和销毁</h3>

<p>有些时候，一个Bean在注入必要的依赖后，需要进行初始化（监听消息等）。在容器关闭时，有时候还需要清理资源（关闭连接池等）。通常会定义一个<code class="language-plaintext highlighter-rouge">init()</code>方法进行初始化，定义一个<code class="language-plaintext highlighter-rouge">shutdown()</code>方法进行清理，需要引入JSR-250定义的Annotation。</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后在Bean的初始化和清理方法上标记<code class="language-plaintext highlighter-rouge">@PostConstruct</code>和<code class="language-plaintext highlighter-rouge">@PreDestroy</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Init"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PreDestroy</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Shutdown"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring容器会对上述Bean做如下初始化流程：</p>

<ul>
  <li>调用构造方法创建<code class="language-plaintext highlighter-rouge">A</code>实例；</li>
  <li>根据<code class="language-plaintext highlighter-rouge">@Autowired</code>进行注入；</li>
  <li>调用标记有<code class="language-plaintext highlighter-rouge">@PostConstruct</code>的<code class="language-plaintext highlighter-rouge">init()</code>方法进行初始化。</li>
</ul>

<p>而销毁时，容器会首先调用标记有<code class="language-plaintext highlighter-rouge">@PreDestroy</code>的<code class="language-plaintext highlighter-rouge">shutdown()</code>方法。</p>

<p>Spring只根据Annotation查找<strong>无参数</strong>方法，对方法名不作要求。</p>

<p>如果<code class="language-plaintext highlighter-rouge">shutdown()</code> 没有调用，则需要手动调用<code class="language-plaintext highlighter-rouge">applicationContext.close()</code>，而不是等待进程结束。</p>

<p>在Spring框架中，Bean的生命周期经历了多个阶段，包括实例化、属性赋值、初始化、使用和销毁等过程。以下是典型的Bean生命周期：</p>

<ol>
  <li>
    <p><strong>实例化（Instantiation）</strong>：在这个阶段，Spring容器根据Bean的定义创建Bean的实例。</p>
  </li>
  <li>
    <p><strong>属性赋值（Populate Properties）</strong>：在实例化之后，Spring容器会根据配置文件或注解对Bean的属性进行赋值，包括基本类型的注入、引用类型的注入等。</p>
  </li>
  <li>
    <p><strong>初始化（Initialization）</strong>：在属性赋值完成之后，Spring容器会调用Bean的初始化方法（如果有定义的话），可以通过<code class="language-plaintext highlighter-rouge">@PostConstruct</code>注解或实现<code class="language-plaintext highlighter-rouge">InitializingBean</code>接口来定义初始化方法。</p>
  </li>
  <li>
    <p><strong>使用（In Use）</strong>：在初始化完成之后，Bean就可以被应用程序使用了，它会被注入到其他Bean中，或者被直接使用。</p>
  </li>
  <li>
    <p><strong>销毁（Destruction）</strong>：在Bean不再需要的时候，Spring容器会调用Bean的销毁方法（如果有定义的话），可以通过<code class="language-plaintext highlighter-rouge">@PreDestroy</code>注解或实现<code class="language-plaintext highlighter-rouge">DisposableBean</code>接口来定义销毁方法。</p>
  </li>
</ol>

<h3 id="使用别名">使用别名</h3>

<p>默认情况下，对一种类型的Bean，容器只创建一个实例。但有些时候，需要对一种类型的Bean创建多个实例。例如，同时连接多个数据库，就必须创建多个<code class="language-plaintext highlighter-rouge">DataSource</code>实例。</p>

<p>如果在<code class="language-plaintext highlighter-rouge">@Configuration</code>类中创建了多个同类型的Bean，在Spring 5.0之前的版本中，Spring会报<code class="language-plaintext highlighter-rouge">NoUniqueBeanDefinitionException</code>异常，意思是出现了重复的Bean定义。从Spring 5.0开始，默认情况下，Spring允许存在多个同类型的Bean定义，并且不会抛出异常。相反，它会将这些Bean注册为一个集合类型的Bean。</p>

<p>要避免这个异常，可以指定不同的名称：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"b1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">b</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"b2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">b2</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"b1"</span><span class="o">)</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以用<code class="language-plaintext highlighter-rouge">@Bean("name")</code>指定别名，也可以用<code class="language-plaintext highlighter-rouge">@Bean</code>+<code class="language-plaintext highlighter-rouge">@Qualifier("name")</code>指定别名。</p>

<p>其实Bean的<code class="language-plaintext highlighter-rouge">name</code>默认就是方法名称。</p>

<h3 id="注入选择问题">注入选择问题</h3>

<p>存在多个同类型的Bean时，注入时又会报错，即不知道注入哪个，因此要通过<code class="language-plaintext highlighter-rouge">@Qualifier("b1")</code>指定注入的Bean名称。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"b1"</span><span class="o">)</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里也可以把两个注解换成 <code class="language-plaintext highlighter-rouge">@Resource(name = "b1")</code>。</p>

<p>还可以把待注入的<strong>变量名称</strong>改为Bean名称，这样也可以指定注入的Bean名称：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b1</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b1</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>也可以通过使用<code class="language-plaintext highlighter-rouge">@Primary</code>指定某个Bean，在注入时，如果没有指出Bean的名字，Spring会注入标记有<code class="language-plaintext highlighter-rouge">@Primary</code>的Bean。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"b1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">b</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"b2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">b2</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span><span class="c1">//默认注入b1</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>若使用Spring boot，还能根据配置属性的值来决定是否应用这个配置。即注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">"class"</span><span class="o">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"select"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"B"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">B</span><span class="err">｛｝</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Configuration</code>：注解表示这是一个配置类，它会被Spring容器扫描并加载。</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>：注解用于根据配置属性的值来决定是否应用这个配置。它有几个参数：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">prefix</code>：配置属性的前缀。在这个例子中，配置属性的前缀是<code class="language-plaintext highlighter-rouge">class</code>。</li>
      <li><code class="language-plaintext highlighter-rouge">name</code>：配置属性的名称。在这个例子中，配置属性的名称是<code class="language-plaintext highlighter-rouge">select</code>。</li>
      <li><code class="language-plaintext highlighter-rouge">havingValue</code>：期望的配置属性值。在这个例子中，期望的配置属性值是<code class="language-plaintext highlighter-rouge">B</code>。</li>
    </ul>
  </li>
</ul>

<p>如果满足了以上条件，即配置属性<code class="language-plaintext highlighter-rouge">class.select</code>的值为<code class="language-plaintext highlighter-rouge">B</code>，那么这个配置类中的配置将会生效。否则，这个配置类中的配置将会被忽略。</p>

<h3 id="使用factorybean">使用FactoryBean</h3>

<p>用工厂模式创建Bean需要实现<code class="language-plaintext highlighter-rouge">FactoryBean</code>接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">BFactoryBean</span> <span class="kd">implements</span> <span class="nc">FactoryBean</span><span class="o">&lt;</span><span class="no">B</span><span class="o">&gt;{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">getObject</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getObjectType</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">B</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当一个Bean实现了<code class="language-plaintext highlighter-rouge">FactoryBean</code>接口后，Spring会先实例化这个工厂，然后调用<code class="language-plaintext highlighter-rouge">getObject()</code>创建真正的Bean。<code class="language-plaintext highlighter-rouge">getObjectType()</code>可以指定创建的Bean的类型，因为指定类型不一定与实际类型一致，可以是接口或抽象类。</p>

<p>因此，如果定义了一个<code class="language-plaintext highlighter-rouge">FactoryBean</code>，要注意Spring创建的Bean实际上是这个<code class="language-plaintext highlighter-rouge">FactoryBean</code>的<code class="language-plaintext highlighter-rouge">getObject()</code>方法返回的Bean。为了和普通Bean区分，通常都以<code class="language-plaintext highlighter-rouge">XxxFactoryBean</code>命名。</p>

<p>由于可以用<code class="language-plaintext highlighter-rouge">@Bean</code>方法创建第三方Bean，本质上<code class="language-plaintext highlighter-rouge">@Bean</code>方法就是工厂方法，所以，<code class="language-plaintext highlighter-rouge">FactoryBean</code>已经用得越来越少了。</p>

<h3 id="使用resource">使用Resource</h3>

<p>在Java程序中，经常会读取配置文件、资源文件等。使用Spring容器时，也可以把“文件”注入进来，方便程序读取。</p>

<p>例如，AppService需要读取<code class="language-plaintext highlighter-rouge">logo.txt</code>这个文件，通常情况下，需要写很多繁琐的代码，主要是为了定位文件，打开InputStream。</p>

<p>Spring提供了一个<code class="language-plaintext highlighter-rouge">org.springframework.core.io.Resource</code>（注意不是<code class="language-plaintext highlighter-rouge">jarkata.annotation.Resource</code>或<code class="language-plaintext highlighter-rouge">javax.annotation.Resource</code>），它可以像<code class="language-plaintext highlighter-rouge">String</code>、<code class="language-plaintext highlighter-rouge">int</code>一样使用<code class="language-plaintext highlighter-rouge">@Value</code>注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"classpath:/application.xml"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Resource</span> <span class="n">resource</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printResource</span><span class="o">(){</span>
        <span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">resource</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">lines</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">"\n"</span><span class="o">)));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注入<code class="language-plaintext highlighter-rouge">Resource</code>最常用的方式是通过classpath，即类似<code class="language-plaintext highlighter-rouge">classpath:/application.xml</code>表示在classpath中搜索<code class="language-plaintext highlighter-rouge">application.xml</code>文件，然后，直接调用<code class="language-plaintext highlighter-rouge">Resource.getInputStream()</code>就可以获取到输入流，避免了自己搜索文件的代码。</p>

<p>也可以直接指定文件的路径，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Value</span><span class="o">(</span><span class="s">"file:D:/application.xml"</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="注入配置">注入配置</h3>

<p>在开发应用程序时，经常需要读取配置文件。最常用的配置方法是以<code class="language-plaintext highlighter-rouge">key=value</code>的形式写在<code class="language-plaintext highlighter-rouge">.properties</code>文件中。</p>

<p>例如，<code class="language-plaintext highlighter-rouge">MailService</code>根据配置的<code class="language-plaintext highlighter-rouge">app.zone=Asia/Shanghai</code>来决定使用哪个时区。要读取配置文件，可以使用上一节的<code class="language-plaintext highlighter-rouge">Resource</code>来读取位于classpath下的一个<code class="language-plaintext highlighter-rouge">app.properties</code>文件。但是，这样仍然比较繁琐。</p>

<p>Spring容器还提供了一个更简单的<code class="language-plaintext highlighter-rouge">@PropertySource</code>来自动读取配置文件。只需要在<code class="language-plaintext highlighter-rouge">@Configuration</code>配置类上再添加一个注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:app.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.zone:Z}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">zoneId</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">print</span><span class="o">();</span>

    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.zone:Z}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">zoneId</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">app.properties</code>：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">app.zone</span><span class="p">=</span><span class="s">Asia/Shanghai</span>
</code></pre></div></div>

<p>Spring容器看到<code class="language-plaintext highlighter-rouge">@PropertySource("app.properties")</code>注解后，自动读取这个配置文件，然后，使用<code class="language-plaintext highlighter-rouge">@Value</code>正常注入。</p>

<p>注入的字符串语法，它的格式如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">"${app.zone}"</code>表示读取key为<code class="language-plaintext highlighter-rouge">app.zone</code>的value，如果key不存在，启动将报错；</li>
  <li><code class="language-plaintext highlighter-rouge">"${app.zone:Z}"</code>表示读取key为<code class="language-plaintext highlighter-rouge">app.zone</code>的value，但如果key不存在，就使用默认值<code class="language-plaintext highlighter-rouge">Z</code>。</li>
</ul>

<p>这样一来，就可以根据<code class="language-plaintext highlighter-rouge">app.zone</code>的配置来创建<code class="language-plaintext highlighter-rouge">ZoneId</code>。</p>

<p>还可以把注入的注解写到方法参数中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.zone:Z}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">zoneId</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
    <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用<code class="language-plaintext highlighter-rouge">@PropertySource</code>读取配置文件，然后通过<code class="language-plaintext highlighter-rouge">@Value</code>以<code class="language-plaintext highlighter-rouge">${key:defaultValue}</code>的形式注入，可以极大地简化读取配置的麻烦。</p>

<p>另一种注入配置的方式是先通过一个简单的JavaBean持有所有的配置，例如，一个<code class="language-plaintext highlighter-rouge">SmtpConfig</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.zone:Z}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">zoneId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getZoneId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">zoneId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后，在需要读取的地方，使用<code class="language-plaintext highlighter-rouge">#{appConfig.zoneId}</code>注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"#{appConfig.zoneId}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">zoneId</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
    <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">#{}</code>这种注入语法，和<code class="language-plaintext highlighter-rouge">${key}</code>不同的是，<code class="language-plaintext highlighter-rouge">#{}</code>表示从JavaBean读取属性。<code class="language-plaintext highlighter-rouge">"#{appConfig.zoneId}"</code>的意思是，从名称为<code class="language-plaintext highlighter-rouge">appConfig</code>的Bean读取<code class="language-plaintext highlighter-rouge">zoneId</code>属性，即调用<code class="language-plaintext highlighter-rouge">getZoneId()</code>方法。</p>

<p>使用一个独立的JavaBean持有所有属性，然后在其他Bean中以<code class="language-plaintext highlighter-rouge">#{bean.property}</code>注入的好处是，多个Bean都可以引用同一个Bean的某个属性。如果<code class="language-plaintext highlighter-rouge">appConfig</code>决定从数据库中读取相关配置项，那么<code class="language-plaintext highlighter-rouge">createZoneId</code>注入的<code class="language-plaintext highlighter-rouge">@Value("#{appConfig.zoneId}")</code>仍然可以不修改正常运行。</p>

<h3 id="使用条件装配">使用条件装配</h3>

<p>开发应用程序时，会使用开发环境，例如，使用内存数据库以便快速启动。而运行在生产环境时，会使用生产环境，例如，使用MySQL数据库。如果应用程序可以根据自身的环境做一些适配，无疑会更加灵活。</p>

<p>Spring为应用程序准备了Profile这一概念，用来表示不同的环境。分别定义开发、测试和生产这3个环境：</p>

<ul>
  <li>native</li>
  <li>test</li>
  <li>production</li>
</ul>

<p>创建某个Bean时，Spring容器可以根据注解<code class="language-plaintext highlighter-rouge">@Profile</code>来决定是否创建。例如，以下配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nd">@Profile</span><span class="o">(</span><span class="s">"!test"</span><span class="o">)</span>
    <span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nd">@Profile</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
    <span class="nc">ZoneId</span> <span class="nf">createZoneIdForTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"America/New_York"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果当前的Profile设置为<code class="language-plaintext highlighter-rouge">test</code>，则Spring容器会调用<code class="language-plaintext highlighter-rouge">createZoneIdForTest()</code>创建<code class="language-plaintext highlighter-rouge">ZoneId</code>，否则，调用<code class="language-plaintext highlighter-rouge">createZoneId()</code>创建<code class="language-plaintext highlighter-rouge">ZoneId</code>。注意到<code class="language-plaintext highlighter-rouge">@Profile("!test")</code>表示非test环境。</p>

<p>在运行程序时，加上JVM参数<code class="language-plaintext highlighter-rouge">-Dspring.profiles.active=test</code>就可以指定以<code class="language-plaintext highlighter-rouge">test</code>环境启动。</p>

<p>实际上，Spring允许指定多个Profile，例如：</p>

<pre><code class="language-cmd">-Dspring.profiles.active=test,master
</code></pre>

<p>可以表示<code class="language-plaintext highlighter-rouge">test</code>环境，并使用<code class="language-plaintext highlighter-rouge">master</code>分支代码。要满足多个Profile条件，可以这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nd">@Profile</span><span class="o">({</span> <span class="s">"test"</span><span class="o">,</span> <span class="s">"master"</span> <span class="o">})</span> <span class="c1">// 满足test或master</span>
<span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>使用Conditional</strong></p>

<p>除了根据<code class="language-plaintext highlighter-rouge">@Profile</code>条件来决定是否创建某个Bean外，Spring还可以根据<code class="language-plaintext highlighter-rouge">@Conditional</code>决定是否创建某个Bean。添加如下注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">)</span>
<span class="nd">@Conditional</span><span class="o">(</span><span class="nc">MainCondition</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="no">A</span> <span class="nf">getA</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它的意思是，如果满足<code class="language-plaintext highlighter-rouge">MainCondition</code>的条件，才会创建<code class="language-plaintext highlighter-rouge">a1</code>这个Bean。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainCondition</span> <span class="kd">implements</span> <span class="nc">Condition</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">matches</span><span class="o">(</span><span class="nc">ConditionContext</span> <span class="n">context</span><span class="o">,</span> <span class="nc">AnnotatedTypeMetadata</span> <span class="n">metadata</span><span class="o">)</span> <span class="o">{</span>
    	<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里直接返回<code class="language-plaintext highlighter-rouge">false</code>，因此Bean<code class="language-plaintext highlighter-rouge">a1</code>始终不会创建。</p>

<p>Spring只提供了<code class="language-plaintext highlighter-rouge">@Conditional</code>注解，具体判断逻辑还需要我们自己实现。</p>

<p>Spring Boot提供了更多使用起来更简单的条件注解，例如，如果配置文件中存在<code class="language-plaintext highlighter-rouge">app.smtp=true</code>，则创建<code class="language-plaintext highlighter-rouge">a1</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">)</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"app.smtp"</span><span class="o">,</span> <span class="n">havingValue</span><span class="o">=</span><span class="s">"true"</span><span class="o">)</span>
<span class="no">A</span> <span class="nf">getA</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>是Spring Boot框架中的一个条件注解，用于根据属性的存在与否以及属性值来决定是否应该创建一个Bean。该注解有以下参数：</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">name</code>：要检查的属性名。指定要检查的应用程序属性的名称。如果未指定<code class="language-plaintext highlighter-rouge">prefix</code>，则将直接检查指定名称的属性。如果指定了<code class="language-plaintext highlighter-rouge">prefix</code>，则会在<code class="language-plaintext highlighter-rouge">prefix</code>后面加上<code class="language-plaintext highlighter-rouge">.</code>再加上<code class="language-plaintext highlighter-rouge">name</code>来构成完整的属性名。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">havingValue</code>：属性必须具有的值。指定属性必须具有的值才能满足条件。默认值为空字符串。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">matchIfMissing</code>：如果属性不存在时是否应该匹配。指定当属性不存在时是否应该认为条件匹配。默认值为<code class="language-plaintext highlighter-rouge">false</code>，即属性不存在时条件不匹配。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">prefix</code>：属性名的前缀。指定属性名的前缀，用于构成完整的属性名。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">value</code>：属性的值。与<code class="language-plaintext highlighter-rouge">havingValue</code>参数相同，用于指定属性必须具有的值。</p>
  </li>
</ol>

<p>通过使用这些参数，可以根据应用程序的配置属性来动态地确定是否创建某个Bean。根据属性名、属性值、属性是否存在以及是否匹配等条件，可以灵活地控制Bean的创建过程。</p>

<p>如果当前classpath中存在类<code class="language-plaintext highlighter-rouge">javax.mail.Transport</code>，则创建<code class="language-plaintext highlighter-rouge">a1</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">)</span>
<span class="nd">@ConditionalOnClass</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"javax.mail.Transport"</span><span class="o">)</span>
<span class="no">A</span> <span class="nf">getA</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用条件注解，能更灵活地装配Bean。</p>

<h2 id="aop">AOP</h2>

<p>AOP ( Aspect-Oriented Programming ）即面向切面编程，它与OOP (Object-Oriented Programming ， 面向对象编程）相辅相成，提供了与OOP 不同的抽象软件结构的视角。在OOP 中，以类作为程序的基本单元，而AOP 中的基本单元是Aspect（切面）。</p>

<p>在业务处理代码中通常有日志记录、性能统计、安全控制、事务处理、异常处理等操作。尽管使用OOP 可以通过封装或继承的方式达到代码的重用，但仍然有同样的代码分散在各个方法中。</p>

<p>因此， 采用OOP 处理日志记录等操作不仅<strong>增加</strong>了开发者的工作量，而且提高了升级维护的困难。为了解决此类问题， AOP 思想应运而生。</p>

<p>AOP 采取横向抽取机制，即将分散在各个方法中的重复代码<strong>提取</strong>出来，然后在程序<strong>编译或运行阶段</strong>将这些抽取出来的代码<strong>应用到</strong>需要执行的地方。这种横向抽取机制采用传统的OOP 是无法办到的，因为OOP 实现的是父子关系的纵向重用。但是<strong>AOP 不是OOP 的替代品，而是OOP 的补充</strong>，它们相辅相成。</p>

<hr />

<p><strong>AOP的术语</strong></p>

<p>在SpringAOP框架中涉及以下常用术语。</p>

<p>切面（Aspect）：是指封装横切到<strong>系统功能</strong>（例如事务处理）的类。(通知方法的类)</p>

<p>连接点（Ooinpoint）：是指程序运行中的一些<strong>时间点</strong>，例如方法的调用或异常的抛出。(方法调用,或异常)，即定义在应用程序流程的何处插入切面的执行；</p>

<p>切入点（CPointcut）：是指<strong>需要处理的连接点</strong>。在SpringAOP中，<strong>所有的方法执行</strong>都是连接点，而切入点是一个描述信息，它修饰的是连接点，通过切入点<strong>确定</strong>哪些连接点需要被<strong>处理</strong>。(被处理的类的方法)</p>

<p>通知（Advice）：是由切面添加到特定的连接点（满足切入点规则）的一段代码，即在定义好的切入点处所要<strong>执行</strong>的<strong>程序代码</strong>，可以将其理解为切面开启后切面的方法，因此通知是切面的具体实现。(增强处理的代码)</p>

<p>引入（Introduction）：允许在现有的<strong>实现类</strong>中<strong>添加</strong>自定义的方法和属性。(增强类的方法与属性)</p>

<p>目标对象（TargetObject）：是指所有被通知的对象，即应用切面的原始对象或原始类。如果AOP框架使用运行时代理的方式（动态的AOP）来实现切面，那么通知对象总是一个<strong>代理对象</strong>。(要代理的对象Bean)</p>

<p>代理（Proxy）：是通知应用到目标对象<strong>之后</strong>被<strong>动态创建的对象</strong>。(被代理后动态生成的对象Bean)</p>

<p>织入（Weaving）：是<strong>将切面代码插入到目标对象</strong>上，<strong>从而生成代理对象的过程</strong>。根据不同的实现技术，AOP织入有3种方式：</p>
<ul>
  <li>编译期织入，需要有特殊的Java编译器；</li>
  <li>类装载期织入，需要有特殊的类装载器；</li>
  <li>动态代理织入，在运行期为目标类添加通知生成子类的方式。</li>
</ul>

<p>SpringAOP框架默认采用<strong>动态代理</strong>织入，而AspectJ（基于Java语言的AOP框架）采用编译期织入和类装载期织入。由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过<a href="https://github.com/cglib/cglib">CGLIB</a>或者<a href="https://www.javassist.org/">Javassist</a>这些第三方库实现。(代理对象生成的过程)</p>

<p>AOP技术看上去比较神秘，但实际上，它本质就是一个动态代理，把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。</p>

<p>需要特别指出的是，AOP对于解决特定问题，例如事务管理非常有用，这是因为分散在各处的事务代码几乎是完全相同的，并且它们需要的参数（JDBC的Connection）也是固定的。另一些特定问题，如日志，就不那么容易实现，因为日志虽然简单，但打印日志的时候，经常需要捕获局部变量，如果使用AOP实现日志，只能输出固定格式的日志，因此，使用AOP时，必须适合特定的场景。</p>

<p>使用代理模式的简单示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Test2</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="nc">AProxy</span><span class="o">();</span>
        <span class="n">a</span><span class="o">.</span><span class="na">func1</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">func1</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"func1"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">func2</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"func2"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">func3</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"func3"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">AProxy</span> <span class="kd">extends</span> <span class="no">A</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">func1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">func1</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">func2</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">func2</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">func3</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">func3</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过创建一个名为<code class="language-plaintext highlighter-rouge">AProxy</code>的子类来实现对<code class="language-plaintext highlighter-rouge">A</code>类的方法进行增强，这可以被认为是一种简单的AOP实现方式。在<code class="language-plaintext highlighter-rouge">AProxy</code>中，重写了<code class="language-plaintext highlighter-rouge">A</code>类的各个方法，并在方法的前后插入了额外的逻辑。</p>

<p>虽然这种方式实现了对<code class="language-plaintext highlighter-rouge">A</code>类方法的增强，但它并不是典型的AOP实现方式。在典型的AOP框架中，切面逻辑是通过配置或注解来定义的，而不是通过创建子类来重写方法。AOP框架通常会使用动态代理或字节码生成等技术来实现切面逻辑的动态织入，而不是在代码中显式地创建代理类。</p>

<hr />

<h3 id="对类进行增强">对类进行增强</h3>

<h4 id="基于xml实现">基于XML实现</h4>

<p>首先添加依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-aop<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.aspectj<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>aspectjweaver<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.9.7<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>或：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-aspects<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>要通过XML配置AOP，需要使用以下几个标签：</p>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code>：这个标签用于配置AOP的相关信息，包括切面、通知等。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>：这个标签用于定义一个切面（Aspect），其中<code class="language-plaintext highlighter-rouge">ref</code>属性指定了切面的实例引用，即切面对象的名称或引用。</p>

<p>在Spring AOP中，切面（Aspect）是一个普通的Java类，它通常包含通知（Advice）和切点（Pointcut）的定义。切面类并不需要实现特定的接口或继承特定的类，只需要符合Spring AOP的约定即可。通常情况下，一个切面类会包含以下内容：</p>

<ul>
  <li>通知（Advice）：定义了在连接点执行的具体操作，比如前置通知、后置通知、环绕通知等。</li>
  <li>切点（Pointcut）：定义了在目标对象的哪些方法上执行通知。</li>
  <li>引入（Introduction）：引入新的接口或方法到目标对象中。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:declare-parents&gt;</code>：这个标签用于声明引入（Introduction）的相关信息，即在目标对象中引入新的接口或实现类。具有如下属性：</p>

<table>
  <thead>
    <tr>
      <th><strong>属性</strong></th>
      <th><strong>解释</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">types-matching</code></td>
      <td>AspectJ类型表达式，所限制的类可加”+*..”号</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">implement-interfac</code></td>
      <td>将引入的接口的标准名称</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">default-impl</code></td>
      <td>将引入接口的实现类的完全限定名称</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delegate-ref</code></td>
      <td>将引入接口的实现类的Bean名称(实例化的)</td>
    </tr>
  </tbody>
</table>

<p><strong>目标</strong>是<code class="language-plaintext highlighter-rouge">types-matching</code>的类，spring让它实现<code class="language-plaintext highlighter-rouge">implement-interface</code>所指向的<strong>接口</strong>，而具体实现则通过<code class="language-plaintext highlighter-rouge">default-impl</code>或<code class="language-plaintext highlighter-rouge">delegate-ref</code>属性来赋予。让 <code class="language-plaintext highlighter-rouge">types-matching</code> 的类添加了<strong>接口</strong>并且指定了<strong>实现</strong>。</p>

<p>对类进行增强实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">a</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="no">I</span> <span class="n">i</span><span class="o">=(</span><span class="no">I</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
        <span class="n">i</span><span class="o">.</span><span class="na">test</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"飞行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Aspect</span><span class="o">{}</span>
</code></pre></div></div>

<p>XML：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">/&gt;</span><span class="c">&lt;!--目标类--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span><span class="nt">/&gt;</span><span class="c">&lt;!--增强类--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"aspect"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.Aspect"</span><span class="nt">/&gt;</span><span class="c">&lt;!--切面类--&gt;</span>
<span class="nt">&lt;aop:config&gt;</span>
    <span class="nt">&lt;aop:aspect</span> <span class="na">ref=</span><span class="s">"aspect"</span><span class="nt">&gt;</span><span class="c">&lt;!--指向切面类，这里Aspect是空的--&gt;</span>
        <span class="nt">&lt;aop:declare-parents</span> <span class="na">types-matching=</span><span class="s">"com.aotmd.test.A"</span> <span class="na">implement-interface=</span><span class="s">"com.aotmd.test.I"</span> <span class="na">default-impl=</span><span class="s">"com.aotmd.test.B"</span><span class="nt">/&gt;</span>
        <span class="c">&lt;!--两种方法，选一个即可：--&gt;</span>
        <span class="nt">&lt;aop:declare-parents</span> <span class="na">types-matching=</span><span class="s">"com.aotmd.test.A"</span> <span class="na">implement-interface=</span><span class="s">"com.aotmd.test.I"</span> <span class="na">delegate-ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/aop:aspect&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>飞行
com.aotmd.test.A$$EnhancerBySpringCGLIB$$712bcb1a
com.aotmd.test.B
</code></pre></div></div>

<p>在这个示例中，定义了三个bean：<code class="language-plaintext highlighter-rouge">a</code>、<code class="language-plaintext highlighter-rouge">b</code>和<code class="language-plaintext highlighter-rouge">aspect</code>。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">a</code>是目标类（Target Class），它是<code class="language-plaintext highlighter-rouge">com.aotmd.test.A</code>类的实例。</li>
  <li><code class="language-plaintext highlighter-rouge">b</code>是增强类（Advice Class），它是<code class="language-plaintext highlighter-rouge">com.aotmd.test.B</code>类的实例。</li>
  <li><code class="language-plaintext highlighter-rouge">aspect</code>是切面类（Aspect Class），它是<code class="language-plaintext highlighter-rouge">com.aotmd.test.Aspect</code>类的实例。</li>
</ul>

<p>然后，通过<code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code>配置元素来定义AOP配置。在<code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>元素中，通过<code class="language-plaintext highlighter-rouge">ref="aspect"</code>将<code class="language-plaintext highlighter-rouge">aspect</code>切面类引入为切面的实例。</p>

<p>在<code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>元素中，使用了<code class="language-plaintext highlighter-rouge">&lt;aop:declare-parents&gt;</code>元素来声明引入（Introduction）操作。通过<code class="language-plaintext highlighter-rouge">types-matching</code>属性指定了<code class="language-plaintext highlighter-rouge">com.aotmd.test.A</code>类型的类，表示要对<code class="language-plaintext highlighter-rouge">A</code>类进行引入操作。使用<code class="language-plaintext highlighter-rouge">implement-interface</code>属性指定了要引入的接口<code class="language-plaintext highlighter-rouge">com.aotmd.test.I</code>，并使用<code class="language-plaintext highlighter-rouge">default-impl</code>属性指定了接口的默认实现类<code class="language-plaintext highlighter-rouge">com.aotmd.test.B</code>。</p>

<p>这样，通过AOP的引入操作，<code class="language-plaintext highlighter-rouge">A</code>类将会实现<code class="language-plaintext highlighter-rouge">I</code>接口，并使用<code class="language-plaintext highlighter-rouge">B</code>类作为接口的默认实现。这样，<code class="language-plaintext highlighter-rouge">A</code>类就拥有了<code class="language-plaintext highlighter-rouge">I</code>接口的方法，并且默认实现是<code class="language-plaintext highlighter-rouge">B</code>类的方法。</p>

<p>这样配置之后，<strong>所有的<code class="language-plaintext highlighter-rouge">A</code>对象</strong>都会<strong>具有<code class="language-plaintext highlighter-rouge">I</code>接口的功能</strong>，并默认使用<code class="language-plaintext highlighter-rouge">B</code>类来实现这个功能。</p>

<p>然后在<code class="language-plaintext highlighter-rouge">Test</code>类的<code class="language-plaintext highlighter-rouge">main</code>方法中，通过<code class="language-plaintext highlighter-rouge">ApplicationContext</code>从XML配置文件中加载了Spring容器，并从容器中获取了<code class="language-plaintext highlighter-rouge">A</code>类的实例<code class="language-plaintext highlighter-rouge">a</code>。然后调用了<code class="language-plaintext highlighter-rouge">a</code>的<code class="language-plaintext highlighter-rouge">print</code>方法，并打印了<code class="language-plaintext highlighter-rouge">a</code>的类名。接着，将<code class="language-plaintext highlighter-rouge">a</code>强制类型转换为<code class="language-plaintext highlighter-rouge">I</code>接口类型，并调用了<code class="language-plaintext highlighter-rouge">test</code>方法。</p>

<p>根据AOP配置，<code class="language-plaintext highlighter-rouge">a</code>的实例<code class="language-plaintext highlighter-rouge">A</code>被引入了<code class="language-plaintext highlighter-rouge">I</code>接口，并且默认实现为<code class="language-plaintext highlighter-rouge">B</code>类。因此，将<code class="language-plaintext highlighter-rouge">a</code>强制类型转换为<code class="language-plaintext highlighter-rouge">I</code>接口并调用<code class="language-plaintext highlighter-rouge">test</code>方法时，实际上会调用<code class="language-plaintext highlighter-rouge">B</code>类的<code class="language-plaintext highlighter-rouge">test</code>方法。</p>

<p>从spring容器中拿出来的<code class="language-plaintext highlighter-rouge">a</code>对象可以被强转换成<code class="language-plaintext highlighter-rouge">I</code>类型的对象。如果调用<code class="language-plaintext highlighter-rouge">I</code>的方法必须要强转，因为这些都是spring背后做了很多事情。</p>

<hr />

<h4 id="基于注解">基于注解</h4>

<p>对类进行增强实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*@EnableAspectJAutoProxy:支持处理标有 AspectJ @Aspect 注解的组件，
类似于 Spring 的 XML 元素中的 &lt;aop:aspectj-autoproxy&gt; 功能。
用于 @Configuration 类*/</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">a</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="no">I</span> <span class="n">i</span><span class="o">=(</span><span class="no">I</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
        <span class="n">i</span><span class="o">.</span><span class="na">test</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"飞行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*这里重名了，因此要完全名*/</span>
<span class="nd">@org</span><span class="o">.</span><span class="na">aspectj</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">Aspect</span><span class="o">{</span>
    <span class="nd">@DeclareParents</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span><span class="s">"com.aotmd.test.A"</span><span class="o">,</span><span class="n">defaultImpl</span> <span class="o">=</span> <span class="no">B</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">I</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>飞行
com.aotmd.test.A$$EnhancerBySpringCGLIB$$5fdfd7a5
com.aotmd.test.B
com.aotmd.test.B@2fd953a6
</code></pre></div></div>

<p>这里使用了<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>注解来启用对标记有AspectJ <code class="language-plaintext highlighter-rouge">@Aspect</code>注解的组件的支持，类似于在Spring XML配置中使用<code class="language-plaintext highlighter-rouge">&lt;aop:aspectj-autoproxy&gt;</code>元素的功能。这个注解通常用于<code class="language-plaintext highlighter-rouge">@Configuration</code>类中。通过这个注解，Spring将会自动代理被<code class="language-plaintext highlighter-rouge">@Aspect</code>注解标记的类，使得切面逻辑能够被织入到目标类中。</p>

<p><code class="language-plaintext highlighter-rouge">@Aspect</code>: 这个注解用于标记一个类为切面（Aspect），其中定义了切面的通知（advice）和切点（pointcut）。在上面的代码中，<code class="language-plaintext highlighter-rouge">Aspect</code>类被标记为切面，用于定义引入操作。</p>

<p><code class="language-plaintext highlighter-rouge">@DeclareParents</code>: 这个注解用于在切面中声明引入操作，将新的接口引入到目标类中。在上面的代码中，<code class="language-plaintext highlighter-rouge">Aspect</code>类使用<code class="language-plaintext highlighter-rouge">@DeclareParents</code>注解来向<code class="language-plaintext highlighter-rouge">A</code>类引入<code class="language-plaintext highlighter-rouge">I</code>接口，并指定<code class="language-plaintext highlighter-rouge">B</code>类作为默认实现类。</p>

<p><code class="language-plaintext highlighter-rouge">@DeclareParents</code>的属性说明:</p>

<table>
  <thead>
    <tr>
      <th><strong>属性</strong></th>
      <th><strong>解释</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">value</code></td>
      <td>AspectJ类型表达式，所限制的类可加<code class="language-plaintext highlighter-rouge">+*..</code>这几个符号</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">default-impl</code></td>
      <td>将引入接口的实现类的完全限定名称的class实例</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">@DeclareParents</code>用在切面类(<code class="language-plaintext highlighter-rouge">@Aspect</code>)中的需要引入的接口实例上。</p>

<p>注意:切面类(<code class="language-plaintext highlighter-rouge">@Aspect</code>)需要<code class="language-plaintext highlighter-rouge">@Component</code>成一个Bean,才能在内部使用<code class="language-plaintext highlighter-rouge">@DeclareParents</code>。</p>

<h3 id="动态代理类型">动态代理类型</h3>

<p>在Java中有多种动态代理技术，例如JDK、CGLIB、Javassist、ASM，其中最常用的动态代理技术是JDK和CGLIB。目前，在SpringAOP中常用JDK和CGLIB两种动态代理技术。</p>

<h4 id="jdk动态代理">JDK动态代理</h4>

<p>JDK动态代理是<code class="language-plaintext highlighter-rouge">java.lang.reflect.*</code>包提供的方式，它<strong>必须借助</strong>一个<strong>接口</strong>才能产生代理对象。因此，对于使用业务接口的类，Spring默认使用JDK动态代理实现AOP。</p>

<p>JDK中所要进行动态代理的类必须要实现一个接口，也就是说只能对该类所实现接口中定义的方法进行代理，这在实际编程中具有一定的局限性，而且使用反射的效率也并不是很高。</p>

<p>要生成某一个对象的代理对象，这个代理对象通常也要编写一个类来生成，所以首先要编写用于生成代理对象的类。</p>

<p>java在JDK1.5之后提供了一个<code class="language-plaintext highlighter-rouge">java.lang.reflect.Proxy</code>类，通过<code class="language-plaintext highlighter-rouge">Proxy</code>类提供的一个<code class="language-plaintext highlighter-rouge">newProxyInstance</code>方法用来创建一个对象的代理对象，只需传入目标接口的类加载器、目标接口以及<code class="language-plaintext highlighter-rouge">InvocationHandler</code>回调接口，便可为<strong>目标接口</strong>生成代理类及代理对象，而且生成的代理类是其接口的实现类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="nc">ClassLoader</span> <span class="n">loader</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">,</span> <span class="nc">InvocationHandler</span> <span class="n">h</span><span class="o">);</span>
</code></pre></div></div>

<p>通过<code class="language-plaintext highlighter-rouge">Proxy.newProxyInstance()</code>创建<code class="language-plaintext highlighter-rouge">interface</code>实例，需要3个参数：</p>

<ol>
  <li>使用的<code class="language-plaintext highlighter-rouge">ClassLoader</code>，通常就是接口的<code class="language-plaintext highlighter-rouge">ClassLoader</code>；</li>
  <li>需要实现的接口数组，<strong>至少需要传入一个接口进去</strong>；</li>
  <li>用来处理接口方法调用的<code class="language-plaintext highlighter-rouge">InvocationHandler</code>实例。</li>
</ol>

<p>返回值为接口实现类的实例。</p>

<p><code class="language-plaintext highlighter-rouge">InvocationHandler</code>回调接口有一个方法，对于代理的逻辑方法，<strong>所有动态代理类的方法调用都会交给该回调接口方法处理</strong>，因此不要使用<code class="language-plaintext highlighter-rouge">method.invoke(proxy,args);</code>代码，这会导致无限递归：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">Throwable</span><span class="o">;</span>
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">proxy</code>：把代理对象自己传递进来。</li>
  <li><code class="language-plaintext highlighter-rouge">method</code>：把代理对象当前调用的方法传递进来可以使用这个参数来获取方法的信息，比如方法名、参数类型等。</li>
  <li><code class="language-plaintext highlighter-rouge">args</code>：方法的参数数组。这个参数包含了方法调用时传入的参数值。</li>
  <li><code class="language-plaintext highlighter-rouge">返回值</code>：返回函数执行的结果，取决于你想返回什么。</li>
</ul>

<p>通过一般类实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">JDKProxy</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JDKProxy</span><span class="o">&lt;&gt;();</span><span class="c1">//创建生成代理对象的工厂类，同时它也负责InvocationHandler的执行逻辑。</span>
        <span class="no">T</span> <span class="n">t</span><span class="o">=</span><span class="k">new</span> <span class="nc">TDemo</span><span class="o">();</span><span class="c1">//创建目标对象</span>
        <span class="cm">/*获取增强后的目标对象*/</span>
        <span class="no">T</span> <span class="n">t2</span><span class="o">=</span> <span class="n">proxy</span><span class="o">.</span><span class="na">createProxy</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span><span class="c1">//任何调用都会传入invoke()回调方法,具体执行逻辑由invoke()决定。</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t2</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">T</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">modify</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">();</span>
<span class="o">}</span>

<span class="cm">/**
 * 目标对象
 */</span>
<span class="kd">class</span> <span class="nc">TDemo</span> <span class="kd">implements</span> <span class="no">T</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete2</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑2执行"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="cm">/**
 * 切面类，可以定义多个通知，即增强处理的方法
 */</span>
<span class="kd">class</span> <span class="nc">AspectDemo</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">check</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟权限控制"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">except</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟异常处理"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟日志记录"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"性能监测"</span><span class="o">);}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">JDKProxy</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">InvocationHandler</span> <span class="o">{</span>
    <span class="cm">/**目标类实例*/</span>
    <span class="kd">private</span> <span class="no">T</span> <span class="n">t</span><span class="o">;</span>
    <span class="nc">AspectDemo</span> <span class="n">asp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AspectDemo</span><span class="o">();</span><span class="c1">//创建一个切面</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">createProxy</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">t</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
        <span class="nc">ClassLoader</span> <span class="n">cld</span><span class="o">=</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">();</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">=</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">();</span>
        <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">cld</span><span class="o">,</span><span class="n">interfaces</span><span class="o">,</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">check</span><span class="o">();</span><span class="c1">//前增强</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">except</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转发至代理对象方法:"</span><span class="o">+</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">t</span><span class="o">,</span><span class="n">args</span><span class="o">);</span><span class="c1">//在目标类实例t上调用方法并传入参数</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">log</span><span class="o">();</span><span class="c1">//后增强</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>模拟权限控制
模拟异常处理
转发至代理对象方法:delete
删除逻辑执行
模拟日志记录
性能监测
com.aotmd.test.TDemo
com.aotmd.test.$Proxy0
</code></pre></div></div>

<p>使用匿名类，则<code class="language-plaintext highlighter-rouge">JDKProxy</code>类只负责创建代理实例功能：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">JDKProxy</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">createProxy</span><span class="o">(</span><span class="no">T</span> <span class="n">target</span><span class="o">){</span>
        <span class="nc">ClassLoader</span> <span class="n">cld</span><span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">();</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">();</span>
        <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">cld</span><span class="o">,</span> <span class="n">interfaces</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InvocationHandler</span><span class="o">()</span> <span class="o">{</span>
            <span class="cm">/**切面类，用来增强*/</span>
            <span class="kd">final</span> <span class="nc">AspectDemo</span> <span class="n">asp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AspectDemo</span><span class="o">();</span>
            <span class="cm">/**目标类实例*/</span>
            <span class="kd">private</span> <span class="kd">final</span> <span class="no">T</span> <span class="n">t</span><span class="o">=</span><span class="n">target</span><span class="o">;</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">check</span><span class="o">();</span><span class="c1">//前增强</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">except</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转发至代理对象方法:"</span><span class="o">+</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
                <span class="c1">//在目标类实例t上调用方法并传入参数</span>
                <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">t</span><span class="o">,</span><span class="n">args</span><span class="o">);</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">log</span><span class="o">();</span><span class="c1">//后增强</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
                <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="cglib-动态代理">CGLIB 动态代理</h4>

<p>JDK 动态代理必须提供接口才能使用，对于没有提供接口的类，只能采用CGLIB 动态代理。CGLIB (Code Generation Library ） 是一个高性能开源的代码生成包，采用非常底层的字节码技术，<strong>对指定的目标类生成一个子类，并对子类进行增强</strong>。在Spring Core 包中己经集成了CGLIB 所需要的JAR 包，因此不需要另外导入JAR 包。</p>

<p>CGLIB代理的类，<strong>无需</strong>强制实现接口，其生成的代理类是被代理类的子类，并且重写的被代理类的方法。</p>

<p>要使用CGLIB创建代理实例，需要用到<code class="language-plaintext highlighter-rouge">org.springframework.cglib.proxy.Enhancer</code>类，首先实例化<code class="language-plaintext highlighter-rouge">Enhancer</code>类，然后通过<code class="language-plaintext highlighter-rouge">setSuperclass</code>设置需要增强的对象的class实例，最后通过<code class="language-plaintext highlighter-rouge">setCallback</code>设置<code class="language-plaintext highlighter-rouge">MethodInterceptor</code>回调接口，再通过<code class="language-plaintext highlighter-rouge">create</code>创建代理对象。</p>

<p><code class="language-plaintext highlighter-rouge">MethodInterceptor</code>回调接口有一个方法<code class="language-plaintext highlighter-rouge">intercept</code>，对于代理的逻辑方法，<strong>所有动态代理类的方法调用都会交给该回调接口方法处理</strong>，因此还是不要使用<code class="language-plaintext highlighter-rouge">method.invoke(o,objects);</code>代码，这会导致无限递归：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">objects</span><span class="o">,</span> <span class="nc">MethodProxy</span> <span class="n">methodProxy</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{}</span>
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">o</code>：是CGLIB 根据指定父类生成的代理对象的实例。</li>
  <li><code class="language-plaintext highlighter-rouge">method</code>：把代理对象当前要调用的方法传递进来，可以使用这个参数来获取方法的信息，比如方法名、参数类型等。</li>
  <li><code class="language-plaintext highlighter-rouge">objects</code>：把方法参数通过数组传递进来。</li>
  <li><code class="language-plaintext highlighter-rouge">methodProxy</code>：MethodProxy对象，可以用于调用<strong>原始方法</strong>（即目标的方法）。在intercept方法中，如果你需要调用原始方法，可以使用这个proxy对象。</li>
  <li><code class="language-plaintext highlighter-rouge">返回值</code>：返回函数执行的结果，取决于你想返回什么。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">MethodProxy</code>是CGLIB库中的一个类，用于代理方法的调用。<code class="language-plaintext highlighter-rouge">MethodProxy</code>类提供了一些常用的方法，例如：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">invokeSuper(Object obj, Object[] args)</code>: 调用被代理方法的实现</li>
  <li><code class="language-plaintext highlighter-rouge">getSignature()</code>: 获取被代理方法的签名</li>
  <li><code class="language-plaintext highlighter-rouge">getSuperIndex()</code>: 获取被代理方法在父类中的索引</li>
  <li><code class="language-plaintext highlighter-rouge">getSuperName()</code>: 获取被代理方法的名称</li>
  <li><code class="language-plaintext highlighter-rouge">getSuperDescriptor()</code>: 获取被代理方法的描述符</li>
  <li><code class="language-plaintext highlighter-rouge">getSuperMethod()</code>: 获取被代理方法的<code class="language-plaintext highlighter-rouge">java.lang.reflect.Method</code>对象</li>
</ul>

<p>通过一般类实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">CGLIBProxy</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CGLIBProxy</span><span class="o">();</span><span class="c1">//创建生成代理对象的工厂类，同时它也负责MethodInterceptor的执行逻辑。</span>
        <span class="nc">TDemo</span> <span class="n">t</span><span class="o">=</span><span class="k">new</span> <span class="nc">TDemo</span><span class="o">();</span><span class="c1">//创建目标对象</span>
        <span class="cm">/*获取增强后的目标对象*/</span>
        <span class="nc">TDemo</span> <span class="n">t2</span><span class="o">=</span> <span class="o">(</span><span class="nc">TDemo</span><span class="o">)</span> <span class="n">proxy</span><span class="o">.</span><span class="na">createProxy</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span><span class="c1">//任何调用都会传入intercept()回调方法,具体执行逻辑由intercept()决定。</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t2</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/**
 * 目标对象
 */</span>
<span class="kd">class</span> <span class="nc">TDemo</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete2</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑2执行"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="cm">/**
 * 切面类，可以定义多个通知，即增强处理的方法
 */</span>
<span class="kd">class</span> <span class="nc">AspectDemo</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">check</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟权限控制"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">except</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟异常处理"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟日志记录"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"性能监测"</span><span class="o">);}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CGLIBProxy</span> <span class="kd">implements</span> <span class="nc">MethodInterceptor</span><span class="o">{</span>
    <span class="nc">AspectDemo</span> <span class="n">asp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AspectDemo</span><span class="o">();</span><span class="c1">//创建一个切面</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">createProxy</span><span class="o">(</span><span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Enhancer</span> <span class="n">enhancer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Enhancer</span><span class="o">();</span>
        <span class="n">enhancer</span><span class="o">.</span><span class="na">setSuperclass</span><span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span><span class="c1">//确定需要增强的类</span>
        <span class="n">enhancer</span><span class="o">.</span><span class="na">setCallback</span><span class="o">(</span><span class="k">this</span><span class="o">);</span><span class="c1">//确定回调对象</span>
        <span class="k">return</span> <span class="n">enhancer</span><span class="o">.</span><span class="na">create</span><span class="o">();</span><span class="c1">//创建代理对象</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">objects</span><span class="o">,</span> <span class="nc">MethodProxy</span> <span class="n">methodProxy</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">check</span><span class="o">();</span><span class="c1">//前增强</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">except</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转发至代理对象方法:"</span><span class="o">+</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">methodProxy</span><span class="o">.</span><span class="na">invokeSuper</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">objects</span><span class="o">);</span><span class="c1">//转发调用目标类对应方法</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">log</span><span class="o">();</span><span class="c1">//后增强</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>模拟权限控制
模拟异常处理
转发至代理对象方法:delete
删除逻辑执行
模拟日志记录
性能监测
com.aotmd.test.TDemo
com.aotmd.test.TDemo$$EnhancerByCGLIB$$a9a7303e
</code></pre></div></div>

<p>使用匿名类，则<code class="language-plaintext highlighter-rouge">CGLIBProxy</code>类只负责创建代理实例功能：：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CGLIBProxy</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">createProxy</span><span class="o">(</span><span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Enhancer</span> <span class="n">enhancer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Enhancer</span><span class="o">();</span>
        <span class="n">enhancer</span><span class="o">.</span><span class="na">setSuperclass</span><span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span><span class="c1">//确定需要增强的类</span>
        <span class="n">enhancer</span><span class="o">.</span><span class="na">setCallback</span><span class="o">(</span><span class="k">new</span> <span class="nc">MethodInterceptor</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">final</span> <span class="nc">AspectDemo</span> <span class="n">asp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AspectDemo</span><span class="o">();</span><span class="c1">//创建一个切面</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">objects</span><span class="o">,</span> <span class="nc">MethodProxy</span> <span class="n">methodProxy</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">check</span><span class="o">();</span><span class="c1">//前增强</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">except</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转发至代理对象方法:"</span><span class="o">+</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
                <span class="nc">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">methodProxy</span><span class="o">.</span><span class="na">invokeSuper</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">objects</span><span class="o">);</span><span class="c1">//转发调用目标类对应方法</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">log</span><span class="o">();</span><span class="c1">//后增强</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
                <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span><span class="c1">//确定回调对象</span>
        <span class="k">return</span> <span class="n">enhancer</span><span class="o">.</span><span class="na">create</span><span class="o">();</span><span class="c1">//创建代理对象</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="使用动态代理">使用动态代理</h3>

<p>在Spring中<strong>默认</strong>使用JDK动态代理实现AOP编程。使用<code class="language-plaintext highlighter-rouge">org.spring.framework.aop.framework.ProxyFactoryBean</code>创建代理是SpringAOP实现的最基本方式。</p>

<p>根据Spring中通知在目标类方法中的<strong>连接点</strong>位置，通知可以分为6种类型。</p>

<p>环绕通知（<code class="language-plaintext highlighter-rouge">org.aopalliance.intercept.Methodlnterceptor</code>）是在目标方法<strong>执行前</strong>和<strong>执行后</strong>实施增强，可应用于日志记录、事务处理等功能。它的方法签名为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">MethodInvocation</span> <span class="n">invocation</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span><span class="o">;</span>
</code></pre></div></div>

<p>其中<code class="language-plaintext highlighter-rouge">MethodInvocation</code>接口具有以下常用方法：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Object[] getArguments()</code>: 获取方法调用的参数数组。</li>
  <li><code class="language-plaintext highlighter-rouge">Method getMethod()</code>: 获取被调用的方法对象。</li>
  <li><code class="language-plaintext highlighter-rouge">Object getThis()</code>: 获取目标对象，即被代理的对象。</li>
  <li><code class="language-plaintext highlighter-rouge">AccessibleObject getStaticPart()</code>: 获取静态部分，即被调用的方法或构造函数。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Object proceed() throws Throwable</code>: 执行下一个拦截器或目标方法，返回方法的返回值。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">Object getReturnValue()</code>: 获取方法调用的返回值。</li>
  <li><code class="language-plaintext highlighter-rouge">Throwable getThrowable()</code>: 获取方法调用过程中抛出的异常。</li>
  <li><code class="language-plaintext highlighter-rouge">void setArguments(Object[] arguments)</code>: 设置方法调用的参数数组。</li>
  <li><code class="language-plaintext highlighter-rouge">void setReturnValue(Object returnValue)</code>: 设置方法调用的返回值。</li>
  <li><code class="language-plaintext highlighter-rouge">void setThrowable(Throwable throwable)</code>: 设置方法调用过程中抛出的异常。</li>
</ol>

<p>前置通知（<code class="language-plaintext highlighter-rouge">org.springframework.aop.MethodBeforeAdvice</code>）是在目标方法<strong>执行前</strong>实施增强，可应用于权限管理等功能。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{}</span>
</code></pre></div></div>

<p>后置返回通知（<code class="language-plaintext highlighter-rouge">org.spring:framework.aop.AfterReturningAdvice</code>）是在目标方法<strong>成功执行后</strong>实施增强，可应用于关闭流、删除临时文件等功能，多了个<code class="language-plaintext highlighter-rouge">returnValue</code>，表示返回值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">Object</span> <span class="n">returnValue</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{}</span>
</code></pre></div></div>

<p>后置(最终)通知（<code class="language-plaintext highlighter-rouge">org.springframework.aop.AfterAdvice</code>）是在目标方法<strong>执行后</strong>实施增强，与后置返回通知不同的是，<strong>不管是否发生异常</strong>都要执行该类通知，该类通知可应用于释放资源。</p>

<p>异常通知（<code class="language-plaintext highlighter-rouge">org.springframework.aop.ThrowsAdvice</code>）是在方法<strong>抛出异常后</strong>实施增强，可应用于处理异常、记录日志等功能。</p>

<p>引入通知（<code class="language-plaintext highlighter-rouge">org.springframework.aop.IntroductionInterceptor</code>）是在目标类中<strong>添加一些新的方法和属性</strong>，可应用于修改目标类（增强类）。</p>

<h4 id="proxyfactorybean">ProxyFactoryBean</h4>

<p>ProxyFactory Bean是<code class="language-plaintext highlighter-rouge">org.springframework.beans.factory.FactoryBean</code> 接口的实现类，FactoryBean负责实例化一个Bean实例， ProxyFactoryBean 负责为其他Bean实例创建代理实例。ProxyFactoryBean 类的常用<strong>属性</strong>如下：</p>

<table>
  <thead>
    <tr>
      <th><strong>属性</strong></th>
      <th><strong>描述</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>target</td>
      <td>代理的目标对象</td>
    </tr>
    <tr>
      <td>proxyInterfaces</td>
      <td>代理需要实现的<strong>接口列表</strong>。如果是多个接口,可以使用以下格式赋值: <code class="language-plaintext highlighter-rouge">&lt;list&gt;&lt;value&gt;/value&gt;&lt;list&gt;</code>  ，JDK代理使用这个参数。</td>
    </tr>
    <tr>
      <td>interceptorNames</td>
      <td>需要织入目标的Advice</td>
    </tr>
    <tr>
      <td>proxyTargetClass</td>
      <td>是否对类代理而不是接口,默认为false,使用JDK动态代理;当为true时,使用 CGLIB动态代理</td>
    </tr>
    <tr>
      <td>singleton</td>
      <td>返回的代理实例是否为单例,默认为true</td>
    </tr>
    <tr>
      <td>optimize</td>
      <td>当设置为true时强制CGLIB使用动态代理</td>
    </tr>
  </tbody>
</table>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">AbstractApplicationContext</span> <span class="n">aac</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">cGLIBProxy</span> <span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span> <span class="n">aac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"cGLIBProxy"</span><span class="o">);</span>
        <span class="n">cGLIBProxy</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cGLIBProxy</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">IBase</span> <span class="n">jDKProxy</span><span class="o">=(</span><span class="nc">IBase</span><span class="o">)</span><span class="n">aac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"jDKProxy"</span><span class="o">);</span>
        <span class="n">jDKProxy</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jDKProxy</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Aspect1</span> <span class="kd">implements</span>
        <span class="nc">MethodInterceptor</span><span class="o">,</span> <span class="nc">MethodBeforeAdvice</span><span class="o">,</span> <span class="nc">AfterReturningAdvice</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">MethodInvocation</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"当前拦截对象:"</span><span class="o">+</span><span class="n">i</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"环绕通知前-&gt;"</span><span class="o">);</span>
        <span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span><span class="c1">//转发,继续执行链中的下一个拦截。</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕通知后"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"前置通知"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">Object</span> <span class="n">returnValue</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"后置通知-&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*下面使用CGLIB代理*/</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑执行"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="cm">/*下面使用JDK代理*/</span>
<span class="kd">interface</span> <span class="nc">IBase</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">modify</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="nc">IBase</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑执行"</span><span class="o">);}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>XML：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"aspect1"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.Aspect1"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!--下面使用CGLIB代理--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"cGLIBProxy"</span> <span class="na">class=</span><span class="s">"org.springframework.aop.framework.ProxyFactoryBean"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"target"</span> <span class="na">ref=</span><span class="s">"a"</span><span class="nt">/&gt;</span><span class="c">&lt;!--指定要代理的目标对象--&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"interceptorNames"</span> <span class="na">value=</span><span class="s">"aspect1"</span><span class="nt">/&gt;</span><span class="c">&lt;!--指定切面--&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"proxyTargetClass"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span><span class="c">&lt;!--代理方式,默认falseJDK代理,true,CGLIB代理--&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="c">&lt;!--下面使用JDK代理，共用aspect1，并使用p命名空间简化set注入--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!--proxyInterfaces参数指定接口--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"jDKProxy"</span> <span class="na">class=</span><span class="s">"org.springframework.aop.framework.ProxyFactoryBean"</span>
      <span class="na">p:proxyInterfaces=</span><span class="s">"com.aotmd.test.IBase"</span> <span class="na">p:target-ref=</span><span class="s">"b"</span>
      <span class="na">p:interceptorNames=</span><span class="s">"aspect1"</span> <span class="na">p:proxyTargetClass=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>当前拦截对象:delete
环绕通知前-&gt;前置通知
删除逻辑执行
后置通知-&gt;环绕通知后
com.aotmd.test.A$$EnhancerBySpringCGLIB$$4b7ac9ec
当前拦截对象:save
环绕通知前-&gt;前置通知
保存逻辑执行
后置通知-&gt;环绕通知后
com.aotmd.test.$Proxy5
</code></pre></div></div>

<h3 id="aspectj">Aspectj</h3>

<h4 id="切入点语法定义">切入点语法定义</h4>

<p>在使用spring框架配置AOP的时候，不管是通过XML配置文件还是注解的方式都需要定义切入点(pointcut)。Pointcut可以通过<code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 、<code class="language-plaintext highlighter-rouge">||</code>和<code class="language-plaintext highlighter-rouge">!</code>的方式进行组合。</p>

<p><strong>execution()</strong></p>

<p><strong>注意, <code class="language-plaintext highlighter-rouge">execution()</code>扫描的仅为依赖注入(控制反转)下的Bean</strong>。</p>

<p><code class="language-plaintext highlighter-rouge">execution()</code>是最常用的切点函数，其语法如下所示：修饰符 注解与异常是可选的。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">execution</span><span class="o">(&lt;</span><span class="n">注解</span><span class="o">&gt;&lt;</span><span class="n">修饰符</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">返回类型</span><span class="o">&gt;</span> <span class="o">&lt;[</span><span class="n">包名</span><span class="o">.][</span><span class="n">类名</span><span class="o">.]</span><span class="n">方法名</span><span class="o">&gt;(&lt;</span><span class="n">参数</span><span class="o">&gt;)</span> <span class="o">&lt;</span><span class="n">异常</span><span class="o">&gt;)</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>通配符</th>
      <th><strong>含义</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*</code></td>
      <td>所有语法中匹配任意字符,可与具体名称混写。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">+</code></td>
      <td>匹配接口及其所有实现类的方法。以及<code class="language-plaintext highlighter-rouge">Object+</code>用法,匹配<code class="language-plaintext highlighter-rouge">Object</code>类型或该类的子类,接口同理。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">..</code></td>
      <td><code class="language-plaintext highlighter-rouge">void springAOP..*(..)) </code>，<code class="language-plaintext highlighter-rouge">..</code>匹配所有子包， <code class="language-plaintext highlighter-rouge">*</code>表任意方法名, <code class="language-plaintext highlighter-rouge">&lt;参数&gt;</code>中的<code class="language-plaintext highlighter-rouge">..</code>匹配任意数量类型的参数。</td>
    </tr>
  </tbody>
</table>

<hr />

<p><strong>对于：<code class="language-plaintext highlighter-rouge">&lt;[包名.][类名.]方法名&gt;</code>:</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(void springAOP..*(..))</code> ：可用,匹配所有返回值为<code class="language-plaintext highlighter-rouge">void</code>,并在springAOP包及其所有子包下的所有方法。</p>

<p><code class="language-plaintext highlighter-rouge">execution(void springAOP..(..))：</code>省略<code class="language-plaintext highlighter-rouge">*</code>号报错,可见<code class="language-plaintext highlighter-rouge">..</code><strong>只能匹配到包到类名</strong>,没有匹配方法名称。</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..))</code>可用,匹配所有返回值为<code class="language-plaintext highlighter-rouge">void</code>的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *.*(..))</code>可用,匹配所有返回值为<code class="language-plaintext highlighter-rouge">void</code>的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *c(..))</code>可用,匹配以<code class="language-plaintext highlighter-rouge">c</code>结尾返回值为<code class="language-plaintext highlighter-rouge">void</code>的所有包与类中的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void a*(..))</code>可用,匹配以<code class="language-plaintext highlighter-rouge">a</code>开头返回值为<code class="language-plaintext highlighter-rouge">void</code>的所有包与类中的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *.a*(..))</code>同上</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *.add.a*(..))</code>可用,没有匹配到<code class="language-plaintext highlighter-rouge">springIOC.pp.add</code>类下的<code class="language-plaintext highlighter-rouge">add</code>方法,推测<code class="language-plaintext highlighter-rouge">*</code>号被限制<strong>只能匹配一层包或类</strong>了</p>

<p><code class="language-plaintext highlighter-rouge">execution(void springIoC.*.add.a*(..))</code>可用,正常匹配</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *.pp.add.a*(..))</code>可用,正常匹配</p>

<p><code class="language-plaintext highlighter-rouge">execution(void ..a*(..))</code>报错，<code class="language-plaintext highlighter-rouge">..</code>通配符只能用于包名，而不能用于类名或方法名。</p>

<p><code class="language-plaintext highlighter-rouge">execution(void ...*(..))</code>可用,匹配项未知</p>

<p><code class="language-plaintext highlighter-rouge">execution(void spring*..*(..))</code>可用,匹配包名头为<code class="language-plaintext highlighter-rouge">spring</code>的任意包及其子包类中的<code class="language-plaintext highlighter-rouge">void</code>返回值的任意方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void springAOP.aaa.T+.sc(..))</code>，<code class="language-plaintext highlighter-rouge">T</code>是一个接口因此只能用<code class="language-plaintext highlighter-rouge">+</code>的形式, 匹配<code class="language-plaintext highlighter-rouge">T</code>接口的实现类或其子接口的实现类的<code class="language-plaintext highlighter-rouge">sc</code>方法。</p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">(&lt;参数&gt;)</code></strong>：</p>

<p>切点表达式中方法入参部分比较复杂，可以使用<code class="language-plaintext highlighter-rouge">*</code>和<code class="language-plaintext highlighter-rouge">..</code>通配符。</p>

<p>其中<code class="language-plaintext highlighter-rouge">*</code>表示<strong>任意类型</strong>的参数，而<code class="language-plaintext highlighter-rouge">..</code>表示<strong>任意类型参数且参数个数不限</strong>。</p>

<p>如果方法中的入参类型是<code class="language-plaintext highlighter-rouge">java.lang</code>包下的类，可以直接使用类名，否则<strong>必须使用全限定类名</strong>，如<code class="language-plaintext highlighter-rouge">joke(java.util.List,int)</code>。</p>

<p><code class="language-plaintext highlighter-rouge">execution(* *(String,..))</code>匹配第一个参数为<code class="language-plaintext highlighter-rouge">String</code>的所有方法,<strong>包括只有一个<code class="language-plaintext highlighter-rouge">String</code>参数</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(String,*))</code>匹配第一个参数为<code class="language-plaintext highlighter-rouge">String</code>,第二个为任意的所有方法,<strong>限定参数个数为2</strong>。</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..,String,..))</code>匹配参数带<code class="language-plaintext highlighter-rouge">String</code>类型的所有方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(Object+))</code>匹配<code class="language-plaintext highlighter-rouge">Object</code>类型或该类的子类,限定参数为1</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(Object))</code><strong>只</strong>匹配<code class="language-plaintext highlighter-rouge">Object</code>类型,限定参数为1</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(springAOP.aaa.T+))</code>匹配<code class="language-plaintext highlighter-rouge">T</code>接口或接口的实现类,以及继承<code class="language-plaintext highlighter-rouge">T</code>接口的其他接口与实现类。</p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">&lt;异常&gt;</code>：</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..)throws java.lang.IllegalArgumentException)</code>匹配<strong>带</strong>这个异常的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..)throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException</code>匹配<strong>带</strong>这两个异常的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..)throws Exception+)</code>同理,匹配该异常,<strong>以及该异常下的所有子异常</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..)throws Exception,java.lang.IllegalArgumentException)</code><strong>多个异常无位置关系</strong></p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">&lt;注解&gt;</code>：</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(@java.lang.Override * *(..))</code>没有实验过</p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">&lt;修饰符&gt;</code>：</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(private * *(..))</code>无效,因为无法<strong>直接</strong>在外部调用该方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(protected * *(..))</code>没有问题,<strong>直接</strong>访问该方法可以匹配,通过该方法所在类的其他方法<strong>间接访问无法起作用</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(protected+ * *(..))</code><strong>无法使用</strong><code class="language-plaintext highlighter-rouge">+</code>,报错,情理之中。</p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">&lt;返回类型&gt;</code>：</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(Object+ *(..))</code>同样,具有匹配<code class="language-plaintext highlighter-rouge">Object</code>类型或该类的子类,返回值<code class="language-plaintext highlighter-rouge">String</code>会被匹配。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">args()</code></strong></p>

<p>该函数接受一个类名，表示目标类方法入参对象按类型匹配于指定类时，切点匹配，如下面的例子：<code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter)</code>。</p>

<p>它表示运行时入参是<code class="language-plaintext highlighter-rouge">Waiter</code>类型的方法，它和<code class="language-plaintext highlighter-rouge">execution(* *(com.baobaotao.Waiter))</code>区别在于后者是针对类方法的签名而言的，而前者则针对<strong>运行时</strong>的入参类型而言。</p>

<p>如 <code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter)</code>既匹配于<code class="language-plaintext highlighter-rouge">addWaiter(Waiter waiter)</code>也匹配于<code class="language-plaintext highlighter-rouge">addNaiveWaiter(NaiveWaiter naiveWaiter)</code></p>

<p>而<code class="language-plaintext highlighter-rouge">execution(* *(com.baobaotao.Waiter))</code>只匹配<code class="language-plaintext highlighter-rouge">addWaiter(Waiter waiter)</code>方法；</p>

<p>实际上，<code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter)</code>等价于<code class="language-plaintext highlighter-rouge">execution(* *(com.baobaotao.Waiter+))</code>，当然也等价于<code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter+)</code>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">@args()</code></strong></p>

<p>该函数接受一个注解类的类名，当方法的运行时入参对象标注发指定的注解时，方法匹配切点。如<code class="language-plaintext highlighter-rouge">@args(com.baobaotao.Monitorable)</code>表示任何这样的一个目标方法：它有一个入参且入参对象的类标注<code class="language-plaintext highlighter-rouge">@Monitorable</code>注解。</p>

<p><strong><code class="language-plaintext highlighter-rouge">args()</code>和<code class="language-plaintext highlighter-rouge">@args()</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">args()</code>函数的入参是<strong>类名</strong>，<code class="language-plaintext highlighter-rouge">@args()</code>函数的入参必须是<strong>注解类的类名</strong>。虽然<code class="language-plaintext highlighter-rouge">args()</code>允许在类名后使用<code class="language-plaintext highlighter-rouge">+</code>通配符后缀，但该通配符在此处没有意义：<strong>添加和不添加效果都一样</strong>。</p>

<p><strong>其他：</strong></p>

<table>
  <thead>
    <tr>
      <th>类别</th>
      <th>函数</th>
      <th>入参</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>方法切点函数</td>
      <td><code class="language-plaintext highlighter-rouge">execution()</code></td>
      <td><strong>方法</strong>匹配模式串</td>
      <td>表示满足某一匹配模式的所有目标类方法连接点。如<code class="language-plaintext highlighter-rouge">execution(* greetTo(..))</code>表示所有目标类中的<code class="language-plaintext highlighter-rouge">greetTo()</code>方法。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">@annotation()</code></td>
      <td>方法<strong>注解类名</strong></td>
      <td>表示标注了特定注解的目标方法连接点。如<code class="language-plaintext highlighter-rouge">@annotation(com.baobaotao.anno.NeedTest)</code>表示任何标注了<code class="language-plaintext highlighter-rouge">@NeedTest</code>注解的目标类方法。</td>
    </tr>
    <tr>
      <td>方法<strong>入参</strong>切点函数</td>
      <td><code class="language-plaintext highlighter-rouge">args()</code></td>
      <td><strong>类名</strong></td>
      <td>通过判别目标类方法运行时入参对象的类型定义指定连接点。如<code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter)</code>表示所有有且仅有一个按类型匹配于Waiter的入参的方法。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">@args()</code></td>
      <td>类型<strong>注解类名</strong></td>
      <td>通过判别目标方法的运行时入参对象的类是否标注特定注解来指定连接点。如<code class="language-plaintext highlighter-rouge">@args(com.baobaotao.Monitorable)</code>表示任何这样的一个目标方法：它有一个入参且入参对象的类标注<code class="language-plaintext highlighter-rouge">@Monitorable</code>注解。</td>
    </tr>
    <tr>
      <td>目标类切点函数</td>
      <td><code class="language-plaintext highlighter-rouge">within()</code></td>
      <td><strong>类名</strong>匹配串</td>
      <td>表示特定域下的所有连接点。如<code class="language-plaintext highlighter-rouge">within(com.baobaotao.service.*)</code>表示<code class="language-plaintext highlighter-rouge">com.baobaotao.service</code>包中的所有连接点，也即包中所有类的所有方法，而<code class="language-plaintext highlighter-rouge">within(com.baobaotao.service.*Service)</code>表示在<code class="language-plaintext highlighter-rouge">com.baobaotao.service</code>包中，所有以Service结尾的类的所有连接点。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">target()</code></td>
      <td><strong>类名</strong></td>
      <td>假如目标类按类型匹配于指定类，则目标类的所有连接点匹配这个切点。如通过<code class="language-plaintext highlighter-rouge">target(com.baobaotao.Waiter)</code>定义的切点，<code class="language-plaintext highlighter-rouge">Waiter</code>、以及<code class="language-plaintext highlighter-rouge">Waiter</code>实现类<code class="language-plaintext highlighter-rouge">NaiveWaiter</code>中所有连接点都匹配该切点。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">@within()</code></td>
      <td>类型<strong>注解类名</strong></td>
      <td>假如目标类按类型匹配于某个类A，且类A标注了特定注解，则目标类的所有连接点匹配这个切点。如<code class="language-plaintext highlighter-rouge">@within(com.baobaotao.Monitorable)</code>定义的切点，假如<code class="language-plaintext highlighter-rouge">Waiter</code>类标注了<code class="language-plaintext highlighter-rouge">@Monitorable</code>注解，则<code class="language-plaintext highlighter-rouge">Waiter</code>以及<code class="language-plaintext highlighter-rouge">Waiter</code>实现类<code class="language-plaintext highlighter-rouge">NaiveWaiter</code>类的所有连接点都匹配。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">@target()</code></td>
      <td>类型<strong>注解类名</strong></td>
      <td>目标类标注了特定注解，则目标类所有连接点匹配该切点。如<code class="language-plaintext highlighter-rouge">@target(com.baobaotao.Monitorable)</code>，假如<code class="language-plaintext highlighter-rouge">NaiveWaiter</code>标注了<code class="language-plaintext highlighter-rouge">@Monitorable</code>，则<code class="language-plaintext highlighter-rouge">NaiveWaiter</code>所有连接点匹配切点。</td>
    </tr>
    <tr>
      <td><strong>代理类</strong>切点函数</td>
      <td><code class="language-plaintext highlighter-rouge">this()</code></td>
      <td><strong>类名</strong></td>
      <td>代理类按类型匹配于指定类，则被代理的目标类所有连接点匹配切点。如果有一个接口<code class="language-plaintext highlighter-rouge">MyInterface</code>，并且有一个代理类<code class="language-plaintext highlighter-rouge">MyProxy</code>实现了这个接口，那么使用<code class="language-plaintext highlighter-rouge">this(MyInterface)</code>将匹配所有<code class="language-plaintext highlighter-rouge">MyProxy</code>代理类中实现<code class="language-plaintext highlighter-rouge">MyInterface</code>接口的连接点。</td>
    </tr>
  </tbody>
</table>

<h4 id="基于xml实现-1">基于XML实现</h4>

<p>AspectJ是一个基于Java语言的AOP框架。从Spring2.0以后引入了AspectJ的支持。对于目前的Spring框架，<strong>建议</strong>开发者使用AspectJ实现SpringAOP。</p>

<p>使用AspectJ实现Spring AOP的方式有两种，一是基于XML配置开发AspectJ，二是基于注解开发AspectJ。</p>

<p>基于XML配置开发AspectJ是指通过XML配置文件定义切面、切入点及通知，所有这些定义都必须在<code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code>元素内。</p>

<table>
  <thead>
    <tr>
      <th><strong>元素名称</strong></th>
      <th><strong>用途</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code></td>
      <td>开发AspectJ的顶层配置元素，在配置文件的<code class="language-plaintext highlighter-rouge">&lt;beans&gt;</code>下可以包含多个该元素</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code></td>
      <td>配置（定义）一个切面，<code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code>子元素，属性<code class="language-plaintext highlighter-rouge">ref</code>指定切面的定义</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:pointcut&gt;</code></td>
      <td>配置切入点，<code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素，属性<code class="language-plaintext highlighter-rouge">expression</code>指定通知增强哪些方法</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:before&gt;</code></td>
      <td>配置前置通知,<code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 目标方法执行前实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定前置通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:after-returning&gt;</code></td>
      <td>配置后置返回通知, <code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 目标方法成功执行后实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定后置返回通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:around&gt;</code></td>
      <td>配置环绕通知, <code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 目标方法执行前和执行后实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定环绕通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aoppafter-throwing&gt;</code></td>
      <td>配置异常通知, <code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 抛出异常后实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定异常通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点,</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:after&gt;</code></td>
      <td>配置后置(最终)通知, <code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 标方法<em>执行后</em>实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定后置(最终)通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:declare-parents&gt;</code></td>
      <td>给通知引入新的额外接口，增强功能。</td>
    </tr>
  </tbody>
</table>

<p>实例：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"td6"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.TDemo6"</span><span class="nt">/&gt;</span><span class="c">&lt;!--目标Bean--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"aspectJProxy"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.AspectJProxy"</span><span class="nt">/&gt;</span><span class="c">&lt;!--拦截器实现方法--&gt;</span>
<span class="nt">&lt;aop:config&gt;</span><span class="c">&lt;!--配置AOP--&gt;</span>
    <span class="nt">&lt;aop:aspect</span> <span class="na">ref=</span><span class="s">"aspectJProxy"</span><span class="nt">&gt;</span><span class="c">&lt;!--拦截器配置--&gt;</span>
        <span class="c">&lt;!--配置切入点,即给指定的方法增强,当前expression表达式为返回值为void在TDemo6类下的任意形参的方法--&gt;</span>
        <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">"myPointCut"</span> <span class="na">expression=</span><span class="s">"execution(void com.aotmd.test.TDemo6.*(..))"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;aop:before</span> <span class="na">method=</span><span class="s">"before"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--关联指定拦截器(切面)的某方法为前置通知,并匹配切点--&gt;</span>
        <span class="nt">&lt;aop:after-returning</span> <span class="na">method=</span><span class="s">"afterReturning"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--同上,后置返回通知--&gt;</span>
        <span class="nt">&lt;aop:around</span> <span class="na">method=</span><span class="s">"around"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--同上,环绕通知--&gt;</span>
        <span class="nt">&lt;aop:after-throwing</span> <span class="na">method=</span><span class="s">"except"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span> <span class="na">throwing=</span><span class="s">"e"</span><span class="nt">/&gt;</span><span class="c">&lt;!--同上,异常通知,throwing异常方法形参--&gt;</span>
        <span class="nt">&lt;aop:after</span> <span class="na">method=</span><span class="s">"after"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--同上,关联后置(最终通知)--&gt;</span>
    <span class="nt">&lt;/aop:aspect&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<p>类文件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.aspectj.lang.JoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.AbstractApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">AbstractApplicationContext</span> <span class="n">aac</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="nc">TDemo6</span> <span class="n">td6</span> <span class="o">=</span> <span class="o">(</span><span class="nc">TDemo6</span><span class="o">)</span> <span class="n">aac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"td6"</span><span class="o">);</span>
        <span class="n">td6</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">td6</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span><span class="c1">//不是void返回值,因此没有被代理</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">AspectJProxy</span><span class="o">{</span>
    <span class="cm">/**前置通知 @param jp 作为参数获得目标对象信息*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jp</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"前置通知：模拟权限控制"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span><span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jp</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"后置返回通知：模拟删除临时文件"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span><span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="cm">/**环绕通知,必须一个参数是ProceedingJoinPoint 类型
     * @param pjp ProceedingJoinPoint 是JoinPoint 的子接口， 代表可以执行的目标方法
     * @return 返回值的类型必须是Object
     * @throws Throwable */</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"环绕开始：执行目标方法前，模拟开启事务"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span> <span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span><span class="c1">//转发,继续下一拦截方法</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕结束：执行目标方法前，模拟关闭事务"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">except</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"异常通知：程序执行异常"</span><span class="o">+</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"后置(最终)通知：模拟释放资源"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">TDemo6</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>输出结果:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>前置通知：模拟权限控制，目标类对象：com.aotmd.test.TDemo6@9cd25ff，被增强处理的方法：save
环绕开始：执行目标方法前，模拟开启事务，目标类对象：com.aotmd.test.TDemo6@9cd25ff，被增强处理的方法：save
保存
后置(最终)通知：模拟释放资源
环绕结束：执行目标方法前，模拟关闭事务
后置返回通知：模拟删除临时文件，目标类对象：com.aotmd.test.TDemo6@9cd25ff，被增强处理的方法：save
删除
</code></pre></div></div>

<p>执行顺序：</p>

<p><img src="/images/posts/Java/切点执行顺序.png" alt="切点执行顺序" /></p>

<h4 id="基于注解实现">基于注解实现</h4>

<p>基于注解开发AspectJ 要比基于XML 配置开发AspectJ 便捷许多，所以在实际开发中推荐使用注解方式。</p>

<table>
  <thead>
    <tr>
      <th><strong>注解名称</strong></th>
      <th><strong>描述</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Aspect</code></td>
      <td>用于定义一个切面,注解在切面类上。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Pointcut</code></td>
      <td>用于定义<strong>切入点表达式</strong>。在使用时需要定义一个<strong>切入点方法</strong>,该方法是一个<strong>返回值void且方法体为空的普通方法。</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Before</code></td>
      <td>用于定义<strong>前置通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@AfterReturning</code></td>
      <td>用于定义<strong>后置返回通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Around</code></td>
      <td>用于定义<strong>环绕通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@AfterThrowing</code></td>
      <td>用于定义<strong>异常通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。另外,还有一个<code class="language-plaintext highlighter-rouge">throwing</code>属性用于访问目标方法抛出的异常,<strong>该属性值与异常通知方法中同名的形参一致</strong>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@After</code></td>
      <td>用于定义<strong>后置(最终)通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。</td>
    </tr>
  </tbody>
</table>

<p>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TDemo7</span> <span class="n">tDemo7</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">TDemo7</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span><span class="c1">//不是void返回值,因此没有被代理</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Aspect</span> <span class="cm">/*&lt;aop:aspect ref="annotationAspectJProxy"&gt;&lt;!--拦截器配置--&gt;*/</span>
<span class="nd">@Component</span><span class="cm">/*&lt;bean id="annotationAspectJProxy" class="springAOP.AspectJProxy"/&gt;*/</span>
<span class="kd">class</span> <span class="nc">AnnotationAspectJProxy</span> <span class="o">{</span>
    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"execution(void com.aotmd.test.TDemo7.*(..))"</span><span class="o">)</span><span class="cm">/*配置切入点,即给指定的方法增强,
        &lt;aop:pointcut id="cut" expression="execution(void com.aotmd.test.TDemo7.*(..))"/&gt;*/</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">cut</span><span class="o">(){}</span>
    <span class="cm">/**前置通知 @param jp 作为参数获得目标对象信息*/</span>
    <span class="nd">@Before</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span><span class="cm">/*&lt;aop:before method="before" pointcut-ref="cut"/&gt;前置通知*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jp</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"前置通知：模拟权限控制"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span><span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span><span class="cm">/*&lt;aop:before method="afterReturning" pointcut-ref="cut"/&gt;后置返回通知*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jp</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"后置返回通知：模拟删除临时文件"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span><span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="cm">/**环绕通知,必须一个参数是ProceedingJoinPoint 类型
     * @param pjp ProceedingJoinPoint 是JoinPoint 的子接口， 代表可以执行的目标方法
     * @return 返回值的类型必须是Object
     * @throws Throwable*/</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span><span class="cm">/*&lt;aop:before method="around" pointcut-ref="cut"/&gt;环绕通知*/</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"环绕开始：执行目标方法前，模拟开启事务"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span> <span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span><span class="c1">//转发,继续下一拦截方法</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕结束：执行目标方法前，模拟关闭事务"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@AfterThrowing</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"cut()"</span><span class="o">,</span><span class="n">throwing</span> <span class="o">=</span> <span class="s">"e"</span><span class="o">)</span>
    <span class="cm">/*&lt;aop:after-throwing method="except" pointcut-ref="cut" throwing="e"/&gt;
    &lt;!--同上,异常通知,throwing异常方法形参--&gt;*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">except</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"异常通知：程序执行异常"</span><span class="o">+</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());}</span>
    <span class="nd">@After</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span>
    <span class="cm">/*&lt;aop:after method="after" pointcut-ref="cut"/&gt;&lt;!--关联后置(最终通知)--&gt;*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"后置(最终)通知：模拟释放资源"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="nd">@Component</span><span class="cm">/*这里生成的Bean名称为TDemo7*/</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>环绕开始：执行目标方法前，模拟开启事务，目标类对象：com.aotmd.test.TDemo7@5f0e9815，被增强处理的方法：save
前置通知：模拟权限控制，目标类对象：com.aotmd.test.TDemo7@5f0e9815，被增强处理的方法：save
保存
环绕结束：执行目标方法前，模拟关闭事务
后置(最终)通知：模拟释放资源
后置返回通知：模拟删除临时文件，目标类对象：com.aotmd.test.TDemo7@5f0e9815，被增强处理的方法：save
删除
</code></pre></div></div>

<p>这里使用了<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>注解来启用对标记有AspectJ <code class="language-plaintext highlighter-rouge">@Aspect</code>注解的组件的支持，类似于在Spring XML配置中使用<code class="language-plaintext highlighter-rouge">&lt;aop:aspectj-autoproxy&gt;</code>元素的功能。这个注解通常用于<code class="language-plaintext highlighter-rouge">@Configuration</code>类中。通过这个注解，Spring将会自动代理被<code class="language-plaintext highlighter-rouge">@Aspect</code>注解标记的类，使得切面逻辑能够被织入到目标类中。</p>

<p>Spring的IoC容器看到这个注解，就会自动查找带有<code class="language-plaintext highlighter-rouge">@Aspect</code>的Bean，然后根据每个方法的<code class="language-plaintext highlighter-rouge">@Before</code>、<code class="language-plaintext highlighter-rouge">@Around</code>等注解把AOP注入到特定的Bean中。</p>

<p><code class="language-plaintext highlighter-rouge">JoinPoint</code>接口是AspectJ框架中的一个核心接口，用于表示切点的信息。它提供了一些方法来获取与切点相关的信息。下面是<code class="language-plaintext highlighter-rouge">JoinPoint</code>接口中常用的方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getArgs()</code>：获取方法参数的数组。</li>
  <li><code class="language-plaintext highlighter-rouge">getThis()</code>：获取代理对象的引用。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getTarget()</code>：获取目标对象的引用，类型为<code class="language-plaintext highlighter-rouge">Signature</code>接口。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">getSignature()</code>：获取方法签名的对象。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">getStaticPart()</code>：获取静态部分的对象。</li>
  <li><code class="language-plaintext highlighter-rouge">getKind()</code>：获取切点的类型，如method-execution、method-call等。</li>
  <li><code class="language-plaintext highlighter-rouge">getSourceLocation()</code>：获取切点所在位置的源代码位置。</li>
  <li><code class="language-plaintext highlighter-rouge">getStaticPart()</code>：获取静态部分的对象。</li>
  <li><code class="language-plaintext highlighter-rouge">toShortString()</code>：获取切点的简短字符串表示。</li>
  <li><code class="language-plaintext highlighter-rouge">toLongString()</code>：获取切点的详细字符串表示。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">JoinPoint</code>接口还包含了两个内部接口<code class="language-plaintext highlighter-rouge">StaticPart</code>和<code class="language-plaintext highlighter-rouge">EnclosingStaticPart</code>。这两个接口提供了关于切点静态部分的信息。</p>

<p><code class="language-plaintext highlighter-rouge">StaticPart</code>接口：表示切点的静态部分，即切点所在的位置信息。它包含了以下方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getKind()</code>：获取切点的类型，如<code class="language-plaintext highlighter-rouge">method-execution</code>、<code class="language-plaintext highlighter-rouge">method-call</code>等。</li>
  <li><code class="language-plaintext highlighter-rouge">getSignature()</code>：获取方法签名的对象，类型为<code class="language-plaintext highlighter-rouge">Signature</code>接口。</li>
  <li><code class="language-plaintext highlighter-rouge">getSourceLocation()</code>：获取切点所在位置的源代码位置。</li>
  <li><code class="language-plaintext highlighter-rouge">toShortString()</code>：获取切点的简短字符串表示。</li>
  <li><code class="language-plaintext highlighter-rouge">toLongString()</code>：获取切点的详细字符串表示。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">EnclosingStaticPart</code>接口：表示包围当前切点的静态部分，即当前切点所在的方法或构造函数的信息。它包含了与<code class="language-plaintext highlighter-rouge">StaticPart</code>接口相同的方法，用于获取包围切点的静态部分的信息。</p>

<p>而环绕通知的<code class="language-plaintext highlighter-rouge">ProceedingJoinPoint</code>接口继承于<code class="language-plaintext highlighter-rouge">JoinPoint</code>接口，并多了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">proceed()</code>：执行原始的连接点，即继续执行切点所在的方法。在环绕通知中，可以调用这个方法来执行原始的连接点，或者在合适的时机决定是否继续执行。</li>
  <li><code class="language-plaintext highlighter-rouge">proceed(Object[] args)</code>：执行原始的连接点，并传入指定的参数。</li>
</ul>

<p>传入参数的实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Around</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"环绕开始：执行目标方法前，模拟开启事务"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span> <span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="c1">// 获取目标方法的参数</span>
    <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">getArgs</span><span class="o">();</span>
    <span class="c1">// 修改参数或者根据参数执行一些逻辑</span>
    <span class="c1">// ...</span>
    <span class="c1">// 调用proceed()方法并传入修改后的参数</span>
    <span class="nc">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">args</span><span class="o">);</span> <span class="c1">// 传入修改后的参数</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕结束：执行目标方法前，模拟关闭事务"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>在环绕通知中，如果目标方法有参数，可以直接调用<code class="language-plaintext highlighter-rouge">pjp.proceed()</code>方法而不传递任何参数。这是因为<code class="language-plaintext highlighter-rouge">proceed()</code>方法会自动使用目标方法的原始参数进行执行。</p>

<p>如果要<strong>修改传入的参数</strong>，可以使用<code class="language-plaintext highlighter-rouge">proceed(Object[] args)</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TDemo7</span> <span class="n">tDemo7</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">TDemo7</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AnnotationAspectJProxy</span> <span class="o">{</span>
    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"execution(void com.aotmd.test.TDemo7.*(..))"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">cut</span><span class="o">(){}</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">obj</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pjp</span><span class="o">.</span><span class="na">getArgs</span><span class="o">().</span><span class="na">length</span><span class="o">==</span><span class="mi">1</span><span class="o">){</span>
            <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"修改"</span><span class="o">});</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改"</span><span class="o">+</span><span class="n">s</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">环绕</span><span class="err">：</span><span class="n">save</span>
<span class="n">保存</span>
<span class="n">删除</span>
<span class="n">环绕</span><span class="err">：</span><span class="n">modify</span>
<span class="n">修改修改</span>
</code></pre></div></div>

<p>这里为了正常调用无参数的<code class="language-plaintext highlighter-rouge">save</code>方法，做了一个判断，不管传入什么字符串给<code class="language-plaintext highlighter-rouge">modify</code>，都会被hook为<code class="language-plaintext highlighter-rouge">修改</code>字符串。</p>

<p>当然，也可以区分切点，就不需要判断了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(void com.aotmd.test.TDemo7.modify(..))"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"修改"</span><span class="o">});</span>
    <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Spring对接口类型使用JDK动态代理，对普通类使用CGLIB创建子类。如果一个Bean的class是final，Spring将无法为其创建子类。</strong></p>

<p>Spring AOP实现AOP的方式是动态代理，而AspectJ实现的方式是静态代理。Spring虽然支持AspectJ，但仅仅是支持AspectJ的切点解析和匹配，比如<code class="language-plaintext highlighter-rouge">@Before</code>注解和<code class="language-plaintext highlighter-rouge">execution()</code>语句，代理的底层实现还是JDK动态代理和CGLIB动态代理。</p>

<p>Spring AOP（动态代理）：</p>
<ul>
  <li>Spring AOP基于代理模式，使用JDK动态代理或CGLIB动态代理来创建代理对象。</li>
  <li>当目标对象实现了接口时，Spring AOP使用JDK动态代理来创建代理对象。</li>
  <li>当目标对象没有实现接口时，Spring AOP使用CGLIB动态代理来创建代理对象。</li>
  <li>Spring AOP通过在运行时动态地创建代理对象，并将切面逻辑织入到代理对象的方法中来实现AOP。</li>
</ul>

<p>AspectJ（静态代理）：</p>
<ul>
  <li>AspectJ是一个独立的AOP框架，它使用静态代理来实现AOP。</li>
  <li>AspectJ通过编译时织入（CTW）或类加载时织入（LTW）的方式，在编译或加载阶段将切面逻辑织入到目标类中。</li>
</ul>

<hr />

<p><strong>使用<code class="language-plaintext highlighter-rouge">@annotation()</code>切入点</strong></p>

<p>使用AOP时，被装配的Bean最好自己能清清楚楚地知道自己被安排了。</p>

<p>Spring提供的<code class="language-plaintext highlighter-rouge">@Transactional</code>就是一个非常好的例子。如果自己写的Bean希望在一个数据库事务中被调用，就在方法上标注上<code class="language-plaintext highlighter-rouge">@Transactional</code>，或者直接在class级别注解，表示所有public方法都被安排了。通过<code class="language-plaintext highlighter-rouge">@Transactional</code>，某个方法是否启用了事务就一清二楚了。因此，装配AOP的时候，使用注解是最好的方式。</p>

<p>以一个实际例子演示如何使用注解实现AOP装配。为了监控应用程序的性能，定义一个性能监控的注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@interface</span> <span class="nc">MetricTime</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后在需要被监控的关键方法上标注该注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span><span class="cm">/*这里生成的Bean名称为TDemo7*/</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="nd">@MetricTime</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改"</span><span class="o">+</span><span class="n">s</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后，使用<code class="language-plaintext highlighter-rouge">@annotation()</code>切入点，并定义具体逻辑：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AnnotationAspectJProxy</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(com.aotmd.test.MetricTime) &amp;&amp; @annotation(m)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">,</span><span class="nc">MetricTime</span> <span class="n">m</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
            <span class="c1">// 写入日志或发送至JMX:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[Metrics] "</span> <span class="o">+</span> <span class="n">pjp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">().</span><span class="na">getClass</span><span class="o">()+</span><span class="s">"-&gt;"</span> <span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">t</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">around()</code>方法标注了<code class="language-plaintext highlighter-rouge">@annotation(com.aotmd.test.MetricTime) &amp;&amp; @annotation(m)</code>，<code class="language-plaintext highlighter-rouge">@annotation(com.aotmd.test.MetricTime)</code>意思为目标方法是带有<code class="language-plaintext highlighter-rouge">@MetricTime</code>注解的方法。</p>

<p>如果还要读取<code class="language-plaintext highlighter-rouge">MetricTime</code>注解实例的内容，就需要把<strong>注解实例</strong>注入到<strong>通知方法</strong>中，则需要追加<code class="language-plaintext highlighter-rouge">&amp;&amp; @annotation(m)</code>部分，通知方法应有一个名称为<code class="language-plaintext highlighter-rouge">m</code>的形式参数，类型为<code class="language-plaintext highlighter-rouge">MetricTime</code>，Spring会给<code class="language-plaintext highlighter-rouge">m</code>传入注解实例本身。因为形参带有类型，因此可以直接写成：<code class="language-plaintext highlighter-rouge">@Around("@annotation(m)")</code>。</p>

<p>如果不需要注解的内容，则直接写：<code class="language-plaintext highlighter-rouge">@Around("@annotation(com.aotmd.test.MetricTime)")</code>。</p>

<p>执行：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TDemo7</span> <span class="n">tDemo7</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">TDemo7</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>保存
删除
修改123
[Metrics] class com.aotmd.test.TDemo7-&gt;modify: 4ms
</code></pre></div></div>

<h3 id="aop原理">AOP原理</h3>

<p>无论是使用AspectJ语法，还是配合Annotation，使用AOP，实际上就是让Spring自动为我们创建一个Proxy，使得调用方能无感知地调用指定方法，但运行期却动态<strong>织入</strong>了其他逻辑，因此，AOP本质上就是一个<strong>代理模式</strong>。</p>

<p>因为Spring使用了CGLIB来实现运行期动态创建Proxy，如果没能深入理解其运行原理和实现机制，就极有可能遇到各种诡异的问题。</p>

<p>假设定义了一个<code class="language-plaintext highlighter-rouge">TDemo7</code>的Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span><span class="cm">/*这里生成的Bean名称为TDemo7*/</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"123"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改："</span><span class="o">+</span><span class="n">s</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里多个一个字段<code class="language-plaintext highlighter-rouge">s</code>，切面类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AnnotationAspectJProxy</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(void com.aotmd.test.TDemo7.*(..))"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"-↓-环绕前-↓-"</span><span class="o">);</span>
        <span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"-↑-环绕后-↑-"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TDemo7</span> <span class="n">tDemo7</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">TDemo7</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
        <span class="cm">/*直接访问对象字段*/</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tDemo7</span><span class="o">.</span><span class="na">s</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tDemo7</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-↓-环绕前-↓-
保存
-↑-环绕后-↑-
删除
-↓-环绕前-↓-
修改：123
-↑-环绕后-↑-
null
class com.aotmd.test.TDemo7$$EnhancerBySpringCGLIB$$8c624483
</code></pre></div></div>

<p>其中对象字段<code class="language-plaintext highlighter-rouge">s</code>没有正常初始化赋值为<code class="language-plaintext highlighter-rouge">"123"</code>。为什么AOP代理后<code class="language-plaintext highlighter-rouge">s</code>就没有正常初始化呢？代理后会生成了一个子类替代原来的bean，生成子类这个过程中并没有初始化<code class="language-plaintext highlighter-rouge">s</code>。</p>

<p>Spring创建的AOP代理，代理类的名总是类似<code class="language-plaintext highlighter-rouge">class com.aotmd.test.TDemo7$$EnhancerBySpringCGLIB$$8c624483</code>，Java的类名实际上允许<code class="language-plaintext highlighter-rouge">$</code>字符。</p>

<p>为了让调用方无感，它必须继承自<code class="language-plaintext highlighter-rouge">TDemo7</code>，然后就可以使用向上提升的特性，让代码<code class="language-plaintext highlighter-rouge">TDemo7 tDemo7 = ac.getBean(TDemo7.class);</code>正常赋值。</p>

<p>该代理类会覆写所有<code class="language-plaintext highlighter-rouge">public</code>和<code class="language-plaintext highlighter-rouge">protected</code>方法，并在内部将<strong>调用委托给原始的<code class="language-plaintext highlighter-rouge">TDemo7</code>实例</strong>。</p>

<hr />

<p>最终问题转换为：代理实例的成员变量<code class="language-plaintext highlighter-rouge">s</code>的值为什么是<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p>实际上，成员变量的初始化是在构造方法中完成的。这是我们看到的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"123"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这是编译器实际编译的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">s</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">TDemo7</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">();</span> <span class="c1">// 构造方法的第一行代码总是调用super()</span>
        <span class="n">s</span><span class="o">=</span><span class="s">"123"</span><span class="o">;</span> <span class="c1">// 继续初始化成员变量</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然而，对于Spring通过CGLIB动态创建的<code class="language-plaintext highlighter-rouge">class com.aotmd.test.TDemo7$$EnhancerBySpringCGLIB$$8c624483</code>代理类，它的构造方法中，<strong>并未调用<code class="language-plaintext highlighter-rouge">super()</code></strong>，因此，从父类继承的成员变量，包括<code class="language-plaintext highlighter-rouge">final</code>类型的成员变量，统统都没有初始化。</p>

<p>Java语言规定，任何类的构造方法，第一行必须调用<code class="language-plaintext highlighter-rouge">super()</code>，如果没有，编译器会自动加上，怎么Spring的CGLIB就可以搞特殊？</p>

<p>这是因为自动加<code class="language-plaintext highlighter-rouge">super()</code>的功能是<strong>Java编译器</strong>实现的，它发现你没加，就自动给加上，发现你加错了，就报编译错误。但实际上，如果直接构造字节码，一个类的构造方法中，不一定非要调用<code class="language-plaintext highlighter-rouge">super()</code>。Spring使用CGLIB构造的Proxy类，是直接生成字节码，并没有源码-编译-字节码这个步骤，因此：</p>

<p>Spring通过CGLIB创建的代理类，<strong>不会初始化代理类自身继承的任何成员变量</strong>，包括<code class="language-plaintext highlighter-rouge">final</code>类型的成员变量。</p>

<hr />

<p>Spring在创建代理对象时，会先创建目标对象，再把目标对象注入到代理对象中，虽然代理对象继承了目标对象，但他们之间的关系本质还是组合。</p>

<p>为什么Spring不初始化代理对象父类？就是因为代理对象可以访问到两个<code class="language-plaintext highlighter-rouge">s</code>变量，但只需要为其中一个进行赋值，而Spring选择给target赋值，也就不需要对代理类的父类进行初始化了。</p>

<p>那么，为什么不直接通过super调用父类方法（即原始类方法），而是通过持有的原始target调用方法？因为有一个工厂模式创建Bean，在实例化完成后，还可以调用其他方法改变字段状态：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">createMap</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"key"</span><span class="o">,</span><span class="s">"value"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>而这个状态，很难重新被代理子类复制并替换，而且这个过程也会消耗性能，且也违背了代理模式，因此持有一个原始对象进行访问是最好的。</p>

<p>而且本来Bean就可以通过set方法注入其他参数或Bean，通过继承可不会重复这些额外的操作。举个简单的例子：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">A1</span> <span class="n">a1</span> <span class="o">=</span> <span class="k">new</span> <span class="no">A1</span><span class="o">();</span>
        <span class="n">a1</span><span class="o">.</span><span class="na">setS</span><span class="o">(</span><span class="s">"hello!"</span><span class="o">);</span>
        <span class="no">A1</span> <span class="n">a2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">A1Proxy</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">A1</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">s</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setS</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"A1{s='"</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A1Proxy</span> <span class="kd">extends</span> <span class="no">A1</span><span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>要复制<code class="language-plaintext highlighter-rouge">A1</code>的状态，对于简单的<code class="language-plaintext highlighter-rouge">String</code>，复制值就行了，比如：<code class="language-plaintext highlighter-rouge">a2.setS(a1.getS())</code>，那么如果是复杂对象，比如<code class="language-plaintext highlighter-rouge">Map</code>，自定义的对象，那复制起来就麻烦了。还不如持有一个原始对象呢。</p>

<hr />

<p>那么启用了AOP后，如何修复？修复很简单，只需要把直接访问字段的代码，改为通过方法访问，这样就会在代理实例内部将<strong>调用委托给原始的<code class="language-plaintext highlighter-rouge">TDemo7</code>实例</strong>。即添加<code class="language-plaintext highlighter-rouge">getS()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span><span class="cm">/*这里生成的Bean名称为TDemo7*/</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"123"</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getS</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改："</span><span class="o">+</span><span class="n">s</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果要修改<code class="language-plaintext highlighter-rouge">s</code>，那也要通过方法，而不是直接访问字段修改。</p>

<hr />

<p>如果<code class="language-plaintext highlighter-rouge">getS()</code>添加了<code class="language-plaintext highlighter-rouge">final</code>，因为代理类无法覆写<code class="language-plaintext highlighter-rouge">final</code>方法（这一点绕不过JVM的ClassLoader检查），因为无法覆写，所以直接调用了父类的<code class="language-plaintext highlighter-rouge">getS()</code>，因此该方法返回的是代理类的<code class="language-plaintext highlighter-rouge">s</code>，即<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p>通过打断点步入，也可以很清晰的看到调用非<code class="language-plaintext highlighter-rouge">final</code>修饰的方法，和<code class="language-plaintext highlighter-rouge">final</code>修饰方法的不同。</p>

<p>实际上，如果加上日志：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.slf4j<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>slf4j-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.7.30<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>Spring在启动时会打印一个警告：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>22:01:34.283 [main] INFO  o.s.aop.framework.CglibAopProxy - Final method [public final java.lang.String com.aotmd.test.TDemo7.getS()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
</code></pre></div></div>

<p>最终方法<code class="language-plaintext highlighter-rouge">getS()</code>无法通过 CGLIB 获得代理：对此方法的调用不会路由到目标实例，并且可能会导致针对代理实例中未初始化的字段的 NPE。</p>

<p>因此，使用Bean时，<strong>总是调用方法</strong>，而非直接访问字段；编写Bean时，如果可能会被代理，就不要编写<code class="language-plaintext highlighter-rouge">public final</code>方法。这样才能保证有没有AOP，代码都能正常工作。</p>

<hr />

<p><strong>要查看动态生成的类文件，可以使用</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">getProperties</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="nc">DebuggingClassWriter</span><span class="o">.</span><span class="na">DEBUG_LOCATION_PROPERTY</span><span class="o">,</span> <span class="s">"C:\\class"</span><span class="o">);</span>
</code></pre></div></div>

<p>这两行代码是用于设置Java动态代理生成的类文件保存路径的：</p>

<p><code class="language-plaintext highlighter-rouge">System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");</code></p>

<p>这行代码设置了一个系统属性，告诉Java虚拟机（JVM）在生成动态代理类时保存生成的类文件。动态代理是一种在运行时创建代理对象的机制，通常用于AOP（面向切面编程）等场景。通过设置这个属性为<code class="language-plaintext highlighter-rouge">true</code>，JVM会将生成的动态代理类文件保存在默认的临时目录中。</p>

<p><code class="language-plaintext highlighter-rouge">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, "C:\\class");</code></p>

<p>这行代码设置了另一个系统属性，指定了动态代理生成的类文件保存的路径。在这里，<code class="language-plaintext highlighter-rouge">DebuggingClassWriter.DEBUG_LOCATION_PROPERTY</code>是一个常量，表示动态代理类文件保存路径的属性名，通常用于调试目的。通过将这个属性设置为<code class="language-plaintext highlighter-rouge">C:\\class</code>，表示将生成的动态代理类文件保存在<code class="language-plaintext highlighter-rouge">C:\class</code>目录下。</p>

<p>综合起来，这两行代码的作用是告诉JVM在生成动态代理类时保存生成的类文件，并指定保存路径为<code class="language-plaintext highlighter-rouge">C:\class</code>。这对于调试动态代理生成的类文件或者了解动态代理的工作原理可能会有帮助。</p>

<h2 id="访问数据库">访问数据库</h2>

<p>Java程序使用JDBC接口访问关系数据库的时候，需要以下几步：</p>

<ul>
  <li>创建全局<code class="language-plaintext highlighter-rouge">DataSource</code>实例，表示数据库连接池；</li>
  <li>在需要读写数据库的方法内部，按如下步骤访问数据库：
    <ul>
      <li>从全局<code class="language-plaintext highlighter-rouge">DataSource</code>实例获取<code class="language-plaintext highlighter-rouge">Connection</code>实例；</li>
      <li>通过<code class="language-plaintext highlighter-rouge">Connection</code>实例创建<code class="language-plaintext highlighter-rouge">PreparedStatement</code>实例；</li>
      <li>执行SQL语句，如果是查询，则通过<code class="language-plaintext highlighter-rouge">ResultSet</code>读取结果集，如果是修改，则获得<code class="language-plaintext highlighter-rouge">int</code>结果。</li>
    </ul>
  </li>
</ul>

<p>正确编写JDBC代码的关键是使用<code class="language-plaintext highlighter-rouge">try ... finally</code>释放资源，涉及到事务的代码需要正确提交或回滚事务。</p>

<h3 id="在spring使用jdbc">在Spring使用JDBC</h3>

<p>在Spring使用JDBC，首先通过IoC容器创建并管理一个<code class="language-plaintext highlighter-rouge">DataSource</code>实例，Spring提供了一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，可以方便地操作JDBC，因此，通常情况下，会实例化一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。顾名思义，这个类主要使用了Template模式。</p>

<p>编写<strong>示例代码或者测试代码</strong>时，强烈推荐使用<a href="http://hsqldb.org/">HSQLDB</a>这个数据库，它是一个用Java编写的关系数据库，可以以内存模式或者文件模式运行，本身只有一个jar包，非常适合演示代码或者测试代码。</p>

<p>HSQLDB是一种嵌入式数据库，一般不会持久化，仅用作简单即时性测试数据，程序执行完，数据销毁，有3种模式：<code class="language-plaintext highlighter-rouge">mem</code>、<code class="language-plaintext highlighter-rouge">file</code>、<code class="language-plaintext highlighter-rouge">server</code>。
使用<code class="language-plaintext highlighter-rouge">file</code>模式时，如果需要持久化数据，可以修改链接为：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">jdbc.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb;hsqldb.write_delay=false;shutdown=true</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">file</code>为单例模式，如果已连接数据库，将不能对数据库进行操作。</p>

<p>依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.4.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.zaxxer<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>HikariCP<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>4.0.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>对于<strong>java8</strong> , hsql 版本可以选择 2.4.0。</p>

<p>新建配置文件：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 数据库文件名为testdb:
</span><span class="py">jdbc.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb</span>

<span class="c"># Hsqldb默认的用户名是sa，口令是空字符串:
</span><span class="py">jdbc.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">jdbc.password</span><span class="p">=</span>
</code></pre></div></div>

<p>初始化数据库连接，并初始化<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上述配置中：</p>

<ol>
  <li>通过<code class="language-plaintext highlighter-rouge">@PropertySource("jdbc.properties")</code>读取数据库配置文件；</li>
  <li>通过<code class="language-plaintext highlighter-rouge">@Value("${jdbc.url}")</code>注入配置文件的相关配置；</li>
  <li>创建一个<code class="language-plaintext highlighter-rouge">DataSource</code>实例，它的实际类型是<code class="language-plaintext highlighter-rouge">HikariDataSource</code>，创建时需要用到注入的配置；</li>
  <li>创建一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>实例，它需要注入<code class="language-plaintext highlighter-rouge">DataSource</code>，这是通过方法参数完成注入的。</li>
</ol>

<p>实体类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="n">password</span><span class="o">,</span><span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用与初始化表：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 注意传入的是ConnectionCallback:</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">((</span><span class="nc">ConnectionCallback</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">conn</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="c1">// 可以直接使用conn实例，不要释放它，回调结束后JdbcTemplate自动释放:</span>
            <span class="c1">// 在内部手动创建的PreparedStatement、ResultSet必须用try(...)释放:</span>
            <span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = ?"</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
                <span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">ps</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span>
                                <span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span> 
                                <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"email"</span><span class="o">),</span> 
                                <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"password"</span><span class="o">),</span> 
                                <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span> 
                    <span class="o">}</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"未通过 ID 找到用户。"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 创建一个KeyHolder:</span>
        <span class="nc">KeyHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GeneratedKeyHolder</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span>
                <span class="c1">// 参数1:PreparedStatementCreator</span>
                <span class="o">(</span><span class="n">conn</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="c1">// 创建PreparedStatement时，必须指定RETURN_GENERATED_KEYS:</span>
                    <span class="kt">var</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">"INSERT INTO users(email, password, name) VALUES(?, ?, ?)"</span><span class="o">,</span>
                            <span class="nc">Statement</span><span class="o">.</span><span class="na">RETURN_GENERATED_KEYS</span><span class="o">);</span>
                    <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">);</span>
                    <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
                    <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
                    <span class="k">return</span> <span class="n">ps</span><span class="o">;</span>
                <span class="o">},</span>
                <span class="c1">// 参数2:KeyHolder</span>
                <span class="n">holder</span><span class="o">)</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"插入失败。"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 从KeyHolder中获取返回的自增值:</span>
        <span class="k">return</span> <span class="n">holder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">longValue</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">id</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUserById</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
User{id=0, email='1@qq.com', password='123456', name='小米'}
</code></pre></div></div>

<hr />

<p>Spring提供的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>采用Template模式，提供了一系列以回调为特点的工具方法，目的是避免繁琐的<code class="language-plaintext highlighter-rouge">try...catch</code>语句。</p>

<p><code class="language-plaintext highlighter-rouge">T execute(ConnectionCallback&lt;T&gt; action)</code>方法，它提供了Jdbc的<code class="language-plaintext highlighter-rouge">Connection</code>供我们使用。</p>

<p><code class="language-plaintext highlighter-rouge">T execute(String sql, PreparedStatementCallback&lt;T&gt; action)</code>同理：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 注意传入的是ConnectionCallback:</span>
    <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = ?"</span><span class="o">,(</span><span class="nc">PreparedStatementCallback</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">User</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">ps</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">ps</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"email"</span><span class="o">),</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"password"</span><span class="o">),</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
            <span class="o">}</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"未通过 ID 找到用户。"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">});</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>在Spring的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>中，<code class="language-plaintext highlighter-rouge">queryForObject</code>方法用于执行SQL查询并将结果映射为单个对象。对于<code class="language-plaintext highlighter-rouge">queryForObject</code>方法，<strong>它期望查询结果只有一行</strong>，如果结果集为空或者超过一行，将会抛出异常。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserByEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 传入SQL，参数和RowMapper实例:</span>
    <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE email = ?"</span><span class="o">,</span>
            <span class="o">(</span><span class="nc">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rowNum</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="c1">// 将ResultSet的当前行映射为一个JavaBean:</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span> <span class="c1">// new User object:</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span> <span class="c1">// id</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"email"</span><span class="o">),</span> <span class="c1">// email</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"password"</span><span class="o">),</span> <span class="c1">// password</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span> <span class="c1">// name</span>
            <span class="o">},</span>
            <span class="n">email</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>方法签名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">queryForObject</span><span class="o">(</span><span class="nc">String</span> <span class="n">sql</span><span class="o">,</span> <span class="nc">RowMapper</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">rowMapper</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">){}</span>
</code></pre></div></div>

<p>参数解释如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sql</code>：要执行的 SQL 查询语句。</li>
  <li><code class="language-plaintext highlighter-rouge">rowMapper</code>：一个 RowMapper 对象，用于将查询结果集中的行映射为对象。通常情况下，需要提供一个自定义的 RowMapper 实现，用于将查询结果映射为特定类型的对象。</li>
  <li><code class="language-plaintext highlighter-rouge">args</code>：可变参数，用于指定 SQL 查询语句中的参数值。这些参数将替换 SQL 查询语句中的占位符（如果有的话）。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">RowMapper&lt;T&gt;</code>接口有一个方法：<code class="language-plaintext highlighter-rouge">T mapRow(ResultSet rs, int rowNum) throws SQLException;</code>。</p>

<p>实现必须实现此方法才能映射 <code class="language-plaintext highlighter-rouge">ResultSet</code> 中的每一行数据。此方法不应调用 <code class="language-plaintext highlighter-rouge">next()</code> <code class="language-plaintext highlighter-rouge">ResultSet</code>;它只应映射当前行的值。</p>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">rs</code> – 要映射的 <code class="language-plaintext highlighter-rouge">ResultSet</code>（针对当前行预先初始化）</li>
  <li><code class="language-plaintext highlighter-rouge">rowNum</code> – 当前行的编号</li>
</ul>

<hr />

<p>如果需要处理多行结果集，应该使用<code class="language-plaintext highlighter-rouge">query</code>方法，并提供一个合适的<code class="language-plaintext highlighter-rouge">ResultSetExtractor</code>来处理整个结果集。<code class="language-plaintext highlighter-rouge">query</code>方法允许在<code class="language-plaintext highlighter-rouge">ResultSetExtractor</code>的实现中处理每一行数据，并且可以<strong>自由地调用</strong><code class="language-plaintext highlighter-rouge">rs.next()</code>来移动到结果集的下一行。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="kt">int</span> <span class="n">pageIndex</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">*</span> <span class="o">(</span><span class="n">pageIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT ? OFFSET ?"</span><span class="o">,</span>
            <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
            <span class="n">limit</span><span class="o">,</span> <span class="n">offset</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>方法签名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">query</span><span class="o">(</span><span class="nc">String</span> <span class="n">sql</span><span class="o">,</span> <span class="nc">RowMapper</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">rowMapper</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">){}</span>
</code></pre></div></div>

<p>这里参数同<code class="language-plaintext highlighter-rouge">queryForObject</code>，这里我们直接使用Spring提供的<code class="language-plaintext highlighter-rouge">BeanPropertyRowMapper</code>。如果数据库表的结构恰好和JavaBean的属性名称一致，那么<code class="language-plaintext highlighter-rouge">BeanPropertyRowMapper</code>就可以直接把一行记录按列名转换为JavaBean，注意要符合JavaBean规范。</p>

<hr />

<p>如果执行的不是查询，而是插入、更新和删除操作，那么需要使用<code class="language-plaintext highlighter-rouge">update()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 传入SQL，SQL参数，返回更新的行数:</span>
    <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"UPDATE users SET name = ? WHERE id = ?"</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"User not found by id"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>方法签名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="nc">String</span> <span class="n">sql</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">){}</span>
</code></pre></div></div>

<p>参数解释如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sql</code>：要执行的 SQL 查询语句。</li>
  <li><code class="language-plaintext highlighter-rouge">args</code>：可变参数，用于指定 SQL 查询语句中的参数值。这些参数将替换 SQL 查询语句中的占位符（如果有的话）。</li>
</ul>

<p>只有一种<code class="language-plaintext highlighter-rouge">INSERT</code>操作比较特殊，那就是如果某一列是自增列（例如自增主键），<strong>通常需要获取插入后的自增值</strong>。<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>提供了一个<code class="language-plaintext highlighter-rouge">KeyHolder</code>来简化这一操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">long</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个KeyHolder:</span>
    <span class="nc">KeyHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GeneratedKeyHolder</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span>
            <span class="c1">// 参数1:PreparedStatementCreator</span>
            <span class="o">(</span><span class="n">conn</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="c1">// 创建PreparedStatement时，必须指定RETURN_GENERATED_KEYS:</span>
                <span class="kt">var</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">"INSERT INTO users(email, password, name) VALUES(?, ?, ?)"</span><span class="o">,</span>
                        <span class="nc">Statement</span><span class="o">.</span><span class="na">RETURN_GENERATED_KEYS</span><span class="o">);</span>
                <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">);</span>
                <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
                <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
                <span class="k">return</span> <span class="n">ps</span><span class="o">;</span>
            <span class="o">},</span>
            <span class="c1">// 参数2:KeyHolder</span>
            <span class="n">holder</span><span class="o">)</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"插入失败。"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// 从KeyHolder中获取返回的自增值:</span>
    <span class="k">return</span> <span class="n">holder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">longValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">KeyHolder</code> 接口定义了用于检索主键的方法，通常用于处理由 JDBC 插入语句返回的自动生成的主键。以下是 <code class="language-plaintext highlighter-rouge">KeyHolder</code> 接口中的方法解释：</p>

<p><code class="language-plaintext highlighter-rouge">Number getKey()</code>:</p>

<ul>
  <li>从第一个 Map 中检索第一个项目，假设<strong>只有一个项目</strong>和一个 Map，并且该项目是一个数字。这是典型情况下用于获取单个数字生成的主键值。</li>
  <li>如果在 Map 或 List 中遇到多个条目，表示返回了多个主键，则会抛出 <code class="language-plaintext highlighter-rouge">InvalidDataAccessApiUsageException</code> 异常。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt; getKeys()</code>:</p>

<ul>
  <li>
    <p>检索包含主键的第一个 Map。如果列表中有多个条目（表示<strong>多行</strong>返回了主键），则会抛出 <code class="language-plaintext highlighter-rouge">InvalidDataAccessApiUsageException</code> 异常。
<code class="language-plaintext highlighter-rouge">List&lt;Map&lt;String, Object&gt;&gt; getKeyList()</code>:</p>
  </li>
  <li>
    <p>返回包含主键的 List 的引用。可以用于提取<strong>多行</strong>的主键（不常见的情况），也可以用于添加新的主键 Map。</p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">KeyHolder</code> 接口的实现通常由 Spring 的 <code class="language-plaintext highlighter-rouge">JdbcTemplate</code> 在执行插入操作后自动填充并返回，以便可以方便地获取生成的主键值。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">JdbcTemplate</code>只是对JDBC操作的一个简单封装，它的目的是尽量减少手动编写<code class="language-plaintext highlighter-rouge">try(resource) {...}</code>的代码，对于查询，主要通过<code class="language-plaintext highlighter-rouge">RowMapper</code>实现了JDBC结果集到Java对象的转换。</p>

<p>总结一下<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的用法，那就是：</p>

<ul>
  <li>针对简单查询，优选<code class="language-plaintext highlighter-rouge">query()</code>和<code class="language-plaintext highlighter-rouge">queryForObject()</code>，因为只需提供SQL语句、参数和<code class="language-plaintext highlighter-rouge">RowMapper</code>；</li>
  <li>针对更新操作，优选<code class="language-plaintext highlighter-rouge">update()</code>，因为只需提供SQL语句和参数；</li>
  <li>任何复杂的操作，最终也可以通过<code class="language-plaintext highlighter-rouge">execute(ConnectionCallback)</code>实现，因为拿到<code class="language-plaintext highlighter-rouge">Connection</code>就可以做任何JDBC操作。</li>
</ul>

<p>实际上使用最多的仍然是各种查询。如果在设计表结构的时候，能够和JavaBean的属性一一对应，那么直接使用<code class="language-plaintext highlighter-rouge">BeanPropertyRowMapper</code>就很方便。如果表结构和JavaBean不一致怎么办？那就需要稍微改写一下查询，使结果集的结构和JavaBean保持一致。</p>

<p>例如，表的列名是<code class="language-plaintext highlighter-rouge">office_address</code>，而JavaBean属性是<code class="language-plaintext highlighter-rouge">workAddress</code>，就需要指定别名，改写查询如下：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">office_address</span> <span class="k">AS</span> <span class="n">workAddress</span><span class="p">,</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">email</span> <span class="o">=</span> <span class="o">?</span>
</code></pre></div></div>

<h3 id="事务">事务</h3>

<p>事务必须服从ACID原则。ACID指的是：原子性（atomicity）、一致性（consistency）、隔离性（isolation）和持久性（durability）。通俗理解，事务其实就是一系列指令的集合。</p>

<table>
  <thead>
    <tr>
      <th>名词</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>原子性</td>
      <td>操作这些指令时，要么全部执行成功，要么全部不执行。只要其中一个指令执行失败，所有的指令都执行失败，数据进行回滚，回到执行指令前的数据状态。</td>
    </tr>
    <tr>
      <td>一致性</td>
      <td>事务的执行使数据从一个状态转换为另一个状态，但是对于整个数据的完整性保持稳定。</td>
    </tr>
    <tr>
      <td>隔离性</td>
      <td>在该事务执行的过程中，无论发生的任何数据的改变都应该只存在于该事务之中，对外界不存在任何影响。只有在事务确定正确提交之后，才会显示该事务对数据的改变。其他事务才能获取到这些改变后的数据。</td>
    </tr>
    <tr>
      <td>持久性</td>
      <td>当事务正确完成后，它对于数据的改变是永久性的。</td>
    </tr>
  </tbody>
</table>

<h4 id="编程式事务管理">编程式事务管理</h4>

<p>在代码中显式调用 <code class="language-plaintext highlighter-rouge">beginTransaction</code>、<code class="language-plaintext highlighter-rouge">commit</code>、<code class="language-plaintext highlighter-rouge">rollback</code>等与事务处理相关的方法，这就是编程式事务管理。只有少数事务操作时，编程式事务管理才比较合适。</p>

<p><strong>基于底层API的编程式事务管理</strong></p>

<p>基于底层API 的编程式事务管理就是根据<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code> 、<code class="language-plaintext highlighter-rouge">TransactionDefinition</code> 和<code class="language-plaintext highlighter-rouge">TransactionStatus</code> 几个核心接口，通过编程的方式来进行事务处理。</p>

<p>Spring提供了一个<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>来表示事务管理器，所有的事务都由它负责管理。而事务由<code class="language-plaintext highlighter-rouge">TransactionStatus</code>表示。如果手写事务代码，使用<code class="language-plaintext highlighter-rouge">try...catch</code>如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TransactionStatus</span> <span class="n">tx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="cm">/*开启ts事务*/</span>
    <span class="n">tx</span> <span class="o">=</span> <span class="n">txManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">());</span>
    <span class="c1">// 相关JDBC操作:</span>
    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
    <span class="cm">/*提交事务,并关闭*/</span>
    <span class="n">txManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="cm">/*出现异常,中断ts事务并事务回滚,若不执行则ts事务将开启至程序结束*/</span>
    <span class="n">txManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
    <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring为啥要抽象出<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>和<code class="language-plaintext highlighter-rouge">TransactionStatus</code>？原因是JavaEE除了提供JDBC事务外，它还支持分布式事务JTA（Java Transaction API）。分布式事务是指多个数据源（比如多个数据库，多个消息系统）要在分布式环境下实现事务的时候，应该怎么实现。分布式事务实现起来非常复杂，简单地说就是通过一个分布式事务管理器实现两阶段提交，但本身数据库事务就不快，基于数据库事务实现的分布式事务就慢得难以忍受，所以使用率不高。</p>

<p>Spring为了同时支持JDBC和JTA两种事务模型，就抽象出<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>。因为我们的代码只需要JDBC事务，因此，在<code class="language-plaintext highlighter-rouge">AppConfig</code>中，需要再定义一个<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>对应的Bean，它的实际类型是<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"jdbc.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>完整示例：</p>

<p>初始化与dao：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="n">password</span><span class="o">,</span><span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">name</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="kt">int</span> <span class="n">pageIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">*</span> <span class="o">(</span><span class="n">pageIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT ? OFFSET ?"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
                <span class="n">limit</span><span class="o">,</span> <span class="n">offset</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 传入SQL，SQL参数，返回更新的行数:</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"INSERT INTO users(id,email, password, name) VALUES(?,?,?,?)"</span>
                <span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"更新出错"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">jdbc.properties</code>:</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 数据库文件名为testdb:
</span><span class="py">jdbc.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb</span>

<span class="c"># Hsqldb默认的用户名是sa，口令是空字符串:
</span><span class="py">jdbc.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">jdbc.password</span><span class="p">=</span>
</code></pre></div></div>

<p>启动类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TransactionStatus</span> <span class="n">tx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">PlatformTransactionManager</span> <span class="n">txManager</span><span class="o">=</span><span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">PlatformTransactionManager</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="cm">/*开启ts事务*/</span>
            <span class="n">tx</span> <span class="o">=</span> <span class="n">txManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">());</span>
            <span class="c1">// 相关JDBC操作:</span>
            <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
            <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
            <span class="cm">/*提交事务,并关闭*/</span>
            <span class="n">txManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="cm">/*出现异常,中断ts事务并事务回滚,若不执行则ts事务将开启至程序结束*/</span>
            <span class="n">txManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
            <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：<code class="language-plaintext highlighter-rouge">[]</code>，加上相同主键异常。因为回滚了事务，所以没有插入任何一条数据。</p>

<p>去掉事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
    <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
<span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[User{id=1, email='1@qq.com', password='小米', name='1'}]
</code></pre></div></div>

<p>第一条插入成功了。</p>

<p>使用事务时，要特别注意使用提交或回滚结束事务，如果不及时提交或者回滚，当另一个事务需要对本事务中影响的行进行<strong>更新</strong>的时候是会被阻塞的。一直等到事务超时释放。所以一个事物要么尽快提交，要么尽快回滚。</p>

<h4 id="基于transactiontemplate的编程式事务管理">基于<code class="language-plaintext highlighter-rouge">TransactionTemplate</code>的编程式事务管理</h4>

<p>事务处理的代码散落在业务逻辑代码中，破坏了原有代码的条理性， 并且每一个业务方法都包含了类似的启动事务、提交以及回滚事务的样板代码。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionTemplate</code> 的<code class="language-plaintext highlighter-rouge">execute</code> 方法有一个<code class="language-plaintext highlighter-rouge">TransactionCallback</code> 接口类型的参数，该接口中定义了一个<code class="language-plaintext highlighter-rouge">doInTransaction</code>方法。在这里可以使用默认的事务提交和回滚规则，在业务代码中不需要显式调用任何事务处理的API。</p>

<p><code class="language-plaintext highlighter-rouge">dolnTransaction</code>方法有一个<code class="language-plaintext highlighter-rouge">TransactionStatus</code> 类型的参数，可以在方法的任何位置调用该参数的<code class="language-plaintext highlighter-rouge">setRollbackOnly</code>方法将事务<strong>标识</strong>为回滚，以执行事务回滚。</p>

<p>根据默认规则，如果在执行回调方法的过程中抛出了<strong>未检查异常（也即运行时异常）</strong>，或者显式调用了<code class="language-plaintext highlighter-rouge">setRollbackOnly</code>方法，则回滚事务；如果事务执行完成或者抛出了<code class="language-plaintext highlighter-rouge">checked</code> 类型的异常，则提交事务。</p>

<p>示例，在上个例子添加代码：</p>

<p><code class="language-plaintext highlighter-rouge">Config</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Bean</span>
    <span class="nc">TransactionTemplate</span> <span class="nf">createTransactionTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">PlatformTransactionManager</span> <span class="n">ptm</span><span class="o">){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">TransactionTemplate</span><span class="o">(</span><span class="n">ptm</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">UserService</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
	<span class="o">...</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUsers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">){</span>
        <span class="n">tt</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">TransactionCallback</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">doInTransaction</span><span class="o">(</span><span class="nc">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="k">for</span> <span class="o">(</span><span class="nc">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">insertUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
                    <span class="n">status</span><span class="o">.</span><span class="na">setRollbackOnly</span><span class="o">();</span><span class="cm">/*显示调用回滚*/</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
            <span class="n">userService</span><span class="o">.</span><span class="na">insertUsers</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：<code class="language-plaintext highlighter-rouge">[]</code>，加上相同主键异常。因为回滚了事务，所以没有插入任何一条数据。</p>

<h4 id="声明式事务">声明式事务</h4>

<p>使用编程的方式使用Spring事务仍然比较繁琐，更好的方式是通过声明式事务来实现。</p>

<p>声明式事务管理最大的优点是不需要通过编程的方式管理事务，因而不需要在业务逻辑代码中掺杂事务处理的代码，只需相关的事务规则声明便可以将事务规则应用到业务逻辑中。通常情况下，在开发中使用声明式事务处理不仅因为其简单，更主要的是因为这样使得纯业务代码不被污染，极大地方便了后期的代码维护。</p>

<p>与编程式事务管理相比，声明式事务管理唯一不足的地方是最细粒度只能作用到方法级别，无法做到像编程式事务管理那样可以作用到代码块级别。但即便有这样的需求，也可以通过变通的方法进行解决，例如可以将需要进行事务处理的代码块独立为方法等。</p>

<p>Spring 的声明式事务管理可以通过两种方式来实现，一是基于XML 的方式， 二是基于<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解的方式。</p>

<h5 id="基于xml">基于XML</h5>

<p>基于XML方式的声明式事务管理是通过在配置文件中配置事务规则的相关声明来实现的。Spring框架提供了<code class="language-plaintext highlighter-rouge">tx</code>命名空间来配置事务，提供了<code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code>元素来配置事务的通知。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code> 标签：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">id</code> 属性：用于给事务通知指定一个唯一的标识符。</li>
  <li><code class="language-plaintext highlighter-rouge">transaction-manager</code> 属性：指定要使用的事务管理器的名称。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">&lt;tx:attributes&gt;</code> 标签：</p>

<ul>
  <li>该标签用于定义事务的属性，即事务的行为和配置。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;tx:method&gt;</code> 标签用于指定要应用事务的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">name</code> 属性：用于指定方法的名称。</li>
  <li>其他属性（如 <code class="language-plaintext highlighter-rouge">propagation</code>、<code class="language-plaintext highlighter-rouge">isolation</code>、<code class="language-plaintext highlighter-rouge">timeout</code>、<code class="language-plaintext highlighter-rouge">readOnly</code> 等）可以用于进一步配置事务的行为。</li>
</ul>

<p>下面是一个示例，展示了如何使用 <code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code> 标签及其子标签：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;tx:advice</span> <span class="na">id=</span><span class="s">"myAdvice"</span> <span class="na">transaction-manager=</span><span class="s">"transactionManager"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tx:attributes&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"insert*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">isolation=</span><span class="s">"DEFAULT"</span> <span class="na">timeout=</span><span class="s">"10"</span> <span class="na">readOnly=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"update*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">isolation=</span><span class="s">"DEFAULT"</span> <span class="na">timeout=</span><span class="s">"10"</span> <span class="na">readOnly=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"delete*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">isolation=</span><span class="s">"DEFAULT"</span> <span class="na">timeout=</span><span class="s">"10"</span> <span class="na">readOnly=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"get*"</span> <span class="na">propagation=</span><span class="s">"SUPPORTS"</span> <span class="na">isolation=</span><span class="s">"DEFAULT"</span> <span class="na">timeout=</span><span class="s">"10"</span> <span class="na">readOnly=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/tx:attributes&gt;</span>
<span class="nt">&lt;/tx:advice&gt;</span>
</code></pre></div></div>

<p>在上述示例中，事务通知（<code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code>）被命名为 <code class="language-plaintext highlighter-rouge">myAdvice</code>，并使用名为 <code class="language-plaintext highlighter-rouge">transactionManager</code> 的事务管理器。<code class="language-plaintext highlighter-rouge">&lt;tx:attributes&gt;</code> 标签下定义了多个 <code class="language-plaintext highlighter-rouge">&lt;tx:method&gt;</code> 标签，每个标签指定了一个方法的事务属性。例如，<code class="language-plaintext highlighter-rouge">name="insert*"</code> 表示匹配以 “insert” 开头的方法，并将其配置为使用 <code class="language-plaintext highlighter-rouge">REQUIRED</code> 传播行为、<code class="language-plaintext highlighter-rouge">DEFAULT</code> 隔离级别、<code class="language-plaintext highlighter-rouge">10</code> 秒的超时时间和非只读模式。</p>

<p>在<code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code>元素自己置了事务的增强处理后就可以通过编写AOP配置让Spring自动对目标对象生成代理。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 是 Spring AOP 配置中的一个标签，用于定义切面（aspect）和切入点（pointcut）之间的关联关系。它允许将一个切面应用于一个或多个切入点，以便在匹配的方法执行时执行相应的通知（advice）。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 标签具有以下属性：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">advice-ref</code>：指定要应用的通知的引用。通常是一个事务通知、日志记录通知或其他自定义通知。</li>
  <li><code class="language-plaintext highlighter-rouge">pointcut-ref</code>：指定要应用通知的切入点的引用。切入点定义了哪些方法将被通知所影响。</li>
  <li><code class="language-plaintext highlighter-rouge">order</code>：指定切面的执行顺序。如果有多个切面应用于同一个切入点，可以使用 <code class="language-plaintext highlighter-rouge">order</code> 属性来控制它们的执行顺序。</li>
</ul>

<p>以下是一个示例，展示了如何使用 <code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 标签：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aop:config&gt;</span>
    <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">"cut"</span> <span class="na">expression=</span><span class="s">"execution(void com.example.service.UserService.saveUser(..))"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"myAdvice"</span> <span class="na">pointcut-ref=</span><span class="s">"cut"</span> <span class="na">order=</span><span class="s">"1"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<p>在上述示例中，<code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code> 标签用于配置 AOP。<code class="language-plaintext highlighter-rouge">&lt;aop:pointcut&gt;</code> 标签定义了一个切入点，它匹配了 <code class="language-plaintext highlighter-rouge">com.example.service.UserService</code> 类的 <code class="language-plaintext highlighter-rouge">saveUser</code> 方法。<code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 标签将切面（<code class="language-plaintext highlighter-rouge">myAdvice</code>）和切入点（<code class="language-plaintext highlighter-rouge">cut</code>）关联起来，并指定了执行顺序为 1。</p>

<p>当出现unchecked异常时会发生回滚。</p>

<p>在编程式事务管理实例上修改为基于XML形式：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="na">xmlns:aop=</span><span class="s">"http://www.springframework.org/schema/aop"</span>
       <span class="na">xmlns:tx=</span><span class="s">"http://www.springframework.org/schema/tx"</span> <span class="na">xmlns:context=</span><span class="s">"http://www.springframework.org/schema/context"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"location"</span> <span class="na">value=</span><span class="s">"classpath:jdbc.properties"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"hikariConfig"</span> <span class="na">class=</span><span class="s">"com.zaxxer.hikari.HikariConfig"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jdbcUrl"</span> <span class="na">value=</span><span class="s">"${jdbc.url}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">"${jdbc.username}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"${jdbc.password}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSourceProperties"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;props&gt;</span>
                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"autoCommit"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/prop&gt;</span>
                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"connectionTimeout"</span><span class="nt">&gt;</span>5000<span class="nt">&lt;/prop&gt;</span>
                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"idleTimeout"</span><span class="nt">&gt;</span>60000<span class="nt">&lt;/prop&gt;</span>
            <span class="nt">&lt;/props&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"com.zaxxer.hikari.HikariDataSource"</span> <span class="na">destroy-method=</span><span class="s">"close"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"hikariConfig"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"jdbcTemplate"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.core.JdbcTemplate"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"transactionManager"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="c">&lt;!--扫描自动装配，其他的Bean懒得手动写了--&gt;</span>
    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"com.aotmd.test"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!--编写通知声明事务--&gt;</span>
    <span class="nt">&lt;tx:advice</span> <span class="na">id=</span><span class="s">"myAdvice"</span> <span class="na">transaction-manager=</span><span class="s">"transactionManager"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;tx:attributes&gt;&lt;tx:method</span> <span class="na">name=</span><span class="s">"*"</span><span class="nt">/&gt;</span><span class="c">&lt;!--*表示任意方法--&gt;</span><span class="nt">&lt;/tx:attributes&gt;</span>
    <span class="nt">&lt;/tx:advice&gt;</span>
    <span class="nt">&lt;aop:config&gt;</span><span class="c">&lt;!--编写AOP,让spring自动对目标对象生成代理,需要使用AspectJ的表达式--&gt;</span>
        <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">"cut"</span> <span class="na">expression=</span><span class="s">"execution(void com.aotmd.test.UserService.insertUsers(..))"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"myAdvice"</span> <span class="na">pointcut-ref=</span><span class="s">"cut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--切面,将切入点与通知关联--&gt;</span>
    <span class="nt">&lt;/aop:config&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>上述XML配置是使用Spring的AOP（面向切面编程）来配置事务管理的示例。</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code> 元素定义了一个事务通知（advice），它的id属性设置为<code class="language-plaintext highlighter-rouge">myAdvice</code>，并指定了事务管理器为<code class="language-plaintext highlighter-rouge">transactionManager</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;tx:attributes&gt;</code> 元素用于定义事务的属性，这里使用了<code class="language-plaintext highlighter-rouge">&lt;tx:method&gt;</code> 元素，并设置<code class="language-plaintext highlighter-rouge">name</code>属性为<code class="language-plaintext highlighter-rouge">*</code>，表示适用于所有方法，<code class="language-plaintext highlighter-rouge">&lt;tx:method&gt;</code> 标签是在 <code class="language-plaintext highlighter-rouge">&lt;aop:pointcut&gt;</code> 标签匹配的基础上再进行一次匹配过滤。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code> 元素用于配置AOP，它包含了切入点和通知的定义。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;aop:pointcut&gt;</code> 元素定义了一个切入点（pointcut），它的<code class="language-plaintext highlighter-rouge">id</code>属性设置为<code class="language-plaintext highlighter-rouge">cut</code>，并使用了AspectJ表达式来匹配目标对象的方法。在这个示例中，切入点表达式为<code class="language-plaintext highlighter-rouge">execution(void com.aotmd.test.UserService.insertUsers(..))</code>，表示匹配<code class="language-plaintext highlighter-rouge">com.aotmd.test.UserService</code> 类中的<code class="language-plaintext highlighter-rouge">insertUsers</code> 方法。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 元素用于将切入点和通知关联起来，它的<code class="language-plaintext highlighter-rouge">advice-ref</code>属性指定了要使用的通知<code class="language-plaintext highlighter-rouge">myAdvice</code>，<code class="language-plaintext highlighter-rouge">pointcut-ref</code>属性指定了要使用的切入点<code class="language-plaintext highlighter-rouge">cut</code>。</li>
</ol>

<p>通过上述配置，Spring会自动为匹配切入点的方法生成代理，并在方法执行前后应用事务通知。事务通知会根据事务属性（在<code class="language-plaintext highlighter-rouge">&lt;tx:attributes&gt;</code>中定义）来管理事务的开始、提交或回滚。</p>

<p><code class="language-plaintext highlighter-rouge">com.aotmd.test.Test4</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
            <span class="n">userService</span><span class="o">.</span><span class="na">insertUsers</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="n">password</span><span class="o">,</span><span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">name</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="kt">int</span> <span class="n">pageIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">*</span> <span class="o">(</span><span class="n">pageIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT ? OFFSET ?"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
                <span class="n">limit</span><span class="o">,</span> <span class="n">offset</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 传入SQL，SQL参数，返回更新的行数:</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"INSERT INTO users(id,email, password, name) VALUES(?,?,?,?)"</span>
                <span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"更新出错"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUsers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">insertUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：<code class="language-plaintext highlighter-rouge">[]</code>，加上相同主键异常。因为回滚了事务，所以没有插入任何一条数据。</p>

<h5 id="基于transactional-注解实例">基于<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解实例</h5>

<p>Spring对一个声明式事务的方法，是如何开启的事务支持？原理仍然是AOP代理，即通过自动创建Bean的Proxy实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span><span class="err">$</span><span class="n">$EnhancerBySpringCGLIB</span> <span class="kd">extends</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nc">UserService</span> <span class="n">target</span> <span class="o">=</span> <span class="o">...</span>
    <span class="nc">PlatformTransactionManager</span> <span class="n">txManager</span> <span class="o">=</span> <span class="o">...</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">TransactionStatus</span> <span class="n">tx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">tx</span> <span class="o">=</span> <span class="n">txManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">());</span>
            <span class="n">target</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
            <span class="n">txManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">txManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
            <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 注解可以作用于<strong>接口、接口方法、类以及类的方法</strong>上。当作用于类上时，该类的所有<code class="language-plaintext highlighter-rouge">public</code> 方法都将具有该类型的事务属性。当Spring检测到带有<code class="language-plaintext highlighter-rouge">@Transactional</code>注解的方法时，它会使用配置的事务管理器来管理这些方法的事务。</p>

<p>同时也可以在方法级别使用该注解来<strong>覆盖</strong>类级别的定义。虽然<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解可以作用于接口、接口方法、类以及类的方法上，但是Spring小组建议不要在接口或者接口方法上使用该注解，因为它只有在使用基于接口的代理时才会生效。</p>

<p>另外， <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解应该只被应用到 <code class="language-plaintext highlighter-rouge">public</code> 方法上，这是由 Spring AOP 的本质决定的。如果你在 <code class="language-plaintext highlighter-rouge">protected</code>、<code class="language-plaintext highlighter-rouge">private</code> 或者默认可见性的方法上使用 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解，这将被忽略，也不会抛出任何异常。</p>

<p>当出现unchecked异常时会发生回滚。</p>

<p>如果不想对某个异常进行事务处理， 可以使用如下代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span><span class="o">=</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">//不对RuntimeException回滚生效</span>
<span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span><span class="o">=</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">//不对Exception回滚生效</span>
</code></pre></div></div>

<p>另外，<strong>需要确保在Spring的配置类中启用了事务管理</strong>，可以通过在<strong>配置类</strong>上添加<code class="language-plaintext highlighter-rouge">@EnableTransactionManagement</code>注解来启用事务管理。</p>

<p><strong>注意：声明了<code class="language-plaintext highlighter-rouge">@EnableTransactionManagement</code>后，不必额外添加<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>。</strong></p>

<p>不过<code class="language-plaintext highlighter-rouge">@EnableTransactionManagement</code>只会处理事务的注解，AOP的注解还是需要<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>来处理。</p>

<p>在编程式事务管理实例上修改添加：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Controller</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">controller</span><span class="o">.</span><span class="na">test1</span><span class="o">();</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">Controller</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">(){</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：<code class="language-plaintext highlighter-rouge">[]</code>，加上相同主键异常。</p>

<p>去掉<code class="language-plaintext highlighter-rouge">@Transactional</code>后：<code class="language-plaintext highlighter-rouge">[User{id=1, email='1@qq.com', password='小米', name='1'}]</code>，加上相同主键异常。</p>

<p>基于<code class="language-plaintext highlighter-rouge">TransactionDefinition</code> 、<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>、<code class="language-plaintext highlighter-rouge">TransactionStatus</code> 的编程式事务管理是Spring 提供的最原始的方式，通常在实际工程中不推荐使用，但了解这种方式对理解Spring 事务处理的本质有很大帮助。</p>

<p>基于<code class="language-plaintext highlighter-rouge">TransactionTemplate</code> 的编程式事务管理是对上一种方式的封装，使得编码更简单、清晰。基于<code class="language-plaintext highlighter-rouge">@Transactional</code> 的方式将事务管理简化到了极致，极大地提高了编程开发效率。</p>

<h4 id="事务回滚">事务回滚</h4>

<p>默认情况下，如果发生了<code class="language-plaintext highlighter-rouge">RuntimeException</code>，Spring的声明式事务将自动回滚。在一个事务方法中，如果程序判断需要回滚事务，只需抛出<code class="language-plaintext highlighter-rouge">RuntimeException</code>。</p>

<p>如果要针对Checked Exception回滚事务，需要在<code class="language-plaintext highlighter-rouge">@Transactional</code>注解中写出来：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">IOException</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</code></pre></div></div>

<p>上述代码表示在抛出<code class="language-plaintext highlighter-rouge">RuntimeException</code>或<code class="language-plaintext highlighter-rouge">IOException</code>时，事务将回滚。</p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 注解中定义了以下方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">value()</code>：用于设置事务管理器的别名，是 <code class="language-plaintext highlighter-rouge">transactionManager()</code> 方法的别名。</li>
  <li><code class="language-plaintext highlighter-rouge">transactionManager()</code>：用于设置事务管理器的限定符值，可以用来确定目标事务管理器，匹配特定的 <code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code> bean 定义。</li>
  <li><code class="language-plaintext highlighter-rouge">propagation()</code>：用于设置事务传播类型，默认为 <code class="language-plaintext highlighter-rouge">Propagation.REQUIRED</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">isolation()</code>：用于设置事务隔离级别，默认为 <code class="language-plaintext highlighter-rouge">Isolation.DEFAULT</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">timeout()</code>：用于设置事务超时时间，单位秒，默认为底层事务系统的默认超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">readOnly()</code>：用于设置事务是否为只读，默认为 <code class="language-plaintext highlighter-rouge">false</code>。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">rollbackFor()</code>：定义了必须导致事务回滚的异常类，可以是 <code class="language-plaintext highlighter-rouge">Throwable</code> 的子类。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">rollbackForClassName()</code>：定义了必须导致事务回滚的异常类名，可以是 <code class="language-plaintext highlighter-rouge">Throwable</code> 的子类的类名。</li>
  <li><code class="language-plaintext highlighter-rouge">noRollbackFor()</code>：定义了不应导致事务回滚的异常类，可以是 <code class="language-plaintext highlighter-rouge">Throwable</code> 的子类。</li>
  <li><code class="language-plaintext highlighter-rouge">noRollbackForClassName()</code>：定义了不应导致事务回滚的异常类名，可以是 <code class="language-plaintext highlighter-rouge">Throwable</code> 的子类的类名。</li>
</ul>

<p>这些方法用于配置 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解的属性，以便在应用程序中定义事务行为。</p>

<h4 id="事务边界">事务边界</h4>

<p>在使用事务的时候，明确事务边界非常重要。对于声明式事务，例如，下面的<code class="language-plaintext highlighter-rouge">register()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 事务开始</span>
       <span class="o">...</span>
    <span class="o">}</span> <span class="c1">// 事务结束</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它的事务边界就是<code class="language-plaintext highlighter-rouge">register()</code>方法开始和结束。</p>

<p>类似的，一个负责给用户增加积分的<code class="language-plaintext highlighter-rouge">addBonus()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BonusService</span> <span class="o">{</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addBonus</span><span class="o">(</span><span class="kt">long</span> <span class="n">userId</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bonus</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 事务开始</span>
       <span class="o">...</span>
    <span class="o">}</span> <span class="c1">// 事务结束</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它的事务边界就是<code class="language-plaintext highlighter-rouge">addBonus()</code>方法开始和结束。</p>

<p>用户注册后，能自动获得100积分，因此，实际代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">BonusService</span> <span class="n">bonusService</span><span class="o">;</span>

    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 插入用户记录:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
        <span class="c1">// 增加100积分:</span>
        <span class="n">bonusService</span><span class="o">.</span><span class="na">addBonus</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>调用方（比如<code class="language-plaintext highlighter-rouge">RegisterController</code>）调用<code class="language-plaintext highlighter-rouge">UserService.register()</code>这个事务方法，该方法在内部又调用了<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>这个事务方法，一共有几个事务？如果<code class="language-plaintext highlighter-rouge">addBonus()</code>抛出了异常需要回滚事务，<code class="language-plaintext highlighter-rouge">register()</code>方法的事务是否也要回滚？</p>

<h4 id="事务传播">事务传播</h4>

<p>要解决上面的问题，首先要定义事务的传播模型。</p>

<p>假设用户注册的入口是<code class="language-plaintext highlighter-rouge">RegisterController</code>，它本身没有事务，仅仅是调用<code class="language-plaintext highlighter-rouge">UserService.register()</code>这个事务方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RegisterController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/register"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">doRegister</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
        <span class="k">return</span> <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因此，<code class="language-plaintext highlighter-rouge">UserService.register()</code>这个事务方法的起始和结束，就是事务的范围。</p>

<p>需要关心的问题是，在<code class="language-plaintext highlighter-rouge">UserService.register()</code>这个事务方法内，调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>，应该期待的事务行为是什么：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 事务已开启:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
    <span class="c1">// ???:</span>
    <span class="n">bonusService</span><span class="o">.</span><span class="na">addBonus</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
<span class="o">}</span> <span class="c1">// 事务结束</span>
</code></pre></div></div>

<p>对于大多数业务来说，<code class="language-plaintext highlighter-rouge">UserService.register()</code>已经开启了一个事务，那么在内部调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>时，<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法就没必要再开启一个新事务，直接加入到<code class="language-plaintext highlighter-rouge">BonusService.register()</code>的事务里就好了。</p>

<p>其实就相当于：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">UserService.register()</code>先执行了一条INSERT语句：<code class="language-plaintext highlighter-rouge">INSERT INTO users ...</code></li>
  <li><code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>再执行一条INSERT语句：<code class="language-plaintext highlighter-rouge">INSERT INTO bonus ...</code></li>
</ol>

<hr />

<p>Spring的声明式事务为事务传播定义了几个级别，默认传播级别就是<code class="language-plaintext highlighter-rouge">REQUIRED</code>，它的意思是，如果当前<strong>没有</strong>事务，<strong>就创建</strong>一个新事务，如果当前<strong>有</strong>事务，<strong>就加入</strong>到当前事务中执行。</p>

<p><code class="language-plaintext highlighter-rouge">UserService.register()</code>方法，它在<code class="language-plaintext highlighter-rouge">RegisterController</code>中执行，因为<code class="language-plaintext highlighter-rouge">RegisterController</code>没有事务，因此，<code class="language-plaintext highlighter-rouge">UserService.register()</code>方法会自动创建一个新事务。</p>

<p>在<code class="language-plaintext highlighter-rouge">UserService.register()</code>方法内部，调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法时，因为<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>检测到当前已经有事务了，因此，它会加入到当前事务中执行。</p>

<p>因此，整个业务流程的事务边界就清晰了：它只有一个事务，并且范围就是<code class="language-plaintext highlighter-rouge">UserService.register()</code>方法。</p>

<p>把<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法的<code class="language-plaintext highlighter-rouge">@Transactional</code>去掉，变成一个普通方法，那不就规避了复杂的传播模型吗？</p>

<p>去掉<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法的<code class="language-plaintext highlighter-rouge">@Transactional</code>，会引来另一个问题，即其他地方如果调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法，那就没法保证事务了。</p>

<hr />

<p>默认的事务传播级别是<code class="language-plaintext highlighter-rouge">REQUIRED</code>，它满足绝大部分的需求。还有一些其他的传播级别：</p>

<p><code class="language-plaintext highlighter-rouge">SUPPORTS</code>：表示如果<strong>有</strong>事务，<strong>就加入</strong>到当前事务，如果<strong>没有</strong>，那<strong>也不开启</strong>事务执行。这种传播级别可用于查询方法，因为<code class="language-plaintext highlighter-rouge">SELECT</code>语句既可以在事务内执行，也可以不需要事务；</p>

<p><code class="language-plaintext highlighter-rouge">MANDATORY</code>：表示<strong>必须要存在</strong>当前事务<strong>并加入</strong>执行，<strong>否则</strong>将抛出<strong>异常</strong>。这种传播级别可用于核心更新逻辑，比如用户余额变更，它总是被其他事务方法调用，不能直接由非事务方法调用；</p>

<p><code class="language-plaintext highlighter-rouge">REQUIRES_NEW</code>：表示<strong>不管</strong>当前<strong>有没有</strong>事务，都<strong>必须开启</strong>一个<strong>新的</strong>事务执行。如果当前已经有事务，那么当前事务会挂起，等新事务完成后，再恢复执行；</p>

<p><code class="language-plaintext highlighter-rouge">NOT_SUPPORTED</code>：表示<strong>不支持</strong>事务，如果当前有事务，那么当前事务会挂起，等这个方法执行完成后，再恢复执行；</p>

<p><code class="language-plaintext highlighter-rouge">NEVER</code>：和<code class="language-plaintext highlighter-rouge">NOT_SUPPORTED</code>相比，它不但<strong>不支持</strong>事务，而且在<strong>监测到</strong>当前有事务时，会抛出<strong>异常</strong>拒绝执行；</p>

<p><code class="language-plaintext highlighter-rouge">NESTED</code>：表示<strong>如果当前有</strong>事务，则<strong>开启一个嵌套</strong>级别事务，如果当前<strong>没有</strong>事务，则开启一个<strong>新</strong>事务。</p>

<p>上面这么多种事务的传播级别，其实默认的<code class="language-plaintext highlighter-rouge">REQUIRED</code>已经满足绝大部分需求，<code class="language-plaintext highlighter-rouge">SUPPORTS</code>和<code class="language-plaintext highlighter-rouge">REQUIRES_NEW</code>在少数情况下会用到，其他基本不会用到，因为把事务搞得越复杂，不仅逻辑跟着复杂，而且速度也会越慢。</p>

<p>定义事务的传播级别也是写在<code class="language-plaintext highlighter-rouge">@Transactional</code>注解里的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="nc">Propagation</span><span class="o">.</span><span class="na">REQUIRES_NEW</span><span class="o">)</span>
</code></pre></div></div>

<hr />

<p>Spring是如何传播事务的？在JDBC中使用事务的时候，是这么个写法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">openConnection</span><span class="o">();</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="c1">// 关闭自动提交:</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
    <span class="c1">// 执行多条SQL语句:</span>
    <span class="n">insert</span><span class="o">();</span> <span class="n">update</span><span class="o">();</span> <span class="n">delete</span><span class="o">();</span>
    <span class="c1">// 提交事务:</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 回滚事务:</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring使用声明式事务，最终也是通过执行JDBC事务来实现功能的，那么，一个事务方法，如何获知当前是否存在事务？</p>

<p>答案是使用<code class="language-plaintext highlighter-rouge">ThreadLocal</code>。Spring总是把JDBC相关的<code class="language-plaintext highlighter-rouge">Connection</code>和<code class="language-plaintext highlighter-rouge">TransactionStatus</code>实例绑定到<code class="language-plaintext highlighter-rouge">ThreadLocal</code>。如果一个事务方法从<code class="language-plaintext highlighter-rouge">ThreadLocal</code>未取到事务，那么它会打开一个新的JDBC连接，同时开启一个新的事务，否则，它就直接使用从<code class="language-plaintext highlighter-rouge">ThreadLocal</code>获取的JDBC连接以及<code class="language-plaintext highlighter-rouge">TransactionStatus</code>。因此，事务能正确传播的前提是，<strong>方法调用是在一个线程内才行</strong>。如果像下面这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// BEGIN TX-A</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="c1">// BEGIN TX-B:</span>
        <span class="n">bonusService</span><span class="o">.</span><span class="na">addBonus</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
        <span class="c1">// END TX-B</span>
    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
<span class="o">}</span> <span class="c1">// END TX-A</span>
</code></pre></div></div>

<p>在另一个线程中调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>，它根本获取不到当前事务，因此，<code class="language-plaintext highlighter-rouge">UserService.register()</code>和<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>两个方法，将分别开启两个完全独立的事务。换句话说，<strong>事务只能在当前线程传播，无法跨线程传播。</strong></p>

<p>如果想实现跨线程传播事务，就要想办法把当前线程绑定到<code class="language-plaintext highlighter-rouge">ThreadLocal</code>的<code class="language-plaintext highlighter-rouge">Connection</code>和<code class="language-plaintext highlighter-rouge">TransactionStatus</code>实例传递给新线程，但实现起来非常复杂，根据异常回滚更加复杂，不推荐自己去实现。</p>

<h4 id="事务隔离级别">事务隔离级别</h4>

<p>隔离级别是指若干个并发的事务之间的隔离程度。<code class="language-plaintext highlighter-rouge">TransactionDefinition</code> 接口中定义了五个表示隔离级别的常量：</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_DEFAULT</code>：这是<strong>默认值</strong>，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是<code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_READ_COMMITTED</code>。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code>：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别<strong>不能防止脏读和不可重复读</strong>，因此很少使用该隔离级别。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_READ_COMMITTED</code>：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别<strong>可以防止脏读</strong>，这也是大多数情况下的推荐值。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_REPEATABLE_READ</code>：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别<strong>可以防止脏读和不可重复读</strong>。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_SERIALIZABLE</code>：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别<strong>可以防止脏读、不可重复读以及幻读</strong>。但是这将<strong>严重影响程序的性能</strong>。通常情况下也不会用到该级别。</p>

<p><a href="/2021/09/03/其他/#事务">具体参见</a></p>

<h3 id="使用泛型编写通用模板方法">使用泛型编写通用模板方法</h3>

<p>通用模板：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Base</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">table</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">entityClass</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">RowMapper</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">rowMapper</span><span class="o">;</span>
    <span class="cm">/*在继承该抽象类的具体实现类中生效*/</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">JdbcTemplate</span> <span class="nf">getJdbcTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setJdbcTemplate</span><span class="o">(</span><span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getParameterizedType</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">getClass</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">cls</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">()</span> <span class="o">!=</span> <span class="nc">Base</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">cls</span> <span class="o">=</span> <span class="n">cls</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nc">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">cls</span><span class="o">.</span><span class="na">getGenericSuperclass</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">instanceof</span> <span class="nc">ParameterizedType</span><span class="o">)</span> <span class="o">{</span><span class="c1">//判断是否为ParameterizedType，如果是，则表示泛型父类有实际类型参数。</span>
            <span class="nc">ParameterizedType</span> <span class="n">pt</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ParameterizedType</span><span class="o">)</span> <span class="n">type</span><span class="o">;</span>
            <span class="nc">Type</span><span class="o">[]</span> <span class="n">types</span> <span class="o">=</span> <span class="n">pt</span><span class="o">.</span><span class="na">getActualTypeArguments</span><span class="o">();</span> <span class="c1">// 获取泛型的实际类型参数的数组。</span>
            <span class="nc">Type</span> <span class="n">firstType</span> <span class="o">=</span> <span class="n">types</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// 获取第一个泛型的实际类型参数</span>
            <span class="k">return</span> <span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;)</span> <span class="n">firstType</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"找不到泛型"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">Base</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 获取当前的泛型类型:</span>
        <span class="k">this</span><span class="o">.</span><span class="na">entityClass</span> <span class="o">=</span> <span class="n">getParameterizedType</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">table</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">entityClass</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">()</span> <span class="o">+</span> <span class="s">"s"</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">rowMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="n">entityClass</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">getJdbcTemplate</span><span class="o">().</span><span class="na">queryForObject</span><span class="o">(</span><span class="s">"SELECT * FROM "</span> <span class="o">+</span> <span class="n">table</span> <span class="o">+</span> <span class="s">" WHERE id = ?"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">rowMapper</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">pageIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">*</span> <span class="o">(</span><span class="n">pageIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">getJdbcTemplate</span><span class="o">().</span><span class="na">query</span><span class="o">(</span><span class="s">"SELECT * FROM "</span> <span class="o">+</span> <span class="n">table</span> <span class="o">+</span> <span class="s">" LIMIT ? OFFSET ?"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="n">limit</span><span class="o">,</span> <span class="n">offset</span> <span class="o">},</span>
                <span class="k">this</span><span class="o">.</span><span class="na">rowMapper</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">getJdbcTemplate</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="s">"DELETE FROM "</span> <span class="o">+</span> <span class="n">table</span> <span class="o">+</span> <span class="s">" WHERE id = ?"</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后继承即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="kd">extends</span> <span class="nc">Base</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">getJdbcTemplate</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">getJdbcTemplate</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">){</span>
        <span class="c1">// 传入SQL，SQL参数，返回更新的行数:</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">getJdbcTemplate</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="s">"INSERT INTO users(id,email, password, name) VALUES(?,?,?,?)"</span>
                <span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"更新出错"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其他没有变化的类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="n">password</span><span class="o">,</span><span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">name</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[User{id=1, email='1@qq.com', password='123456', name='小米'}, User{id=2, email='2@qq.com', password='123456', name='三星'}]
User{id=1, email='1@qq.com', password='123456', name='小米'}
[User{id=2, email='2@qq.com', password='123456', name='三星'}]
</code></pre></div></div>

<h3 id="集成hibernate">集成Hibernate</h3>

<p>使用<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的时候，用得最多的方法就是<code class="language-plaintext highlighter-rouge">List&lt;T&gt; query(String, RowMapper, Object...)</code>。这个<code class="language-plaintext highlighter-rouge">RowMapper</code>的作用就是把<code class="language-plaintext highlighter-rouge">ResultSet</code>的一行记录映射为Java Bean。</p>

<p>这种把关系数据库的表记录映射为Java对象的过程就是ORM：Object-Relational Mapping。ORM既可以把记录转换成Java对象，也可以把Java对象转换为行记录。</p>

<p>使用<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>配合<code class="language-plaintext highlighter-rouge">RowMapper</code>可以看作是最原始的ORM。如果要实现更自动化的ORM，可以选择成熟的ORM框架，例如<a href="https://hibernate.org/">Hibernate</a>。</p>

<p>Hibernate作为ORM框架，可以替代<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，但Hibernate仍然需要JDBC驱动，需要引入JDBC驱动、连接池，以及Hibernate本身。在Maven中，需要加入以下依赖项：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-orm<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.persistence<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.persistence-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hibernate<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hibernate-core<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.6.15.Final<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.4.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.zaxxer<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>HikariCP<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>4.0.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">jdbc.properties</code>:</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 数据库文件名为testdb:
</span><span class="py">jdbc.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:mem:testdb</span>

<span class="c"># Hsqldb默认的用户名是sa，口令是空字符串:
</span><span class="py">jdbc.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">jdbc.password</span><span class="p">=</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">AppConfig</code>中，仍然需要引入JDBC配置文件创建<code class="language-plaintext highlighter-rouge">DataSource</code>，为了启用Hibernate，还要创建一个<code class="language-plaintext highlighter-rouge">LocalSessionFactoryBean</code>，之后还需要创建<code class="language-plaintext highlighter-rouge">HibernateTransactionManager</code>作为事务管理器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">LocalSessionFactoryBean</span> <span class="nf">createSessionFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.hbm2ddl.auto"</span><span class="o">,</span> <span class="s">"update"</span><span class="o">);</span> <span class="c1">// 生产环境不要使用</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.dialect"</span><span class="o">,</span> <span class="s">"org.hibernate.dialect.HSQLDialect"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.show_sql"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="kt">var</span> <span class="n">sessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="c1">// 扫描指定的package获取所有entity class:</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">);</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setHibernateProperties</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HibernateTransactionManager</span><span class="o">(</span><span class="n">sessionFactory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在Hibernate中，<code class="language-plaintext highlighter-rouge">Session</code>是封装了一个JDBC <code class="language-plaintext highlighter-rouge">Connection</code>的实例，而<code class="language-plaintext highlighter-rouge">SessionFactory</code>是封装了JDBC <code class="language-plaintext highlighter-rouge">DataSource</code>的实例，即<code class="language-plaintext highlighter-rouge">SessionFactory</code>持有连接池。</p>

<p>每次需要操作数据库的时候，<code class="language-plaintext highlighter-rouge">SessionFactory</code>创建一个新的<code class="language-plaintext highlighter-rouge">Session</code>，相当于从连接池获取到一个新的<code class="language-plaintext highlighter-rouge">Connection</code>。<code class="language-plaintext highlighter-rouge">SessionFactory</code>就是Hibernate提供的最核心的一个对象，<code class="language-plaintext highlighter-rouge">LocalSessionFactoryBean</code>是Spring提供的为了让我们方便创建<code class="language-plaintext highlighter-rouge">SessionFactory</code>的类。</p>

<p>创建<code class="language-plaintext highlighter-rouge">LocalSessionFactoryBean</code>的代码，首先用<code class="language-plaintext highlighter-rouge">Properties</code>持有Hibernate初始化<code class="language-plaintext highlighter-rouge">SessionFactory</code>时用到的所有设置，常用的设置请参考<a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#configurations">Hibernate文档</a>，这里只定义了3个设置：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">hibernate.hbm2ddl.auto=update</code>：表示在应用启动时自动创建或更新数据库表结构。这在开发和测试环境中非常有用，但在生产环境中应谨慎使用，以避免数据丢失或结构不一致的问题。</li>
  <li><code class="language-plaintext highlighter-rouge">hibernate.dialect=org.hibernate.dialect.HSQLDialect</code>：指示Hibernate使用的数据库是HSQLDB。Hibernate使用一种HQL的查询语句，它和SQL类似，但真正在“翻译”成SQL时，会根据设定的数据库“方言”来生成针对数据库优化的SQL；</li>
  <li><code class="language-plaintext highlighter-rouge">hibernate.show_sql=true</code>：让Hibernate打印执行的SQL，这对于调试非常有用，可以方便地看到Hibernate生成的SQL语句是否符合我们的预期。</li>
</ul>

<p>此外，<code class="language-plaintext highlighter-rouge">setPackagesToScan("com.aotmd.test")</code> 指示 Hibernate 扫描指定的包，以找到所有映射为数据库表的实体类。</p>

<p>而<code class="language-plaintext highlighter-rouge">HibernateTransactionManager</code> 是 Spring 提供的一个事务管理器，用于管理 Hibernate 的事务。</p>

<h4 id="将数据库表结构映射为java对象">将数据库表结构映射为Java对象</h4>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="k">user</span>
    <span class="n">id</span> <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">email</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">password</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">createdAt</span> <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="nv">`id`</span><span class="p">),</span>
    <span class="k">UNIQUE</span> <span class="k">KEY</span> <span class="nv">`email`</span> <span class="p">(</span><span class="nv">`email`</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">id</code>是自增主键，<code class="language-plaintext highlighter-rouge">email</code>、<code class="language-plaintext highlighter-rouge">password</code>、<code class="language-plaintext highlighter-rouge">name</code>是<code class="language-plaintext highlighter-rouge">VARCHAR</code>类型，<code class="language-plaintext highlighter-rouge">email</code>带唯一索引以确保唯一性，<code class="language-plaintext highlighter-rouge">createdAt</code>存储整型类型的时间戳。用JavaBean表示如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>还需要添加一些注解来告诉Hibernate如何把<code class="language-plaintext highlighter-rouge">User</code>类映射到表记录：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果一个JavaBean被用于映射，就标记一个<code class="language-plaintext highlighter-rouge">@Entity</code>。默认情况下，映射的表名是<code class="language-plaintext highlighter-rouge">user</code>，如果实际的表名不同，例如实际表名是<code class="language-plaintext highlighter-rouge">users</code>，可以追加一个<code class="language-plaintext highlighter-rouge">@Table(name="users")</code>表示。</p>

<p>每个属性到数据库列的映射用<code class="language-plaintext highlighter-rouge">@Column()</code>标识，<code class="language-plaintext highlighter-rouge">nullable</code>指示列是否允许为<code class="language-plaintext highlighter-rouge">NULL</code>，<code class="language-plaintext highlighter-rouge">updatable</code>指示该列是否允许被用在<code class="language-plaintext highlighter-rouge">UPDATE</code>语句，<code class="language-plaintext highlighter-rouge">length</code>指示<code class="language-plaintext highlighter-rouge">String</code>类型的列的长度（如果没有指定，默认是<code class="language-plaintext highlighter-rouge">255</code>）。</p>

<p>主键需要用<code class="language-plaintext highlighter-rouge">@Id</code>标识，<code class="language-plaintext highlighter-rouge">@GeneratedValue(strategy = GenerationType.IDENTITY)</code>表示指定主键生成策略为 <code class="language-plaintext highlighter-rouge">IDENTITY</code>。这种策略依赖于数据库自动生成主键值（通常用于自增列）。</p>

<p>主键<code class="language-plaintext highlighter-rouge">id</code>定义的类型不是<code class="language-plaintext highlighter-rouge">long</code>，而是<code class="language-plaintext highlighter-rouge">Long</code>。是因为Hibernate如果检测到主键为<code class="language-plaintext highlighter-rouge">null</code>，就<strong>不会</strong>在<code class="language-plaintext highlighter-rouge">INSERT</code>语句中指定主键的值，而是返回由数据库生成的自增值，否则，Hibernate认为我们的程序指定了主键的值，会在<code class="language-plaintext highlighter-rouge">INSERT</code>语句中直接列出。<code class="language-plaintext highlighter-rouge">long</code>型字段<strong>总是具有默认值<code class="language-plaintext highlighter-rouge">0</code></strong>，因此，每次插入的主键值总是0，导致除第一次外后续插入都将失败。</p>

<p><code class="language-plaintext highlighter-rouge">createdAt</code>虽然是整型，但没有使用<code class="language-plaintext highlighter-rouge">long</code>，而是<code class="language-plaintext highlighter-rouge">Long</code>，这是因为使用基本类型会导致findByExample查询会添加意外的条件，<strong>作为映射使用的JavaBean，所有属性都使用包装类型而不是基本类型。</strong></p>

<p>再定义一个<code class="language-plaintext highlighter-rouge">Book</code>类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它们定义的<code class="language-plaintext highlighter-rouge">id</code>、<code class="language-plaintext highlighter-rouge">createdAt</code>属性是一样的，这在数据库表结构的设计中很常见：对于每个表，通常会统一使用一种主键生成机制，并添加<code class="language-plaintext highlighter-rouge">createdAt</code>表示创建时间，<code class="language-plaintext highlighter-rouge">updatedAt</code>表示修改时间等通用字段。</p>

<p>不必在<code class="language-plaintext highlighter-rouge">User</code>和<code class="language-plaintext highlighter-rouge">Book</code>中重复定义这些通用字段，可以把它们提到一个抽象类中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MappedSuperclass</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">id</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Transient</span>
    <span class="kd">public</span> <span class="nc">ZonedDateTime</span> <span class="nf">getCreatedDateTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">createdAt</span><span class="o">).</span><span class="na">atZone</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PrePersist</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">preInsert</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对于<code class="language-plaintext highlighter-rouge">AbstractEntity</code>来说，要标注一个<code class="language-plaintext highlighter-rouge">@MappedSuperclass</code>表示它用于继承。表示这个类是一个 JPA 映射的超类（mapped superclass），不会直接映射到数据库表，但其属性会被继承到子类，并映射到子类所对应的数据库表中。</p>

<p><code class="language-plaintext highlighter-rouge">@Transient</code>表示该属性<strong>不需要持久化到数据库</strong>中，即在数据库表中不会有相应的列。返回一个“虚拟”的属性。因为<code class="language-plaintext highlighter-rouge">getCreatedDateTime()</code>是计算得出的属性，而不是从数据库表读出的值，因此必须要标注<code class="language-plaintext highlighter-rouge">@Transient</code>，否则Hibernate会尝试从数据库读取名为<code class="language-plaintext highlighter-rouge">createdDateTime</code>这个不存在的字段从而出错。</p>

<p><code class="language-plaintext highlighter-rouge">@PrePersist</code> 的方法，表示将一个JavaBean持久化到数据库之前（即执行INSERT语句），Hibernate会先执行该方法，这样就可以自动设置好<code class="language-plaintext highlighter-rouge">createdAt</code>属性。注意，@PrePersist 是 JPA 规范中提供的，老版本 Hibernate SessionFactory （5.1.0.Final）并不能使用。但是新版本的 HIbernate（大于等于 5.2.17） 是可以使用的。</p>

<p>有了<code class="language-plaintext highlighter-rouge">AbstractEntity</code>，就可以大幅简化<code class="language-plaintext highlighter-rouge">User</code>和<code class="language-plaintext highlighter-rouge">Book</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用Spring集成Hibernate，配合JPA注解，无需任何额外的XML配置。类似<code class="language-plaintext highlighter-rouge">User</code>、<code class="language-plaintext highlighter-rouge">Book</code>这样的用于ORM的Java Bean，通常称之为Entity Bean。</p>

<p>上面作用于<code class="language-plaintext highlighter-rouge">getter </code>方法的注解也可以放在字段上，而不仅仅是放在 <code class="language-plaintext highlighter-rouge">getter</code> 方法上。JPA 允许你在字段级别或属性级别（<code class="language-plaintext highlighter-rouge">getter</code> 方法）使用注解。选择在字段或 <code class="language-plaintext highlighter-rouge">getter</code> 方法上放置注解主要取决于你的设计习惯和代码风格。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">@Column</code> 注解用于指定持久化属性或字段在数据库中的映射列。下面是对 <code class="language-plaintext highlighter-rouge">@Column</code> 注解属性的详细解释：</p>

<p><strong><code class="language-plaintext highlighter-rouge">name</code></strong>：指定列的名称。默认情况下，列名与属性名相同。</p>

<p><strong><code class="language-plaintext highlighter-rouge">unique</code></strong>：指定列是否是唯一键。此属性是表级 <code class="language-plaintext highlighter-rouge">UniqueConstraint</code> 注解的快捷方式，当唯一键约束只对应单列时使用。</p>

<p><strong><code class="language-plaintext highlighter-rouge">nullable</code></strong>：指定列是否允许 <code class="language-plaintext highlighter-rouge">NULL</code> 值。示例：<code class="language-plaintext highlighter-rouge">@Column(nullable = false) private String name;</code>，这将使 <code class="language-plaintext highlighter-rouge">name</code> 列不允许 <code class="language-plaintext highlighter-rouge">NULL</code> 值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">insertable</code></strong>：指定列是否包含在生成的 SQL INSERT 语句中。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">insertable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="kd">private</span> <span class="nc">String</span> <span class="n">readOnlyField</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">readOnlyField</code> 列在 INSERT 语句中被<strong>忽略</strong>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">updatable</code></strong>：指定列是否包含在生成的 SQL UPDATE 语句中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="kd">private</span> <span class="nc">String</span> <span class="n">createdAt</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">createdAt</code> 列在 UPDATE 语句中被<strong>忽略</strong>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">columnDefinition</code></strong>：指定生成 DDL 时使用的 SQL 片段。默认为推断类型生成的 SQL。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">columnDefinition</span> <span class="o">=</span> <span class="s">"CLOB NOT NULL"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">String</span> <span class="n">description</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">description</code> 列在生成 DDL 时使用指定的 SQL 片段。<code class="language-plaintext highlighter-rouge">description</code> 列被定义为 CLOB 类型，并且不允许为空。</p>

<p><strong><code class="language-plaintext highlighter-rouge">table</code></strong>：指定包含该列的表名。如果未指定，则默认该列在主表中。</p>

<p><strong><code class="language-plaintext highlighter-rouge">length</code></strong>：指定列的长度。仅适用于字符串类型的列，默认为255。</p>

<p><strong><code class="language-plaintext highlighter-rouge">precision</code></strong>：指定精确数值（如小数）列的精度。仅适用于精确数值列。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">precision</span> <span class="o">=</span> <span class="mi">12</span><span class="o">,</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">2</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">cost</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">cost</code> 列的精度为 12，小数位数为 2。</p>

<p><strong><code class="language-plaintext highlighter-rouge">scale</code></strong>：指定精确数值列的小数位数。仅适用于精确数值列。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">precision</span> <span class="o">=</span> <span class="mi">12</span><span class="o">,</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">2</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">cost</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">cost</code> 列的精度为 12，小数位数为 2。</p>

<p><code class="language-plaintext highlighter-rouge">@Column</code> 注解提供了详细的配置选项，允许你精确控制持久化属性与数据库列的映射方式。这些配置选项包括列名、唯一性、可空性、是否参与插入和更新、列的 SQL 定义、所在表名、字符串列的长度、数值列的精度和小数位数等。通过合理使用这些属性，你可以确保实体类与数据库表之间的映射符合业务需求。</p>

<h4 id="crud">CRUD</h4>

<p>如果对<code class="language-plaintext highlighter-rouge">user</code>表进行增删改查。因为使用了Hibernate，因此，实际上是对<code class="language-plaintext highlighter-rouge">User</code>这个JavaBean进行“增删改查”。编写一个<code class="language-plaintext highlighter-rouge">UserService</code>，注入<code class="language-plaintext highlighter-rouge">SessionFactory</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Hibernate 中大多数的数据修改操作（如插入、更新、删除）都需要在事务中执行。这是因为事务能够确保数据的一致性、隔离性、持久性和原子性，保证了数据库操作的可靠性和完整性。</p>

<p>在 Hibernate 中，如果没有启用事务，对于一些修改操作（如更新数据库记录），虽然可以正常执行，但实际上并不会立即将操作同步到数据库中。相反，它们将缓存在 Hibernate 的会话（Session）中，直到会话被关闭或事务被提交时才会同步到数据库中。如果没有事务管理，这可能导致数据不一致或丢失。</p>

<p>因此，当使用 Hibernate 时，强烈建议在数据修改操作中使用事务来确保数据的完整性和一致性。在 Spring 中，可以使用 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解轻松地管理事务，确保在方法执行期间自动开启、提交或回滚事务。</p>

<p>要启用事务，注意：配置事务管理器、启用事务注解<code class="language-plaintext highlighter-rouge">@EnableTransactionManagement</code>、使用<code class="language-plaintext highlighter-rouge">@Transactional</code>。</p>

<p><strong>Insert操作</strong></p>

<p>要持久化一个<code class="language-plaintext highlighter-rouge">User</code>实例，只需调用<code class="language-plaintext highlighter-rouge">persist()</code>方法。以<code class="language-plaintext highlighter-rouge">register()</code>方法为例，代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="c1">// 不要设置id，因为使用了自增主键</span>
    <span class="c1">// 保存到数据库:</span>
    <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="c1">// 现在已经自动获得了id:</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Delete操作</strong></p>

<p>删除一个<code class="language-plaintext highlighter-rouge">User</code>相当于从表中删除对应的记录。注意Hibernate总是用<code class="language-plaintext highlighter-rouge">id</code>来删除记录，因此，要正确设置<code class="language-plaintext highlighter-rouge">User</code>的<code class="language-plaintext highlighter-rouge">id</code>属性才能正常删除记录：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过主键删除记录时，一个常见的用法是先根据主键加载该记录，再删除。注意到当记录不存在时，<code class="language-plaintext highlighter-rouge">load()</code>返回<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p><strong>Update操作</strong></p>

<p>更新记录相当于先更新<code class="language-plaintext highlighter-rouge">User</code>的指定属性，然后调用<code class="language-plaintext highlighter-rouge">merge()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">merge</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在定义<code class="language-plaintext highlighter-rouge">User</code>时，对有的属性标注了<code class="language-plaintext highlighter-rouge">@Column(updatable=false)</code>。Hibernate在更新记录时，它只会把<code class="language-plaintext highlighter-rouge">@Column(updatable=true)</code>的属性加入到<code class="language-plaintext highlighter-rouge">UPDATE</code>语句中，这样可以提供一层额外的安全性，即如果不小心修改了<code class="language-plaintext highlighter-rouge">User</code>的<code class="language-plaintext highlighter-rouge">email</code>、<code class="language-plaintext highlighter-rouge">createdAt</code>等属性，执行<code class="language-plaintext highlighter-rouge">update()</code>时并不会更新对应的数据库列。</p>

<p><strong>Select操作</strong></p>

<p>编写的大部分方法都是各种各样的查询。根据<code class="language-plaintext highlighter-rouge">id</code>查询可以直接调用<code class="language-plaintext highlighter-rouge">load()</code>，如果要使用条件查询，例如，假设想执行以下查询：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">user</span> <span class="k">WHERE</span> <span class="n">email</span> <span class="o">=</span> <span class="o">?</span> <span class="k">AND</span> <span class="n">password</span> <span class="o">=</span> <span class="o">?</span>
</code></pre></div></div>

<p>一种常用的查询是直接编写Hibernate内置的HQL查询：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">()</span>
            <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"from User u where u.email = ?1 and u.password = ?2"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
            <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
            <span class="o">.</span><span class="na">list</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>和SQL相比，HQL使用类名和属性名，由Hibernate自动转换为实际的表名和列名。详细的HQL语法可以参考<a href="https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#query-language">Hibernate文档</a>。</p>

<p>除了可以直接传入HQL字符串外，Hibernate还可以使用一种<code class="language-plaintext highlighter-rouge">NamedQuery</code>，它给查询起个名字，然后保存在注解中。使用<code class="language-plaintext highlighter-rouge">NamedQuery</code>时，要先在<code class="language-plaintext highlighter-rouge">User</code>类标注，<code class="language-plaintext highlighter-rouge">NamedQueries</code> 注释可以应用于实体或映射的超类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NamedQueries</span><span class="o">(</span>
    <span class="nd">@NamedQuery</span><span class="o">(</span>
        <span class="c1">// 查询名称:</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
        <span class="c1">// 查询语句:</span>
        <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
    <span class="o">)</span>
<span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它和直接传入HQL有点不同的是，占位符使用<code class="language-plaintext highlighter-rouge">:e</code>和<code class="language-plaintext highlighter-rouge">:pwd</code>。使用<code class="language-plaintext highlighter-rouge">NamedQuery</code>只需要引入查询名和参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">()</span>
        <span class="o">.</span><span class="na">createNamedQuery</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 创建NamedQuery</span>
        <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span> <span class="c1">// 绑定e参数</span>
        <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"pwd"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="c1">// 绑定pwd参数</span>
        <span class="o">.</span><span class="na">list</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>直接写HQL和使用<code class="language-plaintext highlighter-rouge">NamedQuery</code>各有优劣。前者可以在代码中直观地看到查询语句，后者可以在<code class="language-plaintext highlighter-rouge">User</code>类统一管理所有相关查询。</p>

<p>要写多个<code class="language-plaintext highlighter-rouge">@NamedQuery</code>，可以用<code class="language-plaintext highlighter-rouge">{}</code>包起来，如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NamedQueries</span><span class="o">({</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
            <span class="c1">// 查询名称:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
            <span class="c1">// 查询语句:</span>
            <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
        <span class="o">),</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
            <span class="c1">// 查询名称:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s">"selectByID"</span><span class="o">,</span>
            <span class="c1">// 查询语句:</span>
            <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.id = :id"</span>
        <span class="o">),</span>
    <span class="o">}</span>
<span class="o">)</span>
</code></pre></div></div>

<hr />

<p>编程式事务，原：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="c1">// 不要设置id，因为使用了自增主键</span>
    <span class="c1">// 保存到数据库:</span>
    <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="c1">// 现在已经自动获得了id:</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>修改后：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

    <span class="nc">Transaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">transaction</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">session</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">transaction</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>查询可以不用事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">()</span>
        <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"from User u where u.email = ?1 and u.password = ?2"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
        <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
        <span class="o">.</span><span class="na">list</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>完整实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.hibernate.Session</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.hibernate.SessionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.hibernate.Transaction</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.hibernate5.HibernateTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.hibernate5.LocalSessionFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.PlatformTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.Instant</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZoneId</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZonedDateTime</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>


<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">,</span><span class="s">"小米"</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">,</span><span class="s">"小明"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword2</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list2</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">deleteUser</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list3</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">updateUser</span><span class="o">(</span><span class="mi">2L</span><span class="o">,</span><span class="s">"小华"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list4</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list4</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">LocalSessionFactoryBean</span> <span class="nf">createSessionFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.hbm2ddl.auto"</span><span class="o">,</span> <span class="s">"update"</span><span class="o">);</span> <span class="c1">// 生产环境不要使用</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.dialect"</span><span class="o">,</span> <span class="s">"org.hibernate.dialect.HSQLDialect"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.show_sql"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="kt">var</span> <span class="n">sessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="c1">// 扫描指定的package获取所有entity class:</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">);</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setHibernateProperties</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HibernateTransactionManager</span><span class="o">(</span><span class="n">sessionFactory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>



<span class="nd">@MappedSuperclass</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">id</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Transient</span>
    <span class="kd">public</span> <span class="nc">ZonedDateTime</span> <span class="nf">getCreatedDateTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">createdAt</span><span class="o">).</span><span class="na">atZone</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PrePersist</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">preInsert</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@NamedQueries</span><span class="o">({</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
                <span class="c1">// 查询名称:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
                <span class="c1">// 查询语句:</span>
                <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
        <span class="o">),</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
                <span class="c1">// 查询名称:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"selectByID"</span><span class="o">,</span>
                <span class="c1">// 查询语句:</span>
                <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.id = :id"</span>
        <span class="o">),</span>
    <span class="o">}</span>
<span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

        <span class="nc">Transaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">transaction</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
            <span class="c1">// 保存到数据库:</span>
            <span class="n">session</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
            <span class="c1">// 现在已经自动获得了id:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">transaction</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">merge</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">()</span>
                <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"from User u where u.email = ?1 and u.password = ?2"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
                <span class="o">.</span><span class="na">list</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword2</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">()</span>
                <span class="o">.</span><span class="na">createNamedQuery</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 创建NamedQuery</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span> <span class="c1">// 绑定e参数</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"pwd"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="c1">// 绑定pwd参数</span>
                <span class="o">.</span><span class="na">list</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h4 id="参数详细解释">参数详细解释</h4>

<p><code class="language-plaintext highlighter-rouge">sessionFactory.getCurrentSession()</code> 是 Hibernate 中的一个方法，用于获取当前线程关联的 <code class="language-plaintext highlighter-rouge">Session</code> 对象。在 Hibernate 中，<code class="language-plaintext highlighter-rouge">Session</code> 对象代表了与数据库的一次会话，它提供了对持久化对象的管理和数据库操作的支持。</p>

<p>通常情况下，通过 <code class="language-plaintext highlighter-rouge">sessionFactory.openSession()</code> 方法来获取一个新的 <code class="language-plaintext highlighter-rouge">Session</code> 对象。这种方式每次调用都会创建一个新的 <code class="language-plaintext highlighter-rouge">Session</code> 对象。然而，在某些情况下，尤其是在使用基于线程的事务管理器（如 <code class="language-plaintext highlighter-rouge">ThreadLocalSessionContext</code>）时，可能希望获取当前线程关联的 <code class="language-plaintext highlighter-rouge">Session</code> 对象，以确保所有的数据库操作都在同一个会话中执行。这时就可以使用 <code class="language-plaintext highlighter-rouge">sessionFactory.getCurrentSession()</code> 方法。</p>

<p>使用 <code class="language-plaintext highlighter-rouge">getCurrentSession()</code> 方法时，Hibernate 会检查当前线程是否已经存在与之关联的 <code class="language-plaintext highlighter-rouge">Session</code> 对象。如果存在，则返回该 <code class="language-plaintext highlighter-rouge">Session</code> 对象；如果不存在，则根据配置创建一个新的 <code class="language-plaintext highlighter-rouge">Session</code> 对象，并将其与当前线程关联起来。通过这种方式，确保在同一个线程内的所有数据库操作都使用同一个 <code class="language-plaintext highlighter-rouge">Session</code> 对象，从而避免线程安全问题和多个 <code class="language-plaintext highlighter-rouge">Session</code> 实例之间的数据不一致性。</p>

<p>需要注意的是，使用 <code class="language-plaintext highlighter-rouge">getCurrentSession()</code> 方法时，需要在 Hibernate 的配置文件（如 <code class="language-plaintext highlighter-rouge">hibernate.cfg.xml</code>）中配置 <code class="language-plaintext highlighter-rouge">hibernate.current_session_context_class</code> 参数，指定使用的线程上下文（如 <code class="language-plaintext highlighter-rouge">thread</code>、<code class="language-plaintext highlighter-rouge">jta</code> 等），以告诉 Hibernate 如何管理当前会话。</p>

<p>以下是 <code class="language-plaintext highlighter-rouge">SessionFactory</code> 接口中一些常用的方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">openSession()</code></strong>：打开一个新的会话（<code class="language-plaintext highlighter-rouge">Session</code>），每次调用都会创建一个新的 <code class="language-plaintext highlighter-rouge">Session</code> 实例。</p>

<p><strong><code class="language-plaintext highlighter-rouge">getCurrentSession()</code></strong>：获取当前线程关联的会话（<code class="language-plaintext highlighter-rouge">Session</code>），如果没有与当前线程关联的会话，则根据配置创建一个新的会话。需要注意，使用该方法时需要在 Hibernate 的配置文件中配置 <code class="language-plaintext highlighter-rouge">hibernate.current_session_context_class</code> 参数。</p>

<p><strong><code class="language-plaintext highlighter-rouge">openStatelessSession()</code></strong>：打开一个新的无状态会话（<code class="language-plaintext highlighter-rouge">StatelessSession</code>），无状态会话不会缓存任何持久化对象的状态信息。</p>

<p><strong><code class="language-plaintext highlighter-rouge">close()</code></strong>：关闭 <code class="language-plaintext highlighter-rouge">SessionFactory</code>，释放资源。</p>

<hr />

<p><strong>Session</strong></p>

<p><code class="language-plaintext highlighter-rouge">Session</code> 是 Hibernate 中用于与数据库进行交互的核心接口，它提供了许多方法来执行数据库操作、管理持久化对象和控制事务等。以下是 <code class="language-plaintext highlighter-rouge">Session</code> 接口中一些常用的方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">save(Object entity)</code></strong>：保存或更新给定的实体对象到数据库中。如果对象是新创建的，则插入数据；如果对象已经存在于数据库中，则更新数据。</p>

<p><strong><code class="language-plaintext highlighter-rouge">persist(Object entity)</code></strong>：将给定的实体对象持久化到数据库中。与 <code class="language-plaintext highlighter-rouge">save()</code> 方法类似，但 <code class="language-plaintext highlighter-rouge">persist()</code> 方法不返回持久化对象的标识符，也不会立即执行 INSERT 操作。</p>

<p><strong><code class="language-plaintext highlighter-rouge">update(Object entity)</code></strong>：更新给定的实体对象到数据库中，不返回任何值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">merge(Object entity)</code></strong> ：是 Hibernate 中用于将游离状态（detached）的实体对象合并到持久化状态（persistent）的方法之一。它的作用是将传入的实体对象的状态与数据库中的对应实体对象的状态进行合并，并返回持久化状态的实体对象。如果数据库中<strong>不存在</strong>对应的实体对象，则会<strong>创建一个新的实体对象</strong>，并将传入的实体对象的状态复制到新创建的实体对象上，对该副本的<strong>任何更改将在数据库中反映出来</strong>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">delete(Object entity)</code></strong>：从数据库中删除给定的实体对象。</p>

<p><strong><code class="language-plaintext highlighter-rouge">get(Class clazz, Serializable id)</code></strong>：根据实体类和主键获取对象。如果对象不存在，则返回 null。</p>

<p><strong><code class="language-plaintext highlighter-rouge">byId(Class&lt;T&gt; entityClass)</code></strong> ：该方法返回一个 <code class="language-plaintext highlighter-rouge">IdentifierLoadAccess&lt;T&gt;</code> 实例，用于通过主键检索指定的实体类型，<code class="language-plaintext highlighter-rouge">entityClass</code>：要检索的实体类型的 <code class="language-plaintext highlighter-rouge">Class</code> 对象，配合<code class="language-plaintext highlighter-rouge">T load(Serializable id)</code>得到类似下面的<code class="language-plaintext highlighter-rouge">load(Class clazz, Serializable id)</code>的效果。</p>

<p><strong><code class="language-plaintext highlighter-rouge">load(Class clazz, Serializable id)</code></strong>：根据实体类和主键获取对象。如果对象不存在，则抛出异常。</p>

<p><strong><code class="language-plaintext highlighter-rouge">createQuery(String hql)</code></strong>：创建一个查询对象，用于执行 HQL（Hibernate Query Language）查询。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">hql</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">createSQLQuery(String sql)</code></strong>：创建一个原生 SQL 查询对象，用于执行 SQL 查询。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SQLQuery</span> <span class="n">sqlQuery</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createSQLQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">beginTransaction()</code></strong>：开启一个新的事务。</p>

<p><strong><code class="language-plaintext highlighter-rouge">close()</code></strong>：关闭当前会话，释放资源。</p>

<p>这些是 <code class="language-plaintext highlighter-rouge">Session</code> 接口中的一些常用方法，可以根据具体需求选择使用。在实际开发中，通常会使用这些方法来执行数据库操作、管理持久化对象和控制事务等。</p>

<hr />

<p><strong>Transaction</strong></p>

<p>在 Hibernate 中，事务管理通常是通过 <code class="language-plaintext highlighter-rouge">Transaction</code> 接口来完成的。<code class="language-plaintext highlighter-rouge">Transaction</code> 接口提供了开始、提交、回滚等操作，用于管理数据库事务。以下是 <code class="language-plaintext highlighter-rouge">Transaction</code> 接口中一些常用的方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">begin()</code></strong>：开启一个新的事务。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Transaction</span> <span class="n">tx</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">commit()</code></strong>：提交当前事务，将事务中的修改保存到数据库。</p>

<p><strong><code class="language-plaintext highlighter-rouge">rollback()</code></strong>：回滚当前事务，撤销事务中的修改。</p>

<p><strong><code class="language-plaintext highlighter-rouge">isActive()</code></strong>：检查事务是否处于活动状态（即已经开始但尚未提交或回滚）。</p>

<p><strong><code class="language-plaintext highlighter-rouge">setTimeout(int seconds)</code></strong>：设置事务的超时时间，单位为秒。</p>

<p><strong><code class="language-plaintext highlighter-rouge">getStatus()</code></strong>：获取事务的状态，返回一个枚举值表示事务的状态（如活动、已提交、已回滚等）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TransactionStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">tx</span><span class="o">.</span><span class="na">getStatus</span><span class="o">();</span>
</code></pre></div></div>

<p>这些方法可以在代码中方便地管理事务的生命周期，确保数据库操作的一致性和可靠性。通常情况下，会通过调用 <code class="language-plaintext highlighter-rouge">beginTransaction()</code> 开启一个新的事务，然后执行数据库操作，最后通过调用 <code class="language-plaintext highlighter-rouge">commit()</code> 提交事务或 <code class="language-plaintext highlighter-rouge">rollback()</code> 回滚事务。</p>

<hr />

<p><strong>Query</strong></p>

<p><code class="language-plaintext highlighter-rouge">org.hibernate.query.Query</code> 接口继承了 <code class="language-plaintext highlighter-rouge">TypedQuery&lt;R&gt;</code>, <code class="language-plaintext highlighter-rouge">org.hibernate.Query&lt;R&gt;</code>, 和 <code class="language-plaintext highlighter-rouge">CommonQueryContract</code> 接口，并提供了一系列用于执行查询操作的方法。以下是一些常用方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameter(String name, Object value)</code></strong>:为查询设置命名参数和对应的值。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameter(int position, Object value)</code></strong>:为查询设置位置参数和对应的值。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameter(String name, Object value, TemporalType temporalType)</code></strong>:为查询设置命名参数和对应的值，并指定参数类型为日期时间。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameter(int position, Object value, TemporalType temporalType)</code></strong>:为查询设置位置参数和对应的值，并指定参数类型为日期时间。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setFirstResult(int startPosition)</code></strong>:设置结果集的起始位置。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setMaxResults(int maxResult)</code></strong>:设置返回结果的最大数量。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getResultList()</code></strong>:执行查询并返回查询结果列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getSingleResult()</code></strong>:执行查询并返回单个结果。如果结果不唯一或查询结果为空，则抛出异常。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">list()</code></strong>:与 <code class="language-plaintext highlighter-rouge">getResultList()</code> 方法功能相同，也是执行查询并返回结果列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">uniqueResult()</code></strong>:与 <code class="language-plaintext highlighter-rouge">getSingleResult()</code> 方法功能相同，也是执行查询并返回单个结果。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameterList(String name, Collection values)</code></strong>:为查询设置命名参数和对应的值列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameterList(String name, Object[] values)</code></strong>:为查询设置命名参数和对应的值数组。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameterList(int position, Collection values)</code></strong>:为查询设置位置参数和对应的值列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameterList(int position, Object[] values)</code></strong>:为查询设置位置参数和对应的值数组。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setFlushMode(FlushModeType flushMode)</code></strong>:设置查询的刷新模式。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setReadOnly(boolean readOnly)</code></strong>:设置查询是否为只读。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">unwrap(Class&lt;T&gt; type)</code></strong>:将查询对象转换为指定类型的对象。</li>
</ul>

<p>这些方法覆盖了常用的查询操作，可以根据具体的需求选择使用。</p>

<hr />

<p><strong>扩展：</strong></p>

<p>如果需要将多个实体类映射到数据库，而这多个实体类继承自同一个抽象类或者接口，而查询或者别的操作又需要使用这种多态性，可以参考<a href="https://thorben-janssen.com/complete-guide-inheritance-strategies-jpa-hibernate/">这篇文章</a>。</p>

<p>如果实体类中有一个字段是一个集合，可以参考<a href="https://thorben-janssen.com/ultimate-guide-association-mappings-jpa-hibernate/">这篇文章</a>。里面讨论了一对一、一对多、多对多、多对一等各种情况。</p>

<p>使用Hibernate时，有时候希望在一个实体中嵌入另一个对象，比如在一个人员实体中嵌入地址对象。这时，可以使用<code class="language-plaintext highlighter-rouge">@Embeddable</code>和<code class="language-plaintext highlighter-rouge">@Embedded</code>注解来实现。</p>

<p>首先，定义一个嵌入式组件，比如地址对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.persistence.Embeddable</span><span class="o">;</span>

<span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">country</span><span class="o">;</span>

    <span class="c1">// 构造函数、getter和setter方法</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里，<code class="language-plaintext highlighter-rouge">Address</code>被标记为<code class="language-plaintext highlighter-rouge">@Embeddable</code>，表示它是一个值对象，可以被嵌入到其他实体中。</p>

<p>接下来，定义<code class="language-plaintext highlighter-rouge">Person</code>实体：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">address</span><span class="o">;</span>

    <span class="c1">// 构造函数、getter和setter方法</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个类对应的表结构为：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">Person</span> <span class="p">(</span>
    <span class="n">id</span> <span class="nb">BIGINT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">address_street</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">address_city</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">address_country</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>在这里，在<code class="language-plaintext highlighter-rouge">address</code>字段上使用了<code class="language-plaintext highlighter-rouge">@Embedded</code>注解，表示它是一个嵌入式组件。</p>

<p>现在，当你持久化一个<code class="language-plaintext highlighter-rouge">Person</code>实体时，Hibernate会自动持久化嵌入的<code class="language-plaintext highlighter-rouge">Address</code>对象。以下是一个示例用法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个新的Person，并设置地址信息</span>
<span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">();</span>
<span class="n">person</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"张三"</span><span class="o">);</span>

<span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">();</span>
<span class="n">address</span><span class="o">.</span><span class="na">setStreet</span><span class="o">(</span><span class="s">"长江路123号"</span><span class="o">);</span>
<span class="n">address</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="s">"上海"</span><span class="o">);</span>
<span class="n">address</span><span class="o">.</span><span class="na">setCountry</span><span class="o">(</span><span class="s">"中国"</span><span class="o">);</span>

<span class="n">person</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>

<span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
</code></pre></div></div>

<p>这将同时持久化<code class="language-plaintext highlighter-rouge">Person</code>和其嵌入的<code class="language-plaintext highlighter-rouge">Address</code>对象到数据库中。</p>

<p>注意，<code class="language-plaintext highlighter-rouge">Address</code>对象中的每个属性都被映射到了<code class="language-plaintext highlighter-rouge">Person</code>表中的相应字段，且字段名遵循了默认的命名规则：<code class="language-plaintext highlighter-rouge">address_</code> + <code class="language-plaintext highlighter-rouge">属性名</code>。这是因为嵌入式组件在数据库中被表示为<code class="language-plaintext highlighter-rouge">Person</code>表的一部分，而不是单独的表。</p>

<p>如果要重新命名，可以这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Embeddable</span><span class="o">;</span>

<span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"street"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"city"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"country"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">country</span><span class="o">;</span>

    <span class="c1">// 构造函数、getter和setter方法</span>
<span class="o">}</span>

</code></pre></div></div>

<p>这样，<code class="language-plaintext highlighter-rouge">Person</code>类对应的表结构如下所示：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">Person</span> <span class="p">(</span>
    <span class="n">id</span> <span class="nb">BIGINT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">street</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">city</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">country</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>在这个表结构中：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">id</code>、<code class="language-plaintext highlighter-rouge">name</code>字段与<code class="language-plaintext highlighter-rouge">Person</code>类中的属性对应，无变化。</li>
  <li><code class="language-plaintext highlighter-rouge">street</code>、<code class="language-plaintext highlighter-rouge">city</code>、<code class="language-plaintext highlighter-rouge">country</code>字段对应于<code class="language-plaintext highlighter-rouge">Address</code>对象中的属性，通过<code class="language-plaintext highlighter-rouge">@Column</code>注解指定了列名。这些字段直接位于<code class="language-plaintext highlighter-rouge">Person</code>表中，而不是<code class="language-plaintext highlighter-rouge">Address</code>表，因为<code class="language-plaintext highlighter-rouge">Address</code>对象是嵌入式的，不是单独的实体。</li>
</ul>

<p><a href="https://memorynotfound.com/hibernate-embeddable-embedded-annotation-example/">详细参考</a>。</p>

<h4 id="jpa">JPA</h4>

<p>JPA：Java Persistence API，JPA就是JavaEE的一个ORM标准，它的实现其实和Hibernate没啥本质区别，但是用户如果使用JPA，那么引用的就是<code class="language-plaintext highlighter-rouge">javax.persistence</code>这个“标准”包，而不是<code class="language-plaintext highlighter-rouge">org.hibernate</code>这样的第三方包。因为JPA只是接口，所以，还需要选择一个实现产品，跟JDBC接口和MySQL驱动一个道理。</p>

<p>使用JPA时也完全可以选择Hibernate作为底层实现，但也可以选择其它的JPA提供方，比如<a href="https://www.eclipse.org/eclipselink/">EclipseLink</a>。Spring内置了JPA的集成，并支持选择Hibernate或EclipseLink作为实现。若要以Hibernate作为JPA实现，则和使用Hibernate一样，只需要引入同样的依赖。Hibernate既提供了它自己的接口，也提供了JPA接口，用JPA接口就相当于通过JPA操作Hibernate。</p>

<p>使用Hibernate时，需要创建一个<code class="language-plaintext highlighter-rouge">LocalSessionFactoryBean</code>，并让它再自动创建一个<code class="language-plaintext highlighter-rouge">SessionFactory</code>。使用JPA也是类似的，也创建一个<code class="language-plaintext highlighter-rouge">LocalContainerEntityManagerFactoryBean</code>，并让它再自动创建一个<code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">LocalContainerEntityManagerFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">emFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalContainerEntityManagerFactoryBean</span><span class="o">();</span>
    <span class="c1">// 注入DataSource:</span>
    <span class="n">emFactory</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="c1">// 扫描指定的package获取所有entity class:</span>
    <span class="n">emFactory</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="nc">AbstractEntity</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getPackageName</span><span class="o">());</span>
    <span class="c1">// 使用Hibernate作为JPA实现:</span>
    <span class="n">emFactory</span><span class="o">.</span><span class="na">setJpaVendorAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">HibernateJpaVendorAdapter</span><span class="o">());</span>
    <span class="c1">// 其他配置项:</span>
    <span class="kt">var</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.hbm2ddl.auto"</span><span class="o">,</span> <span class="s">"update"</span><span class="o">);</span> <span class="c1">// 生产环境不要使用</span>
    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.dialect"</span><span class="o">,</span> <span class="s">"org.hibernate.dialect.HSQLDialect"</span><span class="o">);</span>
    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.show_sql"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
    <span class="n">emFactory</span><span class="o">.</span><span class="na">setJpaProperties</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">emFactory</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>除了需要注入<code class="language-plaintext highlighter-rouge">DataSource</code>和设定自动扫描的<code class="language-plaintext highlighter-rouge">package</code>外，还需要指定JPA的提供商，这里使用Spring提供的一个<code class="language-plaintext highlighter-rouge">HibernateJpaVendorAdapter</code>，最后，针对Hibernate自己需要的配置，以<code class="language-plaintext highlighter-rouge">Properties</code>的形式注入。</p>

<p>还需要实例化一个<code class="language-plaintext highlighter-rouge">JpaTransactionManager</code>，以实现声明式事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">EntityManagerFactory</span> <span class="n">entityManagerFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">JpaTransactionManager</span><span class="o">(</span><span class="n">entityManagerFactory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，就完成了JPA的全部初始化工作。使用Spring+Hibernate作为JPA实现，无需任何配置文件。</p>

<p>所有Entity Bean的配置和上一节完全相同，全部采用Annotation标注。现在只需关心具体的业务类如何通过JPA接口操作数据库。</p>

<p>还是以<code class="language-plaintext highlighter-rouge">UserService</code>为例，需要注入一个<code class="language-plaintext highlighter-rouge">EntityManager</code>，但是不要使用<code class="language-plaintext highlighter-rouge">@Autowired</code>，而是<code class="language-plaintext highlighter-rouge">@PersistenceContext</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@PersistenceContext</span>
    <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JDBC、Hibernate和JPA提供的接口，实际上，它们的关系如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">JDBC</th>
      <th style="text-align: left">Hibernate</th>
      <th style="text-align: left">JPA</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DataSource</td>
      <td style="text-align: left">SessionFactory</td>
      <td style="text-align: left">EntityManagerFactory</td>
    </tr>
    <tr>
      <td style="text-align: left">Connection</td>
      <td style="text-align: left">Session</td>
      <td style="text-align: left">EntityManager</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">SessionFactory</code>和<code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>相当于<code class="language-plaintext highlighter-rouge">DataSource</code>，<code class="language-plaintext highlighter-rouge">Session</code>和<code class="language-plaintext highlighter-rouge">EntityManager</code>相当于<code class="language-plaintext highlighter-rouge">Connection</code>。每次需要访问数据库的时候，需要获取新的<code class="language-plaintext highlighter-rouge">Session</code>和<code class="language-plaintext highlighter-rouge">EntityManager</code>，用完后再关闭。</p>

<p><code class="language-plaintext highlighter-rouge">UserService</code>注入的不是<code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>，而是<code class="language-plaintext highlighter-rouge">EntityManager</code>，并且标注了<code class="language-plaintext highlighter-rouge">@PersistenceContext</code>。难道使用JPA可以允许多线程操作同一个<code class="language-plaintext highlighter-rouge">EntityManager</code>？</p>

<p>实际上这里注入的并不是真正的<code class="language-plaintext highlighter-rouge">EntityManager</code>，而是一个<code class="language-plaintext highlighter-rouge">EntityManager</code>的代理类，相当于：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EntityManagerProxy</span> <span class="kd">implements</span> <span class="nc">EntityManager</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">EntityManagerFactory</span> <span class="n">emf</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring遇到标注了<code class="language-plaintext highlighter-rouge">@PersistenceContext</code>的<code class="language-plaintext highlighter-rouge">EntityManager</code>会自动注入代理，该代理会在必要的时候自动打开<code class="language-plaintext highlighter-rouge">EntityManager</code>。换句话说，多线程引用的<code class="language-plaintext highlighter-rouge">EntityManager</code>虽然是同一个代理类，但该代理类内部针对不同线程会创建不同的<code class="language-plaintext highlighter-rouge">EntityManager</code>实例。</p>

<p>因此，标注了<code class="language-plaintext highlighter-rouge">@PersistenceContext</code>的<code class="language-plaintext highlighter-rouge">EntityManager</code>可以被多线程安全地共享。</p>

<p>因此，在<code class="language-plaintext highlighter-rouge">UserService</code>的每个业务方法里，直接使用<code class="language-plaintext highlighter-rouge">EntityManager</code>就很方便。以主键查询为例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</code></pre></div></div>

<p>对比Hibernate：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</code></pre></div></div>

<p>与HQL查询类似，JPA使用JPQL查询，它的语法和HQL基本差不多：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">em</span>
            <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"SELECT u from User u where u.email = :e and u.password = :p"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
            <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"p"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
            <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对比Hibernate，不同点在于：不需要<code class="language-plaintext highlighter-rouge">getCurrentSession()</code>，占位符名称不同，<code class="language-plaintext highlighter-rouge">list()</code>变为<code class="language-plaintext highlighter-rouge">getResultList()</code>。</p>

<p>同样的，JPA也支持<code class="language-plaintext highlighter-rouge">NamedQuery</code>，即先给查询起个名字，再按名字创建查询：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword2</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">em</span>
            <span class="o">.</span><span class="na">createNamedQuery</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 创建NamedQuery</span>
            <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span> <span class="c1">// 绑定e参数</span>
            <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"pwd"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="c1">// 绑定pwd参数</span>
            <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">NamedQuery</code>通过注解标注在<code class="language-plaintext highlighter-rouge">User</code>类上，它的定义和上一节的<code class="language-plaintext highlighter-rouge">User</code>类一样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NamedQueries</span><span class="o">(</span>
    <span class="nd">@NamedQuery</span><span class="o">(</span>
        <span class="c1">// 查询名称:</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
        <span class="c1">// 查询语句:</span>
        <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
    <span class="o">)</span>
<span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对比Hibernate，不同点在于：不需要<code class="language-plaintext highlighter-rouge">getCurrentSession()</code>，<code class="language-plaintext highlighter-rouge">list()</code>变为<code class="language-plaintext highlighter-rouge">getResultList()</code>。</p>

<p>对数据库进行增删改的操作，可以分别使用<code class="language-plaintext highlighter-rouge">persist()</code>、<code class="language-plaintext highlighter-rouge">remove()</code>和<code class="language-plaintext highlighter-rouge">merge()</code>方法，参数均为Entity Bean本身，使用非常简单，基本上都是去掉<code class="language-plaintext highlighter-rouge">getCurrentSession()</code>就行。</p>

<p>实际上，<code class="language-plaintext highlighter-rouge">EntityManager</code>接口和Hibernate的<code class="language-plaintext highlighter-rouge">Session</code>接口在方法上有很多重叠之处，因为<code class="language-plaintext highlighter-rouge">EntityManager</code>接口是JPA的一部分，而Hibernate<strong>实现</strong>了JPA规范。即：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Session</span> <span class="kd">extends</span> <span class="nc">SharedSessionContract</span><span class="o">,</span> <span class="nc">EntityManager</span><span class="o">,</span> <span class="nc">HibernateEntityManager</span><span class="o">,</span> <span class="nc">AutoCloseable</span><span class="o">,</span> <span class="nc">Closeable</span> <span class="o">{}</span>
</code></pre></div></div>

<p>一些常见的方法，无论是在<code class="language-plaintext highlighter-rouge">EntityManager</code>接口还是Hibernate的<code class="language-plaintext highlighter-rouge">Session</code>接口中都可以找到，包括<code class="language-plaintext highlighter-rouge">persist()</code>、<code class="language-plaintext highlighter-rouge">merge()</code>、<code class="language-plaintext highlighter-rouge">refresh()</code>、<code class="language-plaintext highlighter-rouge">find()</code>、<code class="language-plaintext highlighter-rouge">remove()</code>等。这些方法在JPA规范中定义，并且Hibernate作为JPA的实现，也提供了相应的实现。</p>

<p>对于之前提到的编程式事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

    <span class="nc">Transaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">transaction</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">session</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">transaction</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>改写一下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

    <span class="nc">EntityTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span>  <span class="o">{</span>
        <span class="n">transaction</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">transaction</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行后会报错：不允许在共享 <code class="language-plaintext highlighter-rouge">EntityManager</code> 上创建事务 - 改用 Spring 事务或 EJB CMT。</p>

<p>改为Spring事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="kd">private</span>  <span class="nc">PlatformTransactionManager</span> <span class="n">transactionManager</span><span class="o">;</span>

<span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

    <span class="nc">TransactionDefinition</span> <span class="n">def</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">();</span>
    <span class="nc">TransactionStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">transactionManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="n">def</span><span class="o">);</span>
    <span class="k">try</span>  <span class="o">{</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">transactionManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">transactionManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>正常。</p>

<p>完整实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.jpa.JpaTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.PlatformTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.TransactionDefinition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.TransactionStatus</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.support.DefaultTransactionDefinition</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.Instant</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZoneId</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZonedDateTime</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">,</span><span class="s">"小米"</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">,</span><span class="s">"小明"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword2</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list2</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">deleteUser</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list3</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">updateUser</span><span class="o">(</span><span class="mi">2L</span><span class="o">,</span><span class="s">"小华"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list4</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list4</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">LocalContainerEntityManagerFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">emFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalContainerEntityManagerFactoryBean</span><span class="o">();</span>
        <span class="c1">// 注入DataSource:</span>
        <span class="n">emFactory</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="c1">// 扫描指定的package获取所有entity class:</span>
        <span class="n">emFactory</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="nc">AbstractEntity</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getPackageName</span><span class="o">());</span>
        <span class="c1">// 使用Hibernate作为JPA实现:</span>
        <span class="n">emFactory</span><span class="o">.</span><span class="na">setJpaVendorAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">HibernateJpaVendorAdapter</span><span class="o">());</span>
        <span class="c1">// 其他配置项:</span>
        <span class="kt">var</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.hbm2ddl.auto"</span><span class="o">,</span> <span class="s">"update"</span><span class="o">);</span> <span class="c1">// 生产环境不要使用</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.dialect"</span><span class="o">,</span> <span class="s">"org.hibernate.dialect.HSQLDialect"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.show_sql"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">emFactory</span><span class="o">.</span><span class="na">setJpaProperties</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">emFactory</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">EntityManagerFactory</span> <span class="n">entityManagerFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JpaTransactionManager</span><span class="o">(</span><span class="n">entityManagerFactory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@MappedSuperclass</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">id</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Transient</span>
    <span class="kd">public</span> <span class="nc">ZonedDateTime</span> <span class="nf">getCreatedDateTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">createdAt</span><span class="o">).</span><span class="na">atZone</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PrePersist</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">preInsert</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@NamedQueries</span><span class="o">({</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
                <span class="c1">// 查询名称:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
                <span class="c1">// 查询语句:</span>
                <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
        <span class="o">),</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
                <span class="c1">// 查询名称:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"selectByID"</span><span class="o">,</span>
                <span class="c1">// 查询语句:</span>
                <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.id = :id"</span>
        <span class="o">),</span>
    <span class="o">}</span>
<span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@PersistenceContext</span>
    <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span>  <span class="nc">PlatformTransactionManager</span> <span class="n">transactionManager</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

        <span class="nc">TransactionDefinition</span> <span class="n">def</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">();</span>
        <span class="nc">TransactionStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">transactionManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="n">def</span><span class="o">);</span>
        <span class="k">try</span>  <span class="o">{</span>
            <span class="c1">// 保存到数据库:</span>
            <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="n">transactionManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
            <span class="c1">// 现在已经自动获得了id:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">transactionManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">id</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">id</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">em</span>
                <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"SELECT u from User u where u.email = :e and u.password = :p"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"p"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword2</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">em</span>
                <span class="o">.</span><span class="na">createNamedQuery</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 创建NamedQuery</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span> <span class="c1">// 绑定e参数</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"pwd"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="c1">// 绑定pwd参数</span>
                <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="集成mybatis">集成MyBatis</h3>

<p>使用Hibernate或JPA操作数据库时，这类ORM主要工作就是把<code class="language-plaintext highlighter-rouge">ResultSet</code>的每一行变成Java Bean，或者把Java Bean自动转换到<code class="language-plaintext highlighter-rouge">INSERT</code>或<code class="language-plaintext highlighter-rouge">UPDATE</code>语句的参数中，从而实现ORM。ORM框架之所以知道如何把行数据映射到Java Bean，是因为在Java Bean的属性上给了足够的注解作为元数据，ORM框架获取Java Bean的注解后，就知道如何进行双向映射。</p>

<p>ORM框架使用代理模式跟踪Java Bean的修改，以便在<code class="language-plaintext highlighter-rouge">update()</code>操作中更新必要的属性。从ORM框架读取的<code class="language-plaintext highlighter-rouge">User</code>实例实际上并不是<code class="language-plaintext highlighter-rouge">User</code>类，而是代理类，代理类继承自<code class="language-plaintext highlighter-rouge">User</code>类，但针对每个<code class="language-plaintext highlighter-rouge">setter</code>方法做了覆写，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserProxy</span> <span class="kd">extends</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">_isNameChanged</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">_isNameChanged</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，代理类可以跟踪到每个属性的变化。</p>

<p>针对一对多或多对一关系时，代理类可以直接通过<code class="language-plaintext highlighter-rouge">getter</code>方法查询数据库：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserProxy</span> <span class="kd">extends</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nc">Session</span> <span class="n">_session</span><span class="o">;</span>
    <span class="kt">boolean</span> <span class="n">_isNameChanged</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">_isNameChanged</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 获取User对象关联的Address对象:
     */</span>
    <span class="kd">public</span> <span class="nc">Address</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Query</span> <span class="n">q</span> <span class="o">=</span> <span class="n">_session</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"from Address where userId = :userId"</span><span class="o">);</span>
        <span class="n">q</span><span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"userId"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">list</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">list</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>为了实现这样的查询，<code class="language-plaintext highlighter-rouge">UserProxy</code>必须保存Hibernate的当前<code class="language-plaintext highlighter-rouge">Session</code>。但是，当事务提交后，<code class="language-plaintext highlighter-rouge">Session</code>自动关闭，此时再获取<code class="language-plaintext highlighter-rouge">getAddress()</code>将无法访问数据库，或者获取的不是事务一致的数据。因此，ORM框架总是引入了Attached/Detached状态，表示当前此Java Bean到底是在Session的范围内，还是脱离了Session变成了一个“游离”对象。很多初学者无法正确理解状态变化和事务边界，就会造成大量的<code class="language-plaintext highlighter-rouge">PersistentObjectException</code>异常。这种隐式状态使得普通Java Bean的生命周期变得复杂。</p>

<p>此外，Hibernate和JPA为了实现兼容多种数据库，使用HQL或JPQL查询，经过一道转换，变成特定数据库的SQL，理论上这样可以做到无缝切换数据库，但这一层自动转换除了少许的性能开销外，给SQL级别的优化带来了麻烦。</p>

<p>最后，ORM框架通常提供了缓存，并且还分为一级缓存和二级缓存。一级缓存是指在一个Session范围内的缓存，常见的情景是根据主键查询时，两次查询可以返回同一实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">123</span><span class="o">);</span>
<span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">123</span><span class="o">);</span>
</code></pre></div></div>

<p>二级缓存是指跨Session的缓存，一般默认关闭，需要手动配置。二级缓存极大的增加了数据的不一致性，原因在于SQL非常灵活，常常会导致意外的更新。例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 线程1读取:</span>
<span class="nc">User</span> <span class="n">user1</span> <span class="o">=</span> <span class="n">session1</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">123</span><span class="o">);</span>
<span class="o">...</span>
<span class="c1">// 一段时间后，线程2读取:</span>
<span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">session2</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">123</span><span class="o">);</span>
</code></pre></div></div>

<p>当二级缓存生效的时候，两个线程读取的<code class="language-plaintext highlighter-rouge">User</code>实例是一样的，但是，数据库对应的行记录完全可能被修改，例如：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 给老用户增加100积分:</span>
<span class="k">UPDATE</span> <span class="n">users</span> <span class="k">SET</span> <span class="n">bonus</span> <span class="o">=</span> <span class="n">bonus</span> <span class="o">+</span> <span class="mi">100</span> <span class="k">WHERE</span> <span class="n">createdAt</span> <span class="o">&lt;=</span> <span class="o">?</span>
</code></pre></div></div>

<p>ORM无法判断<code class="language-plaintext highlighter-rouge">id=123</code>的用户是否受该<code class="language-plaintext highlighter-rouge">UPDATE</code>语句影响。考虑到数据库通常会支持多个应用程序，此<code class="language-plaintext highlighter-rouge">UPDATE</code>语句可能由其他进程执行，ORM框架就更不知道了。</p>

<p>这种ORM框架称之为全自动ORM框架。</p>

<p>对比Spring提供的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，它和ORM框架相比，主要有几点差别：</p>

<ul>
  <li>查询后需要手动提供<code class="language-plaintext highlighter-rouge">Mapper</code>实例以便把<code class="language-plaintext highlighter-rouge">ResultSet</code>的每一行变为Java对象；</li>
  <li>增删改操作所需的参数列表，需要手动传入，即把<code class="language-plaintext highlighter-rouge">User</code>实例变为<code class="language-plaintext highlighter-rouge">[user.id, user.name, user.email]</code>这样的列表，比较麻烦。</li>
</ul>

<p>但是<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的优势在于它的确定性：即每次读取操作<strong>一定是数据库操作而不是缓存</strong>，所执行的SQL是完全确定的，缺点就是代码比较繁琐，构造<code class="language-plaintext highlighter-rouge">INSERT INTO users VALUES (?,?,?)</code>更是复杂。</p>

<p>所以，介于全自动ORM如Hibernate和手写全部如<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>之间，还有一种半自动的ORM，它只负责把<code class="language-plaintext highlighter-rouge">ResultSet</code>自动映射到Java Bean，或者自动填充Java Bean参数，但仍需自己写出SQL。<a href="https://mybatis.org/">MyBatis</a>就是这样一种半自动化ORM框架。</p>

<h4 id="引入mybatis">引入Mybatis</h4>

<p>首先，要引入MyBatis本身，其次，由于Spring并没有像Hibernate那样内置对MyBatis的集成，所以，需要再引入MyBatis官方自己开发的一个与Spring集成的库：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-orm<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.4.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.zaxxer<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>HikariCP<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>4.0.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.3.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>和前面一样，先创建<code class="language-plaintext highlighter-rouge">DataSource</code>是必不可少的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Hibernate和JPA的<code class="language-plaintext highlighter-rouge">SessionFactory</code>与<code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>，MyBatis与之对应的是<code class="language-plaintext highlighter-rouge">SqlSessionFactory</code>和<code class="language-plaintext highlighter-rouge">SqlSession</code>：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">JDBC</th>
      <th style="text-align: left">Hibernate</th>
      <th style="text-align: left">JPA</th>
      <th style="text-align: left">MyBatis</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DataSource</td>
      <td style="text-align: left">SessionFactory</td>
      <td style="text-align: left">EntityManagerFactory</td>
      <td style="text-align: left">SqlSessionFactory</td>
    </tr>
    <tr>
      <td style="text-align: left">Connection</td>
      <td style="text-align: left">Session</td>
      <td style="text-align: left">EntityManager</td>
      <td style="text-align: left">SqlSession</td>
    </tr>
  </tbody>
</table>

<p>ORM的设计套路都是类似的。使用MyBatis的核心就是创建<code class="language-plaintext highlighter-rouge">SqlSessionFactory</code>，这里需要创建的是<code class="language-plaintext highlighter-rouge">SqlSessionFactoryBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
    <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为MyBatis可以直接使用Spring管理的声明式事务，因此，创建事务管理器和使用JDBC是一样的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">PlatformTransactionManager</span>  <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span>  <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="crud-1">CRUD</h4>

<p>和Hibernate不同的是，MyBatis使用Mapper来实现映射，而且Mapper必须是接口。以<code class="language-plaintext highlighter-rouge">User</code>类为例，在<code class="language-plaintext highlighter-rouge">User</code>类和<code class="language-plaintext highlighter-rouge">users</code>表之间映射的<code class="language-plaintext highlighter-rouge">UserMapper</code>编写如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
	<span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = #{id}"</span><span class="o">)</span>
	<span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里的Mapper不是<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的<code class="language-plaintext highlighter-rouge">RowMapper</code>的概念，它是定义访问<code class="language-plaintext highlighter-rouge">users</code>表的接口方法。比如我们定义了一个<code class="language-plaintext highlighter-rouge">User getById(long)</code>的主键查询方法，不仅要定义接口方法本身，还要明确写出查询的SQL，这里用注解<code class="language-plaintext highlighter-rouge">@Select</code>标记。SQL语句的任何参数，都与方法参数按名称对应。例如，方法参数<code class="language-plaintext highlighter-rouge">id</code>的名字通过注解<code class="language-plaintext highlighter-rouge">@Param()</code>标记为<code class="language-plaintext highlighter-rouge">id</code>，则SQL语句里将来替换的占位符就是<code class="language-plaintext highlighter-rouge">#{id}</code>。</p>

<p>如果有多个参数，那么每个参数命名后直接在SQL中写出对应的占位符即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT #{offset}, #{maxResults}"</span><span class="o">)</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
</code></pre></div></div>

<p>MyBatis执行查询后，将根据方法的返回类型自动把<code class="language-plaintext highlighter-rouge">ResultSet</code>的每一行转换为<code class="language-plaintext highlighter-rouge">User</code>实例，转换规则当然是按列名和属性名对应。如果<strong>列名和属性名不同</strong>，最简单的方式是编写<code class="language-plaintext highlighter-rouge">SELECT</code>语句的别名：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 列名是created_time，属性名是createdAt:</span>
<span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">created_time</span> <span class="k">AS</span> <span class="n">createdAt</span> <span class="k">FROM</span> <span class="n">users</span>
</code></pre></div></div>

<p>执行INSERT语句就稍微麻烦点，因为我们希望传入<code class="language-plaintext highlighter-rouge">User</code>实例，因此，定义的方法接口与<code class="language-plaintext highlighter-rouge">@Insert</code>注解如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO users (email, password, name, createdAt) VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})"</span><span class="o">)</span>
<span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
</code></pre></div></div>

<p>上述方法传入的参数名称是<code class="language-plaintext highlighter-rouge">user</code>，参数类型是<code class="language-plaintext highlighter-rouge">User</code>类，在SQL中引用的时候，以<code class="language-plaintext highlighter-rouge">#{obj.property}</code>的方式写占位符。和Hibernate这样的全自动化ORM相比，MyBatis必须写出完整的INSERT语句。</p>

<p>如果<code class="language-plaintext highlighter-rouge">users</code>表的<code class="language-plaintext highlighter-rouge">id</code>是自增主键，那么，在SQL中不传入<code class="language-plaintext highlighter-rouge">id</code>，但希望获取插入后的主键，需要再加一个<code class="language-plaintext highlighter-rouge">@Options</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Options</span><span class="o">(</span><span class="n">useGeneratedKeys</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">keyProperty</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">,</span> <span class="n">keyColumn</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">)</span>
<span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO users (email, password, name, createdAt) VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})"</span><span class="o">)</span>
<span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">keyProperty</code>和<code class="language-plaintext highlighter-rouge">keyColumn</code>分别指出JavaBean的属性和数据库的主键列名。</p>

<p>执行<code class="language-plaintext highlighter-rouge">UPDATE</code>和<code class="language-plaintext highlighter-rouge">DELETE</code>语句相对比较简单，定义方法如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Update</span><span class="o">(</span><span class="s">"UPDATE users SET name = #{user.name}, createdAt = #{user.createdAt} WHERE id = #{user.id}"</span><span class="o">)</span>
<span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>

<span class="nd">@Delete</span><span class="o">(</span><span class="s">"DELETE FROM users WHERE id = #{id}"</span><span class="o">)</span>
<span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
</code></pre></div></div>

<p>有了<code class="language-plaintext highlighter-rouge">UserMapper</code>接口，还需要对应的实现类才能真正执行这些数据库操作的方法。虽然可以自己写实现类，但除了编写<code class="language-plaintext highlighter-rouge">UserMapper</code>接口外，还有<code class="language-plaintext highlighter-rouge">BookMapper</code>、<code class="language-plaintext highlighter-rouge">BonusMapper</code>……一个一个写太麻烦，因此，MyBatis提供了一个<code class="language-plaintext highlighter-rouge">MapperFactoryBean</code>来自动创建所有Mapper的实现类。可以用一个简单的注解<code class="language-plaintext highlighter-rouge">@MapperScan</code>来启用它：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@MapperScan</code>是MyBatis框架中的一个注解，用于扫描指定包路径下的Mapper接口，并将其注册为Spring的Bean，使得这些Mapper接口可以被注入到其他Bean中使用。</p>

<p><code class="language-plaintext highlighter-rouge">@MapperScan("com.aotmd.test")</code>指示Spring在<code class="language-plaintext highlighter-rouge">com.aotmd.test</code>包及其子包下扫描所有的Mapper接口，并注册为Spring的Bean，使得这些Mapper接口可以被自动注入到其他组件中使用。</p>

<p>MyBatis在启动时会自动给每个Mapper接口创建如下Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserMapperImpl</span> <span class="kd">implements</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">SqlSessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="n">getSqlFromAnnotation</span><span class="o">(...);</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">SqlSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">createSession</span><span class="o">())</span> <span class="o">{</span>
            <span class="o">...</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring允许动态创建Bean并添加到applicationContext中</p>

<hr />

<p>从<strong>mybatis3.4.0</strong>开始加入了<code class="language-plaintext highlighter-rouge">@Mapper</code>注解，目的就是为了<strong>不再写</strong>mapper映射文件。在使用MyBatis时，除了通过<code class="language-plaintext highlighter-rouge">@MapperScan</code>注解扫描Mapper接口外，还可以直接在Mapper接口上使用<code class="language-plaintext highlighter-rouge">@Mapper</code>注解，这是因为MyBatis提供了<code class="language-plaintext highlighter-rouge">org.apache.ibatis.annotations.Mapper</code>注解来标识Mapper接口。</p>

<p>具体来说，使用<code class="language-plaintext highlighter-rouge">@Mapper</code>注解标注的接口会被MyBatis扫描并注册为Mapper接口，这样就不需要显式地在配置类中使用<code class="language-plaintext highlighter-rouge">@MapperScan</code>进行扫描。如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
	<span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = #{id}"</span><span class="o">)</span>
	<span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>在业务逻辑中，可以直接注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>初始化一下表：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">userID1</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"user1"</span><span class="o">).</span><span class="na">getId</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">userID2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"user2"</span><span class="o">).</span><span class="na">getId</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user2</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">updateEmail</span><span class="o">(</span><span class="s">"小华"</span><span class="o">,</span> <span class="n">userID2</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user3</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
1
[User{id=0, email='1@qq.com', password='123456', name='user1', createdAt=1718607558794}, User{id=1, email='2@qq.com', password='123456', name='user2', createdAt=1718607558823}]
User{id=0, email='1@qq.com', password='123456', name='user1', createdAt=1718607558794}
null
1
User{id=1, email='2@qq.com', password='123456', name='小华', createdAt=1718607558823}
</code></pre></div></div>

<p>完整实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.SqlSessionFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.annotation.MapperScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.PlatformTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">userID1</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"user1"</span><span class="o">).</span><span class="na">getId</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">userID2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"user2"</span><span class="o">).</span><span class="na">getId</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user2</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">updateEmail</span><span class="o">(</span><span class="s">"小华"</span><span class="o">,</span> <span class="n">userID2</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user3</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
<span class="cm">/*        // 创建 MyBatis 的 Configuration 对象
        org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();

        // 开启 MyBatis 的 SQL 调试模式
        configuration.setLogImpl(org.apache.ibatis.logging.stdout.StdOutImpl.class);
        //configuration.setLogPrefix("mybatis.debug.");
        configuration.setLogPrefix("mybatis.debug.sql.");

        // 将 Configuration 对象设置到 SqlSessionFactoryBean 中
        sqlSessionFactoryBean.setConfiguration(configuration);*/</span>

        <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span>  <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span>  <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", createdAt="</span> <span class="o">+</span> <span class="n">createdAt</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = #{id}"</span><span class="o">)</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT #{offset}, #{maxResults}"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO users (email, password, name, createdAt) VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="nd">@Options</span><span class="o">(</span><span class="n">useGeneratedKeys</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">keyProperty</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">,</span> <span class="n">keyColumn</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">)</span>
    <span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO users (email, password, name, createdAt) VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="nd">@Update</span><span class="o">(</span><span class="s">"UPDATE users SET name = #{user.name} WHERE id = #{user.id}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>

    <span class="nd">@Delete</span><span class="o">(</span><span class="s">"DELETE FROM users WHERE id = #{id}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="使用xml的编写sql">使用XML的编写SQL</h4>

<p>只需要修改一下配置，指定映射文件位置为<code class="language-plaintext highlighter-rouge">"classpath:mapper/*.xml"</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setMapperLocations</span><span class="o">(</span><span class="k">new</span> <span class="nc">PathMatchingResourcePatternResolver</span><span class="o">().</span><span class="na">getResources</span><span class="o">(</span><span class="s">"classpath:mapper/*.xml"</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>这样就不用注解了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>

    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对应的sql写在xml文件中：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.aotmd.test.UserMapper"</span><span class="nt">&gt;</span><span class="c">&lt;!--命名空间为接口名称--&gt;</span>
    <span class="c">&lt;!--id需与接口方法完全一致,parameterType形参,resultType返回值类型--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getById"</span> <span class="na">parameterType=</span><span class="s">"Long"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getAll"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users LIMIT #{offset}, #{maxResults}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert2"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span> <span class="na">useGeneratedKeys=</span><span class="s">"true"</span> <span class="na">keyProperty=</span><span class="s">"id"</span> <span class="na">keyColumn=</span><span class="s">"id"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>

    <span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateName"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        UPDATE users
        SET name = #{user.name}
        WHERE id = #{user.id}
    <span class="nt">&lt;/update&gt;</span>

    <span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">"deleteById"</span> <span class="na">parameterType=</span><span class="s">"long"</span><span class="nt">&gt;</span>
        DELETE
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/delete&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<hr />

<p>更新<code class="language-plaintext highlighter-rouge">User</code>时根据属性值构造动态SQL：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateUser"</span><span class="nt">&gt;</span>
  UPDATE users SET
  <span class="nt">&lt;set&gt;</span>
    <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"user.name != null"</span><span class="nt">&gt;</span> name = #{user.name} <span class="nt">&lt;/if&gt;</span>
    <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"user.hobby != null"</span><span class="nt">&gt;</span> hobby = #{user.hobby} <span class="nt">&lt;/if&gt;</span>
    <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"user.summary != null"</span><span class="nt">&gt;</span> summary = #{user.summary} <span class="nt">&lt;/if&gt;</span>
  <span class="nt">&lt;/set&gt;</span>
  WHERE id = #{user.id}
<span class="nt">&lt;/update&gt;</span>
</code></pre></div></div>

<p>编写XML配置的优点是可以组装出动态SQL，并且把所有SQL操作集中在一起。缺点是配置起来太繁琐，调用方法时如果想查看SQL还需要定位到XML配置中，<a href="https://mybatis.org/mybatis-3/zh/configuration.html">官方文档</a>。</p>

<p>使用MyBatis最大的问题是所有SQL都需要全部手写，优点是执行的SQL就是我们自己写的SQL，对SQL进行优化非常简单，也可以编写任意复杂的SQL，或者使用数据库的特定语法，但切换数据库可能就不太容易。好消息是大部分项目并没有切换数据库的需求，完全可以针对某个数据库编写尽可能优化的SQL。</p>

<h4 id="设置调试日志">设置调试日志</h4>

<p>引入log4j依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>log4j<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>log4j<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2.17<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>初始化时配置log4j：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
    <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setMapperLocations</span><span class="o">(</span><span class="k">new</span> <span class="nc">PathMatchingResourcePatternResolver</span><span class="o">().</span><span class="na">getResources</span><span class="o">(</span><span class="s">"classpath:mapper/*.xml"</span><span class="o">));</span>
    <span class="c1">// 创建 MyBatis 的 Configuration 对象</span>
    <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span><span class="o">();</span>

    <span class="c1">// 设置日志实现为Log4j</span>
    <span class="n">configuration</span><span class="o">.</span><span class="na">setLogImpl</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Log4jImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="c1">// 将 Configuration 对象设置到 SqlSessionFactoryBean 中</span>
    <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setConfiguration</span><span class="o">(</span><span class="n">configuration</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">classpath</code>根目录新建<code class="language-plaintext highlighter-rouge">log4j.properties</code>:</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Global logging configuration
</span><span class="py">log4j.rootLogger</span><span class="p">=</span><span class="s">ERROR, stdout</span>
<span class="c"># MyBatis logging configuration...
</span><span class="py">log4j.logger.com.aotmd.test</span><span class="p">=</span><span class="s">DEBUG</span>
<span class="c">#log4j.logger.org.springframework=DEBUG
# Console output...
</span><span class="py">log4j.appender.stdout</span><span class="p">=</span><span class="s">org.apache.log4j.ConsoleAppender</span>
<span class="py">log4j.appender.stdout.layout</span><span class="p">=</span><span class="s">org.apache.log4j.PatternLayout</span>
<span class="py">log4j.appender.stdout.layout.ConversionPattern</span><span class="p">=</span><span class="s">%d{yyyy-MM-dd HH:mm:ss} %5p [%t] - %m%n</span>
<span class="py">mybatis.configuration.call-setters-on-nulls</span><span class="p">=</span><span class="s">true</span>
<span class="py">log4j.appender.Console.layout.ConversionPattern</span><span class="p">=</span><span class="s">%d{yyyy-MM-dd HH:mm:ss} %5p [%t] (%F:%L) - %m%n</span>
</code></pre></div></div>

<p>注意第4行的<code class="language-plaintext highlighter-rouge">log4j.logger.com.aotmd.test=DEBUG</code>，表示对<code class="language-plaintext highlighter-rouge">com.aotmd.test</code>包下的接口方法进行日志DEBUG级别输出。</p>

<h1 id="spring-mvc">Spring MVC</h1>

<p>Spring提供的是一个IoC容器，所有的Bean，包括Controller，都在Spring IoC容器中被初始化，而Servlet容器由JavaEE服务器提供（如Tomcat）。</p>

<p>要使用Spring MVC，需要以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.embed<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>tomcat-embed-core<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>9.0.26<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.embed<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>tomcat-embed-jasper<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>9.0.26<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>pebble-spring5<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.2.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>文件目录结构：</p>

<pre><code class="language-ascii">spring-web-mvc
├── pom.xml
└── src
    └── main
        ├── java
        │   └── com
        │       └── aotmd
        │           └── test
        │               └── Test4.java
        ├── resources
        │   ├── jdbc.properties
        │   └── log4j.properties
        └── webapp
            ├── WEB-INF
            │   ├── templates
            │   │   └── test.html
            │   └── web.xml
            └── static
                ├── css
                └── js
</code></pre>

<p>其中，<code class="language-plaintext highlighter-rouge">src/main/webapp</code>是标准web目录，<code class="language-plaintext highlighter-rouge">WEB-INF</code>存放<code class="language-plaintext highlighter-rouge">web.xml</code>，编译的class，第三方jar，以及不允许浏览器直接访问的View模版，<code class="language-plaintext highlighter-rouge">static</code>目录存放所有静态文件。</p>

<p><code class="language-plaintext highlighter-rouge">src/main/resources</code>目录中存放的是Java程序读取的classpath资源文件。<code class="language-plaintext highlighter-rouge">src/main/java</code>就是编写的Java代码。</p>

<hr />

<p>和普通Spring配置一样，只需加上<code class="language-plaintext highlighter-rouge">@EnableWebMvc</code>注解，就“激活”了Spring MVC。</p>

<p>除了创建<code class="language-plaintext highlighter-rouge">DataSource</code>、<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>、<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>外，<code class="language-plaintext highlighter-rouge">AppConfig</code>需要额外创建几个用于Spring MVC的Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>并不是必须的，在这里创建了一个默认的<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>，只覆写<code class="language-plaintext highlighter-rouge">addResourceHandlers()</code>，目的是让Spring MVC自动处理静态文件，并且映射路径为<code class="language-plaintext highlighter-rouge">/static/**</code>。</p>

<p>另一个必须要创建的Bean是<code class="language-plaintext highlighter-rouge">ViewResolver</code>，因为Spring MVC允许集成任何模板引擎，使用哪个模板引擎，就实例化一个对应的<code class="language-plaintext highlighter-rouge">ViewResolver</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
            <span class="c1">// cache:</span>
            <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
            <span class="c1">// loader:</span>
            <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ViewResolver</code>通过指定<code class="language-plaintext highlighter-rouge">prefix</code>和<code class="language-plaintext highlighter-rouge">suffix</code>来确定如何查找View。上述配置使用Pebble引擎，指定模板文件存放在<code class="language-plaintext highlighter-rouge">/WEB-INF/templates/</code>目录下。</p>

<p>剩下的Bean都是普通的<code class="language-plaintext highlighter-rouge">@Component</code>，但Controller必须标记为<code class="language-plaintext highlighter-rouge">@Controller</code>，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Controller使用@Controller标记而不是@Component:</span>
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="c1">// 正常使用@Autowired注入:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="c1">// 处理一个URL映射:</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果是普通的Java应用程序，可以通过<code class="language-plaintext highlighter-rouge">main()</code>方法可以很简单地创建一个Spring容器的实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在Web应用中启动Spring容器有很多种方法，可以通过Listener启动，也可以通过Servlet启动，可以使用XML配置，也可以使用注解配置。这里，介绍一种最简单的启动Spring容器的方式。在<code class="language-plaintext highlighter-rouge">web.xml</code>中配置Spring MVC提供的<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="nt">&lt;web-app&gt;</span>
    <span class="nt">&lt;servlet&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextClass<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>com.aotmd.test.Test4<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;load-on-startup&gt;</span>0<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;/servlet&gt;</span>

    <span class="nt">&lt;servlet-mapping&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/servlet-mapping&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<p>初始化参数<code class="language-plaintext highlighter-rouge">contextClass</code>指定使用注解配置的<code class="language-plaintext highlighter-rouge">AnnotationConfigWebApplicationContext</code>，配置文件的位置参数<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>指向<code class="language-plaintext highlighter-rouge">AppConfig</code>的完整类名，最后，把这个Servlet映射到<code class="language-plaintext highlighter-rouge">/*</code>，即处理所有URL。</p>

<p>上述配置可以看作一个样板配置，有了这个配置，Servlet容器会首先初始化Spring MVC的<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>，在<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>启动时，它根据配置<code class="language-plaintext highlighter-rouge">AppConfig</code>创建了一个类型是<code class="language-plaintext highlighter-rouge">WebApplicationContext</code>的IoC容器，完成所有Bean的初始化，并将容器绑到<code class="language-plaintext highlighter-rouge">ServletContext</code>上。</p>

<p>因为<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>持有IoC容器，能从IoC容器中获取所有<code class="language-plaintext highlighter-rouge">@Controller</code>的Bean，因此，<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>接收到所有HTTP请求后，根据Controller方法配置的路径，就可以正确地把请求转发到指定方法，并根据返回的<code class="language-plaintext highlighter-rouge">ModelAndView</code>决定如何渲染页面。</p>

<p>最后，在<code class="language-plaintext highlighter-rouge">AppConfig</code>中通过<code class="language-plaintext highlighter-rouge">main()</code>方法启动嵌入式Tomcat：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableWebMvc</span>
<span class="nd">@MapperScan</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">src/main/webapp/WEB-INF/templates/test.html</code>：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>测试<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>上述Web应用程序就是使用Spring MVC时的一个最小启动功能集。</p>

<hr />

<p>有了Web应用程序的最基本的结构，重点就可以放在如何编写Controller上。Spring MVC对Controller没有固定的要求，也不需要实现特定的接口。以<code class="language-plaintext highlighter-rouge">UserController</code>为例，编写Controller只需要遵循以下要点：</p>

<p>总是标记<code class="language-plaintext highlighter-rouge">@Controller</code>而不是<code class="language-plaintext highlighter-rouge">@Component</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>一个方法对应一个HTTP请求路径，用<code class="language-plaintext highlighter-rouge">@GetMapping</code>或<code class="language-plaintext highlighter-rouge">@PostMapping</code>表示GET或POST请求：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">doSignin</span><span class="o">(</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"email"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"password"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span>
        <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>需要接收的HTTP参数以<code class="language-plaintext highlighter-rouge">@RequestParam()</code>标注，可以设置默认值。如果方法参数需要传入<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>、<code class="language-plaintext highlighter-rouge">HttpServletResponse</code>或者<code class="language-plaintext highlighter-rouge">HttpSession</code>，直接添加这个类型的参数即可，Spring MVC会自动按类型传入。</p>

<p>返回的ModelAndView通常包含View的路径和一个Map作为Model，但也可以没有Model，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="k">new</span> <span class="nc">ModelAndView</span><span class="o">(</span><span class="s">"signin.html"</span><span class="o">);</span> <span class="c1">// 仅View，没有Model</span>
</code></pre></div></div>

<p>返回重定向时既可以写<code class="language-plaintext highlighter-rouge">new ModelAndView("redirect:/signin")</code>，也可以直接返回String：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(...)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"redirect:/signin"</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"redirect:/profile"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果在方法内部直接操作<code class="language-plaintext highlighter-rouge">HttpServletResponse</code>发送响应，返回<code class="language-plaintext highlighter-rouge">null</code>表示无需进一步处理：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">download</span><span class="o">(</span><span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="o">...</span>
    <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"application/octet-stream"</span><span class="o">);</span>
    <span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
    <span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    <span class="n">output</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对URL进行分组，每组对应一个Controller是一种很好的组织形式，并可以在Controller的class定义出添加URL前缀，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/user"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="c1">// 注意实际URL映射是/user/profile</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>

    <span class="c1">// 注意实际URL映射是/user/changePassword</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/changePassword"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">changePassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实际方法的URL映射总是前缀+路径，这种形式还可以有效避免不小心导致的重复的URL映射。</p>

<p>使用Spring MVC时，整个Web应用程序按如下顺序启动：</p>

<ol>
  <li>启动Tomcat服务器；</li>
  <li>Tomcat读取<code class="language-plaintext highlighter-rouge">web.xml</code>并初始化<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>创建IoC容器并自动注册到<code class="language-plaintext highlighter-rouge">ServletContext</code>中。</li>
</ol>

<p>启动后，浏览器发出的HTTP请求全部由<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>接收，并根据配置转发到指定Controller的指定方法处理。</p>

<h2 id="rest">REST</h2>

<p>使用Spring MVC开发Web应用程序的主要工作就是编写Controller逻辑。在Web应用中，除了需要使用MVC给用户显示页面外，还有一类API接口，我们称之为REST，通常输入输出都是JSON，便于第三方调用或者使用页面JavaScript与之交互。</p>

<p>直接在Controller中处理JSON是可以的，因为Spring MVC的<code class="language-plaintext highlighter-rouge">@GetMapping</code>和<code class="language-plaintext highlighter-rouge">@PostMapping</code>都支持指定输入和输出的格式。如果想接收JSON，输出JSON，那么可以这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/rest"</span><span class="o">,</span>
             <span class="n">consumes</span> <span class="o">=</span> <span class="s">"application/json;charset=UTF-8"</span><span class="o">,</span>
             <span class="n">produces</span> <span class="o">=</span> <span class="s">"application/json;charset=UTF-8"</span><span class="o">)</span>
<span class="nd">@ResponseBody</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">rest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="s">"{\"restSupport\":true}"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>需要加入Jackson这个依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.17.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>测试：post-body-raw-JSON：<code class="language-plaintext highlighter-rouge">{"email":"bob@example.com"}</code>，访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/rest</code>，显示正常:<code class="language-plaintext highlighter-rouge">{"restSupport": true}</code>。</p>

<p><code class="language-plaintext highlighter-rouge">@PostMapping</code>使用<code class="language-plaintext highlighter-rouge">consumes</code>声明能接收的类型，使用<code class="language-plaintext highlighter-rouge">produces</code>声明输出的类型，并且额外加了<code class="language-plaintext highlighter-rouge">@ResponseBody</code>表示返回的<code class="language-plaintext highlighter-rouge">String</code>无需额外处理，直接作为输出内容写入<code class="language-plaintext highlighter-rouge">HttpServletResponse</code>。输入的JSON则根据注解<code class="language-plaintext highlighter-rouge">@RequestBody</code>直接被Spring反序列化为<code class="language-plaintext highlighter-rouge">User</code>这个JavaBean。</p>

<p>直接用Spring的Controller配合一大堆注解写REST太麻烦了，因此，Spring还额外提供了一个<code class="language-plaintext highlighter-rouge">@RestController</code>注解，使用<code class="language-plaintext highlighter-rouge">@RestController</code>替代<code class="language-plaintext highlighter-rouge">@Controller</code>后，每个方法自动变成API接口方法。还是以实际代码举例，编写<code class="language-plaintext highlighter-rouge">ApiController</code>如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写REST接口只需要定义<code class="language-plaintext highlighter-rouge">@RestController</code>，然后，每个方法都是一个API接口，输入和输出只要能被Jackson序列化或反序列化为JSON就没有问题。</p>

<p>测试：post-body-raw-JSON：<code class="language-plaintext highlighter-rouge">{"email":"bob@example.com","password":"bob123","name":"test"}</code>，访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/signin</code>，显示正常:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"user"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
        </span><span class="nl">"email"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bob@example.com"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bob123"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"test"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"createdAt"</span><span class="p">:</span><span class="w"> </span><span class="mi">1719308650728</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">User</code>能被正确地序列化为JSON，但暴露了<code class="language-plaintext highlighter-rouge">password</code>属性，这是我们不期望的。要避免输出<code class="language-plaintext highlighter-rouge">password</code>属性，可以把<code class="language-plaintext highlighter-rouge">User</code>复制到另一个<code class="language-plaintext highlighter-rouge">UserBean</code>对象，该对象只持有必要的属性，但这样做比较繁琐。另一种简单的方法是直接在<code class="language-plaintext highlighter-rouge">User</code>的<code class="language-plaintext highlighter-rouge">password</code>属性定义处加上<code class="language-plaintext highlighter-rouge">@JsonIgnore</code>表示完全忽略该属性：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@JsonIgnore</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是这样一来，如果写一个<code class="language-plaintext highlighter-rouge">register(User user)</code>方法，那么该方法的User对象也拿不到注册时用户传入的密码了。如果要允许输入<code class="language-plaintext highlighter-rouge">password</code>，但不允许输出<code class="language-plaintext highlighter-rouge">password</code>，即在JSON序列化和反序列化时，允许写属性，禁用读属性，可以更精细地控制如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">Access</span><span class="o">.</span><span class="na">WRITE_ONLY</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>同样的，可以使用<code class="language-plaintext highlighter-rouge">@JsonProperty(access = Access.READ_ONLY)</code>允许输出，不允许输入。</p>

<h2 id="取值注解">取值注解</h2>

<p>在 Spring MVC 中，除了 <code class="language-plaintext highlighter-rouge">@PathVariable</code> 和 <code class="language-plaintext highlighter-rouge">@RequestBody</code>，还有许多其他用于处理请求参数的取值注解。以下是一些常用的取值注解：</p>

<p><strong><code class="language-plaintext highlighter-rouge">@RequestParam</code></strong>：用于从请求参数中提取值，通常用于获取 URL 查询字符串中的参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getData"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Data</span> <span class="nf">getData</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">dataService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@RequestHeader</code></strong>：用于从请求头中提取值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getData"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Data</span> <span class="nf">getData</span><span class="o">(</span><span class="nd">@RequestHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">authHeader</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">dataService</span><span class="o">.</span><span class="na">findByAuthHeader</span><span class="o">(</span><span class="n">authHeader</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@RequestAttribute</code></strong>：用于从请求属性中提取值，这些属性通常是在请求处理过程中设置的。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getData"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Data</span> <span class="nf">getData</span><span class="o">(</span><span class="nd">@RequestAttribute</span><span class="o">(</span><span class="s">"userId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">dataService</span><span class="o">.</span><span class="na">findByUserId</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@CookieValue</code></strong>：用于从 Cookie 中提取值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getData"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Data</span> <span class="nf">getData</span><span class="o">(</span><span class="nd">@CookieValue</span><span class="o">(</span><span class="s">"sessionId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">sessionId</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">dataService</span><span class="o">.</span><span class="na">findBySessionId</span><span class="o">(</span><span class="n">sessionId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@ModelAttribute</code></strong>：用于将请求参数绑定到模型对象中，通常用于表单提交。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/submitForm"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Wrapper</span> <span class="nf">submitForm</span><span class="o">(</span><span class="nd">@ModelAttribute</span> <span class="nc">FormData</span> <span class="n">formData</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">formService</span><span class="o">.</span><span class="na">processForm</span><span class="o">(</span><span class="n">formData</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@ResponseBody</code></strong>：用于将方法的返回值直接作为响应体输出，通常与 RESTful API 一起使用。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/submitData"</span><span class="o">)</span>
<span class="nd">@ResponseBody</span>
<span class="kd">public</span> <span class="nc">Data</span> <span class="nf">submitData</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">dataService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这些注解提供了灵活的方式来从 HTTP 请求中提取数据，使得 Spring MVC 的控制器能够处理各种输入数据。</p>

<h2 id="集成filter">集成Filter</h2>

<p>在Spring MVC中，<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>只需要固定配置到<code class="language-plaintext highlighter-rouge">web.xml</code>中，剩下的工作主要是专注于编写Controller。</p>

<p>在Servlet规范中，还可以使用<code class="language-plaintext highlighter-rouge">Filter</code>。如果要在Spring MVC中使用<code class="language-plaintext highlighter-rouge">Filter</code>，应该怎么做？</p>

<p>在上一节的Web应用中注册时输入中文会导致乱码，因为Servlet默认按非UTF-8编码读取参数。为了修复这一问题，可以简单地使用一个EncodingFilter，在全局范围类给<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>和<code class="language-plaintext highlighter-rouge">HttpServletResponse</code>强制设置为UTF-8编码。</p>

<p>可以自己编写一个EncodingFilter，也可以直接使用Spring MVC自带的一个<code class="language-plaintext highlighter-rouge">CharacterEncodingFilter</code>。配置Filter时，只需在<code class="language-plaintext highlighter-rouge">web.xml</code>中声明即可：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>
    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>forceEncoding<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>
<span class="nt">&lt;/filter&gt;</span>

<span class="nt">&lt;filter-mapping&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<p>因为这种Filter和业务关系不大，<code class="language-plaintext highlighter-rouge">CharacterEncodingFilter</code>其实和Spring的IoC容器没有任何关系，两者均互不知晓对方的存在，因此，配置这种Filter十分简单。</p>

<p>如果允许用户使用Basic模式进行用户验证，即在HTTP请求中添加头<code class="language-plaintext highlighter-rouge">Authorization: Basic email:password</code>，这个需求如何实现？</p>

<p>编写一个<code class="language-plaintext highlighter-rouge">AuthFilter</code>是最简单的实现方式：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AuthFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">HttpServletRequest</span> <span class="n">req</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">;</span>
        <span class="c1">// 获取Authorization头:</span>
        <span class="nc">String</span> <span class="n">authHeader</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authHeader</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">authHeader</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"Basic "</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str</span><span class="o">=</span><span class="n">authHeader</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">str</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="nc">Base64</span><span class="o">.</span><span class="na">getDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">str</span><span class="o">));</span>
            <span class="c1">// 从Header中提取email和password:</span>
            <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">)[</span><span class="mi">0</span><span class="o">];</span>
            <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="c1">// 登录:</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="c1">// 放入Session:</span>
            <span class="n">req</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"KEY_USER"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 继续处理请求:</span>
        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是，在Spring中创建的这个<code class="language-plaintext highlighter-rouge">AuthFilter</code>是一个普通Bean，Servlet容器并不知道，所以它不会起作用。</p>

<p>如果直接在<code class="language-plaintext highlighter-rouge">web.xml</code>中声明这个<code class="language-plaintext highlighter-rouge">AuthFilter</code>，则<code class="language-plaintext highlighter-rouge">AuthFilter</code>的实例将由Servlet容器而不是Spring容器初始化，因此，<code class="language-plaintext highlighter-rouge">@Autowire</code>根本不生效，用于登录的<code class="language-plaintext highlighter-rouge">UserService</code>成员变量永远是<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p>所以，得通过一种方式，让Servlet容器实例化的Filter，间接引用Spring容器实例化的<code class="language-plaintext highlighter-rouge">AuthFilter</code>。Spring MVC提供了一个<code class="language-plaintext highlighter-rouge">DelegatingFilterProxy</code>，专门来干这个事情：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>authFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="nt">&lt;/filter-class&gt;</span>
<span class="nt">&lt;/filter&gt;</span>

<span class="nt">&lt;filter-mapping&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>authFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<p>Servlet容器从<code class="language-plaintext highlighter-rouge">web.xml</code>中读取配置，实例化<code class="language-plaintext highlighter-rouge">DelegatingFilterProxy</code>，注意命名是<code class="language-plaintext highlighter-rouge">authFilter</code>；</p>

<p>Spring容器通过扫描<code class="language-plaintext highlighter-rouge">@Component</code>实例化<code class="language-plaintext highlighter-rouge">AuthFilter</code>。</p>

<p>当<code class="language-plaintext highlighter-rouge">DelegatingFilterProxy</code>生效后，它会自动查找注册在<code class="language-plaintext highlighter-rouge">ServletContext</code>上的Spring容器，再试图从容器中查找<strong>名为<code class="language-plaintext highlighter-rouge">authFilter</code>的Bean</strong>，也就是我们用<code class="language-plaintext highlighter-rouge">@Component</code>声明的<code class="language-plaintext highlighter-rouge">AuthFilter</code>。</p>

<p><code class="language-plaintext highlighter-rouge">DelegatingFilterProxy</code>将请求代理给<code class="language-plaintext highlighter-rouge">AuthFilter</code>，核心代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DelegatingFilterProxy</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Filter</span> <span class="n">delegate</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(...)</span> <span class="kd">throws</span> <span class="o">...</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">delegate</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">delegate</span> <span class="o">=</span> <span class="n">findBeanFromSpringContainer</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">delegate</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">,</span> <span class="n">chain</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这就是一个代理模式的简单应用。画图表示它们之间的引用关系如下：</p>

<pre><code class="language-ascii">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
  ┌─────────────────────┐        ┌───────────┐   │
│ │DelegatingFilterProxy│─│─│─ ─&gt;│AuthFilter │
  └─────────────────────┘        └───────────┘   │
│ ┌─────────────────────┐ │ │    ┌───────────┐
  │  DispatcherServlet  │─ ─ ─ ─&gt;│Controllers│   │
│ └─────────────────────┘ │ │    └───────────┘
                                                 │
│    Servlet Container    │ │  Spring Container
 ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>如果在<code class="language-plaintext highlighter-rouge">web.xml</code>中配置的Filter名字和Spring容器的<strong>Bean的名字不一致</strong>，那么需要指定Bean的名字：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>basicAuthFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="nt">&lt;/filter-class&gt;</span>
    <span class="c">&lt;!-- 指定Bean的名字 --&gt;</span>
    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>targetBeanName<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>authFilter<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>
<span class="nt">&lt;/filter&gt;</span>
</code></pre></div></div>

<p>实际应用时，尽量保持名字一致，以减少不必要的配置。</p>

<p>要使用Basic模式的用户认证，可以使用postman测试。例如，用户登录名是<code class="language-plaintext highlighter-rouge">tom@example.com</code>，口令是<code class="language-plaintext highlighter-rouge">tomcat</code>，那么先构造一个使用URL编码的<code class="language-plaintext highlighter-rouge">用户名:口令</code>的字符串：<code class="language-plaintext highlighter-rouge">tom@example.com:tomcat</code>,然后通过<code class="language-plaintext highlighter-rouge">btoa("tom@example.com:tomcat")</code>编码为：<code class="language-plaintext highlighter-rouge">dG9tQGV4YW1wbGUuY29tOnRvbWNhdA==</code>，并在前头添加<code class="language-plaintext highlighter-rouge">Basic  </code> 和空格，组成：<code class="language-plaintext highlighter-rouge">Basic dG9tQGV4YW1wbGUuY29tOnRvbWNhdA==</code>。</p>

<p>首先设置url：<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/signin</code>,post方式body-raw-json：<code class="language-plaintext highlighter-rouge">{"email":"tom@example.com","password":"tomcat","name":"test"}</code>,插入一条数据。</p>

<p>然后构建一下登录：</p>

<p><code class="language-plaintext highlighter-rouge">UserMapper</code>添加：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="nf">getByEmailAndByPassword</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">UserMapper.xml</code>添加：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getByEmailAndByPassword"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
    SELECT *
    FROM users
    WHERE email = #{user.email} and
    password=#{user.password}
<span class="nt">&lt;/select&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">UserService</code>添加：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">=</span><span class="n">userMapper</span><span class="o">.</span><span class="na">getByEmailAndByPassword</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>get：<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/users</code>，并附带header：Authorization：<code class="language-plaintext highlighter-rouge">Basic dG9tQGV4YW1wbGUuY29tOnRvbWNhdA==</code></p>

<p>控制台打印：<code class="language-plaintext highlighter-rouge">User{id=0, email='tom@example.com', password='tomcat', name='test', createdAt=1719387371455}</code>，返回的Cookie带有:<code class="language-plaintext highlighter-rouge">JSESSIONID=5DEFF8E659A261619EDE0CA1D646038D</code>正常使用。</p>

<p>完整实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Param</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.SqlSessionFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.annotation.MapperScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.PropertySource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.core.io.support.PathMatchingResourcePatternResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.PlatformTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ModelAndView</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.EnableWebMvc</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.ViewControllerRegistry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.WebMvcConfigurer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Base64</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>


<span class="cm">/**
 * @author aotmd
 * @version 1.0
 * @date 2024/6/1 22:16
 */</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@MapperScan</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setMapperLocations</span><span class="o">(</span><span class="k">new</span> <span class="nc">PathMatchingResourcePatternResolver</span><span class="o">().</span><span class="na">getResources</span><span class="o">(</span><span class="s">"classpath:mapper/*.xml"</span><span class="o">));</span>
        <span class="c1">// 创建 MyBatis 的 Configuration 对象</span>
        <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span><span class="o">();</span>

        <span class="c1">// 设置日志实现为Log4j</span>
        <span class="n">configuration</span><span class="o">.</span><span class="na">setLogImpl</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Log4jImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="c1">//configuration.setLogPrefix("mybatis.debug.");</span>
<span class="cm">/*        configuration.setLogPrefix("mybatis.debug.sql.");*/</span>

        <span class="c1">// 将 Configuration 对象设置到 SqlSessionFactoryBean 中</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setConfiguration</span><span class="o">(</span><span class="n">configuration</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span>  <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span>  <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", createdAt="</span> <span class="o">+</span> <span class="n">createdAt</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="c1">//新增的部分</span>
    <span class="nc">User</span> <span class="nf">getByEmailAndByPassword</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
	<span class="c1">//新增的部分</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">=</span><span class="n">userMapper</span><span class="o">.</span><span class="na">getByEmailAndByPassword</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Controller使用@Controller标记而不是@Component:</span>
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="c1">// 正常使用@Autowired注入:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="c1">// 处理一个URL映射:</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/rest"</span><span class="o">,</span>
            <span class="n">consumes</span> <span class="o">=</span> <span class="s">"application/json;charset=UTF-8"</span><span class="o">,</span>
            <span class="n">produces</span> <span class="o">=</span> <span class="s">"application/json;charset=UTF-8"</span><span class="o">)</span>
    <span class="nd">@ResponseBody</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">rest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"{\"restSupport\":true}"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">//新增的部分</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AuthFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">HttpServletRequest</span> <span class="n">req</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">;</span>
        <span class="c1">// 获取Authorization头:</span>
        <span class="nc">String</span> <span class="n">authHeader</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authHeader</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">authHeader</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"Basic "</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str</span><span class="o">=</span><span class="n">authHeader</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">str</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="nc">Base64</span><span class="o">.</span><span class="na">getDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">str</span><span class="o">));</span>
            <span class="c1">// 从Header中提取email和password:</span>
            <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">)[</span><span class="mi">0</span><span class="o">];</span>
            <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="c1">// 登录:</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="c1">// 放入Session:</span>
            <span class="n">req</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"KEY_USER"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 继续处理请求:</span>
        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">web.xml</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>
         <span class="na">version=</span><span class="s">"4.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;servlet&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextClass<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>com.aotmd.test.Test4<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;load-on-startup&gt;</span>0<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;/servlet&gt;</span>

    <span class="nt">&lt;servlet-mapping&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/servlet-mapping&gt;</span>
	<span class="c">&lt;!--新增的部分--&gt;</span>
    <span class="nt">&lt;filter&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>forceEncoding<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
    <span class="nt">&lt;/filter&gt;</span>
	
    <span class="nt">&lt;filter-mapping&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/filter-mapping&gt;</span>
	<span class="c">&lt;!--新增的部分--&gt;</span>
    <span class="nt">&lt;filter&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>authFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="nt">&lt;/filter-class&gt;</span>
    <span class="nt">&lt;/filter&gt;</span>

    <span class="nt">&lt;filter-mapping&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>authFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/filter-mapping&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">UserMapper.xml</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.aotmd.test.UserMapper"</span><span class="nt">&gt;</span><span class="c">&lt;!--命名空间为接口名称--&gt;</span>
    <span class="c">&lt;!--id需与接口方法完全一致,parameterType形参,resultType返回值类型--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getById"</span> <span class="na">parameterType=</span><span class="s">"Long"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getAll"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users LIMIT #{offset}, #{maxResults}
    <span class="nt">&lt;/select&gt;</span>
    <span class="c">&lt;!--新增的部分--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getByEmailAndByPassword"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE email = #{user.email} and
        password=#{user.password}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert2"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span> <span class="na">useGeneratedKeys=</span><span class="s">"true"</span> <span class="na">keyProperty=</span><span class="s">"id"</span> <span class="na">keyColumn=</span><span class="s">"id"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>

    <span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateName"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        UPDATE users
        SET name = #{user.name}
        WHERE id = #{user.id}
    <span class="nt">&lt;/update&gt;</span>

    <span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">"deleteById"</span> <span class="na">parameterType=</span><span class="s">"long"</span><span class="nt">&gt;</span>
        DELETE
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/delete&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<h2 id="使用interceptor">使用Interceptor</h2>

<p>在Web程序中，使用Filter的时候，Filter由Servlet容器管理，它在Spring MVC的Web应用程序中作用范围如下：</p>

<pre><code class="language-ascii">         │   ▲
         ▼   │
       ┌───────┐
       │Filter1│
       └───────┘
         │   ▲
         ▼   │
       ┌───────┐
┌ ─ ─ ─│Filter2│─ ─ ─ ─ ─ ─ ─ ─ ┐
       └───────┘
│        │   ▲                  │
         ▼   │
│ ┌─────────────────┐           │
  │DispatcherServlet│&lt;───┐
│ └─────────────────┘    │      │
   │              ┌────────────┐
│  │              │ModelAndView││
   │              └────────────┘
│  │                     ▲      │
   │    ┌───────────┐    │
│  ├───&gt;│Controller1│────┤      │
   │    └───────────┘    │
│  │                     │      │
   │    ┌───────────┐    │
│  └───&gt;│Controller2│────┘      │
        └───────────┘
└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>上图虚线框就是Filter2的拦截范围，Filter组件实际上并不知道后续内部处理是通过Spring MVC提供的<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>还是其他Servlet组件，因为Filter是Servlet规范定义的标准组件，它可以应用在任何基于Servlet的程序中。</p>

<p>如果只基于Spring MVC开发应用程序，还可以使用Spring MVC提供的一种功能类似Filter的拦截器：Interceptor。和Filter相比，Interceptor拦截范围不是后续整个处理流程，而是仅针对Controller拦截：</p>

<pre><code class="language-ascii">       │   ▲
       ▼   │
     ┌───────┐
     │Filter1│
     └───────┘
       │   ▲
       ▼   │
     ┌───────┐
     │Filter2│
     └───────┘
       │   ▲
       ▼   │
┌─────────────────┐
│DispatcherServlet│&lt;───┐
└─────────────────┘    │
 │ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┼ ─ ─ ─ ┐
 │                     │
 │ │            ┌────────────┐ │
 │              │   Render   │
 │ │            └────────────┘ │
 │                     ▲
 │ │                   │       │
 │              ┌────────────┐
 │ │            │ModelAndView│ │
 │              └────────────┘
 │ │                   ▲       │
 │    ┌───────────┐    │
 ├─┼─&gt;│Controller1│────┤       │
 │    └───────────┘    │
 │ │                   │       │
 │    ┌───────────┐    │
 └─┼─&gt;│Controller2│────┘       │
      └───────────┘
   └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>上图虚线框就是Interceptor的拦截范围，Controller的处理方法一般都类似这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Controller1</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/path/to/hello"</span><span class="o">)</span>
    <span class="nc">ModelAndView</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>所以，Interceptor的拦截范围其实就是Controller方法，它实际上就相当于基于AOP的方法拦截。因为Interceptor只拦截Controller方法，所以要注意，返回<code class="language-plaintext highlighter-rouge">ModelAndView</code>并渲染后，后续处理就脱离了Interceptor的拦截范围。</p>

<p>使用Interceptor的好处是Interceptor本身是Spring管理的Bean，因此注入任意Bean都非常简单。此外，可以应用多个Interceptor，并通过简单的<code class="language-plaintext highlighter-rouge">@Order</code>指定顺序。先写一个<code class="language-plaintext highlighter-rouge">LoggerInterceptor</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoggerInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"preHandle {}..."</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"debug"</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;p&gt;DEBUG MODE&lt;/p&gt;"</span><span class="o">);</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"postHandle {}."</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">modelAndView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__time__"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"afterCompletion {}: exception = {}"</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">(),</span> <span class="n">ex</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>一个Interceptor必须实现<code class="language-plaintext highlighter-rouge">HandlerInterceptor</code>接口，可以选择实现<code class="language-plaintext highlighter-rouge">preHandle()</code>、<code class="language-plaintext highlighter-rouge">postHandle()</code>和<code class="language-plaintext highlighter-rouge">afterCompletion()</code>方法。<code class="language-plaintext highlighter-rouge">preHandle()</code>是Controller方法调用前执行，<code class="language-plaintext highlighter-rouge">postHandle()</code>是Controller方法正常返回后执行，而<code class="language-plaintext highlighter-rouge">afterCompletion()</code>无论Controller方法是否抛异常都会执行，参数<code class="language-plaintext highlighter-rouge">ex</code>就是Controller方法抛出的异常（未抛出异常是<code class="language-plaintext highlighter-rouge">null</code>）。</p>

<p>在<code class="language-plaintext highlighter-rouge">preHandle()</code>中，也可以直接处理响应，返回<code class="language-plaintext highlighter-rouge">false</code>表示无需调用Controller方法继续处理，通常在认证或者安全检查失败时直接返回错误响应。在<code class="language-plaintext highlighter-rouge">postHandle()</code>中，因为捕获了Controller方法返回的<code class="language-plaintext highlighter-rouge">ModelAndView</code>，所以可以继续往<code class="language-plaintext highlighter-rouge">ModelAndView</code>里添加一些通用数据，很多页面需要的全局数据如Copyright信息等都可以放到这里，无需在每个Controller方法中重复添加。</p>

<p>最后，要让拦截器生效，我们在<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>中注册所有的Interceptor：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">HandlerInterceptor</span><span class="o">[]</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">interceptor</span> <span class="o">:</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">interceptor</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="o">...</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果拦截器没有生效，请检查是否忘了在WebMvcConfigurer中注册。</p>

<p>如果是通过xml配置，则<code class="language-plaintext highlighter-rouge">LoggerInterceptor</code>照旧，但可以去掉<code class="language-plaintext highlighter-rouge">@Component</code>，如果不需要指定执行顺序，也可以去掉<code class="language-plaintext highlighter-rouge">@Order(1)</code>。xml文件配置如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mvc:interceptors&gt;</span>
    <span class="nt">&lt;mvc:interceptor&gt;</span>
        <span class="c">&lt;!--mapping:哪些路径需要经过拦截器 /**: 表示n层路径 /*:表示一层路径 --&gt;</span>
        <span class="nt">&lt;mvc:mapping</span> <span class="na">path=</span><span class="s">"/**"</span><span class="nt">/&gt;</span>
        <span class="c">&lt;!--exclude-mapping:设置不经过该拦截的路径--&gt;</span>
        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">"/img/*"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">"/css/**"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">"/js/**"</span><span class="nt">/&gt;</span>
        <span class="c">&lt;!--bean表示你自定义的拦截器类路径--&gt;</span>
        <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"com.aotmd.test.LoggerInterceptor"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/mvc:interceptor&gt;</span>
<span class="nt">&lt;/mvc:interceptors&gt;</span>
</code></pre></div></div>

<p>对应的代码是：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">HandlerInterceptor</span><span class="o">[]</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">interceptor</span> <span class="o">:</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">interceptor</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">excludePathPatterns</span><span class="o">(</span><span class="s">"/img/*"</span><span class="o">,</span> <span class="s">"/css/**"</span><span class="o">,</span> <span class="s">"/js/**"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="处理异常">处理异常</h2>

<p>在Controller中，Spring MVC还允许定义基于<code class="language-plaintext highlighter-rouge">@ExceptionHandler</code>注解的异常处理方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">handleUnknowException</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"500.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="n">ex</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">(),</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()));</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>异常处理方法没有固定的方法签名，可以传入<code class="language-plaintext highlighter-rouge">Exception</code>、<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>等，返回值可以是<code class="language-plaintext highlighter-rouge">void</code>，也可以是<code class="language-plaintext highlighter-rouge">ModelAndView</code>，上述代码通过<code class="language-plaintext highlighter-rouge">@ExceptionHandler(RuntimeException.class)</code>表示当发生<code class="language-plaintext highlighter-rouge">RuntimeException</code>的时候，就自动调用此方法处理。</p>

<p>这里返回了一个新的<code class="language-plaintext highlighter-rouge">ModelAndView</code>，这样在应用程序内部如果发生了预料之外的异常，可以给用户显示一个出错页面，而不是简单的500 Internal Server Error或404 Not Found。</p>

<p>也可以编写多个错误处理方法，每个方法针对特定的异常。例如，处理<code class="language-plaintext highlighter-rouge">LoginException</code>使得页面可以自动跳转到登录页。</p>

<p>使用<code class="language-plaintext highlighter-rouge">ExceptionHandler</code>时，要注意它<strong>仅作用于当前的Controller</strong>，即ControllerA中定义的一个<code class="language-plaintext highlighter-rouge">ExceptionHandler</code>方法对ControllerB不起作用。</p>

<p>要在所有Controller生效可以使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解。</p>

<p><code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>用于定义全局控制器增强（Global Controller Advice）类。它允许在多个控制器中共享相同的异常处理逻辑、数据绑定和其他通用的控制器功能。</p>

<p>使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解的类可以包含以下类型的方法：</p>

<ol>
  <li>异常处理方法：使用<code class="language-plaintext highlighter-rouge">@ExceptionHandler</code>注解的方法可以处理控制器中抛出的特定异常。这些方法可以根据异常类型来定义处理逻辑，并返回适当的响应。</li>
  <li>模型属性方法：使用<code class="language-plaintext highlighter-rouge">@ModelAttribute</code>注解的方法可以在每个请求处理方法之前添加模型属性。这些属性可以在多个控制器中共享，并在视图中使用。</li>
  <li>绑定参数预处理方法：使用<code class="language-plaintext highlighter-rouge">@InitBinder</code>注解的方法可以在请求处理方法之前对请求参数进行预处理。这可以包括数据绑定、格式化和验证等操作。</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>类可以应用于整个应用程序，或者可以通过指定特定的包或控制器来限定其作用范围。</p>

<p>以下是一个使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解的示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ControllerAdvice</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GlobalControllerAdvice</span> <span class="o">{</span>

    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">handleException</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 处理异常逻辑</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="s">"Internal Server Error"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@ModelAttribute</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCommonAttributes</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 添加共享的模型属性</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"appName"</span><span class="o">,</span> <span class="s">"MyApp"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@InitBinder</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initBinder</span><span class="o">(</span><span class="nc">WebDataBinder</span> <span class="n">binder</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 预处理请求参数</span>
        <span class="n">binder</span><span class="o">.</span><span class="na">registerCustomEditor</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">CustomLocalDateEditor</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上面的示例中，<code class="language-plaintext highlighter-rouge">GlobalControllerAdvice</code>类使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解进行标注。它包含了一个异常处理方法<code class="language-plaintext highlighter-rouge">handleException</code>，一个模型属性方法<code class="language-plaintext highlighter-rouge">addCommonAttributes</code>，以及一个参数预处理方法<code class="language-plaintext highlighter-rouge">initBinder</code>。这些方法可以在整个应用程序中的多个控制器中共享，并提供统一的处理逻辑和功能。</p>

<p>通过使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解，可以将这些通用的控制器增强逻辑集中到一个类中，以提高代码的可维护性和重用性。</p>

<h2 id="处理cors">处理CORS</h2>

<p>在开发REST应用时，很多时候，是通过<strong>页面</strong>的JavaScript和后端的REST API交互。</p>

<p>在JavaScript与REST交互的时候，有很多安全限制。默认情况下，<strong>浏览器</strong>按同源策略放行JavaScript调用API，即：</p>

<ul>
  <li>如果A站在域名<code class="language-plaintext highlighter-rouge">a.com</code>页面的JavaScript调用A站自己的API时，没有问题；</li>
  <li>如果A站在域名<code class="language-plaintext highlighter-rouge">a.com</code>页面的JavaScript调用B站<code class="language-plaintext highlighter-rouge">b.com</code>的API时，将被<strong>浏览器</strong>拒绝访问，因为不满足同源策略。</li>
</ul>

<p>同源要求域名要完全相同（<code class="language-plaintext highlighter-rouge">a.com</code>和<code class="language-plaintext highlighter-rouge">www.a.com</code>不同），协议要相同（<code class="language-plaintext highlighter-rouge">http</code>和<code class="language-plaintext highlighter-rouge">https</code>不同），端口要相同 。</p>

<p>那么，在域名<code class="language-plaintext highlighter-rouge">a.com</code>页面的JavaScript要调用B站<code class="language-plaintext highlighter-rouge">b.com</code>的API时，还有没有办法？</p>

<p>办法是有的，那就是CORS，全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源。如果A站的JavaScript访问B站API的时候，B站能够返回响应头<code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: http://a.com</code>，那么，<strong>浏览器</strong>就允许A站的JavaScript访问B站的API。</p>

<p>注意到跨域访问能否成功，取决于B站是否愿意给A站返回一个正确的<code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code>响应头，所以决定权永远在提供API的服务方手中。详细信息可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN文档</a>。</p>

<p>使用Spring的<code class="language-plaintext highlighter-rouge">@RestController</code>开发REST应用时，同样会面对跨域问题。如果我们允许指定的网站通过页面JavaScript访问这些REST API，就必须正确地设置CORS。</p>

<h3 id="使用crossorigin">使用<code class="language-plaintext highlighter-rouge">@CrossOrigin</code></h3>

<p>第一种方法是使用<code class="language-plaintext highlighter-rouge">@CrossOrigin</code>注解，可以在<code class="language-plaintext highlighter-rouge">@RestController</code>的class级别或方法级别定义一个<code class="language-plaintext highlighter-rouge">@CrossOrigin</code>，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">"http://a.com:8080"</span><span class="o">)</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述定义在<code class="language-plaintext highlighter-rouge">ApiController</code>处的<code class="language-plaintext highlighter-rouge">@CrossOrigin</code>指定了只允许来自<code class="language-plaintext highlighter-rouge">a.com:8080</code>跨域访问，允许多个域访问需要写成数组形式，例如<code class="language-plaintext highlighter-rouge">origins = {"http://a.com:8080", "https://www.b.com:8080"})</code>。如果要允许任何域访问，写成<code class="language-plaintext highlighter-rouge">origins = "*"</code>即可。</p>

<p>如果有多个REST Controller都需要使用CORS，那么，每个Controller<strong>都必须标注</strong><code class="language-plaintext highlighter-rouge">@CrossOrigin</code>注解。</p>

<h3 id="使用corsregistry">使用<code class="language-plaintext highlighter-rouge">CorsRegistry</code></h3>

<p>第二种方法是在<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>中定义一个全局CORS配置，下面是一个示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/api/**"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://a.com:8080"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
            <span class="c1">// 可以继续添加其他URL规则:</span>
            <span class="c1">// registry.addMapping("/rest/v2/**")...</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这种方式可以创建一个全局CORS配置，如果仔细地设计URL结构，那么可以一目了然地看到各个URL的CORS规则，推荐使用这种方式配置CORS。</p>

<hr />

<p>在Spring框架中，<code class="language-plaintext highlighter-rouge">CorsRegistry</code>是用于配置跨域资源共享（CORS）的类。它包含了一些方法，用于配置允许跨域请求的规则。以下是CorsRegistry中常用的方法：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">addMapping(String pattern)</code></strong>：用于指定允许跨域请求的路径模式。可以使用Ant样式的路径模式，例如”/api/**“。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">allowedOrigins(String... origins)</code></strong>：用于指定允许跨域请求的来源。可以传入一个或多个允许的来源，例如<code class="language-plaintext highlighter-rouge">http://example.com</code>或<code class="language-plaintext highlighter-rouge">*</code>（表示允许所有来源）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">allowedMethods(String... methods)</code></strong>：用于指定允许的请求方法，例如GET、POST、PUT等。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">allowedHeaders(String... headers)</code></strong>：用于指定允许的请求头，例如”Content-Type”、”Authorization”等。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">exposedHeaders(String... headers)</code></strong>：用于指定在响应中可以暴露给客户端的响应头。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">allowCredentials(boolean allowCredentials)</code></strong>：用于指定是否允许发送身份验证信息（如cookies）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">maxAge(long maxAge)</code></strong>：用于指定预检请求的有效期（以秒为单位）。</li>
</ol>

<p>这些方法可以通过CorsRegistry对象调用，以配置CORS规则，确保你的应用程序可以安全地处理跨域请求。</p>

<p>以下是一个常用的调用代码示例，用于在Spring框架中配置CorsRegistry：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableWebMvc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/api/**"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://localhost:8080"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">,</span> <span class="s">"PUT"</span><span class="o">,</span> <span class="s">"DELETE"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedHeaders</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">,</span> <span class="s">"Cache-Control"</span><span class="o">,</span> <span class="s">"Content-Type"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">exposedHeaders</span><span class="o">(</span><span class="s">"header1"</span><span class="o">,</span> <span class="s">"header2"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在这个示例中，我们创建了一个名为WebConfig的类，并实现了WebMvcConfigurer接口。通过覆盖addCorsMappings方法，可以配置CorsRegistry。</p>

<p>在addCorsMappings方法中，使用registry对象调用了一系列方法来配置CORS规则：</p>
<ul>
  <li>使用addMapping指定了允许跨域请求的路径模式为”/api/**“。</li>
  <li>使用allowedOrigins指定了允许的来源为<code class="language-plaintext highlighter-rouge">http://localhost:8080</code>。</li>
  <li>使用allowedMethods指定了允许的请求方法为GET、POST、PUT和DELETE。</li>
  <li>使用allowedHeaders指定了允许的请求头为”Authorization”、”Cache-Control”和”Content-Type”。</li>
  <li>使用exposedHeaders指定了在响应中可以暴露给客户端的响应头为”header1”和”header2”。</li>
  <li>使用allowCredentials指定了允许发送身份验证信息（如cookies）。</li>
  <li>使用maxAge指定了预检请求的有效期为3600秒。</li>
</ul>

<p>通过这样的配置，我们可以确保我们的应用程序可以安全地处理跨域请求，并且只允许来自指定来源的特定请求方法和请求头。</p>

<hr />

<h3 id="写一个corsfilter">写一个<code class="language-plaintext highlighter-rouge">CORSFilter</code></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CORSFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span> 
            <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">HttpServletRequest</span> <span class="n">req</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">;</span>
        <span class="nc">HttpServletResponse</span> <span class="n">resp</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletResponse</span><span class="o">)</span> <span class="n">response</span><span class="o">;</span>

        <span class="c1">// 设置CORS头信息</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Origin"</span><span class="o">,</span> <span class="s">"http://127.0.0.1:5500"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Methods"</span><span class="o">,</span> <span class="s">"GET, POST, PUT, DELETE, OPTIONS"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Headers"</span><span class="o">,</span> <span class="s">"Content-Type, Signature-Method, Signature"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Credentials"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Max-Age"</span><span class="o">,</span> <span class="s">"3600"</span><span class="o">);</span>

        <span class="c1">// 处理预检请求</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"OPTIONS"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">()))</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="nc">HttpServletResponse</span><span class="o">.</span><span class="na">SC_OK</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 继续执行其他过滤器或目标资源</span>
        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 清理代码，如果有需要</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果有多个网址，可以通过逗号分隔：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Origin"</span><span class="o">,</span> <span class="s">"http://127.0.0.1:5500, http://example.com"</span><span class="o">);</span>
</code></pre></div></div>

<p>如果允许所有IP，可以直接设置一个<code class="language-plaintext highlighter-rouge">*</code>号，如果允许指定ip的所有端口，可以这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Origin"</span><span class="o">,</span> <span class="s">"http://127.0.0.1:*"</span><span class="o">);</span>
</code></pre></div></div>

<p>如果想允许来自 <code class="language-plaintext highlighter-rouge">http://127.0.0.*</code> 这样的多个 IP 的请求，需要单独设置每个 IP，不能使用通配符来表示。</p>

<p>注意过滤器顺序：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>CORSFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>com.example.CORSFilter<span class="nt">&lt;/filter-class&gt;</span>
<span class="nt">&lt;/filter&gt;</span>
<span class="nt">&lt;filter-mapping&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>CORSFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<p>当然如果HTML 文件是通过本地文件系统打开的（例如使用 <code class="language-plaintext highlighter-rouge">file://</code> 协议），而不是通过 Web 服务器（例如 <code class="language-plaintext highlighter-rouge">http://</code> 或 <code class="language-plaintext highlighter-rouge">https://</code>）访问的，那么跨域请求的限制则不适用。本地文件可以自由加载其他本地文件，不受跨域请求的限制。</p>

<p>因此，如果HTML 文件是通过本地文件系统打开的，而不是通过 Web 服务器访问的，无需设置任何 CORS 相关的头，可以直接进行跨域请求。</p>

<hr />

<h3 id="测试">测试</h3>

<p>当配置好CORS后，可以在浏览器中测试一下规则是否生效。写一个前端：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>接口测试<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>接口测试<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"apiTestForm"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div&gt;</span>
            <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"jsonData"</span><span class="nt">&gt;</span>输入JSON：<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"jsonData"</span> <span class="na">rows=</span><span class="s">"10"</span> <span class="na">cols=</span><span class="s">"50"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;</span>
            <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"apiUrl"</span><span class="nt">&gt;</span>接口URL：<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"apiUrl"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">id=</span><span class="s">"post"</span> <span class="na">name=</span><span class="s">"requestType"</span> <span class="na">value=</span><span class="s">"post"</span> <span class="na">checked</span><span class="nt">&gt;</span>
            <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"post"</span><span class="nt">&gt;</span>POST<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">id=</span><span class="s">"get"</span> <span class="na">name=</span><span class="s">"requestType"</span> <span class="na">value=</span><span class="s">"get"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"get"</span><span class="nt">&gt;</span>GET<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;</span>
            <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">onclick=</span><span class="s">"submitData()"</span><span class="nt">&gt;</span>提交<span class="nt">&lt;/button&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;div&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"jsonData"</span><span class="nt">&gt;</span>返回内容：<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"jsonData2"</span> <span class="na">rows=</span><span class="s">"10"</span> <span class="na">cols=</span><span class="s">"50"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;script&gt;</span>
    <span class="kd">function</span> <span class="nx">submitData</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">jsonData</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">jsonData</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">apiUrl</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">requestType</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[name="requestType"]:checked</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">requestOptions</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="nx">requestType</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(),</span>
            <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span>
            <span class="p">}</span>
        <span class="p">};</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">requestType</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">requestOptions</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">jsonData</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">jsonData2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">jsonData2</span><span class="dl">'</span><span class="p">)</span>
        <span class="nx">fetch</span><span class="p">(</span><span class="nx">apiUrl</span><span class="p">,</span> <span class="nx">requestOptions</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Network response was not ok</span><span class="dl">'</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// 在这里处理从接口返回的数据</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">data</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// 将对象转换为 JSON 字符串</span>
                <span class="p">}</span>
                <span class="nx">jsonData2</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">jsonData2</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">error</span><span class="p">;</span>
                <span class="c1">// 在这里处理错误</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>然后用vscode开启Live Server，启用5500端口，此时网址为：<code class="language-plaintext highlighter-rouge">http://127.0.0.1:5500</code>。</p>

<p>测试<code class="language-plaintext highlighter-rouge">http://127.0.0.1:8080/api/signin</code>，json：<code class="language-plaintext highlighter-rouge">{"email":"tom@example.com","password":"tomcat","name":"test"}</code>，post方式，提交。</p>

<p>输入接口URL：<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/users</code>，get方式，提交，控制台无报错。返回：<code class="language-plaintext highlighter-rouge">[{"id":0,"email":"tom@example.com","password":"tomcat","name":"test","createdAt":时间戳}]</code>。</p>

<p>相关控制器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>服务层：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="国际化">国际化</h2>

<p>在开发应用程序的时候，经常会遇到支持多语言的需求，这种支持多语言的功能称之为国际化，英文是internationalization，缩写为i18n（因为首字母i和末字母n中间有18个字母）。</p>

<p>还有针对特定地区的本地化功能，英文是localization，缩写为L10n，本地化是指根据地区调整类似姓名、日期的显示等。</p>

<p>也有把上面两者合称为全球化，英文是globalization，缩写为g11n。</p>

<p>在Java中，支持多语言和本地化是通过<code class="language-plaintext highlighter-rouge">MessageFormat</code>配合<code class="language-plaintext highlighter-rouge">Locale</code>实现的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">price</span> <span class="o">=</span> <span class="mf">123.5</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="nc">Object</span><span class="o">[]</span> <span class="n">arguments</span> <span class="o">=</span> <span class="o">{</span> <span class="n">price</span><span class="o">,</span> <span class="n">number</span> <span class="o">};</span>
<span class="nc">MessageFormat</span> <span class="n">mfUS</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageFormat</span><span class="o">(</span><span class="s">"Pay {0,number,currency} for {1} books."</span><span class="o">,</span> <span class="nc">Locale</span><span class="o">.</span><span class="na">US</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mfUS</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">arguments</span><span class="o">));</span>
<span class="nc">MessageFormat</span> <span class="n">mfZH</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageFormat</span><span class="o">(</span><span class="s">"{1}本书一共{0,number,currency}。"</span><span class="o">,</span> <span class="nc">Locale</span><span class="o">.</span><span class="na">CHINA</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mfZH</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">arguments</span><span class="o">));</span>
</code></pre></div></div>

<p>对于Web应用程序，要实现国际化功能，主要是渲染View的时候，要把各种语言的资源文件提出来，这样，不同的用户访问同一个页面时，显示的语言就是不同的。</p>

<h3 id="获取locale">获取<code class="language-plaintext highlighter-rouge">Locale</code></h3>

<p>实现国际化的第一步是获取到用户的<code class="language-plaintext highlighter-rouge">Locale</code>。在Web应用程序中，HTTP规范规定了浏览器会在请求中携带<code class="language-plaintext highlighter-rouge">Accept-Language</code>头，用来指示用户浏览器设定的语言顺序，如：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Accept-Language: zh-CN,zh;q=0.8,en;q=0.2
</code></pre></div></div>

<p>上述HTTP请求头表示优先选择简体中文，其次选择中文，最后选择英文。<code class="language-plaintext highlighter-rouge">q</code>表示权重，解析后可获得一个根据优先级排序的语言列表，把它转换为Java的<code class="language-plaintext highlighter-rouge">Locale</code>，即获得了用户的<code class="language-plaintext highlighter-rouge">Locale</code>。大多数框架通常只返回权重最高的<code class="language-plaintext highlighter-rouge">Locale</code>。</p>

<p>Spring MVC通过<code class="language-plaintext highlighter-rouge">LocaleResolver</code>来自动从<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>中获取<code class="language-plaintext highlighter-rouge">Locale</code>。有多种<code class="language-plaintext highlighter-rouge">LocaleResolver</code>的实现类，其中最常用的是<code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Primary</span>
<span class="nd">@Bean</span>
<span class="nc">LocaleResolver</span> <span class="nf">createLocaleResolver</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">clr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CookieLocaleResolver</span><span class="o">();</span>
    <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultLocale</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
    <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultTimeZone</span><span class="o">(</span><span class="nc">TimeZone</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">clr</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>从<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>中获取<code class="language-plaintext highlighter-rouge">Locale</code>时，首先根据一个特定的Cookie判断是否指定了<code class="language-plaintext highlighter-rouge">Locale</code>，如果没有，就从HTTP头获取，如果还没有，就返回默认的<code class="language-plaintext highlighter-rouge">Locale</code>。</p>

<p>当用户第一次访问网站时，<code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>只能从HTTP头获取<code class="language-plaintext highlighter-rouge">Locale</code>，即使用浏览器的默认语言。通常网站也允许用户自己选择语言，此时，<code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>就会把用户选择的语言存放到Cookie中，下一次访问时，就会返回用户上次选择的语言而不是浏览器默认语言。</p>

<p><code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>读取Locale的顺序是<strong>先从<code class="language-plaintext highlighter-rouge">cookie</code>读取，再看有没有设置默认locale,最后从<code class="language-plaintext highlighter-rouge">accept-language</code>中读取。</strong></p>

<h3 id="提取资源文件">提取资源文件</h3>

<p>第二步是把写死在模板中的字符串以资源文件的方式存储在外部。对于多语言，主文件名如果命名为<code class="language-plaintext highlighter-rouge">messages</code>，那么资源文件必须按如下方式命名并放入classpath中：</p>

<ul>
  <li>默认语言，文件名必须为<code class="language-plaintext highlighter-rouge">messages.properties</code>；</li>
  <li>简体中文，Locale是<code class="language-plaintext highlighter-rouge">zh_CN</code>，文件名必须为<code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>；</li>
  <li>日文，Locale是<code class="language-plaintext highlighter-rouge">ja_JP</code>，文件名必须为<code class="language-plaintext highlighter-rouge">messages_ja_JP.properties</code>；</li>
  <li>其它更多语言……</li>
</ul>

<p>每个资源文件都有相同的key，例如，默认语言是英文，文件<code class="language-plaintext highlighter-rouge">messages.properties</code>内容如下：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">Language</span>
<span class="py">home</span><span class="p">=</span><span class="s">Home</span>
<span class="py">signin</span><span class="p">=</span><span class="s">Sign In</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">Copyright©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">hello</span>
</code></pre></div></div>

<p>文件<code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>内容如下：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">语言</span>
<span class="py">home</span><span class="p">=</span><span class="s">首页</span>
<span class="py">signin</span><span class="p">=</span><span class="s">登录</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">版权所有©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">你好</span>
</code></pre></div></div>

<h3 id="创建messagesource">创建<code class="language-plaintext highlighter-rouge">MessageSource</code></h3>

<p>第三步是创建一个Spring提供的<code class="language-plaintext highlighter-rouge">MessageSource</code>实例，它自动读取所有的<code class="language-plaintext highlighter-rouge">.properties</code>文件，并提供一个统一接口来实现“翻译”：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// code, arguments, locale:</span>
<span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="s">"signin"</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">signin</code>是在<code class="language-plaintext highlighter-rouge">.properties</code>文件中定义的key，第二个参数是<code class="language-plaintext highlighter-rouge">Object[]</code>数组作为格式化时传入的参数，最后一个参数就是获取的用户<code class="language-plaintext highlighter-rouge">Locale</code>实例。</p>

<p>创建<code class="language-plaintext highlighter-rouge">MessageSource</code>如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
<span class="nc">MessageSource</span> <span class="nf">createMessageSource</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">messageSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResourceBundleMessageSource</span><span class="o">();</span>
    <span class="c1">// 指定文件是UTF-8编码:</span>
    <span class="n">messageSource</span><span class="o">.</span><span class="na">setDefaultEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
    <span class="c1">// 指定主文件名:</span>
    <span class="n">messageSource</span><span class="o">.</span><span class="na">setBasename</span><span class="o">(</span><span class="s">"messages"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">messageSource</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ResourceBundleMessageSource</code>会自动根据主文件名自动把所有相关语言的资源文件都读进来。</p>

<p>Spring容器会创建不只一个<code class="language-plaintext highlighter-rouge">MessageSource</code>实例，我们自己创建的这个<code class="language-plaintext highlighter-rouge">MessageSource</code>是专门给页面国际化使用的，因此命名为<code class="language-plaintext highlighter-rouge">i18n</code>，不会与其它<code class="language-plaintext highlighter-rouge">MessageSource</code>实例冲突。</p>

<h3 id="实现多语言">实现多语言</h3>

<p>要在View中使用<code class="language-plaintext highlighter-rouge">MessageSource</code>加上<code class="language-plaintext highlighter-rouge">Locale</code>输出多语言，可以通过编写一个<code class="language-plaintext highlighter-rouge">MvcInterceptor</code>，把相关资源注入到<code class="language-plaintext highlighter-rouge">ModelAndView</code>中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>

    <span class="c1">// 注意注入的MessageSource名称是i18n:</span>
    <span class="nd">@Autowired</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
    <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">modelAndView</span> <span class="o">!=</span> <span class="kc">null</span> <span class="c1">// 返回了ModelAndView</span>
            <span class="o">&amp;&amp;</span> <span class="n">modelAndView</span><span class="o">.</span><span class="na">getViewName</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="c1">// 设置了View</span>
            <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">modelAndView</span><span class="o">.</span><span class="na">getViewName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"redirect:"</span><span class="o">)</span> <span class="c1">// 不是重定向</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 解析用户的Locale:</span>
            <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="n">localeResolver</span><span class="o">.</span><span class="na">resolveLocale</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="c1">// 放入Model:</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__messageSource__"</span><span class="o">,</span> <span class="n">messageSource</span><span class="o">);</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__locale__"</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>并在<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>中注册<code class="language-plaintext highlighter-rouge">MvcInterceptor</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">HandlerInterceptor</span><span class="o">[]</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">interceptor</span> <span class="o">:</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">interceptor</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="o">...</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在，就可以在View中调用<code class="language-plaintext highlighter-rouge">MessageSource.getMessage()</code>方法来实现多语言：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/signin"</span><span class="nt">&gt;&lt;/a&gt;</span>
</code></pre></div></div>

<p>上述这种写法虽然可行，但格式太复杂了。使用View时，要根据每个特定的View引擎定制国际化函数。在Pebble中，可以封装一个国际化函数，名称就是下划线<code class="language-plaintext highlighter-rouge">_</code>，改造一下创建<code class="language-plaintext highlighter-rouge">ViewResolver</code>的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">,</span> <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
            <span class="c1">// cache:</span>
            <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
            <span class="c1">// loader:</span>
            <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
            <span class="c1">// 添加扩展:</span>
            <span class="o">.</span><span class="na">extension</span><span class="o">(</span><span class="n">createExtension</span><span class="o">(</span><span class="n">messageSource</span><span class="o">))</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">private</span> <span class="nc">Extension</span> <span class="nf">createExtension</span><span class="o">(</span><span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">AbstractExtension</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Function</span><span class="o">&gt;</span> <span class="nf">getFunctions</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"_"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Function</span><span class="o">()</span> <span class="o">{</span>
                <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">args</span><span class="o">,</span> <span class="nc">PebbleTemplate</span> <span class="n">self</span><span class="o">,</span> <span class="nc">EvaluationContext</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">args</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">extractArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
                    <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Locale</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getVariable</span><span class="o">(</span><span class="s">"__locale__"</span><span class="o">);</span>
                    <span class="k">return</span> <span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">arguments</span><span class="o">.</span><span class="na">toArray</span><span class="o">(),</span> <span class="s">"???"</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">"???"</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">extractArguments</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
                        <span class="nc">Object</span> <span class="n">param</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
                        <span class="n">arguments</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">param</span><span class="o">);</span>
                        <span class="n">i</span><span class="o">++;</span>
                    <span class="o">}</span>
                    <span class="k">return</span> <span class="n">arguments</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getArgumentNames</span><span class="o">()</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">});</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，我们可以把多语言页面改写为：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/signin"</span><span class="nt">&gt;&lt;/a&gt;</span>
</code></pre></div></div>

<p>如果是带参数的多语言，需要把参数传进去：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h5&gt;&lt;/h5&gt;</span>
</code></pre></div></div>

<p>使用其它View引擎时，也应当根据引擎接口实现更方便的语法。</p>

<hr />

<p>也可以直接把pebble-spring已经实现的SpringExtension拿来用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">,</span> <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
            <span class="c1">// cache:</span>
            <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
            <span class="c1">// loader:</span>
            <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
            <span class="c1">// 添加扩展:</span>
            <span class="o">.</span><span class="na">extension</span><span class="o">(</span><span class="k">new</span> <span class="nc">SpringExtension</span><span class="o">(</span><span class="n">messageSource</span><span class="o">))</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后在模板里，可以直接使用MessageSourceFunction定义的函数message(…)：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/signin"</span><span class="nt">&gt;&lt;/a&gt;</span>
</code></pre></div></div>

<h3 id="切换locale">切换<code class="language-plaintext highlighter-rouge">Locale</code></h3>

<p>如果需要允许用户手动切换<code class="language-plaintext highlighter-rouge">Locale</code>，可以编写一个<code class="language-plaintext highlighter-rouge">LocaleController</code>来实现该功能：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">LocaleController</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/locale/{lo}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">setLocale</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"lo"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">lo</span><span class="o">,</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 根据传入的lo创建Locale实例:</span>
        <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">'_'</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">pos</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">country</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Locale</span><span class="o">(</span><span class="n">lang</span><span class="o">,</span> <span class="n">country</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Locale</span><span class="o">(</span><span class="n">lo</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 设定此Locale:</span>
        <span class="n">localeResolver</span><span class="o">.</span><span class="na">setLocale</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"locale is set to {}."</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="c1">// 刷新页面:</span>
        <span class="nc">String</span> <span class="n">referer</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Referer"</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"redirect:"</span> <span class="o">+</span> <span class="o">(</span><span class="n">referer</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">"/"</span> <span class="o">:</span> <span class="n">referer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/locale/en</code>即可切换到 <code class="language-plaintext highlighter-rouge">messages_en.properties</code>文件内容。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/locale/zh</code>即可切换到<code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>文件。</p>

<p><code class="language-plaintext highlighter-rouge">templates/index.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>也可以通过spring自带的一个通过GET请求参数传递并修改locale的<code class="language-plaintext highlighter-rouge">LocaleChangeInterceptor</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">LocaleChangeInterceptor</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocaleChangeInterceptor</span><span class="o">();</span>
            <span class="n">l</span><span class="o">.</span><span class="na">setParamName</span><span class="o">(</span><span class="s">"lang"</span><span class="o">);</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以代替MvcInterceptor和LocaleController组合，直接通过类似<code class="language-plaintext highlighter-rouge">request_url/?lang=en</code>方式修改locale，他的要点则是需要注入我们自己的CookieLocaleResolver作为他的LocaleResolver，办法也很简单，给我们的bean添加一个别名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"localeResolver"</span><span class="o">)</span>
<span class="nc">LocaleResolver</span> <span class="nf">createLocaleResolver</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">clr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CookieLocaleResolver</span><span class="o">();</span>
    <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultLocale</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
    <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultTimeZone</span><span class="o">(</span><span class="nc">TimeZone</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">clr</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其实pebble内置了一个i18n函数，和message也大致相同，不同的是没有用到ResourceBundleMessageSource，需要在用的时候给出bundle名，如：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h3 id="实例">实例</h3>

<p>完整代码1：</p>

<p><code class="language-plaintext highlighter-rouge">Test4.java</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.extension.AbstractExtension</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.extension.Extension</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.extension.Function</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.template.EvaluationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.template.PebbleTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.annotation.MapperScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.MessageSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Primary</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ResourceBundleMessageSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PathVariable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.HandlerInterceptor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.LocaleResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ModelAndView</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.i18n.CookieLocaleResolver</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>


<span class="cm">/**
 * @author aotmd
 * @version 1.0
 * @date 2024/6/1 22:16
 */</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="c1">//Locale.setDefault(Locale.ENGLISH);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">HandlerInterceptor</span><span class="o">[]</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://127.0.0.1:5500"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
                <span class="c1">// 可以继续添加其他URL规则:</span>
                <span class="c1">// registry.addMapping("/rest/v2/**")...</span>
            <span class="o">}</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">interceptor</span> <span class="o">:</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">interceptor</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
    <span class="nc">MessageSource</span> <span class="nf">createMessageSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">messageSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResourceBundleMessageSource</span><span class="o">();</span>
        <span class="c1">// 指定文件是UTF-8编码:</span>
        <span class="n">messageSource</span><span class="o">.</span><span class="na">setDefaultEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 指定主文件名:</span>
        <span class="n">messageSource</span><span class="o">.</span><span class="na">setBasename</span><span class="o">(</span><span class="s">"messages"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">messageSource</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">,</span> <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="c1">// 添加扩展:</span>
                <span class="o">.</span><span class="na">extension</span><span class="o">(</span><span class="n">createExtension</span><span class="o">(</span><span class="n">messageSource</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Extension</span> <span class="nf">createExtension</span><span class="o">(</span><span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AbstractExtension</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Function</span><span class="o">&gt;</span> <span class="nf">getFunctions</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"_"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Function</span><span class="o">()</span> <span class="o">{</span>
                    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">args</span><span class="o">,</span> <span class="nc">PebbleTemplate</span> <span class="n">self</span><span class="o">,</span> <span class="nc">EvaluationContext</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">args</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
                        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">extractArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
                        <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Locale</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getVariable</span><span class="o">(</span><span class="s">"__locale__"</span><span class="o">);</span>
                        <span class="k">return</span> <span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">arguments</span><span class="o">.</span><span class="na">toArray</span><span class="o">(),</span> <span class="s">"???"</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">"???"</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">extractArguments</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
                        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
                        <span class="k">while</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
                            <span class="nc">Object</span> <span class="n">param</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
                            <span class="n">arguments</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">param</span><span class="o">);</span>
                            <span class="n">i</span><span class="o">++;</span>
                        <span class="o">}</span>
                        <span class="k">return</span> <span class="n">arguments</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getArgumentNames</span><span class="o">()</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">});</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span>
    <span class="nc">LocaleResolver</span> <span class="nf">createLocaleResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">clr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CookieLocaleResolver</span><span class="o">();</span>
        <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultLocale</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultTimeZone</span><span class="o">(</span><span class="nc">TimeZone</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">clr</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>


<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MvcInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>

    <span class="c1">// 注意注入的MessageSource名称是i18n:</span>
    <span class="nd">@Autowired</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
    <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">modelAndView</span> <span class="o">!=</span> <span class="kc">null</span> <span class="c1">// 返回了ModelAndView</span>
                <span class="o">&amp;&amp;</span> <span class="n">modelAndView</span><span class="o">.</span><span class="na">getViewName</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="c1">// 设置了View</span>
                <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">modelAndView</span><span class="o">.</span><span class="na">getViewName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"redirect:"</span><span class="o">)</span> <span class="c1">// 不是重定向</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 解析用户的Locale:</span>
            <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="n">localeResolver</span><span class="o">.</span><span class="na">resolveLocale</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="c1">// 放入Model:</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__messageSource__"</span><span class="o">,</span> <span class="n">messageSource</span><span class="o">);</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__locale__"</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">LocaleController</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/locale/{lo}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">setLocale</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"lo"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">lo</span><span class="o">,</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 根据传入的lo创建Locale实例:</span>
        <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">'_'</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">pos</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">country</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Locale</span><span class="o">(</span><span class="n">lang</span><span class="o">,</span> <span class="n">country</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Locale</span><span class="o">(</span><span class="n">lo</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 设定此Locale:</span>
        <span class="n">localeResolver</span><span class="o">.</span><span class="na">setLocale</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"locale is set to {}."</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="c1">// 刷新页面:</span>
        <span class="nc">String</span> <span class="n">referer</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Referer"</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"redirect:"</span> <span class="o">+</span> <span class="o">(</span><span class="n">referer</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">"/"</span> <span class="o">:</span> <span class="n">referer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">src/main/webapp/WEB-INF/templates/index.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">web.xml</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>
         <span class="na">version=</span><span class="s">"4.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;servlet&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextClass<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>com.aotmd.test.Test4<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;load-on-startup&gt;</span>0<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;/servlet&gt;</span>

    <span class="nt">&lt;servlet-mapping&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/servlet-mapping&gt;</span>

    <span class="nt">&lt;filter&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>forceEncoding<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
    <span class="nt">&lt;/filter&gt;</span>

    <span class="nt">&lt;filter-mapping&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/filter-mapping&gt;</span>

<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">messages.properties</code></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">Language</span>
<span class="py">home</span><span class="p">=</span><span class="s">Home</span>
<span class="py">signin</span><span class="p">=</span><span class="s">Sign In</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">Copyright©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">hello</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">messages_en.properties</code></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">Language</span>
<span class="py">home</span><span class="p">=</span><span class="s">Home</span>
<span class="py">signin</span><span class="p">=</span><span class="s">Sign In</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">Copyright©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">hello</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">语言</span>
<span class="py">home</span><span class="p">=</span><span class="s">首页</span>
<span class="py">signin</span><span class="p">=</span><span class="s">登录</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">版权所有©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">你好</span>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/locale/en</code>即可切换到 <code class="language-plaintext highlighter-rouge">messages_en.properties</code>文件内容。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/locale/zh</code>即可切换到<code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>文件。</p>

<p>完整代码2，在1上修改：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.extension.SpringExtension</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.MessageSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ResourceBundleMessageSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.LocaleResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.i18n.CookieLocaleResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.i18n.LocaleChangeInterceptor</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TimeZone</span><span class="o">;</span>


<span class="cm">/**
 * @author aotmd
 * @version 1.0
 * @date 2024/6/1 22:16
 */</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="c1">//Locale.setDefault(Locale.ENGLISH);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://127.0.0.1:5500"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
                <span class="c1">// 可以继续添加其他URL规则:</span>
                <span class="c1">// registry.addMapping("/rest/v2/**")...</span>
            <span class="o">}</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">LocaleChangeInterceptor</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocaleChangeInterceptor</span><span class="o">();</span>
                <span class="n">l</span><span class="o">.</span><span class="na">setParamName</span><span class="o">(</span><span class="s">"lang"</span><span class="o">);</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
    <span class="nc">MessageSource</span> <span class="nf">createMessageSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">messageSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResourceBundleMessageSource</span><span class="o">();</span>
        <span class="c1">// 指定文件是UTF-8编码:</span>
        <span class="n">messageSource</span><span class="o">.</span><span class="na">setDefaultEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 指定主文件名:</span>
        <span class="n">messageSource</span><span class="o">.</span><span class="na">setBasename</span><span class="o">(</span><span class="s">"messages"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">messageSource</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">,</span> <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="c1">// 添加扩展:</span>
                <span class="o">.</span><span class="na">extension</span><span class="o">(</span><span class="k">new</span> <span class="nc">SpringExtension</span><span class="o">(</span><span class="n">messageSource</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"localeResolver"</span><span class="o">)</span>
    <span class="nc">LocaleResolver</span> <span class="nf">createLocaleResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">clr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CookieLocaleResolver</span><span class="o">();</span>
        <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultLocale</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultTimeZone</span><span class="o">(</span><span class="nc">TimeZone</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">clr</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>index.html:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>其他文件不变。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/?lang=en</code>即可切换到 <code class="language-plaintext highlighter-rouge">messages_en.properties</code>文件内容。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/?lang=zh</code>即可切换到 <code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>文件内容。</p>

<h2 id="websocket">WebSocket</h2>

<p>WebSocket是一种基于HTTP的长链接技术。传统的HTTP协议是一种请求-响应模型，如果浏览器不发送请求，那么服务器无法主动给浏览器推送数据。如果需要定期给浏览器推送数据，例如股票行情，或者不定期给浏览器推送数据，例如在线聊天，基于HTTP协议实现这类需求，只能依靠浏览器的JavaScript定时轮询，效率很低且实时性不高。</p>

<p>因为HTTP本身是基于TCP连接的，所以，WebSocket在HTTP协议的基础上做了一个简单的升级，即建立TCP连接后，浏览器发送请求时，附带几个头：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /chat HTTP/1.1
Host: www.example.com
Upgrade: websocket
Connection: Upgrade
</code></pre></div></div>

<p>就表示客户端希望升级连接，变成长连接的WebSocket，服务器返回升级成功的响应：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
</code></pre></div></div>

<p>收到成功响应后表示WebSocket“握手”成功，这样，代表WebSocket的这个TCP连接将不会被服务器关闭，而是一直保持，服务器可随时向浏览器推送消息，浏览器也可随时向服务器推送消息。双方推送的消息既可以是文本消息，也可以是二进制消息，一般来说，绝大部分应用程序会推送基于JSON的文本消息。</p>

<p>现代浏览器都已经支持WebSocket协议，服务器则需要底层框架支持。Java的Servlet规范从3.1开始支持WebSocket，所以，必须选择支持Servlet 3.1或更高规范的Servlet容器，才能支持WebSocket。最新版本的Tomcat、Jetty等开源服务器均支持WebSocket。</p>

<p>在Spring MVC中实现对WebSocket的支持，首先，需要在<code class="language-plaintext highlighter-rouge">pom.xml</code>中加入以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.embed<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>tomcat-embed-websocket<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>9.0.26<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-websocket<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>第一项是嵌入式Tomcat支持WebSocket的组件，第二项是Spring封装的支持WebSocket的接口。</p>

<p>接下来，需要在AppConfig中加入Spring Web对WebSocket的配置，此处需要创建一个<code class="language-plaintext highlighter-rouge">WebSocketConfigurer</code>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebSocketConfigurer</span> <span class="nf">createWebSocketConfigurer</span><span class="o">(</span>
        <span class="nd">@Autowired</span> <span class="nc">ChatHandler</span> <span class="n">chatHandler</span><span class="o">,</span>
        <span class="nd">@Autowired</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="n">chatInterceptor</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebSocketConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerWebSocketHandlers</span><span class="o">(</span><span class="nc">WebSocketHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 把URL与指定的WebSocketHandler关联，可关联多个:</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">chatHandler</span><span class="o">,</span> <span class="s">"/chat"</span><span class="o">).</span><span class="na">addInterceptors</span><span class="o">(</span><span class="n">chatInterceptor</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>此实例在内部通过<code class="language-plaintext highlighter-rouge">WebSocketHandlerRegistry</code>注册能处理WebSocket的<code class="language-plaintext highlighter-rouge">WebSocketHandler</code>，以及可选的WebSocket拦截器<code class="language-plaintext highlighter-rouge">HandshakeInterceptor</code>。注入的这两个类都是自己编写的业务逻辑，这里只需关注浏览器连接到WebSocket的URL是<code class="language-plaintext highlighter-rouge">/chat</code>。</p>

<p>然后需要启用WebSocket：<code class="language-plaintext highlighter-rouge">@EnableWebSocket</code>。</p>

<p><strong>处理WebSocket连接</strong></p>

<p>和处理普通HTTP请求不同，没法用一个方法处理一个URL。Spring提供了<code class="language-plaintext highlighter-rouge">TextWebSocketHandler</code>和<code class="language-plaintext highlighter-rouge">BinaryWebSocketHandler</code>分别处理文本消息和二进制消息，这里我们选择文本消息作为聊天室的协议，因此，<code class="language-plaintext highlighter-rouge">ChatHandler</code>需要继承自<code class="language-plaintext highlighter-rouge">TextWebSocketHandler</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatHandler</span> <span class="kd">extends</span> <span class="nc">TextWebSocketHandler</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当浏览器请求一个WebSocket连接后，如果成功建立连接，Spring会自动调用<code class="language-plaintext highlighter-rouge">afterConnectionEstablished()</code>方法，任何原因导致WebSocket连接中断时，Spring会自动调用<code class="language-plaintext highlighter-rouge">afterConnectionClosed</code>方法，因此，覆写这两个方法即可处理连接成功和结束后的业务逻辑：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatHandler</span> <span class="kd">extends</span> <span class="nc">TextWebSocketHandler</span> <span class="o">{</span>
    <span class="c1">// 保存所有Client的WebSocket会话实例:</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">WebSocketSession</span><span class="o">&gt;</span> <span class="n">clients</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterConnectionEstablished</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 新会话根据ID放入Map:</span>
        <span class="n">clients</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">session</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"Guest1"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterConnectionClosed</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">,</span> <span class="nc">CloseStatus</span> <span class="n">status</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">clients</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>每个WebSocket会话以<code class="language-plaintext highlighter-rouge">WebSocketSession</code>表示，且已分配唯一ID。和WebSocket相关的数据，例如用户名称等，均可放入关联的<code class="language-plaintext highlighter-rouge">getAttributes()</code>中。</p>

<p>用实例变量<code class="language-plaintext highlighter-rouge">clients</code>持有当前所有的<code class="language-plaintext highlighter-rouge">WebSocketSession</code>是为了广播，即向所有用户推送同一消息时，可以这么写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">json</span> <span class="o">=</span> <span class="o">...</span>
<span class="nc">TextMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextMessage</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">clients</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">WebSocketSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">clients</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="n">session</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>发送的消息是序列化后的JSON，可以用<code class="language-plaintext highlighter-rouge">ChatMessage</code>表示：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatMessage</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">long</span> <span class="n">timestamp</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>每收到一个用户的消息后，我们就需要广播给所有用户：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatHandler</span> <span class="kd">extends</span> <span class="nc">TextWebSocketHandler</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleTextMessage</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">,</span> <span class="nc">TextMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getPayload</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">r</span> <span class="o">=</span> <span class="o">...</span> <span class="c1">// 根据输入消息构造待发送消息</span>
        <span class="n">broadcastMessage</span><span class="o">(</span><span class="n">r</span><span class="o">);</span> <span class="c1">// 推送给所有用户</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果要推送给指定的几个用户，那就需要在<code class="language-plaintext highlighter-rouge">clients</code>中根据条件查找出某些<code class="language-plaintext highlighter-rouge">WebSocketSession</code>，然后发送消息。</p>

<p>注意到我们在注册WebSocket时还传入了一个<code class="language-plaintext highlighter-rouge">ChatHandshakeInterceptor</code>，这个类实际上可以从<code class="language-plaintext highlighter-rouge">HttpSessionHandshakeInterceptor</code>继承，它的主要作用是在WebSocket建立连接后，把HttpSession的一些属性复制到WebSocketSession，例如，用户的登录信息等：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="kd">extends</span> <span class="nc">HttpSessionHandshakeInterceptor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">ChatHandshakeInterceptor</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 指定从HttpSession复制属性到WebSocketSession:</span>
        <span class="kd">super</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">UserController</span><span class="o">.</span><span class="na">KEY_USER</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，在<code class="language-plaintext highlighter-rouge">ChatHandler</code>中，可以从<code class="language-plaintext highlighter-rouge">WebSocketSession.getAttributes()</code>中获取到复制过来的属性。</p>

<p>在完成了服务器端的开发后，还需要在页面编写一点JavaScript逻辑：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建WebSocket连接:</span>
<span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="dl">'</span><span class="s1">ws://</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/chat</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// 连接成功时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">websocket connected.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// 收到消息时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">message: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">msgs</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="c1">// TODO:</span>
<span class="p">});</span>
<span class="c1">// 连接关闭时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">websocket closed.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// 绑定到全局变量:</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span> <span class="o">=</span> <span class="nx">ws</span><span class="p">;</span>
</code></pre></div></div>

<p>用户可以在连接成功后任何时候给服务器发送消息：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">inputText</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello, WebSocket.</span><span class="dl">'</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">text</span><span class="p">:</span> <span class="nx">inputText</span><span class="p">}));</span>
</code></pre></div></div>

<p>最后，连调浏览器和服务器端，如果一切无误，可以开多个不同的浏览器测试WebSocket的推送和广播。</p>

<p>Servlet的线程模型并不适合大规模的长链接。基于NIO的Netty等框架更适合处理WebSocket长链接。</p>

<p><strong>完整代码：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.i18n.LocaleChangeInterceptor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.CloseStatus</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.TextMessage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.WebSocketSession</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.EnableWebSocket</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.WebSocketConfigurer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.handler.TextWebSocketHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.ConcurrentHashMap</span><span class="o">;</span>

<span class="nd">@EnableWebSocket</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://127.0.0.1:5500"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
                <span class="c1">// 可以继续添加其他URL规则:</span>
                <span class="c1">// registry.addMapping("/rest/v2/**")...</span>
            <span class="o">}</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">LocaleChangeInterceptor</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocaleChangeInterceptor</span><span class="o">();</span>
                <span class="n">l</span><span class="o">.</span><span class="na">setParamName</span><span class="o">(</span><span class="s">"lang"</span><span class="o">);</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebSocketConfigurer</span> <span class="nf">createWebSocketConfigurer</span><span class="o">(</span>
            <span class="nd">@Autowired</span> <span class="nc">ChatHandler</span> <span class="n">chatHandler</span><span class="o">,</span>
            <span class="nd">@Autowired</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="n">chatInterceptor</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebSocketConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerWebSocketHandlers</span><span class="o">(</span><span class="nc">WebSocketHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 把URL与指定的WebSocketHandler关联，可关联多个:</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">chatHandler</span><span class="o">,</span> <span class="s">"/chat"</span><span class="o">).</span><span class="na">addInterceptors</span><span class="o">(</span><span class="n">chatInterceptor</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">ChatHandler</span> <span class="kd">extends</span> <span class="nc">TextWebSocketHandler</span> <span class="o">{</span>
    <span class="c1">// 保存所有Client的WebSocket会话实例:</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">WebSocketSession</span><span class="o">&gt;</span> <span class="n">clients</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterConnectionEstablished</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 新会话根据ID放入Map:</span>
        <span class="n">clients</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">session</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"Guest1"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterConnectionClosed</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">,</span> <span class="nc">CloseStatus</span> <span class="n">status</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">clients</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"用户"</span><span class="o">+</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">()+</span><span class="s">"已退出"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleTextMessage</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">,</span> <span class="nc">TextMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getPayload</span><span class="o">();</span>
        <span class="c1">// 根据输入消息构造待发送消息</span>
        <span class="nc">ObjectMapper</span> <span class="n">mapper</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="n">mapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">ChatMessage</span> <span class="n">chatMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChatMessage</span><span class="o">();</span>
        <span class="n">chatMessage</span><span class="o">.</span><span class="na">timestamp</span><span class="o">=</span><span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">getTime</span><span class="o">();</span>
        <span class="n">chatMessage</span><span class="o">.</span><span class="na">name</span><span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
        <span class="n">chatMessage</span><span class="o">.</span><span class="na">text</span><span class="o">=</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"text"</span><span class="o">);</span>
        <span class="n">broadcastMessage</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">chatMessage</span><span class="o">));</span> <span class="c1">// 推送给所有用户</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">broadcastMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">json</span> <span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">TextMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextMessage</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">clients</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">WebSocketSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">clients</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
            <span class="n">session</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">ChatMessage</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="n">timestamp</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="kd">extends</span> <span class="nc">HttpSessionHandshakeInterceptor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">ChatHandshakeInterceptor</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 指定从HttpSession复制属性到WebSocketSession:</span>
        <span class="c1">//super(List.of(UserController.KEY_USER));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>打开浏览器，开两个新的<code class="language-plaintext highlighter-rouge">http://localhost:8080/</code>页面，分别建立WebSocket连接：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建WebSocket连接:</span>
<span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="dl">'</span><span class="s1">ws://</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/chat</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// 连接成功时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">websocket connected.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// 收到消息时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">message: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">msgs</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="c1">// TODO:</span>
<span class="p">});</span>
<span class="c1">// 连接关闭时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">websocket closed.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// 绑定到全局变量:</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span> <span class="o">=</span> <span class="nx">ws</span><span class="p">;</span>
</code></pre></div></div>

<p>发送：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">inputText</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello, WebSocket.</span><span class="dl">'</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">text</span><span class="p">:</span> <span class="nx">inputText</span><span class="p">}));</span>
</code></pre></div></div>

<p>则两个页面的控制台都会显示如：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">message</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">timestamp</span><span class="dl">"</span><span class="p">:</span><span class="o">***</span><span class="p">,</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">Hello, WebSocket.</span><span class="dl">"</span><span class="p">}</span>
</code></pre></div></div>

<p>用后连接的发送：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">inputText</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">测试</span><span class="dl">'</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">text</span><span class="p">:</span> <span class="nx">inputText</span><span class="p">}));</span>
</code></pre></div></div>

<p>则显示：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">message</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">timestamp</span><span class="dl">"</span><span class="p">:</span><span class="o">***</span><span class="p">,</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">测试</span><span class="dl">"</span><span class="p">}</span>
</code></pre></div></div>

<p>关闭页面，则java控制台显示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>13:31:51.143 [http-nio-8080-exec-9] DEBUG org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator - StandardWebSocketSession[id=1, uri=ws://localhost:8080/chat] closed with CloseStatus[code=1001, reason=null]
用户1已退出
13:32:19.014 [http-nio-8080-exec-10] DEBUG org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator - StandardWebSocketSession[id=0, uri=ws://localhost:8080/chat] closed with CloseStatus[code=1001, reason=null]
用户0已退出
</code></pre></div></div>

<p>功能正常。</p>

<p>如果要允许在所有页面访问，可以进行设置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebSocketConfigurer</span> <span class="nf">createWebSocketConfigurer</span><span class="o">(</span>
        <span class="nd">@Autowired</span> <span class="nc">ChatHandler</span> <span class="n">chatHandler</span><span class="o">,</span>
        <span class="nd">@Autowired</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="n">chatInterceptor</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebSocketConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerWebSocketHandlers</span><span class="o">(</span><span class="nc">WebSocketHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 把URL与指定的WebSocketHandler关联，可关联多个:</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">chatHandler</span><span class="o">,</span> <span class="s">"/chat"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">addInterceptors</span><span class="o">(</span><span class="n">chatInterceptor</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="s">"*"</span><span class="o">);</span><span class="c1">//允许所有页面</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">WebSocketHandlerRegistration</code>接口提供了一系列方法，用于配置WebSocket处理程序的各种细节：</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addHandler(WebSocketHandler handler, String... paths)</code> - 添加更多的处理程序，们将共享相同的配置（拦截器、SockJS 配置）。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">setHandshakeHandler(HandshakeHandler handshakeHandler)</code> - 配置要使用的握手处理程序。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addInterceptorsHandshakeInterceptor... interceptors)</code> - 配置用于握手请求的截器。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">setAllowedOrigins(String... origins)</code> - 配置允许连接到 WebSocket 端点的来源。该检查主要针浏览器客户端，每个允许的来源必须以 “http://”、”https://” 或 “*“（表示所有来源都被允许）开头。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">withSockJS()</code> - 启用 SockJS 回退选项。</p>
  </li>
</ul>

<p>这些方法提供了丰富和灵活地配置 WebSocket 处理程序所需功能。你可以根据需要使用这些方法来定制和优化 WebSocket 处理程序。</p>

<h2 id="集成javamail">集成JavaMail</h2>

<p>在Spring中，同样可以集成JavaMail。因为在服务器端，主要以发送邮件为主，例如在注册成功、登录时、购物付款后通知用户，基本上不会遇到接收用户邮件的情况，所以只讨论如何在Spring中发送邮件。</p>

<p>在Spring中，发送邮件最终也是需要JavaMail，Spring只对JavaMail做了一点简单的封装，目的是简化代码。为了在Spring中集成JavaMail，在<code class="language-plaintext highlighter-rouge">pom.xml</code>中添加以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/javax.mail/javax.mail-api --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.mail<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.mail-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.6.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/com.sun.mail/javax.mail --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.sun.mail<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.mail<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.6.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context-support<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>我们希望用户在注册成功后能收到注册邮件，为此，先定义一个<code class="language-plaintext highlighter-rouge">JavaMailSender</code>的Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">JavaMailSender</span> <span class="nf">createJavaMailSender</span><span class="o">(</span>
    <span class="c1">// smtp.properties:</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.host}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">host</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.port}"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">port</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.auth}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">auth</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.username}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.debug:true}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">debug</span><span class="o">)</span>
<span class="o">{</span>
    <span class="kt">var</span> <span class="n">mailSender</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JavaMailSenderImpl</span><span class="o">();</span>
    <span class="n">mailSender</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="n">host</span><span class="o">);</span>
    <span class="n">mailSender</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
    <span class="n">mailSender</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="n">mailSender</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="n">mailSender</span><span class="o">.</span><span class="na">getJavaMailProperties</span><span class="o">();</span>
    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.transport.protocol"</span><span class="o">,</span> <span class="s">"smtp"</span><span class="o">);</span>
    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.auth"</span><span class="o">,</span> <span class="n">auth</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">port</span> <span class="o">==</span> <span class="mi">587</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.starttls.enable"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span> <span class="c1">// 不启用TLS加密</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.ssl.enable"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 启用SSL加密</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.socketFactory.class"</span><span class="o">,</span> <span class="s">"javax.net.ssl.SSLSocketFactory"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">port</span> <span class="o">==</span> <span class="mi">465</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.socketFactory.port"</span><span class="o">,</span> <span class="s">"465"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.socketFactory.class"</span><span class="o">,</span> <span class="s">"javax.net.ssl.SSLSocketFactory"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.debug"</span><span class="o">,</span> <span class="n">debug</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">mailSender</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">JavaMailSender</code>接口的实现类是<code class="language-plaintext highlighter-rouge">JavaMailSenderImpl</code>，初始化时，传入的参数与JavaMail是完全一致的。</p>

<p>另外注意到需要注入的属性是从<code class="language-plaintext highlighter-rouge">smtp.properties</code>中读取的，因此，<code class="language-plaintext highlighter-rouge">AppConfig</code>导入的就不止一个<code class="language-plaintext highlighter-rouge">.properties</code>文件，可以导入多个：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="nd">@PropertySource</span><span class="o">({</span> <span class="s">"classpath:/jdbc.properties"</span><span class="o">,</span> <span class="s">"classpath:/smtp.properties"</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>下一步是封装一个<code class="language-plaintext highlighter-rouge">MailService</code>，并定义<code class="language-plaintext highlighter-rouge">sendRegistrationMail()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MailService</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.from}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">from</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="nc">JavaMailSender</span> <span class="n">mailSender</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRegistrationMail</span><span class="o">(</span><span class="nc">String</span> <span class="n">mail</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">MimeMessage</span> <span class="n">mimeMessage</span> <span class="o">=</span> <span class="n">mailSender</span><span class="o">.</span><span class="na">createMimeMessage</span><span class="o">();</span>
            <span class="nc">MimeMessageHelper</span> <span class="n">helper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeMessageHelper</span><span class="o">(</span><span class="n">mimeMessage</span><span class="o">,</span> <span class="s">"utf-8"</span><span class="o">);</span>
            <span class="n">helper</span><span class="o">.</span><span class="na">setFrom</span><span class="o">(</span><span class="n">from</span><span class="o">);</span>
            <span class="n">helper</span><span class="o">.</span><span class="na">setTo</span><span class="o">(</span><span class="n">mail</span><span class="o">);</span>
            <span class="n">helper</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="s">"Welcome to Java course!"</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">html</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"&lt;p&gt;Hi, %s,&lt;/p&gt;&lt;p&gt;Welcome to Java course!&lt;/p&gt;&lt;p&gt;Sent at %s&lt;/p&gt;"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
            <span class="n">helper</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">html</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
            <span class="n">mailSender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">mimeMessage</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">MessagingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MimeMessage</code>是JavaMail的邮件对象，而<code class="language-plaintext highlighter-rouge">MimeMessageHelper</code>是Spring提供的用于简化设置MimeMessage的类，比如设置HTML邮件就可以直接调用<code class="language-plaintext highlighter-rouge">setText(String text, boolean html)</code>方法，而不必再调用比较繁琐的JavaMail接口方法。</p>

<p>最后一步是调用<code class="language-plaintext highlighter-rouge">JavaMailSender.send()</code>方法把邮件发送出去。</p>

<p>在MVC的某个Controller方法中，当用户注册成功后，就启动一个新线程来异步发送邮件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">MailController</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">MailService</span> <span class="n">mailService</span><span class="o">;</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/testMail"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Mail</span> <span class="n">mail</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// send registration mail:</span>
        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">mailService</span><span class="o">.</span><span class="na">sendRegistrationMail</span><span class="o">(</span><span class="n">mail</span><span class="o">.</span><span class="na">email</span><span class="o">);</span>
        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Mail</span><span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为发送邮件是一种耗时的任务，从几秒到几分钟不等，因此，异步发送是保证页面能快速显示的必要措施。</p>

<p>测试：post请求：<code class="language-plaintext highlighter-rouge">http://localhost:8080/testMail</code>，附带json：<code class="language-plaintext highlighter-rouge">{"email":"收件人@qq.com"}</code>，成功收到邮件。</p>

<h2 id="集成jms">集成JMS</h2>

<p>JMS即Java Message Service，是JavaEE的消息服务接口。JMS主要有两个版本：1.1和2.0。2.0和1.1相比，主要是简化了收发消息的代码。</p>

<p>所谓消息服务，就是两个进程之间，通过消息服务器传递消息：</p>

<pre><code class="language-ascii">┌────────┐    ┌──────────────┐    ┌────────┐
│Producer│───&gt;│Message Server│───&gt;│Consumer│
└────────┘    └──────────────┘    └────────┘
</code></pre>

<p>使用消息服务，而不是直接调用对方的API，它的好处是：</p>

<ul>
  <li>双方各自无需知晓对方的存在，消息可以异步处理，因为消息服务器会在Consumer离线的时候自动缓存消息；</li>
  <li>如果Producer发送的消息频率高于Consumer的处理能力，消息可以积压在消息服务器，不至于压垮Consumer；</li>
  <li>通过一个消息服务器，可以连接多个Producer和多个Consumer。</li>
</ul>

<p>因为消息服务在各类应用程序中非常有用，所以JavaEE专门定义了JMS规范。JMS是一组接口定义，如果要使用JMS，还需要选择一个具体的JMS产品。常用的JMS服务器有开源的<a href="https://activemq.apache.org/">ActiveMQ</a>，商业服务器如WebLogic、WebSphere等也内置了JMS支持。这里选择开源的ActiveMQ作为JMS服务器，因此，在开发JMS之前必须安装ActiveMQ。</p>

<p>ActiveMQ Classic或者ActiveMQ Artemis，这两个是什么关系，又有什么区别？</p>

<p>实际上ActiveMQ Classic原来就叫ActiveMQ，是Apache开发的基于JMS 1.1的消息服务器，目前稳定版本号是5.x，而ActiveMQ Artemis是由RedHat捐赠的<a href="https://hornetq.jboss.org/">HornetQ</a>服务器代码的基础上开发的，目前稳定版本号是2.x。和ActiveMQ Classic相比，Artemis版的代码与Classic完全不同，并且，它支持JMS 2.0，使用基于Netty的异步IO，大大提升了性能。此外，Artemis不仅提供了JMS接口，它还提供了AMQP接口，STOMP接口和物联网使用的MQTT接口。选择Artemis，相当于一鱼四吃。</p>

<p>所以，这里直接选择ActiveMQ Artemis。从官网<a href="https://activemq.apache.org/components/artemis/download/past_releases">下载</a>最后一版支持java8的2.19.1版本，解压后设置环境变量<code class="language-plaintext highlighter-rouge">ARTEMIS_HOME</code>，指向Artemis根目录，例如<code class="language-plaintext highlighter-rouge">C:\Apps\artemis</code>，然后，把<code class="language-plaintext highlighter-rouge">ARTEMIS_HOME/bin</code>加入PATH环境变量：</p>

<ul>
  <li>Windows下添加<code class="language-plaintext highlighter-rouge">%ARTEMIS_HOME%\bin</code>到Path路径；</li>
  <li>Mac和Linux下添加<code class="language-plaintext highlighter-rouge">$ARTEMIS_HOME/bin</code>到PATH路径。</li>
</ul>

<p>Artemis有个很好的设计，就是它把程序和数据完全分离了。解压后的<code class="language-plaintext highlighter-rouge">ARTEMIS_HOME</code>目录是程序目录，要启动一个Artemis服务，还需要创建一个数据目录。</p>

<p>要把数据目录直接设定在项目文件夹的<code class="language-plaintext highlighter-rouge">jms-data</code>目录下。需要在项目文件夹下执行命令<code class="language-plaintext highlighter-rouge">artemis create jms-data</code>。</p>

<p>在创建过程中，会要求输入连接用户和口令，这里设定<code class="language-plaintext highlighter-rouge">admin</code>和<code class="language-plaintext highlighter-rouge">password</code>，以及是否允许匿名访问（这里选择<code class="language-plaintext highlighter-rouge">N</code>）。</p>

<p>此数据目录<code class="language-plaintext highlighter-rouge">jms-data</code>不仅包含消息数据、日志，还自动创建了两个启动服务的命令<code class="language-plaintext highlighter-rouge">bin/artemis</code>和<code class="language-plaintext highlighter-rouge">bin/artemis-service</code>，前者在前台启动运行，按Ctrl+C结束，后者会一直在后台运行。</p>

<p>把目录切换到<code class="language-plaintext highlighter-rouge">jms-data/bin</code>，直接运行<code class="language-plaintext highlighter-rouge">artemis run</code>即可启动Artemis服务。</p>

<p>启动成功后，Artemis提示可以通过URL<code class="language-plaintext highlighter-rouge">http://localhost:8161/console</code>访问管理后台。注意<strong>不要关闭命令行窗口</strong>。</p>

<p>如果Artemis启动时显示警告：<code class="language-plaintext highlighter-rouge">AMQ222212: Disk Full! ... Clients will report blocked.</code>这是因为磁盘空间不够，可以在<code class="language-plaintext highlighter-rouge">etc/broker.xml</code>配置中找到<code class="language-plaintext highlighter-rouge">&lt;max-disk-usage&gt;</code>并改为<code class="language-plaintext highlighter-rouge">99</code>。</p>

<hr />

<p>JMS把生产消息的一方称为Producer，处理消息的一方称为Consumer。有两种类型的消息通道，一种是Queue：</p>

<pre><code class="language-ascii">┌────────┐    ┌────────┐    ┌────────┐
│Producer│───&gt;│ Queue  │───&gt;│Consumer│
└────────┘    └────────┘    └────────┘
</code></pre>

<p>一种是Topic：</p>

<pre><code class="language-ascii">                            ┌────────┐
                         ┌─&gt;│Consumer│
                         │  └────────┘
┌────────┐    ┌────────┐ │  ┌────────┐
│Producer│───&gt;│ Topic  │─┼─&gt;│Consumer│
└────────┘    └────────┘ │  └────────┘
                         │  ┌────────┐
                         └─&gt;│Consumer│
                            └────────┘
</code></pre>

<p>它们的区别在于，Queue是一种一对一的通道，如果Consumer离线无法处理消息时，Queue会把消息存起来，等Consumer再次连接的时候发给它。设定了持久化机制的Queue不会丢失消息。如果有多个Consumer接入同一个Queue，那么它们等效于以集群方式处理消息，例如，发送方发送的消息是A，B，C，D，E，F，两个Consumer可能分别收到A，C，E和B，D，F，即每个消息只会交给其中一个Consumer处理。</p>

<p>Topic则是一种一对多通道。一个Producer发出的消息，会被多个Consumer同时收到，即每个Consumer都会收到一份完整的消息流。如果某个Consumer暂时离线，过一段时间后又上线了，那么在它离线期间产生的消息还能不能收到呢？</p>

<p>这取决于消息服务器对Topic类型消息的持久化机制。如果消息服务器不存储Topic消息，那么离线的Consumer会丢失部分离线时期的消息，如果消息服务器存储了Topic消息，那么离线的Consumer可以收到自上次离线时刻开始后产生的所有消息。JMS规范通过Consumer指定一个持久化订阅可以在上线后收取所有离线期间的消息，如果指定的是非持久化订阅，那么离线期间的消息会全部丢失。</p>

<p>如果一个Topic的消息全部都持久化了，并且只有一个Consumer，那么它和Queue其实是一样的。实际上，很多消息服务器内部都只有Topic类型的消息架构，Queue可以通过Topic“模拟”出来。</p>

<p>无论是Queue还是Topic，对Producer没有什么要求。多个Producer也可以写入同一个Queue或者Topic，此时消息服务器内部会自动排序确保消息总是有序的。</p>

<p>以上是消息服务的基本模型。具体到某个消息服务器时，Producer和Consumer通常是通过TCP连接消息服务器，在编写JMS程序时，又会遇到<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>、<code class="language-plaintext highlighter-rouge">Connection</code>、<code class="language-plaintext highlighter-rouge">Session</code>等概念，其实这和JDBC连接是类似的：</p>

<ul>
  <li>ConnectionFactory：代表一个到消息服务器的连接池，类似JDBC的DataSource；</li>
  <li>Connection：代表一个到消息服务器的连接，类似JDBC的Connection；</li>
  <li>Session：代表一个经过认证后的连接会话；</li>
  <li>Message：代表一个消息对象。</li>
</ul>

<p>在JMS 1.1中，发送消息的典型代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="nc">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// 创建连接:</span>
        <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
        <span class="c1">// 创建会话:</span>
        <span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span><span class="nc">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>
        <span class="c1">// 创建一个Producer并关联到某个Queue:</span>
        <span class="nc">MessageProducer</span> <span class="n">messageProducer</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createProducer</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
        <span class="c1">// 创建一个文本消息:</span>
        <span class="nc">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
        <span class="c1">// 发送消息:</span>
        <span class="n">messageProducer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">textMessage</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="c1">// 关闭连接:</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">JMSException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 处理JMS异常</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JMS 2.0改进了一些API接口，发送消息变得更简单：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">JMSContext</span> <span class="n">context</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createContext</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">context</span><span class="o">.</span><span class="na">createProducer</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="n">queue</span><span class="o">,</span> <span class="n">text</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">JMSContext</code>实现了<code class="language-plaintext highlighter-rouge">AutoCloseable</code>接口，可以使用<code class="language-plaintext highlighter-rouge">try(resource)</code>语法，代码更简单。</p>

<p>有了以上预备知识，就可以开始开发JMS应用了。</p>

<p>首先，在<code class="language-plaintext highlighter-rouge">pom.xml</code>中添加如下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-jms<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/org.apache.activemq/artemis-jms-client --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.activemq<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>artemis-jms-client<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.19.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>Artemis的Client接口依赖了<code class="language-plaintext highlighter-rouge">jakarta.jms:jakarta.jms-api</code>，因此不必再引入JMS API的依赖。</p>

<p>在AppConfig中，通过<code class="language-plaintext highlighter-rouge">@EnableJms</code>让Spring自动扫描JMS相关的Bean，并加载JMS配置文件<code class="language-plaintext highlighter-rouge">jms.properties</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@EnableJms</span> <span class="c1">// 启用JMS</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="nd">@PropertySource</span><span class="o">({</span> <span class="s">"classpath:/jdbc.properties"</span><span class="o">,</span> <span class="s">"classpath:/jms.properties"</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>首先要创建的Bean是<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>，即连接消息服务器的连接池：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ConnectionFactory</span> <span class="nf">createJMSConnectionFactory</span><span class="o">(</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.uri:tcp://localhost:61616}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">uri</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.username:admin}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.password:password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ActiveMQJMSConnectionFactory</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为使用的消息服务器是ActiveMQ Artemis，所以<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>的实现类就是消息服务器提供的<code class="language-plaintext highlighter-rouge">ActiveMQJMSConnectionFactory</code>，它需要的参数均由配置文件读取后传入，并设置了默认值。</p>

<p>再创建一个<code class="language-plaintext highlighter-rouge">JmsTemplate</code>，它是Spring提供的一个工具类，和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>类似，可以简化发送消息的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">JmsTemplate</span> <span class="nf">createJmsTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">JmsTemplate</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>下一步要创建的是<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>，</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"jmsListenerContainerFactory"</span><span class="o">)</span>
<span class="nc">DefaultJmsListenerContainerFactory</span> <span class="nf">createJmsListenerContainerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultJmsListenerContainerFactory</span><span class="o">();</span>
    <span class="n">factory</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">factory</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>除了必须指定Bean的名称为<code class="language-plaintext highlighter-rouge">jmsListenerContainerFactory</code>外，这个Bean的作用是处理和Consumer相关的Bean。先跳过它的原理，继续编写<code class="language-plaintext highlighter-rouge">MessagingService</code>来发送消息：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">MessageCreator</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">createMessage</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JMSException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JMS的消息类型支持以下几种：</p>

<ul>
  <li>TextMessage：文本消息；</li>
  <li>BytesMessage：二进制消息；</li>
  <li>MapMessage：包含多个Key-Value对的消息；</li>
  <li>ObjectMessage：直接序列化Java对象的消息；</li>
  <li>StreamMessage：一个包含基本类型序列的消息。</li>
</ul>

<p>最常用的是发送基于JSON的文本消息，上述代码通过<code class="language-plaintext highlighter-rouge">JmsTemplate</code>创建一个<code class="language-plaintext highlighter-rouge">TextMessage</code>并发送到名称为<code class="language-plaintext highlighter-rouge">jms/queue/mail</code>的Queue。</p>

<p>注意：Artemis消息服务器默认配置下会自动创建Queue，因此不必手动创建一个名为<code class="language-plaintext highlighter-rouge">jms/queue/mail</code>的Queue，但不是所有的消息服务器都会自动创建Queue，生产环境的消息服务器通常会关闭自动创建功能，需要手动创建Queue。</p>

<p><code class="language-plaintext highlighter-rouge">session.createTextMessage(msg);</code>创建了<code class="language-plaintext highlighter-rouge">TextMessage</code>，它的内容是字符串。</p>

<hr />

<p>下面要详细讨论的是如何处理消息，即编写Consumer。从理论上讲，可以创建另一个Java进程来处理消息，但对于这个简单的Web程序来说没有必要，直接在同一个Web应用中接收并处理消息即可。</p>

<p>处理消息的核心代码是编写一个Bean，并在处理方法上标注<code class="language-plaintext highlighter-rouge">@JmsListener</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MailMessageListener</span> <span class="o">{</span>
    <span class="nd">@JmsListener</span><span class="o">(</span><span class="n">destination</span> <span class="o">=</span> <span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="n">concurrency</span> <span class="o">=</span> <span class="s">"10"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMailMessageReceived</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">((</span><span class="nc">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">).</span><span class="na">getText</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@JmsListener</code>指定了Queue的名称，因此，凡是发到此Queue的消息都会被这个<code class="language-plaintext highlighter-rouge">onMailMessageReceived()</code>方法处理，方法参数是JMS的<code class="language-plaintext highlighter-rouge">Message</code>接口，通过强制转型为<code class="language-plaintext highlighter-rouge">TextMessage</code>并提取字符串。</p>

<hr />

<p>Spring处理JMS消息的流程是什么？</p>

<p>如果直接调用JMS的API来处理消息，那么编写的代码大致如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建JMS连接:</span>
<span class="nc">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
<span class="c1">// 创建会话:</span>
<span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="nc">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>
<span class="c1">// 创建一个Consumer:</span>
<span class="nc">MessageConsumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createConsumer</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
<span class="c1">// 为Consumer指定一个消息处理器:</span>
<span class="n">consumer</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">MessageListener</span><span class="o">()</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 在此处理消息... </span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="c1">// 启动接收消息的循环:</span>
<span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>

<p>我们自己编写的<code class="language-plaintext highlighter-rouge">MailMessageListener.onMailMessageReceived()</code>相当于消息处理器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">consumer</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">MessageListener</span><span class="o">()</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mailMessageListener</span><span class="o">.</span><span class="na">onMailMessageReceived</span><span class="o">(</span><span class="n">message</span><span class="o">);</span> 
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div></div>

<p>所以，Spring根据<code class="language-plaintext highlighter-rouge">AppConfig</code>的注解<code class="language-plaintext highlighter-rouge">@EnableJms</code>自动扫描带有<code class="language-plaintext highlighter-rouge">@JmsListener</code>的Bean方法，并为其创建一个<code class="language-plaintext highlighter-rouge">MessageListener</code>把它包装起来。</p>

<p>注意到前面我们还创建了一个<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>的Bean，它的作用就是为每个<code class="language-plaintext highlighter-rouge">MessageListener</code>创建<code class="language-plaintext highlighter-rouge">MessageConsumer</code>并启动消息接收循环。</p>

<p>再注意到<code class="language-plaintext highlighter-rouge">@JmsListener</code>还有一个<code class="language-plaintext highlighter-rouge">concurrency</code>参数，10表示可以最多同时并发处理10个消息，<code class="language-plaintext highlighter-rouge">5-10</code>表示并发处理的线程可以在5~10之间调整。</p>

<p>因此，Spring在通过<code class="language-plaintext highlighter-rouge">MessageListener</code>接收到消息后，并不是直接调用<code class="language-plaintext highlighter-rouge">mailMessageListener.onMailMessageReceived()</code>，而是用线程池调用，因此，要时刻牢记，<code class="language-plaintext highlighter-rouge">onMailMessageReceived()</code>方法可能被多线程并发执行，一定要保证线程安全。</p>

<p>总结一下Spring接收消息的步骤：</p>

<p>通过<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>配合<code class="language-plaintext highlighter-rouge">@EnableJms</code>扫描所有<code class="language-plaintext highlighter-rouge">@JmsListener</code>方法，自动创建<code class="language-plaintext highlighter-rouge">MessageConsumer</code>、<code class="language-plaintext highlighter-rouge">MessageListener</code>以及线程池，启动消息循环接收处理消息，最终由我们自己编写的<code class="language-plaintext highlighter-rouge">@JmsListener</code>方法处理消息，可能会由多线程同时并发处理。</p>

<hr />

<p>要验证消息发送和处理，新建一个Controller：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">TextController</span><span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">MessagingService</span> <span class="n">messagingService</span><span class="o">;</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test/{msg}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"msg"</span><span class="o">)</span>  <span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
        <span class="n">messagingService</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/test/hi</code>，控制台输出：<code class="language-plaintext highlighter-rouge">hi</code>。</p>

<p>完整代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.PropertySource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.annotation.EnableJms</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.annotation.JmsListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.config.DefaultJmsListenerContainerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.core.JmsTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.core.MessageCreator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PathVariable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.jms.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>


<span class="cm">/**
 * @author aotmd
 * @version 1.0
 * @date 2024/6/1 22:16
 */</span>
<span class="nd">@EnableJms</span> <span class="c1">// 启用JMS</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="c1">//Locale.setDefault(Locale.ENGLISH);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">({</span><span class="s">"classpath:jms.properties"</span><span class="o">})</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
   <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://127.0.0.1:5500"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">ConnectionFactory</span> <span class="nf">createJMSConnectionFactory</span><span class="o">(</span>
            <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.uri:tcp://localhost:61616}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">uri</span><span class="o">,</span>
            <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.username:admin}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
            <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.password:password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ActiveMQJMSConnectionFactory</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">JmsTemplate</span> <span class="nf">createJmsTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JmsTemplate</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"jmsListenerContainerFactory"</span><span class="o">)</span>
    <span class="nc">DefaultJmsListenerContainerFactory</span> <span class="nf">createJmsListenerContainerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultJmsListenerContainerFactory</span><span class="o">();</span>
        <span class="n">factory</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">factory</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">TextController</span><span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">MessagingService</span> <span class="n">messagingService</span><span class="o">;</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test/{msg}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"msg"</span><span class="o">)</span>  <span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
        <span class="n">messagingService</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">MessageCreator</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">createMessage</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JMSException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MailMessageListener</span> <span class="o">{</span>
    <span class="nd">@JmsListener</span><span class="o">(</span><span class="n">destination</span> <span class="o">=</span> <span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="n">concurrency</span> <span class="o">=</span> <span class="s">"10"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMailMessageReceived</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">((</span><span class="nc">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">).</span><span class="na">getText</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="使用scheduler">使用Scheduler</h2>

<p>在很多应用程序中，经常需要执行定时任务。例如，每天或每月给用户发送账户汇总报表，定期检查并发送系统状态报告，等等。Java标准库本身就提供了定时执行任务的功能。在Spring中，使用定时任务更简单，不需要手写线程池相关代码，只需要两个注解即可。</p>

<p>直接在<code class="language-plaintext highlighter-rouge">AppConfig</code>中加上<code class="language-plaintext highlighter-rouge">@EnableScheduling</code>就开启了定时任务的支持。</p>

<p>接下来，可以直接在一个Bean中编写一个<code class="language-plaintext highlighter-rouge">public void</code>无参数方法，然后加上<code class="language-plaintext highlighter-rouge">@Scheduled</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">TaskService</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Scheduled</span><span class="o">(</span><span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">,</span> <span class="n">fixedRate</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">checkSystemStatusEveryMinute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"开始检查系统状态.."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述注解指定了启动延迟1秒，并以1秒的间隔执行任务。现在，我们直接运行应用程序，就可以在控制台看到定时任务打印的日志：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>14:50:58.306 [pool-1-thread-1] INFO com.aotmd.test.TaskService - 开始检查系统状态..
14:50:59.306 [pool-1-thread-1] INFO com.aotmd.test.TaskService - 开始检查系统状态..
14:51:00.304 [pool-1-thread-1] INFO com.aotmd.test.TaskService - 开始检查系统状态..
</code></pre></div></div>

<p>除了可以使用<code class="language-plaintext highlighter-rouge">fixedRate</code>外，还可以使用<code class="language-plaintext highlighter-rouge">fixedDelay</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">,</span> <span class="n">fixedDelay</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">)</span>
</code></pre></div></div>

<p>因为Java的注解全部是常量，写死了<code class="language-plaintext highlighter-rouge">fixedDelay=1_000</code>，如果根据实际情况要改成60秒怎么办，只能重新编译？</p>

<p>可以把定时任务的配置放到配置文件中，例如<code class="language-plaintext highlighter-rouge">task.properties</code>：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">task.checkDiskSpace</span><span class="p">=</span><span class="s">30000</span>
</code></pre></div></div>

<p>这样就可以随时修改配置文件而无需动代码。但是在代码中，需要用<code class="language-plaintext highlighter-rouge">fixedDelayString</code>取代<code class="language-plaintext highlighter-rouge">fixedDelay</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">,</span> <span class="n">fixedDelayString</span> <span class="o">=</span> <span class="s">"${task.checkDiskSpace:30000}"</span><span class="o">)</span>
</code></pre></div></div>

<p>上述代码的注解参数<code class="language-plaintext highlighter-rouge">fixedDelayString</code>是一个属性占位符，并配有默认值30000，Spring在处理<code class="language-plaintext highlighter-rouge">@Scheduled</code>注解时，如果遇到<code class="language-plaintext highlighter-rouge">String</code>，会根据占位符自动用配置项替换，这样就可以灵活地修改定时任务的配置。</p>

<p>此外，<code class="language-plaintext highlighter-rouge">fixedDelayString</code>还可以使用更易读的<code class="language-plaintext highlighter-rouge">Duration</code>，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">30_000</span><span class="o">,</span> <span class="n">fixedDelayString</span> <span class="o">=</span> <span class="s">"${task.checkDiskSpace:PT2M30S}"</span><span class="o">)</span>
</code></pre></div></div>

<p>以字符串<code class="language-plaintext highlighter-rouge">PT2M30S</code>表示的<code class="language-plaintext highlighter-rouge">Duration</code>就是2分30秒，请参考<a href="/2021/04/12/函日期和时间/#duration和period">日期和时间</a>一节的Duration相关部分。</p>

<p>多个<code class="language-plaintext highlighter-rouge">@Scheduled</code>方法完全可以放到一个Bean中，这样便于统一管理各类定时任务。</p>

<hr />

<p><strong>使用Cron任务</strong></p>

<p>还有一类定时任务，它不是简单的重复执行，而是按时间触发，这类任务称为Cron任务，例如：</p>

<ul>
  <li>每天凌晨2:15执行报表任务；</li>
  <li>每个工作日12:00执行特定任务；</li>
  <li>……</li>
</ul>

<p>Cron源自Unix/Linux系统自带的crond守护进程，以一个简洁的表达式定义任务触发时间。在Spring中，也可以使用Cron表达式来执行Cron任务，在Spring中，它的格式是：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>秒 分 小时 天 月份 星期 年
</code></pre></div></div>

<p>年是可以忽略的，通常不写。每天凌晨2:15执行的Cron表达式就是：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 15 2 * * *
</code></pre></div></div>

<p>每个工作日12:00执行的Cron表达式就是：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 0 12 * * MON-FRI
</code></pre></div></div>

<p>每个月1号，2号，3号和10号12:00执行的Cron表达式就是：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 0 12 1-3,10 * *
</code></pre></div></div>

<p>在Spring中，定义一个每天凌晨2:15执行的任务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskService</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Scheduled</span><span class="o">(</span><span class="n">cron</span> <span class="o">=</span> <span class="s">"${task.report:0 15 2 * * *}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cronDailyReport</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"开始检查系统状态.."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Cron任务同样可以使用属性占位符，这样修改起来更加方便。</p>

<p>Cron表达式还可以表达每10分钟执行，例如：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 */10 * * * *
</code></pre></div></div>

<p>这样，在每个小时的0:00，10:00，20:00，30:00，40:00，50:00均会执行任务，实际上它可以取代<code class="language-plaintext highlighter-rouge">fixedRate</code>类型的定时任务。</p>

<hr />

<p><strong>集成Quartz</strong></p>

<p>在Spring中使用定时任务和Cron任务都十分简单，但是要注意到，这些任务的调度都是在每个JVM进程中的。如果在本机启动两个进程，或者在多台机器上启动应用，这些进程的定时任务和Cron任务都是独立运行的，互不影响。</p>

<p>如果一些定时任务要以集群的方式运行，例如每天23:00执行检查任务，只需要集群中的一台运行即可，这个时候，可以考虑使用<a href="https://www.quartz-scheduler.org/">Quartz</a>。</p>

<p>Quartz可以配置一个JDBC数据源，以便存储所有的任务调度计划以及任务执行状态。也可以使用内存来调度任务，但这样配置就和使用Spring的调度没啥区别了，额外集成Quartz的意义就不大。</p>

<p>Quartz的JDBC配置比较复杂，Spring对其也有一定的支持。要详细了解Quartz的集成，请参考<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#scheduling-quartz">Spring的文档</a>。</p>

<h2 id="集成jmx">集成JMX</h2>

<p>JMX是Java Management Extensions，它是一个Java平台的管理和监控接口。在所有的应用程序中，对运行中的程序进行监控都是非常重要的，Java应用程序也不例外。我们肯定希望知道Java应用程序当前的状态，例如，占用了多少内存，分配了多少内存，当前有多少活动线程，有多少休眠线程等等。如何获取这些信息呢？</p>

<p>为了标准化管理和监控，Java平台使用JMX作为管理和监控的标准接口，任何程序，只要按JMX规范访问这个接口，就可以获取所有管理与监控信息。</p>

<p>实际上，常用的运维监控如Zabbix、Nagios等工具对JVM本身的监控都是通过JMX获取的信息。</p>

<p>因为JMX是一个标准接口，不但可以用于管理JVM，还可以管理应用程序自身。下图是JMX的架构：</p>

<pre><code class="language-ascii">    ┌─────────┐  ┌─────────┐
    │jconsole │  │   Web   │
    └─────────┘  └─────────┘
         │            │
┌ ─ ─ ─ ─│─ ─ ─ ─ ─ ─ ┼ ─ ─ ─ ─
 JVM     ▼            ▼        │
│   ┌─────────┐  ┌─────────┐
  ┌─┤Connector├──┤ Adaptor ├─┐ │
│ │ └─────────┘  └─────────┘ │
  │       MBeanServer        │ │
│ │ ┌──────┐┌──────┐┌──────┐ │
  └─┤MBean1├┤MBean2├┤MBean3├─┘ │
│   └──────┘└──────┘└──────┘
 ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>JMX把所有被管理的资源都称为MBean（Managed Bean），这些MBean全部由MBeanServer管理，如果要访问MBean，可以通过MBeanServer对外提供的访问接口，例如通过RMI或HTTP访问。</p>

<p>使用JMX不需要安装任何额外组件，也不需要第三方库，因为MBeanServer已经内置在JavaSE标准库中了。JavaSE还提供了一个<code class="language-plaintext highlighter-rouge">jconsole</code>程序，用于通过RMI连接到MBeanServer，这样就可以管理整个Java进程。</p>

<p>除了JVM会把自身的各种资源以MBean注册到JMX中，我们自己的配置、监控信息也可以作为MBean注册到JMX，这样，管理程序就可以直接控制我们暴露的MBean。</p>

<p>因此，应用程序使用JMX，只需要编写MBean提供管理接口和监控数据，以及注册MBean。</p>

<p>而在Spring应用程序中，使用JMX只需要编写MBean提供管理接口和监控数据。第二步注册的过程由Spring自动完成。</p>

<p>首先在<code class="language-plaintext highlighter-rouge">AppConfig</code>中加上<code class="language-plaintext highlighter-rouge">@EnableMBeanExport</code>注解，告诉Spring自动注册MBean。</p>

<p>剩下的全部工作就是编写MBean。以实际问题为例，假设我们希望给应用程序添加一个IP黑名单功能，凡是在黑名单中的IP禁止访问，传统的做法是定义一个配置文件，启动的时候读取：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># blacklist.txt
1.2.3.4
5.6.7.8
2.2.3.4
...
</code></pre></div></div>

<p>如果要修改黑名单怎么办？修改配置文件，然后重启应用程序。</p>

<p>但是每次都重启应用程序实在是太麻烦了，能不能不重启应用程序？可以自己写一个定时读取配置文件的功能，检测到文件改动时自动重新读取。</p>

<p>上述需求本质上是在应用程序运行期间对参数、配置等进行热更新并要求尽快生效。如果以JMX的方式实现，不必自己编写自动重新读取等任何代码，只需要提供一个符合JMX标准的MBean来存储配置即可。</p>

<p>还是以IP黑名单为例，JMX的MBean通常以MBean结尾，因此遵循标准命名规范，首先编写一个<code class="language-plaintext highlighter-rouge">BlacklistMBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlacklistMBean</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ips</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getBlacklist</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addBlacklist</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ips</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeBlacklist</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ips</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">shouldBlock</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个MBean没什么特殊的，它的逻辑和普通Java类没有任何区别。</p>

<p>下一步，我们要使用JMX的客户端来实时热更新这个MBean，所以要给它加上一些注解，让Spring能根据注解自动把相关方法注册到MBeanServer中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ManagedResource</span><span class="o">(</span><span class="n">objectName</span> <span class="o">=</span> <span class="s">"sample:name=blacklist"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Blacklist of IP addresses"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlacklistMBean</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ips</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@ManagedAttribute</span><span class="o">(</span><span class="n">description</span> <span class="o">=</span> <span class="s">"Get IP addresses in blacklist"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getBlacklist</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="n">ips</span><span class="o">.</span><span class="na">size</span><span class="o">()]);</span>
    <span class="o">}</span>

    <span class="nd">@ManagedOperation</span>
    <span class="nd">@ManagedOperationParameter</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ip"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Target IP address that will be added to blacklist"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addBlacklist</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ips</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@ManagedOperation</span>
    <span class="nd">@ManagedOperationParameter</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ip"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Target IP address that will be removed from blacklist"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeBlacklist</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ips</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">shouldBlock</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BlacklistMBean</code>首先是一个标准的Spring管理的Bean，其次，添加了<code class="language-plaintext highlighter-rouge">@ManagedResource</code>表示这是一个MBean，将要被注册到JMX。objectName指定了这个MBean的名字，通常以<code class="language-plaintext highlighter-rouge">company:name=Xxx</code>来分类MBean。</p>

<p>对于属性，使用<code class="language-plaintext highlighter-rouge">@ManagedAttribute</code>注解标注。上述MBean只有get属性，没有set属性，说明这是一个只读属性。</p>

<p>对于操作，使用<code class="language-plaintext highlighter-rouge">@ManagedOperation</code>注解标准。上述MBean定义了两个操作：<code class="language-plaintext highlighter-rouge">addBlacklist()</code>和<code class="language-plaintext highlighter-rouge">removeBlacklist()</code>，其他方法如<code class="language-plaintext highlighter-rouge">shouldBlock()</code>不会被暴露给JMX。</p>

<p>使用MBean和普通Bean是完全一样的。例如，在<code class="language-plaintext highlighter-rouge">BlacklistInterceptor</code>对IP进行黑名单拦截：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlacklistInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">BlacklistMBean</span> <span class="n">blacklistMBean</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRemoteAddr</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"检查 IP 地址 {}..."</span><span class="o">,</span> <span class="n">ip</span><span class="o">);</span>
        <span class="c1">// 是否在黑名单中:</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">blacklistMBean</span><span class="o">.</span><span class="na">shouldBlock</span><span class="o">(</span><span class="n">ip</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"将阻止 IP {}，因为它在黑名单中。"</span><span class="o">,</span> <span class="n">ip</span><span class="o">);</span>
            <span class="c1">// 发送403错误响应:</span>
            <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="mi">403</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后正常启动Web应用程序，不要关闭。再打开另一个命令行窗口，输入<code class="language-plaintext highlighter-rouge">jconsole</code>启动JavaSE自带的一个JMX客户端程序。</p>

<p>通过jconsole连接到一个Java进程最简单的方法是：直接在Local Process中找到正在运行的<code class="language-plaintext highlighter-rouge">AppConfig</code>，点击Connect即可连接到当前正在运行的Web应用，在jconsole中可直接看到内存、CPU等资源的监控。</p>

<p>点击MBean，左侧按分类列出所有MBean，在<code class="language-plaintext highlighter-rouge">sample</code>中可以看到我们自己的MBean，点击可查看属性<code class="language-plaintext highlighter-rouge">blacklist</code>。</p>

<p>点击<code class="language-plaintext highlighter-rouge">Operations</code>-<code class="language-plaintext highlighter-rouge">addBlacklist</code>，可以填入<code class="language-plaintext highlighter-rouge">127.0.0.1</code>并点击<code class="language-plaintext highlighter-rouge">addBlacklist</code>按钮，相当于jconsole通过JMX接口，调用了我们自己的<code class="language-plaintext highlighter-rouge">BlacklistMBean</code>的<code class="language-plaintext highlighter-rouge">addBlacklist()</code>方法，传入的参数就是填入的<code class="language-plaintext highlighter-rouge">127.0.0.1</code>。</p>

<p>再次查看属性<code class="language-plaintext highlighter-rouge">blacklist</code>，可以看到结果已经更新了。</p>

<p>注意：如果使用IPv6，那么需要把<code class="language-plaintext highlighter-rouge">0:0:0:0:0:0:0:1</code>这个本机地址加到黑名单。</p>

<p>可以在浏览器中测试一下黑名单功能是否已生效：</p>

<p>可见，<code class="language-plaintext highlighter-rouge">127.0.0.1</code>确实被添加到了黑名单，后台日志打印如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>09:10:31.557 [http-nio-8080-exec-9] INFO com.aotmd.test.BlacklistInterceptor - 检查 IP 地址 0:0:0:0:0:0:0:1...
09:10:31.557 [http-nio-8080-exec-9] WARN com.aotmd.test.BlacklistInterceptor - 将阻止 IP 0:0:0:0:0:0:0:1，因为它在黑名单中。
</code></pre></div></div>

<p>如果从jconsole中调用<code class="language-plaintext highlighter-rouge">removeBlacklist</code>移除<code class="language-plaintext highlighter-rouge">127.0.0.1</code>，刷新浏览器可以看到又允许访问了。</p>

<p>使用jconsole直接通过Local Process连接JVM有个限制，就是jconsole和正在运行的JVM必须在同一台机器。如果要远程连接，首先要打开JMX端口。在启动<code class="language-plaintext highlighter-rouge">AppConfig</code>时，需要传入以下JVM启动参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">-</span><span class="nc">Dcom</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">management</span><span class="o">.</span><span class="na">jmxremote</span><span class="o">.</span><span class="na">port</span><span class="o">=</span><span class="mi">19999</span>
<span class="o">-</span><span class="nc">Dcom</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">management</span><span class="o">.</span><span class="na">jmxremote</span><span class="o">.</span><span class="na">authenticate</span><span class="o">=</span><span class="kc">false</span>
<span class="o">-</span><span class="nc">Dcom</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">management</span><span class="o">.</span><span class="na">jmxremote</span><span class="o">.</span><span class="na">ssl</span><span class="o">=</span><span class="kc">false</span>
</code></pre></div></div>

<p>第一个参数表示在19999端口监听JMX连接，第二个和第三个参数表示无需验证，不使用SSL连接，在开发测试阶段比较方便，生产环境必须指定验证方式并启用SSL。详细参数可参考Oracle<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/management/agent.html#gdeum">官方文档</a>。这样jconsole可以用<code class="language-plaintext highlighter-rouge">ip:19999</code>的远程方式连接JMX。连接后的操作是完全一样的。</p>

<p>许多JavaEE服务器如JBoss的管理后台都是通过JMX提供管理接口，并由Web方式访问，对用户更加友好。</p>

<p>通过JMX实现配置的实时更新其实并不常用，JMX更多地用于收集JVM的运行状态和应用程序的性能数据，然后通过监控服务器汇总数据后实现监控与报警。一个典型的监控系统架构如下：</p>

<pre><code class="language-ascii">┌───────────────┐   ┌───────────────┐
│  Web Console  │◀──│Metrics Server │
└───────────────┘   └───────────────┘
                            │
                            │
   ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─│─ ─ ┐
     ┌───────────────┐      │
   │ │      App      │      │    │
     ├─────────┬─────┤   ┌─────┐
   │ │         │ JMX │──▶│Agent│ │
     │         └─────┤   └─────┘
   │ │      JVM      │           │
     └───────────────┘
   └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>其中，App自身和JVM的的统计数据都通过JMX收集并发送给本机的一个Agent，Agent再将数据发送至监控服务器，最后以可视化的形式将监控数据通过Web等形式展示给用户。常用的监控系统有开源的<a href="https://prometheus.io/">Prometheus</a>和以云服务方式提供的<a href="https://www.datadoghq.com/">DataDog</a>等。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">简单实现@GetMapping</title><link href="/2024/05/17/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0@GetMapping/" rel="alternate" type="text/html" title="简单实现@GetMapping" /><published>2024-05-17T00:00:00+08:00</published><updated>2024-05-17T00:00:00+08:00</updated><id>/2024/05/17/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0@GetMapping</id><content type="html" xml:base="/2024/05/17/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0@GetMapping/"><![CDATA[<h1 id="简单实现getmapping">简单实现@GetMapping</h1>

<p>首先写个<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>，URL路径为：<code class="language-plaintext highlighter-rouge">/</code>,表示所有没有指定<code class="language-plaintext highlighter-rouge">Servlet</code>处理的URL，都映射到此Servlet，然后<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>再根据路径执行特定的方法。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DispatcherServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Get</span><span class="o">&gt;</span> <span class="n">getMappings</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// todo 扫描注解</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 根据路径查找GetDispatcher:</span>
        <span class="nc">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">().</span><span class="na">length</span><span class="o">());</span>
        <span class="nc">Get</span> <span class="n">get</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getMappings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">get</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 未找到返回404:</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="mi">404</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">String</span> <span class="n">s</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="cm">/*调用使用反射的方法*/</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">get</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InvocationTargetException</span> <span class="o">|</span> <span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"redirect:"</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">9</span><span class="o">));</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="cm">/*todo 其他处理*/</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后写个Get类用于通过反射执行指定方法，还需要传入指定方法需要的形参类型的实例，如果形参名字对的上key就尝试获取值：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Get</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="n">instance</span><span class="o">;</span> <span class="c1">// Controller实例</span>
    <span class="kd">private</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">;</span> <span class="c1">// Controller方法</span>
    <span class="kd">private</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">parameterNames</span><span class="o">;</span> <span class="c1">// 方法参数名称</span>
    <span class="kd">private</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">parameterClasses</span><span class="o">;</span> <span class="c1">// 方法参数类型</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InvocationTargetException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="nc">Object</span><span class="o">[]</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">parameterClasses</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parameterClasses</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">parameterName</span> <span class="o">=</span> <span class="n">parameterNames</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">parameterClass</span> <span class="o">=</span> <span class="n">parameterClasses</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="nc">HttpServletRequest</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="nc">HttpServletResponse</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="nc">HttpSession</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">getOrDefault</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parameterName</span><span class="o">,</span> <span class="s">"0"</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="kt">long</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">getOrDefault</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parameterName</span><span class="o">,</span> <span class="s">"0"</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="kt">boolean</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Boolean</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">getOrDefault</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parameterName</span><span class="o">,</span> <span class="s">"false"</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">getOrDefault</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parameterName</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"缺少类型的处理程序: "</span> <span class="o">+</span> <span class="n">parameterClass</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">instance</span><span class="o">,</span> <span class="n">arguments</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">getOrDefault</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">defaultValue</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">defaultValue</span> <span class="o">:</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setInstance</span><span class="o">(</span><span class="nc">Object</span> <span class="n">instance</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">instance</span> <span class="o">=</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMethod</span><span class="o">(</span><span class="nc">Method</span> <span class="n">method</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">method</span> <span class="o">=</span> <span class="n">method</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setParameterNames</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">parameterNames</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">parameterNames</span> <span class="o">=</span> <span class="n">parameterNames</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setParameterClasses</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">parameterClasses</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">parameterClasses</span> <span class="o">=</span> <span class="n">parameterClasses</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再之后就是写注解了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">GetMapping</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后需要一个根据指定包扫描注解对应的类，方法，和方法参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Scan</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Get</span><span class="o">&gt;</span> <span class="n">getMappings</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Class</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">classes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="nf">Scan</span><span class="o">(</span><span class="nc">String</span> <span class="n">packageName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">scanClassFile</span><span class="o">(</span><span class="n">packageName</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">workAnnotations</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InstantiationException</span> <span class="o">|</span> <span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getClasspath</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
        <span class="no">URL</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">classLoader</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">resource</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">resource</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 找全部class
     * @param packageName
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">scanClassFile</span><span class="o">(</span><span class="nc">String</span> <span class="n">packageName</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">basePath</span><span class="o">=</span> <span class="n">packageName</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'/'</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">classpath</span> <span class="o">=</span> <span class="n">getClasspath</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">File</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">File</span> <span class="n">baseDir</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">classpath</span><span class="o">,</span> <span class="n">basePath</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">baseDir</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">file</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="k">continue</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">list</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">listFiles</span><span class="o">()));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">".class"</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">packageName</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">replace</span><span class="o">(</span><span class="s">".class"</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">className</span><span class="o">);</span>
                    <span class="n">classes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// 处理异常</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">workAnnotations</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InstantiationException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="cm">/*过滤掉接口*/</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Class</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">collect</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">x</span><span class="o">.</span><span class="na">isInterface</span><span class="o">()).</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">aClass</span> <span class="o">:</span> <span class="n">collect</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Object</span> <span class="n">o</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
            <span class="nc">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">aClass</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Annotation</span><span class="o">[]</span> <span class="n">annotations</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getAnnotations</span><span class="o">();</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Annotation</span> <span class="n">annotation</span> <span class="o">:</span> <span class="n">annotations</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="k">instanceof</span> <span class="nc">GetMapping</span><span class="o">){</span>
                        <span class="cm">/*共享实例，不然实例变量无效了（因为每个方法都实例化了一个实例对象）*/</span>
                        <span class="n">o</span><span class="o">=</span><span class="n">getMappingWork</span><span class="o">(</span><span class="n">aClass</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="o">(</span><span class="nc">GetMapping</span><span class="o">)</span> <span class="n">annotation</span><span class="o">,</span><span class="n">o</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="nc">Object</span> <span class="nf">getMappingWork</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">aClass</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">GetMapping</span> <span class="n">annotation</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InstantiationException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="nc">Parameter</span><span class="o">[]</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getParameters</span><span class="o">();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">parameterNames</span><span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="n">parameters</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">parameterClasses</span><span class="o">=</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">[</span><span class="n">parameters</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parameters</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Parameter</span> <span class="n">parameter</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">parameterNames</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">parameter</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
            <span class="n">parameterClasses</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">parameter</span><span class="o">.</span><span class="na">getType</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span> <span class="n">o</span> <span class="o">=</span> <span class="n">aClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
        <span class="nc">Get</span> <span class="n">getDispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Get</span><span class="o">();</span>
        <span class="n">getDispatcher</span><span class="o">.</span><span class="na">setInstance</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
        <span class="n">getDispatcher</span><span class="o">.</span><span class="na">setMethod</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
        <span class="n">getDispatcher</span><span class="o">.</span><span class="na">setParameterClasses</span><span class="o">(</span><span class="n">parameterClasses</span><span class="o">);</span>
        <span class="n">getDispatcher</span><span class="o">.</span><span class="na">setParameterNames</span><span class="o">(</span><span class="n">parameterNames</span><span class="o">);</span>
        <span class="n">getMappings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">(),</span><span class="n">getDispatcher</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Get</span><span class="o">&gt;</span> <span class="nf">getGetMappings</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">getMappings</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>最后整合进<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// todo 扫描注解</span>
    <span class="nc">Scan</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scan</span><span class="o">(</span><span class="s">"servlet"</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">getMappings</span><span class="o">=</span><span class="n">test</span><span class="o">.</span><span class="na">getGetMappings</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样就扫描了<code class="language-plaintext highlighter-rouge">servlet</code>包下的所有<code class="language-plaintext highlighter-rouge">@GetMapping</code>注解。测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span><span class="n">key</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"redirect:index.jsp"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">index.jsp</code>:</p>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>你好!<span class="nt">&lt;c:out </span><span class="na">value=</span><span class="s">"</span><span class="si">${</span><span class="n">user</span><span class="si">}</span><span class="s">"</span><span class="nt">/&gt;&lt;/h1&gt;</span>
</code></pre></div></div>

<p>设置程序编译参数：<code class="language-plaintext highlighter-rouge">-parameters</code>，它的作用是在编译后的类文件中<strong>保留方法参数的名称</strong>。默认情况下，Java编译器在编译过程中会丢弃方法参数的名称，而只保留参数的顺序。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/test?key=bob</code>正常使用。</p>

<hr />

<p>还可以使用模板引擎渲染内容：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/io.pebbletemplates/pebble --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>pebble<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.2.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewEngine</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">PebbleEngine</span> <span class="n">engine</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ViewEngine</span><span class="o">(</span><span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 定义一个ServletLoader用于加载模板:</span>
        <span class="nc">ServletLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">);</span>
        <span class="c1">// 模板编码:</span>
        <span class="n">loader</span><span class="o">.</span><span class="na">setCharset</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 模板前缀，这里默认模板必须放在`/WEB-INF/templates`目录:</span>
        <span class="n">loader</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates"</span><span class="o">);</span>
        <span class="c1">// 模板后缀:</span>
        <span class="n">loader</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="c1">// 创建Pebble实例:</span>
        <span class="k">this</span><span class="o">.</span><span class="na">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="c1">// 默认打开HTML字符转义，防止XSS攻击</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="c1">// 禁用缓存使得每次修改模板可以立刻看到效果</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="n">loader</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="nc">ModelAndView</span> <span class="n">mv</span><span class="o">,</span> <span class="nc">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// 查找模板:</span>
        <span class="nc">PebbleTemplate</span> <span class="n">template</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">engine</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getView</span><span class="o">());</span>
        <span class="c1">// 渲染:</span>
        <span class="n">template</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">writer</span><span class="o">,</span> <span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>存储页面URL和映射表：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ModelAndView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">view</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">getModel</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">model</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setModel</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getView</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setView</span><span class="o">(</span><span class="nc">String</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">view</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因此，返回值需要从<code class="language-plaintext highlighter-rouge">String</code>修改为<code class="language-plaintext highlighter-rouge">ModelAndView</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DispatcherServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Get</span><span class="o">&gt;</span> <span class="n">getMappings</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ViewEngine</span> <span class="n">viewEngine</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// todo 扫描注解</span>
        <span class="nc">Scan</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scan</span><span class="o">(</span><span class="s">"servlet2"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">getMappings</span><span class="o">=</span><span class="n">test</span><span class="o">.</span><span class="na">getGetMappings</span><span class="o">();</span>
        <span class="c1">// 模板引擎初始化</span>
        <span class="n">viewEngine</span><span class="o">=</span><span class="k">new</span> <span class="nc">ViewEngine</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 根据路径查找GetDispatcher:</span>
        <span class="nc">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">().</span><span class="na">length</span><span class="o">());</span>
        <span class="nc">Get</span> <span class="n">get</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getMappings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">get</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 未找到返回404:</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="mi">404</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">ModelAndView</span> <span class="n">mv</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">mv</span> <span class="o">=</span> <span class="n">get</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InvocationTargetException</span> <span class="o">|</span> <span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 允许返回null:</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">mv</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 允许返回`redirect:`开头的view表示重定向:</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getView</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"redirect:"</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getView</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="mi">9</span><span class="o">));</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 将模板引擎渲染的内容写入响应:</span>
        <span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewEngine</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">pw</span><span class="o">);</span>
        <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="nc">ModelAndView</span> <span class="n">modelAndView</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ModelAndView</span><span class="o">();</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span><span class="n">key</span><span class="o">);</span>
        <span class="n">modelAndView</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
        <span class="n">modelAndView</span><span class="o">.</span><span class="na">setView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">modelAndView</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">/WEB-INF/templates/test.html</code>内用双大括号引用变量<code class="language-plaintext highlighter-rouge">user</code>即：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/test?key=bob</code>正常使用。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry></feed>