<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://acteds.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://acteds.github.io/" rel="alternate" type="text/html" /><updated>2024-04-04T18:45:44+08:00</updated><id>https://acteds.github.io/feed.xml</id><title type="html">个人博客</title><subtitle></subtitle><author><name>acteds</name></author><entry><title type="html">Java反射、注解</title><link href="https://acteds.github.io/2024/04/04/%E5%8F%8D%E5%B0%84-%E6%B3%A8%E8%A7%A3/" rel="alternate" type="text/html" title="Java反射、注解" /><published>2024-04-04T00:00:00+08:00</published><updated>2024-04-04T00:00:00+08:00</updated><id>https://acteds.github.io/2024/04/04/%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3</id><content type="html" xml:base="https://acteds.github.io/2024/04/04/%E5%8F%8D%E5%B0%84-%E6%B3%A8%E8%A7%A3/"><![CDATA[<h1 id="引言">引言</h1>
<p>  java反射、注解部分笔记。</p>

<h1 id="反射">反射</h1>

<p>获取<strong>class</strong>的<strong>Class</strong>实例:</p>

<p>直接通过<strong>class</strong>的静态变量<strong>class</strong>获取：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</code></pre></div></div>

<p>通过实例变量提供的<code class="language-plaintext highlighter-rouge">getClass()</code>方法获取：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="o">;</span>
<span class="nc">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</code></pre></div></div>

<p>通过静态方法<code class="language-plaintext highlighter-rouge">Class.forName()</code>获取：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"java.lang.String"</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="class实例基本信息"><strong>Class实例基本信息:</strong></h2>

<table>
  <thead>
    <tr>
      <th>返回值</th>
      <th>方法名</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>String</td>
      <td>getName()</td>
      <td>返回类的完全限定名。</td>
    </tr>
    <tr>
      <td>String</td>
      <td>getSimpleName()</td>
      <td>返回类的简单名称，不包含包名部分。</td>
    </tr>
    <tr>
      <td>String</td>
      <td>getPackage().getName()</td>
      <td>返回类所在包的名称。</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>isInterface()</td>
      <td>判断是否为接口。</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>isEnum()</td>
      <td>判断是否为枚举类型。</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>isArray()</td>
      <td>判断是否为数组类型。</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>isPrimitive()</td>
      <td>判断是否为基本数据类型。</td>
    </tr>
    <tr>
      <td>Class</td>
      <td>getSuperclass()</td>
      <td>返回表示该类的父类的 Class 对象。</td>
    </tr>
    <tr>
      <td>int</td>
      <td>getModifiers()</td>
      <td>返回表示类或接口的 Java 语言修饰符的整数。例如，public、static 等修饰符。</td>
    </tr>
    <tr>
      <td>Class[]</td>
      <td>getInterfaces()</td>
      <td>返回一个包含表示<strong>该类</strong>实现的接口的 Class 对象的数组。(接口同理)</td>
    </tr>
    <tr>
      <td>ClassLoader</td>
      <td>getClassLoader()</td>
      <td>返回该类的类加载器。</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>isAssignableFrom(Class)</td>
      <td>判断当前 <code class="language-plaintext highlighter-rouge">Class</code> 对象所表示的类或接口与指定 <code class="language-plaintext highlighter-rouge">Class</code> 参数表示的类或接口是否相同，或是否是其超类或超接口。</td>
    </tr>
  </tbody>
</table>

<h2 id="访问字段的方法"><strong>访问字段的方法</strong></h2>

<table>
  <thead>
    <tr>
      <th>返回值</th>
      <th>方法名</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Field</td>
      <td>getField(String name)</td>
      <td>根据字段名获取某个public的field（包括父类继承）</td>
    </tr>
    <tr>
      <td>Field</td>
      <td>getDeclaredField(String name)</td>
      <td>根据字段名获取当前类的某个field（不包括父类继承）</td>
    </tr>
    <tr>
      <td>Field[]</td>
      <td>getFields()</td>
      <td>获取所有public的field（包括父类继承）</td>
    </tr>
    <tr>
      <td>Field[]</td>
      <td>getDeclaredFields()</td>
      <td>获取当前类的所有field（不包括父类继承）</td>
    </tr>
  </tbody>
</table>

<p>一个<code class="language-plaintext highlighter-rouge">Field</code>对象包含了一个字段的所有信息：</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">getName()</code>：返回字段名称，例如，<code class="language-plaintext highlighter-rouge">"name"</code>；</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">getType()</code>：返回字段类型，也是一个<code class="language-plaintext highlighter-rouge">Class</code>实例，例如，<code class="language-plaintext highlighter-rouge">String.class</code>；</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">getModifiers()</code>：返回字段的修饰符，它是一个<code class="language-plaintext highlighter-rouge">int</code>，不同的bit表示不同的含义。</p>
  </li>
</ul>

<p><strong>Field的方法</strong></p>

<table>
  <thead>
    <tr>
      <th>返回值</th>
      <th>方法名</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>void</td>
      <td>set(Object o,Object v)</td>
      <td>设置指定对象o上此 Field 表示的字段的值为v。</td>
    </tr>
    <tr>
      <td>Object</td>
      <td>get(Object o)</td>
      <td>返回指定对象o上此 Field 表示的字段的值。</td>
    </tr>
    <tr>
      <td>void</td>
      <td>setAccessible(boolean)</td>
      <td>将此对象的 accessible 标志设置为指示的布尔值。(设置true强行访问非公有字段)</td>
    </tr>
  </tbody>
</table>

<p>通过使用<code class="language-plaintext highlighter-rouge">Field</code>对象的<code class="language-plaintext highlighter-rouge">get(实例变量)</code>可以得到该<code class="language-plaintext highlighter-rouge">Fileld</code>对应的字段在指定实例变量的值</p>

<p>通过使用<code class="language-plaintext highlighter-rouge">Field</code>对象的<code class="language-plaintext highlighter-rouge">set(实例变量,新值)</code>可以设置该<code class="language-plaintext highlighter-rouge">Fileld</code>对应的字段在指定实例变量的值</p>

<p>默认是不允许访问<code class="language-plaintext highlighter-rouge">private</code>字段的,可以通过调用<code class="language-plaintext highlighter-rouge">Field</code>的<code class="language-plaintext highlighter-rouge">setAccessible(true)</code>实现访问。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.lang.reflect.Field</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Object</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Xiao Ming"</span><span class="o">);</span>
        <span class="nc">Class</span> <span class="n">c</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
        <span class="nc">Field</span> <span class="n">f</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="n">f</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">p</span><span class="o">));</span> <span class="c1">// "Xiao Ming"</span>
        <span class="n">f</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">p</span><span class="o">,</span><span class="s">"你好"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="访问方法的方法"><strong>访问方法的方法</strong></h2>

<table>
  <thead>
    <tr>
      <th>返回值</th>
      <th>方法名</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Method</td>
      <td>getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
      <td>获取某个<code class="language-plaintext highlighter-rouge">public</code>的<code class="language-plaintext highlighter-rouge">Method</code>（包括父类继承）name:方法名,parameterTypes:形式参数的Class</td>
    </tr>
    <tr>
      <td>Method</td>
      <td>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
      <td>获取当前类的某个<code class="language-plaintext highlighter-rouge">Method</code>（不包括父类继承）name:方法名,parameterTypes:形式参数的Class</td>
    </tr>
    <tr>
      <td>Method[]</td>
      <td>getMethods()</td>
      <td>获取所有<code class="language-plaintext highlighter-rouge">public</code>的<code class="language-plaintext highlighter-rouge">Method</code>（包括父类继承）</td>
    </tr>
    <tr>
      <td>Method[]</td>
      <td>getDeclaredMethods()</td>
      <td>获取当前类的所有<code class="language-plaintext highlighter-rouge">Method</code>（不包括父类继承）</td>
    </tr>
  </tbody>
</table>

<p>一个<code class="language-plaintext highlighter-rouge">Method</code>对象包含一个方法的所有信息：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getName()</code>：返回方法名称，例如：<code class="language-plaintext highlighter-rouge">"getScore"</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">getReturnType()</code>：返回方法返回值类型，也是一个Class实例，例如：<code class="language-plaintext highlighter-rouge">String.class</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">getParameterTypes()</code>：返回方法的参数类型，是一个Class数组，例如：<code class="language-plaintext highlighter-rouge">{String.class, int.class}</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">getModifiers()</code>：返回方法的修饰符，它是一个<code class="language-plaintext highlighter-rouge">int</code>，不同的bit表示不同的含义。</li>
</ul>

<p><strong>Method的方法</strong></p>

<table>
  <thead>
    <tr>
      <th>返回值</th>
      <th>方法名</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td>invoke(Object o,Object …arg)</td>
      <td>调用指定对象o上此 Method表示的方法,方法的形式参数为arg。若为静态方法,则o设置为null,</td>
    </tr>
    <tr>
      <td>void</td>
      <td>setAccessible(boolean b)</td>
      <td>将此对象的 accessible 标志设置为指示的布尔值。(设置true强行访问非公有方法)</td>
    </tr>
  </tbody>
</table>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// String对象:</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"Hello world"</span><span class="o">;</span>
<span class="c1">// 获取String substring(int)方法，参数为int:</span>
<span class="nc">Method</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"substring"</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="c1">// 在s对象上调用该方法并获取结果:</span>
<span class="nc">String</span> <span class="n">r</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">m</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>
<span class="c1">// 打印调用结果:</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="访问构造方法的方法">访问构造方法的方法</h2>

<table>
  <thead>
    <tr>
      <th>返回值</th>
      <th>方法名</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Object</td>
      <td>newInstance()</td>
      <td>只能调用公有的无参数构造方法。</td>
    </tr>
    <tr>
      <td>Constructor</td>
      <td>getConstructor(Class … arg)</td>
      <td>获取指定类的指定<strong>公有</strong>构造方法,arg为形式参数.</td>
    </tr>
    <tr>
      <td>Constructor</td>
      <td>getDeclaredConstructor(Class… arg)</td>
      <td>获取指定类的构造方法,arg为形式参数.</td>
    </tr>
    <tr>
      <td>Constructor[]</td>
      <td>getConstructors()</td>
      <td>返回该类的所有<strong>公有</strong>构造方法。</td>
    </tr>
    <tr>
      <td>Constructor[]</td>
      <td>getDeclaredConstructors()</td>
      <td>返回该类的所有构造方法。</td>
    </tr>
  </tbody>
</table>

<p><strong>Constructor 的方法</strong></p>

<table>
  <thead>
    <tr>
      <th>返回值</th>
      <th>方法名</th>
      <th>作用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Object</td>
      <td>newInstance(Object …arg)</td>
      <td>调用构造方法,参数为arg。</td>
    </tr>
    <tr>
      <td>void</td>
      <td>setAccessible(boolean b)</td>
      <td>将此对象的 accessible 标志设置为指示的布尔值。(设置true强行访问非公有方法)</td>
    </tr>
  </tbody>
</table>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取String的Class实例:String s=new Stirng();</span>
<span class="nc">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
<span class="c1">// 调用构造方法:</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">cls</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="c1">// 获取构造方法Integer(int):Integer n1=new Integer(123);</span>
<span class="nc">Constructor</span> <span class="n">cons1</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="c1">// 调用构造方法:</span>
<span class="nc">Integer</span> <span class="n">n1</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">cons1</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="mi">123</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n1</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="动态代理">动态代理</h2>

<p>有没有可能不编写实现类，直接在运行期创建某个<code class="language-plaintext highlighter-rouge">interface</code>的实例呢？</p>

<p>这是可能的，因为Java标准库提供了一种动态代理（Dynamic Proxy）的机制：可以在运行期动态创建某个<code class="language-plaintext highlighter-rouge">interface</code>的实例。</p>

<p>什么叫运行期动态创建？听起来好像很复杂。所谓动态代理，是和静态相对应的。我们来看静态代码怎么写：</p>

<p>定义接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Hello</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">morning</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写实现类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="kd">implements</span> <span class="nc">Hello</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">morning</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Good morning, "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>创建实例，转型为接口并调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Hello</span> <span class="n">hello</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HelloWorld</span><span class="o">();</span>
<span class="n">hello</span><span class="o">.</span><span class="na">morning</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">);</span>
</code></pre></div></div>

<p>这种方式就是我们通常编写代码的方式。</p>

<p>还有一种方式是动态代码，我们仍然先定义了接口<code class="language-plaintext highlighter-rouge">Hello</code>，但是我们并不去编写实现类，而是直接通过JDK提供的一个<code class="language-plaintext highlighter-rouge">Proxy.newProxyInstance()</code>创建了一个<code class="language-plaintext highlighter-rouge">Hello</code>接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p>

<p>一个最简单的动态代理实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Proxy</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">InvocationHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InvocationHandler</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"morning"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Good morning, "</span> <span class="o">+</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">Hello</span> <span class="n">hello</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Hello</span><span class="o">)</span> <span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span>
            <span class="nc">Hello</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="c1">// 传入ClassLoader</span>
            <span class="k">new</span> <span class="nc">Class</span><span class="o">[]</span> <span class="o">{</span> <span class="nc">Hello</span><span class="o">.</span><span class="na">class</span> <span class="o">},</span> <span class="c1">// 传入要实现的接口</span>
            <span class="n">handler</span><span class="o">);</span> <span class="c1">// 传入处理调用方法的InvocationHandler</span>
        <span class="n">hello</span><span class="o">.</span><span class="na">morning</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">Hello</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">morning</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在运行期动态创建一个<code class="language-plaintext highlighter-rouge">interface</code>实例的方法如下：</p>

<ol>
  <li>
    <p>定义一个<code class="language-plaintext highlighter-rouge">InvocationHandler</code>实例，它负责实现接口的方法调用；</p>
  </li>
  <li>
    <p>通过</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">()</span>
</code></pre></div>    </div>

    <p>创建</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span>
</code></pre></div>    </div>

    <p>实例，它需要3个参数：</p>

    <ol>
      <li>使用的<code class="language-plaintext highlighter-rouge">ClassLoader</code>，通常就是接口类的<code class="language-plaintext highlighter-rouge">ClassLoader</code>；</li>
      <li>需要实现的接口数组，至少需要传入一个接口进去；</li>
      <li>用来处理接口方法调用的<code class="language-plaintext highlighter-rouge">InvocationHandler</code>实例。</li>
    </ol>
  </li>
  <li>
    <p>将返回的<code class="language-plaintext highlighter-rouge">Object</code>强制转型为接口。</p>
  </li>
</ol>

<p>动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，它并没有什么黑魔法，把上面的动态代理改写为静态实现类大概长这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloDynamicProxy</span> <span class="kd">implements</span> <span class="nc">Hello</span> <span class="o">{</span>
    <span class="nc">InvocationHandler</span> <span class="n">handler</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">HelloDynamicProxy</span><span class="o">(</span><span class="nc">InvocationHandler</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">handler</span> <span class="o">=</span> <span class="n">handler</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">morning</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">handler</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span>
           <span class="k">this</span><span class="o">,</span>
           <span class="nc">Hello</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"morning"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
           <span class="k">new</span> <span class="nc">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="n">name</span> <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其实就是JVM帮我们自动编写了一个上述类（不需要源码，可以直接生成字节码），并不存在可以直接实例化接口的黑魔法。</p>

<h1 id="注解">注解</h1>

<p>注解是放在Java源码的类、方法、字段、参数前的一种特殊“注释”。注释会被编译器直接忽略，注解则可以被编译器打包进入class文件，因此，注解是一种用作标注的“元数据”。</p>

<p>Java的注解可以分为三类：</p>

<p>第一类是由编译器使用的注解，例如：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Override</code>：让编译器检查该方法是否正确地实现了覆写；</li>
  <li><code class="language-plaintext highlighter-rouge">@SuppressWarnings</code>：告诉编译器忽略此处代码产生的警告。</li>
</ul>

<p>这类注解不会被编译进入<code class="language-plaintext highlighter-rouge">.class</code>文件，它们在编译后就被编译器扔掉了。</p>

<p>第二类是由工具处理<code class="language-plaintext highlighter-rouge">.class</code>文件使用的注解，比如有些工具会在加载class的时候，对class做动态修改，实现一些特殊的功能。这类注解会被编译进入<code class="language-plaintext highlighter-rouge">.class</code>文件，但加载结束后并不会存在于内存中。这类注解只被一些底层库使用，一般我们不必自己处理。</p>

<p>第三类是在程序运行期能够读取的注解，它们在加载后一直存在于JVM中，这也是最常用的注解。例如，一个配置了<code class="language-plaintext highlighter-rouge">@PostConstruct</code>的方法会在调用构造方法后自动被调用（这是Java代码读取该注解实现的功能，JVM并不会识别该注解）。</p>

<p>定义一个注解时，还可以定义配置参数。配置参数可以包括：</p>

<ul>
  <li>所有基本类型；</li>
  <li>String；</li>
  <li>枚举类型；</li>
  <li>基本类型、String、Class以及枚举的数组。</li>
</ul>

<p>因为配置参数必须是常量，所以，上述限制保证了注解在定义时就已经确定了每个参数的值。</p>

<p>注解的配置参数可以有默认值，缺少某个配置参数时将使用默认值。</p>

<p>此外，大部分注解会有一个名为<code class="language-plaintext highlighter-rouge">value</code>的配置参数，对此参数赋值，可以只写常量，相当于省略了value参数。即从<code class="language-plaintext highlighter-rouge">@Check(value=99)</code>省略为<code class="language-plaintext highlighter-rouge">@check(99)</code>。</p>

<h2 id="定义注解">定义注解</h2>

<p>Java语言使用<code class="language-plaintext highlighter-rouge">@interface</code>语法来定义注解（<code class="language-plaintext highlighter-rouge">Annotation</code>），它的格式如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Report</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">type</span><span class="o">()</span> <span class="k">default</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nc">String</span> <span class="nf">level</span><span class="o">()</span> <span class="k">default</span> <span class="s">"info"</span><span class="o">;</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注解的参数类似无参数方法，可以用<code class="language-plaintext highlighter-rouge">default</code>设定一个默认值（强烈推荐）。最常用的参数应当命名为<code class="language-plaintext highlighter-rouge">value</code>。</p>

<h3 id="元注解">元注解</h3>

<p>有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。</p>

<h4 id="target">@Target</h4>

<p>最常用的元注解是<code class="language-plaintext highlighter-rouge">@Target</code>。使用<code class="language-plaintext highlighter-rouge">@Target</code>可以定义<code class="language-plaintext highlighter-rouge">Annotation</code>能够被应用于源码的哪些位置：</p>

<ul>
  <li>类或接口：<code class="language-plaintext highlighter-rouge">ElementType.TYPE</code>；</li>
  <li>字段：<code class="language-plaintext highlighter-rouge">ElementType.FIELD</code>；</li>
  <li>方法：<code class="language-plaintext highlighter-rouge">ElementType.METHOD</code>；</li>
  <li>构造方法：<code class="language-plaintext highlighter-rouge">ElementType.CONSTRUCTOR</code>；</li>
  <li>方法参数：<code class="language-plaintext highlighter-rouge">ElementType.PARAMETER</code>。</li>
</ul>

<p>例如，定义注解<code class="language-plaintext highlighter-rouge">@Report</code>可用在方法上，我们必须添加一个<code class="language-plaintext highlighter-rouge">@Target(ElementType.METHOD)</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Report</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">type</span><span class="o">()</span> <span class="k">default</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nc">String</span> <span class="nf">level</span><span class="o">()</span> <span class="k">default</span> <span class="s">"info"</span><span class="o">;</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>定义注解<code class="language-plaintext highlighter-rouge">@Report</code>可用在方法或字段上，可以把<code class="language-plaintext highlighter-rouge">@Target</code>注解参数变为数组<code class="language-plaintext highlighter-rouge">{ ElementType.METHOD, ElementType.FIELD }</code>：</p>

<p>实际上<code class="language-plaintext highlighter-rouge">@Target</code>定义的<code class="language-plaintext highlighter-rouge">value</code>是<code class="language-plaintext highlighter-rouge">ElementType[]</code>数组，只有一个元素时，可以省略数组的写法。</p>

<h4 id="retention">@Retention</h4>

<p>另一个重要的元注解<code class="language-plaintext highlighter-rouge">@Retention</code>定义了<code class="language-plaintext highlighter-rouge">Annotation</code>的生命周期：</p>

<ul>
  <li>仅编译期：<code class="language-plaintext highlighter-rouge">RetentionPolicy.SOURCE</code>；</li>
  <li>仅class文件：<code class="language-plaintext highlighter-rouge">RetentionPolicy.CLASS</code>；</li>
  <li>运行期：<code class="language-plaintext highlighter-rouge">RetentionPolicy.RUNTIME</code>。</li>
</ul>

<p>如果<code class="language-plaintext highlighter-rouge">@Retention</code>不存在，则该<code class="language-plaintext highlighter-rouge">Annotation</code>默认为<code class="language-plaintext highlighter-rouge">CLASS</code>。因为通常我们自定义的<code class="language-plaintext highlighter-rouge">Annotation</code>都是<code class="language-plaintext highlighter-rouge">RUNTIME</code>，所以，务必要加上<code class="language-plaintext highlighter-rouge">@Retention(RetentionPolicy.RUNTIME)</code>这个元注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Report</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">type</span><span class="o">()</span> <span class="k">default</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nc">String</span> <span class="nf">level</span><span class="o">()</span> <span class="k">default</span> <span class="s">"info"</span><span class="o">;</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="repeatable">@Repeatable</h4>

<p>使用<code class="language-plaintext highlighter-rouge">@Repeatable</code>这个元注解可以定义<code class="language-plaintext highlighter-rouge">Annotation</code>是否可重复。这个注解应用不是特别广泛。<code class="language-plaintext highlighter-rouge">@Reports</code>是一个容器注解，用来包裹多个<code class="language-plaintext highlighter-rouge">@Report</code>注解。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repeatable</span><span class="o">(</span><span class="nc">Reports</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Report</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">type</span><span class="o">()</span> <span class="k">default</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nc">String</span> <span class="nf">level</span><span class="o">()</span> <span class="k">default</span> <span class="s">"info"</span><span class="o">;</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>
<span class="o">}</span>

<span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Reports</span> <span class="o">{</span>
    <span class="nc">Report</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>经过<code class="language-plaintext highlighter-rouge">@Repeatable</code>修饰后，在某个类型声明处，就可以添加多个<code class="language-plaintext highlighter-rouge">@Report</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Report</span><span class="o">(</span><span class="n">type</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">level</span><span class="o">=</span><span class="s">"debug"</span><span class="o">)</span>
<span class="nd">@Report</span><span class="o">(</span><span class="n">type</span><span class="o">=</span><span class="mi">2</span><span class="o">,</span> <span class="n">level</span><span class="o">=</span><span class="s">"warning"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="inherited">@Inherited</h4>

<p>使用<code class="language-plaintext highlighter-rouge">@Inherited</code>定义子类是否可继承父类定义的<code class="language-plaintext highlighter-rouge">Annotation</code>。<code class="language-plaintext highlighter-rouge">@Inherited</code>仅针对<code class="language-plaintext highlighter-rouge">@Target(ElementType.TYPE)</code>类型的<code class="language-plaintext highlighter-rouge">annotation</code>有效，并且仅针对<code class="language-plaintext highlighter-rouge">class</code>的继承，对<code class="language-plaintext highlighter-rouge">interface</code>的继承无效。</p>

<h2 id="处理注解">处理注解</h2>

<p>Java的注解本身对代码逻辑没有任何影响。根据<code class="language-plaintext highlighter-rouge">@Retention</code>的配置：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SOURCE</code>类型的注解在编译期就被丢掉了；</li>
  <li><code class="language-plaintext highlighter-rouge">CLASS</code>类型的注解仅保存在class文件中，它们不会被加载进JVM；</li>
  <li><code class="language-plaintext highlighter-rouge">RUNTIME</code>类型的注解会被加载进JVM，并且在运行期可以被程序读取。</li>
</ul>

<p>如何使用注解完全由工具决定。<code class="language-plaintext highlighter-rouge">SOURCE</code>类型的注解主要由编译器使用，因此我们一般只使用，不编写。<code class="language-plaintext highlighter-rouge">CLASS</code>类型的注解主要由底层工具库使用，涉及到class的加载，一般我们很少用到。只有<code class="language-plaintext highlighter-rouge">RUNTIME</code>类型的注解不但要使用，还经常需要编写。</p>

<p>因此，我们只讨论如何读取<code class="language-plaintext highlighter-rouge">RUNTIME</code>类型的注解。</p>

<p>因为注解定义后也是一种<code class="language-plaintext highlighter-rouge">class</code>，所有的注解都继承自<code class="language-plaintext highlighter-rouge">java.lang.annotation.Annotation</code>，因此，读取注解，需要使用反射API。</p>

<p>Java提供的使用反射API读取<code class="language-plaintext highlighter-rouge">Annotation</code>的方法包括：</p>

<p>判断某个注解是否存在于<code class="language-plaintext highlighter-rouge">Class</code>、<code class="language-plaintext highlighter-rouge">Field</code>、<code class="language-plaintext highlighter-rouge">Method</code>或<code class="language-plaintext highlighter-rouge">Constructor</code>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Class.isAnnotationPresent(Class)</code></li>
  <li><code class="language-plaintext highlighter-rouge">Field.isAnnotationPresent(Class)</code></li>
  <li><code class="language-plaintext highlighter-rouge">Method.isAnnotationPresent(Class)</code></li>
  <li><code class="language-plaintext highlighter-rouge">Constructor.isAnnotationPresent(Class)</code></li>
</ul>

<p>例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 判断@Report是否存在于Person类:</span>
<span class="nc">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">isAnnotationPresent</span><span class="o">(</span><span class="nc">Report</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p>使用反射API读取Annotation：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Class.getAnnotation(Class)</code></li>
  <li><code class="language-plaintext highlighter-rouge">Field.getAnnotation(Class)</code></li>
  <li><code class="language-plaintext highlighter-rouge">Method.getAnnotation(Class)</code></li>
  <li><code class="language-plaintext highlighter-rouge">Constructor.getAnnotation(Class)</code></li>
</ul>

<p>例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取Person定义的@Report注解:</span>
<span class="nc">Report</span> <span class="n">report</span> <span class="o">=</span> <span class="nc">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="nc">Report</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">type</span> <span class="o">=</span> <span class="n">report</span><span class="o">.</span><span class="na">type</span><span class="o">();</span>
<span class="nc">String</span> <span class="n">level</span> <span class="o">=</span> <span class="n">report</span><span class="o">.</span><span class="na">level</span><span class="o">();</span>
</code></pre></div></div>

<p>读取方法、字段和构造方法的<code class="language-plaintext highlighter-rouge">Annotation</code>和Class类似。但要读取方法参数的<code class="language-plaintext highlighter-rouge">Annotation</code>就比较麻烦一点，因为方法参数本身可以看成一个数组，而每个参数又可以定义多个注解，所以，一次获取方法参数的所有注解就必须用一个二维数组来表示。例如，对于以下方法定义的注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(</span><span class="nd">@NotNull</span> <span class="nd">@Range</span><span class="o">(</span><span class="n">max</span><span class="o">=</span><span class="mi">5</span><span class="o">)</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="nc">String</span> <span class="n">prefix</span><span class="o">)</span> <span class="o">{}</span>
</code></pre></div></div>

<p>要读取方法参数的注解，先用反射获取<code class="language-plaintext highlighter-rouge">Method</code>实例，然后读取方法参数的所有注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取Method实例:</span>
<span class="nc">Method</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">Main</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"hello"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="c1">// 获取所有参数的Annotation:</span>
<span class="nc">Annotation</span><span class="o">[][]</span> <span class="n">annos</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">getParameterAnnotations</span><span class="o">();</span>
<span class="c1">// 第一个参数（索引为0）的所有Annotation:</span>
<span class="nc">Annotation</span><span class="o">[]</span> <span class="n">annosOfName</span> <span class="o">=</span> <span class="n">annos</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Annotation</span> <span class="n">anno</span> <span class="o">:</span> <span class="n">annosOfName</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">anno</span> <span class="k">instanceof</span> <span class="nc">Range</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Range</span> <span class="n">r</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Range</span><span class="o">)</span> <span class="n">anno</span><span class="o">;</span> <span class="c1">// @Range注解</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%d"</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">max</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">anno</span> <span class="k">instanceof</span> <span class="nc">NotNull</span><span class="o">)</span> <span class="o">{</span>
         <span class="nc">NotNull</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="nc">NotNull</span><span class="o">)</span> <span class="n">anno</span><span class="o">;</span> <span class="c1">// @NotNull注解</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"已捕获NotNull"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="尝试手搓notnull-range">尝试手搓<strong>@NotNull @Range</strong></h2>

<p>但对于方法的形式参数，Java的反射机制并不能直接获取参数的值,因此失败了。如果需要在方法运行时对参数进行检查，可以使用面向切面编程（AOP）结合反射来实现。</p>

<p>不过对于对象的字段，可以直接通过反射获取字段的值，并进行判断。但要注意判断的时机需要另外的事件来触发。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Field</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">MyClass</span> <span class="n">myClass</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyClass</span><span class="o">();</span>
        <span class="n">checkField</span><span class="o">(</span><span class="n">myClass</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">checkField</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Field</span><span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredFields</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Annotation</span><span class="o">[]</span> <span class="n">annotations</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">getAnnotations</span><span class="o">();</span>
                <span class="nc">NotNull</span> <span class="n">n</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Annotation</span> <span class="n">annotation</span> <span class="o">:</span> <span class="n">annotations</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Annotation</span><span class="o">&gt;</span> <span class="n">aClass</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">.</span><span class="na">annotationType</span><span class="o">();</span>
                    <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
                    <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>

                    <span class="k">if</span> <span class="o">(</span><span class="n">aClass</span> <span class="o">==</span> <span class="nc">NotNull</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">n</span> <span class="o">=</span> <span class="n">notNullDispose</span><span class="o">((</span><span class="nc">NotNull</span><span class="o">)</span> <span class="n">annotation</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
                    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">aClass</span> <span class="o">==</span> <span class="nc">Range</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">rangeDispose</span><span class="o">(</span><span class="n">field</span><span class="o">,</span> <span class="o">(</span><span class="nc">Range</span><span class="o">)</span> <span class="n">annotation</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">rangeDispose</span><span class="o">(</span><span class="nc">Field</span> <span class="n">field</span><span class="o">,</span> <span class="nc">Range</span> <span class="n">annotation</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="nc">NotNull</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">String</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">annotation</span><span class="o">.</span><span class="na">min</span><span class="o">()</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">annotation</span><span class="o">.</span><span class="na">max</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">text</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">value</span><span class="o">()</span> <span class="o">+</span> <span class="s">"="</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="s">" 无效,长度必须不小于:"</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">.</span><span class="na">min</span><span class="o">()</span> <span class="o">+</span> <span class="s">",不大于:"</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">.</span><span class="na">max</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">text</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"="</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="s">" 无效,长度必须不小于:"</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">.</span><span class="na">min</span><span class="o">()</span> <span class="o">+</span> <span class="s">",不大于:"</span> <span class="o">+</span> <span class="n">annotation</span><span class="o">.</span><span class="na">max</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
<span class="c1">//              throw new IllegalArgumentException(text);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">NotNull</span> <span class="nf">notNullDispose</span><span class="o">(</span><span class="nc">NotNull</span> <span class="n">annotation</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">NotNull</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">annotation</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">value</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 不能为空"</span><span class="o">);</span>
<span class="c1">//          throw new IllegalArgumentException(n.value() + " 不能为空");</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
    <span class="nd">@NotNull</span><span class="o">(</span><span class="s">"名称"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="nd">@NotNull</span><span class="o">(</span><span class="s">"地址"</span><span class="o">)</span>
    <span class="nd">@Range</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">5</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">address</span> <span class="o">=</span> <span class="s">"123456"</span><span class="o">;</span>
<span class="o">}</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">({</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">})</span>
<span class="nd">@interface</span> <span class="nc">NotNull</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>
<span class="o">}</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">({</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">})</span>
<span class="nd">@interface</span> <span class="nc">Range</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">min</span><span class="o">()</span> <span class="k">default</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kt">int</span> <span class="nf">max</span><span class="o">()</span> <span class="k">default</span> <span class="mi">255</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Git推送到Github的一些设置</title><link href="https://acteds.github.io/2024/01/25/git%E5%90%8C%E6%AD%A5%E5%88%B0github%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/" rel="alternate" type="text/html" title="Git推送到Github的一些设置" /><published>2024-01-25T00:00:00+08:00</published><updated>2024-01-25T00:00:00+08:00</updated><id>https://acteds.github.io/2024/01/25/git%E5%90%8C%E6%AD%A5%E5%88%B0github%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE</id><content type="html" xml:base="https://acteds.github.io/2024/01/25/git%E5%90%8C%E6%AD%A5%E5%88%B0github%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"><![CDATA[<h2 id="引言">引言</h2>
<p>  记录一些通常设置。</p>

<h2 id="详解">详解</h2>
<ul>
  <li>下载<a href="https://git-scm.com/downloads">Git</a></li>
  <li>设置Git环境变量</li>
  <li>配置SSH，完成GitHub身份验证<br />
  终端输入：<code class="language-plaintext highlighter-rouge">ssh-keygen -t rsa -C 邮箱地址</code>，邮箱地址为GitHub的邮箱地址。<br />
  找到公钥文件(id_rsa.pub)，打开文件,复制内容<br />
  在GitHub上添加SSH keys(头像-Settings-SSH and GPG keys-New SSH key)，标题随便，key内填公钥内容。</li>
  <li>验证是否成功：<code class="language-plaintext highlighter-rouge">ssh -T git@github.com</code><br />
  若出现ssh: connect to host github.com port 22: Connection timed out<br />
  可以尝试修改SSH主机名：<br />
  在.ssh文件夹中新建config文件，无扩展名，并写入以下内容：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host github.com
User 你的GitHub账号名称或邮箱地址
Hostname ssh.github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
Port 443
</code></pre></div>    </div>
    <p>  重新验证是否成功：<code class="language-plaintext highlighter-rouge">ssh -T git@github.com</code><br />
  输入yes即可。</p>
  </li>
</ul>

<h2 id="额外操作">额外操作</h2>
<p>  在使用 Git 进行代码托管和版本控制的过程中，如果你想在提交代码时被正确的识别和归属，那么需要设置正确的 Git 邮箱地址。如果不设置邮箱，那么提交代码的作者将会是默认的 Git 用户，这会导致代码历史不可读，并且无法更好地识别谁提交的代码。<br />
  配置 git config：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global user.name github_name
git config --global user.email github_email
</code></pre></div></div>
<p>  显示带有颜色和图形的 Git 日志：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"
</code></pre></div></div>
<p>  参数解析：</p>
<ul>
  <li>–color： 启用彩色输出。</li>
  <li>–graph： 以图形的方式展示分支和合并历史。</li>
  <li>–pretty=format： 定制输出格式，使用一系列的占位符表示不同的信息。</li>
  <li>%Cred%h%Creset： 以红色显示短的提交哈希。</li>
  <li>-%C(yellow)%d%Creset： 显示分支和标签信息，并使用黄色。</li>
  <li>%s： 显示提交信息。</li>
  <li>%Cgreen(%cr)%Creset： 以绿色显示相对的提交时间。</li>
  <li>%C(bold blue)&lt;%an&gt;%Creset： 以粗体蓝色显示作者。</li>
</ul>

<p>  全局配置文件在用户根目录下的.gitconfig文件，也可直接修改这个文件进行配置<br />
  若只想作用于单个仓库，只需要去掉–global参数<br />
   单个仓库配置文件在.git/config文件。</p>
<h2 id="推送代码">推送代码</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git add .
git commit -m "init"
git remote add github git@github.com:[id]/[库名].git
git push -u origin [远程分支名]
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="Git" /><category term="GitHub" /><summary type="html"><![CDATA[Git推送到Github的一些设置]]></summary></entry><entry><title type="html">更新IDEA并保留所有兼容的设置</title><link href="https://acteds.github.io/2024/01/24/%E6%9B%B4%E6%96%B0IDEA%E5%B9%B6%E4%BF%9D%E7%95%99%E6%89%80%E6%9C%89%E5%85%BC%E5%AE%B9%E7%9A%84%E8%AE%BE%E7%BD%AE/" rel="alternate" type="text/html" title="更新IDEA并保留所有兼容的设置" /><published>2024-01-24T00:00:00+08:00</published><updated>2024-01-24T00:00:00+08:00</updated><id>https://acteds.github.io/2024/01/24/%E6%9B%B4%E6%96%B0IDEA%E5%B9%B6%E4%BF%9D%E7%95%99%E6%89%80%E6%9C%89%E5%85%BC%E5%AE%B9%E7%9A%84%E8%AE%BE%E7%BD%AE</id><content type="html" xml:base="https://acteds.github.io/2024/01/24/%E6%9B%B4%E6%96%B0IDEA%E5%B9%B6%E4%BF%9D%E7%95%99%E6%89%80%E6%9C%89%E5%85%BC%E5%AE%B9%E7%9A%84%E8%AE%BE%E7%BD%AE/"><![CDATA[<h2 id="引言">引言</h2>
<p>  更新IDEA并不是一个好的想法，因为很容易出现兼容性问题，在此次更新到最新版中消耗我时间最多的是将不兼容的插件找一个平替插件。  <br />
  此次更新前版本为2019.3.3，更新后版本为2023.3.2。<br />
  也会说一下我的常用配置。</p>

<h2 id="详解">详解</h2>
<ol>
  <li>下载<a href="https://www.jetbrains.com/idea/download/">官方.zip</a></li>
  <li>解压到合适的文件夹(我这里是D:\ideaIU-2023.3.2\)</li>
  <li>修改配置文件：<code class="language-plaintext highlighter-rouge">D:\ideaIU-2023.3.2\bin\idea.properties</code>
    <ul>
      <li>此处设置将配置文件移入程序目录，若不设置则配置文件会出现在用户文件夹。
        <div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">idea.config.path</span><span class="p">=</span><span class="s">${idea.home.path}/.IntelliJIdea2023.3.2/config</span>
<span class="py">idea.system.path</span><span class="p">=</span><span class="s">${idea.home.path}/.IntelliJIdea2023.3.2/system</span>
<span class="py">idea.plugins.path</span><span class="p">=</span><span class="s">${idea.config.path}/plugins</span>
<span class="py">idea.log.path</span><span class="p">=</span><span class="s">${idea.system.path}/log</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>修改VM文件：<code class="language-plaintext highlighter-rouge">D:\ideaIU-2023.3.2\bin\idea64.exe.vmoptions</code>
    <ul>
      <li>比如设置打开项目时的默认路径：
        <div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">-Duser.home</span><span class="p">=</span><span class="s">D:</span><span class="se">\i</span><span class="s">deaIU-2023.3.2</span><span class="se">\I</span><span class="s">deaProjects</span><span class="se">\
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>复制老项目到新项目文件</li>
  <li>打开新版<code class="language-plaintext highlighter-rouge">IDEA:D:\ideaIU-2023.3.2\bin\idea64.exe</code></li>
  <li>随便打开一个项目。</li>
  <li>导入设置：
    <ul>
      <li>文件-管理IDE设置-导入设置</li>
      <li>找到老的设置文件夹，例如：<code class="language-plaintext highlighter-rouge">C:\Users\{你的用户名}\.IntelliJIdea2019.3\config</code></li>
      <li>点击确认。</li>
    </ul>
  </li>
  <li>完成了。</li>
</ol>

<h2 id="注意">注意</h2>
<p>  在使用这个方法前我使用过在老版导出全部设置，然后在新版导入全部设置。但还是有大部分设置没有被导入，最致命的是配色方案没有被导入，配色方案还是单独备份一下比较好。<br />
  而使用我这个方法可以导入大部分的设置高亮以及插件，若插件不兼容则IDEA不会把插件导入新版。因为两个版本都在，因此可以对比插件找平替了，用不习惯或者出现问题也可以直接用老版。</p>
<h2 id="常用设置">常用设置</h2>
<ol>
  <li>字体没有成功导入，需要手动修改：设置-编辑器-字体-Consolas</li>
  <li>版本控制提交栏调出来：设置-版本控制-使用非模式提交界面</li>
</ol>

<h2 id="插件平替增强">插件平替增强</h2>
<ol>
  <li>设置背景图片现在不用插件<a href="https://plugins.jetbrains.com/plugin/8502-background-image-plus">Background Image Plus</a>了:设置-外观-UI选项-背景图片…</li>
  <li><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">Alibaba Java Coding Guidelines</a> —- <a href="https://plugins.jetbrains.com/plugin/22381-alibaba-java-coding-guidelines-fix-some-bug-">Alibaba Java Coding Guidelines(Fix Some Bug)</a></li>
  <li><a href="https://plugins.jetbrains.com/plugin/7275-codeglance">CodeGlance</a> —- <a href="https://plugins.jetbrains.com/plugin/18824-codeglance-pro">CodeGlance Pro</a></li>
  <li><a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">Free MyBatis plugin</a> —- <a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">MyBatisX</a></li>
  <li><a href="https://plugins.jetbrains.com/plugin/7654-gsonformat">GsonFormat</a> —- <a href="https://plugins.jetbrains.com/plugin/20094-gsonformat">Gsonformat</a></li>
  <li><a href="https://plugins.jetbrains.com/plugin/10465-highlightbracketpair">HighlightBracketPair</a> —- <a href="https://plugins.jetbrains.com/plugin/17320-highlightbracketpair">HighlightBracketPair</a></li>
  <li><a href="https://plugins.jetbrains.com/plugin/8554-ide-features-trainer">IDE Features Trainer</a> —- 插件正常兼容</li>
  <li><a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x">Key Promoter X</a> —- 插件正常兼容</li>
  <li><a href="https://plugins.jetbrains.com/plugin/6317-lombok">Lombok</a> —- 插件正常兼容</li>
  <li><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">Maven Helper</a> —- 插件正常兼容</li>
  <li><a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">Rainbow Brackets</a> —- <a href="https://plugins.jetbrains.com/plugin/20710-rainbow-brackets-lite--free-and-opensource">Rainbow Brackets Lite-Free and OpenSource</a></li>
  <li><a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">SequenceDiagram</a> —- 插件正常兼容</li>
  <li><a href="https://plugins.jetbrains.com/plugin/4509-statistic">Statistic</a> —- 插件正常兼容</li>
  <li><a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion--chat-in-java-js-ts-python--more">Tabnine: AI Code Completion &amp; Chat in Java JS/TS Python &amp; More</a> —- 插件正常兼容</li>
  <li><a href="https://plugins.jetbrains.com/plugin/8579-translation">Translation</a> —- 插件正常兼容</li>
  <li><a href="https://plugins.jetbrains.com/plugin/9442-vue-js">Vue.js</a> —- 插件正常兼容</li>
</ol>

<p>  力荐插件:</p>
<ol>
  <li><a href="https://plugins.jetbrains.com/plugin/18553-show-comment">Show Comment</a></li>
  <li><a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">Chinese(Simplified)Language Pack/中文语言包</a></li>
</ol>]]></content><author><name>acteds</name></author><category term="IDEA" /><summary type="html"><![CDATA[更新IDEA并保留所有兼容的设置]]></summary></entry><entry><title type="html">在高版本安卓系统上安装证书的办法</title><link href="https://acteds.github.io/2024/01/13/%E5%9C%A8%E9%AB%98%E7%89%88%E6%9C%AC%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6%E7%9A%84%E5%8A%9E%E6%B3%95/" rel="alternate" type="text/html" title="在高版本安卓系统上安装证书的办法" /><published>2024-01-13T00:00:00+08:00</published><updated>2024-01-13T00:00:00+08:00</updated><id>https://acteds.github.io/2024/01/13/%E5%9C%A8%E9%AB%98%E7%89%88%E6%9C%AC%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6%E7%9A%84%E5%8A%9E%E6%B3%95</id><content type="html" xml:base="https://acteds.github.io/2024/01/13/%E5%9C%A8%E9%AB%98%E7%89%88%E6%9C%AC%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6%E7%9A%84%E5%8A%9E%E6%B3%95/"><![CDATA[<h2 id="引言">引言</h2>
<p>  若有抓包需求,则必须安装证书,但Android7.0之后默认不信任用户添加到系统的CA证书.</p>

<h2 id="详解">详解</h2>
<h3 id="导出证书">导出证书</h3>
<p>  就拿<a href="https://www.charlesproxy.com/">Charles</a>举例：导出pem证书:Help-SSL Proxying-Save Charles Root Certificate…,名称假定为<strong>name.pem</strong></p>

<h3 id="修改名称">修改名称</h3>
<p>  使用<a href="https://slproweb.com/products/Win32OpenSSL.html">openssl</a>.</p>
<ul>
  <li>若第一步没有取得.pem证书而是.cer证书,则可以使用以下代码转换:
    <pre><code class="language-Bash">openssl x509 -inform der -in name.cer -out name.pem
</code></pre>
  </li>
  <li>若已有pem文件,则输入以下代码:
    <pre><code class="language-Bash">openssl x509 -inform PEM -subject_hash_old -in name.pem
</code></pre>
    <p>会输出形如:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>b3778315
-----BEGIN CERTIFICATE-----
省略
-----END CERTIFICATE-----
</code></pre></div>    </div>
    <p>记住第一行,我这里即<strong>b3778315</strong>.</p>
  </li>
  <li>将文件<strong>name.pem</strong>改成:<strong>b3778315.0</strong></li>
  <li>证书的准备工作就完成了.</li>
</ul>

<h3 id="其他准备工作">其他准备工作</h3>
<p>需要取得root权限,并取得系统盘写入权限. <br />
就拿<a href="https://mumu.163.com/update/">mumu模拟器12</a>举例,需要勾选:</p>
<ul>
  <li>设置中心-其他-开启手机Root权限.</li>
  <li>设置中心-磁盘-可写系统盘.</li>
</ul>

<h3 id="执行adb命令">执行ADB命令</h3>
<p>  连接,并获取root权限,端口举例为mumu模拟器12:</p>
<pre><code class="language-Bash">adb connect 127.0.0.1:7555
adb shell
su
</code></pre>
<p>  在手机上确认授权.退出shell</p>
<pre><code class="language-Bash">exit
</code></pre>
<p>  写入文件:</p>
<pre><code class="language-Bash">adb push b3778315.0 /etc/security/cacerts/
</code></pre>
<p>  控制台回应:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[100%] /etc/security/cacerts/b3778315.0
</code></pre></div></div>
<p>  更改权限:</p>
<pre><code class="language-Bash">adb shell chmod 644 /etc/security/cacerts/b3778315.0
</code></pre>
<p>  可通过ls命令查看文件是否存在.  <br />
  这样证书安装就完成了. <br />
  以上步骤也可通过各种有读写系统路径的管理器来操作,注意文件权限设置.</p>]]></content><author><name>acteds</name></author><category term="Android" /><summary type="html"><![CDATA[在高版本安卓系统上安装证书的办法]]></summary></entry><entry><title type="html">节流与去重的重要性</title><link href="https://acteds.github.io/2024/01/10/%E8%8A%82%E6%B5%81%E4%B8%8E%E5%8E%BB%E9%87%8D%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/" rel="alternate" type="text/html" title="节流与去重的重要性" /><published>2024-01-10T00:00:00+08:00</published><updated>2024-01-10T00:00:00+08:00</updated><id>https://acteds.github.io/2024/01/10/%E8%8A%82%E6%B5%81%E4%B8%8E%E5%8E%BB%E9%87%8D%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7</id><content type="html" xml:base="https://acteds.github.io/2024/01/10/%E8%8A%82%E6%B5%81%E4%B8%8E%E5%8E%BB%E9%87%8D%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"><![CDATA[<h2 id="引言">引言</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MutationObserver</a>接口提供了侦听DOM数变化的功能,可以监听DOM中属性、内容和节点的修改。</p>

<p>  例如:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 只能调用一次,若多次调用该函数,且在执行过程中再次出发另一个实例则将产生死循环
 * dom修改事件,包括属性,内容,节点修改
 * @param document 侦听对象
 * @param func  执行函数
 */</span>
<span class="kd">function</span> <span class="nx">dom修改事件</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">MutationObserver</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">WebKitMutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MozMutationObserver</span><span class="p">;</span><span class="c1">//浏览器兼容</span>
    <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span><span class="na">attributes</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">childList</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">characterData</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">subtree</span><span class="p">:</span> <span class="kc">true</span><span class="p">};</span><span class="c1">//配置对象</span>
    <span class="kd">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//进入后停止侦听</span>
        <span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">func</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">执行错误</span><span class="dl">'</span><span class="p">)}</span>
        <span class="c1">//结束后继续侦听</span>
        <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>  这个函数的目的是在每次触发变化后，先停止监听,然后执行自定义函数，再重新启用监听器来继续监听变化。<br />
  停止监听的原因是自定义函数会涉及dom修改,然后再次触发该事件导致死循环。<br />
  而多次调用该函数也会导致死循环，原因同样式dom修改会触发同类事件，而同类事件并没有停止侦听。</p>

<h2 id="详解">详解</h2>
<h3 id="创建实例">创建实例</h3>
<p>  当使用 MutationObserver 创建观察器实例时，传递给构造函数的参数是一个回调函数。这个回调函数在观察到 DOM 发生变化时会被触发执行。</p>

<p>  这个回调函数接收两个参数：</p>

<ul>
  <li><strong>records</strong>：这是一个包含所有观察到的 DOM 变化的数组（MutationRecord 对象）。每个 MutationRecord 包含了有关单个 DOM 变化的信息，比如发生变化的节点、变化类型等。</li>
  <li>itself（可选）：这个参数是 MutationObserver 实例自身。它指向了触发这个回调函数的 MutationObserver 实例。</li>
</ul>

<p>  在 MutationObserver 的回调函数中，records 是一个 MutationRecord 对象的数组，代表了所有检测到的 DOM 变化。每个 MutationRecord 对象都包含了关于单个 DOM 变化的详细信息。</p>

<p>  <strong>MutationRecord</strong> 对象具有以下属性：<br />
  1. type: 表示发生的变化类型，可能的值有 attributes（属性变化）、childList（子节点变化）、characterData（节点内容变化）。<br />
  2. target: 发生变化的目标节点（DOM 节点）。<br />
  3. addedNodes: 在 childList 类型的变化中，表示新增的节点列表。<br />
  4. removedNodes: 在 childList 类型的变化中，表示移除的节点列表。<br />
  5. previousSibling: 变化前的同级前一个节点。<br />
  6. nextSibling: 变化后的同级后一个节点。 <br />
  7. attributeName: 在 attributes 类型的变化中，表示被修改的属性名称。<br />
  8. oldValue: 在某些情况下，表示被修改的节点的原始值。</p>

<h3 id="启动侦听">启动侦听</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nx">mutationObserver</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">target</span><span class="p">[,</span> <span class="nx">options</span><span class="p">])</span>
</code></pre></div></div>
<p>  创建完实例后即可使用实例的observe()函数启动侦听。</p>
<ul>
  <li>target:要观察变化的DOM。</li>
  <li>options（可选）:此对象的配置项描述了DOM的哪些变化应该报告给 MutationObserver的callback。当调用observe()时，childList、attributes和characterData中，必须有一个参数为 true。否则会抛出TypeError异常。</li>
</ul>

<p>  options 的属性如下：<br />
  1. subtree（可选）:当为 true 时，将会监听以 target 为根节点的整个子树。包括子树中所有节点的属性，而不仅仅是针对 target。默认值为 false。<br />
  2. childList（可选）:当为 true 时，监听 target 节点中发生的节点的新增与删除（同时，如果 subtree 为 true，会针对整个子树生效）。默认值为 false。<br />
  3. attributes（可选）:当为 true 时观察所有监听的节点属性值的变化。默认值为 true，当声明了 attributeFilter 或 attributeOldValue，默认值则为 false。<br />
  4. attributeFilter（可选）:一个用于声明哪些属性名会被监听的数组。如果不声明该属性，所有属性的变化都将触发通知。<br />
  5. attributeOldValue（可选）:当为 true 时，记录上一次被监听的节点的属性变化；可查阅监听属性值了解关于观察属性变化和属性值记录的详情。默认值为 false。<br />
  6. characterData（可选）:当为 true 时，监听声明的 target 节点上所有字符的变化。默认值为 true，如果声明了 characterDataOldValue，默认值则为 false<br />
  7. characterDataOldValue（可选）:当为 true 时，记录前一个被监听的节点中发生的文本变化。默认值为 false</p>

<p>  一旦调用 MutationObserver.observe()，指定的目标节点上发生的变化将会被捕捉到，并在回调函数中进行处理。当你不再需要观察这些变化时，可以调用 MutationObserver.disconnect() 来停止观察。</p>

<h2 id="优化">优化</h2>
<p>  对于开头给出的例子具有只能使用一次的弊端,可以通过以下方式优化:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">observerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>
<span class="cm">/**
 * 修改后的函数,在触发事件后会对其他相同document的obs排队依次触发
 * dom修改事件,包括属性,内容,节点修改
 * @param document 侦听对象
 * @param func  执行函数,可选参数(records),表示更改的节点
 * @param config 侦听的配置
 */</span>
<span class="kd">function</span> <span class="nx">dom修改事件</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">func</span> <span class="p">,</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span><span class="na">attributes</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">childList</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">characterData</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">subtree</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">MutationObserver</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">WebKitMutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MozMutationObserver</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">observers</span> <span class="o">=</span> <span class="nx">observerMap</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span> <span class="nb">document</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
        <span class="c1">// 在每次变化前暂停相同 document 的所有观察器实例</span>
        <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="nx">obs</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">()</span> <span class="p">);</span>
        <span class="c1">// 对拥有相同观察器实例的文档执行各自的函数</span>
        <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="k">try</span> <span class="p">{</span><span class="nx">obs</span><span class="p">.</span><span class="nx">func</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span> <span class="nx">e</span> <span class="p">)</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span> <span class="dl">'</span><span class="s1">执行错误</span><span class="dl">'</span> <span class="p">);</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
        <span class="c1">// 在执行完毕后重新启用相同 document 的所有观察器实例</span>
        <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="nx">obs</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">config</span> <span class="p">)</span> <span class="p">);</span>
    <span class="p">}</span> <span class="p">);</span>
    <span class="c1">// 将观察器实例和对应的函数添加到对应 document 的数组中</span>
    <span class="kd">let</span> <span class="nx">observers</span> <span class="o">=</span> <span class="nx">observerMap</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span> <span class="nb">document</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
    <span class="nx">observers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="p">{</span><span class="nx">observer</span><span class="p">,</span> <span class="nx">func</span> <span class="p">}</span> <span class="p">);</span>
    <span class="nx">observerMap</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">observers</span> <span class="p">);</span>
    <span class="c1">// 开启侦听</span>
    <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">config</span> <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<p>  对于相同document的MutationObserver会集中进行处理,但弊端一样很明显,若为不相同的document,比如子文档,当发生重叠修改时一样会触发死循环.</p>

<p>  另外一种优化:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">observerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>
<span class="cm">/**
 * 修改后的函数,在触发事件后会对其他相同config的obs排队依次触发
 * dom修改事件,包括属性,内容,节点修改
 * @param document 侦听对象
 * @param func  执行函数,可选参数(records),表示更改的节点
 * @param config 侦听的配置
 */</span>
<span class="kd">function</span> <span class="nx">dom修改事件</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">func</span> <span class="p">,</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span><span class="na">attributes</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">childList</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">characterData</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">subtree</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">MutationObserver</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">WebKitMutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MozMutationObserver</span><span class="p">;</span>
    <span class="c1">//将配置对象序列化为字符串,做为key.</span>
    <span class="kd">const</span> <span class="nx">serializedConfig</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">config</span><span class="p">).</span><span class="nx">sort</span><span class="p">());</span>
    <span class="kd">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">observers</span> <span class="o">=</span> <span class="nx">observerMap</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span> <span class="nx">serializedConfig</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
        <span class="c1">// 在每次变化前暂停相同 config 的所有观察器实例</span>
        <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="nx">obs</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">()</span> <span class="p">);</span>

        <span class="c1">// 对拥有相同观察器实例的文档执行各自的函数</span>
        <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="k">try</span> <span class="p">{</span><span class="nx">obs</span><span class="p">.</span><span class="nx">func</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span> <span class="nx">e</span> <span class="p">)</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span> <span class="dl">'</span><span class="s1">执行错误</span><span class="dl">'</span> <span class="p">);</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
        <span class="c1">// 在执行完毕后重新启用相同 config 的所有观察器实例</span>
        <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="nx">obs</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">config</span> <span class="p">)</span> <span class="p">);</span>
    <span class="p">}</span> <span class="p">);</span>

    <span class="c1">// 将观察器实例和对应的函数添加到对应 config 的数组中</span>
    <span class="kd">let</span> <span class="nx">observers</span> <span class="o">=</span> <span class="nx">observerMap</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span> <span class="nx">serializedConfig</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
    <span class="nx">observers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="p">{</span><span class="nx">observer</span><span class="p">,</span> <span class="nx">func</span> <span class="p">}</span> <span class="p">);</span>
    <span class="nx">observerMap</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span> <span class="nx">serializedConfig</span><span class="p">,</span> <span class="nx">observers</span> <span class="p">);</span>

    <span class="c1">// 开启侦听</span>
    <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">config</span> <span class="p">);</span>
<span class="p">}</span> 
</code></pre></div></div>
<p>  对于相同配置的MutationObserver会集中进行处理.<br />
  总的来说,使用MutationObserver需要注意无限触发的问题.</p>

<h2 id="优化与性能测试">优化与性能测试</h2>
<p>  MutationObserver的侦听范围太过宽泛,而且与dom绑定,当绑定的对象不存在后MutationObserver也就没有作用了,因此常常将MutationObserver绑定在基本不会变动的靠近根的dom上,因此会过于频繁的触发回调函数,若要检查修改发生变化的元素或文本,又需要频繁的开关MutationObserver,因此性能需要测试.</p>

<p>  下面给出使用MutationObserver对指定页面body进行侦听,并修改内容的耗时</p>

<p>  使用上方的函数,控制台:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:234691次
修改耗时:16818ms
</code></pre></div></div>
<h3 id="节流">节流</h3>
<p>  通过使用节流函数将小于指定触发时间间隔的修改对象累计起来,并在超时后集中处理,可以减轻开关MutationObserver实例带来的性能消耗.<br />
  具体优化代码为:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">observerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>
<span class="cm">/**
 * 修改后的函数,在触发事件后会对其他相同config的obs排队依次触发,使用节流.
 * dom修改事件,包括属性,内容,节点修改
 * @param document 侦听对象
 * @param func  执行函数,可选参数(records),表示更改的节点
 * @param config 侦听的配置
 */</span>
<span class="kd">function</span> <span class="nx">dom修改事件</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">func</span> <span class="p">,</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span><span class="na">attributes</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">childList</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">characterData</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">subtree</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">MutationObserver</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">WebKitMutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MozMutationObserver</span><span class="p">;</span>
    <span class="c1">//将配置对象序列化为字符串,做为key.</span>
    <span class="kd">const</span> <span class="nx">serializedConfig</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">config</span><span class="p">).</span><span class="nx">sort</span><span class="p">());</span>
    <span class="kd">let</span> <span class="nx">throttleTimeout</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">recordsArr</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">throttleTimeout</span><span class="p">);</span>
        <span class="c1">// 记录变化</span>
        <span class="nx">recordsArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="p">...</span><span class="nx">records</span> <span class="p">);</span>
        <span class="nx">throttleTimeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">observers</span> <span class="o">=</span> <span class="nx">observerMap</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span> <span class="nx">serializedConfig</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
            <span class="c1">// 在每次变化前暂停相同 config 的所有观察器实例</span>
            <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="nx">obs</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">()</span> <span class="p">);</span>
            <span class="c1">// 对拥有相同观察器实例的文档执行各自的函数</span>
            <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="k">try</span> <span class="p">{</span><span class="nx">obs</span><span class="p">.</span><span class="nx">func</span><span class="p">(</span><span class="nx">recordsArr</span><span class="p">);</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span> <span class="nx">e</span> <span class="p">)</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span> <span class="dl">'</span><span class="s1">执行错误</span><span class="dl">'</span> <span class="p">);</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
            <span class="c1">// 在执行完毕后重新启用相同 config 的所有观察器实例</span>
            <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="nx">obs</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">config</span> <span class="p">)</span> <span class="p">);</span>
            <span class="c1">// 清空记录的修改</span>
            <span class="nx">recordsArr</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span> <span class="p">);</span>

    <span class="c1">// 将观察器实例和对应的函数添加到对应 config 的数组中</span>
    <span class="kd">let</span> <span class="nx">observers</span> <span class="o">=</span> <span class="nx">observerMap</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span> <span class="nx">serializedConfig</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
    <span class="nx">observers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="p">{</span><span class="nx">observer</span><span class="p">,</span> <span class="nx">func</span> <span class="p">}</span> <span class="p">);</span>
    <span class="nx">observerMap</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span> <span class="nx">serializedConfig</span><span class="p">,</span> <span class="nx">observers</span> <span class="p">);</span>

    <span class="c1">// 开启侦听</span>
    <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">config</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>  当设置节流时间段为0ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:234691次
修改耗时:17276ms
</code></pre></div></div>
<p>  当设置节流时间段为10ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:234691次
修改耗时:17691ms
</code></pre></div></div>
<p>  当设置节流时间段为50ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:234691次
修改耗时:17671ms
</code></pre></div></div>
<p>  当设置节流时间段为100ms时,同上次比较,效果显著,修改次数大幅上升了:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:368441次
修改耗时:25427ms
</code></pre></div></div>
<p>  当设置节流时间段为1000ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:368441次
修改耗时:25732ms
</code></pre></div></div>
<p>  节流时间的设置会在某个时间点后让性能大幅下降,但应该和元素数量以及复杂度有关,且过长的节流时间会让页面修改不及时,从而影响用户体验,因此节流方面似乎并没有多大性能收益.</p>

<h3 id="减负">减负</h3>
<p>  MutationObserver的回调次数着实有些高,因此可以从合并相似MutationRecord对象着手提高性能.</p>

<p>  对于相似MutationRecord对象,可以只保留最后一个:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/**
     * 从后面开始去重,并保留靠后的元素.
     * @param arr
     * @returns {*}
     */</span>
    <span class="kd">function</span> <span class="nx">removeDuplicates</span><span class="p">(</span> <span class="nx">arr</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduceRight</span><span class="p">(</span> <span class="p">(</span> <span class="nx">unique</span><span class="p">,</span> <span class="nx">item</span> <span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// 检查当前元素是否已存在于结果数组中，如果不存在，则将其添加到数组中</span>
            <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">unique</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span> <span class="nx">i</span> <span class="o">=&gt;</span> <span class="p">(</span>
                <span class="nx">i</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">type</span> <span class="o">&amp;&amp;</span>
                <span class="nx">i</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">target</span> <span class="o">&amp;&amp;</span>
                <span class="nx">i</span><span class="p">.</span><span class="nx">attributeName</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">attributeName</span>
            <span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
                <span class="nx">unique</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">item</span> <span class="p">);</span> <span class="c1">// 将不重复的元素添加到结果数组中</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">unique</span><span class="p">;</span>
        <span class="p">},</span> <span class="p">[]</span> <span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>  使用 reduceRight方法遍历输入数组arr，从数组的最后一个元素开始,检查每个数组元素 item是否已经存在于unique数组中。<br />
  如果 unique 数组中没有相同type、target和attributeName属性的元素，则将当前元素 item添加到unique数组中并返回。<br />
  函数的结果是一个不包含重复元素的新数组，确保了没有重复的MutationRecord对象。</p>

<p>  结合节流后,得到代码:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">observerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>
<span class="cm">/**
 * 修改后的函数,在触发事件后会对其他相同config的obs排队依次触发,节流10,去重.
 * dom修改事件,包括属性,内容,节点修改
 * @param document 侦听对象
 * @param func  执行函数,可选参数(records),表示更改的节点
 * @param config 侦听的配置
 */</span>
<span class="kd">function</span> <span class="nx">dom修改事件</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">func</span> <span class="p">,</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span><span class="na">attributes</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">childList</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">characterData</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">subtree</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">MutationObserver</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">WebKitMutationObserver</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">MozMutationObserver</span><span class="p">;</span>
    <span class="c1">//将配置对象序列化为字符串,做为key.</span>
    <span class="kd">const</span> <span class="nx">serializedConfig</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">config</span><span class="p">).</span><span class="nx">sort</span><span class="p">());</span>
    <span class="kd">let</span> <span class="nx">throttleTimeout</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">recordsArr</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MutationObserver</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">throttleTimeout</span><span class="p">);</span>
        <span class="c1">// 记录变化</span>
        <span class="nx">recordsArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="p">...</span><span class="nx">records</span> <span class="p">);</span>
        <span class="nx">throttleTimeout</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// 从recordedMutations数组中移除重复项</span>
            <span class="nx">recordsArr</span> <span class="o">=</span> <span class="nx">removeDuplicates</span><span class="p">(</span><span class="nx">recordsArr</span><span class="p">);</span>
            <span class="kd">let</span> <span class="nx">observers</span> <span class="o">=</span> <span class="nx">observerMap</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span> <span class="nx">serializedConfig</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
            <span class="c1">// 在每次变化前暂停相同 config 的所有观察器实例</span>
            <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="nx">obs</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">()</span> <span class="p">);</span>
            <span class="c1">// 对拥有相同观察器实例的文档执行各自的函数</span>
            <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="k">try</span> <span class="p">{</span><span class="nx">obs</span><span class="p">.</span><span class="nx">func</span><span class="p">(</span><span class="nx">recordsArr</span><span class="p">);</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span> <span class="nx">e</span> <span class="p">)</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span> <span class="dl">'</span><span class="s1">执行错误</span><span class="dl">'</span> <span class="p">);</span> <span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
            <span class="c1">// 在执行完毕后重新启用相同 config 的所有观察器实例</span>
            <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">obs</span> <span class="o">=&gt;</span> <span class="nx">obs</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">config</span> <span class="p">)</span> <span class="p">);</span>
            <span class="c1">// 清空记录的修改</span>
            <span class="nx">recordsArr</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
    <span class="p">}</span> <span class="p">);</span>

    <span class="c1">// 将观察器实例和对应的函数添加到对应 config 的数组中</span>
    <span class="kd">let</span> <span class="nx">observers</span> <span class="o">=</span> <span class="nx">observerMap</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span> <span class="nx">serializedConfig</span> <span class="p">)</span> <span class="o">||</span> <span class="p">[];</span>
    <span class="nx">observers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="p">{</span><span class="nx">observer</span><span class="p">,</span> <span class="nx">func</span> <span class="p">}</span> <span class="p">);</span>
    <span class="nx">observerMap</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span> <span class="nx">serializedConfig</span><span class="p">,</span> <span class="nx">observers</span> <span class="p">);</span>

    <span class="c1">// 开启侦听</span>
    <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="nx">config</span> <span class="p">);</span>
    <span class="cm">/**
     * 从后面开始去重,并保留靠后的元素.
     * @param arr
     * @returns {*}
     */</span>
    <span class="kd">function</span> <span class="nx">removeDuplicates</span><span class="p">(</span> <span class="nx">arr</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduceRight</span><span class="p">(</span> <span class="p">(</span> <span class="nx">unique</span><span class="p">,</span> <span class="nx">item</span> <span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// 检查当前元素是否已存在于结果数组中，如果不存在，则将其添加到数组中</span>
            <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">unique</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span> <span class="nx">i</span> <span class="o">=&gt;</span> <span class="p">(</span>
                <span class="nx">i</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">type</span> <span class="o">&amp;&amp;</span>
                <span class="nx">i</span><span class="p">.</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">target</span> <span class="o">&amp;&amp;</span>
                <span class="nx">i</span><span class="p">.</span><span class="nx">attributeName</span> <span class="o">===</span> <span class="nx">item</span><span class="p">.</span><span class="nx">attributeName</span>
            <span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
                <span class="nx">unique</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">item</span> <span class="p">);</span> <span class="c1">// 将不重复的元素添加到结果数组中</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">unique</span><span class="p">;</span>
        <span class="p">},</span> <span class="p">[]</span> <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>  当不设置节流单独使用去重时,效果如下,同上次比较,效果显著:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:33278次
修改耗时:2430ms
</code></pre></div></div>
<p>  当设置节流时间段为0ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:30005次
修改耗时:2264ms
</code></pre></div></div>
<p>  当设置节流时间段为10ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:26798次
修改耗时:2116ms
</code></pre></div></div>
<p>  当设置节流时间段为50ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:25894次
修改耗时:1965ms
</code></pre></div></div>
<p>  当设置节流时间段为100ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:21421次
修改耗时:1975ms
</code></pre></div></div>
<p>  当设置节流时间段为1000ms时,同上次比较,效果不明显:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>修改次数:20463次
修改耗时:1888ms
</code></pre></div></div>

<p>  去重结合节流可以有效的提示性能,节流主要起到收集作用,去重算法才是优化方向.</p>]]></content><author><name>acteds</name></author><category term="JavaScript" /><summary type="html"><![CDATA[关于MutationObserver对象的性能测试]]></summary></entry><entry><title type="html">MySQL的驱动版本更替后日期返回值的变化</title><link href="https://acteds.github.io/2023/05/17/MySQL%E7%9A%84%E9%A9%B1%E5%8A%A8%E7%89%88%E6%9C%AC%E6%9B%B4%E6%9B%BF%E5%90%8E%E6%97%A5%E6%9C%9F%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8F%98%E5%8C%96/" rel="alternate" type="text/html" title="MySQL的驱动版本更替后日期返回值的变化" /><published>2023-05-17T00:00:00+08:00</published><updated>2023-05-17T00:00:00+08:00</updated><id>https://acteds.github.io/2023/05/17/MySQL%E7%9A%84%E9%A9%B1%E5%8A%A8%E7%89%88%E6%9C%AC%E6%9B%B4%E6%9B%BF%E5%90%8E%E6%97%A5%E6%9C%9F%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8F%98%E5%8C%96</id><content type="html" xml:base="https://acteds.github.io/2023/05/17/MySQL%E7%9A%84%E9%A9%B1%E5%8A%A8%E7%89%88%E6%9C%AC%E6%9B%B4%E6%9B%BF%E5%90%8E%E6%97%A5%E6%9C%9F%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8F%98%E5%8C%96/"><![CDATA[<h2 id="引言">引言</h2>
<p>  MySQL的驱动版本从5.1.7升级到8.0.27后,对于数据库表字段类型为datetime的数据会封装为<strong>java.time.LocalDateTime</strong>类型,而不是旧的<strong>java.sql.Timestam</strong>类型。</p>

<h2 id="详解">详解</h2>
<p>  因此不能再使用<strong>fmt:formatDate</strong>转换了<br />
  例如:</p>
<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;fmt:formatDate </span><span class="na">pattern=</span><span class="s">"yyyy-MM-dd HH:mm:ss"</span><span class="na"> value=</span><span class="s">"</span><span class="si">${</span><span class="n">lastDate</span><span class="si">}</span><span class="s">"</span><span class="nt">/&gt;</span>
</code></pre></div></div>
<p>  不想改变其他代码的话,可以直接使用下面代码:</p>
<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>${lastDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}
</code></pre></div></div>
<p>需要注意的是,还需要将<strong>DateTimeFormatter</strong>导入</p>
<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;%@ page </span><span class="na">import=</span><span class="s">"java.time.format.DateTimeFormatter"</span> <span class="nt">%&gt;</span>
</code></pre></div></div>

<p>  当然,如果不想更改前端代码,则可以将<strong>java.time.LocalDateTime</strong>类型转换回旧的<strong>java.sql.Timestam</strong>类型。通过设置<strong>TypeHandler</strong>,可以对mybatis返回的类型进行处理。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[版本变更后返回值的变化]]></summary></entry><entry><title type="html">在浏览某些网站时字体很奇怪</title><link href="https://acteds.github.io/2023/04/26/%E5%9C%A8%E6%B5%8F%E8%A7%88%E6%9F%90%E4%BA%9B%E7%BD%91%E7%AB%99%E6%97%B6%E5%AD%97%E4%BD%93%E5%BE%88%E5%A5%87%E6%80%AA-copy/" rel="alternate" type="text/html" title="在浏览某些网站时字体很奇怪" /><published>2023-04-26T00:00:00+08:00</published><updated>2023-04-26T00:00:00+08:00</updated><id>https://acteds.github.io/2023/04/26/%E5%9C%A8%E6%B5%8F%E8%A7%88%E6%9F%90%E4%BA%9B%E7%BD%91%E7%AB%99%E6%97%B6%E5%AD%97%E4%BD%93%E5%BE%88%E5%A5%87%E6%80%AA%20copy</id><content type="html" xml:base="https://acteds.github.io/2023/04/26/%E5%9C%A8%E6%B5%8F%E8%A7%88%E6%9F%90%E4%BA%9B%E7%BD%91%E7%AB%99%E6%97%B6%E5%AD%97%E4%BD%93%E5%BE%88%E5%A5%87%E6%80%AA-copy/"><![CDATA[<h2 id="引言">引言</h2>
<p>  在浏览某些网站时网站的字体很奇怪.</p>

<h2 id="详解">详解</h2>
<p>  具体显示效果为:<br />
<img src="/images/posts/Chrome/奇怪的字体.png" alt="奇怪的字体" /><br />
  实际上，是因为网站设置了:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">font-family</span><span class="nd">:BlinkMacSystemFont</span><span class="o">,</span><span class="s1">"Segoe UI"</span><span class="o">,</span><span class="s1">"Roboto"</span><span class="o">,</span><span class="s1">"Oxygen"</span><span class="o">,</span><span class="s1">"Ubuntu"</span><span class="o">,</span><span class="s1">"Cantarell"</span><span class="o">,</span><span class="s1">"Fira Sans"</span><span class="o">,</span><span class="s1">"Droid Sans"</span><span class="o">,</span><span class="s1">"Helvetica Neue"</span><span class="o">,</span><span class="nt">sans-serif</span>
</code></pre></div></div>
<p>  而你又恰好安装了”Droid Sans”字体,那么就会使用”Droid Sans”字体.<br />
  解决方法也很简单,卸载掉”Droid Sans”字体,或者通过css覆盖掉”font-family”.</p>]]></content><author><name>acteds</name></author><category term="Chrome" /><summary type="html"><![CDATA[Droid Sans字体的中文显示效果不佳]]></summary></entry><entry><title type="html">合并servlet-name-servlet.xml与applicationContext.xml</title><link href="https://acteds.github.io/2023/04/21/%E5%90%88%E5%B9%B6servlet-name-servlet.xml%E4%B8%8EapplicationContext.xml/" rel="alternate" type="text/html" title="合并servlet-name-servlet.xml与applicationContext.xml" /><published>2023-04-21T00:00:00+08:00</published><updated>2023-04-21T00:00:00+08:00</updated><id>https://acteds.github.io/2023/04/21/%E5%90%88%E5%B9%B6servlet-name-servlet.xml%E4%B8%8EapplicationContext.xml</id><content type="html" xml:base="https://acteds.github.io/2023/04/21/%E5%90%88%E5%B9%B6servlet-name-servlet.xml%E4%B8%8EapplicationContext.xml/"><![CDATA[<h2 id="引言">引言</h2>
<p>  在Spring MVC中，可以将<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>所需的所有配置信息都包含在根<code class="language-plaintext highlighter-rouge">ApplicationContext</code>中，这样就不需要单独为<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>创建一个XML文件了。</p>

<h2 id="详解">详解</h2>
<p>  实际上，在使用Spring MVC时，<strong>建议</strong>将所有Bean定义和配置信息都放在<strong>一个</strong>名为<code class="language-plaintext highlighter-rouge">applicationContext.xml</code>的文件中，以便于管理和维护。然后，在<code class="language-plaintext highlighter-rouge">web.xml</code>文件中配置<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>，并将其<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>参数设置为<code class="language-plaintext highlighter-rouge">classpath:/applicationContext.xml</code>，这样就可以让<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>自动加载应用程序的所有Bean定义和配置信息了。<br />
  总之，虽然需要在<code class="language-plaintext highlighter-rouge">web.xml</code>文件中配置<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>并指定其<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>参数所需的XML文件，但是这个XML文件里面的<strong>所有内容</strong>都可以转移到根<code class="language-plaintext highlighter-rouge">ApplicationContext</code>中，以便于更好地管理和维护Spring应用程序。 
  下面是一个示例<code class="language-plaintext highlighter-rouge">web.xml</code>文件的配置，其中<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>的<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>参数被设置为<code class="language-plaintext highlighter-rouge">classpath:/applicationContext.xml</code>：</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://java.sun.com/xml/ns/javaee"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>
         <span class="na">version=</span><span class="s">"3.0"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 配置Spring MVC的DispatcherServlet --&gt;</span>
    <span class="nt">&lt;servlet&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>myDispatcherServlet<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>classpath:/applicationContext.xml<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;/servlet&gt;</span>
    <span class="nt">&lt;servlet-mapping&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>myDispatcherServlet<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/servlet-mapping&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>
<p>  在这个示例中，我们配置了一个名为<code class="language-plaintext highlighter-rouge">myDispatcherServlet</code>的<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>，并将其<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>参数设置为<code class="language-plaintext highlighter-rouge">classpath:/applicationContext.xml</code>。这意味着在应用程序启动时，<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>会自动加载位于类路径上的<code class="language-plaintext highlighter-rouge">applicationContext.xml</code>文件，并使用其中定义的Bean来处理所有的请求。同时，我们将<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>映射到了应用程序的根路径“/”，这意味着所有的请求都将由它来处理。<br />
  重要的是要确保<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>的<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>参数正确指向了包含所有Bean定义和配置信息的XML文件。</p>

<p>  在这个web.xml文件的配置中，已经在<code class="language-plaintext highlighter-rouge">servlet</code>中指定了<code class="language-plaintext highlighter-rouge">Servlet</code>上下文的位置，因此<strong>不需要</strong>再添加<code class="language-plaintext highlighter-rouge">&lt;context-param&gt;</code>元素来指定Spring应用程序上下文的位置。<br />
  如果已通过此方法配置<code class="language-plaintext highlighter-rouge">applicationContext.xml</code>在应用程序中只使用一个<code class="language-plaintext highlighter-rouge">ApplicationContext.xml</code>文件来配置Spring bean,则<strong>不需要</strong>添加<code class="language-plaintext highlighter-rouge">&lt;context-param&gt;</code>元素到<code class="language-plaintext highlighter-rouge">web.xml</code>文件中,即不需要使用:</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>context-param&gt;
    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;</span>classpath:/applicationContext.xml<span class="nt">&lt;/param-value&gt;</span><span class="c">&lt;!--加载src目录下的applicationContext.xml文件--&gt;</span>
<span class="nt">&lt;/context-param&gt;</span>
</code></pre></div></div>
<p>  当然,自动加载也不要再用:</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;listener&gt;&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;&lt;/listener&gt;</span>
</code></pre></div></div>
<p>  该代码表示 Spring 将尝试从默认路径(如果定义了context-param就从你指定的xml读取) <code class="language-plaintext highlighter-rouge">/WEB-INF/applicationContext.xml</code> 中加载应用程序上下文配置，即使在<code class="language-plaintext highlighter-rouge">servlet</code> 的 <code class="language-plaintext highlighter-rouge">init-param</code> 中已经显式指定了另一个配置文件的路径。这是因为 <code class="language-plaintext highlighter-rouge">ContextLoaderListener</code> 将在应用程序启动时创建和初始化根应用程序上下文。<br />
  另外，这个<code class="language-plaintext highlighter-rouge">web.xml</code>文件只适用于Spring MVC框架，如果同时使用其他的Spring组件或框架（如Spring Security），则可能需要在<code class="language-plaintext highlighter-rouge">web.xml</code>中添加其他的<code class="language-plaintext highlighter-rouge">&lt;context-param&gt;</code>元素来指定其他的上下文配置文件位置。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Spring配置文件的合并]]></summary></entry><entry><title type="html">Transactional注解无效</title><link href="https://acteds.github.io/2023/04/20/Transactional%E6%B3%A8%E8%A7%A3%E6%97%A0%E6%95%88/" rel="alternate" type="text/html" title="Transactional注解无效" /><published>2023-04-20T00:00:00+08:00</published><updated>2023-04-20T00:00:00+08:00</updated><id>https://acteds.github.io/2023/04/20/Transactional%E6%B3%A8%E8%A7%A3%E6%97%A0%E6%95%88</id><content type="html" xml:base="https://acteds.github.io/2023/04/20/Transactional%E6%B3%A8%E8%A7%A3%E6%97%A0%E6%95%88/"><![CDATA[<h2 id="引言">引言</h2>
<p>  在使用<code class="language-plaintext highlighter-rouge">Transactional</code>注解方法时没有产生应有的效果,通过排除发现<code class="language-plaintext highlighter-rouge">Transactional</code>注解是无效状态.</p>

<h2 id="详解">详解</h2>
<p>  SSM架构下，Spring是一个容器，通过<code class="language-plaintext highlighter-rouge">applicationContext.xml</code>配置。<br />
  SpringMVC算子容器，通过<code class="language-plaintext highlighter-rouge">spring-mvc.xml</code>配置。</p>

<p>  当注解所在的类在<code class="language-plaintext highlighter-rouge">spring-mvc.xml</code>中扫描配置,而事务管理bean在<code class="language-plaintext highlighter-rouge">applicationContext.xml</code>中配置会导致子容器可以访问父容器中的bean，而父容器不能访问子容器的bean。所以父容器中定义的事务管理bean就不知道子容器中扫描配置内容。因此事务<code class="language-plaintext highlighter-rouge">@Transactional</code>注解无法正常使用。<br />
  实际上，在使用Spring MVC时，建议将所有Bean定义和配置信息都放在一个名为<code class="language-plaintext highlighter-rouge">applicationContext.xml</code>的文件中，以便于管理和维护。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Spring的容器访问权限]]></summary></entry><entry><title type="html">异步函数：Promise使用指南</title><link href="https://acteds.github.io/2022/07/19/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-Promise%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/" rel="alternate" type="text/html" title="异步函数：Promise使用指南" /><published>2022-07-19T00:00:00+08:00</published><updated>2022-07-19T00:00:00+08:00</updated><id>https://acteds.github.io/2022/07/19/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%20Promise%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97</id><content type="html" xml:base="https://acteds.github.io/2022/07/19/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-Promise%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"><![CDATA[<h2 id="引言">引言</h2>
<p>  一些基本概念:<a href="https://www.runoob.com/js/js-async.html">异步编程</a>、<a href="https://www.runoob.com/js/js-promise.html">Promise</a></p>

<h2 id="详解">详解</h2>
<h3 id="基础内容">基础内容</h3>
<p>  Promise 构造函数只有一个参数，是一个函数，这个函数在构造之后会直接被异步运行，所以我们称之为起始函数。起始函数包含两个参数 resolve 和 reject。<br />
  当 Promise 被构造时，起始函数会被异步执行：<br />
  实例：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">(</span><span class="kd">function</span><span class="err"> </span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Run</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>
<p>  这段程序会直接输出 Run。<br />
  resolve 和 reject 都是函数，其中调用 resolve代表一切正常，reject 是出现异常时所调用的。<br />
  Promise 类有 .then() .catch() 和 .finally() 三个方法，这三个方法的参数都是一个函数.<br />
  .then() 正常执行函数序列，<br />
  .catch() 异常处理序列，catch之前执行序列有任何异常都会直接跳到最近的catch 序列,<br />
  .finally() 一定会执行的序列。<br />
  即new Promise(resolve=&gt;{}).then().catch(1).catch(2),若catch(1)前有异常,则由catch(1)捕获异常,若catch(1)内部有异常则由catch(2)捕获.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">setTimeout</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">            </span><span class="nx">func</span><span class="p">();</span>
<span class="err">            </span><span class="c1">//必须调用resolve()声明异步操作完成</span>
<span class="err">            </span><span class="nx">resolve</span><span class="p">();</span>
<span class="err">        </span><span class="p">},</span><span class="err"> </span><span class="nx">delay</span><span class="p">);</span>
<span class="err">    </span><span class="p">});</span>
<span class="p">};</span>
<span class="c1">//定义函数简化后的通常方法</span>
<span class="nx">Asynchronous</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">).</span><span class="nx">then</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="err">    </span><span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">Asynchronous</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="err">    </span><span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">//使用线性编程完成异步操作</span>
<span class="p">(</span><span class="k">async</span><span class="err"> </span><span class="kd">function</span><span class="err"> </span><span class="p">()</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">await</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="err">    </span><span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">);</span>
<span class="err">    </span><span class="k">await</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="err">    </span><span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">);</span>
<span class="p">})();</span>
</code></pre></div></div>
<p>  该代码有一个缺陷,由setTimeout内产生的错误无法被catch()捕获.<br />
  参见:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises#%E5%9C%A8%E6%97%A7%E5%BC%8F%E5%9B%9E%E8%B0%83_api_%E4%B8%AD%E5%88%9B%E5%BB%BA_promise">在旧式回调 API 中创建 Promise</a></p>

<p>  可以通过以下方式让setTimeout不产生错误:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">);</span>
<span class="err">    </span><span class="p">}).</span><span class="nx">then</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">func</span><span class="p">();</span>
<span class="err">    </span><span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>
<p>  可使用异步函数特性:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span><span class="err"> </span><span class="kd">function</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">await</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">);</span>
<span class="err">    </span><span class="p">});</span>
<span class="err">    </span><span class="nx">func</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>
<p>  关键字 await 使函数等待 Promise,它<font color="Red">只能</font>在 async 函数中使用,async函数的返回值为一个Promise对象.</p>

<p>  then(),catch(),finall():</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span><span class="err"> </span><span class="nx">info</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="p">[];</span>
<span class="nx">Asynchronous</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">info</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">函数体正常执行</span><span class="dl">"</span><span class="p">);</span>
<span class="err">    </span><span class="k">throw</span><span class="err"> </span><span class="dl">'</span><span class="s1">发生错误</span><span class="dl">'</span><span class="p">;</span>
<span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">t</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">info</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">{</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}).</span><span class="k">finally</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">info</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">-&gt;</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">info</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">捕获:</span><span class="dl">'</span><span class="err"> </span><span class="o">+</span><span class="err"> </span><span class="nx">e</span><span class="p">);</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">info</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">}</span><span class="dl">'</span><span class="p">);</span>
<span class="err">    </span><span class="k">throw</span><span class="err"> </span><span class="dl">"</span><span class="s2">then错误</span><span class="dl">"</span>
<span class="p">}).</span><span class="k">finally</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">info</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">[</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">info</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">捕获:</span><span class="dl">'</span><span class="err"> </span><span class="o">+</span><span class="err"> </span><span class="nx">e</span><span class="p">);</span>
<span class="p">}).</span><span class="k">finally</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">info</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">'</span><span class="s1">]</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}).</span><span class="k">finally</span><span class="p">(()</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">));</span>
<span class="p">});</span>
</code></pre></div></div>
<p>  控制台:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>函数体正常执行 -&gt; 捕获:发生错误 } [ 捕获:then错误 ]
</code></pre></div></div>

<h3 id="传递内容">传递内容</h3>
<p>  要传递内容给then,则需要给resolve传入参数,resolve只接受一个参数,要在then传递内容给下一个then,则通过return即可.</p>

<p>  因此将函数改为:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="k">return</span><span class="err"> </span><span class="nx">func</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="err">    </span><span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>
<p>  异步函数写法为:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span><span class="err"> </span><span class="kd">function</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="kd">const</span><span class="err"> </span><span class="nx">i</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="k">await</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="p">});</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">func</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>  resolve传参示例:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="k">return</span><span class="err"> </span><span class="nx">func</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="err">    </span><span class="p">});</span>
<span class="p">};</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">a</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">name</span><span class="p">:</span><span class="err"> </span><span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span>
<span class="err">    </span><span class="nx">age</span><span class="p">:</span><span class="err"> </span><span class="mi">18</span>
<span class="p">};</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">b</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="err"> </span><span class="mi">2</span><span class="p">,</span><span class="err"> </span><span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">c</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Map</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>
<span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">,</span><span class="err"> </span><span class="nx">a</span><span class="p">,</span><span class="err"> </span><span class="nx">b</span><span class="p">,</span><span class="err"> </span><span class="nx">c</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">})</span>
</code></pre></div></div>
<p>  控制台:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">}</span>
<span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">}</span>
<span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">}</span>
</code></pre></div></div>

<p>  new Promise对象时,通过resolve(arg)来传递内容到then,then通过return传递内容到后一个then.<br />
  若中途出现错误被catch(e=&gt;{}),则传递内容会丢失,在catch里只有e这个错误内容,通过return可以传值到下一个then.<br />
  finally()不影响传递内容,但内容也传不到finally里,在finally里return也不会传递任何内容.<br />
  new Promise对象时,通过reject(arg)来传递内容到catch,catch可以通过return传递内容到后一个then.就算catch后面紧接着还有一个catch也不会执行,因为没有报错.</p>

<p>  测试代码1:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="nx">arg</span><span class="p">);</span>
<span class="err">        </span><span class="c1">// setTimeout(reject, delay, arg);</span>
<span class="err">    </span><span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="k">return</span><span class="err"> </span><span class="nx">func</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="err">    </span><span class="p">});</span>
<span class="p">};</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">a</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">name</span><span class="p">:</span><span class="err"> </span><span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span>
<span class="err">    </span><span class="nx">age</span><span class="p">:</span><span class="err"> </span><span class="mi">18</span>
<span class="p">};</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">b</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="err"> </span><span class="mi">2</span><span class="p">,</span><span class="err"> </span><span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">c</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Map</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>
<span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">func:</span><span class="dl">"</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">,</span><span class="err"> </span><span class="nx">a</span><span class="p">,</span><span class="err"> </span><span class="nx">b</span><span class="p">,</span><span class="err"> </span><span class="nx">c</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">catch1:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">then1:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">}).</span><span class="k">finally</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">finally:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="c1">// throw '错误'</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">catch2:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">then2:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>
<p>  控制台:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">func</span><span class="p">:</span> <span class="p">{</span> <span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span> <span class="p">}</span>
<span class="nl">then1</span><span class="p">:</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span> <span class="p">}</span>
<span class="nl">finally</span><span class="p">:</span> <span class="kc">undefined</span>
<span class="nx">then2</span><span class="p">:</span> <span class="p">{</span> <span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span> <span class="p">}</span>
</code></pre></div></div>

<p>  测试代码2:<br />
  在测试代码1的基础上,将finally内的注释取消,并将最后一个then展开语法删除(因为arg已经不是数组了):</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">func</span><span class="p">:</span> <span class="p">{</span> <span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span> <span class="p">}</span>
<span class="nl">then1</span><span class="p">:</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span> <span class="p">}</span>
<span class="nl">finally</span><span class="p">:</span> <span class="kc">undefined</span>
<span class="nx">catch2</span><span class="p">:</span> <span class="nx">错误</span>
<span class="nx">then2</span><span class="p">:</span> <span class="nx">错误</span>
</code></pre></div></div>

<p>  测试代码3:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span><span class="err"> </span><span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">)</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="err"> </span><span class="nx">reject</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="c1">// setTimeout(resolve, delay, arg);</span>
<span class="err">        </span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">reject</span><span class="p">,</span><span class="err"> </span><span class="nx">delay</span><span class="p">,</span><span class="err"> </span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">        </span><span class="k">return</span><span class="err"> </span><span class="nx">func</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="err">    </span><span class="p">});</span>
<span class="p">};</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">a</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">name</span><span class="p">:</span><span class="err"> </span><span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span>
<span class="err">    </span><span class="nx">age</span><span class="p">:</span><span class="err"> </span><span class="mi">18</span>
<span class="p">};</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">b</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="err"> </span><span class="mi">2</span><span class="p">,</span><span class="err"> </span><span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span><span class="err"> </span><span class="nx">c</span><span class="err"> </span><span class="o">=</span><span class="err"> </span><span class="k">new</span><span class="err"> </span><span class="nb">Map</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span>
<span class="nx">Asynchronous</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">func:</span><span class="dl">"</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">},</span><span class="err"> </span><span class="mi">1000</span><span class="p">,</span><span class="err"> </span><span class="nx">a</span><span class="p">,</span><span class="err"> </span><span class="nx">b</span><span class="p">,</span><span class="err"> </span><span class="nx">c</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">then1:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">catch1:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">catch2:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">arg</span><span class="err"> </span><span class="o">=&gt;</span><span class="err"> </span><span class="p">{</span>
<span class="err">    </span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">then2:</span><span class="dl">'</span><span class="p">,</span><span class="err"> </span><span class="p">...</span><span class="nx">arg</span><span class="p">);</span>
<span class="err">    </span><span class="k">return</span><span class="err"> </span><span class="nx">arg</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>  控制台:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">catch1</span><span class="p">:</span> <span class="p">{</span> <span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span> <span class="p">}</span>
<span class="nl">then2</span><span class="p">:</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span> <span class="p">}</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="nb">Map</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1">小明</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span> <span class="o">=&gt;</span> <span class="mi">18</span> <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="JavaScript" /><summary type="html"><![CDATA[Promise详解]]></summary></entry></feed>