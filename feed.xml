<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-08-18T21:18:41+08:00</updated><id>/feed.xml</id><title type="html">个人博客</title><subtitle></subtitle><author><name>acteds</name></author><entry><title type="html">Spring Boot</title><link href="/2024/07/09/Spring-Boot/" rel="alternate" type="text/html" title="Spring Boot" /><published>2024-07-09T00:00:00+08:00</published><updated>2024-07-09T00:00:00+08:00</updated><id>/2024/07/09/Spring%20Boot</id><content type="html" xml:base="/2024/07/09/Spring-Boot/"><![CDATA[<h1 id="引言">引言</h1>
<p>Spring Boot笔记</p>

<h1 id="spring-boot">Spring Boot</h1>

<p>Spring框架，它的主要功能包括IoC容器、AOP支持、事务支持、MVC开发以及强大的第三方集成功能等。而Spring Boot是一个基于Spring的套件，它帮我们预组装了Spring的一系列组件，以便以尽可能少的代码和配置来开发基于Spring的Java应用程序。</p>

<p>Spring Boot的目标就是提供一个开箱即用的应用程序架构，基于Spring Boot的预置结构继续开发，省时省力。</p>

<p>Spring Boot3.x版与Spring Boot 2.x版本，两者有以下不同：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">Spring Boot 2.x</th>
      <th style="text-align: left">Spring Boot 3.x</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Spring版本</td>
      <td style="text-align: left">Spring 5.x</td>
      <td style="text-align: left">Spring 6.x</td>
    </tr>
    <tr>
      <td style="text-align: left">JDK版本</td>
      <td style="text-align: left">&gt;= 1.8</td>
      <td style="text-align: left">&gt;= 17</td>
    </tr>
    <tr>
      <td style="text-align: left">Tomcat版本</td>
      <td style="text-align: left">9.x</td>
      <td style="text-align: left">10.x</td>
    </tr>
    <tr>
      <td style="text-align: left">Annotation包</td>
      <td style="text-align: left">javax.annotation</td>
      <td style="text-align: left">jakarta.annotation</td>
    </tr>
    <tr>
      <td style="text-align: left">Servlet包</td>
      <td style="text-align: left">javax.servlet</td>
      <td style="text-align: left">jakarta.servlet</td>
    </tr>
    <tr>
      <td style="text-align: left">JMS包</td>
      <td style="text-align: left">javax.jms</td>
      <td style="text-align: left">jakarta.jms</td>
    </tr>
    <tr>
      <td style="text-align: left">JavaMail包</td>
      <td style="text-align: left">javax.mail</td>
      <td style="text-align: left">jakarta.mail</td>
    </tr>
  </tbody>
</table>

<p>如果使用Spring Boot的其他版本，则需要根据需要调整代码。</p>

<p><a href="https://spring.io/projects/spring-boot">Spring Boot的官网</a>。</p>

<h2 id="标准spring-boot应用">标准Spring Boot应用</h2>

<p>新建一个<code class="language-plaintext highlighter-rouge">springboot-hello</code>的工程，创建标准的Maven目录结构如下：</p>

<pre><code class="language-ascii">springboot-hello
├── pom.xml
├── src
│   └── main
│       ├── java
│       └── resources
│           ├── application.yml
│           ├── logback-spring.xml
│           ├── static
│           └── templates
└── target
</code></pre>

<p>其中，在<code class="language-plaintext highlighter-rouge">src/main/resources</code>目录下：</p>

<p><strong>application.yml</strong></p>

<p>是Spring Boot默认的配置文件，它采用<a href="https://yaml.org/">YAML</a>格式而不是<code class="language-plaintext highlighter-rouge">.properties</code>格式，<strong>文件名必须是<code class="language-plaintext highlighter-rouge">application.yml</code>而不是其他名称。</strong></p>

<p>YAML格式比<code class="language-plaintext highlighter-rouge">key=value</code>格式的<code class="language-plaintext highlighter-rouge">.properties</code>文件更易读。比较一下两者的写法：</p>

<p>使用<code class="language-plaintext highlighter-rouge">.properties</code>格式：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># application.properties
</span>
<span class="py">spring.application.name</span><span class="p">=</span><span class="s">${APP_NAME:unnamed}</span>

<span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb</span>
<span class="py">spring.datasource.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">spring.datasource.password</span><span class="p">=</span>
<span class="py">spring.datasource.driver-class-name</span><span class="p">=</span><span class="s">org.hsqldb.jdbc.JDBCDriver</span>

<span class="py">spring.datasource.hikari.auto-commit</span><span class="p">=</span><span class="s">false</span>
<span class="py">spring.datasource.hikari.connection-timeout</span><span class="p">=</span><span class="s">3000</span>
<span class="py">spring.datasource.hikari.validation-timeout</span><span class="p">=</span><span class="s">3000</span>
<span class="py">spring.datasource.hikari.max-lifetime</span><span class="p">=</span><span class="s">60000</span>
<span class="py">spring.datasource.hikari.maximum-pool-size</span><span class="p">=</span><span class="s">20</span>
<span class="py">spring.datasource.hikari.minimum-idle</span><span class="p">=</span><span class="s">1</span>
</code></pre></div></div>

<p>使用YAML格式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># application.yml</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">${APP_NAME:unnamed}</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:mem:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
    <span class="na">hikari</span><span class="pi">:</span>
      <span class="na">auto-commit</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">connection-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">validation-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">max-lifetime</span><span class="pi">:</span> <span class="m">60000</span>
      <span class="na">maximum-pool-size</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">minimum-idle</span><span class="pi">:</span> <span class="m">1</span>
</code></pre></div></div>

<p>可见，YAML是一种层级格式，它和<code class="language-plaintext highlighter-rouge">.properties</code>很容易互相转换，它的优点是去掉了大量重复的前缀，并且更加易读。</p>

<p><strong>也可以使用<code class="language-plaintext highlighter-rouge">application.properties</code>作为配置文件</strong>，但不如YAML格式简单。</p>

<p><strong>使用环境变量</strong></p>

<p>在配置文件中，经常使用如下的格式对某个key进行配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">app</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">${DB_HOST:localhost}</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">${DB_USER:root}</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${DB_PASSWORD:password}</span>
</code></pre></div></div>

<p>这种<code class="language-plaintext highlighter-rouge">${DB_HOST:localhost}</code>意思是，首先从环境变量查找<code class="language-plaintext highlighter-rouge">DB_HOST</code>，如果环境变量定义了，那么使用环境变量的值，否则，使用默认值<code class="language-plaintext highlighter-rouge">localhost</code>。</p>

<p>这使得我们在开发和部署时更加方便，因为开发时无需设定任何环境变量，直接使用默认值即本地数据库，而实际线上运行的时候，只需要传入环境变量即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ DB_HOST</span><span class="o">=</span>10.0.1.123 <span class="nv">DB_USER</span><span class="o">=</span>prod <span class="nv">DB_PASSWORD</span><span class="o">=</span>xxxx java <span class="nt">-jar</span> xxx.jar
</code></pre></div></div>

<hr />

<p><strong>logback-spring.xml</strong>是Spring Boot的logback配置文件名称（也可以使用<code class="language-plaintext highlighter-rouge">logback.xml</code>），一个标准的写法如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;configuration&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">resource=</span><span class="s">"org/springframework/boot/logging/logback/defaults.xml"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"CONSOLE"</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.ConsoleAppender"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;encoder&gt;</span>
            <span class="nt">&lt;pattern&gt;</span>${CONSOLE_LOG_PATTERN}<span class="nt">&lt;/pattern&gt;</span>
            <span class="nt">&lt;charset&gt;</span>utf8<span class="nt">&lt;/charset&gt;</span>
        <span class="nt">&lt;/encoder&gt;</span>
    <span class="nt">&lt;/appender&gt;</span>

    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"APP_LOG"</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;encoder&gt;</span>
            <span class="nt">&lt;pattern&gt;</span>${FILE_LOG_PATTERN}<span class="nt">&lt;/pattern&gt;</span>
            <span class="nt">&lt;charset&gt;</span>utf8<span class="nt">&lt;/charset&gt;</span>
        <span class="nt">&lt;/encoder&gt;</span>
          <span class="nt">&lt;file&gt;</span>app.log<span class="nt">&lt;/file&gt;</span>
        <span class="nt">&lt;rollingPolicy</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;maxIndex&gt;</span>1<span class="nt">&lt;/maxIndex&gt;</span>
            <span class="nt">&lt;fileNamePattern&gt;</span>app.log.%i<span class="nt">&lt;/fileNamePattern&gt;</span>
        <span class="nt">&lt;/rollingPolicy&gt;</span>
        <span class="nt">&lt;triggeringPolicy</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;MaxFileSize&gt;</span>1MB<span class="nt">&lt;/MaxFileSize&gt;</span>
        <span class="nt">&lt;/triggeringPolicy&gt;</span>
    <span class="nt">&lt;/appender&gt;</span>

    <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">"INFO"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">"CONSOLE"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">"APP_LOG"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/root&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<p>它主要通过<code class="language-plaintext highlighter-rouge">&lt;include resource="..." /&gt;</code>引入了Spring Boot的一个缺省配置，这样我们就可以引用类似<code class="language-plaintext highlighter-rouge">${CONSOLE_LOG_PATTERN}</code>这样的变量。上述配置定义了一个控制台输出和文件输出，可根据需要修改。</p>

<p><code class="language-plaintext highlighter-rouge">static</code>是静态文件目录，<code class="language-plaintext highlighter-rouge">templates</code>是模板文件目录，它们不再存放在<code class="language-plaintext highlighter-rouge">src/main/webapp</code>下，而是直接放到<code class="language-plaintext highlighter-rouge">src/main/resources</code>这个classpath目录，因为在Spring Boot中已经不需要专门的webapp目录了。</p>

<p>以上就是Spring Boot的标准目录结构，它完全是一个基于Java应用的普通Maven项目。</p>

<p>源码的目录结构：</p>

<pre><code class="language-ascii">src/main/java
└── com.aotmd
    ├── Application.java
    ├── entity
    │   └── User.java
    ├── service
    │   └── UserService.java
    └── web
        └── UserController.java
</code></pre>

<p>在存放源码的<code class="language-plaintext highlighter-rouge">src/main/java</code>目录中，Spring Boot对Java包的层级结构有一个要求。根package是<code class="language-plaintext highlighter-rouge">com.aotmd</code>，下面还有<code class="language-plaintext highlighter-rouge">entity</code>、<code class="language-plaintext highlighter-rouge">service</code>、<code class="language-plaintext highlighter-rouge">web</code>等子package。Spring Boot要求<code class="language-plaintext highlighter-rouge">main()</code>方法所在的启动类必须放到根package下，命名不做要求，这里以<code class="language-plaintext highlighter-rouge">Application.java</code>命名，它的内容如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动Spring Boot应用程序只需要一行代码加上一个注解<code class="language-plaintext highlighter-rouge">@SpringBootApplication</code>，该注解实际上又包含了：</p>

<ul>
  <li>@SpringBootConfiguration
    <ul>
      <li>@Configuration</li>
    </ul>
  </li>
  <li>@EnableAutoConfiguration
    <ul>
      <li>@AutoConfigurationPackage</li>
    </ul>
  </li>
  <li>@ComponentScan</li>
</ul>

<p>这样一个注解就相当于启动了自动配置和自动扫描。</p>

<p><code class="language-plaintext highlighter-rouge">pom.xml</code>内容如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="nt">&lt;groupId&gt;</span>org.example<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-hello<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;properties&gt;</span>
        <span class="nt">&lt;maven.compiler.source&gt;</span>11<span class="nt">&lt;/maven.compiler.source&gt;</span>
        <span class="nt">&lt;maven.compiler.target&gt;</span>11<span class="nt">&lt;/maven.compiler.target&gt;</span>
        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.2.4.RELEASE<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-jdbc<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="c">&lt;!-- 集成Pebble View --&gt;</span>
        <span class="c">&lt;!-- https://mvnrepository.com/artifact/io.pebbletemplates/pebble-spring-boot-starter --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>pebble-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>3.1.3<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>


        <span class="c">&lt;!-- JDBC驱动 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>使用Spring Boot时，强烈推荐从<code class="language-plaintext highlighter-rouge">spring-boot-starter-parent</code>继承，因为这样就可以引入Spring Boot的预置配置。</p>

<p>紧接着，引入了依赖<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>和<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>，它们分别引入了Spring MVC相关依赖和Spring JDBC相关依赖，无需指定版本号，因为引入的<code class="language-plaintext highlighter-rouge">&lt;parent&gt;</code>内已经指定了，只有我们自己引入的某些第三方jar包需要指定版本号。这里引入<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>作为View，以及<code class="language-plaintext highlighter-rouge">hsqldb</code>作为嵌入式数据库。<code class="language-plaintext highlighter-rouge">hsqldb</code>已在<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>中预置了版本号，因此此处无需指定版本号。</p>

<p><strong>第三方jar的版本兼容性可以查看<a href="https://mvnrepository.com/artifact/io.pebbletemplates/pebble-spring-boot-starter/3.1.3">mvnrepository</a>下的Compile Dependencies查看兼容性。</strong></p>

<p>根据<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>的<a href="https://pebbletemplates.io/wiki/guide/spring-boot-integration/">文档</a>，加入如下配置到<code class="language-plaintext highlighter-rouge">application.yml</code>：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pebble</span><span class="pi">:</span>
  <span class="c1"># 默认为".peb"，改为"":</span>
  <span class="na">suffix</span><span class="pi">:</span>
  <span class="c1"># 开发阶段禁用模板缓存:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">prefix</span><span class="pi">:</span> <span class="s">/templates/</span>
</code></pre></div></div>

<p>对<code class="language-plaintext highlighter-rouge">Application</code>稍作改动，添加<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>这个Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 映射路径`/static/`到classpath路径:</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"classpath:/static/"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在就可以直接运行<code class="language-plaintext highlighter-rouge">Application</code>，Spring Boot自动启动了嵌入式Tomcat，当看到<code class="language-plaintext highlighter-rouge">Started Application in xxx seconds</code>时，Spring Boot应用启动成功。</p>

<p>添加测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">TestController</span><span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">test</span><span class="o">(){</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"body"</span><span class="o">,</span><span class="s">"你好"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"title"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>test.html:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/test1</code>：</p>

<p>显示：<code class="language-plaintext highlighter-rouge">你好</code></p>

<hr />

<p>之前我们定义的数据源、声明式事务、JdbcTemplate在哪创建的？怎么就可以直接注入到自己编写的<code class="language-plaintext highlighter-rouge">UserService</code>中呢？</p>

<p>这些自动创建的Bean就是Spring Boot的特色：AutoConfiguration。</p>

<p>当引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>时，启动时会自动扫描所有的<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DataSourceAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">DataSource</code>，其中配置项从<code class="language-plaintext highlighter-rouge">application.yml</code>的<code class="language-plaintext highlighter-rouge">spring.datasource</code>读取；</li>
  <li><code class="language-plaintext highlighter-rouge">DataSourceTransactionManagerAutoConfiguration</code>：自动创建了一个基于JDBC的事务管理器；</li>
  <li><code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>：自动创建了一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。</li>
</ul>

<p>因此，自动得到了一个<code class="language-plaintext highlighter-rouge">DataSource</code>、一个<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。</p>

<p>类似的，当引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>时，自动创建了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ServletWebServerFactoryAutoConfiguration</code>：自动创建一个嵌入式Web服务器，默认是Tomcat；</li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServletAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">HttpEncodingAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">CharacterEncodingFilter</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">WebMvcAutoConfiguration</code>：自动创建若干与MVC相关的Bean。</li>
  <li>…</li>
</ul>

<p>引入第三方<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>时，自动创建了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PebbleAutoConfiguration</code>：自动创建了一个<code class="language-plaintext highlighter-rouge">PebbleViewResolver</code>。</li>
</ul>

<p>Spring Boot大量使用<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>来使得许多组件被自动化配置并创建，而这些创建过程又大量使用了Spring的Conditional功能。例如<code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>，它的代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@ConditionalOnClass</span><span class="o">({</span> <span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">JdbcTemplate</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="nd">@ConditionalOnSingleCandidate</span><span class="o">(</span><span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@AutoConfigureAfter</span><span class="o">(</span><span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="nc">JdbcProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">JdbcTemplateConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">NamedParameterJdbcTemplateConfiguration</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcTemplateAutoConfiguration</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当满足条件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnClass</code>：在classpath中能找到<code class="language-plaintext highlighter-rouge">DataSource</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnSingleCandidate(DataSource.class)</code>：在当前Bean的定义中能找到唯一的<code class="language-plaintext highlighter-rouge">DataSource</code>；</li>
</ul>

<p>该<code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>就会起作用。实际创建由导入的<code class="language-plaintext highlighter-rouge">JdbcTemplateConfiguration</code>完成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="nc">JdbcOperations</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">JdbcTemplateConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nd">@Primary</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">,</span> <span class="nc">JdbcProperties</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="nc">JdbcProperties</span><span class="o">.</span><span class="na">Template</span> <span class="n">template</span> <span class="o">=</span> <span class="n">properties</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">();</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setFetchSize</span><span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getFetchSize</span><span class="o">());</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setMaxRows</span><span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getMaxRows</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getQueryTimeout</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setQueryTimeout</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">template</span><span class="o">.</span><span class="na">getQueryTimeout</span><span class="o">().</span><span class="na">getSeconds</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>创建<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>之前，要满足<code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean(JdbcOperations.class)</code>，即不存在<code class="language-plaintext highlighter-rouge">JdbcOperations</code>的Bean。</p>

<p>如果自己创建了一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，例如，在<code class="language-plaintext highlighter-rouge">Application</code>中自己写个方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>那么根据条件<code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean(JdbcOperations.class)</code>，Spring Boot就不会再创建一个重复的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>（因为<code class="language-plaintext highlighter-rouge">JdbcOperations</code>是<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的父类）。</p>

<p>可见，Spring Boot自动装配功能是通过自动扫描+条件装配实现的，这一套机制在默认情况下工作得很好，但是，如果要手动控制某个Bean的创建，就需要详细地了解Spring Boot自动创建的原理，很多时候还要跟踪<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>，以便设定条件使得某个Bean不会被自动创建。</p>

<hr />

<h2 id="集成mybatis">集成mybatis</h2>

<p>引入对应版本的依赖即可：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.2.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>yml文件添加映射文件位置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">mybatis</span><span class="pi">:</span>
  <span class="na">mapper-locations</span><span class="pi">:</span> <span class="s">classpath:mapper/*.xml</span>

<span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">root</span><span class="pi">:</span> <span class="s">INFO</span>
    <span class="na">com.aotmd</span><span class="pi">:</span> <span class="s">DEBUG</span>
    <span class="na">org.mybatis</span><span class="pi">:</span> <span class="s">DEBUG</span>
</code></pre></div></div>

<p>然后添加之前Spring的非配置部分：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", createdAt="</span> <span class="o">+</span> <span class="n">createdAt</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">User</span> <span class="nf">getByEmailAndByPassword</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">=</span><span class="n">userMapper</span><span class="o">.</span><span class="na">getByEmailAndByPassword</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>映射文件也与之前相同：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.aotmd.UserMapper"</span><span class="nt">&gt;</span><span class="c">&lt;!--命名空间为接口名称--&gt;</span>
    <span class="c">&lt;!--id需与接口方法完全一致,parameterType形参,resultType返回值类型--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getById"</span> <span class="na">parameterType=</span><span class="s">"Long"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getAll"</span>  <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users LIMIT #{offset}, #{maxResults}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getByEmailAndByPassword"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE email = #{user.email} and
        password=#{user.password}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert2"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span> <span class="na">useGeneratedKeys=</span><span class="s">"true"</span> <span class="na">keyProperty=</span><span class="s">"id"</span> <span class="na">keyColumn=</span><span class="s">"id"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>

    <span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateName"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        UPDATE users
        SET name = #{user.name}
        WHERE id = #{user.id}
    <span class="nt">&lt;/update&gt;</span>

    <span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">"deleteById"</span> <span class="na">parameterType=</span><span class="s">"long"</span><span class="nt">&gt;</span>
        DELETE
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/delete&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<p>启动，然后post访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/signin</code>，附带json：<code class="language-plaintext highlighter-rouge">{"email":"tom@example.com","password":"tomcat","name":"test"}</code>，返回body：<code class="language-plaintext highlighter-rouge">{"user":{"id":0,"email":"tom@example.com","password":"tomcat","name":"test","createdAt":***}}</code></p>

<p>再get访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/users</code>，得到：<code class="language-plaintext highlighter-rouge">[{"id":0,"email":"tom@example.com","password":"tomcat","name":"test","createdAt":***}]</code></p>

<p>功能正常。</p>

<h2 id="spring-boot-devtools">spring-boot-devtools</h2>

<p>在开发阶段，我们经常要修改代码，然后重启Spring Boot应用。经常手动停止再启动，比较麻烦。</p>

<p>Spring Boot提供了一个开发者工具，可以监控classpath路径上的文件。只要源码或配置文件发生修改，Spring Boot应用可以自动重启。在开发阶段，这个功能比较有用。</p>

<p>要使用这一开发者功能，只需添加如下依赖到<code class="language-plaintext highlighter-rouge">pom.xml</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后，没有然后了。直接启动应用程序，然后试着修改源码，保存，观察日志输出，Spring Boot会自动重新加载。</p>

<p>默认配置下，针对<code class="language-plaintext highlighter-rouge">/static</code>、<code class="language-plaintext highlighter-rouge">/public</code>和<code class="language-plaintext highlighter-rouge">/templates</code>目录中的文件修改，不会自动重启，因为禁用缓存后，这些文件的修改可以实时更新。</p>

<hr />

<p>如果没有效果，那需要修改以下设置：</p>

<ol>
  <li>
    <p>设置IDEA的编译器：</p>

    <ul>
      <li>File-&gt;Settings…-&gt;Build,Execution,Deployment-&gt;Compiler，勾选”Build project automatically”</li>
      <li>文件-&gt;设置…-&gt;构建、执行、部署-&gt;编译器，勾选”自动构建项目”</li>
    </ul>
  </li>
  <li>
    <p>应用程序运行时允许编译器自动生成：</p>

    <ul>
      <li>在IntellijIDEA中：按Ctrl+Shift+a，然后键入“注册表”并点击它。然后启用选项“compiler.Automake.Allow.When.app.Running”。</li>
      <li>在新版本这个选项已经被移到了高级设置中，文件-&gt;设置…-&gt;高级设置-&gt;编译器栏-&gt;“即使开发的应用程序当前正在运行，也允许自动make启动”。</li>
    </ul>
  </li>
</ol>

<p>还有可能是项目名称的问题：</p>

<p>在决定类路径上的条目更改时是否应触发重启时，<strong>DevTools会自动忽略名为：</strong><code class="language-plaintext highlighter-rouge">Spring-Boot</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-DevTools</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-Autoconfiguration</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-Actuator</code>和<code class="language-plaintext highlighter-rouge">Spring-Boot-starter</code>的项目。</p>

<p>使用Ctrl+F9构建项目<strong>会自动触发重新启动</strong>。如果您希望在保存类文件后立即自动触发，可以按照问题中提供的热插拔链接进行操作。</p>

<p>Spring Boot还具有在特定文件发生更改时触发重新启动的选项，可以使用以下属性在应用程序中配置该选项</p>

<blockquote>
  <p>spring.devtools.restart.trigger-file=</p>

  <p>Spring.devtools.restart.rigger-file=</p>
</blockquote>

<p>参见： <a href="https://stackoverflow.com/questions/53569745/spring-boot-developer-tools-auto-restart-doesnt-work-in-intellij">Spring Boot Developer Tools Auto restart doesn’t work in IntelliJ</a></p>

<h2 id="打包spring-boot应用">打包Spring Boot应用</h2>

<p>在Spring Boot应用中，Spring Boot自带一个更简单的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>插件用来打包，只需要在<code class="language-plaintext highlighter-rouge">pom.xml</code>中加入以下配置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>无需任何配置，Spring Boot的这款插件会自动定位应用程序的入口Class，执行以下Maven命令即可打包：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn clean package
</code></pre></div></div>

<p>以<code class="language-plaintext highlighter-rouge">spring-boot-hello</code>项目为例，打包后在<code class="language-plaintext highlighter-rouge">target</code>目录下可以看到两个jar文件：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring-boot-hello-1.0-SNAPSHOT.jar
spring-boot-hello-1.0-SNAPSHOT.jar.original
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar.original</code>是Maven标准打包插件打的jar包，它只包含我们自己的Class，不包含依赖，而<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>是Spring Boot打包插件创建的包含依赖的jar，可以直接运行：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> springboot-exec-jar-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>这样，部署一个Spring Boot应用就非常简单，无需预装任何服务器，只需要上传jar包即可。</p>

<p>在打包的时候，因为打包后的Spring Boot应用不会被修改，因此，默认情况下，<code class="language-plaintext highlighter-rouge">spring-boot-devtools</code>这个依赖不会被打包进去。但是要注意，使用早期的Spring Boot版本时，需要配置一下才能排除<code class="language-plaintext highlighter-rouge">spring-boot-devtools</code>这个依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;excludeDevtools&gt;</span>true<span class="nt">&lt;/excludeDevtools&gt;</span>
    <span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<p>如果不喜欢默认的项目名+版本号作为文件名，可以加一个配置指定文件名：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;finalName&gt;</span>awesome-app<span class="nt">&lt;/finalName&gt;</span>
        ...
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>这样打包后的文件名就是<code class="language-plaintext highlighter-rouge">awesome-app.jar</code>。</p>

<hr />

<p>在 IntelliJ IDEA 中运行打包好的 Spring Boot JAR 文件，可以按照以下步骤操作：</p>

<p><strong>方法 1：使用终端运行 JAR 文件</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到终端（View -&gt; Tool Windows -&gt; Terminal）。</li>
  <li>切换到包含 JAR 文件的目录，例如：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">cd </span>target
</code></pre></div>    </div>
  </li>
  <li>使用以下命令运行 JAR 文件：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> java <span class="nt">-jar</span> your-application.jar
</code></pre></div>    </div>
    <p>替换 <code class="language-plaintext highlighter-rouge">your-application.jar</code> 为实际的 JAR 文件名。</p>
  </li>
</ol>

<p><strong>方法 2：创建运行配置</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到 “Run/Debug Configurations”（Run -&gt; Edit Configurations）。</li>
  <li>点击左上角的 <code class="language-plaintext highlighter-rouge">+</code> 号，选择 <code class="language-plaintext highlighter-rouge">Application</code>。</li>
  <li>配置运行配置：
    <ul>
      <li><strong>Name</strong>: 运行配置的名称，例如 <code class="language-plaintext highlighter-rouge">Run Jar</code>.</li>
      <li><strong>Main class</strong>: 选择 <code class="language-plaintext highlighter-rouge">org.springframework.boot.loader.JarLauncher</code>。</li>
      <li><strong>Program arguments</strong>: 填写 JAR 文件的路径，例如 <code class="language-plaintext highlighter-rouge">path/to/your-application.jar</code>。</li>
    </ul>
  </li>
  <li>点击 “OK” 保存运行配置。</li>
  <li>在 IntelliJ IDEA 的工具栏上选择新创建的运行配置，然后点击 “Run” 按钮。</li>
</ol>

<p><strong>方法 3：使用 JAR 文件配置</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到 “Run/Debug Configurations”（Run -&gt; Edit Configurations）。</li>
  <li>点击左上角的 <code class="language-plaintext highlighter-rouge">+</code> 号，选择 <code class="language-plaintext highlighter-rouge">JAR Application</code>。</li>
  <li>配置运行配置：
    <ul>
      <li><strong>Name</strong>: 运行配置的名称，例如 <code class="language-plaintext highlighter-rouge">Run Jar</code>.</li>
      <li><strong>Path to JAR</strong>: 选择 JAR 文件的路径，例如 <code class="language-plaintext highlighter-rouge">target/your-application.jar</code>。</li>
      <li><strong>Working Directory</strong>: 设置为项目的根目录。</li>
      <li><strong>VM options</strong>: 根据需要填写，例如 <code class="language-plaintext highlighter-rouge">-Xmx1024m</code>。</li>
    </ul>
  </li>
  <li>点击 “OK” 保存运行配置。</li>
  <li>在 IntelliJ IDEA 的工具栏上选择新创建的运行配置，然后点击 “Run” 按钮。</li>
</ol>

<h2 id="瘦身spring-boot应用">瘦身Spring Boot应用</h2>

<p>使用Spring Boot提供的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>打包Spring Boot应用，可以直接获得一个完整的可运行的jar包，把它上传到服务器上再运行就极其方便。</p>

<p>但是这种方式也不是没有缺点。最大的缺点就是包太大了，动不动几十MB，在网速不给力的情况下，上传服务器非常耗时。引用到的Tomcat、Spring和其他第三方组件，只要版本号不变，这些jar就相当于每次都重复打进去，再重复上传了一遍。</p>

<p>真正经常改动的代码其实是自己编写的代码。如果只打包自己编写的代码，通常jar包也就几百KB。但是，运行的时候，classpath中没有依赖的jar包，肯定会报错。</p>

<p>如何只打自己编写的代码，同时又自动把依赖包下载到某处，并自动引入到classpath中。解决方案就是使用<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>。</p>

<p>修改<code class="language-plaintext highlighter-rouge">&lt;build&gt;</code>-<code class="language-plaintext highlighter-rouge">&lt;plugins&gt;</code>-<code class="language-plaintext highlighter-rouge">&lt;plugin&gt;</code>，给原来的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>增加一个<code class="language-plaintext highlighter-rouge">&lt;dependency&gt;</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;dependencies&gt;</span>
                    <span class="nt">&lt;dependency&gt;</span>
                        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
                        <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
                        <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
                    <span class="nt">&lt;/dependency&gt;</span>
                <span class="nt">&lt;/dependencies&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
                <span class="nt">&lt;executions&gt;</span>
                    <span class="c">&lt;!--在构建时下载依赖项--&gt;</span>
                    <span class="nt">&lt;execution&gt;</span>
                        <span class="nt">&lt;id&gt;</span>resolve<span class="nt">&lt;/id&gt;</span>
                        <span class="nt">&lt;goals&gt;</span>
                            <span class="nt">&lt;goal&gt;</span>resolve<span class="nt">&lt;/goal&gt;</span>
                        <span class="nt">&lt;/goals&gt;</span>
                        <span class="nt">&lt;inherited&gt;</span>false<span class="nt">&lt;/inherited&gt;</span>
                    <span class="nt">&lt;/execution&gt;</span>
                <span class="nt">&lt;/executions&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
    <span class="c">&lt;!-- 阿里云maven仓库 --&gt;</span>
    <span class="nt">&lt;repositories&gt;</span>
        <span class="nt">&lt;repository&gt;</span>
            <span class="nt">&lt;id&gt;</span>public<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;name&gt;</span>aliyun nexus<span class="nt">&lt;/name&gt;</span>
            <span class="nt">&lt;url&gt;</span>https://maven.aliyun.com/repository/public<span class="nt">&lt;/url&gt;</span>
            <span class="nt">&lt;releases&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/releases&gt;</span>
        <span class="nt">&lt;/repository&gt;</span>
    <span class="nt">&lt;/repositories&gt;</span>
    <span class="nt">&lt;pluginRepositories&gt;</span>
        <span class="nt">&lt;pluginRepository&gt;</span>
            <span class="nt">&lt;id&gt;</span>public<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;name&gt;</span>aliyun nexus<span class="nt">&lt;/name&gt;</span>
            <span class="nt">&lt;url&gt;</span>https://maven.aliyun.com/repository/public<span class="nt">&lt;/url&gt;</span>
            <span class="nt">&lt;releases&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/releases&gt;</span>
            <span class="nt">&lt;snapshots&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/snapshots&gt;</span>
        <span class="nt">&lt;/pluginRepository&gt;</span>
    <span class="nt">&lt;/pluginRepositories&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>如果无法自动下载：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>可以把它加入到</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
	<span class="nt">&lt;dependencies&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>加载完毕后删除。</p>

<p>然后不需要任何其他改动了，直接按正常的流程打包，执行<code class="language-plaintext highlighter-rouge">mvn clean package</code>，<code class="language-plaintext highlighter-rouge">target</code>目录最终生成的可执行<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>只有79KB左右。</p>

<p>直接运行<code class="language-plaintext highlighter-rouge">java -jar spring-boot-hello-1.0-SNAPSHOT.jar</code>，效果和上一节完全一样。显然，79KB的jar肯定无法放下Tomcat和Spring。那么，运行时这个<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>又是怎么找到它自己依赖的jar包呢？</p>

<p>实际上<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>这个插件改变了<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>的默认行为。它输出的jar包只包含自己代码编译后的class，一个很小的<code class="language-plaintext highlighter-rouge">ThinJarWrapper</code>，以及解析<code class="language-plaintext highlighter-rouge">pom.xml</code>后得到的所有依赖jar的列表。</p>

<p>运行的时候，入口实际上是<code class="language-plaintext highlighter-rouge">ThinJarWrapper</code>，它会先在指定目录搜索看看依赖的jar包是否都存在，如果不存在，先从Maven中央仓库下载到本地，然后，再执行我们自己编写的<code class="language-plaintext highlighter-rouge">main()</code>入口方法。这种方式有点类似很多在线安装程序：用户下载后得到的是一个很小的exe安装程序，执行安装程序时，会首先在线下载所需的若干巨大的文件，再进行真正的安装。</p>

<p>这个<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>在启动时搜索的默认目录是用户主目录的<code class="language-plaintext highlighter-rouge">.m2</code>，也可以指定下载目录，例如，将下载目录指定为当前目录：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>java <span class="nt">-Dthin</span>.root<span class="o">=</span><span class="nb">.</span> <span class="nt">-jar</span> spring-boot-hello-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>上述命令通过环境变量<code class="language-plaintext highlighter-rouge">thin.root</code>传入当前目录，执行后发现当前目录下自动生成了一个<code class="language-plaintext highlighter-rouge">repository</code>目录，这和Maven的默认下载目录<code class="language-plaintext highlighter-rouge">~/.m2/repository</code>的结构是完全一样的，只是它仅包含<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>所需的运行期依赖项。</p>

<p>注意：只有首次运行时会自动下载依赖项，再次运行时由于无需下载，所以启动速度会大大加快。如果删除了repository目录，再次运行时就会再次触发下载。</p>

<p><strong>预热</strong></p>

<p>把79KB大小的<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>直接扔到服务器执行，上传过程就非常快。但是，第一次在服务器上运行<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>时，仍需要从Maven中央仓库下载大量的jar包，所以，<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>还提供了一个<code class="language-plaintext highlighter-rouge">dryrun</code>选项，专门用来下载依赖项而不执行实际代码：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-Dthin</span>.dryrun<span class="o">=</span><span class="nb">true</span> <span class="nt">-Dthin</span>.root<span class="o">=</span><span class="nb">.</span> <span class="nt">-jar</span> spring-boot-hello-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>执行上述代码会在当前目录创建<code class="language-plaintext highlighter-rouge">repository</code>目录，并下载所有依赖项，但并不会运行我们编写的<code class="language-plaintext highlighter-rouge">main()</code>方法。此过程称之为“预热”（warm up）。</p>

<p>如果服务器由于安全限制不允许从外网下载文件，那么可以在本地预热，然后把<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>和<code class="language-plaintext highlighter-rouge">repository</code>目录上传到服务器。只要依赖项没有变化，后续改动只需要上传<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>即可。</p>

<p>如果在maven中使用相对路径引入了自己的jar,使用 <code class="language-plaintext highlighter-rouge">java -jar .\xxx.jar --thin.root=.</code> 会报错。如：<code class="language-plaintext highlighter-rouge">&lt;systemPath&gt;${project.basedir}/src/main/resources/lib/spring-file-storage-0.4.0.jar&lt;/systemPath&gt;</code></p>

<p><code class="language-plaintext highlighter-rouge">thin.root</code>根目录默认用的是本地的m2目录：<code class="language-plaintext highlighter-rouge">${user.home}/.m2</code></p>

<p>把自己的jar直接复制到开发环境和部署环境的m2目录下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;systemPath&gt;</span>
  ${user.home}/.m2/repository/com/***/abc.jar
<span class="nt">&lt;/systemPath&gt;</span>
</code></pre></div></div>

<p>这样就不会提示找不到依赖了。</p>

<p><a href="https://github.com/spring-projects-experimental/spring-boot-thin-launcher">Spring Boot Thin Launcher官网</a></p>

<h2 id="actuator">Actuator</h2>

<p>如果需要对应用程序的状态进行监控，</p>

<p>使用JMX需要把一些监控信息以MBean的形式暴露给JMX Server，而Spring Boot已经内置了一个监控功能叫Actuator。</p>

<p>使用Actuator非常简单，只需添加如下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后正常启动应用程序，Actuator会把它能收集到的所有信息都暴露给JMX。此外，Actuator还可以通过URL<code class="language-plaintext highlighter-rouge">/actuator/</code>挂载一些监控点，例如，输入<code class="language-plaintext highlighter-rouge">http://localhost:8080/actuator/health</code>，可以查看应用程序当前状态：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"UP"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Actuator默认把<strong>所有访问点暴露给JMX</strong>，但处于安全原因，只有<code class="language-plaintext highlighter-rouge">health</code>和<code class="language-plaintext highlighter-rouge">info</code>会暴露给Web。Actuator提供的所有访问点均在官方文档列出，要暴露更多的访问点给Web，需要在<code class="language-plaintext highlighter-rouge">application.yml</code>中加上配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">management</span><span class="pi">:</span>
  <span class="na">endpoints</span><span class="pi">:</span>
    <span class="na">web</span><span class="pi">:</span>
      <span class="na">exposure</span><span class="pi">:</span>
        <span class="na">include</span><span class="pi">:</span> <span class="s">info, health, beans, env, metrics</span>
</code></pre></div></div>

<p>要特别注意暴露的URL的安全性，例如，<code class="language-plaintext highlighter-rouge">/actuator/env</code>可以获取当前机器的所有环境变量，不可暴露给公网。</p>

<h2 id="profiles">Profiles</h2>

<p>Profile本身是Spring提供的功能，Profile表示一个环境的概念，如开发、测试和生产这3个环境：</p>

<ul>
  <li>native</li>
  <li>test</li>
  <li>production</li>
</ul>

<p>或者按git分支定义master、dev这些环境：</p>

<ul>
  <li>master</li>
  <li>dev</li>
</ul>

<p>在启动一个Spring应用程序的时候，可以传入一个或多个环境，例如：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-Dspring</span>.profiles.active<span class="o">=</span><span class="nb">test</span>,master
</code></pre></div></div>

<p>大多数情况下，使用一个环境就足够了。</p>

<p>Spring Boot对Profiles的支持在于，可以在<code class="language-plaintext highlighter-rouge">application.yml</code>中为每个环境进行配置。下面是一个示例配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">${APP_NAME:unnamed}</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
    <span class="na">hikari</span><span class="pi">:</span>
      <span class="na">auto-commit</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">connection-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">validation-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">max-lifetime</span><span class="pi">:</span> <span class="m">60000</span>
      <span class="na">maximum-pool-size</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">minimum-idle</span><span class="pi">:</span> <span class="m">1</span>

<span class="na">pebble</span><span class="pi">:</span>
  <span class="na">suffix</span><span class="pi">:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">false</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="s">${APP_PORT:8080}</span>

<span class="nn">---</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">test</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8000</span>

<span class="nn">---</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">production</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>

<span class="na">pebble</span><span class="pi">:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p>分隔符<code class="language-plaintext highlighter-rouge">---</code>，最前面的配置是默认配置，不需要指定Profile，后面的每段配置都必须以<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: xxx</code>开头，表示一个Profile。上述配置默认使用8080端口，但是在<code class="language-plaintext highlighter-rouge">test</code>环境下，使用<code class="language-plaintext highlighter-rouge">8000</code>端口，在<code class="language-plaintext highlighter-rouge">production</code>环境下，使用<code class="language-plaintext highlighter-rouge">80</code>端口，并且启用Pebble的缓存。</p>

<p>如果不指定任何Profile，直接启动应用程序，那么Profile实际上就是<code class="language-plaintext highlighter-rouge">default</code>，可以从Spring Boot启动日志看出：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>... INFO 54252 --- [  restartedMain] com.aotmd.Application                    : No active profile set, falling back to default profiles: default
</code></pre></div></div>

<p>上述日志显示未设置Profile，使用默认的Profile为<code class="language-plaintext highlighter-rouge">default</code>。</p>

<p>要以<code class="language-plaintext highlighter-rouge">test</code>环境启动，可输入如下命令：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java -Dspring.profiles.active=test -jar springboot-profiles-1.0-SNAPSHOT.jar
...
INFO 58848 --- [  restartedMain] com.aotmd.Application                    : The following profiles are active: test
...
INFO 13510 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8000 (http) with context path ''
...
</code></pre></div></div>

<p>从日志看到活动的Profile是<code class="language-plaintext highlighter-rouge">test</code>，Tomcat的监听端口是<code class="language-plaintext highlighter-rouge">8000</code>。</p>

<p>通过Profile可以实现一套代码在不同环境启用不同的配置和功能。</p>

<p>在启动一个Spring应用程序的时候，可以传入一个或多个环境。如<code class="language-plaintext highlighter-rouge">-Dspring.profiles.active=test,master</code>，那最终会以哪个为准呢？答案是：先合并配置，如果有冲突，后面的覆盖前面的。</p>

<p>也可以多文件配置，将单文件中用—分割的文档块，分离到单个文件，主配置文件<code class="language-plaintext highlighter-rouge">application.yml</code>，环境配置文件<code class="language-plaintext highlighter-rouge">application-{profile}.yml</code>，因为已经通过文件名称设置了<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: xxx</code>，因此不再需要重复写了，则<code class="language-plaintext highlighter-rouge">application-test.yml</code>的文件内容为：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8000</span>
</code></pre></div></div>

<p>通过主配置文件中<code class="language-plaintext highlighter-rouge">spring.profiles.active: test</code>进行激活环境</p>

<p>或者使用环境参数激活：</p>

<ul>
  <li>VM options参数：<code class="language-plaintext highlighter-rouge">-Dspring.profiles.active=test</code></li>
  <li>Program argument参数：<code class="language-plaintext highlighter-rouge">--spring.profiles.active=test</code></li>
</ul>

<p>在新版本中<code class="language-plaintext highlighter-rouge">spring.profiles: test</code>更换成了<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: test</code></p>

<p>假设需要一个存储服务，在本地开发时，直接使用文件存储即可，但是，在测试和生产环境，需要存储到云端，如何通过Profile实现该功能？首先，要定义存储接口<code class="language-plaintext highlighter-rouge">StorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StorageService</span> <span class="o">{</span>

    <span class="c1">// 根据URI打开InputStream:</span>
    <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>

    <span class="c1">// 根据扩展名+InputStream保存并返回URI:</span>
    <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>本地存储可通过<code class="language-plaintext highlighter-rouge">LocalStorageService</code>实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"default"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local:/var/static}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">localStorageRootDir</span><span class="o">;</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">private</span> <span class="nc">File</span> <span class="n">localStorageRoot</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Intializing local storage with root dir: {}"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">localStorageRootDir</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRootDir</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">File</span> <span class="n">targetFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span><span class="o">,</span> <span class="n">uri</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">targetFile</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">extName</span><span class="o">;</span>
        <span class="nc">File</span> <span class="n">targetFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">targetFile</span><span class="o">)))</span> <span class="o">{</span>
            <span class="n">input</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">fileName</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>而云端存储可通过<code class="language-plaintext highlighter-rouge">CloudStorageService</code>实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"!default"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CloudStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.bucket:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">bucket</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.access-key:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">accessKey</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.access-secret:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">accessSecret</span><span class="o">;</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Initializing cloud storage..."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"File not found: "</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Unable to access cloud storage."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LocalStorageService</code>使用了条件装配<code class="language-plaintext highlighter-rouge">@Profile("default")</code>，即默认启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>，而<code class="language-plaintext highlighter-rouge">CloudStorageService</code>使用了条件装配<code class="language-plaintext highlighter-rouge">@Profile("!default")</code>，即非<code class="language-plaintext highlighter-rouge">default</code>环境时，自动启用<code class="language-plaintext highlighter-rouge">CloudStorageService</code>。这样，一套代码，就实现了不同环境启用不同的配置。</p>

<h2 id="conditional">Conditional</h2>

<p>使用Profile能根据不同的Profile进行条件装配，但是Profile控制比较糙，如果想要精细控制，用Profile就很难实现。</p>

<p>Spring本身提供了条件装配<code class="language-plaintext highlighter-rouge">@Conditional</code>，但是要自己编写比较复杂的<code class="language-plaintext highlighter-rouge">Condition</code>来做判断，比较麻烦。Spring Boot则准备好了几个非常有用的条件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>：如果有指定的配置，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnBean</code>：如果有指定的Bean，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code>：如果没有指定的Bean，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingClass</code>：如果没有指定的Class，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnWebApplication</code>：在Web环境中条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnExpression</code>：根据表达式判断条件是否生效。</li>
</ul>

<p>以最常用的<code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>为例，把上一节的<code class="language-plaintext highlighter-rouge">StorageService</code>改写如下。首先，定义配置<code class="language-plaintext highlighter-rouge">storage.type=xxx</code>，用来判断条件，默认为<code class="language-plaintext highlighter-rouge">local</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">${STORAGE_TYPE:local}</span>
</code></pre></div></div>

<p>设定为<code class="language-plaintext highlighter-rouge">local</code>时，启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"local"</span><span class="o">,</span> <span class="n">matchIfMissing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LocalStorageService</code>的注解，当指定配置为<code class="language-plaintext highlighter-rouge">local</code>，或者配置不存在，均启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>。</p>

<p>设定为<code class="language-plaintext highlighter-rouge">aws</code>时，启用<code class="language-plaintext highlighter-rouge">AwsStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"aws"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>设定为<code class="language-plaintext highlighter-rouge">aliyun</code>时，启用<code class="language-plaintext highlighter-rouge">AliyunStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"aliyun"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AliyunStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>：当指定的配置属性存在且符合预期时，条件生效。</p>

<p><strong>常用属性:</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的属性名称。</li>
  <li><code class="language-plaintext highlighter-rouge">havingValue</code>: 属性值必须与此值匹配才生效。</li>
  <li><code class="language-plaintext highlighter-rouge">matchIfMissing</code>: 如果属性不存在，是否匹配。默认值是 <code class="language-plaintext highlighter-rouge">false</code>。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"feature.enabled"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"true"</span><span class="o">,</span> <span class="n">matchIfMissing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeatureConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnBean</code>：当指定的Bean存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code> 或 <code class="language-plaintext highlighter-rouge">type</code>: 要检查的Bean类型。</li>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的Bean名称。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnBean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"myBean"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanDependentConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code>：当指定的Bean不存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code> 或 <code class="language-plaintext highlighter-rouge">type</code>: 要检查的Bean类型。</li>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的Bean名称。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"myBean"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MissingBeanConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingClass</code>：当指定的类不存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code>: 要检查的类名。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnMissingClass</span><span class="o">(</span><span class="s">"com.example.SomeClass"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MissingClassConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnWebApplication</code>：在Web应用环境中，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code>: Web应用的类型，可以是 <code class="language-plaintext highlighter-rouge">SERVLET</code> 或 <code class="language-plaintext highlighter-rouge">REACTIVE</code>。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnWebApplication</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">ConditionalOnWebApplication</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">SERVLET</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebAppConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnExpression</code>：根据SpEL表达式判断条件是否生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code>: SpEL表达式。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnExpression</span><span class="o">(</span><span class="s">"'${env}'.equals('dev')"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DevEnvConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="加载配置文件">加载配置文件</h2>

<p>加载配置文件可以直接使用注解<code class="language-plaintext highlighter-rouge">@Value</code>，例如，我们定义了一个最大允许上传的文件大小配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="m">102400</span>
</code></pre></div></div>

<p>在某个FileUploader里，需要获取该配置，可使用<code class="language-plaintext highlighter-rouge">@Value</code>注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileUploader</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local.max-size:102400}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>

    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在另一个<code class="language-plaintext highlighter-rouge">UploadFilter</code>中，因为要检查文件的MD5，同时也要检查输入流的大小，因此，也需要该配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local.max-size:100000}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>

    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>多次引用同一个<code class="language-plaintext highlighter-rouge">@Value</code>不但麻烦，而且<code class="language-plaintext highlighter-rouge">@Value</code>使用字符串，缺少编译器检查，容易造成多处引用不一致（例如，<code class="language-plaintext highlighter-rouge">UploadFilter</code>把缺省值误写为<code class="language-plaintext highlighter-rouge">100000</code>）。</p>

<p>为了更好地管理配置，Spring Boot允许创建一个Bean，持有一组配置，并由Spring Boot自动注入。</p>

<p>假设在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加了如下配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="c1"># 文件存储根目录:</span>
    <span class="na">root-dir</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_ROOT:/var/storage}</span>
    <span class="c1"># 最大文件大小，默认100K:</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_MAX_SIZE:102400}</span>
    <span class="c1"># 是否允许空文件:</span>
    <span class="na">allow-empty</span><span class="pi">:</span> <span class="no">false</span>
    <span class="c1"># 允许的文件类型:</span>
    <span class="na">allow-types</span><span class="pi">:</span> <span class="s">jpg, png, gif</span>
</code></pre></div></div>

<p>可以首先定义一个Java Bean，持有该组配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span><span class="c1">//注意使用驼峰替代横线</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

    <span class="c1">// TODO: getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<p>保证Java Bean的属性名称与配置一致即可。然后，添加两个注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"storage.local"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConfigurationProperties("storage.local")</code>表示将从配置项<code class="language-plaintext highlighter-rouge">storage.local</code>读取该项的所有子项配置，并且，<code class="language-plaintext highlighter-rouge">@Configuration</code>表示<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>也是一个Spring管理的Bean，可直接注入到其他Bean中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">StorageConfiguration</span> <span class="n">storageConfig</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: root-dir = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getRootDir</span><span class="o">());</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: max-size = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getMaxSize</span><span class="o">());</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: allowed-types = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getAllowTypes</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样一来，引入<code class="language-plaintext highlighter-rouge">storage.local</code>的相关配置就很容易了，因为只需要注入<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>这个Bean，这样可以由编译器检查类型，无需编写重复的<code class="language-plaintext highlighter-rouge">@Value</code>注解。</p>

<hr />

<p>如果你的配置项有嵌套结构，可以在Java Bean中定义对应的嵌套类。下面是一个示例，其中包括嵌套配置项的处理。</p>

<p>首先，你的<code class="language-plaintext highlighter-rouge">application.yml</code>配置文件内容如下：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="na">root-dir</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_ROOT:/var/storage}</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_MAX_SIZE:102400}</span>
    <span class="na">allow-empty</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">allow-types</span><span class="pi">:</span> <span class="s">jpg, png, gif</span>
  <span class="na">remote</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">${STORAGE_REMOTE_URL:http://example.com}</span>
    <span class="na">timeout</span><span class="pi">:</span> <span class="s">${STORAGE_REMOTE_TIMEOUT:5000}</span>
</code></pre></div></div>

<p>接下来，你需要定义对应的Java Bean类来表示这个配置。可以将<code class="language-plaintext highlighter-rouge">local</code>和<code class="language-plaintext highlighter-rouge">remote</code>配置项分别封装到嵌套的类中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.context.properties.ConfigurationProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"storage"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Local</span> <span class="n">local</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Remote</span> <span class="n">remote</span><span class="o">;</span>

    <span class="c1">// Getters and setters for `local` and `remote`</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Local</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

        <span class="c1">// Getters and setters for `rootDir`, `maxSize`, `allowEmpty`, and `allowTypes`</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Remote</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">url</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">;</span>

        <span class="c1">// Getters and setters for `url` and `timeout`</span>
    <span class="o">}</span>

    <span class="c1">// Getters and setters for `local` and `remote`</span>
    <span class="kd">public</span> <span class="nc">Local</span> <span class="nf">getLocal</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">local</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLocal</span><span class="o">(</span><span class="nc">Local</span> <span class="n">local</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">local</span> <span class="o">=</span> <span class="n">local</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Remote</span> <span class="nf">getRemote</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">remote</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRemote</span><span class="o">(</span><span class="nc">Remote</span> <span class="n">remote</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">remote</span> <span class="o">=</span> <span class="n">remote</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上述代码中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Configuration</code>注解表示<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>是一个Spring管理的Bean。</li>
  <li><code class="language-plaintext highlighter-rouge">@ConfigurationProperties("storage")</code>注解表示从<code class="language-plaintext highlighter-rouge">storage</code>前缀开始读取配置项。</li>
  <li><code class="language-plaintext highlighter-rouge">Local</code>和<code class="language-plaintext highlighter-rouge">Remote</code>是两个静态嵌套类，用于表示嵌套的配置项。</li>
</ul>

<p>通过这种方式，Spring Boot会自动将配置文件中的值绑定到相应的Java Bean中。</p>

<p>你还需要为嵌套类定义getter和setter方法，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Local</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

    <span class="c1">// Getters and setters</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getRootDir</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRootDir</span><span class="o">(</span><span class="nc">String</span> <span class="n">rootDir</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">rootDir</span> <span class="o">=</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMaxSize</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMaxSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">maxSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxSize</span> <span class="o">=</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAllowEmpty</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAllowEmpty</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">allowEmpty</span> <span class="o">=</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getAllowTypes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">allowTypes</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAllowTypes</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">allowTypes</span> <span class="o">=</span> <span class="n">allowTypes</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Remote</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">url</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">;</span>

    <span class="c1">// Getters and setters</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getUrl</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">url</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUrl</span><span class="o">(</span><span class="nc">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">url</span> <span class="o">=</span> <span class="n">url</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getTimeout</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">timeout</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTimeout</span><span class="o">(</span><span class="kt">int</span> <span class="n">timeout</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">timeout</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，配置文件中的值就会自动绑定到对应的Java Bean中，并且可以在你的应用程序中通过注入<code class="language-plaintext highlighter-rouge">StorageConfiguration</code> Bean来访问这些配置值。</p>

<h2 id="禁用自动配置">禁用自动配置</h2>

<p>Spring Boot大量使用自动配置和默认配置，极大地减少了代码，通常只需要加上几个注解，并按照默认规则设定一下必要的配置即可。例如，配置JDBC，默认情况下，只需要配置一个<code class="language-plaintext highlighter-rouge">spring.datasource</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:mem:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
</code></pre></div></div>

<p>Spring Boot就会自动创建出<code class="language-plaintext highlighter-rouge">DataSource</code>、<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>、<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>，非常方便。</p>

<p>但是有时候又必须要禁用某些自动配置。例如，系统有主从两个数据库，而Spring Boot的自动配置只能配一个。</p>

<p>这个时候，针对<code class="language-plaintext highlighter-rouge">DataSource</code>相关的自动配置，就必须关掉。需要用<code class="language-plaintext highlighter-rouge">exclude</code>指定需要关掉的自动配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="c1">// 启动自动配置，但排除指定的自动配置:</span>
<span class="nd">@EnableAutoConfiguration</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>或者：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在，Spring Boot不再自动创建<code class="language-plaintext highlighter-rouge">DataSource</code>、<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>和<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>了。</p>

<hr />

<p>要实现主从数据库支持，首先需要把主从数据库配置写到<code class="language-plaintext highlighter-rouge">application.yml</code>中，仍然按照Spring Boot默认的格式写，但<code class="language-plaintext highlighter-rouge">datasource</code>改为<code class="language-plaintext highlighter-rouge">datasource-master</code>和<code class="language-plaintext highlighter-rouge">datasource-slave</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource-master</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
  <span class="na">datasource-slave</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
</code></pre></div></div>

<p>两个数据库实际上是同一个库。如果使用MySQL，可以创建一个只读用户，作为<code class="language-plaintext highlighter-rouge">datasource-slave</code>的用户来模拟一个从库。</p>

<p>分别创建两个HikariCP的<code class="language-plaintext highlighter-rouge">DataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MasterDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-master"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SlaveDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-slave"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意到上述class并未添加<code class="language-plaintext highlighter-rouge">@Configuration</code>和<code class="language-plaintext highlighter-rouge">@Component</code>，要使之生效，可以使用<code class="language-plaintext highlighter-rouge">@Import</code>导入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">MasterDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">SlaveDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述两个<code class="language-plaintext highlighter-rouge">DataSource</code>的Bean名称分别为<code class="language-plaintext highlighter-rouge">masterDataSource</code>和<code class="language-plaintext highlighter-rouge">slaveDataSource</code>，我们还需要一个最终的<code class="language-plaintext highlighter-rouge">@Primary</code>标注的<code class="language-plaintext highlighter-rouge">DataSource</code>，它采用Spring提供的<code class="language-plaintext highlighter-rouge">AbstractRoutingDataSource</code>，代码实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceContext</span> <span class="kd">implements</span> <span class="nc">AutoCloseable</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setDataSourceRoutingKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getDataSourceRoutingKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">RoutingDataSource</code>本身并不是真正的<code class="language-plaintext highlighter-rouge">DataSource</code>，它通过Map关联一组<code class="language-plaintext highlighter-rouge">DataSource</code>，下面的代码创建了包含两个<code class="language-plaintext highlighter-rouge">DataSource</code>的<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>，关联的key分别为<code class="language-plaintext highlighter-rouge">masterDataSource</code>和<code class="language-plaintext highlighter-rouge">slaveDataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">masterDataSource</span><span class="o">,</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">slaveDataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RoutingDataSource</span><span class="o">();</span>
        <span class="c1">// 关联两个DataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setTargetDataSources</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="s">"masterDataSource"</span><span class="o">,</span> <span class="n">masterDataSource</span><span class="o">,</span>
                <span class="s">"slaveDataSource"</span><span class="o">,</span> <span class="n">slaveDataSource</span><span class="o">));</span>
        <span class="c1">// 默认使用masterDataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setDefaultTargetDataSource</span><span class="o">(</span><span class="n">masterDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSourceTransactionManager</span> <span class="nf">dataSourceTransactionManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>仍然需要自己创建<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>和<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>，注入的是标记为<code class="language-plaintext highlighter-rouge">@Primary</code>的<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>。</p>

<p>这样，通过如下的代码就可以切换<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>底层使用的真正的<code class="language-plaintext highlighter-rouge">DataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
<span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(...);</span>
</code></pre></div></div>

<p>只不过写代码切换DataSource即麻烦又容易出错，更好的方式是通过注解配合AOP实现自动切换，这样，客户端代码实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
	<span class="nd">@RoutingWithSlave</span> <span class="c1">// &lt;-- 指示在此方法中使用slave数据库</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>自定义的注解 <code class="language-plaintext highlighter-rouge">@RoutingWithSlave</code> 的作用只是调用 <code class="language-plaintext highlighter-rouge">RoutingDataSourceContext</code> 的构造方法向 <code class="language-plaintext highlighter-rouge">ThreadLocal</code> 储存了字符串 <code class="language-plaintext highlighter-rouge">slaveDataSource</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="nd">@interface</span> <span class="nc">RoutingWithSlave</span><span class="o">{</span>
<span class="o">}</span>
<span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingAspect</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(routingWithSlave)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">RoutingWithSlave</span> <span class="n">routingWithSlave</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意这里使用了形参名称，注意编译时添加<code class="language-plaintext highlighter-rouge">-parameters</code>参数，保留形参名称，参见<a href="/2021/09/14/JavaWeb/#MVC">设计MVC框架</a>。<code class="language-plaintext highlighter-rouge">-parameters</code>的作用是在编译后的类文件中<strong>保留方法参数的名称</strong>。默认情况下，Java编译器在编译过程中会丢弃方法参数的名称，而只保留参数的顺序。</p>

<p>或者使用完全限定名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(com.aotmd.RoutingWithSlave)"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span>
        <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
    <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果想要确认是否真的切换了<code class="language-plaintext highlighter-rouge">DataSource</code>，可以覆写<code class="language-plaintext highlighter-rouge">determineTargetDataSource()</code>方法并打印出<code class="language-plaintext highlighter-rouge">DataSource</code>的名称：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">DataSource</span> <span class="nf">determineTargetDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">determineTargetDataSource</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"determin target datasource: {}"</span><span class="o">,</span> <span class="n">ds</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以用一个图表示创建的DataSource以及相关Bean的关系：</p>

<pre><code class="language-ascii">┌────────────────────┐       ┌──────────────────┐
│@Primary            │&lt;──────│   JdbcTemplate   │
│RoutingDataSource   │       └──────────────────┘
│ ┌────────────────┐ │       ┌──────────────────┐
│ │MasterDataSource│ │&lt;──────│DataSource        │
│ └────────────────┘ │       │TransactionManager│
│ ┌────────────────┐ │       └──────────────────┘
│ │SlaveDataSource │ │
│ └────────────────┘ │
└────────────────────┘
</code></pre>

<p><code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>引用的都是<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>，所以，这种设计的一个限制就是：在一个请求中，一旦切换了内部数据源，在同一个事务中，不能再切到另一个，否则，<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>操作的就不是同一个数据库连接。</p>

<p>完整代码：</p>

<p><code class="language-plaintext highlighter-rouge">RoutingDataSource.java</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Around</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Aspect</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.jdbc.DataSourceProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.context.properties.ConfigurationProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Primary</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Retention</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Target</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">MasterDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-master"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SlaveDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-slave"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">DataSource</span> <span class="nf">determineTargetDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">determineTargetDataSource</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"determin target datasource: {}"</span><span class="o">,</span> <span class="n">ds</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceContext</span> <span class="kd">implements</span> <span class="nc">AutoCloseable</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setDataSourceRoutingKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getDataSourceRoutingKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">masterDataSource</span><span class="o">,</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">slaveDataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RoutingDataSource</span><span class="o">();</span>
        <span class="c1">// 关联两个DataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setTargetDataSources</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="s">"masterDataSource"</span><span class="o">,</span> <span class="n">masterDataSource</span><span class="o">,</span>
                <span class="s">"slaveDataSource"</span><span class="o">,</span> <span class="n">slaveDataSource</span><span class="o">));</span>
        <span class="c1">// 默认使用masterDataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setDefaultTargetDataSource</span><span class="o">(</span><span class="n">masterDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSourceTransactionManager</span> <span class="nf">dataSourceTransactionManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="nd">@interface</span> <span class="nc">RoutingWithSlave</span><span class="o">{</span>

<span class="o">}</span>
<span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">RoutingAspect</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(routingWithSlave)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">RoutingWithSlave</span> <span class="n">routingWithSlave</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Application.java:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd"</span><span class="o">)</span>
<span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">MasterDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">SlaveDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 映射路径`/static/`到classpath路径:</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"classpath:/static/"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>访问数据库可以用之前的。</p>

<h2 id="filter">Filter</h2>

<p>在Spring Boot中，添加一个<code class="language-plaintext highlighter-rouge">Filter</code>更简单了，可以做到零配置。</p>

<p>Spring Boot会自动扫描所有的<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>类型的Bean，然后，将它们返回的<code class="language-plaintext highlighter-rouge">Filter</code>自动注册到Servlet容器中，无需任何配置。</p>

<p>以<code class="language-plaintext highlighter-rouge">AuthFilter</code>为例，首先编写一个<code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>，它继承自<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthFilterRegistrationBean</span> <span class="kd">extends</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Filter</span> <span class="nf">getFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setOrder</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthFilter</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">class</span> <span class="nc">AuthFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>本身不是<code class="language-plaintext highlighter-rouge">Filter</code>，它实际上是<code class="language-plaintext highlighter-rouge">Filter</code>的工厂。Spring Boot会调用<code class="language-plaintext highlighter-rouge">getFilter()</code>，把返回的<code class="language-plaintext highlighter-rouge">Filter</code>注册到Servlet容器中。因为可以在<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>中注入需要的资源，然后，在返回的<code class="language-plaintext highlighter-rouge">AuthFilter</code>中，这个内部类可以引用外部类的所有字段，自然也包括注入的<code class="language-plaintext highlighter-rouge">UserService</code>，所以，整个过程完全基于Spring的IoC容器完成。</p>

<p><code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>使用了<code class="language-plaintext highlighter-rouge">setOrder(10)</code>，因为Spring Boot支持给多个<code class="language-plaintext highlighter-rouge">Filter</code>排序，<strong>数字小的在前面</strong>，所以，多个<code class="language-plaintext highlighter-rouge">Filter</code>的顺序是可以固定的。</p>

<p>再编写一个<code class="language-plaintext highlighter-rouge">ApiFilter</code>，专门过滤<code class="language-plaintext highlighter-rouge">/api/*</code>这样的URL。首先编写一个<code class="language-plaintext highlighter-rouge">ApiFilterRegistrationBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiFilterRegistrationBean</span> <span class="kd">extends</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setOrder</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">setFilter</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApiFilter</span><span class="o">());</span>
        <span class="n">setUrlPatterns</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">class</span> <span class="nc">ApiFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">ApiFilterRegistrationBean</code>和<code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>又有所不同。因为要过滤URL，而不是针对所有URL生效，因此，在<code class="language-plaintext highlighter-rouge">@PostConstruct</code>方法中，通过<code class="language-plaintext highlighter-rouge">setFilter()</code>设置一个<code class="language-plaintext highlighter-rouge">Filter</code>实例后，再调用<code class="language-plaintext highlighter-rouge">setUrlPatterns()</code>传入要过滤的URL列表。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 是 Spring Framework 中的一个类，用于注册和配置 Servlet 过滤器。它提供了一些常用的方法来控制过滤器的注册和行为。以下是 <code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 的一些常用方法及其简要说明：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">setFilter(Filter filter)</code></strong>：设置过滤器实例。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="n">registrationBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;&gt;();</span>
<span class="n">registrationBean</span><span class="o">.</span><span class="na">setFilter</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyFilter</span><span class="o">());</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setUrlPatterns(Collection&lt;String&gt; urlPatterns)</code></strong>：设置过滤器的 URL 模式。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setUrlPatterns</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">addUrlPatterns(String... urlPatterns)</code></strong>：添加过滤器的 URL 模式。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">addUrlPatterns</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setServletNames(Collection&lt;String&gt; servletNames)</code></strong>：设置过滤器要应用的 Servlet 名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setServletNames</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"myServlet"</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">addServletNames(String... servletNames)</code></strong>：添加过滤器要应用的 Servlet 名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">addServletNames</span><span class="o">(</span><span class="s">"myServlet"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setOrder(int order)</code></strong>：设置过滤器的执行顺序，值越小优先级越高。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setDispatcherTypes(EnumSet&lt;DispatcherType&gt; dispatcherTypes)</code></strong>：设置过滤器的分发类型（如 REQUEST、FORWARD、INCLUDE 等）。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setDispatcherTypes</span><span class="o">(</span><span class="nc">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">,</span> <span class="nc">DispatcherType</span><span class="o">.</span><span class="na">FORWARD</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setAsyncSupported(boolean isAsyncSupported)</code></strong>：设置过滤器是否支持异步操作。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setAsyncSupported</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setName(String name)</code></strong>：设置过滤器的名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"myFilter"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setInitParameters(Map&lt;String, String&gt; initParameters)</code></strong>：设置过滤器的初始化参数。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">initParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">initParams</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"param1"</span><span class="o">,</span> <span class="s">"value1"</span><span class="o">);</span>
<span class="n">registrationBean</span><span class="o">.</span><span class="na">setInitParameters</span><span class="o">(</span><span class="n">initParams</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>以下是一个完整的示例，展示如何使用 <code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 来注册和配置一个过滤器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.web.servlet.FilterRegistrationBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.Filter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.FilterChain</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.FilterConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.EnumSet</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="nf">myFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="n">registrationBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;&gt;();</span>
        
        <span class="nc">Filter</span> <span class="n">myFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Filter</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">FilterConfig</span> <span class="n">filterConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>
                <span class="c1">// 初始化代码</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
                    <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
                <span class="c1">// 过滤器逻辑</span>
                <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
                <span class="c1">// 销毁代码</span>
            <span class="o">}</span>
        <span class="o">};</span>
        
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setFilter</span><span class="o">(</span><span class="n">myFilter</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setUrlPatterns</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setDispatcherTypes</span><span class="o">(</span><span class="nc">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">));</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setAsyncSupported</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"myFilter"</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setInitParameters</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"param1"</span><span class="o">,</span> <span class="s">"value1"</span><span class="o">));</span>
        
        <span class="k">return</span> <span class="n">registrationBean</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个示例中，<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 被用来注册一个简单的过滤器，并设置了一些常见的配置选项。</p>

<h2 id="在项目启动后运行一段代码">在项目启动后运行一段代码</h2>

<p>在Spring Boot项目启动后运行一段代码，你可以使用<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口。两者的用法类似，都可以在应用程序启动完成后执行特定代码。</p>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">CommandLineRunner</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">CommandLineRunner</code>接口提供了一个<code class="language-plaintext highlighter-rouge">run</code>方法，在Spring Boot启动后立即执行。你可以创建一个实现此接口的类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 在应用程序启动后运行的代码</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Spring Boot 应用程序已启动，执行自定义代码..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">ApplicationRunner</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口与<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>类似，但它接受一个<code class="language-plaintext highlighter-rouge">ApplicationArguments</code>对象，可以更方便地访问应用程序参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.ApplicationArguments</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.ApplicationRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplicationRunner</span> <span class="kd">implements</span> <span class="nc">ApplicationRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 在应用程序启动后运行的代码</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Spring Boot 应用程序已启动，执行自定义代码..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果有多个<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>实现，并且希望它们按特定顺序执行，你可以实现<code class="language-plaintext highlighter-rouge">Ordered</code>接口或使用<code class="language-plaintext highlighter-rouge">@Order</code>注解。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.core.annotation.Order</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner1</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"第一个运行的 CommandLineRunner"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner2</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"第二个运行的 CommandLineRunner"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，<code class="language-plaintext highlighter-rouge">MyCommandLineRunner1</code>将会在<code class="language-plaintext highlighter-rouge">MyCommandLineRunner2</code>之前执行。</p>

<p>在Spring Boot应用启动后运行代码的两种常用方法是实现<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口。选择其中之一，并将所需逻辑放入<code class="language-plaintext highlighter-rouge">run</code>方法中。通过实现<code class="language-plaintext highlighter-rouge">Ordered</code>接口或使用<code class="language-plaintext highlighter-rouge">@Order</code>注解，你可以控制多个运行器的执行顺序。</p>

<h2 id="集成open-api">集成Open API</h2>

<p><a href="https://www.openapis.org/">Open API</a>是一个标准，它的主要作用是<strong>描述REST API</strong>，既可以作为文档给开发者阅读，又可以让机器根据这个文档自动生成客户端代码等。</p>

<p>在Spring Boot应用中，假设编写了一堆REST API，只需要在<code class="language-plaintext highlighter-rouge">pom.xml</code>中加入以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springdoc<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>直接启动应用，打开浏览器输入<code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui.html</code></p>

<p>立刻可以看到自动生成的API文档，点击某个API还可以交互，即输入API参数，点“Try it out”按钮，获得运行结果。</p>

<p>因为引入<code class="language-plaintext highlighter-rouge">springdoc-openapi-ui</code>这个依赖后，它自动引入Swagger UI用来创建API文档。可以给API加入一些描述信息，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Operation</span><span class="o">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s">"Get specific user object by it's id."</span><span class="o">)</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@Parameter</span><span class="o">(</span><span class="n">description</span> <span class="o">=</span> <span class="s">"id of the user."</span><span class="o">)</span> <span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUserById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
	<span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@Operation</code>可以对API进行描述，<code class="language-plaintext highlighter-rouge">@Parameter</code>可以对参数进行描述，它们的目的是用于生成API文档的描述信息。</p>

<p>大多数情况下，不需要任何配置，就直接得到了一个运行时动态生成的可交互的API文档，该API文档总是和代码保持同步，大大简化了文档的编写工作。</p>

<p>要自定义文档的样式、控制某些API显示等，请参考<a href="https://springdoc.org/">springdoc文档</a>。</p>

<p><strong>配置反向代理</strong></p>

<p>如果在服务器上，用户访问的域名是<code class="language-plaintext highlighter-rouge">https://example.com</code>，但内部是通过类似Nginx这样的反向代理访问实际的Spring Boot应用，比如<code class="language-plaintext highlighter-rouge">http://localhost:8080</code>，这个时候，在页面<code class="language-plaintext highlighter-rouge">https://example.com/swagger-ui.html</code>上，显示的URL仍然是<code class="language-plaintext highlighter-rouge">http://localhost:8080</code>，这样一来，就无法直接在页面执行API，非常不方便。</p>

<p>这是因为Spring Boot内置的Tomcat默认获取的服务器名称是<code class="language-plaintext highlighter-rouge">localhost</code>，端口是实际监听端口，而不是对外暴露的域名和<code class="language-plaintext highlighter-rouge">80</code>或<code class="language-plaintext highlighter-rouge">443</code>端口。要让Tomcat获取到对外暴露的域名等信息，必须在Nginx配置中传入必要的HTTP Header，常用的配置如下：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Nginx配置</span>
<span class="n">server</span> <span class="p">{</span>
    <span class="o">...</span>
    <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
        <span class="n">proxy_pass</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8080</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$host</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">Proto</span> <span class="vg">$scheme</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后，在Spring Boot的<code class="language-plaintext highlighter-rouge">application.yml</code>中，加入如下配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="c1"># 实际监听端口:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
  <span class="c1"># 从反向代理读取相关的HTTP Header:</span>
  <span class="na">forward-headers-strategy</span><span class="pi">:</span> <span class="s">native</span>
</code></pre></div></div>

<p>重启Spring Boot应用，即可在Swagger中显示正确的URL。</p>

<p><strong>使用knife4j</strong></p>

<p>在日常开发中，写接口文档是我们必不可少的，而Knife4j就是一个接口文档工具，可以看作是Swagger的升级版，但是界面比Swagger更好看，功能更丰富</p>

<p>早期，swagger-boostrap-ui是1.x版本，如今swagger-bootsrap-ui到2.x，同时也更改名字Knife4j，适用于单体和微服务项目。</p>

<p><a href="https://doc.xiaominfo.com/">Knife4j官方网站</a>。</p>

<p>导入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.github.xiaoymin<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>knife4j-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>创建配置类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.swagger.annotations.ApiOperation</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.ApiInfoBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.PathSelectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.RequestHandlerSelectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.service.ApiInfo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.service.ApiKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.spi.DocumentationType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.spring.web.plugins.Docket</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.swagger2.annotations.EnableSwagger2</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">collect</span><span class="o">.</span><span class="na">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">;</span>



<span class="cm">/**
 * Swagger2配置信息
 * 这里分了两组显示
 * 第一组是api，当作用户端接口
 * 第二组是admin，当作后台管理接口
 * 也可以根据实际情况来减少或者增加组
 */</span>

<span class="nd">@Configuration</span>
<span class="nd">@EnableSwagger2</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Swagger2Config</span><span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">Docket</span> <span class="nf">createRestApi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Docket</span><span class="o">(</span><span class="nc">DocumentationType</span><span class="o">.</span><span class="na">SWAGGER_2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">apiInfo</span><span class="o">(</span><span class="n">apiInfo</span><span class="o">())</span>
                <span class="o">.</span><span class="na">select</span><span class="o">()</span>
                <span class="c1">//加了ApiOperation注解的类，生成接口文档</span>
                <span class="o">.</span><span class="na">apis</span><span class="o">(</span><span class="nc">RequestHandlerSelectors</span><span class="o">.</span><span class="na">withMethodAnnotation</span><span class="o">(</span><span class="nc">ApiOperation</span><span class="o">.</span><span class="na">class</span><span class="o">))</span>
                <span class="c1">//包下的类，生成接口文档</span>
                <span class="c1">//.apis(RequestHandlerSelectors.basePackage("com.aotmd"))</span>
                <span class="o">.</span><span class="na">paths</span><span class="o">(</span><span class="nc">PathSelectors</span><span class="o">.</span><span class="na">any</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                <span class="o">.</span><span class="na">directModelSubstitute</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">securitySchemes</span><span class="o">(</span><span class="n">security</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">ApiInfo</span> <span class="nf">apiInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiInfoBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">"`文档`"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">"文档"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">termsOfServiceUrl</span><span class="o">(</span><span class="s">"*"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">version</span><span class="o">(</span><span class="s">"2.0.0"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ApiKey</span><span class="o">&gt;</span> <span class="nf">security</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">newArrayList</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">ApiKey</span><span class="o">(</span><span class="s">"token"</span><span class="o">,</span> <span class="s">"token"</span><span class="o">,</span> <span class="s">"header"</span><span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实体类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ApiModel</span><span class="o">(</span><span class="s">"用户实体类"</span><span class="o">)</span>
<span class="nd">@Data</span>
<span class="nd">@Builder</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwaggerUser</span> <span class="o">{</span>
    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">"用户Id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">"用户名称"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Api</span><span class="o">(</span><span class="n">tags</span> <span class="o">=</span> <span class="s">"用户端控制器"</span><span class="o">)</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>

    <span class="nd">@ApiOperation</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"获取数据"</span><span class="o">)</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SwaggerUser</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@ApiParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户Id"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">,</span>
                                  <span class="nd">@ApiParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"name"</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户名称"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SwaggerUser</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">SwaggerUser</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">id</span><span class="o">(</span><span class="n">id</span><span class="o">).</span><span class="na">name</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行后访问<code class="language-plaintext highlighter-rouge">http://127.0.0.1:8080/doc.html</code>即可。</p>

<h2 id="redis">Redis</h2>

<p>在Spring Boot中，要访问Redis，可以直接引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-data-redis</code>依赖，它实际上是Spring Data的一个子项目——Spring Data Redis，主要用到了这几个组件：</p>

<ul>
  <li>Lettuce：一个基于Netty的高性能Redis客户端；</li>
  <li>RedisTemplate：一个类似于JdbcTemplate的接口，用于简化Redis的操作。</li>
</ul>

<p>因为Spring Data Redis引入的依赖项很多，如果只是为了使用Redis，完全可以只引入Lettuce，剩下的操作都自己来完成。</p>

<p>如何把一个第三方组件引入到Spring Boot中：</p>

<p>首先，添加必要的几个依赖项：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.lettuce<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>lettuce-core<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>commons-pool2<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">spring-boot-starter-parent</code>中已经把常用组件的版本号确定下来了，因此不需要显式设置版本号。</p>

<p>第一步是在配置文件<code class="language-plaintext highlighter-rouge">application.yml</code>中添加Redis的相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">${REDIS_HOST:localhost}</span>
    <span class="na">port</span><span class="pi">:</span> <span class="s">${REDIS_PORT:6379}</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${REDIS_PASSWORD:}</span>
    <span class="na">ssl</span><span class="pi">:</span> <span class="s">${REDIS_SSL:false}</span>
    <span class="na">database</span><span class="pi">:</span> <span class="s">${REDIS_DATABASE:0}</span>
</code></pre></div></div>

<p>然后，通过<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>来加载它：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">host</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">database</span><span class="o">;</span>

    <span class="c1">// getters and setters...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再编写一个<code class="language-plaintext highlighter-rouge">@Bean</code>方法来创建<code class="language-plaintext highlighter-rouge">RedisClient</code>，可以直接放在<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Bean</span>
    <span class="nc">RedisClient</span> <span class="nf">redisClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">""</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">trim</span><span class="o">()))</span> <span class="o">{</span>
     		<span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="o">}</span>
        <span class="nc">RedisURI</span> <span class="n">uri</span> <span class="o">=</span> <span class="nc">RedisURI</span><span class="o">.</span><span class="na">Builder</span><span class="o">.</span><span class="na">redis</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">host</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">port</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withPassword</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withDatabase</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">database</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="k">return</span> <span class="nc">RedisClient</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在启动入口引入该配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@Import</span><span class="o">(</span><span class="nc">RedisConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 加载Redis配置</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果在<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>中标注<code class="language-plaintext highlighter-rouge">@Configuration</code>，则可通过Spring Boot的自动扫描机制自动加载，否则需要使用<code class="language-plaintext highlighter-rouge">@Import</code>手动加载。</p>

<p>用一个<code class="language-plaintext highlighter-rouge">RedisService</code>来封装所有的Redis操作。基础代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">RedisClient</span> <span class="n">redisClient</span><span class="o">;</span>

    <span class="nc">GenericObjectPool</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">redisConnectionPool</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">poolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;&gt;();</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxTotal</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxIdle</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestOnReturn</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestWhileIdle</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span> <span class="o">=</span> <span class="nc">ConnectionPoolSupport</span><span class="o">.</span><span class="na">createGenericObjectPool</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">redisClient</span><span class="o">.</span><span class="na">connect</span><span class="o">(),</span> <span class="n">poolConfig</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PreDestroy</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisClient</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码引入了Commons Pool的一个对象池，用于缓存Redis连接。因为Lettuce本身是基于Netty的异步驱动，在异步访问时并不需要创建连接池，但基于Servlet模型的同步访问时，连接池是有必要的。连接池在<code class="language-plaintext highlighter-rouge">@PostConstruct</code>方法中初始化，在<code class="language-plaintext highlighter-rouge">@PreDestroy</code>方法中关闭。</p>

<p>下一步，是在<code class="language-plaintext highlighter-rouge">RedisService</code>中添加Redis访问方法。为了简化代码，仿照<code class="language-plaintext highlighter-rouge">JdbcTemplate.execute(ConnectionCallback)</code>方法，传入回调函数，可大幅减少样板代码。</p>

<p>首先定义回调函数接口<code class="language-plaintext highlighter-rouge">SyncCommandCallback</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// 在此操作Redis:</span>
    <span class="no">T</span> <span class="nf">doInConnection</span><span class="o">(</span><span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写<code class="language-plaintext highlighter-rouge">executeSync</code>方法，在该方法中，获取Redis连接，利用callback操作Redis，最后释放连接，并返回操作结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">executeSync</span><span class="o">(</span><span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">redisConnectionPool</span><span class="o">.</span><span class="na">borrowObject</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setAutoFlushCommands</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">callback</span><span class="o">.</span><span class="na">doInConnection</span><span class="o">(</span><span class="n">commands</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"executeSync redis failed."</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以针对常用操作把它封装一下，例如<code class="language-plaintext highlighter-rouge">set</code>和<code class="language-plaintext highlighter-rouge">get</code>命令：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>类似的，<code class="language-plaintext highlighter-rouge">hget</code>和<code class="language-plaintext highlighter-rouge">hset</code>操作如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hset</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">hget</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="nf">hgetall</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hgetall</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>常用命令可以提供方法接口，如果要执行任意复杂的操作，就可以通过<code class="language-plaintext highlighter-rouge">executeSync(SyncCommandCallback&lt;T&gt;)</code>来完成。</p>

<p>完成了<code class="language-plaintext highlighter-rouge">RedisService</code>后，就可以使用Redis了。例如，在<code class="language-plaintext highlighter-rouge">UserController</code>中，在Session中只存放登录用户的ID，用户信息存放到Redis，提供两个方法用于读写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">KEY_USER_ID</span> <span class="o">=</span> <span class="s">"__userid__"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">KEY_USERS</span> <span class="o">=</span> <span class="s">"__users__"</span><span class="o">;</span>

    <span class="nd">@Autowired</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>
    <span class="nd">@Autowired</span> <span class="nc">RedisService</span> <span class="n">redisService</span><span class="o">;</span>

    <span class="c1">// 把User写入Redis:</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">putUserIntoRedis</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">redisService</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="no">KEY_USERS</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">user</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="c1">// 从Redis读取User:</span>
    <span class="kd">private</span> <span class="nc">User</span> <span class="nf">getUserFromRedis</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="no">KEY_USER_ID</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">redisService</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="no">KEY_USERS</span><span class="o">,</span> <span class="n">id</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用户登录成功后，把ID放入Session，把<code class="language-plaintext highlighter-rouge">User</code>实例放入Redis：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">doSignin</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"email"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"password"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">signin</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="no">KEY_USER_ID</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">putUserIntoRedis</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"signin.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="n">email</span><span class="o">,</span> <span class="s">"error"</span><span class="o">,</span> <span class="s">"Signin failed"</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"redirect:/profile"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>需要获取<code class="language-plaintext highlighter-rouge">User</code>时，从Redis取出：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">getUserFromRedis</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"redirect:/signin"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"profile.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>从Redis读写Java对象时，序列化和反序列化是应用程序的工作，上述代码使用JSON作为序列化方案，简单可靠。也可将相关序列化操作封装到<code class="language-plaintext highlighter-rouge">RedisService</code>中，这样可以提供更加通用的方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>redis在各大操作系统中的安装使用都非常简单，默认配置就是监听<code class="language-plaintext highlighter-rouge">127.0.0.1:6379</code>，且无帐号密码。</p>

<p><a href="https://redis.io/docs/latest/operate/oss_and_stack/install/install-redis/install-redis-on-windows/">在windows通过虚拟机安装redis</a>，或通过doker镜像运行：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull redis
docker run <span class="nt">--name</span> my-redis <span class="nt">-p</span> 6379:6379 <span class="nt">-d</span> redis
</code></pre></div></div>

<p>也可以使用<a href="https://github.com/microsoftarchive/redis">古早版本</a>，输入：<code class="language-plaintext highlighter-rouge">redis-server redis.windows.conf</code> 即可启动redis。</p>

<p>如果要部署Redis为windows下的服务，可以输入：<code class="language-plaintext highlighter-rouge">redis-server --service-install redis.windows.conf</code>。</p>

<p>其他常用命令：</p>

<ul>
  <li>卸载服务：<code class="language-plaintext highlighter-rouge">redis-server --service-uninstall</code></li>
  <li>开启服务：<code class="language-plaintext highlighter-rouge">redis-server --service-start</code></li>
  <li>停止服务：<code class="language-plaintext highlighter-rouge">redis-server --service-stop</code></li>
</ul>

<p>测试：</p>

<p>可以通过set、get指令查看是否成功启动：</p>

<pre><code class="language-cmd">C:\Redis&gt;redis-cli
127.0.0.1:6379&gt;set A 123
127.0.0.1:6379&gt;get A
</code></pre>

<h2 id="集成artemis">集成Artemis</h2>

<p>ActiveMQ Artemis是一个JMS服务器，在<a href="/2024/06/05/Spring/#集成jms">集成JMS</a>一节中介绍如何在Spring中集成Artemis，现在介绍在Spring Boot中集成Artemis。</p>

<p>创建一个<code class="language-plaintext highlighter-rouge">springboot-jms</code>工程，引入的依赖除了<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>，<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>等以外，新增<code class="language-plaintext highlighter-rouge">spring-boot-starter-artemis</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-artemis<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>同样无需指定版本号。</p>

<p>如何创建Artemis服务器已经在集成JMS一节中详细讲述了，此处不再重复。创建Artemis服务器后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中加入相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">artemis</span><span class="pi">:</span>
    <span class="c1"># 指定连接外部Artemis服务器，而不是启动嵌入式服务:</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">native</span>
    <span class="c1"># 服务器地址和端口号:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">127.0.0.1</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">61616</span>
    <span class="c1"># 连接用户名和口令由创建Artemis服务器时指定:</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">password</span>
</code></pre></div></div>

<p>和Spring版本的JMS代码相比，使用Spring Boot集成JMS时，只要引入了<code class="language-plaintext highlighter-rouge">spring-boot-starter-artemis</code>，Spring Boot会自动创建JMS相关的<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>、<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>、<code class="language-plaintext highlighter-rouge">JmsTemplate</code>等，无需再手动配置了。</p>

<p>发送消息时只需要引入<code class="language-plaintext highlighter-rouge">JmsTemplate</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMailMessage</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"..."</span><span class="o">;</span>
        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">MessageCreator</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">createMessage</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JMSException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>接收消息时只需要标注<code class="language-plaintext highlighter-rouge">@JmsListener</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailMessageListener</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@JmsListener</span><span class="o">(</span><span class="n">destination</span> <span class="o">=</span> <span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="n">concurrency</span> <span class="o">=</span> <span class="s">"10"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMailMessageReceived</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received message: "</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>应用程序收发消息的逻辑和Spring中使用JMS完全相同，只是通过Spring Boot，可以把工程简化到只需要设定Artemis相关配置。</p>

<h2 id="集成rabbitmq">集成RabbitMQ</h2>

<p>JMS是JavaEE的消息服务标准接口，但是，如果Java程序要和另一种语言编写的程序通过消息服务器进行通信，那么JMS就不太适合了。</p>

<p>AMQP是一种使用广泛的独立于语言的消息协议，它的全称是Advanced Message Queuing Protocol，即高级消息队列协议，它定义了一种二进制格式的消息流，任何编程语言都可以实现该协议。实际上，Artemis也支持AMQP，但实际应用最广泛的AMQP服务器是使用<a href="https://www.erlang.org/">Erlang</a>编写的<a href="https://www.rabbitmq.com/">RabbitMQ</a>。</p>

<p><strong>安装RabbitMQ</strong></p>

<p>先从RabbitMQ的官网<a href="https://www.rabbitmq.com/download.html">下载</a>并安装RabbitMQ，安装和启动RabbitMQ请参考官方文档。要验证启动是否成功，可以访问RabbitMQ的管理后台<a href="http://localhost:15672/">http://localhost:15672</a>，RabbitMQ后台管理的默认用户名和口令均为<code class="language-plaintext highlighter-rouge">guest</code>。</p>

<p><strong>AMQP协议</strong></p>

<p>AMQP协议和JMS协议有所不同。在JMS中，有两种类型的消息通道：</p>

<ol>
  <li>点对点的Queue，即Producer发送消息到指定的Queue，接收方从Queue收取消息；</li>
  <li>一对多的Topic，即Producer发送消息到指定的Topic，任意多个在线的接收方均可从Topic获得一份完整的消息副本。</li>
</ol>

<p>而AMQP协议比JMS要复杂一点，它只有Queue，没有Topic，并且引入了Exchange的概念。当Producer想要发送消息的时候，它将消息发送给Exchange，由Exchange将消息根据各种规则投递到一个或多个Queue：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                    ┌───────┐
                                ┌──▶│Queue-1│
                  ┌──────────┐  │   └───────┘
              ┌──▶│Exchange-1│──┤
┌──────────┐  │   └──────────┘  │   ┌───────┐
│Producer-1│──┤                 ├──▶│Queue-2│
└──────────┘  │   ┌──────────┐  │   └───────┘
              └──▶│Exchange-2│──┤
                  └──────────┘  │   ┌───────┐
                                └──▶│Queue-3│
                                    └───────┘
</code></pre></div></div>

<p>如果某个Exchange总是把消息发送到固定的Queue，那么这个消息通道就相当于JMS的Queue。如果某个Exchange把消息发送到多个Queue，那么这个消息通道就相当于JMS的Topic。和JMS的Topic相比，Exchange的投递规则更灵活，比如一个“登录成功”的消息被投递到Queue-1和Queue-2，而“登录失败”的消息则被投递到Queue-3。这些路由规则称之为Binding，通常都在RabbitMQ的管理后台设置。</p>

<p>在RabbitMQ中，首先创建3个Queue，分别用于发送邮件、短信和App通知：q_app、q_mail、q_sms。</p>

<p>创建Queue时注意到可配置为持久化（Durable）和非持久化（Transient），当Consumer不在线时，持久化的Queue会暂存消息，非持久化的Queue会丢弃消息。</p>

<p>然后在Exchanges中创建一个Direct类型的Exchange，命名为<code class="language-plaintext highlighter-rouge">registration</code>，并添加q_mail、q_sms到Binding。</p>

<p>Binding的规则就是：凡是发送到<code class="language-plaintext highlighter-rouge">registration</code>这个Exchange的消息，均被发送到<code class="language-plaintext highlighter-rouge">q_mail</code>和<code class="language-plaintext highlighter-rouge">q_sms</code>这两个Queue。</p>

<p>再创建一个Direct类型的Exchange，命名为<code class="language-plaintext highlighter-rouge">login</code>，并添加q_app、q_mail、q_sms到Binding，且指定q_sms，Routing Key=”login_failed”。</p>

<p>当发送消息给<code class="language-plaintext highlighter-rouge">login</code>这个Exchange时，如果消息没有指定Routing Key，则被投递到<code class="language-plaintext highlighter-rouge">q_app</code>和<code class="language-plaintext highlighter-rouge">q_mail</code>，如果消息指定了Routing Key=”login_failed”，那么消息被投递到<code class="language-plaintext highlighter-rouge">q_sms</code>。</p>

<p>配置好RabbitMQ后，就可以基于Spring Boot开发AMQP程序。</p>

<p><strong>使用RabbitMQ</strong></p>

<p>首先创建Spring Boot工程<code class="language-plaintext highlighter-rouge">springboot-rabbitmq</code>，并添加如下依赖引入RabbitMQ：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加RabbitMQ相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">rabbitmq</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">5672</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">guest</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">guest</span>
</code></pre></div></div>

<p>并在<code class="language-plaintext highlighter-rouge">Application</code>中添加一个<code class="language-plaintext highlighter-rouge">MessageConverter</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.amqp.support.converter.MessageConverter</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Bean</span>
    <span class="nc">MessageConverter</span> <span class="nf">createMessageConverter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Jackson2JsonMessageConverter</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MessageConverter</code>用于将Java对象转换为RabbitMQ的消息。默认情况下，Spring Boot使用<code class="language-plaintext highlighter-rouge">SimpleMessageConverter</code>，只能发送<code class="language-plaintext highlighter-rouge">String</code>和<code class="language-plaintext highlighter-rouge">byte[]</code>类型的消息，不太方便。使用<code class="language-plaintext highlighter-rouge">Jackson2JsonMessageConverter</code>，就可以发送JavaBean对象，由Spring Boot自动序列化为JSON并以文本消息传递。</p>

<p>因为引入了starter，所有RabbitMQ相关的Bean均自动装配。</p>

<p>可以直接注入<code class="language-plaintext highlighter-rouge">RabbitTemplate</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRegistrationMessage</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="s">"registration"</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendLoginMessage</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">routingKey</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">success</span> <span class="o">?</span> <span class="s">""</span> <span class="o">:</span> <span class="s">"login_failed"</span><span class="o">;</span>
        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="n">routingKey</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>发送消息时，使用<code class="language-plaintext highlighter-rouge">convertAndSend(exchange, routingKey, message)</code>可以指定Exchange、Routing Key以及消息本身。这里传入JavaBean后会自动序列化为JSON文本。上述代码将<code class="language-plaintext highlighter-rouge">RegistrationMessage</code>发送到<code class="language-plaintext highlighter-rouge">registration</code>，将<code class="language-plaintext highlighter-rouge">LoginMessage</code>发送到<code class="language-plaintext highlighter-rouge">login</code>，并根据登录是否成功来指定Routing Key。</p>

<p>接收消息时，需要在消息处理的方法上标注<code class="language-plaintext highlighter-rouge">@RabbitListener</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueMessageListener</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_MAIL</span> <span class="o">=</span> <span class="s">"q_mail"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_SMS</span> <span class="o">=</span> <span class="s">"q_sms"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_APP</span> <span class="o">=</span> <span class="s">"q_app"</span><span class="o">;</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_MAIL</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessageFromMailQueue</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="no">QUEUE_MAIL</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_SMS</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessageFromSmsQueue</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="no">QUEUE_SMS</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_MAIL</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromMailQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_MAIL</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_SMS</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromSmsQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_SMS</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_APP</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromAppQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_APP</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码一共定义了5个Consumer，监听3个Queue。</p>

<p>启动应用程序，注册一个新用户，然后发送一条<code class="language-plaintext highlighter-rouge">RegistrationMessage</code>消息。此时，根据<code class="language-plaintext highlighter-rouge">registration</code>这个Exchange的设定，会在两个Queue收到消息：</p>

<pre><code class="language-plain">try register by bob@example.com...
user registered: bob@example.com
queue q_mail received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
queue q_sms received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
</code></pre>

<p>当登录失败时，发送<code class="language-plaintext highlighter-rouge">LoginMessage</code>并设定Routing Key为<code class="language-plaintext highlighter-rouge">login_failed</code>，此时，只有<code class="language-plaintext highlighter-rouge">q_sms</code>会收到消息：</p>

<pre><code class="language-plain">try login by bob@example.com...
queue q_sms received message: [LoginMessage: email=bob@example.com, name=(unknown), success=false]
</code></pre>

<p>登录成功后，发送<code class="language-plaintext highlighter-rouge">LoginMessage</code>，此时，<code class="language-plaintext highlighter-rouge">q_mail</code>和<code class="language-plaintext highlighter-rouge">q_app</code>将收到消息：</p>

<pre><code class="language-plain">try login by bob@example.com...
queue q_mail received message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
queue q_app received message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
</code></pre>

<p>RabbitMQ还提供了使用Topic的Exchange（此Topic指消息的标签，并非JMS的Topic概念），可以使用<code class="language-plaintext highlighter-rouge">*</code>进行匹配并路由。可见，掌握RabbitMQ的核心是理解其消息的路由规则。</p>

<p>直接指定一个Queue并投递消息也是可以的，此时指定Routing Key为Queue的名称即可，因为RabbitMQ提供了一个<code class="language-plaintext highlighter-rouge">default exchange</code>用于根据Routing Key查找Queue并直接投递消息到指定的Queue。但是要实现一对多的投递就必须自己配置Exchange。</p>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_APP</span><span class="o">,</span> <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_MAIL</span><span class="o">,</span>
                          <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_SMS</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueMessageListener</span> <span class="o">{</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_MAIL</span> <span class="o">=</span> <span class="s">"q_mail"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_SMS</span> <span class="o">=</span> <span class="s">"q_sms"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_APP</span> <span class="o">=</span> <span class="s">"q_app"</span><span class="o">;</span>

    <span class="nd">@RabbitHandler</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">messageOriginal</span><span class="o">,</span> <span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">messageOriginal</span><span class="o">.</span><span class="na">getMessageProperties</span><span class="o">().</span><span class="na">getConsumerQueue</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitHandler</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">messageOriginal</span><span class="o">,</span> <span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">messageOriginal</span><span class="o">.</span><span class="na">getMessageProperties</span><span class="o">().</span><span class="na">getConsumerQueue</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received login message: {}"</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>解释：</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">@RabbitListener(queues = {...})</code></strong>:  这个注解用于声明该类监听哪些队列的消息。在这个示例中，<code class="language-plaintext highlighter-rouge">QueueMessageListener</code> 类监听 <code class="language-plaintext highlighter-rouge">QUEUE_APP</code>、<code class="language-plaintext highlighter-rouge">QUEUE_MAIL</code> 和 <code class="language-plaintext highlighter-rouge">QUEUE_SMS</code> 三个队列的消息。当这些队列有新消息到达时，该类会被触发。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">@RabbitHandler</code></strong>:  该注解用于标记处理消息的方法。一个类可以有多个 <code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 方法，它们会根据消息的类型来自动选择对应的方法进行处理。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">onRegistrationMessage(Message messageOriginal, RegistrationMessage message)</code></strong>:  是一个处理注册消息的方法。<code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 注解表明这个方法会处理 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 类型的消息。</p>
    <ul>
      <li>
        <p><strong><code class="language-plaintext highlighter-rouge">Message messageOriginal</code></strong>:  这个参数是原始的 RabbitMQ 消息对象，包含消息的元数据（如消息属性、队列名等）。</p>
      </li>
      <li>
        <p><strong><code class="language-plaintext highlighter-rouge">RegistrationMessage message</code></strong>:  这是实际的消息体，Spring 会自动将消息反序列化为 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 对象。</p>
      </li>
      <li>
        <p><strong><code class="language-plaintext highlighter-rouge">queueName</code></strong>:  使用 <code class="language-plaintext highlighter-rouge">messageOriginal.getMessageProperties().getConsumerQueue()</code> 获取当前消息来自的队列名称。这在日志中用于记录消息来自哪个队列。</p>
      </li>
    </ul>
  </li>
</ul>

<p>当 RabbitMQ 中的 <code class="language-plaintext highlighter-rouge">q_mail</code>、<code class="language-plaintext highlighter-rouge">q_sms</code> 或 <code class="language-plaintext highlighter-rouge">q_app</code> 队列有新消息时，<code class="language-plaintext highlighter-rouge">QueueMessageListener</code> 会自动接收消息。Spring AMQP 框架根据消息的类型（例如 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 或 <code class="language-plaintext highlighter-rouge">LoginMessage</code>）来选择合适的 <code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 方法处理消息。</p>

<ul>
  <li>如果消息是 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 类型的，则调用<code class="language-plaintext highlighter-rouge">onRegistrationMessage</code> 方法。</li>
  <li>如果消息是 <code class="language-plaintext highlighter-rouge">LoginMessage</code> 类型的，则调用 <code class="language-plaintext highlighter-rouge">onLoginMessage</code> 方法。</li>
</ul>

<p>该机制允许根据消息的不同类型，使用不同的方法进行处理，简化了消息处理逻辑的组织。</p>

<h2 id="集成kafka">集成Kafka</h2>

<p>JMS是JavaEE的标准消息接口，Artemis是一个JMS实现产品，AMQP是跨语言的一个标准消息接口，RabbitMQ是一个AMQP实现产品。</p>

<p>Kafka也是一个消息服务器，它的特点一是快，二是有巨大的吞吐量，Kafka没有实现任何标准的消息接口，它自己提供的API就是Kafka的接口。</p>

<p>Kafka本身是Scala编写的，运行在JVM之上。Producer和Consumer都通过Kafka的客户端使用网络来与之通信。从逻辑上讲，Kafka设计非常简单，它只有一种类似JMS的Topic的消息通道：</p>

<pre><code class="language-ascii">                           ┌──────────┐
                       ┌──▶│Consumer-1│
                       │   └──────────┘
┌────────┐    ┌─────┐  │   ┌──────────┐
│Producer│───▶│Topic│──┼──▶│Consumer-2│
└────────┘    └─────┘  │   └──────────┘
                       │   ┌──────────┐
                       └──▶│Consumer-3│
                           └──────────┘
</code></pre>

<p>Kafka的一个Topic可以有一个至多个Partition，并且可以分布到多台机器上：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
             Topic
            │                   │
                ┌───────────┐        ┌──────────┐
            │┌─▶│Partition-1│──┐│┌──▶│Consumer-1│
             │  └───────────┘  │ │   └──────────┘
┌────────┐  ││  ┌───────────┐  │││   ┌──────────┐
│Producer│───┼─▶│Partition-2│──┼─┼──▶│Consumer-2│
└────────┘  ││  └───────────┘  │││   └──────────┘
             │  ┌───────────┐  │ │   ┌──────────┐
            │└─▶│Partition-3│──┘│└──▶│Consumer-3│
                └───────────┘        └──────────┘
            └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre></div></div>

<p>Kafka只保证<strong>在一个Partition内部，消息是有序的</strong>，但是，存在多个Partition的情况下，Producer发送的3个消息会依次发送到Partition-1、Partition-2和Partition-3，Consumer从3个Partition接收的消息并不一定是Producer发送的顺序，因此，多个Partition只能保证接收消息大概率按发送时间有序，并不能保证完全按Producer发送的顺序。这一点在使用Kafka作为消息服务器时要特别注意，对发送顺序有严格要求的Topic只能有一个Partition。</p>

<p>Kafka的另一个特点是消息发送和接收都尽量使用批处理，一次处理几十甚至上百条消息，比一次一条效率要高很多。</p>

<p>最后要注意的是消息的持久性。Kafka总是将消息写入Partition对应的文件，消息保存多久取决于服务器的配置，可以按照时间删除（默认3天），也可以按照文件大小删除，因此，只要Consumer在离线期内的消息还没有被删除，再次上线仍然可以接收到完整的消息流。这一功能实际上是客户端自己实现的，客户端会存储它接收到的最后一个消息的offsetId，再次上线后按上次的offsetId查询。offsetId是Kafka标识某个Partion的每一条消息的递增整数，客户端通常将它存储在ZooKeeper中。</p>

<p><strong>安装Kafka</strong></p>

<p>首先从Kafka官网<a href="https://kafka.apache.org/downloads">下载</a>最新版Kafaka，解压后在<code class="language-plaintext highlighter-rouge">bin</code>目录找到两个文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">zookeeper-server-start.sh</code>：启动ZooKeeper（已内置在Kafka中）；</li>
  <li><code class="language-plaintext highlighter-rouge">kafka-server-start.sh</code>：启动Kafka。</li>
</ul>

<p>先启动ZooKeeper：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./zookeeper-server-start.sh ../config/zookeeper.properties 
</code></pre></div></div>

<p>再启动Kafka：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./kafka-server-start.sh ../config/server.properties
</code></pre></div></div>

<p>看到如下输出表示启动成功：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>... INFO [KafkaServer id=0] started (kafka.server.KafkaServer)
</code></pre></div></div>

<p>如果要关闭Kafka和ZooKeeper，依次按Ctrl-C退出即可。</p>

<p><strong>使用Kafka</strong></p>

<p>在Spring Boot中使用Kafka，首先要引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.kafka<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-kafka<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>注意这个依赖是<code class="language-plaintext highlighter-rouge">spring-kafka</code>项目提供的。</p>

<p>然后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加Kafka配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">kafka</span><span class="pi">:</span>
    <span class="na">bootstrap-servers</span><span class="pi">:</span> <span class="s">localhost:9092</span>
    <span class="na">consumer</span><span class="pi">:</span>
      <span class="na">auto-offset-reset</span><span class="pi">:</span> <span class="s">latest</span>
      <span class="na">max-poll-records</span><span class="pi">:</span> <span class="m">100</span>
      <span class="na">max-partition-fetch-bytes</span><span class="pi">:</span> <span class="m">1000000</span>
</code></pre></div></div>

<p>除了<code class="language-plaintext highlighter-rouge">bootstrap-servers</code>必须指定外，<code class="language-plaintext highlighter-rouge">consumer</code>相关的配置项均为调优选项。例如，<code class="language-plaintext highlighter-rouge">max-poll-records</code>表示一次最多抓取100条消息。如果要查看配置名称，可以在IDE里定义一个<code class="language-plaintext highlighter-rouge">KafkaProperties.Consumer</code>的变量：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">KafkaProperties</span><span class="o">.</span><span class="na">Consumer</span> <span class="n">c</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</code></pre></div></div>

<p>然后按住Ctrl查看源码即可。</p>

<p><strong>发送消息</strong></p>

<p>Spring Boot自动创建了一个<code class="language-plaintext highlighter-rouge">KafkaTemplate</code>用于发送消息。这是一个泛型类，而默认配置总是使用<code class="language-plaintext highlighter-rouge">String</code>作为Kafka消息的类型，所以注入<code class="language-plaintext highlighter-rouge">KafkaTemplate&lt;String, String&gt;</code>即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="nd">@Autowired</span> <span class="nc">KafkaTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">kafkaTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRegistrationMessage</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">send</span><span class="o">(</span><span class="s">"topic_registration"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendLoginMessage</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">send</span><span class="o">(</span><span class="s">"topic_login"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="nc">String</span> <span class="n">topic</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">ProducerRecord</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">pr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProducerRecord</span><span class="o">&lt;&gt;(</span><span class="n">topic</span><span class="o">,</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">msg</span><span class="o">));</span>
        <span class="n">pr</span><span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"type"</span><span class="o">,</span> <span class="n">msg</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">().</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
        <span class="n">kafkaTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">pr</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>发送消息时，需指定Topic名称，消息正文。为了发送一个JavaBean，这里没有使用<code class="language-plaintext highlighter-rouge">MessageConverter</code>来转换JavaBean，而是直接把消息类型作为Header添加到消息中，Header名称为<code class="language-plaintext highlighter-rouge">type</code>，值为Class全名。消息正文是序列化的JSON。</p>

<p><strong>接收消息</strong></p>

<p>接收消息可以使用<code class="language-plaintext highlighter-rouge">@KafkaListener</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TopicMessageListener</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_registration"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">RegistrationMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received registration message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_login"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">LoginMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received login message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_login"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processLoginMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">LoginMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"process login message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getType</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// TODO: use cache:</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;)</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在接收消息的方法中，使用<code class="language-plaintext highlighter-rouge">@Payload</code>表示传入的是消息正文，使用<code class="language-plaintext highlighter-rouge">@Header</code>可传入消息的指定Header，这里传入<code class="language-plaintext highlighter-rouge">@Header("type")</code>，就是我们发送消息时指定的Class全名。接收消息时，我们需要根据Class全名来反序列化获得JavaBean。</p>

<p>上述代码一共定义了3个Listener，其中有两个方法监听的是同一个Topic，但它们的Group ID不同。假设Producer发送的消息流是A、B、C、D，Group ID不同表示这是<strong>两个不同的Consumer</strong>，它们将分别收取完整的消息流，即各自均收到A、B、C、D。Group ID相同的多个Consumer实际上被视作<strong>一个</strong>Consumer，即如果有两个Group ID相同的Consumer，那么它们各自收到的很可能是A、C和B、D。</p>

<p>运行应用程序，注册新用户后：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try register by bob@example.com...
user registered: bob@example.com
 received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
</code></pre></div></div>

<p>用户登录后，观察日志输出：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try login by bob@example.com...
received login message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
process login message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
</code></pre></div></div>

<p>因为Group ID不同，同一个消息被两个Consumer分别独立接收。如果把Group ID改为相同，那么同一个消息只会被两者之一接收。</p>

<p>在Kafka中是如何创建Topic的？又如何指定某个Topic的分区数量？</p>

<p>实际上开发使用的Kafka默认允许自动创建Topic，创建Topic时默认的分区数量是2，可以通过<code class="language-plaintext highlighter-rouge">server.properties</code>修改默认分区数量。</p>

<p>在生产环境中通常会关闭自动创建功能，Topic需要由运维人员先创建好。和RabbitMQ相比，Kafka并不提供网页版管理后台，管理Topic需要使用命令行，比较繁琐，只有云服务商通常会提供更友好的管理后台。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Spring</title><link href="/2024/06/05/Spring/" rel="alternate" type="text/html" title="Spring" /><published>2024-06-05T00:00:00+08:00</published><updated>2024-06-05T00:00:00+08:00</updated><id>/2024/06/05/Spring</id><content type="html" xml:base="/2024/06/05/Spring/"><![CDATA[<h1 id="引言">引言</h1>
<p>Spring、Spring MVC框架笔记，包括IoC、AOP、使用JDBC、事务、集成Hibernate、Mybatis、JPA，REST风格代码、集成Filter、使用Interceptor、处理异常、跨域、国际化、集成WebSocket、JavaMail、JMS、JMX、使用Scheduler。</p>

<h1 id="spring">Spring</h1>

<p>Spring是一个支持快速开发Java EE应用程序的框架。它提供了一系列底层容器和基础设施，并可以和大量常用的开源框架无缝集成，可以说是开发Java EE应用程序的必备。</p>

<p>Spring Framework主要包括几个模块：</p>

<ul>
  <li>支持IoC和AOP的容器；</li>
  <li>支持JDBC和ORM的数据访问模块；</li>
  <li>支持声明式事务的模块；</li>
  <li>支持基于Servlet的MVC开发；</li>
  <li>支持基于Reactive的Web开发；</li>
  <li>以及集成JMS、JavaMail、JMX、缓存等其他模块。</li>
</ul>

<h2 id="ioc">IoC</h2>

<p>容器是一种为某种特定组件的运行提供必要支持的一个软件环境。例如，Tomcat就是一个Servlet容器，它可以为Servlet的运行提供运行环境。类似Docker这样的软件也是一个容器，它提供了必要的Linux环境以便运行一个特定的Linux进程。</p>

<p>通常来说，使用容器运行组件，除了提供一个组件运行环境之外，容器还提供了许多底层服务。例如，Servlet容器底层实现了TCP连接，解析HTTP协议等非常复杂的服务，如果没有容器来提供这些服务，我们就无法编写像Servlet这样代码简单，功能强大的组件。早期的JavaEE服务器提供的EJB容器最重要的功能就是通过声明式事务服务，使得EJB组件的开发人员不必自己编写冗长的事务处理代码，所以极大地简化了事务处理。</p>

<p>Spring的核心就是提供了一个IoC容器，它可以管理所有轻量级的JavaBean组件，提供的底层服务包括组件的生命周期管理、配置和组装服务、AOP支持，以及建立在AOP基础上的声明式事务服务等。</p>

<p>IoC全称Inversion of Control，直译为控制反转。</p>

<p>假定一个在线书店，通过<code class="language-plaintext highlighter-rouge">BookService</code>获取书籍：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nc">Book</span> <span class="nf">getBook</span><span class="o">(</span><span class="kt">long</span> <span class="n">bookId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">())</span> <span class="o">{</span>
            <span class="o">...</span>
            <span class="k">return</span> <span class="n">book</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>为了从数据库查询书籍，<code class="language-plaintext highlighter-rouge">BookService</code>持有一个<code class="language-plaintext highlighter-rouge">DataSource</code>。为了实例化一个<code class="language-plaintext highlighter-rouge">HikariDataSource</code>，又不得不实例化一个<code class="language-plaintext highlighter-rouge">HikariConfig</code>。</p>

<p>现在，继续编写<code class="language-plaintext highlighter-rouge">UserService</code>获取用户：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUser</span><span class="o">(</span><span class="kt">long</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">())</span> <span class="o">{</span>
            <span class="o">...</span>
            <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为<code class="language-plaintext highlighter-rouge">UserService</code>也需要访问数据库，因此，不得不也实例化一个<code class="language-plaintext highlighter-rouge">HikariDataSource</code>。</p>

<p>上述每个组件都采用了一种简单的通过<code class="language-plaintext highlighter-rouge">new</code>创建实例并持有的方式。会有以下缺点：</p>

<ol>
  <li>实例化一个组件其实很难，例如，<code class="language-plaintext highlighter-rouge">BookService</code>和<code class="language-plaintext highlighter-rouge">UserService</code>要创建<code class="language-plaintext highlighter-rouge">HikariDataSource</code>，实际上需要读取配置，才能先实例化<code class="language-plaintext highlighter-rouge">HikariConfig</code>，再实例化<code class="language-plaintext highlighter-rouge">HikariDataSource</code>。</li>
  <li>没有必要让<code class="language-plaintext highlighter-rouge">BookService</code>和<code class="language-plaintext highlighter-rouge">UserService</code>分别创建<code class="language-plaintext highlighter-rouge">DataSource</code>实例，完全可以共享同一个<code class="language-plaintext highlighter-rouge">DataSource</code>，但谁负责创建<code class="language-plaintext highlighter-rouge">DataSource</code>，谁负责获取其他组件已经创建的<code class="language-plaintext highlighter-rouge">DataSource</code>，不好处理。</li>
  <li>很多组件需要销毁以便释放资源，例如<code class="language-plaintext highlighter-rouge">DataSource</code>，但如果该组件被多个组件共享，如何确保它的使用方都已经全部被销毁？</li>
  <li>测试某个组件，例如<code class="language-plaintext highlighter-rouge">BookService</code>，是复杂的，因为必须要在真实的数据库环境下执行。</li>
</ol>

<p>如果一个系统有大量的组件，其生命周期和相互之间的依赖关系如果由组件自身来维护，不但大大增加了系统的复杂度，而且会导致组件之间极为紧密的耦合，继而给测试和维护带来了极大的困难。</p>

<p>因此，核心问题是：谁负责创建组件？谁负责根据依赖关系组装组件？销毁时，如何按依赖顺序正确销毁？解决这一问题的核心方案就是IoC。</p>

<p>传统的应用程序中，控制权在程序本身，程序的控制流程完全由开发者控制，例如：</p>

<p><code class="language-plaintext highlighter-rouge">CartServlet</code>创建了<code class="language-plaintext highlighter-rouge">BookService</code>，在创建<code class="language-plaintext highlighter-rouge">BookService</code>的过程中，又创建了<code class="language-plaintext highlighter-rouge">DataSource</code>组件。这种模式的缺点是，一个组件如果要使用另一个组件，必须先知道如何正确地创建它。</p>

<p>在IoC模式下，控制权发生了反转，即从应用程序转移到了IoC容器，所有组件不再由应用程序自己创建和配置，而是由IoC容器负责，这样，应用程序只需要直接使用已经创建好并且配置好的组件。为了能让组件在IoC容器中被“装配”出来，需要某种“注入”机制，例如，<code class="language-plaintext highlighter-rouge">BookService</code>自己并不会创建<code class="language-plaintext highlighter-rouge">DataSource</code>，而是等待外部通过<code class="language-plaintext highlighter-rouge">setDataSource()</code>方法来注入一个<code class="language-plaintext highlighter-rouge">DataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>不直接<code class="language-plaintext highlighter-rouge">new</code>一个<code class="language-plaintext highlighter-rouge">DataSource</code>，而是注入一个<code class="language-plaintext highlighter-rouge">DataSource</code>，这个小小的改动虽然简单，却带来了一系列好处：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">BookService</code>不再关心如何创建<code class="language-plaintext highlighter-rouge">DataSource</code>，因此，不必编写读取数据库配置之类的代码；</li>
  <li><code class="language-plaintext highlighter-rouge">DataSource</code>实例被注入到<code class="language-plaintext highlighter-rouge">BookService</code>，同样也可以注入到<code class="language-plaintext highlighter-rouge">UserService</code>，因此，共享一个组件非常简单；</li>
  <li>测试<code class="language-plaintext highlighter-rouge">BookService</code>更容易，因为注入的是<code class="language-plaintext highlighter-rouge">DataSource</code>，可以使用内存数据库，而不是真实的MySQL配置。</li>
</ol>

<p>IoC又称为依赖注入（DI：Dependency Injection），它解决了一个最主要的问题：将组件的创建+配置与组件的使用相分离，并且，由IoC容器负责管理组件的生命周期。</p>

<p>因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系。一种最简单的配置是通过XML文件来实现，例如：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;beans&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"HikariDataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"bookService"</span> <span class="na">class=</span><span class="s">"BookService"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userService"</span> <span class="na">class=</span><span class="s">"UserService"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>上述XML配置文件指示IoC容器创建3个JavaBean组件，并把id为<code class="language-plaintext highlighter-rouge">dataSource</code>的组件通过属性<code class="language-plaintext highlighter-rouge">dataSource</code>（即调用<code class="language-plaintext highlighter-rouge">setDataSource()</code>方法）注入到另外两个组件中。</p>

<p>依赖注入可以通过<code class="language-plaintext highlighter-rouge">set()</code>方法实现，也可以通过构造方法实现。</p>

<p>把<code class="language-plaintext highlighter-rouge">BookService</code>改造为通过构造方法注入，那么实现代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BookService</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring的IoC容器同时支持属性注入和构造方法注入，并允许混合使用。</p>

<p>在设计上，Spring的IoC容器是一个高度可扩展的无侵入容器。所谓无侵入，是指应用程序的组件无需实现Spring的特定接口，或者说，组件根本不知道自己在Spring的容器中运行。这种无侵入的设计有以下好处：</p>

<ol>
  <li>应用程序组件既可以在Spring的IoC容器中运行，也可以自己编写代码自行组装配置；</li>
  <li>测试的时候并不依赖Spring容器，可单独进行测试，大大提高了开发效率。</li>
</ol>

<h3 id="ioc装配">IoC装配</h3>

<p>首先引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>测试代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写一个特定的<code class="language-plaintext highlighter-rouge">application.xml</code>配置文件，告诉Spring的IoC容器应该如何创建并组装Bean：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<hr />

<h3 id="bean的配置">Bean的配置</h3>

<p>在 Spring中，XML配置文件的根元素是<code class="language-plaintext highlighter-rouge">&lt; beans&gt;</code>，其下包含了<code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>子元素，每个<code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>子元素定义了一个Bean，并描述了该Bean如何被装配到Spring容器中。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>元素中包含了多个<em>属性</em>。其常用属性如下：</p>

<table>
  <thead>
    <tr>
      <th><strong>属性</strong></th>
      <th><strong>解释</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>id</td>
      <td>实例化对象名称</td>
    </tr>
    <tr>
      <td>name</td>
      <td>可以为bean指定多个名称，用逗号分隔</td>
    </tr>
    <tr>
      <td>class</td>
      <td>类文件的全局名称</td>
    </tr>
    <tr>
      <td>scope</td>
      <td>实例的生存空间或有效范围</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>元素中同样包含了多个<em>子</em>元素，其子元素如下</p>

<p><code class="language-plaintext highlighter-rouge">constructor-arg</code>、<code class="language-plaintext highlighter-rouge">property</code>、<code class="language-plaintext highlighter-rouge">ref</code>、<code class="language-plaintext highlighter-rouge">value</code>、<code class="language-plaintext highlighter-rouge">list</code>、<code class="language-plaintext highlighter-rouge">set</code>、<code class="language-plaintext highlighter-rouge">map</code>、<code class="language-plaintext highlighter-rouge">entry</code></p>

<h3 id="bean的实例化">Bean的实例化</h3>

<p><strong>构造方法实例化，使用类的无参数构造创建</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"testdemo"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">dao</span><span class="o">.</span><span class="na">TestDemo</span><span class="err">"</span><span class="o">&gt;&lt;/</span><span class="n">bean</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><strong>使用静态工厂实例化</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"b2"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">SpringBean</span><span class="o">.</span><span class="na">Factory</span><span class="s">" factory-method="</span><span class="n">newBean</span><span class="err">"</span><span class="o">/&gt;</span>
</code></pre></div></div>

<p>参数：id 实例化对象名称，class 静态工厂绝对名称，factory-method 工厂的静态方法名称</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Bean</span> <span class="nf">newBean</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="k">new</span> <span class="nc">Bean</span><span class="o">();}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ap</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"Factory.xml"</span><span class="o">);</span>
        <span class="n">ap</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"b2"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Bean</span><span class="o">{}</span>
</code></pre></div></div>

<p><strong>实例工厂实例化</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"factory"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">SpringBean</span><span class="o">.</span><span class="na">Factory</span><span class="s">" /&gt;
&lt;bean id="</span><span class="n">b3</span><span class="s">" factory-bean="</span><span class="n">factory</span><span class="s">" factory-method="</span><span class="n">newBean2</span><span class="err">"</span><span class="o">/&gt;</span>
</code></pre></div></div>

<p>参数：id 实例化对象名称，factory-bean 实例化的工厂名称，factory-method 工厂的方法名称</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Factory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Bean</span> <span class="nf">newBean2</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="k">new</span> <span class="nc">Bean</span><span class="o">();}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ap</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"Factory.xml"</span><span class="o">);</span>
        <span class="n">ap</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"b3"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Bean</span><span class="o">{}</span>
</code></pre></div></div>

<h3 id="注入方式">注入方式</h3>

<p>对于构造方法注入，通过设置<code class="language-plaintext highlighter-rouge">constructor-arg</code>标签完成：</p>

<p><code class="language-plaintext highlighter-rouge">constructor-arg</code>参数:<code class="language-plaintext highlighter-rouge">type</code> 形参类型，<code class="language-plaintext highlighter-rouge">name</code> 形参变量名，<code class="language-plaintext highlighter-rouge">value</code> 属性值，<code class="language-plaintext highlighter-rouge">ref</code> 引用实例对象，<code class="language-plaintext highlighter-rouge">index</code> 索引值。</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<ul>
  <li>每个<code class="language-plaintext highlighter-rouge">&lt;bean ...&gt;</code>都有一个<code class="language-plaintext highlighter-rouge">id</code>标识，相当于Bean的唯一ID；</li>
  <li>在<code class="language-plaintext highlighter-rouge">a</code>Bean中，通过<code class="language-plaintext highlighter-rouge">&lt;constructor-arg index="0" ref="b"/&gt;</code>以<strong>构造方法注入</strong>了另一个<code class="language-plaintext highlighter-rouge">b</code>Bean；</li>
  <li>Bean的顺序不重要，Spring根据依赖关系会自动正确初始化。</li>
</ul>

<p>把上述XML配置文件用Java代码写出来，就像这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">B</span> <span class="n">b</span><span class="o">=</span><span class="k">new</span> <span class="no">B</span><span class="o">();</span>
<span class="no">A</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="no">A</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</code></pre></div></div>

<p>只不过Spring容器是通过读取XML文件后使用反射完成的。</p>

<p>其实这里不写<code class="language-plaintext highlighter-rouge">constructor-arg</code>，也可以，在 Spring XML 配置文件中，如果类 <code class="language-plaintext highlighter-rouge">A</code> 只有<strong>一个构造函数</strong>，并且这个构造函数需要一个 <code class="language-plaintext highlighter-rouge">B</code> 类型的参数，Spring 会自动匹配并注入所需的依赖。因此，如果只有一个构造函数并且只有一个参数类型可以匹配，则<strong>可以省略</strong> <code class="language-plaintext highlighter-rouge">&lt;constructor-arg&gt;</code> 标签。</p>

<p>还可以使用c命名空间简化注入,对应<code class="language-plaintext highlighter-rouge">constructor-arg</code>。</p>

<p><code class="language-plaintext highlighter-rouge">beans</code>标签添加属性: <code class="language-plaintext highlighter-rouge">xmlns:c="http://www.springframework.org/schema/c"</code>。</p>

<p>使用c命名空间，直接在bean添加参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"a1"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">A</span><span class="s">" c:_0-ref="</span><span class="n">b</span><span class="s">"/&gt;
&lt;bean id="</span><span class="n">a2</span><span class="s">" class="</span><span class="n">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">A</span><span class="s">" c:b-ref="</span><span class="n">b</span><span class="err">"</span><span class="o">/&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">c:_索引值</code> 对应 <code class="language-plaintext highlighter-rouge">index="索引值"</code>， 加<code class="language-plaintext highlighter-rouge">-ref</code>表示引用实例对象</p>

<p><code class="language-plaintext highlighter-rouge">c:形参变量名</code> 对应 <code class="language-plaintext highlighter-rouge">name="形参变量名"</code>,加<code class="language-plaintext highlighter-rouge">-ref</code>表示引用实例对象，不加则是设置普通数据类型，上面的式子如果不加，则<code class="language-plaintext highlighter-rouge">"b"</code>视为字符串。</p>

<p>需要注意的是<code class="language-plaintext highlighter-rouge">c:b-ref</code>这种方式只对以debug方式编译的class有效，因为对于非debug方式编译的class文件Spring将无法获取到对应构造方法的<code class="language-plaintext highlighter-rouge">参数名</code>，因为被优化掉了。之前在JavaWeb有说，可以设置编译器参数：<code class="language-plaintext highlighter-rouge">-parameters</code>，保留形参变量名。</p>

<hr />

<p>对于set方法注入，通过设置<code class="language-plaintext highlighter-rouge">property</code>标签完成：</p>

<p>如果要改成<strong>通过<code class="language-plaintext highlighter-rouge">set</code>方法注入</strong>，则xml修改为：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"b"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">property</code>参数： <code class="language-plaintext highlighter-rouge">name</code> 变量名，<code class="language-plaintext highlighter-rouge">value</code> 属性值，<code class="language-plaintext highlighter-rouge">ref</code> 引用实例对象。</p>

<p>同样的，可以使用p命名空间简化注入,对应<code class="language-plaintext highlighter-rouge">property</code>。</p>

<p><code class="language-plaintext highlighter-rouge">beans</code>标签添加属性: <code class="language-plaintext highlighter-rouge">xmlns:p="http://www.springframework.org/schema/p"</code>。</p>

<p>使用p命名空间，直接在bean添加参数：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="na">p:b-ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">p:变量名</code> 对应 <code class="language-plaintext highlighter-rouge">name="变量名"</code>，加<code class="language-plaintext highlighter-rouge">-ref</code>表示引用实例对象。</p>

<p>注意：<code class="language-plaintext highlighter-rouge">property</code>对应的是set方法，而<strong>不是</strong>对应的属性。如<code class="language-plaintext highlighter-rouge">name="world"</code>实际对应<code class="language-plaintext highlighter-rouge">setWorld()</code>方法，这个时候<strong>不管</strong>是否真的存在名为<code class="language-plaintext highlighter-rouge">world</code>的属性.</p>

<hr />

<h3 id="自动装配">自动装配</h3>

<p>Spring的<code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>元素中包含个 <code class="language-plaintext highlighter-rouge">autowire</code>属性，可通过设置 <code class="language-plaintext highlighter-rouge">autowire</code>的属性来自动装配Bean。自动装配，就是将一个Bean注入到其他Bean的Property中。autowire属性值及说明如下:</p>

<table>
  <thead>
    <tr>
      <th>属性值</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>default</td>
      <td>默认值。</td>
    </tr>
    <tr>
      <td>byName</td>
      <td>根据 Property的Name自动装配。</td>
    </tr>
    <tr>
      <td>byType</td>
      <td>根据 Property的数据类型（TYPE）自动装配</td>
    </tr>
    <tr>
      <td>constructor</td>
      <td>根据构造函数参数的数据类型。</td>
    </tr>
    <tr>
      <td>autodetect</td>
      <td>如果发现默认的构造函数，用constructor模式，否则用byType模式</td>
    </tr>
    <tr>
      <td>no</td>
      <td>不适用自动装配，Bean依赖必须通过ref元素定义。</td>
    </tr>
  </tbody>
</table>

<p>默认情况下，<code class="language-plaintext highlighter-rouge">autowire</code>属性的默认值为<code class="language-plaintext highlighter-rouge">default</code>。默认情况下Spring会根据<code class="language-plaintext highlighter-rouge">byName</code>的方式进行自动装配。如果Spring在容器中找到与属性名相同的Bean，则会将该Bean注入到相应的属性中。如果找不到与属性名相同的Bean，Spring会抛出<code class="language-plaintext highlighter-rouge">NoSuchBeanDefinitionException</code>异常。</p>

<h3 id="注入的类型">注入的类型</h3>

<p>如果注入的不是Bean，而是<code class="language-plaintext highlighter-rouge">boolean</code>、<code class="language-plaintext highlighter-rouge">int</code>、<code class="language-plaintext highlighter-rouge">String</code>这样的数据类型，则通过设置<code class="language-plaintext highlighter-rouge">value</code>注入（构造方法注入同理），例如，创建一个<code class="language-plaintext highlighter-rouge">HikariDataSource</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"com.zaxxer.hikari.HikariDataSource"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jdbcUrl"</span> <span class="na">value=</span><span class="s">"jdbc:mysql://localhost:3306/test"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">"root"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"password"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maximumPoolSize"</span> <span class="na">value=</span><span class="s">"10"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"autoCommit"</span> <span class="na">value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>如果是Map类型，则通过嵌套<code class="language-plaintext highlighter-rouge">map</code>标签进行设置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"map"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;map&gt;</span>
            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"1"</span> <span class="na">value=</span><span class="s">"唱"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"2"</span> <span class="na">value=</span><span class="s">"跳"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"3"</span> <span class="na">value=</span><span class="s">"RAP"</span> <span class="na">value-type=</span><span class="s">"java.lang.String"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/map&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>如果是List类型，则通过嵌套<code class="language-plaintext highlighter-rouge">list</code>标签进行设置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"b"</span> <span class="na">index=</span><span class="s">"0"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"list"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;list&gt;&lt;value&gt;</span>唱<span class="nt">&lt;/value&gt;&lt;value&gt;</span>跳<span class="nt">&lt;/value&gt;&lt;value&gt;</span>RAR<span class="nt">&lt;/value&gt;&lt;/list&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>如果是Set类型，则通过嵌套<code class="language-plaintext highlighter-rouge">set</code>标签进行设置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"set"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;set&gt;&lt;value</span> <span class="nt">&gt;</span>唱<span class="nt">&lt;/value&gt;&lt;value&gt;</span>跳<span class="nt">&lt;/value&gt;&lt;value&gt;</span>RAR<span class="nt">&lt;/value&gt;&lt;/set&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>前面有说name属性对应的是set方法，这里是<code class="language-plaintext highlighter-rouge">"set"</code>,所以对应<code class="language-plaintext highlighter-rouge">setList</code>方法，也可以改成其他的名字。</p>

<p>如果是数组，则通过嵌套<code class="language-plaintext highlighter-rouge">array</code>标签进行设置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"list"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;array&gt;&lt;value&gt;</span>唱<span class="nt">&lt;/value&gt;&lt;value&gt;</span>跳<span class="nt">&lt;/value&gt;&lt;value&gt;</span>RAR<span class="nt">&lt;/value&gt;&lt;/array&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">call</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">call</span> <span class="o">=</span> <span class="o">(</span><span class="no">B</span><span class="o">)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"key1"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">map</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">call</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>application.xml：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;map&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"1"</span> <span class="na">value=</span><span class="s">"唱"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"2"</span> <span class="na">value=</span><span class="s">"跳"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"3"</span> <span class="na">value=</span><span class="s">"RAP"</span> <span class="na">value-type=</span><span class="s">"java.lang.String"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"4"</span> <span class="na">value=</span><span class="s">"1"</span> <span class="na">value-type=</span><span class="s">"java.lang.Integer"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"key1"</span> <span class="na">value-ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/map&gt;</span>
        <span class="nt">&lt;/constructor-arg&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"array"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;array&gt;&lt;value&gt;</span>唱<span class="nt">&lt;/value&gt;&lt;value&gt;</span>跳<span class="nt">&lt;/value&gt;&lt;value&gt;</span>RAR<span class="nt">&lt;/value&gt;&lt;/array&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{1=唱, 2=跳, 3=RAP, 4=1, key1=com.aotmd.test.B@53de625d}
[唱, 跳, RAR]
hello
</code></pre></div></div>

<h3 id="applicationcontext">ApplicationContext</h3>

<p>Spring容器就是<code class="language-plaintext highlighter-rouge">ApplicationContext</code>，它是一个接口，有很多实现类，这里选择<code class="language-plaintext highlighter-rouge">ClassPathXmlApplicationContext</code>，表示它会自动从classpath中查找指定的XML配置文件。</p>

<p>获得了<code class="language-plaintext highlighter-rouge">ApplicationContext</code>的实例，就获得了IoC容器的引用。从<code class="language-plaintext highlighter-rouge">ApplicationContext</code>中可以根据Bean的ID获取Bean，也可以根据Bean的类型获取Bean的引用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
<span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
</code></pre></div></div>

<p>Spring还提供另一种IoC容器叫<code class="language-plaintext highlighter-rouge">BeanFactory</code>，使用方式和<code class="language-plaintext highlighter-rouge">ApplicationContext</code>类似：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BeanFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XmlBeanFactory</span><span class="o">(</span><span class="k">new</span> <span class="nc">ClassPathResource</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">));</span>
<span class="no">A</span> <span class="n">a</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BeanFactory</code>和<code class="language-plaintext highlighter-rouge">ApplicationContext</code>的区别在于，<code class="language-plaintext highlighter-rouge">BeanFactory</code>的实现是<strong>按需创建</strong>，即第一次获取Bean时才创建这个Bean，而<code class="language-plaintext highlighter-rouge">ApplicationContext</code>会一次性创建所有的Bean。实际上，<code class="language-plaintext highlighter-rouge">ApplicationContext</code>接口是从<code class="language-plaintext highlighter-rouge">BeanFactory</code>接口继承而来的，并且，<code class="language-plaintext highlighter-rouge">ApplicationContext</code>提供了一些额外的功能，包括国际化支持、事件和通知机制等。通常情况下，总是使用<code class="language-plaintext highlighter-rouge">ApplicationContext</code>，很少会考虑使用<code class="language-plaintext highlighter-rouge">BeanFactory</code>。</p>

<hr />

<p>创建 <code class="language-plaintext highlighter-rouge">ApplicationContext</code>接口实例通常有三种方法：</p>

<p><strong>通过<code class="language-plaintext highlighter-rouge">ClassPathXmlApplicationContext</code>创建</strong>
<code class="language-plaintext highlighter-rouge">ClassPathXmlApplicationContext</code>将从类路径classPath目录寻找指定的XML配置文件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>通过<code class="language-plaintext highlighter-rouge">FileSystemXmlApplicationContext</code>创建</strong></p>

<p><code class="language-plaintext highlighter-rouge">FileSystemXmlApplicationContext</code>将从指定文件的<strong>绝对路径</strong>中寻找XML配置文件，找到并装载完成<code class="language-plaintext highlighter-rouge">ApplicationContext</code>的实例化工作。采用绝对路径的加载方式将导致程序的灵活性变差， 一般<strong>不推荐使用</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">"C:\\XXX\\application.xml"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>通过Web服务器实例化<code class="language-plaintext highlighter-rouge">ApplicationContext</code>容器</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;</span>classpath:application.xml<span class="nt">&lt;/param-value&gt;</span>
<span class="nt">&lt;/context-param&gt;</span>
</code></pre></div></div>

<p>如果有多个Spring配置文件，则在<code class="language-plaintext highlighter-rouge">param-value</code>里，以逗号分隔，如果没有定义则默认加载<code class="language-plaintext highlighter-rouge">/WEB-INF/applicationContext.xml</code>文件，<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>是参数值，固定不变。</p>

<p>Web服务器实例化<code class="language-plaintext highlighter-rouge">ApplicationContext</code>容器时，一般使用基于<code class="language-plaintext highlighter-rouge">org.springframework.web.context.ContextLoaderListener</code>的实现方法只需要在<code class="language-plaintext highlighter-rouge">web.xml</code>中添加代码:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;</span>classpath:application.xml<span class="nt">&lt;/param-value&gt;</span>
<span class="nt">&lt;/context-param&gt;</span>
<span class="nt">&lt;listener&gt;</span>
    <span class="nt">&lt;listener-class&gt;</span>
        org.springframework.web.context.ContextLoaderListener
    <span class="nt">&lt;/listener-class&gt;</span>
<span class="nt">&lt;/listener&gt;</span>
</code></pre></div></div>

<p>需要web依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-web<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>使用，首先<strong>获取<code class="language-plaintext highlighter-rouge">ServletContext</code></strong>，这里列出几种方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ServletContext</span> <span class="n">sc</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
<span class="n">sc</span><span class="o">=((</span><span class="nc">HttpServletRequest</span><span class="o">)</span><span class="n">request</span><span class="o">).</span><span class="na">getSession</span><span class="o">().</span><span class="na">getServletContext</span><span class="o">();</span>
<span class="n">sc</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
</code></pre></div></div>

<p>普通类获取方法（普通类若不经过服务器调用(如servlet调用)则会报<code class="language-plaintext highlighter-rouge">NullPointerException</code>）</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ServletContext</span> <span class="n">sc</span> <span class="o">=</span> <span class="nc">ContextLoader</span><span class="o">.</span><span class="na">getCurrentWebApplicationContext</span><span class="o">().</span><span class="na">getServletContext</span><span class="o">();</span>
</code></pre></div></div>

<p>然后<strong>通过<code class="language-plaintext highlighter-rouge">ServletContext</code>获取<code class="language-plaintext highlighter-rouge">ApplicationContext</code>：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getWebApplicationContext</span><span class="o">(</span><span class="n">sc</span><span class="o">);</span><span class="c1">// 这种方法 获取失败时返回null</span>
<span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unused"</span><span class="o">)</span>
<span class="nc">WebApplicationContext</span> <span class="n">ctx</span><span class="o">=</span><span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getRequiredWebApplicationContext</span><span class="o">(</span><span class="n">sc</span><span class="o">);</span><span class="c1">// 这种方法 获取失败时抛出异常</span>
<span class="n">ac</span> <span class="o">=</span> <span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getRequiredWebApplicationContext</span><span class="o">(</span><span class="n">sc</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<p><strong>销毁</strong></p>

<p>对于手动加载的Spring，<code class="language-plaintext highlighter-rouge">ApplicationContext</code>怎么销毁:</p>

<p>在非Web应用中，手工加载Spring IoC容器，不能用<code class="language-plaintext highlighter-rouge">ApplicationContext</code>，要用<code class="language-plaintext highlighter-rouge">AbstractApplicationContext</code>。用完以后要记得调用<code class="language-plaintext highlighter-rouge">ctx.close()</code>关闭容器。如果不记得关闭容器，最典型的问题就是数据库连接不能释放。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">((</span><span class="nc">AbstractApplicationContext</span><span class="o">)</span><span class="n">appcon</span><span class="o">).</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="完整实例">完整实例</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">ServletContext</span> <span class="n">servletContext</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">();</span>
        <span class="c1">// 这种方法 获取失败时返回null</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getWebApplicationContext</span><span class="o">(</span><span class="n">servletContext</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">call</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCall</span><span class="o">(</span><span class="no">B</span> <span class="n">call</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">call</span> <span class="o">=</span> <span class="n">call</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">call</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>application.xml:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span> <span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"call"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>web.xml:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>
         <span class="na">version=</span><span class="s">"4.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;context-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>classpath:application.xml<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/context-param&gt;</span>
    <span class="nt">&lt;listener&gt;</span>
        <span class="nt">&lt;listener-class&gt;</span>
            org.springframework.web.context.ContextLoaderListener
        <span class="nt">&lt;/listener-class&gt;</span>
    <span class="nt">&lt;/listener&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<h3 id="bean的生命周期">Bean的生命周期</h3>

<p>在Spring框架中，Bean的生命周期包括创建（实例化与初始化）、使用以及销毁等阶段。Spring提供了多个接口和配置方式，允许开发者在这三个过程的前后进行操作。在Spring中，实例化是为Bean对象分配内存空间，初始化则是对Bean的属性进行设置。</p>

<p>对于singleton作用域的Bean，Spring容器可以精确地管理其生命周期，包括创建、初始化和销毁。而对于prototype作用域的Bean，Spring只负责创建实例，之后Bean的生命周期由客户端代码管理，Spring容器不再跟踪其状态。</p>

<p>Spring中Bean的生命周期可以参考Servlet的生命周期模型：实例化→初始化→请求处理→销毁。在singleton作用域下，Bean的生命周期包括以下阶段：</p>

<ol>
  <li>根据Bean的配置实例化Bean。</li>
  <li>对实例化的Bean进行依赖注入，即对属性进行初始化。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanNameAware</code>接口，将调用其<code class="language-plaintext highlighter-rouge">setBeanName(String beanName)</code>方法，传递的是Bean在Spring配置文件中的id。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanFactoryAware</code>接口，将调用其<code class="language-plaintext highlighter-rouge">setBeanFactory</code>方法，传递的是当前Spring工厂实例的引用。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanFactoryPostProcessor</code>接口，将调用其<code class="language-plaintext highlighter-rouge">postProcessBeanFactory()</code>方法，允许在Bean工厂实例化Bean之前对Bean定义进行修改。实现该接口可以在容器实例化Bean之前对Bean定义进行一些自定义的处理。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">ApplicationContextAware</code>接口，将调用其<code class="language-plaintext highlighter-rouge">setApplicationContext(ApplicationContext)</code>方法，传递的是Spring上下文实例的引用。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanPostProcessor</code>接口，将调用其<code class="language-plaintext highlighter-rouge">postProcessBeforeInitialization(Object obj, String beanName)</code>方法，在Bean初始化前对Bean进行操作。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">InitializingBean</code>接口，将调用其<code class="language-plaintext highlighter-rouge">afterPropertiesSet</code>方法，Bean在属性设置完成后会调用该方法进行初始化操作。</li>
  <li>如果Bean在配置文件中配置了<code class="language-plaintext highlighter-rouge">init-method</code>属性，将自动调用配置的初始化方法。</li>
  <li>如果Bean实现了<code class="language-plaintext highlighter-rouge">BeanPostProcessor</code>接口，将调用其<code class="language-plaintext highlighter-rouge">postProcessBeforeInitialization()</code>和<code class="language-plaintext highlighter-rouge">postProcessAfterInitialization(Object obj, String beanName)</code>方法，允许在Bean初始化前后进行一些自定义处理操作。实现该接口可以在Bean初始化前后对Bean进行一些额外的处理。</li>
</ol>

<p>注意：完成上述工作后，Bean可以被使用。由于是singleton作用域，因此调用的是同一个Bean实例。</p>

<ol>
  <li>当Bean不再需要时，进入销毁阶段。如果Bean实现了<code class="language-plaintext highlighter-rouge">DisposableBean</code>接口，将调用其<code class="language-plaintext highlighter-rouge">destroy</code>方法来销毁Bean。</li>
  <li>如果在配置文件中通过<code class="language-plaintext highlighter-rouge">destroy-method</code>属性指定了Bean的销毁方法，将调用配置的销毁方法进行Bean的销毁操作。</li>
</ol>

<p>在Spring中，通过实现特定接口或配置<code class="language-plaintext highlighter-rouge">&lt;bean&gt;</code>元素的属性，开发者可以影响Bean的生命周期过程。建议谨慎使用Bean实现接口，以避免过度耦合代码与Spring框架。</p>

<h2 id="使用注解">使用注解</h2>

<p>使用Spring的IoC容器，实际上就是通过类似XML这样的配置文件，把Bean的依赖关系描述出来，然后让容器来创建并装配Bean。一旦容器初始化完毕，就可以直接从容器中获取Bean使用它们。</p>

<p>使用XML配置的优点是所有的Bean都能一目了然地列出来，并通过配置注入能直观地看到每个Bean的依赖。它的缺点是写起来非常繁琐，每增加一个组件，就必须把新的Bean配置到XML中。</p>

<p>还可以使用Annotation配置，让Spring自动扫描Bean并组装它们。</p>

<p>原代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>xml：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">"0"</span> <span class="na">ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>使用注解后：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@Component</code>注解就相当于定义了一个Bean，默认名称为小写开头的类名，可以指定<code class="language-plaintext highlighter-rouge">value</code>显示设置Bean名称。这里是使用构造方法装配，也可以使用<code class="language-plaintext highlighter-rouge">@Autowired</code>把指定类型的Bean注入到指定的字段中，它可以写在set方法上，也可以写在字段上，还可以写在构造方法形参上。如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>一般把<code class="language-plaintext highlighter-rouge">@Autowired</code>写在字段上：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对于xml配置部分，通过标注<code class="language-plaintext highlighter-rouge">@Configuration</code>，表示<code class="language-plaintext highlighter-rouge">Test</code>是一个配置类，并且标注<code class="language-plaintext highlighter-rouge">@ComponentScan</code>告诉容器，自动搜索<strong>当前配置类所在的包以及子包</strong>的注解并装配。因此要特别注意包的层次结构。通常来说，启动配置类要位于自定义的顶层包。当然也可以指定要扫描的包<code class="language-plaintext highlighter-rouge">@ComponentScan("com.aotmd.test")</code>，这样就不用特定配置类的位置了。</p>

<p>如果不想使用配置类，也可以使用xml扫描注解：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"com.aotmd.test"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p>常用的装配注解：</p>

<table>
  <thead>
    <tr>
      <th>注解</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Component</code></td>
      <td>描述Spring中的Bean，但是它时一个泛化的概念，仅仅表示一个组件（Bean）并且可以作用在任何层次；</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Repository</code></td>
      <td>用于将数据访问层（DAO）层的类标识为Spring中的Bean</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Service</code></td>
      <td>作用在业务层（service层），用于将业务层的类标识为Spring中的Bean</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Controller</code></td>
      <td>作用在控制层（如Spring MVC 的 controller层），用于将控制层的类标识为Spring中的Bean</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Autowired</code></td>
      <td>该注解可以对类成员变量、方法及构造方法进行标注，完成自动装配的工作。  通过<code class="language-plaintext highlighter-rouge">@Autowired</code>的使用来消除setter 和getter方法。默认按照Bean的<strong>类型进行装配</strong>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Resource</code></td>
      <td>该注解与<code class="language-plaintext highlighter-rouge">@Autowired</code>功能一样。区别在于，该注解默认是按照<strong>名称</strong>来装配注入的，只有当找不到与名称匹配的Bean才会按照类型来装配注入； <code class="language-plaintext highlighter-rouge">@Resource</code>注解有两个属性；<code class="language-plaintext highlighter-rouge">name</code>和<code class="language-plaintext highlighter-rouge">type</code>。<code class="language-plaintext highlighter-rouge">name</code>属性指定Bean实例名称，即按照名称来装配注入；<code class="language-plaintext highlighter-rouge">type</code>属性指定Bean类型，即按照Bean的类型进行装配</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Qualifier</code></td>
      <td>该注解与<code class="language-plaintext highlighter-rouge">@Autowired</code>注解配合使用。当<code class="language-plaintext highlighter-rouge">@Autowired</code>注解需要按照<strong>名称</strong>来装配注入，则需要结合该注解一起使用，Bean的实例名称由<code class="language-plaintext highlighter-rouge">@Qualifier</code>注解的参数指定。</td>
    </tr>
  </tbody>
</table>

<p>注意: <code class="language-plaintext highlighter-rouge">@Component</code>、<code class="language-plaintext highlighter-rouge">@Repository</code>、<code class="language-plaintext highlighter-rouge">@Service</code>、<code class="language-plaintext highlighter-rouge">@Controller</code>注解默认无参数生成的Bean是<strong>首字母小写</strong>的类名,但若<strong>类名第一第二都是大写</strong>则将<strong>类名</strong>做为生成的Bean,若类名首字母是小写则一样以类名作为标识符。</p>

<p>上面几个注解中，虽然<code class="language-plaintext highlighter-rouge">@Repository</code>、<code class="language-plaintext highlighter-rouge">@Service</code>和<code class="language-plaintext highlighter-rouge">@Controller</code>等注解的功能与<code class="language-plaintext highlighter-rouge">@Component</code>相同，但为了使标注类的用途更加清晰（层次化），在实际开发中推荐使用<code class="language-plaintext highlighter-rouge">@Repository</code>标注数据访问层（DAO层）、使用<code class="language-plaintext highlighter-rouge">@Service</code>标注业务逻辑层（Service层）以及使用<code class="language-plaintext highlighter-rouge">@Controller</code>标注控制器层（控制层）。</p>

<h3 id="configuration">Configuration</h3>

<p><code class="language-plaintext highlighter-rouge">@Configuration</code>注解用于标识一个类是Spring的配置类，它通常与<code class="language-plaintext highlighter-rouge">@Bean</code>注解一起使用，用于定义Bean的创建和配置。主要作用包括：</p>

<ol>
  <li><strong>定义Bean</strong>：在配置类中使用<code class="language-plaintext highlighter-rouge">@Bean</code>注解定义Bean的创建方法，Spring容器会根据这些方法创建相应的Bean实例。</li>
  <li><strong>替代XML配置</strong>：<code class="language-plaintext highlighter-rouge">@Configuration</code>注解可以替代传统的XML配置文件，通过Java类的方式来配置应用程序的Bean。</li>
  <li><strong>组件扫描</strong>：<code class="language-plaintext highlighter-rouge">@Configuration</code>注解通常与<code class="language-plaintext highlighter-rouge">@ComponentScan</code>注解一起使用，用于启用组件扫描，自动发现和注册Spring的Bean。</li>
  <li><strong>条件化配置</strong>：可以结合条件注解如<code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>等，根据条件来决定是否应用某个配置。</li>
  <li><strong>AOP支持</strong>：<code class="language-plaintext highlighter-rouge">@Configuration</code>类中的方法可以使用<code class="language-plaintext highlighter-rouge">@Bean</code>注解来声明切面等AOP相关的Bean。</li>
  <li><strong>配置属性绑定</strong>：可以使用<code class="language-plaintext highlighter-rouge">@Value</code>注解将配置文件中的属性值注入到<code class="language-plaintext highlighter-rouge">@Configuration</code>类中的Bean中。</li>
</ol>

<p>如果没有该注解，也可以正常使用，但它的缺陷是被调用的@Bean方法产生的实例在容器中不是唯一的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">);</span>
        
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">)</span>
    <span class="no">A</span> <span class="nf">getA</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getB</span><span class="o">()</span> <span class="o">==</span> <span class="n">getB</span><span class="o">());</span> <span class="c1">//结果是false，说明每调用一次getB()都会产生新的实例。加上@Configuration之后结果就是true了。</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="no">B</span> <span class="nf">getB</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{}</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">B</span><span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="prototype">Prototype</h3>

<p>对于Spring容器来说，把一个Bean标记为<code class="language-plaintext highlighter-rouge">@Component</code>后，它就会自动创建一个单例（Singleton），即容器初始化时创建Bean，容器关闭前销毁Bean。在容器运行期间，调用<code class="language-plaintext highlighter-rouge">getBean(Class)</code>获取到的Bean总是同一个实例。</p>

<p>还有一种Bean，每次调用<code class="language-plaintext highlighter-rouge">getBean(Class)</code>，容器都返回一个<strong>新的实例</strong>，这种Bean称为Prototype（原型），它的生命周期和Singleton不同。声明一个Prototype的Bean时，需要添加一个额外的<code class="language-plaintext highlighter-rouge">@Scope</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scope</span><span class="o">(</span><span class="nc">ConfigurableBeanFactory</span><span class="o">.</span><span class="na">SCOPE_PROTOTYPE</span><span class="o">)</span><span class="c1">//"prototype"</span>
</code></pre></div></div>

<p>即：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a1</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="no">A</span> <span class="n">a2</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a1</span><span class="o">==</span><span class="n">a2</span><span class="o">);</span><span class="c1">//false</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="nd">@Scope</span><span class="o">(</span><span class="nc">ConfigurableBeanFactory</span><span class="o">.</span><span class="na">SCOPE_PROTOTYPE</span><span class="o">)</span><span class="c1">//"prototype"</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">A</span><span class="o">(</span><span class="no">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>具体来说有如下几个作用域：</p>

<table>
  <thead>
    <tr>
      <th><strong>作用域名称</strong></th>
      <th><strong>描述</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>singleton</strong></td>
      <td>默认的作用域，使用singleton定义的Bean在Spring容器中只有一个Bean实例。</td>
    </tr>
    <tr>
      <td><strong>prototype</strong></td>
      <td>Spring容器每次获取prototype定义的Bean，容器都将创建一个新的Bean实例。</td>
    </tr>
    <tr>
      <td><strong>request</strong></td>
      <td>在一次HTTP请求中容器将返回一个Bean实例，不同的HTTP请求返回不同的Bean实例。仅在Web Spring应用程序上下文中使用。</td>
    </tr>
    <tr>
      <td><strong>session</strong></td>
      <td>在一个HTTP Session中，容器将返回同一个Bean实例。仅在Web Spring应用程序上下文中使用。</td>
    </tr>
    <tr>
      <td><strong>application</strong></td>
      <td>为每个ServletContext对象创建一个实例，即同一个应用共享一个Bean实例。仅在Web Spring应用程序上下文中使用。</td>
    </tr>
    <tr>
      <td><strong>websocket</strong></td>
      <td>为每个WebSocket对象创建一个Bean实例。仅在Web Spring应用程序上下文中使用。</td>
    </tr>
  </tbody>
</table>

<h3 id="注入list">注入List</h3>

<p>有些时候，会有一系列接口相同，不同实现类的Bean。例如，注册用户时，要对<code class="language-plaintext highlighter-rouge">email</code>、<code class="language-plaintext highlighter-rouge">password</code>和<code class="language-plaintext highlighter-rouge">name</code>这3个变量进行验证。为了便于扩展，先定义验证接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Validator</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后，分别使用3个<code class="language-plaintext highlighter-rouge">Validator</code>对用户参数进行验证：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">EmailValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">user</span><span class="o">.</span><span class="na">email</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">"^[a-z0-9]+@[a-z0-9]+\\.[a-z]{2,10}$"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"invalid email: "</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">email</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">PasswordValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">"^.{6,20}$"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"invalid password"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">NameValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"invalid name: "</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>最后，通过一个<code class="language-plaintext highlighter-rouge">Validators</code>作为入口进行验证：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">Validators</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Validator</span><span class="o">&gt;</span> <span class="n">validators</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validate</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">validator</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">validators</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">validator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Validators</span> <span class="n">validators</span><span class="o">=</span> <span class="o">(</span><span class="nc">Validators</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"validators"</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"123@qq.com"</span><span class="o">,</span> <span class="s">"123123"</span><span class="o">,</span> <span class="s">"45ddf"</span><span class="o">);</span>
        <span class="n">validators</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Validators</code>被注入了一个<code class="language-plaintext highlighter-rouge">List&lt;Validator&gt;</code>，Spring会自动把所有类型为<code class="language-plaintext highlighter-rouge">Validator</code>的Bean装配为一个<code class="language-plaintext highlighter-rouge">List</code>注入进来，这样一来，每新增一个<code class="language-plaintext highlighter-rouge">Validator</code>类型，就自动被Spring装配到<code class="language-plaintext highlighter-rouge">Validators</code>中了，非常方便。</p>

<p>因为Spring是通过扫描classpath获取到所有的Bean，而<code class="language-plaintext highlighter-rouge">List</code>是有序的，要指定<code class="language-plaintext highlighter-rouge">List</code>中Bean的顺序，可以加上<code class="language-plaintext highlighter-rouge">@Order</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">EmailValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{}</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">PasswordValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{}</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">NameValidator</span> <span class="kd">implements</span> <span class="nc">Validator</span> <span class="o">{}</span>
</code></pre></div></div>

<h3 id="可选注入">可选注入</h3>

<p>默认情况下，当标记了一个<code class="language-plaintext highlighter-rouge">@Autowired</code>后，Spring如果没有找到对应类型的Bean，它会<strong>抛出<code class="language-plaintext highlighter-rouge">NoSuchBeanDefinitionException</code>异常</strong>。可以给<code class="language-plaintext highlighter-rouge">@Autowired</code>增加一个<code class="language-plaintext highlighter-rouge">required = false</code>的参数，表示如果找不到就忽略，不抛出异常。这种方式非常适合有定义就使用定义，没有就使用默认值的情况。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="创建第三方bean">创建第三方Bean</h3>

<p>如果想给<code class="language-plaintext highlighter-rouge">A</code>注入<code class="language-plaintext highlighter-rouge">HikariDataSource</code>，但是这个类位于<code class="language-plaintext highlighter-rouge">com.zaxxer.hikari</code>包中，并且<code class="language-plaintext highlighter-rouge">HikariDataSource</code>也不可能有<code class="language-plaintext highlighter-rouge">@Component</code>注解，如何告诉IoC容器创建并配置<code class="language-plaintext highlighter-rouge">HikariDataSource</code>？</p>

<p>当然是在<code class="language-plaintext highlighter-rouge">@Configuration</code>类中编写一个Java方法创建并返回它，并注意给方法标记一个<code class="language-plaintext highlighter-rouge">@Bean</code>注解，这个方法返回一个<code class="language-plaintext highlighter-rouge">HikariDataSource</code>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">jdbc</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"dataSource"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">HikariDataSource</span> <span class="nf">getDataSource</span><span class="o">(){</span>
        <span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"jdbcUrl"</span><span class="o">,</span><span class="s">"jdbc:mysql://localhost:3306/studentdb?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&amp;useSSL=false"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"username"</span><span class="o">,</span><span class="s">"root"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"password"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"cachePrepStmts"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">HikariDataSource</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">jdbc</span><span class="o">(){</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">ResultSet</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">"select name from student"</span><span class="o">).</span><span class="na">executeQuery</span><span class="o">();</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">next</span><span class="o">()){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">resultSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring对标记为<code class="language-plaintext highlighter-rouge">@Bean</code>的方法只调用一次，因此返回的Bean仍然是单例。</p>

<h3 id="初始化和销毁">初始化和销毁</h3>

<p>有些时候，一个Bean在注入必要的依赖后，需要进行初始化（监听消息等）。在容器关闭时，有时候还需要清理资源（关闭连接池等）。通常会定义一个<code class="language-plaintext highlighter-rouge">init()</code>方法进行初始化，定义一个<code class="language-plaintext highlighter-rouge">shutdown()</code>方法进行清理，需要引入JSR-250定义的Annotation。</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后在Bean的初始化和清理方法上标记<code class="language-plaintext highlighter-rouge">@PostConstruct</code>和<code class="language-plaintext highlighter-rouge">@PreDestroy</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Init"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PreDestroy</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Shutdown"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring容器会对上述Bean做如下初始化流程：</p>

<ul>
  <li>调用构造方法创建<code class="language-plaintext highlighter-rouge">A</code>实例；</li>
  <li>根据<code class="language-plaintext highlighter-rouge">@Autowired</code>进行注入；</li>
  <li>调用标记有<code class="language-plaintext highlighter-rouge">@PostConstruct</code>的<code class="language-plaintext highlighter-rouge">init()</code>方法进行初始化。</li>
</ul>

<p>而销毁时，容器会首先调用标记有<code class="language-plaintext highlighter-rouge">@PreDestroy</code>的<code class="language-plaintext highlighter-rouge">shutdown()</code>方法。</p>

<p>Spring只根据Annotation查找<strong>无参数</strong>方法，对方法名不作要求。</p>

<p>如果<code class="language-plaintext highlighter-rouge">shutdown()</code> 没有调用，则需要手动调用<code class="language-plaintext highlighter-rouge">applicationContext.close()</code>，而不是等待进程结束。</p>

<p>在Spring框架中，Bean的生命周期经历了多个阶段，包括实例化、属性赋值、初始化、使用和销毁等过程。以下是典型的Bean生命周期：</p>

<ol>
  <li>
    <p><strong>实例化（Instantiation）</strong>：在这个阶段，Spring容器根据Bean的定义创建Bean的实例。</p>
  </li>
  <li>
    <p><strong>属性赋值（Populate Properties）</strong>：在实例化之后，Spring容器会根据配置文件或注解对Bean的属性进行赋值，包括基本类型的注入、引用类型的注入等。</p>
  </li>
  <li>
    <p><strong>初始化（Initialization）</strong>：在属性赋值完成之后，Spring容器会调用Bean的初始化方法（如果有定义的话），可以通过<code class="language-plaintext highlighter-rouge">@PostConstruct</code>注解或实现<code class="language-plaintext highlighter-rouge">InitializingBean</code>接口来定义初始化方法。</p>
  </li>
  <li>
    <p><strong>使用（In Use）</strong>：在初始化完成之后，Bean就可以被应用程序使用了，它会被注入到其他Bean中，或者被直接使用。</p>
  </li>
  <li>
    <p><strong>销毁（Destruction）</strong>：在Bean不再需要的时候，Spring容器会调用Bean的销毁方法（如果有定义的话），可以通过<code class="language-plaintext highlighter-rouge">@PreDestroy</code>注解或实现<code class="language-plaintext highlighter-rouge">DisposableBean</code>接口来定义销毁方法。</p>
  </li>
</ol>

<h3 id="使用别名">使用别名</h3>

<p>默认情况下，对一种类型的Bean，容器只创建一个实例。但有些时候，需要对一种类型的Bean创建多个实例。例如，同时连接多个数据库，就必须创建多个<code class="language-plaintext highlighter-rouge">DataSource</code>实例。</p>

<p>如果在<code class="language-plaintext highlighter-rouge">@Configuration</code>类中创建了多个同类型的Bean，在Spring 5.0之前的版本中，Spring会报<code class="language-plaintext highlighter-rouge">NoUniqueBeanDefinitionException</code>异常，意思是出现了重复的Bean定义。从Spring 5.0开始，默认情况下，Spring允许存在多个同类型的Bean定义，并且不会抛出异常。相反，它会将这些Bean注册为一个集合类型的Bean。</p>

<p>要避免这个异常，可以指定不同的名称：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"b1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">b</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"b2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">b2</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"b1"</span><span class="o">)</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以用<code class="language-plaintext highlighter-rouge">@Bean("name")</code>指定别名，也可以用<code class="language-plaintext highlighter-rouge">@Bean</code>+<code class="language-plaintext highlighter-rouge">@Qualifier("name")</code>指定别名。</p>

<p>其实Bean的<code class="language-plaintext highlighter-rouge">name</code>默认就是方法名称。</p>

<h3 id="注入选择问题">注入选择问题</h3>

<p>存在多个同类型的Bean时，注入时又会报错，即不知道注入哪个，因此要通过<code class="language-plaintext highlighter-rouge">@Qualifier("b1")</code>指定注入的Bean名称。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"b1"</span><span class="o">)</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里也可以把两个注解换成 <code class="language-plaintext highlighter-rouge">@Resource(name = "b1")</code>。</p>

<p>还可以把待注入的<strong>变量名称</strong>改为Bean名称，这样也可以指定注入的Bean名称：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b1</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b1</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>也可以通过使用<code class="language-plaintext highlighter-rouge">@Primary</code>指定某个Bean，在注入时，如果没有指出Bean的名字，Spring会注入标记有<code class="language-plaintext highlighter-rouge">@Primary</code>的Bean。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span><span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span><span class="c1">//test为配置文件中的id</span>
        <span class="n">a</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"b1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">b</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"b2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">b2</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="no">B</span> <span class="n">b</span><span class="o">;</span><span class="c1">//默认注入b1</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="n">b</span><span class="o">.</span><span class="na">hello</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hello</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>若使用Spring boot，还能根据配置属性的值来决定是否应用这个配置。即注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">"class"</span><span class="o">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"select"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"B"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">B</span><span class="err">｛｝</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Configuration</code>：注解表示这是一个配置类，它会被Spring容器扫描并加载。</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>：注解用于根据配置属性的值来决定是否应用这个配置。它有几个参数：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">prefix</code>：配置属性的前缀。在这个例子中，配置属性的前缀是<code class="language-plaintext highlighter-rouge">class</code>。</li>
      <li><code class="language-plaintext highlighter-rouge">name</code>：配置属性的名称。在这个例子中，配置属性的名称是<code class="language-plaintext highlighter-rouge">select</code>。</li>
      <li><code class="language-plaintext highlighter-rouge">havingValue</code>：期望的配置属性值。在这个例子中，期望的配置属性值是<code class="language-plaintext highlighter-rouge">B</code>。</li>
    </ul>
  </li>
</ul>

<p>如果满足了以上条件，即配置属性<code class="language-plaintext highlighter-rouge">class.select</code>的值为<code class="language-plaintext highlighter-rouge">B</code>，那么这个配置类中的配置将会生效。否则，这个配置类中的配置将会被忽略。</p>

<h3 id="使用factorybean">使用FactoryBean</h3>

<p>用工厂模式创建Bean需要实现<code class="language-plaintext highlighter-rouge">FactoryBean</code>接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">BFactoryBean</span> <span class="kd">implements</span> <span class="nc">FactoryBean</span><span class="o">&lt;</span><span class="no">B</span><span class="o">&gt;{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="no">B</span> <span class="nf">getObject</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getObjectType</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">B</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当一个Bean实现了<code class="language-plaintext highlighter-rouge">FactoryBean</code>接口后，Spring会先实例化这个工厂，然后调用<code class="language-plaintext highlighter-rouge">getObject()</code>创建真正的Bean。<code class="language-plaintext highlighter-rouge">getObjectType()</code>可以指定创建的Bean的类型，因为指定类型不一定与实际类型一致，可以是接口或抽象类。</p>

<p>因此，如果定义了一个<code class="language-plaintext highlighter-rouge">FactoryBean</code>，要注意Spring创建的Bean实际上是这个<code class="language-plaintext highlighter-rouge">FactoryBean</code>的<code class="language-plaintext highlighter-rouge">getObject()</code>方法返回的Bean。为了和普通Bean区分，通常都以<code class="language-plaintext highlighter-rouge">XxxFactoryBean</code>命名。</p>

<p>由于可以用<code class="language-plaintext highlighter-rouge">@Bean</code>方法创建第三方Bean，本质上<code class="language-plaintext highlighter-rouge">@Bean</code>方法就是工厂方法，所以，<code class="language-plaintext highlighter-rouge">FactoryBean</code>已经用得越来越少了。</p>

<h3 id="使用resource">使用Resource</h3>

<p>在Java程序中，经常会读取配置文件、资源文件等。使用Spring容器时，也可以把“文件”注入进来，方便程序读取。</p>

<p>例如，AppService需要读取<code class="language-plaintext highlighter-rouge">logo.txt</code>这个文件，通常情况下，需要写很多繁琐的代码，主要是为了定位文件，打开InputStream。</p>

<p>Spring提供了一个<code class="language-plaintext highlighter-rouge">org.springframework.core.io.Resource</code>（注意不是<code class="language-plaintext highlighter-rouge">jarkata.annotation.Resource</code>或<code class="language-plaintext highlighter-rouge">javax.annotation.Resource</code>），它可以像<code class="language-plaintext highlighter-rouge">String</code>、<code class="language-plaintext highlighter-rouge">int</code>一样使用<code class="language-plaintext highlighter-rouge">@Value</code>注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"classpath:/application.xml"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Resource</span> <span class="n">resource</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printResource</span><span class="o">(){</span>
        <span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">resource</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">lines</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">"\n"</span><span class="o">)));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注入<code class="language-plaintext highlighter-rouge">Resource</code>最常用的方式是通过classpath，即类似<code class="language-plaintext highlighter-rouge">classpath:/application.xml</code>表示在classpath中搜索<code class="language-plaintext highlighter-rouge">application.xml</code>文件，然后，直接调用<code class="language-plaintext highlighter-rouge">Resource.getInputStream()</code>就可以获取到输入流，避免了自己搜索文件的代码。</p>

<p>也可以直接指定文件的路径，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Value</span><span class="o">(</span><span class="s">"file:D:/application.xml"</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="注入配置">注入配置</h3>

<p>在开发应用程序时，经常需要读取配置文件。最常用的配置方法是以<code class="language-plaintext highlighter-rouge">key=value</code>的形式写在<code class="language-plaintext highlighter-rouge">.properties</code>文件中。</p>

<p>例如，<code class="language-plaintext highlighter-rouge">MailService</code>根据配置的<code class="language-plaintext highlighter-rouge">app.zone=Asia/Shanghai</code>来决定使用哪个时区。要读取配置文件，可以使用上一节的<code class="language-plaintext highlighter-rouge">Resource</code>来读取位于classpath下的一个<code class="language-plaintext highlighter-rouge">app.properties</code>文件。但是，这样仍然比较繁琐。</p>

<p>Spring容器还提供了一个更简单的<code class="language-plaintext highlighter-rouge">@PropertySource</code>来自动读取配置文件。只需要在<code class="language-plaintext highlighter-rouge">@Configuration</code>配置类上再添加一个注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:app.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.zone:Z}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">zoneId</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">appcon</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">appcon</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">print</span><span class="o">();</span>

    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*默认bean名称为首字母小写*/</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.zone:Z}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">zoneId</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">app.properties</code>：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">app.zone</span><span class="p">=</span><span class="s">Asia/Shanghai</span>
</code></pre></div></div>

<p>Spring容器看到<code class="language-plaintext highlighter-rouge">@PropertySource("app.properties")</code>注解后，自动读取这个配置文件，然后，使用<code class="language-plaintext highlighter-rouge">@Value</code>正常注入。</p>

<p>注入的字符串语法，它的格式如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">"${app.zone}"</code>表示读取key为<code class="language-plaintext highlighter-rouge">app.zone</code>的value，如果key不存在，启动将报错；</li>
  <li><code class="language-plaintext highlighter-rouge">"${app.zone:Z}"</code>表示读取key为<code class="language-plaintext highlighter-rouge">app.zone</code>的value，但如果key不存在，就使用默认值<code class="language-plaintext highlighter-rouge">Z</code>。</li>
</ul>

<p>这样一来，就可以根据<code class="language-plaintext highlighter-rouge">app.zone</code>的配置来创建<code class="language-plaintext highlighter-rouge">ZoneId</code>。</p>

<p>还可以把注入的注解写到方法参数中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.zone:Z}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">zoneId</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
    <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用<code class="language-plaintext highlighter-rouge">@PropertySource</code>读取配置文件，然后通过<code class="language-plaintext highlighter-rouge">@Value</code>以<code class="language-plaintext highlighter-rouge">${key:defaultValue}</code>的形式注入，可以极大地简化读取配置的麻烦。</p>

<p>另一种注入配置的方式是先通过一个简单的JavaBean持有所有的配置，例如，一个<code class="language-plaintext highlighter-rouge">SmtpConfig</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${app.zone:Z}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">zoneId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getZoneId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">zoneId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后，在需要读取的地方，使用<code class="language-plaintext highlighter-rouge">#{appConfig.zoneId}</code>注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"#{appConfig.zoneId}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">zoneId</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
    <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">zoneId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">#{}</code>这种注入语法，和<code class="language-plaintext highlighter-rouge">${key}</code>不同的是，<code class="language-plaintext highlighter-rouge">#{}</code>表示从JavaBean读取属性。<code class="language-plaintext highlighter-rouge">"#{appConfig.zoneId}"</code>的意思是，从名称为<code class="language-plaintext highlighter-rouge">appConfig</code>的Bean读取<code class="language-plaintext highlighter-rouge">zoneId</code>属性，即调用<code class="language-plaintext highlighter-rouge">getZoneId()</code>方法。</p>

<p>使用一个独立的JavaBean持有所有属性，然后在其他Bean中以<code class="language-plaintext highlighter-rouge">#{bean.property}</code>注入的好处是，多个Bean都可以引用同一个Bean的某个属性。如果<code class="language-plaintext highlighter-rouge">appConfig</code>决定从数据库中读取相关配置项，那么<code class="language-plaintext highlighter-rouge">createZoneId</code>注入的<code class="language-plaintext highlighter-rouge">@Value("#{appConfig.zoneId}")</code>仍然可以不修改正常运行。</p>

<h3 id="使用条件装配">使用条件装配</h3>

<p>开发应用程序时，会使用开发环境，例如，使用内存数据库以便快速启动。而运行在生产环境时，会使用生产环境，例如，使用MySQL数据库。如果应用程序可以根据自身的环境做一些适配，无疑会更加灵活。</p>

<p>Spring为应用程序准备了Profile这一概念，用来表示不同的环境。分别定义开发、测试和生产这3个环境：</p>

<ul>
  <li>native</li>
  <li>test</li>
  <li>production</li>
</ul>

<p>创建某个Bean时，Spring容器可以根据注解<code class="language-plaintext highlighter-rouge">@Profile</code>来决定是否创建。例如，以下配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nd">@Profile</span><span class="o">(</span><span class="s">"!test"</span><span class="o">)</span>
    <span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nd">@Profile</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
    <span class="nc">ZoneId</span> <span class="nf">createZoneIdForTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"America/New_York"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果当前的Profile设置为<code class="language-plaintext highlighter-rouge">test</code>，则Spring容器会调用<code class="language-plaintext highlighter-rouge">createZoneIdForTest()</code>创建<code class="language-plaintext highlighter-rouge">ZoneId</code>，否则，调用<code class="language-plaintext highlighter-rouge">createZoneId()</code>创建<code class="language-plaintext highlighter-rouge">ZoneId</code>。注意到<code class="language-plaintext highlighter-rouge">@Profile("!test")</code>表示非test环境。</p>

<p>在运行程序时，加上JVM参数<code class="language-plaintext highlighter-rouge">-Dspring.profiles.active=test</code>就可以指定以<code class="language-plaintext highlighter-rouge">test</code>环境启动。</p>

<p>实际上，Spring允许指定多个Profile，例如：</p>

<pre><code class="language-cmd">-Dspring.profiles.active=test,master
</code></pre>

<p>可以表示<code class="language-plaintext highlighter-rouge">test</code>环境，并使用<code class="language-plaintext highlighter-rouge">master</code>分支代码。要满足多个Profile条件，可以这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nd">@Profile</span><span class="o">({</span> <span class="s">"test"</span><span class="o">,</span> <span class="s">"master"</span> <span class="o">})</span> <span class="c1">// 满足test或master</span>
<span class="nc">ZoneId</span> <span class="nf">createZoneId</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>使用Conditional</strong></p>

<p>除了根据<code class="language-plaintext highlighter-rouge">@Profile</code>条件来决定是否创建某个Bean外，Spring还可以根据<code class="language-plaintext highlighter-rouge">@Conditional</code>决定是否创建某个Bean。添加如下注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">)</span>
<span class="nd">@Conditional</span><span class="o">(</span><span class="nc">MainCondition</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="no">A</span> <span class="nf">getA</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它的意思是，如果满足<code class="language-plaintext highlighter-rouge">MainCondition</code>的条件，才会创建<code class="language-plaintext highlighter-rouge">a1</code>这个Bean。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainCondition</span> <span class="kd">implements</span> <span class="nc">Condition</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">matches</span><span class="o">(</span><span class="nc">ConditionContext</span> <span class="n">context</span><span class="o">,</span> <span class="nc">AnnotatedTypeMetadata</span> <span class="n">metadata</span><span class="o">)</span> <span class="o">{</span>
    	<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里直接返回<code class="language-plaintext highlighter-rouge">false</code>，因此Bean<code class="language-plaintext highlighter-rouge">a1</code>始终不会创建。</p>

<p>Spring只提供了<code class="language-plaintext highlighter-rouge">@Conditional</code>注解，具体判断逻辑还需要我们自己实现。</p>

<p>Spring Boot提供了更多使用起来更简单的条件注解，例如，如果配置文件中存在<code class="language-plaintext highlighter-rouge">app.smtp=true</code>，则创建<code class="language-plaintext highlighter-rouge">a1</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">)</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"app.smtp"</span><span class="o">,</span> <span class="n">havingValue</span><span class="o">=</span><span class="s">"true"</span><span class="o">)</span>
<span class="no">A</span> <span class="nf">getA</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>是Spring Boot框架中的一个条件注解，用于根据属性的存在与否以及属性值来决定是否应该创建一个Bean。该注解有以下参数：</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">name</code>：要检查的属性名。指定要检查的应用程序属性的名称。如果未指定<code class="language-plaintext highlighter-rouge">prefix</code>，则将直接检查指定名称的属性。如果指定了<code class="language-plaintext highlighter-rouge">prefix</code>，则会在<code class="language-plaintext highlighter-rouge">prefix</code>后面加上<code class="language-plaintext highlighter-rouge">.</code>再加上<code class="language-plaintext highlighter-rouge">name</code>来构成完整的属性名。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">havingValue</code>：属性必须具有的值。指定属性必须具有的值才能满足条件。默认值为空字符串。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">matchIfMissing</code>：如果属性不存在时是否应该匹配。指定当属性不存在时是否应该认为条件匹配。默认值为<code class="language-plaintext highlighter-rouge">false</code>，即属性不存在时条件不匹配。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">prefix</code>：属性名的前缀。指定属性名的前缀，用于构成完整的属性名。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">value</code>：属性的值。与<code class="language-plaintext highlighter-rouge">havingValue</code>参数相同，用于指定属性必须具有的值。</p>
  </li>
</ol>

<p>通过使用这些参数，可以根据应用程序的配置属性来动态地确定是否创建某个Bean。根据属性名、属性值、属性是否存在以及是否匹配等条件，可以灵活地控制Bean的创建过程。</p>

<p>如果当前classpath中存在类<code class="language-plaintext highlighter-rouge">javax.mail.Transport</code>，则创建<code class="language-plaintext highlighter-rouge">a1</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"a1"</span><span class="o">)</span>
<span class="nd">@ConditionalOnClass</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"javax.mail.Transport"</span><span class="o">)</span>
<span class="no">A</span> <span class="nf">getA</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用条件注解，能更灵活地装配Bean。</p>

<h2 id="aop">AOP</h2>

<p>AOP ( Aspect-Oriented Programming ）即面向切面编程，它与OOP (Object-Oriented Programming ， 面向对象编程）相辅相成，提供了与OOP 不同的抽象软件结构的视角。在OOP 中，以类作为程序的基本单元，而AOP 中的基本单元是Aspect（切面）。</p>

<p>在业务处理代码中通常有日志记录、性能统计、安全控制、事务处理、异常处理等操作。尽管使用OOP 可以通过封装或继承的方式达到代码的重用，但仍然有同样的代码分散在各个方法中。</p>

<p>因此， 采用OOP 处理日志记录等操作不仅<strong>增加</strong>了开发者的工作量，而且提高了升级维护的困难。为了解决此类问题， AOP 思想应运而生。</p>

<p>AOP 采取横向抽取机制，即将分散在各个方法中的重复代码<strong>提取</strong>出来，然后在程序<strong>编译或运行阶段</strong>将这些抽取出来的代码<strong>应用到</strong>需要执行的地方。这种横向抽取机制采用传统的OOP 是无法办到的，因为OOP 实现的是父子关系的纵向重用。但是<strong>AOP 不是OOP 的替代品，而是OOP 的补充</strong>，它们相辅相成。</p>

<hr />

<p><strong>AOP的术语</strong></p>

<p>在SpringAOP框架中涉及以下常用术语。</p>

<p>切面（Aspect）：是指封装横切到<strong>系统功能</strong>（例如事务处理）的类。(通知方法的类)</p>

<p>连接点（Ooinpoint）：是指程序运行中的一些<strong>时间点</strong>，例如方法的调用或异常的抛出。(方法调用,或异常)，即定义在应用程序流程的何处插入切面的执行；</p>

<p>切入点（CPointcut）：是指<strong>需要处理的连接点</strong>。在SpringAOP中，<strong>所有的方法执行</strong>都是连接点，而切入点是一个描述信息，它修饰的是连接点，通过切入点<strong>确定</strong>哪些连接点需要被<strong>处理</strong>。(被处理的类的方法)</p>

<p>通知（Advice）：是由切面添加到特定的连接点（满足切入点规则）的一段代码，即在定义好的切入点处所要<strong>执行</strong>的<strong>程序代码</strong>，可以将其理解为切面开启后切面的方法，因此通知是切面的具体实现。(增强处理的代码)</p>

<p>引入（Introduction）：允许在现有的<strong>实现类</strong>中<strong>添加</strong>自定义的方法和属性。(增强类的方法与属性)</p>

<p>目标对象（TargetObject）：是指所有被通知的对象，即应用切面的原始对象或原始类。如果AOP框架使用运行时代理的方式（动态的AOP）来实现切面，那么通知对象总是一个<strong>代理对象</strong>。(要代理的对象Bean)</p>

<p>代理（Proxy）：是通知应用到目标对象<strong>之后</strong>被<strong>动态创建的对象</strong>。(被代理后动态生成的对象Bean)</p>

<p>织入（Weaving）：是<strong>将切面代码插入到目标对象</strong>上，<strong>从而生成代理对象的过程</strong>。根据不同的实现技术，AOP织入有3种方式：</p>
<ul>
  <li>编译期织入，需要有特殊的Java编译器；</li>
  <li>类装载期织入，需要有特殊的类装载器；</li>
  <li>动态代理织入，在运行期为目标类添加通知生成子类的方式。</li>
</ul>

<p>SpringAOP框架默认采用<strong>动态代理</strong>织入，而AspectJ（基于Java语言的AOP框架）采用编译期织入和类装载期织入。由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过<a href="https://github.com/cglib/cglib">CGLIB</a>或者<a href="https://www.javassist.org/">Javassist</a>这些第三方库实现。(代理对象生成的过程)</p>

<p>AOP技术看上去比较神秘，但实际上，它本质就是一个动态代理，把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。</p>

<p>需要特别指出的是，AOP对于解决特定问题，例如事务管理非常有用，这是因为分散在各处的事务代码几乎是完全相同的，并且它们需要的参数（JDBC的Connection）也是固定的。另一些特定问题，如日志，就不那么容易实现，因为日志虽然简单，但打印日志的时候，经常需要捕获局部变量，如果使用AOP实现日志，只能输出固定格式的日志，因此，使用AOP时，必须适合特定的场景。</p>

<p>使用代理模式的简单示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Test2</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="nc">AProxy</span><span class="o">();</span>
        <span class="n">a</span><span class="o">.</span><span class="na">func1</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">func1</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"func1"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">func2</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"func2"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">func3</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"func3"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">AProxy</span> <span class="kd">extends</span> <span class="no">A</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">func1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">func1</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">func2</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">func2</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kt">void</span> <span class="nf">func3</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">func3</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行一些代码"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过创建一个名为<code class="language-plaintext highlighter-rouge">AProxy</code>的子类来实现对<code class="language-plaintext highlighter-rouge">A</code>类的方法进行增强，这可以被认为是一种简单的AOP实现方式。在<code class="language-plaintext highlighter-rouge">AProxy</code>中，重写了<code class="language-plaintext highlighter-rouge">A</code>类的各个方法，并在方法的前后插入了额外的逻辑。</p>

<p>虽然这种方式实现了对<code class="language-plaintext highlighter-rouge">A</code>类方法的增强，但它并不是典型的AOP实现方式。在典型的AOP框架中，切面逻辑是通过配置或注解来定义的，而不是通过创建子类来重写方法。AOP框架通常会使用动态代理或字节码生成等技术来实现切面逻辑的动态织入，而不是在代码中显式地创建代理类。</p>

<hr />

<h3 id="对类进行增强">对类进行增强</h3>

<h4 id="基于xml实现">基于XML实现</h4>

<p>首先添加依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-aop<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.aspectj<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>aspectjweaver<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.9.7<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>或：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-aspects<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>要通过XML配置AOP，需要使用以下几个标签：</p>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code>：这个标签用于配置AOP的相关信息，包括切面、通知等。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>：这个标签用于定义一个切面（Aspect），其中<code class="language-plaintext highlighter-rouge">ref</code>属性指定了切面的实例引用，即切面对象的名称或引用。</p>

<p>在Spring AOP中，切面（Aspect）是一个普通的Java类，它通常包含通知（Advice）和切点（Pointcut）的定义。切面类并不需要实现特定的接口或继承特定的类，只需要符合Spring AOP的约定即可。通常情况下，一个切面类会包含以下内容：</p>

<ul>
  <li>通知（Advice）：定义了在连接点执行的具体操作，比如前置通知、后置通知、环绕通知等。</li>
  <li>切点（Pointcut）：定义了在目标对象的哪些方法上执行通知。</li>
  <li>引入（Introduction）：引入新的接口或方法到目标对象中。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:declare-parents&gt;</code>：这个标签用于声明引入（Introduction）的相关信息，即在目标对象中引入新的接口或实现类。具有如下属性：</p>

<table>
  <thead>
    <tr>
      <th><strong>属性</strong></th>
      <th><strong>解释</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">types-matching</code></td>
      <td>AspectJ类型表达式，所限制的类可加”+*..”号</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">implement-interfac</code></td>
      <td>将引入的接口的标准名称</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">default-impl</code></td>
      <td>将引入接口的实现类的完全限定名称</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">delegate-ref</code></td>
      <td>将引入接口的实现类的Bean名称(实例化的)</td>
    </tr>
  </tbody>
</table>

<p><strong>目标</strong>是<code class="language-plaintext highlighter-rouge">types-matching</code>的类，spring让它实现<code class="language-plaintext highlighter-rouge">implement-interface</code>所指向的<strong>接口</strong>，而具体实现则通过<code class="language-plaintext highlighter-rouge">default-impl</code>或<code class="language-plaintext highlighter-rouge">delegate-ref</code>属性来赋予。让 <code class="language-plaintext highlighter-rouge">types-matching</code> 的类添加了<strong>接口</strong>并且指定了<strong>实现</strong>。</p>

<p>对类进行增强实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">a</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="no">I</span> <span class="n">i</span><span class="o">=(</span><span class="no">I</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
        <span class="n">i</span><span class="o">.</span><span class="na">test</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"飞行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Aspect</span><span class="o">{}</span>
</code></pre></div></div>

<p>XML：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">/&gt;</span><span class="c">&lt;!--目标类--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span><span class="nt">/&gt;</span><span class="c">&lt;!--增强类--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"aspect"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.Aspect"</span><span class="nt">/&gt;</span><span class="c">&lt;!--切面类--&gt;</span>
<span class="nt">&lt;aop:config&gt;</span>
    <span class="nt">&lt;aop:aspect</span> <span class="na">ref=</span><span class="s">"aspect"</span><span class="nt">&gt;</span><span class="c">&lt;!--指向切面类，这里Aspect是空的--&gt;</span>
        <span class="nt">&lt;aop:declare-parents</span> <span class="na">types-matching=</span><span class="s">"com.aotmd.test.A"</span> <span class="na">implement-interface=</span><span class="s">"com.aotmd.test.I"</span> <span class="na">default-impl=</span><span class="s">"com.aotmd.test.B"</span><span class="nt">/&gt;</span>
        <span class="c">&lt;!--两种方法，选一个即可：--&gt;</span>
        <span class="nt">&lt;aop:declare-parents</span> <span class="na">types-matching=</span><span class="s">"com.aotmd.test.A"</span> <span class="na">implement-interface=</span><span class="s">"com.aotmd.test.I"</span> <span class="na">delegate-ref=</span><span class="s">"b"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/aop:aspect&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>飞行
com.aotmd.test.A$$EnhancerBySpringCGLIB$$712bcb1a
com.aotmd.test.B
</code></pre></div></div>

<p>在这个示例中，定义了三个bean：<code class="language-plaintext highlighter-rouge">a</code>、<code class="language-plaintext highlighter-rouge">b</code>和<code class="language-plaintext highlighter-rouge">aspect</code>。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">a</code>是目标类（Target Class），它是<code class="language-plaintext highlighter-rouge">com.aotmd.test.A</code>类的实例。</li>
  <li><code class="language-plaintext highlighter-rouge">b</code>是增强类（Advice Class），它是<code class="language-plaintext highlighter-rouge">com.aotmd.test.B</code>类的实例。</li>
  <li><code class="language-plaintext highlighter-rouge">aspect</code>是切面类（Aspect Class），它是<code class="language-plaintext highlighter-rouge">com.aotmd.test.Aspect</code>类的实例。</li>
</ul>

<p>然后，通过<code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code>配置元素来定义AOP配置。在<code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>元素中，通过<code class="language-plaintext highlighter-rouge">ref="aspect"</code>将<code class="language-plaintext highlighter-rouge">aspect</code>切面类引入为切面的实例。</p>

<p>在<code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>元素中，使用了<code class="language-plaintext highlighter-rouge">&lt;aop:declare-parents&gt;</code>元素来声明引入（Introduction）操作。通过<code class="language-plaintext highlighter-rouge">types-matching</code>属性指定了<code class="language-plaintext highlighter-rouge">com.aotmd.test.A</code>类型的类，表示要对<code class="language-plaintext highlighter-rouge">A</code>类进行引入操作。使用<code class="language-plaintext highlighter-rouge">implement-interface</code>属性指定了要引入的接口<code class="language-plaintext highlighter-rouge">com.aotmd.test.I</code>，并使用<code class="language-plaintext highlighter-rouge">default-impl</code>属性指定了接口的默认实现类<code class="language-plaintext highlighter-rouge">com.aotmd.test.B</code>。</p>

<p>这样，通过AOP的引入操作，<code class="language-plaintext highlighter-rouge">A</code>类将会实现<code class="language-plaintext highlighter-rouge">I</code>接口，并使用<code class="language-plaintext highlighter-rouge">B</code>类作为接口的默认实现。这样，<code class="language-plaintext highlighter-rouge">A</code>类就拥有了<code class="language-plaintext highlighter-rouge">I</code>接口的方法，并且默认实现是<code class="language-plaintext highlighter-rouge">B</code>类的方法。</p>

<p>这样配置之后，<strong>所有的<code class="language-plaintext highlighter-rouge">A</code>对象</strong>都会<strong>具有<code class="language-plaintext highlighter-rouge">I</code>接口的功能</strong>，并默认使用<code class="language-plaintext highlighter-rouge">B</code>类来实现这个功能。</p>

<p>然后在<code class="language-plaintext highlighter-rouge">Test</code>类的<code class="language-plaintext highlighter-rouge">main</code>方法中，通过<code class="language-plaintext highlighter-rouge">ApplicationContext</code>从XML配置文件中加载了Spring容器，并从容器中获取了<code class="language-plaintext highlighter-rouge">A</code>类的实例<code class="language-plaintext highlighter-rouge">a</code>。然后调用了<code class="language-plaintext highlighter-rouge">a</code>的<code class="language-plaintext highlighter-rouge">print</code>方法，并打印了<code class="language-plaintext highlighter-rouge">a</code>的类名。接着，将<code class="language-plaintext highlighter-rouge">a</code>强制类型转换为<code class="language-plaintext highlighter-rouge">I</code>接口类型，并调用了<code class="language-plaintext highlighter-rouge">test</code>方法。</p>

<p>根据AOP配置，<code class="language-plaintext highlighter-rouge">a</code>的实例<code class="language-plaintext highlighter-rouge">A</code>被引入了<code class="language-plaintext highlighter-rouge">I</code>接口，并且默认实现为<code class="language-plaintext highlighter-rouge">B</code>类。因此，将<code class="language-plaintext highlighter-rouge">a</code>强制类型转换为<code class="language-plaintext highlighter-rouge">I</code>接口并调用<code class="language-plaintext highlighter-rouge">test</code>方法时，实际上会调用<code class="language-plaintext highlighter-rouge">B</code>类的<code class="language-plaintext highlighter-rouge">test</code>方法。</p>

<p>从spring容器中拿出来的<code class="language-plaintext highlighter-rouge">a</code>对象可以被强转换成<code class="language-plaintext highlighter-rouge">I</code>类型的对象。如果调用<code class="language-plaintext highlighter-rouge">I</code>的方法必须要强转，因为这些都是spring背后做了很多事情。</p>

<hr />

<h4 id="基于注解">基于注解</h4>

<p>对类进行增强实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*@EnableAspectJAutoProxy:支持处理标有 AspectJ @Aspect 注解的组件，
类似于 Spring 的 XML 元素中的 &lt;aop:aspectj-autoproxy&gt; 功能。
用于 @Configuration 类*/</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">a</span><span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="no">A</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">a</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="no">I</span> <span class="n">i</span><span class="o">=(</span><span class="no">I</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
        <span class="n">i</span><span class="o">.</span><span class="na">test</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"飞行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">();</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*这里重名了，因此要完全名*/</span>
<span class="nd">@org</span><span class="o">.</span><span class="na">aspectj</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">Aspect</span><span class="o">{</span>
    <span class="nd">@DeclareParents</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span><span class="s">"com.aotmd.test.A"</span><span class="o">,</span><span class="n">defaultImpl</span> <span class="o">=</span> <span class="no">B</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">I</span> <span class="n">i</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>飞行
com.aotmd.test.A$$EnhancerBySpringCGLIB$$5fdfd7a5
com.aotmd.test.B
com.aotmd.test.B@2fd953a6
</code></pre></div></div>

<p>这里使用了<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>注解来启用对标记有AspectJ <code class="language-plaintext highlighter-rouge">@Aspect</code>注解的组件的支持，类似于在Spring XML配置中使用<code class="language-plaintext highlighter-rouge">&lt;aop:aspectj-autoproxy&gt;</code>元素的功能。这个注解通常用于<code class="language-plaintext highlighter-rouge">@Configuration</code>类中。通过这个注解，Spring将会自动代理被<code class="language-plaintext highlighter-rouge">@Aspect</code>注解标记的类，使得切面逻辑能够被织入到目标类中。</p>

<p><code class="language-plaintext highlighter-rouge">@Aspect</code>: 这个注解用于标记一个类为切面（Aspect），其中定义了切面的通知（advice）和切点（pointcut）。在上面的代码中，<code class="language-plaintext highlighter-rouge">Aspect</code>类被标记为切面，用于定义引入操作。</p>

<p><code class="language-plaintext highlighter-rouge">@DeclareParents</code>: 这个注解用于在切面中声明引入操作，将新的接口引入到目标类中。在上面的代码中，<code class="language-plaintext highlighter-rouge">Aspect</code>类使用<code class="language-plaintext highlighter-rouge">@DeclareParents</code>注解来向<code class="language-plaintext highlighter-rouge">A</code>类引入<code class="language-plaintext highlighter-rouge">I</code>接口，并指定<code class="language-plaintext highlighter-rouge">B</code>类作为默认实现类。</p>

<p><code class="language-plaintext highlighter-rouge">@DeclareParents</code>的属性说明:</p>

<table>
  <thead>
    <tr>
      <th><strong>属性</strong></th>
      <th><strong>解释</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">value</code></td>
      <td>AspectJ类型表达式，所限制的类可加<code class="language-plaintext highlighter-rouge">+*..</code>这几个符号</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">default-impl</code></td>
      <td>将引入接口的实现类的完全限定名称的class实例</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">@DeclareParents</code>用在切面类(<code class="language-plaintext highlighter-rouge">@Aspect</code>)中的需要引入的接口实例上。</p>

<p>注意:切面类(<code class="language-plaintext highlighter-rouge">@Aspect</code>)需要<code class="language-plaintext highlighter-rouge">@Component</code>成一个Bean,才能在内部使用<code class="language-plaintext highlighter-rouge">@DeclareParents</code>。</p>

<h3 id="动态代理类型">动态代理类型</h3>

<p>在Java中有多种动态代理技术，例如JDK、CGLIB、Javassist、ASM，其中最常用的动态代理技术是JDK和CGLIB。目前，在SpringAOP中常用JDK和CGLIB两种动态代理技术。</p>

<h4 id="jdk动态代理">JDK动态代理</h4>

<p>JDK动态代理是<code class="language-plaintext highlighter-rouge">java.lang.reflect.*</code>包提供的方式，它<strong>必须借助</strong>一个<strong>接口</strong>才能产生代理对象。因此，对于使用业务接口的类，Spring默认使用JDK动态代理实现AOP。</p>

<p>JDK中所要进行动态代理的类必须要实现一个接口，也就是说只能对该类所实现接口中定义的方法进行代理，这在实际编程中具有一定的局限性，而且使用反射的效率也并不是很高。</p>

<p>要生成某一个对象的代理对象，这个代理对象通常也要编写一个类来生成，所以首先要编写用于生成代理对象的类。</p>

<p>java在JDK1.5之后提供了一个<code class="language-plaintext highlighter-rouge">java.lang.reflect.Proxy</code>类，通过<code class="language-plaintext highlighter-rouge">Proxy</code>类提供的一个<code class="language-plaintext highlighter-rouge">newProxyInstance</code>方法用来创建一个对象的代理对象，只需传入目标接口的类加载器、目标接口以及<code class="language-plaintext highlighter-rouge">InvocationHandler</code>回调接口，便可为<strong>目标接口</strong>生成代理类及代理对象，而且生成的代理类是其接口的实现类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="nc">ClassLoader</span> <span class="n">loader</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">,</span> <span class="nc">InvocationHandler</span> <span class="n">h</span><span class="o">);</span>
</code></pre></div></div>

<p>通过<code class="language-plaintext highlighter-rouge">Proxy.newProxyInstance()</code>创建<code class="language-plaintext highlighter-rouge">interface</code>实例，需要3个参数：</p>

<ol>
  <li>使用的<code class="language-plaintext highlighter-rouge">ClassLoader</code>，通常就是接口的<code class="language-plaintext highlighter-rouge">ClassLoader</code>；</li>
  <li>需要实现的接口数组，<strong>至少需要传入一个接口进去</strong>；</li>
  <li>用来处理接口方法调用的<code class="language-plaintext highlighter-rouge">InvocationHandler</code>实例。</li>
</ol>

<p>返回值为接口实现类的实例。</p>

<p><code class="language-plaintext highlighter-rouge">InvocationHandler</code>回调接口有一个方法，对于代理的逻辑方法，<strong>所有动态代理类的方法调用都会交给该回调接口方法处理</strong>，因此不要使用<code class="language-plaintext highlighter-rouge">method.invoke(proxy,args);</code>代码，这会导致无限递归：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">Throwable</span><span class="o">;</span>
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">proxy</code>：把代理对象自己传递进来。</li>
  <li><code class="language-plaintext highlighter-rouge">method</code>：把代理对象当前调用的方法传递进来可以使用这个参数来获取方法的信息，比如方法名、参数类型等。</li>
  <li><code class="language-plaintext highlighter-rouge">args</code>：方法的参数数组。这个参数包含了方法调用时传入的参数值。</li>
  <li><code class="language-plaintext highlighter-rouge">返回值</code>：返回函数执行的结果，取决于你想返回什么。</li>
</ul>

<p>通过一般类实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">JDKProxy</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JDKProxy</span><span class="o">&lt;&gt;();</span><span class="c1">//创建生成代理对象的工厂类，同时它也负责InvocationHandler的执行逻辑。</span>
        <span class="no">T</span> <span class="n">t</span><span class="o">=</span><span class="k">new</span> <span class="nc">TDemo</span><span class="o">();</span><span class="c1">//创建目标对象</span>
        <span class="cm">/*获取增强后的目标对象*/</span>
        <span class="no">T</span> <span class="n">t2</span><span class="o">=</span> <span class="n">proxy</span><span class="o">.</span><span class="na">createProxy</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span><span class="c1">//任何调用都会传入invoke()回调方法,具体执行逻辑由invoke()决定。</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t2</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">T</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">modify</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">();</span>
<span class="o">}</span>

<span class="cm">/**
 * 目标对象
 */</span>
<span class="kd">class</span> <span class="nc">TDemo</span> <span class="kd">implements</span> <span class="no">T</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete2</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑2执行"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="cm">/**
 * 切面类，可以定义多个通知，即增强处理的方法
 */</span>
<span class="kd">class</span> <span class="nc">AspectDemo</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">check</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟权限控制"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">except</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟异常处理"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟日志记录"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"性能监测"</span><span class="o">);}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">JDKProxy</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">InvocationHandler</span> <span class="o">{</span>
    <span class="cm">/**目标类实例*/</span>
    <span class="kd">private</span> <span class="no">T</span> <span class="n">t</span><span class="o">;</span>
    <span class="nc">AspectDemo</span> <span class="n">asp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AspectDemo</span><span class="o">();</span><span class="c1">//创建一个切面</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">createProxy</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">t</span><span class="o">=</span><span class="n">t</span><span class="o">;</span>
        <span class="nc">ClassLoader</span> <span class="n">cld</span><span class="o">=</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">();</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">=</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">();</span>
        <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">cld</span><span class="o">,</span><span class="n">interfaces</span><span class="o">,</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">check</span><span class="o">();</span><span class="c1">//前增强</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">except</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转发至代理对象方法:"</span><span class="o">+</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">t</span><span class="o">,</span><span class="n">args</span><span class="o">);</span><span class="c1">//在目标类实例t上调用方法并传入参数</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">log</span><span class="o">();</span><span class="c1">//后增强</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>模拟权限控制
模拟异常处理
转发至代理对象方法:delete
删除逻辑执行
模拟日志记录
性能监测
com.aotmd.test.TDemo
com.aotmd.test.$Proxy0
</code></pre></div></div>

<p>使用匿名类，则<code class="language-plaintext highlighter-rouge">JDKProxy</code>类只负责创建代理实例功能：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">JDKProxy</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">createProxy</span><span class="o">(</span><span class="no">T</span> <span class="n">target</span><span class="o">){</span>
        <span class="nc">ClassLoader</span> <span class="n">cld</span><span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">();</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">=</span> <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">();</span>
        <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">cld</span><span class="o">,</span> <span class="n">interfaces</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InvocationHandler</span><span class="o">()</span> <span class="o">{</span>
            <span class="cm">/**切面类，用来增强*/</span>
            <span class="kd">final</span> <span class="nc">AspectDemo</span> <span class="n">asp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AspectDemo</span><span class="o">();</span>
            <span class="cm">/**目标类实例*/</span>
            <span class="kd">private</span> <span class="kd">final</span> <span class="no">T</span> <span class="n">t</span><span class="o">=</span><span class="n">target</span><span class="o">;</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">check</span><span class="o">();</span><span class="c1">//前增强</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">except</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转发至代理对象方法:"</span><span class="o">+</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
                <span class="c1">//在目标类实例t上调用方法并传入参数</span>
                <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">t</span><span class="o">,</span><span class="n">args</span><span class="o">);</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">log</span><span class="o">();</span><span class="c1">//后增强</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
                <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="cglib-动态代理">CGLIB 动态代理</h4>

<p>JDK 动态代理必须提供接口才能使用，对于没有提供接口的类，只能采用CGLIB 动态代理。CGLIB (Code Generation Library ） 是一个高性能开源的代码生成包，采用非常底层的字节码技术，<strong>对指定的目标类生成一个子类，并对子类进行增强</strong>。在Spring Core 包中己经集成了CGLIB 所需要的JAR 包，因此不需要另外导入JAR 包。</p>

<p>CGLIB代理的类，<strong>无需</strong>强制实现接口，其生成的代理类是被代理类的子类，并且重写的被代理类的方法。</p>

<p>要使用CGLIB创建代理实例，需要用到<code class="language-plaintext highlighter-rouge">org.springframework.cglib.proxy.Enhancer</code>类，首先实例化<code class="language-plaintext highlighter-rouge">Enhancer</code>类，然后通过<code class="language-plaintext highlighter-rouge">setSuperclass</code>设置需要增强的对象的class实例，最后通过<code class="language-plaintext highlighter-rouge">setCallback</code>设置<code class="language-plaintext highlighter-rouge">MethodInterceptor</code>回调接口，再通过<code class="language-plaintext highlighter-rouge">create</code>创建代理对象。</p>

<p><code class="language-plaintext highlighter-rouge">MethodInterceptor</code>回调接口有一个方法<code class="language-plaintext highlighter-rouge">intercept</code>，对于代理的逻辑方法，<strong>所有动态代理类的方法调用都会交给该回调接口方法处理</strong>，因此还是不要使用<code class="language-plaintext highlighter-rouge">method.invoke(o,objects);</code>代码，这会导致无限递归：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">objects</span><span class="o">,</span> <span class="nc">MethodProxy</span> <span class="n">methodProxy</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{}</span>
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">o</code>：是CGLIB 根据指定父类生成的代理对象的实例。</li>
  <li><code class="language-plaintext highlighter-rouge">method</code>：把代理对象当前要调用的方法传递进来，可以使用这个参数来获取方法的信息，比如方法名、参数类型等。</li>
  <li><code class="language-plaintext highlighter-rouge">objects</code>：把方法参数通过数组传递进来。</li>
  <li><code class="language-plaintext highlighter-rouge">methodProxy</code>：MethodProxy对象，可以用于调用<strong>原始方法</strong>（即目标的方法）。在intercept方法中，如果你需要调用原始方法，可以使用这个proxy对象。</li>
  <li><code class="language-plaintext highlighter-rouge">返回值</code>：返回函数执行的结果，取决于你想返回什么。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">MethodProxy</code>是CGLIB库中的一个类，用于代理方法的调用。<code class="language-plaintext highlighter-rouge">MethodProxy</code>类提供了一些常用的方法，例如：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">invokeSuper(Object obj, Object[] args)</code>: 调用被代理方法的实现</li>
  <li><code class="language-plaintext highlighter-rouge">getSignature()</code>: 获取被代理方法的签名</li>
  <li><code class="language-plaintext highlighter-rouge">getSuperIndex()</code>: 获取被代理方法在父类中的索引</li>
  <li><code class="language-plaintext highlighter-rouge">getSuperName()</code>: 获取被代理方法的名称</li>
  <li><code class="language-plaintext highlighter-rouge">getSuperDescriptor()</code>: 获取被代理方法的描述符</li>
  <li><code class="language-plaintext highlighter-rouge">getSuperMethod()</code>: 获取被代理方法的<code class="language-plaintext highlighter-rouge">java.lang.reflect.Method</code>对象</li>
</ul>

<p>通过一般类实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">CGLIBProxy</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CGLIBProxy</span><span class="o">();</span><span class="c1">//创建生成代理对象的工厂类，同时它也负责MethodInterceptor的执行逻辑。</span>
        <span class="nc">TDemo</span> <span class="n">t</span><span class="o">=</span><span class="k">new</span> <span class="nc">TDemo</span><span class="o">();</span><span class="c1">//创建目标对象</span>
        <span class="cm">/*获取增强后的目标对象*/</span>
        <span class="nc">TDemo</span> <span class="n">t2</span><span class="o">=</span> <span class="o">(</span><span class="nc">TDemo</span><span class="o">)</span> <span class="n">proxy</span><span class="o">.</span><span class="na">createProxy</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="n">t2</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span><span class="c1">//任何调用都会传入intercept()回调方法,具体执行逻辑由intercept()决定。</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t2</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/**
 * 目标对象
 */</span>
<span class="kd">class</span> <span class="nc">TDemo</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete2</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑2执行"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="cm">/**
 * 切面类，可以定义多个通知，即增强处理的方法
 */</span>
<span class="kd">class</span> <span class="nc">AspectDemo</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">check</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟权限控制"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">except</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟异常处理"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"模拟日志记录"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">monitor</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"性能监测"</span><span class="o">);}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CGLIBProxy</span> <span class="kd">implements</span> <span class="nc">MethodInterceptor</span><span class="o">{</span>
    <span class="nc">AspectDemo</span> <span class="n">asp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AspectDemo</span><span class="o">();</span><span class="c1">//创建一个切面</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">createProxy</span><span class="o">(</span><span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Enhancer</span> <span class="n">enhancer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Enhancer</span><span class="o">();</span>
        <span class="n">enhancer</span><span class="o">.</span><span class="na">setSuperclass</span><span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span><span class="c1">//确定需要增强的类</span>
        <span class="n">enhancer</span><span class="o">.</span><span class="na">setCallback</span><span class="o">(</span><span class="k">this</span><span class="o">);</span><span class="c1">//确定回调对象</span>
        <span class="k">return</span> <span class="n">enhancer</span><span class="o">.</span><span class="na">create</span><span class="o">();</span><span class="c1">//创建代理对象</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">objects</span><span class="o">,</span> <span class="nc">MethodProxy</span> <span class="n">methodProxy</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">check</span><span class="o">();</span><span class="c1">//前增强</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">except</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转发至代理对象方法:"</span><span class="o">+</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">methodProxy</span><span class="o">.</span><span class="na">invokeSuper</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">objects</span><span class="o">);</span><span class="c1">//转发调用目标类对应方法</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">log</span><span class="o">();</span><span class="c1">//后增强</span>
        <span class="n">asp</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>模拟权限控制
模拟异常处理
转发至代理对象方法:delete
删除逻辑执行
模拟日志记录
性能监测
com.aotmd.test.TDemo
com.aotmd.test.TDemo$$EnhancerByCGLIB$$a9a7303e
</code></pre></div></div>

<p>使用匿名类，则<code class="language-plaintext highlighter-rouge">CGLIBProxy</code>类只负责创建代理实例功能：：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CGLIBProxy</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">createProxy</span><span class="o">(</span><span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Enhancer</span> <span class="n">enhancer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Enhancer</span><span class="o">();</span>
        <span class="n">enhancer</span><span class="o">.</span><span class="na">setSuperclass</span><span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span><span class="c1">//确定需要增强的类</span>
        <span class="n">enhancer</span><span class="o">.</span><span class="na">setCallback</span><span class="o">(</span><span class="k">new</span> <span class="nc">MethodInterceptor</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">final</span> <span class="nc">AspectDemo</span> <span class="n">asp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AspectDemo</span><span class="o">();</span><span class="c1">//创建一个切面</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">intercept</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">objects</span><span class="o">,</span> <span class="nc">MethodProxy</span> <span class="n">methodProxy</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">check</span><span class="o">();</span><span class="c1">//前增强</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">except</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"转发至代理对象方法:"</span><span class="o">+</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
                <span class="nc">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">methodProxy</span><span class="o">.</span><span class="na">invokeSuper</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="n">objects</span><span class="o">);</span><span class="c1">//转发调用目标类对应方法</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">log</span><span class="o">();</span><span class="c1">//后增强</span>
                <span class="n">asp</span><span class="o">.</span><span class="na">monitor</span><span class="o">();</span>
                <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span><span class="c1">//确定回调对象</span>
        <span class="k">return</span> <span class="n">enhancer</span><span class="o">.</span><span class="na">create</span><span class="o">();</span><span class="c1">//创建代理对象</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="使用动态代理">使用动态代理</h3>

<p>在Spring中<strong>默认</strong>使用JDK动态代理实现AOP编程。使用<code class="language-plaintext highlighter-rouge">org.spring.framework.aop.framework.ProxyFactoryBean</code>创建代理是SpringAOP实现的最基本方式。</p>

<p>根据Spring中通知在目标类方法中的<strong>连接点</strong>位置，通知可以分为6种类型。</p>

<p>环绕通知（<code class="language-plaintext highlighter-rouge">org.aopalliance.intercept.Methodlnterceptor</code>）是在目标方法<strong>执行前</strong>和<strong>执行后</strong>实施增强，可应用于日志记录、事务处理等功能。它的方法签名为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">MethodInvocation</span> <span class="n">invocation</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span><span class="o">;</span>
</code></pre></div></div>

<p>其中<code class="language-plaintext highlighter-rouge">MethodInvocation</code>接口具有以下常用方法：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Object[] getArguments()</code>: 获取方法调用的参数数组。</li>
  <li><code class="language-plaintext highlighter-rouge">Method getMethod()</code>: 获取被调用的方法对象。</li>
  <li><code class="language-plaintext highlighter-rouge">Object getThis()</code>: 获取目标对象，即被代理的对象。</li>
  <li><code class="language-plaintext highlighter-rouge">AccessibleObject getStaticPart()</code>: 获取静态部分，即被调用的方法或构造函数。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Object proceed() throws Throwable</code>: 执行下一个拦截器或目标方法，返回方法的返回值。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">Object getReturnValue()</code>: 获取方法调用的返回值。</li>
  <li><code class="language-plaintext highlighter-rouge">Throwable getThrowable()</code>: 获取方法调用过程中抛出的异常。</li>
  <li><code class="language-plaintext highlighter-rouge">void setArguments(Object[] arguments)</code>: 设置方法调用的参数数组。</li>
  <li><code class="language-plaintext highlighter-rouge">void setReturnValue(Object returnValue)</code>: 设置方法调用的返回值。</li>
  <li><code class="language-plaintext highlighter-rouge">void setThrowable(Throwable throwable)</code>: 设置方法调用过程中抛出的异常。</li>
</ol>

<p>前置通知（<code class="language-plaintext highlighter-rouge">org.springframework.aop.MethodBeforeAdvice</code>）是在目标方法<strong>执行前</strong>实施增强，可应用于权限管理等功能。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{}</span>
</code></pre></div></div>

<p>后置返回通知（<code class="language-plaintext highlighter-rouge">org.spring:framework.aop.AfterReturningAdvice</code>）是在目标方法<strong>成功执行后</strong>实施增强，可应用于关闭流、删除临时文件等功能，多了个<code class="language-plaintext highlighter-rouge">returnValue</code>，表示返回值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">Object</span> <span class="n">returnValue</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{}</span>
</code></pre></div></div>

<p>后置(最终)通知（<code class="language-plaintext highlighter-rouge">org.springframework.aop.AfterAdvice</code>）是在目标方法<strong>执行后</strong>实施增强，与后置返回通知不同的是，<strong>不管是否发生异常</strong>都要执行该类通知，该类通知可应用于释放资源。</p>

<p>异常通知（<code class="language-plaintext highlighter-rouge">org.springframework.aop.ThrowsAdvice</code>）是在方法<strong>抛出异常后</strong>实施增强，可应用于处理异常、记录日志等功能。</p>

<p>引入通知（<code class="language-plaintext highlighter-rouge">org.springframework.aop.IntroductionInterceptor</code>）是在目标类中<strong>添加一些新的方法和属性</strong>，可应用于修改目标类（增强类）。</p>

<h4 id="proxyfactorybean">ProxyFactoryBean</h4>

<p>ProxyFactory Bean是<code class="language-plaintext highlighter-rouge">org.springframework.beans.factory.FactoryBean</code> 接口的实现类，FactoryBean负责实例化一个Bean实例， ProxyFactoryBean 负责为其他Bean实例创建代理实例。ProxyFactoryBean 类的常用<strong>属性</strong>如下：</p>

<table>
  <thead>
    <tr>
      <th><strong>属性</strong></th>
      <th><strong>描述</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>target</td>
      <td>代理的目标对象</td>
    </tr>
    <tr>
      <td>proxyInterfaces</td>
      <td>代理需要实现的<strong>接口列表</strong>。如果是多个接口,可以使用以下格式赋值: <code class="language-plaintext highlighter-rouge">&lt;list&gt;&lt;value&gt;/value&gt;&lt;list&gt;</code>  ，JDK代理使用这个参数。</td>
    </tr>
    <tr>
      <td>interceptorNames</td>
      <td>需要织入目标的Advice</td>
    </tr>
    <tr>
      <td>proxyTargetClass</td>
      <td>是否对类代理而不是接口,默认为false,使用JDK动态代理;当为true时,使用 CGLIB动态代理</td>
    </tr>
    <tr>
      <td>singleton</td>
      <td>返回的代理实例是否为单例,默认为true</td>
    </tr>
    <tr>
      <td>optimize</td>
      <td>当设置为true时强制CGLIB使用动态代理</td>
    </tr>
  </tbody>
</table>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">AbstractApplicationContext</span> <span class="n">aac</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="no">A</span> <span class="n">cGLIBProxy</span> <span class="o">=</span> <span class="o">(</span><span class="no">A</span><span class="o">)</span> <span class="n">aac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"cGLIBProxy"</span><span class="o">);</span>
        <span class="n">cGLIBProxy</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cGLIBProxy</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">IBase</span> <span class="n">jDKProxy</span><span class="o">=(</span><span class="nc">IBase</span><span class="o">)</span><span class="n">aac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"jDKProxy"</span><span class="o">);</span>
        <span class="n">jDKProxy</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jDKProxy</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Aspect1</span> <span class="kd">implements</span>
        <span class="nc">MethodInterceptor</span><span class="o">,</span> <span class="nc">MethodBeforeAdvice</span><span class="o">,</span> <span class="nc">AfterReturningAdvice</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">MethodInvocation</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"当前拦截对象:"</span><span class="o">+</span><span class="n">i</span><span class="o">.</span><span class="na">getMethod</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"环绕通知前-&gt;"</span><span class="o">);</span>
        <span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span><span class="c1">//转发,继续执行链中的下一个拦截。</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕通知后"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"前置通知"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">Object</span> <span class="n">returnValue</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"后置通知-&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*下面使用CGLIB代理*/</span>
<span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑执行"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="cm">/*下面使用JDK代理*/</span>
<span class="kd">interface</span> <span class="nc">IBase</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">modify</span><span class="o">();</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="nc">IBase</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改逻辑执行"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除逻辑执行"</span><span class="o">);}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>XML：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"aspect1"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.Aspect1"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!--下面使用CGLIB代理--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"a"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.A"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"cGLIBProxy"</span> <span class="na">class=</span><span class="s">"org.springframework.aop.framework.ProxyFactoryBean"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"target"</span> <span class="na">ref=</span><span class="s">"a"</span><span class="nt">/&gt;</span><span class="c">&lt;!--指定要代理的目标对象--&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"interceptorNames"</span> <span class="na">value=</span><span class="s">"aspect1"</span><span class="nt">/&gt;</span><span class="c">&lt;!--指定切面--&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"proxyTargetClass"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span><span class="c">&lt;!--代理方式,默认falseJDK代理,true,CGLIB代理--&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="c">&lt;!--下面使用JDK代理，共用aspect1，并使用p命名空间简化set注入--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"b"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.B"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!--proxyInterfaces参数指定接口--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"jDKProxy"</span> <span class="na">class=</span><span class="s">"org.springframework.aop.framework.ProxyFactoryBean"</span>
      <span class="na">p:proxyInterfaces=</span><span class="s">"com.aotmd.test.IBase"</span> <span class="na">p:target-ref=</span><span class="s">"b"</span>
      <span class="na">p:interceptorNames=</span><span class="s">"aspect1"</span> <span class="na">p:proxyTargetClass=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>当前拦截对象:delete
环绕通知前-&gt;前置通知
删除逻辑执行
后置通知-&gt;环绕通知后
com.aotmd.test.A$$EnhancerBySpringCGLIB$$4b7ac9ec
当前拦截对象:save
环绕通知前-&gt;前置通知
保存逻辑执行
后置通知-&gt;环绕通知后
com.aotmd.test.$Proxy5
</code></pre></div></div>

<h3 id="aspectj">Aspectj</h3>

<h4 id="切入点语法定义">切入点语法定义</h4>

<p>在使用spring框架配置AOP的时候，不管是通过XML配置文件还是注解的方式都需要定义切入点(pointcut)。Pointcut可以通过<code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 、<code class="language-plaintext highlighter-rouge">||</code>和<code class="language-plaintext highlighter-rouge">!</code>的方式进行组合。</p>

<p><strong>execution()</strong></p>

<p><strong>注意, <code class="language-plaintext highlighter-rouge">execution()</code>扫描的仅为依赖注入(控制反转)下的Bean</strong>。</p>

<p><code class="language-plaintext highlighter-rouge">execution()</code>是最常用的切点函数，其语法如下所示：修饰符 注解与异常是可选的。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">execution</span><span class="o">(&lt;</span><span class="n">注解</span><span class="o">&gt;&lt;</span><span class="n">修饰符</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">返回类型</span><span class="o">&gt;</span> <span class="o">&lt;[</span><span class="n">包名</span><span class="o">.][</span><span class="n">类名</span><span class="o">.]</span><span class="n">方法名</span><span class="o">&gt;(&lt;</span><span class="n">参数</span><span class="o">&gt;)</span> <span class="o">&lt;</span><span class="n">异常</span><span class="o">&gt;)</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>通配符</th>
      <th><strong>含义</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">*</code></td>
      <td>所有语法中匹配任意字符,可与具体名称混写。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">+</code></td>
      <td>匹配接口及其所有实现类的方法。以及<code class="language-plaintext highlighter-rouge">Object+</code>用法,匹配<code class="language-plaintext highlighter-rouge">Object</code>类型或该类的子类,接口同理。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">..</code></td>
      <td><code class="language-plaintext highlighter-rouge">void springAOP..*(..)) </code>，<code class="language-plaintext highlighter-rouge">..</code>匹配所有子包， <code class="language-plaintext highlighter-rouge">*</code>表任意方法名, <code class="language-plaintext highlighter-rouge">&lt;参数&gt;</code>中的<code class="language-plaintext highlighter-rouge">..</code>匹配任意数量类型的参数。</td>
    </tr>
  </tbody>
</table>

<hr />

<p><strong>对于：<code class="language-plaintext highlighter-rouge">&lt;[包名.][类名.]方法名&gt;</code>:</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(void springAOP..*(..))</code> ：可用,匹配所有返回值为<code class="language-plaintext highlighter-rouge">void</code>,并在springAOP包及其所有子包下的所有方法。</p>

<p><code class="language-plaintext highlighter-rouge">execution(void springAOP..(..))：</code>省略<code class="language-plaintext highlighter-rouge">*</code>号报错,可见<code class="language-plaintext highlighter-rouge">..</code><strong>只能匹配到包到类名</strong>,没有匹配方法名称。</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..))</code>可用,匹配所有返回值为<code class="language-plaintext highlighter-rouge">void</code>的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *.*(..))</code>可用,匹配所有返回值为<code class="language-plaintext highlighter-rouge">void</code>的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *c(..))</code>可用,匹配以<code class="language-plaintext highlighter-rouge">c</code>结尾返回值为<code class="language-plaintext highlighter-rouge">void</code>的所有包与类中的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void a*(..))</code>可用,匹配以<code class="language-plaintext highlighter-rouge">a</code>开头返回值为<code class="language-plaintext highlighter-rouge">void</code>的所有包与类中的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *.a*(..))</code>同上</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *.add.a*(..))</code>可用,没有匹配到<code class="language-plaintext highlighter-rouge">springIOC.pp.add</code>类下的<code class="language-plaintext highlighter-rouge">add</code>方法,推测<code class="language-plaintext highlighter-rouge">*</code>号被限制<strong>只能匹配一层包或类</strong>了</p>

<p><code class="language-plaintext highlighter-rouge">execution(void springIoC.*.add.a*(..))</code>可用,正常匹配</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *.pp.add.a*(..))</code>可用,正常匹配</p>

<p><code class="language-plaintext highlighter-rouge">execution(void ..a*(..))</code>报错，<code class="language-plaintext highlighter-rouge">..</code>通配符只能用于包名，而不能用于类名或方法名。</p>

<p><code class="language-plaintext highlighter-rouge">execution(void ...*(..))</code>可用,匹配项未知</p>

<p><code class="language-plaintext highlighter-rouge">execution(void spring*..*(..))</code>可用,匹配包名头为<code class="language-plaintext highlighter-rouge">spring</code>的任意包及其子包类中的<code class="language-plaintext highlighter-rouge">void</code>返回值的任意方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void springAOP.aaa.T+.sc(..))</code>，<code class="language-plaintext highlighter-rouge">T</code>是一个接口因此只能用<code class="language-plaintext highlighter-rouge">+</code>的形式, 匹配<code class="language-plaintext highlighter-rouge">T</code>接口的实现类或其子接口的实现类的<code class="language-plaintext highlighter-rouge">sc</code>方法。</p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">(&lt;参数&gt;)</code></strong>：</p>

<p>切点表达式中方法入参部分比较复杂，可以使用<code class="language-plaintext highlighter-rouge">*</code>和<code class="language-plaintext highlighter-rouge">..</code>通配符。</p>

<p>其中<code class="language-plaintext highlighter-rouge">*</code>表示<strong>任意类型</strong>的参数，而<code class="language-plaintext highlighter-rouge">..</code>表示<strong>任意类型参数且参数个数不限</strong>。</p>

<p>如果方法中的入参类型是<code class="language-plaintext highlighter-rouge">java.lang</code>包下的类，可以直接使用类名，否则<strong>必须使用全限定类名</strong>，如<code class="language-plaintext highlighter-rouge">joke(java.util.List,int)</code>。</p>

<p><code class="language-plaintext highlighter-rouge">execution(* *(String,..))</code>匹配第一个参数为<code class="language-plaintext highlighter-rouge">String</code>的所有方法,<strong>包括只有一个<code class="language-plaintext highlighter-rouge">String</code>参数</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(String,*))</code>匹配第一个参数为<code class="language-plaintext highlighter-rouge">String</code>,第二个为任意的所有方法,<strong>限定参数个数为2</strong>。</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..,String,..))</code>匹配参数带<code class="language-plaintext highlighter-rouge">String</code>类型的所有方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(Object+))</code>匹配<code class="language-plaintext highlighter-rouge">Object</code>类型或该类的子类,限定参数为1</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(Object))</code><strong>只</strong>匹配<code class="language-plaintext highlighter-rouge">Object</code>类型,限定参数为1</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(springAOP.aaa.T+))</code>匹配<code class="language-plaintext highlighter-rouge">T</code>接口或接口的实现类,以及继承<code class="language-plaintext highlighter-rouge">T</code>接口的其他接口与实现类。</p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">&lt;异常&gt;</code>：</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..)throws java.lang.IllegalArgumentException)</code>匹配<strong>带</strong>这个异常的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..)throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException</code>匹配<strong>带</strong>这两个异常的方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..)throws Exception+)</code>同理,匹配该异常,<strong>以及该异常下的所有子异常</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(void *(..)throws Exception,java.lang.IllegalArgumentException)</code><strong>多个异常无位置关系</strong></p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">&lt;注解&gt;</code>：</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(@java.lang.Override * *(..))</code>没有实验过</p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">&lt;修饰符&gt;</code>：</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(private * *(..))</code>无效,因为无法<strong>直接</strong>在外部调用该方法</p>

<p><code class="language-plaintext highlighter-rouge">execution(protected * *(..))</code>没有问题,<strong>直接</strong>访问该方法可以匹配,通过该方法所在类的其他方法<strong>间接访问无法起作用</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(protected+ * *(..))</code><strong>无法使用</strong><code class="language-plaintext highlighter-rouge">+</code>,报错,情理之中。</p>

<hr />

<p><strong>对于<code class="language-plaintext highlighter-rouge">&lt;返回类型&gt;</code>：</strong></p>

<p><code class="language-plaintext highlighter-rouge">execution(Object+ *(..))</code>同样,具有匹配<code class="language-plaintext highlighter-rouge">Object</code>类型或该类的子类,返回值<code class="language-plaintext highlighter-rouge">String</code>会被匹配。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">args()</code></strong></p>

<p>该函数接受一个类名，表示目标类方法入参对象按类型匹配于指定类时，切点匹配，如下面的例子：<code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter)</code>。</p>

<p>它表示运行时入参是<code class="language-plaintext highlighter-rouge">Waiter</code>类型的方法，它和<code class="language-plaintext highlighter-rouge">execution(* *(com.baobaotao.Waiter))</code>区别在于后者是针对类方法的签名而言的，而前者则针对<strong>运行时</strong>的入参类型而言。</p>

<p>如 <code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter)</code>既匹配于<code class="language-plaintext highlighter-rouge">addWaiter(Waiter waiter)</code>也匹配于<code class="language-plaintext highlighter-rouge">addNaiveWaiter(NaiveWaiter naiveWaiter)</code></p>

<p>而<code class="language-plaintext highlighter-rouge">execution(* *(com.baobaotao.Waiter))</code>只匹配<code class="language-plaintext highlighter-rouge">addWaiter(Waiter waiter)</code>方法；</p>

<p>实际上，<code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter)</code>等价于<code class="language-plaintext highlighter-rouge">execution(* *(com.baobaotao.Waiter+))</code>，当然也等价于<code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter+)</code>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">@args()</code></strong></p>

<p>该函数接受一个注解类的类名，当方法的运行时入参对象标注发指定的注解时，方法匹配切点。如<code class="language-plaintext highlighter-rouge">@args(com.baobaotao.Monitorable)</code>表示任何这样的一个目标方法：它有一个入参且入参对象的类标注<code class="language-plaintext highlighter-rouge">@Monitorable</code>注解。</p>

<p><strong><code class="language-plaintext highlighter-rouge">args()</code>和<code class="language-plaintext highlighter-rouge">@args()</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">args()</code>函数的入参是<strong>类名</strong>，<code class="language-plaintext highlighter-rouge">@args()</code>函数的入参必须是<strong>注解类的类名</strong>。虽然<code class="language-plaintext highlighter-rouge">args()</code>允许在类名后使用<code class="language-plaintext highlighter-rouge">+</code>通配符后缀，但该通配符在此处没有意义：<strong>添加和不添加效果都一样</strong>。</p>

<p><strong>其他：</strong></p>

<table>
  <thead>
    <tr>
      <th>类别</th>
      <th>函数</th>
      <th>入参</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>方法切点函数</td>
      <td><code class="language-plaintext highlighter-rouge">execution()</code></td>
      <td><strong>方法</strong>匹配模式串</td>
      <td>表示满足某一匹配模式的所有目标类方法连接点。如<code class="language-plaintext highlighter-rouge">execution(* greetTo(..))</code>表示所有目标类中的<code class="language-plaintext highlighter-rouge">greetTo()</code>方法。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">@annotation()</code></td>
      <td>方法<strong>注解类名</strong></td>
      <td>表示标注了特定注解的目标方法连接点。如<code class="language-plaintext highlighter-rouge">@annotation(com.baobaotao.anno.NeedTest)</code>表示任何标注了<code class="language-plaintext highlighter-rouge">@NeedTest</code>注解的目标类方法。</td>
    </tr>
    <tr>
      <td>方法<strong>入参</strong>切点函数</td>
      <td><code class="language-plaintext highlighter-rouge">args()</code></td>
      <td><strong>类名</strong></td>
      <td>通过判别目标类方法运行时入参对象的类型定义指定连接点。如<code class="language-plaintext highlighter-rouge">args(com.baobaotao.Waiter)</code>表示所有有且仅有一个按类型匹配于Waiter的入参的方法。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">@args()</code></td>
      <td>类型<strong>注解类名</strong></td>
      <td>通过判别目标方法的运行时入参对象的类是否标注特定注解来指定连接点。如<code class="language-plaintext highlighter-rouge">@args(com.baobaotao.Monitorable)</code>表示任何这样的一个目标方法：它有一个入参且入参对象的类标注<code class="language-plaintext highlighter-rouge">@Monitorable</code>注解。</td>
    </tr>
    <tr>
      <td>目标类切点函数</td>
      <td><code class="language-plaintext highlighter-rouge">within()</code></td>
      <td><strong>类名</strong>匹配串</td>
      <td>表示特定域下的所有连接点。如<code class="language-plaintext highlighter-rouge">within(com.baobaotao.service.*)</code>表示<code class="language-plaintext highlighter-rouge">com.baobaotao.service</code>包中的所有连接点，也即包中所有类的所有方法，而<code class="language-plaintext highlighter-rouge">within(com.baobaotao.service.*Service)</code>表示在<code class="language-plaintext highlighter-rouge">com.baobaotao.service</code>包中，所有以Service结尾的类的所有连接点。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">target()</code></td>
      <td><strong>类名</strong></td>
      <td>假如目标类按类型匹配于指定类，则目标类的所有连接点匹配这个切点。如通过<code class="language-plaintext highlighter-rouge">target(com.baobaotao.Waiter)</code>定义的切点，<code class="language-plaintext highlighter-rouge">Waiter</code>、以及<code class="language-plaintext highlighter-rouge">Waiter</code>实现类<code class="language-plaintext highlighter-rouge">NaiveWaiter</code>中所有连接点都匹配该切点。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">@within()</code></td>
      <td>类型<strong>注解类名</strong></td>
      <td>假如目标类按类型匹配于某个类A，且类A标注了特定注解，则目标类的所有连接点匹配这个切点。如<code class="language-plaintext highlighter-rouge">@within(com.baobaotao.Monitorable)</code>定义的切点，假如<code class="language-plaintext highlighter-rouge">Waiter</code>类标注了<code class="language-plaintext highlighter-rouge">@Monitorable</code>注解，则<code class="language-plaintext highlighter-rouge">Waiter</code>以及<code class="language-plaintext highlighter-rouge">Waiter</code>实现类<code class="language-plaintext highlighter-rouge">NaiveWaiter</code>类的所有连接点都匹配。</td>
    </tr>
    <tr>
      <td>同上</td>
      <td><code class="language-plaintext highlighter-rouge">@target()</code></td>
      <td>类型<strong>注解类名</strong></td>
      <td>目标类标注了特定注解，则目标类所有连接点匹配该切点。如<code class="language-plaintext highlighter-rouge">@target(com.baobaotao.Monitorable)</code>，假如<code class="language-plaintext highlighter-rouge">NaiveWaiter</code>标注了<code class="language-plaintext highlighter-rouge">@Monitorable</code>，则<code class="language-plaintext highlighter-rouge">NaiveWaiter</code>所有连接点匹配切点。</td>
    </tr>
    <tr>
      <td><strong>代理类</strong>切点函数</td>
      <td><code class="language-plaintext highlighter-rouge">this()</code></td>
      <td><strong>类名</strong></td>
      <td>代理类按类型匹配于指定类，则被代理的目标类所有连接点匹配切点。如果有一个接口<code class="language-plaintext highlighter-rouge">MyInterface</code>，并且有一个代理类<code class="language-plaintext highlighter-rouge">MyProxy</code>实现了这个接口，那么使用<code class="language-plaintext highlighter-rouge">this(MyInterface)</code>将匹配所有<code class="language-plaintext highlighter-rouge">MyProxy</code>代理类中实现<code class="language-plaintext highlighter-rouge">MyInterface</code>接口的连接点。</td>
    </tr>
  </tbody>
</table>

<h4 id="基于xml实现-1">基于XML实现</h4>

<p>AspectJ是一个基于Java语言的AOP框架。从Spring2.0以后引入了AspectJ的支持。对于目前的Spring框架，<strong>建议</strong>开发者使用AspectJ实现SpringAOP。</p>

<p>使用AspectJ实现Spring AOP的方式有两种，一是基于XML配置开发AspectJ，二是基于注解开发AspectJ。</p>

<p>基于XML配置开发AspectJ是指通过XML配置文件定义切面、切入点及通知，所有这些定义都必须在<code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code>元素内。</p>

<table>
  <thead>
    <tr>
      <th><strong>元素名称</strong></th>
      <th><strong>用途</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code></td>
      <td>开发AspectJ的顶层配置元素，在配置文件的<code class="language-plaintext highlighter-rouge">&lt;beans&gt;</code>下可以包含多个该元素</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code></td>
      <td>配置（定义）一个切面，<code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code>子元素，属性<code class="language-plaintext highlighter-rouge">ref</code>指定切面的定义</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:pointcut&gt;</code></td>
      <td>配置切入点，<code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素，属性<code class="language-plaintext highlighter-rouge">expression</code>指定通知增强哪些方法</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:before&gt;</code></td>
      <td>配置前置通知,<code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 目标方法执行前实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定前置通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:after-returning&gt;</code></td>
      <td>配置后置返回通知, <code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 目标方法成功执行后实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定后置返回通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:around&gt;</code></td>
      <td>配置环绕通知, <code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 目标方法执行前和执行后实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定环绕通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aoppafter-throwing&gt;</code></td>
      <td>配置异常通知, <code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 抛出异常后实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定异常通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点,</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:after&gt;</code></td>
      <td>配置后置(最终)通知, <code class="language-plaintext highlighter-rouge">&lt;aop:aspect&gt;</code>子元素, 标方法<em>执行后</em>实施增强属性<code class="language-plaintext highlighter-rouge">method</code>指定后置(最终)通知方法,属性<code class="language-plaintext highlighter-rouge">pointcut-ref</code>指定关联的切入点</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">&lt;aop:declare-parents&gt;</code></td>
      <td>给通知引入新的额外接口，增强功能。</td>
    </tr>
  </tbody>
</table>

<p>实例：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"td6"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.TDemo6"</span><span class="nt">/&gt;</span><span class="c">&lt;!--目标Bean--&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"aspectJProxy"</span> <span class="na">class=</span><span class="s">"com.aotmd.test.AspectJProxy"</span><span class="nt">/&gt;</span><span class="c">&lt;!--拦截器实现方法--&gt;</span>
<span class="nt">&lt;aop:config&gt;</span><span class="c">&lt;!--配置AOP--&gt;</span>
    <span class="nt">&lt;aop:aspect</span> <span class="na">ref=</span><span class="s">"aspectJProxy"</span><span class="nt">&gt;</span><span class="c">&lt;!--拦截器配置--&gt;</span>
        <span class="c">&lt;!--配置切入点,即给指定的方法增强,当前expression表达式为返回值为void在TDemo6类下的任意形参的方法--&gt;</span>
        <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">"myPointCut"</span> <span class="na">expression=</span><span class="s">"execution(void com.aotmd.test.TDemo6.*(..))"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;aop:before</span> <span class="na">method=</span><span class="s">"before"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--关联指定拦截器(切面)的某方法为前置通知,并匹配切点--&gt;</span>
        <span class="nt">&lt;aop:after-returning</span> <span class="na">method=</span><span class="s">"afterReturning"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--同上,后置返回通知--&gt;</span>
        <span class="nt">&lt;aop:around</span> <span class="na">method=</span><span class="s">"around"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--同上,环绕通知--&gt;</span>
        <span class="nt">&lt;aop:after-throwing</span> <span class="na">method=</span><span class="s">"except"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span> <span class="na">throwing=</span><span class="s">"e"</span><span class="nt">/&gt;</span><span class="c">&lt;!--同上,异常通知,throwing异常方法形参--&gt;</span>
        <span class="nt">&lt;aop:after</span> <span class="na">method=</span><span class="s">"after"</span> <span class="na">pointcut-ref=</span><span class="s">"myPointCut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--同上,关联后置(最终通知)--&gt;</span>
    <span class="nt">&lt;/aop:aspect&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<p>类文件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.aspectj.lang.JoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.AbstractApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">AbstractApplicationContext</span> <span class="n">aac</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="nc">TDemo6</span> <span class="n">td6</span> <span class="o">=</span> <span class="o">(</span><span class="nc">TDemo6</span><span class="o">)</span> <span class="n">aac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"td6"</span><span class="o">);</span>
        <span class="n">td6</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">td6</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span><span class="c1">//不是void返回值,因此没有被代理</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">AspectJProxy</span><span class="o">{</span>
    <span class="cm">/**前置通知 @param jp 作为参数获得目标对象信息*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jp</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"前置通知：模拟权限控制"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span><span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jp</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"后置返回通知：模拟删除临时文件"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span><span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="cm">/**环绕通知,必须一个参数是ProceedingJoinPoint 类型
     * @param pjp ProceedingJoinPoint 是JoinPoint 的子接口， 代表可以执行的目标方法
     * @return 返回值的类型必须是Object
     * @throws Throwable */</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"环绕开始：执行目标方法前，模拟开启事务"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span> <span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span><span class="c1">//转发,继续下一拦截方法</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕结束：执行目标方法前，模拟关闭事务"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">except</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"异常通知：程序执行异常"</span><span class="o">+</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"后置(最终)通知：模拟释放资源"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">TDemo6</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>输出结果:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>前置通知：模拟权限控制，目标类对象：com.aotmd.test.TDemo6@9cd25ff，被增强处理的方法：save
环绕开始：执行目标方法前，模拟开启事务，目标类对象：com.aotmd.test.TDemo6@9cd25ff，被增强处理的方法：save
保存
后置(最终)通知：模拟释放资源
环绕结束：执行目标方法前，模拟关闭事务
后置返回通知：模拟删除临时文件，目标类对象：com.aotmd.test.TDemo6@9cd25ff，被增强处理的方法：save
删除
</code></pre></div></div>

<p>执行顺序：</p>

<p><img src="/images/posts/Java/切点执行顺序.png" alt="切点执行顺序" /></p>

<h4 id="基于注解实现">基于注解实现</h4>

<p>基于注解开发AspectJ 要比基于XML 配置开发AspectJ 便捷许多，所以在实际开发中推荐使用注解方式。</p>

<table>
  <thead>
    <tr>
      <th><strong>注解名称</strong></th>
      <th><strong>描述</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Aspect</code></td>
      <td>用于定义一个切面,注解在切面类上。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Pointcut</code></td>
      <td>用于定义<strong>切入点表达式</strong>。在使用时需要定义一个<strong>切入点方法</strong>,该方法是一个<strong>返回值void且方法体为空的普通方法。</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Before</code></td>
      <td>用于定义<strong>前置通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@AfterReturning</code></td>
      <td>用于定义<strong>后置返回通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@Around</code></td>
      <td>用于定义<strong>环绕通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@AfterThrowing</code></td>
      <td>用于定义<strong>异常通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。另外,还有一个<code class="language-plaintext highlighter-rouge">throwing</code>属性用于访问目标方法抛出的异常,<strong>该属性值与异常通知方法中同名的形参一致</strong>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">@After</code></td>
      <td>用于定义<strong>后置(最终)通知</strong>。在使用时通常为其指定<code class="language-plaintext highlighter-rouge">value</code>属性值,该值可以是已有的切入点,也可以直接定义切入点表达式。</td>
    </tr>
  </tbody>
</table>

<p>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TDemo7</span> <span class="n">tDemo7</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">TDemo7</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span><span class="c1">//不是void返回值,因此没有被代理</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Aspect</span> <span class="cm">/*&lt;aop:aspect ref="annotationAspectJProxy"&gt;&lt;!--拦截器配置--&gt;*/</span>
<span class="nd">@Component</span><span class="cm">/*&lt;bean id="annotationAspectJProxy" class="springAOP.AspectJProxy"/&gt;*/</span>
<span class="kd">class</span> <span class="nc">AnnotationAspectJProxy</span> <span class="o">{</span>
    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"execution(void com.aotmd.test.TDemo7.*(..))"</span><span class="o">)</span><span class="cm">/*配置切入点,即给指定的方法增强,
        &lt;aop:pointcut id="cut" expression="execution(void com.aotmd.test.TDemo7.*(..))"/&gt;*/</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">cut</span><span class="o">(){}</span>
    <span class="cm">/**前置通知 @param jp 作为参数获得目标对象信息*/</span>
    <span class="nd">@Before</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span><span class="cm">/*&lt;aop:before method="before" pointcut-ref="cut"/&gt;前置通知*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jp</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"前置通知：模拟权限控制"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span><span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span><span class="cm">/*&lt;aop:before method="afterReturning" pointcut-ref="cut"/&gt;后置返回通知*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">jp</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"后置返回通知：模拟删除临时文件"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span><span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">jp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="cm">/**环绕通知,必须一个参数是ProceedingJoinPoint 类型
     * @param pjp ProceedingJoinPoint 是JoinPoint 的子接口， 代表可以执行的目标方法
     * @return 返回值的类型必须是Object
     * @throws Throwable*/</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span><span class="cm">/*&lt;aop:before method="around" pointcut-ref="cut"/&gt;环绕通知*/</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"环绕开始：执行目标方法前，模拟开启事务"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span> <span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span><span class="c1">//转发,继续下一拦截方法</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕结束：执行目标方法前，模拟关闭事务"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@AfterThrowing</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"cut()"</span><span class="o">,</span><span class="n">throwing</span> <span class="o">=</span> <span class="s">"e"</span><span class="o">)</span>
    <span class="cm">/*&lt;aop:after-throwing method="except" pointcut-ref="cut" throwing="e"/&gt;
    &lt;!--同上,异常通知,throwing异常方法形参--&gt;*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">except</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"异常通知：程序执行异常"</span><span class="o">+</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());}</span>
    <span class="nd">@After</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span>
    <span class="cm">/*&lt;aop:after method="after" pointcut-ref="cut"/&gt;&lt;!--关联后置(最终通知)--&gt;*/</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(){</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"后置(最终)通知：模拟释放资源"</span><span class="o">);}</span>
<span class="o">}</span>
<span class="nd">@Component</span><span class="cm">/*这里生成的Bean名称为TDemo7*/</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>环绕开始：执行目标方法前，模拟开启事务，目标类对象：com.aotmd.test.TDemo7@5f0e9815，被增强处理的方法：save
前置通知：模拟权限控制，目标类对象：com.aotmd.test.TDemo7@5f0e9815，被增强处理的方法：save
保存
环绕结束：执行目标方法前，模拟关闭事务
后置(最终)通知：模拟释放资源
后置返回通知：模拟删除临时文件，目标类对象：com.aotmd.test.TDemo7@5f0e9815，被增强处理的方法：save
删除
</code></pre></div></div>

<p>这里使用了<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>注解来启用对标记有AspectJ <code class="language-plaintext highlighter-rouge">@Aspect</code>注解的组件的支持，类似于在Spring XML配置中使用<code class="language-plaintext highlighter-rouge">&lt;aop:aspectj-autoproxy&gt;</code>元素的功能。这个注解通常用于<code class="language-plaintext highlighter-rouge">@Configuration</code>类中。通过这个注解，Spring将会自动代理被<code class="language-plaintext highlighter-rouge">@Aspect</code>注解标记的类，使得切面逻辑能够被织入到目标类中。</p>

<p>Spring的IoC容器看到这个注解，就会自动查找带有<code class="language-plaintext highlighter-rouge">@Aspect</code>的Bean，然后根据每个方法的<code class="language-plaintext highlighter-rouge">@Before</code>、<code class="language-plaintext highlighter-rouge">@Around</code>等注解把AOP注入到特定的Bean中。</p>

<p><code class="language-plaintext highlighter-rouge">JoinPoint</code>接口是AspectJ框架中的一个核心接口，用于表示切点的信息。它提供了一些方法来获取与切点相关的信息。下面是<code class="language-plaintext highlighter-rouge">JoinPoint</code>接口中常用的方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getArgs()</code>：获取方法参数的数组。</li>
  <li><code class="language-plaintext highlighter-rouge">getThis()</code>：获取代理对象的引用。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getTarget()</code>：获取目标对象的引用，类型为<code class="language-plaintext highlighter-rouge">Signature</code>接口。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">getSignature()</code>：获取方法签名的对象。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">getStaticPart()</code>：获取静态部分的对象。</li>
  <li><code class="language-plaintext highlighter-rouge">getKind()</code>：获取切点的类型，如method-execution、method-call等。</li>
  <li><code class="language-plaintext highlighter-rouge">getSourceLocation()</code>：获取切点所在位置的源代码位置。</li>
  <li><code class="language-plaintext highlighter-rouge">getStaticPart()</code>：获取静态部分的对象。</li>
  <li><code class="language-plaintext highlighter-rouge">toShortString()</code>：获取切点的简短字符串表示。</li>
  <li><code class="language-plaintext highlighter-rouge">toLongString()</code>：获取切点的详细字符串表示。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">JoinPoint</code>接口还包含了两个内部接口<code class="language-plaintext highlighter-rouge">StaticPart</code>和<code class="language-plaintext highlighter-rouge">EnclosingStaticPart</code>。这两个接口提供了关于切点静态部分的信息。</p>

<p><code class="language-plaintext highlighter-rouge">StaticPart</code>接口：表示切点的静态部分，即切点所在的位置信息。它包含了以下方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getKind()</code>：获取切点的类型，如<code class="language-plaintext highlighter-rouge">method-execution</code>、<code class="language-plaintext highlighter-rouge">method-call</code>等。</li>
  <li><code class="language-plaintext highlighter-rouge">getSignature()</code>：获取方法签名的对象，类型为<code class="language-plaintext highlighter-rouge">Signature</code>接口。</li>
  <li><code class="language-plaintext highlighter-rouge">getSourceLocation()</code>：获取切点所在位置的源代码位置。</li>
  <li><code class="language-plaintext highlighter-rouge">toShortString()</code>：获取切点的简短字符串表示。</li>
  <li><code class="language-plaintext highlighter-rouge">toLongString()</code>：获取切点的详细字符串表示。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">EnclosingStaticPart</code>接口：表示包围当前切点的静态部分，即当前切点所在的方法或构造函数的信息。它包含了与<code class="language-plaintext highlighter-rouge">StaticPart</code>接口相同的方法，用于获取包围切点的静态部分的信息。</p>

<p>而环绕通知的<code class="language-plaintext highlighter-rouge">ProceedingJoinPoint</code>接口继承于<code class="language-plaintext highlighter-rouge">JoinPoint</code>接口，并多了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">proceed()</code>：执行原始的连接点，即继续执行切点所在的方法。在环绕通知中，可以调用这个方法来执行原始的连接点，或者在合适的时机决定是否继续执行。</li>
  <li><code class="language-plaintext highlighter-rouge">proceed(Object[] args)</code>：执行原始的连接点，并传入指定的参数。</li>
</ul>

<p>传入参数的实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Around</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"环绕开始：执行目标方法前，模拟开启事务"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，目标类对象："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">()+</span> <span class="s">"，被增强处理的方法："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="c1">// 获取目标方法的参数</span>
    <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">getArgs</span><span class="o">();</span>
    <span class="c1">// 修改参数或者根据参数执行一些逻辑</span>
    <span class="c1">// ...</span>
    <span class="c1">// 调用proceed()方法并传入修改后的参数</span>
    <span class="nc">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">args</span><span class="o">);</span> <span class="c1">// 传入修改后的参数</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕结束：执行目标方法前，模拟关闭事务"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<p>在环绕通知中，如果目标方法有参数，可以直接调用<code class="language-plaintext highlighter-rouge">pjp.proceed()</code>方法而不传递任何参数。这是因为<code class="language-plaintext highlighter-rouge">proceed()</code>方法会自动使用目标方法的原始参数进行执行。</p>

<p>如果要<strong>修改传入的参数</strong>，可以使用<code class="language-plaintext highlighter-rouge">proceed(Object[] args)</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TDemo7</span> <span class="n">tDemo7</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">TDemo7</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AnnotationAspectJProxy</span> <span class="o">{</span>
    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"execution(void com.aotmd.test.TDemo7.*(..))"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">cut</span><span class="o">(){}</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"cut()"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">Object</span> <span class="n">obj</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pjp</span><span class="o">.</span><span class="na">getArgs</span><span class="o">().</span><span class="na">length</span><span class="o">==</span><span class="mi">1</span><span class="o">){</span>
            <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"修改"</span><span class="o">});</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改"</span><span class="o">+</span><span class="n">s</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">环绕</span><span class="err">：</span><span class="n">save</span>
<span class="n">保存</span>
<span class="n">删除</span>
<span class="n">环绕</span><span class="err">：</span><span class="n">modify</span>
<span class="n">修改修改</span>
</code></pre></div></div>

<p>这里为了正常调用无参数的<code class="language-plaintext highlighter-rouge">save</code>方法，做了一个判断，不管传入什么字符串给<code class="language-plaintext highlighter-rouge">modify</code>，都会被hook为<code class="language-plaintext highlighter-rouge">修改</code>字符串。</p>

<p>当然，也可以区分切点，就不需要判断了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(void com.aotmd.test.TDemo7.modify(..))"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕："</span><span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="nc">Object</span> <span class="n">obj</span><span class="o">=</span><span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="s">"修改"</span><span class="o">});</span>
    <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Spring对接口类型使用JDK动态代理，对普通类使用CGLIB创建子类。如果一个Bean的class是final，Spring将无法为其创建子类。</strong></p>

<p>Spring AOP实现AOP的方式是动态代理，而AspectJ实现的方式是静态代理。Spring虽然支持AspectJ，但仅仅是支持AspectJ的切点解析和匹配，比如<code class="language-plaintext highlighter-rouge">@Before</code>注解和<code class="language-plaintext highlighter-rouge">execution()</code>语句，代理的底层实现还是JDK动态代理和CGLIB动态代理。</p>

<p>Spring AOP（动态代理）：</p>
<ul>
  <li>Spring AOP基于代理模式，使用JDK动态代理或CGLIB动态代理来创建代理对象。</li>
  <li>当目标对象实现了接口时，Spring AOP使用JDK动态代理来创建代理对象。</li>
  <li>当目标对象没有实现接口时，Spring AOP使用CGLIB动态代理来创建代理对象。</li>
  <li>Spring AOP通过在运行时动态地创建代理对象，并将切面逻辑织入到代理对象的方法中来实现AOP。</li>
</ul>

<p>AspectJ（静态代理）：</p>
<ul>
  <li>AspectJ是一个独立的AOP框架，它使用静态代理来实现AOP。</li>
  <li>AspectJ通过编译时织入（CTW）或类加载时织入（LTW）的方式，在编译或加载阶段将切面逻辑织入到目标类中。</li>
</ul>

<hr />

<p><strong>使用<code class="language-plaintext highlighter-rouge">@annotation()</code>切入点</strong></p>

<p>使用AOP时，被装配的Bean最好自己能清清楚楚地知道自己被安排了。</p>

<p>Spring提供的<code class="language-plaintext highlighter-rouge">@Transactional</code>就是一个非常好的例子。如果自己写的Bean希望在一个数据库事务中被调用，就在方法上标注上<code class="language-plaintext highlighter-rouge">@Transactional</code>，或者直接在class级别注解，表示所有public方法都被安排了。通过<code class="language-plaintext highlighter-rouge">@Transactional</code>，某个方法是否启用了事务就一清二楚了。因此，装配AOP的时候，使用注解是最好的方式。</p>

<p>以一个实际例子演示如何使用注解实现AOP装配。为了监控应用程序的性能，定义一个性能监控的注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@interface</span> <span class="nc">MetricTime</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">""</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后在需要被监控的关键方法上标注该注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span><span class="cm">/*这里生成的Bean名称为TDemo7*/</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="nd">@MetricTime</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改"</span><span class="o">+</span><span class="n">s</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后，使用<code class="language-plaintext highlighter-rouge">@annotation()</code>切入点，并定义具体逻辑：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AnnotationAspectJProxy</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(com.aotmd.test.MetricTime) &amp;&amp; @annotation(m)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">,</span><span class="nc">MetricTime</span> <span class="n">m</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
            <span class="c1">// 写入日志或发送至JMX:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[Metrics] "</span> <span class="o">+</span> <span class="n">pjp</span><span class="o">.</span><span class="na">getTarget</span><span class="o">().</span><span class="na">getClass</span><span class="o">()+</span><span class="s">"-&gt;"</span> <span class="o">+</span><span class="n">pjp</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">t</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">around()</code>方法标注了<code class="language-plaintext highlighter-rouge">@annotation(com.aotmd.test.MetricTime) &amp;&amp; @annotation(m)</code>，<code class="language-plaintext highlighter-rouge">@annotation(com.aotmd.test.MetricTime)</code>意思为目标方法是带有<code class="language-plaintext highlighter-rouge">@MetricTime</code>注解的方法。</p>

<p>如果还要读取<code class="language-plaintext highlighter-rouge">MetricTime</code>注解实例的内容，就需要把<strong>注解实例</strong>注入到<strong>通知方法</strong>中，则需要追加<code class="language-plaintext highlighter-rouge">&amp;&amp; @annotation(m)</code>部分，通知方法应有一个名称为<code class="language-plaintext highlighter-rouge">m</code>的形式参数，类型为<code class="language-plaintext highlighter-rouge">MetricTime</code>，Spring会给<code class="language-plaintext highlighter-rouge">m</code>传入注解实例本身。因为形参带有类型，因此可以直接写成：<code class="language-plaintext highlighter-rouge">@Around("@annotation(m)")</code>。</p>

<p>如果不需要注解的内容，则直接写：<code class="language-plaintext highlighter-rouge">@Around("@annotation(com.aotmd.test.MetricTime)")</code>。</p>

<p>执行：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TDemo7</span> <span class="n">tDemo7</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">TDemo7</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>保存
删除
修改123
[Metrics] class com.aotmd.test.TDemo7-&gt;modify: 4ms
</code></pre></div></div>

<h3 id="aop原理">AOP原理</h3>

<p>无论是使用AspectJ语法，还是配合Annotation，使用AOP，实际上就是让Spring自动为我们创建一个Proxy，使得调用方能无感知地调用指定方法，但运行期却动态<strong>织入</strong>了其他逻辑，因此，AOP本质上就是一个<strong>代理模式</strong>。</p>

<p>因为Spring使用了CGLIB来实现运行期动态创建Proxy，如果没能深入理解其运行原理和实现机制，就极有可能遇到各种诡异的问题。</p>

<p>假设定义了一个<code class="language-plaintext highlighter-rouge">TDemo7</code>的Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span><span class="cm">/*这里生成的Bean名称为TDemo7*/</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"123"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改："</span><span class="o">+</span><span class="n">s</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里多个一个字段<code class="language-plaintext highlighter-rouge">s</code>，切面类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AnnotationAspectJProxy</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(void com.aotmd.test.TDemo7.*(..))"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">pjp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"-↓-环绕前-↓-"</span><span class="o">);</span>
        <span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">pjp</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"-↑-环绕后-↑-"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test2</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TDemo7</span> <span class="n">tDemo7</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">TDemo7</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
        <span class="n">tDemo7</span><span class="o">.</span><span class="na">modify</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
        <span class="cm">/*直接访问对象字段*/</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tDemo7</span><span class="o">.</span><span class="na">s</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tDemo7</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-↓-环绕前-↓-
保存
-↑-环绕后-↑-
删除
-↓-环绕前-↓-
修改：123
-↑-环绕后-↑-
null
class com.aotmd.test.TDemo7$$EnhancerBySpringCGLIB$$8c624483
</code></pre></div></div>

<p>其中对象字段<code class="language-plaintext highlighter-rouge">s</code>没有正常初始化赋值为<code class="language-plaintext highlighter-rouge">"123"</code>。为什么AOP代理后<code class="language-plaintext highlighter-rouge">s</code>就没有正常初始化呢？代理后会生成了一个子类替代原来的bean，生成子类这个过程中并没有初始化<code class="language-plaintext highlighter-rouge">s</code>。</p>

<p>Spring创建的AOP代理，代理类的名总是类似<code class="language-plaintext highlighter-rouge">class com.aotmd.test.TDemo7$$EnhancerBySpringCGLIB$$8c624483</code>，Java的类名实际上允许<code class="language-plaintext highlighter-rouge">$</code>字符。</p>

<p>为了让调用方无感，它必须继承自<code class="language-plaintext highlighter-rouge">TDemo7</code>，然后就可以使用向上提升的特性，让代码<code class="language-plaintext highlighter-rouge">TDemo7 tDemo7 = ac.getBean(TDemo7.class);</code>正常赋值。</p>

<p>该代理类会覆写所有<code class="language-plaintext highlighter-rouge">public</code>和<code class="language-plaintext highlighter-rouge">protected</code>方法，并在内部将<strong>调用委托给原始的<code class="language-plaintext highlighter-rouge">TDemo7</code>实例</strong>。</p>

<hr />

<p>最终问题转换为：代理实例的成员变量<code class="language-plaintext highlighter-rouge">s</code>的值为什么是<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p>实际上，成员变量的初始化是在构造方法中完成的。这是我们看到的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"123"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这是编译器实际编译的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">s</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">TDemo7</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">();</span> <span class="c1">// 构造方法的第一行代码总是调用super()</span>
        <span class="n">s</span><span class="o">=</span><span class="s">"123"</span><span class="o">;</span> <span class="c1">// 继续初始化成员变量</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然而，对于Spring通过CGLIB动态创建的<code class="language-plaintext highlighter-rouge">class com.aotmd.test.TDemo7$$EnhancerBySpringCGLIB$$8c624483</code>代理类，它的构造方法中，<strong>并未调用<code class="language-plaintext highlighter-rouge">super()</code></strong>，因此，从父类继承的成员变量，包括<code class="language-plaintext highlighter-rouge">final</code>类型的成员变量，统统都没有初始化。</p>

<p>Java语言规定，任何类的构造方法，第一行必须调用<code class="language-plaintext highlighter-rouge">super()</code>，如果没有，编译器会自动加上，怎么Spring的CGLIB就可以搞特殊？</p>

<p>这是因为自动加<code class="language-plaintext highlighter-rouge">super()</code>的功能是<strong>Java编译器</strong>实现的，它发现你没加，就自动给加上，发现你加错了，就报编译错误。但实际上，如果直接构造字节码，一个类的构造方法中，不一定非要调用<code class="language-plaintext highlighter-rouge">super()</code>。Spring使用CGLIB构造的Proxy类，是直接生成字节码，并没有源码-编译-字节码这个步骤，因此：</p>

<p>Spring通过CGLIB创建的代理类，<strong>不会初始化代理类自身继承的任何成员变量</strong>，包括<code class="language-plaintext highlighter-rouge">final</code>类型的成员变量。</p>

<hr />

<p>Spring在创建代理对象时，会先创建目标对象，再把目标对象注入到代理对象中，虽然代理对象继承了目标对象，但他们之间的关系本质还是组合。</p>

<p>为什么Spring不初始化代理对象父类？就是因为代理对象可以访问到两个<code class="language-plaintext highlighter-rouge">s</code>变量，但只需要为其中一个进行赋值，而Spring选择给target赋值，也就不需要对代理类的父类进行初始化了。</p>

<p>那么，为什么不直接通过super调用父类方法（即原始类方法），而是通过持有的原始target调用方法？因为有一个工厂模式创建Bean，在实例化完成后，还可以调用其他方法改变字段状态：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">createMap</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"key"</span><span class="o">,</span><span class="s">"value"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>而这个状态，很难重新被代理子类复制并替换，而且这个过程也会消耗性能，且也违背了代理模式，因此持有一个原始对象进行访问是最好的。</p>

<p>而且本来Bean就可以通过set方法注入其他参数或Bean，通过继承可不会重复这些额外的操作。举个简单的例子：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">A1</span> <span class="n">a1</span> <span class="o">=</span> <span class="k">new</span> <span class="no">A1</span><span class="o">();</span>
        <span class="n">a1</span><span class="o">.</span><span class="na">setS</span><span class="o">(</span><span class="s">"hello!"</span><span class="o">);</span>
        <span class="no">A1</span> <span class="n">a2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">A1Proxy</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">A1</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">s</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setS</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"A1{s='"</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">A1Proxy</span> <span class="kd">extends</span> <span class="no">A1</span><span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>要复制<code class="language-plaintext highlighter-rouge">A1</code>的状态，对于简单的<code class="language-plaintext highlighter-rouge">String</code>，复制值就行了，比如：<code class="language-plaintext highlighter-rouge">a2.setS(a1.getS())</code>，那么如果是复杂对象，比如<code class="language-plaintext highlighter-rouge">Map</code>，自定义的对象，那复制起来就麻烦了。还不如持有一个原始对象呢。</p>

<hr />

<p>那么启用了AOP后，如何修复？修复很简单，只需要把直接访问字段的代码，改为通过方法访问，这样就会在代理实例内部将<strong>调用委托给原始的<code class="language-plaintext highlighter-rouge">TDemo7</code>实例</strong>。即添加<code class="language-plaintext highlighter-rouge">getS()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span><span class="cm">/*这里生成的Bean名称为TDemo7*/</span>
<span class="kd">class</span> <span class="nc">TDemo7</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"123"</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getS</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"保存"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">modify</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"修改："</span><span class="o">+</span><span class="n">s</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除"</span><span class="o">);</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果要修改<code class="language-plaintext highlighter-rouge">s</code>，那也要通过方法，而不是直接访问字段修改。</p>

<hr />

<p>如果<code class="language-plaintext highlighter-rouge">getS()</code>添加了<code class="language-plaintext highlighter-rouge">final</code>，因为代理类无法覆写<code class="language-plaintext highlighter-rouge">final</code>方法（这一点绕不过JVM的ClassLoader检查），因为无法覆写，所以直接调用了父类的<code class="language-plaintext highlighter-rouge">getS()</code>，因此该方法返回的是代理类的<code class="language-plaintext highlighter-rouge">s</code>，即<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p>通过打断点步入，也可以很清晰的看到调用非<code class="language-plaintext highlighter-rouge">final</code>修饰的方法，和<code class="language-plaintext highlighter-rouge">final</code>修饰方法的不同。</p>

<p>实际上，如果加上日志：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.slf4j<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>slf4j-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.7.30<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>Spring在启动时会打印一个警告：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>22:01:34.283 [main] INFO  o.s.aop.framework.CglibAopProxy - Final method [public final java.lang.String com.aotmd.test.TDemo7.getS()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
</code></pre></div></div>

<p>最终方法<code class="language-plaintext highlighter-rouge">getS()</code>无法通过 CGLIB 获得代理：对此方法的调用不会路由到目标实例，并且可能会导致针对代理实例中未初始化的字段的 NPE。</p>

<p>因此，使用Bean时，<strong>总是调用方法</strong>，而非直接访问字段；编写Bean时，如果可能会被代理，就不要编写<code class="language-plaintext highlighter-rouge">public final</code>方法。这样才能保证有没有AOP，代码都能正常工作。</p>

<hr />

<p><strong>要查看动态生成的类文件，可以使用</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">getProperties</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="nc">DebuggingClassWriter</span><span class="o">.</span><span class="na">DEBUG_LOCATION_PROPERTY</span><span class="o">,</span> <span class="s">"C:\\class"</span><span class="o">);</span>
</code></pre></div></div>

<p>这两行代码是用于设置Java动态代理生成的类文件保存路径的：</p>

<p><code class="language-plaintext highlighter-rouge">System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");</code></p>

<p>这行代码设置了一个系统属性，告诉Java虚拟机（JVM）在生成动态代理类时保存生成的类文件。动态代理是一种在运行时创建代理对象的机制，通常用于AOP（面向切面编程）等场景。通过设置这个属性为<code class="language-plaintext highlighter-rouge">true</code>，JVM会将生成的动态代理类文件保存在默认的临时目录中。</p>

<p><code class="language-plaintext highlighter-rouge">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, "C:\\class");</code></p>

<p>这行代码设置了另一个系统属性，指定了动态代理生成的类文件保存的路径。在这里，<code class="language-plaintext highlighter-rouge">DebuggingClassWriter.DEBUG_LOCATION_PROPERTY</code>是一个常量，表示动态代理类文件保存路径的属性名，通常用于调试目的。通过将这个属性设置为<code class="language-plaintext highlighter-rouge">C:\\class</code>，表示将生成的动态代理类文件保存在<code class="language-plaintext highlighter-rouge">C:\class</code>目录下。</p>

<p>综合起来，这两行代码的作用是告诉JVM在生成动态代理类时保存生成的类文件，并指定保存路径为<code class="language-plaintext highlighter-rouge">C:\class</code>。这对于调试动态代理生成的类文件或者了解动态代理的工作原理可能会有帮助。</p>

<h2 id="访问数据库">访问数据库</h2>

<p>Java程序使用JDBC接口访问关系数据库的时候，需要以下几步：</p>

<ul>
  <li>创建全局<code class="language-plaintext highlighter-rouge">DataSource</code>实例，表示数据库连接池；</li>
  <li>在需要读写数据库的方法内部，按如下步骤访问数据库：
    <ul>
      <li>从全局<code class="language-plaintext highlighter-rouge">DataSource</code>实例获取<code class="language-plaintext highlighter-rouge">Connection</code>实例；</li>
      <li>通过<code class="language-plaintext highlighter-rouge">Connection</code>实例创建<code class="language-plaintext highlighter-rouge">PreparedStatement</code>实例；</li>
      <li>执行SQL语句，如果是查询，则通过<code class="language-plaintext highlighter-rouge">ResultSet</code>读取结果集，如果是修改，则获得<code class="language-plaintext highlighter-rouge">int</code>结果。</li>
    </ul>
  </li>
</ul>

<p>正确编写JDBC代码的关键是使用<code class="language-plaintext highlighter-rouge">try ... finally</code>释放资源，涉及到事务的代码需要正确提交或回滚事务。</p>

<h3 id="在spring使用jdbc">在Spring使用JDBC</h3>

<p>在Spring使用JDBC，首先通过IoC容器创建并管理一个<code class="language-plaintext highlighter-rouge">DataSource</code>实例，Spring提供了一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，可以方便地操作JDBC，因此，通常情况下，会实例化一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。顾名思义，这个类主要使用了Template模式。</p>

<p>编写<strong>示例代码或者测试代码</strong>时，强烈推荐使用<a href="http://hsqldb.org/">HSQLDB</a>这个数据库，它是一个用Java编写的关系数据库，可以以内存模式或者文件模式运行，本身只有一个jar包，非常适合演示代码或者测试代码。</p>

<p>HSQLDB是一种嵌入式数据库，一般不会持久化，仅用作简单即时性测试数据，程序执行完，数据销毁，有3种模式：<code class="language-plaintext highlighter-rouge">mem</code>、<code class="language-plaintext highlighter-rouge">file</code>、<code class="language-plaintext highlighter-rouge">server</code>。
使用<code class="language-plaintext highlighter-rouge">file</code>模式时，如果需要持久化数据，可以修改链接为：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">jdbc.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb;hsqldb.write_delay=false;shutdown=true</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">file</code>为单例模式，如果已连接数据库，将不能对数据库进行操作。</p>

<p>依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.4.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.zaxxer<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>HikariCP<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>4.0.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>对于<strong>java8</strong> , hsql 版本可以选择 2.4.0。</p>

<p>新建配置文件：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 数据库文件名为testdb:
</span><span class="py">jdbc.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb</span>

<span class="c"># Hsqldb默认的用户名是sa，口令是空字符串:
</span><span class="py">jdbc.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">jdbc.password</span><span class="p">=</span>
</code></pre></div></div>

<p>初始化数据库连接，并初始化<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上述配置中：</p>

<ol>
  <li>通过<code class="language-plaintext highlighter-rouge">@PropertySource("jdbc.properties")</code>读取数据库配置文件；</li>
  <li>通过<code class="language-plaintext highlighter-rouge">@Value("${jdbc.url}")</code>注入配置文件的相关配置；</li>
  <li>创建一个<code class="language-plaintext highlighter-rouge">DataSource</code>实例，它的实际类型是<code class="language-plaintext highlighter-rouge">HikariDataSource</code>，创建时需要用到注入的配置；</li>
  <li>创建一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>实例，它需要注入<code class="language-plaintext highlighter-rouge">DataSource</code>，这是通过方法参数完成注入的。</li>
</ol>

<p>实体类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="n">password</span><span class="o">,</span><span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用与初始化表：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 注意传入的是ConnectionCallback:</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">((</span><span class="nc">ConnectionCallback</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">conn</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="c1">// 可以直接使用conn实例，不要释放它，回调结束后JdbcTemplate自动释放:</span>
            <span class="c1">// 在内部手动创建的PreparedStatement、ResultSet必须用try(...)释放:</span>
            <span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = ?"</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
                <span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">ps</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span>
                                <span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span> 
                                <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"email"</span><span class="o">),</span> 
                                <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"password"</span><span class="o">),</span> 
                                <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span> 
                    <span class="o">}</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"未通过 ID 找到用户。"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 创建一个KeyHolder:</span>
        <span class="nc">KeyHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GeneratedKeyHolder</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span>
                <span class="c1">// 参数1:PreparedStatementCreator</span>
                <span class="o">(</span><span class="n">conn</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="c1">// 创建PreparedStatement时，必须指定RETURN_GENERATED_KEYS:</span>
                    <span class="kt">var</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">"INSERT INTO users(email, password, name) VALUES(?, ?, ?)"</span><span class="o">,</span>
                            <span class="nc">Statement</span><span class="o">.</span><span class="na">RETURN_GENERATED_KEYS</span><span class="o">);</span>
                    <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">);</span>
                    <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
                    <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
                    <span class="k">return</span> <span class="n">ps</span><span class="o">;</span>
                <span class="o">},</span>
                <span class="c1">// 参数2:KeyHolder</span>
                <span class="n">holder</span><span class="o">)</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"插入失败。"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 从KeyHolder中获取返回的自增值:</span>
        <span class="k">return</span> <span class="n">holder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">longValue</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">id</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUserById</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
User{id=0, email='1@qq.com', password='123456', name='小米'}
</code></pre></div></div>

<hr />

<p>Spring提供的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>采用Template模式，提供了一系列以回调为特点的工具方法，目的是避免繁琐的<code class="language-plaintext highlighter-rouge">try...catch</code>语句。</p>

<p><code class="language-plaintext highlighter-rouge">T execute(ConnectionCallback&lt;T&gt; action)</code>方法，它提供了Jdbc的<code class="language-plaintext highlighter-rouge">Connection</code>供我们使用。</p>

<p><code class="language-plaintext highlighter-rouge">T execute(String sql, PreparedStatementCallback&lt;T&gt; action)</code>同理：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 注意传入的是ConnectionCallback:</span>
    <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = ?"</span><span class="o">,(</span><span class="nc">PreparedStatementCallback</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">User</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">ps</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">ps</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"email"</span><span class="o">),</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"password"</span><span class="o">),</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
            <span class="o">}</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"未通过 ID 找到用户。"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">});</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>在Spring的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>中，<code class="language-plaintext highlighter-rouge">queryForObject</code>方法用于执行SQL查询并将结果映射为单个对象。对于<code class="language-plaintext highlighter-rouge">queryForObject</code>方法，<strong>它期望查询结果只有一行</strong>，如果结果集为空或者超过一行，将会抛出异常。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserByEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 传入SQL，参数和RowMapper实例:</span>
    <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE email = ?"</span><span class="o">,</span>
            <span class="o">(</span><span class="nc">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rowNum</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="c1">// 将ResultSet的当前行映射为一个JavaBean:</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span> <span class="c1">// new User object:</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">),</span> <span class="c1">// id</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"email"</span><span class="o">),</span> <span class="c1">// email</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"password"</span><span class="o">),</span> <span class="c1">// password</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span> <span class="c1">// name</span>
            <span class="o">},</span>
            <span class="n">email</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>方法签名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">queryForObject</span><span class="o">(</span><span class="nc">String</span> <span class="n">sql</span><span class="o">,</span> <span class="nc">RowMapper</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">rowMapper</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">){}</span>
</code></pre></div></div>

<p>参数解释如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sql</code>：要执行的 SQL 查询语句。</li>
  <li><code class="language-plaintext highlighter-rouge">rowMapper</code>：一个 RowMapper 对象，用于将查询结果集中的行映射为对象。通常情况下，需要提供一个自定义的 RowMapper 实现，用于将查询结果映射为特定类型的对象。</li>
  <li><code class="language-plaintext highlighter-rouge">args</code>：可变参数，用于指定 SQL 查询语句中的参数值。这些参数将替换 SQL 查询语句中的占位符（如果有的话）。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">RowMapper&lt;T&gt;</code>接口有一个方法：<code class="language-plaintext highlighter-rouge">T mapRow(ResultSet rs, int rowNum) throws SQLException;</code>。</p>

<p>实现必须实现此方法才能映射 <code class="language-plaintext highlighter-rouge">ResultSet</code> 中的每一行数据。此方法不应调用 <code class="language-plaintext highlighter-rouge">next()</code> <code class="language-plaintext highlighter-rouge">ResultSet</code>;它只应映射当前行的值。</p>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">rs</code> – 要映射的 <code class="language-plaintext highlighter-rouge">ResultSet</code>（针对当前行预先初始化）</li>
  <li><code class="language-plaintext highlighter-rouge">rowNum</code> – 当前行的编号</li>
</ul>

<hr />

<p>如果需要处理多行结果集，应该使用<code class="language-plaintext highlighter-rouge">query</code>方法，并提供一个合适的<code class="language-plaintext highlighter-rouge">ResultSetExtractor</code>来处理整个结果集。<code class="language-plaintext highlighter-rouge">query</code>方法允许在<code class="language-plaintext highlighter-rouge">ResultSetExtractor</code>的实现中处理每一行数据，并且可以<strong>自由地调用</strong><code class="language-plaintext highlighter-rouge">rs.next()</code>来移动到结果集的下一行。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="kt">int</span> <span class="n">pageIndex</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">*</span> <span class="o">(</span><span class="n">pageIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT ? OFFSET ?"</span><span class="o">,</span>
            <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
            <span class="n">limit</span><span class="o">,</span> <span class="n">offset</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>方法签名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">query</span><span class="o">(</span><span class="nc">String</span> <span class="n">sql</span><span class="o">,</span> <span class="nc">RowMapper</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">rowMapper</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">){}</span>
</code></pre></div></div>

<p>这里参数同<code class="language-plaintext highlighter-rouge">queryForObject</code>，这里我们直接使用Spring提供的<code class="language-plaintext highlighter-rouge">BeanPropertyRowMapper</code>。如果数据库表的结构恰好和JavaBean的属性名称一致，那么<code class="language-plaintext highlighter-rouge">BeanPropertyRowMapper</code>就可以直接把一行记录按列名转换为JavaBean，注意要符合JavaBean规范。</p>

<hr />

<p>如果执行的不是查询，而是插入、更新和删除操作，那么需要使用<code class="language-plaintext highlighter-rouge">update()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 传入SQL，SQL参数，返回更新的行数:</span>
    <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"UPDATE users SET name = ? WHERE id = ?"</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"User not found by id"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>方法签名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="nc">String</span> <span class="n">sql</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">){}</span>
</code></pre></div></div>

<p>参数解释如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sql</code>：要执行的 SQL 查询语句。</li>
  <li><code class="language-plaintext highlighter-rouge">args</code>：可变参数，用于指定 SQL 查询语句中的参数值。这些参数将替换 SQL 查询语句中的占位符（如果有的话）。</li>
</ul>

<p>只有一种<code class="language-plaintext highlighter-rouge">INSERT</code>操作比较特殊，那就是如果某一列是自增列（例如自增主键），<strong>通常需要获取插入后的自增值</strong>。<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>提供了一个<code class="language-plaintext highlighter-rouge">KeyHolder</code>来简化这一操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">long</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个KeyHolder:</span>
    <span class="nc">KeyHolder</span> <span class="n">holder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GeneratedKeyHolder</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span>
            <span class="c1">// 参数1:PreparedStatementCreator</span>
            <span class="o">(</span><span class="n">conn</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="c1">// 创建PreparedStatement时，必须指定RETURN_GENERATED_KEYS:</span>
                <span class="kt">var</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="s">"INSERT INTO users(email, password, name) VALUES(?, ?, ?)"</span><span class="o">,</span>
                        <span class="nc">Statement</span><span class="o">.</span><span class="na">RETURN_GENERATED_KEYS</span><span class="o">);</span>
                <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">);</span>
                <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
                <span class="n">ps</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
                <span class="k">return</span> <span class="n">ps</span><span class="o">;</span>
            <span class="o">},</span>
            <span class="c1">// 参数2:KeyHolder</span>
            <span class="n">holder</span><span class="o">)</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"插入失败。"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// 从KeyHolder中获取返回的自增值:</span>
    <span class="k">return</span> <span class="n">holder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">longValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">KeyHolder</code> 接口定义了用于检索主键的方法，通常用于处理由 JDBC 插入语句返回的自动生成的主键。以下是 <code class="language-plaintext highlighter-rouge">KeyHolder</code> 接口中的方法解释：</p>

<p><code class="language-plaintext highlighter-rouge">Number getKey()</code>:</p>

<ul>
  <li>从第一个 Map 中检索第一个项目，假设<strong>只有一个项目</strong>和一个 Map，并且该项目是一个数字。这是典型情况下用于获取单个数字生成的主键值。</li>
  <li>如果在 Map 或 List 中遇到多个条目，表示返回了多个主键，则会抛出 <code class="language-plaintext highlighter-rouge">InvalidDataAccessApiUsageException</code> 异常。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt; getKeys()</code>:</p>

<ul>
  <li>
    <p>检索包含主键的第一个 Map。如果列表中有多个条目（表示<strong>多行</strong>返回了主键），则会抛出 <code class="language-plaintext highlighter-rouge">InvalidDataAccessApiUsageException</code> 异常。
<code class="language-plaintext highlighter-rouge">List&lt;Map&lt;String, Object&gt;&gt; getKeyList()</code>:</p>
  </li>
  <li>
    <p>返回包含主键的 List 的引用。可以用于提取<strong>多行</strong>的主键（不常见的情况），也可以用于添加新的主键 Map。</p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">KeyHolder</code> 接口的实现通常由 Spring 的 <code class="language-plaintext highlighter-rouge">JdbcTemplate</code> 在执行插入操作后自动填充并返回，以便可以方便地获取生成的主键值。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">JdbcTemplate</code>只是对JDBC操作的一个简单封装，它的目的是尽量减少手动编写<code class="language-plaintext highlighter-rouge">try(resource) {...}</code>的代码，对于查询，主要通过<code class="language-plaintext highlighter-rouge">RowMapper</code>实现了JDBC结果集到Java对象的转换。</p>

<p>总结一下<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的用法，那就是：</p>

<ul>
  <li>针对简单查询，优选<code class="language-plaintext highlighter-rouge">query()</code>和<code class="language-plaintext highlighter-rouge">queryForObject()</code>，因为只需提供SQL语句、参数和<code class="language-plaintext highlighter-rouge">RowMapper</code>；</li>
  <li>针对更新操作，优选<code class="language-plaintext highlighter-rouge">update()</code>，因为只需提供SQL语句和参数；</li>
  <li>任何复杂的操作，最终也可以通过<code class="language-plaintext highlighter-rouge">execute(ConnectionCallback)</code>实现，因为拿到<code class="language-plaintext highlighter-rouge">Connection</code>就可以做任何JDBC操作。</li>
</ul>

<p>实际上使用最多的仍然是各种查询。如果在设计表结构的时候，能够和JavaBean的属性一一对应，那么直接使用<code class="language-plaintext highlighter-rouge">BeanPropertyRowMapper</code>就很方便。如果表结构和JavaBean不一致怎么办？那就需要稍微改写一下查询，使结果集的结构和JavaBean保持一致。</p>

<p>例如，表的列名是<code class="language-plaintext highlighter-rouge">office_address</code>，而JavaBean属性是<code class="language-plaintext highlighter-rouge">workAddress</code>，就需要指定别名，改写查询如下：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">office_address</span> <span class="k">AS</span> <span class="n">workAddress</span><span class="p">,</span> <span class="n">name</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">email</span> <span class="o">=</span> <span class="o">?</span>
</code></pre></div></div>

<h3 id="事务">事务</h3>

<p>事务必须服从ACID原则。ACID指的是：原子性（atomicity）、一致性（consistency）、隔离性（isolation）和持久性（durability）。通俗理解，事务其实就是一系列指令的集合。</p>

<table>
  <thead>
    <tr>
      <th>名词</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>原子性</td>
      <td>操作这些指令时，要么全部执行成功，要么全部不执行。只要其中一个指令执行失败，所有的指令都执行失败，数据进行回滚，回到执行指令前的数据状态。</td>
    </tr>
    <tr>
      <td>一致性</td>
      <td>事务的执行使数据从一个状态转换为另一个状态，但是对于整个数据的完整性保持稳定。</td>
    </tr>
    <tr>
      <td>隔离性</td>
      <td>在该事务执行的过程中，无论发生的任何数据的改变都应该只存在于该事务之中，对外界不存在任何影响。只有在事务确定正确提交之后，才会显示该事务对数据的改变。其他事务才能获取到这些改变后的数据。</td>
    </tr>
    <tr>
      <td>持久性</td>
      <td>当事务正确完成后，它对于数据的改变是永久性的。</td>
    </tr>
  </tbody>
</table>

<h4 id="编程式事务管理">编程式事务管理</h4>

<p>在代码中显式调用 <code class="language-plaintext highlighter-rouge">beginTransaction</code>、<code class="language-plaintext highlighter-rouge">commit</code>、<code class="language-plaintext highlighter-rouge">rollback</code>等与事务处理相关的方法，这就是编程式事务管理。只有少数事务操作时，编程式事务管理才比较合适。</p>

<p><strong>基于底层API的编程式事务管理</strong></p>

<p>基于底层API 的编程式事务管理就是根据<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code> 、<code class="language-plaintext highlighter-rouge">TransactionDefinition</code> 和<code class="language-plaintext highlighter-rouge">TransactionStatus</code> 几个核心接口，通过编程的方式来进行事务处理。</p>

<p>Spring提供了一个<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>来表示事务管理器，所有的事务都由它负责管理。而事务由<code class="language-plaintext highlighter-rouge">TransactionStatus</code>表示。如果手写事务代码，使用<code class="language-plaintext highlighter-rouge">try...catch</code>如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TransactionStatus</span> <span class="n">tx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="cm">/*开启ts事务*/</span>
    <span class="n">tx</span> <span class="o">=</span> <span class="n">txManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">());</span>
    <span class="c1">// 相关JDBC操作:</span>
    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
    <span class="cm">/*提交事务,并关闭*/</span>
    <span class="n">txManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="cm">/*出现异常,中断ts事务并事务回滚,若不执行则ts事务将开启至程序结束*/</span>
    <span class="n">txManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
    <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring为啥要抽象出<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>和<code class="language-plaintext highlighter-rouge">TransactionStatus</code>？原因是JavaEE除了提供JDBC事务外，它还支持分布式事务JTA（Java Transaction API）。分布式事务是指多个数据源（比如多个数据库，多个消息系统）要在分布式环境下实现事务的时候，应该怎么实现。分布式事务实现起来非常复杂，简单地说就是通过一个分布式事务管理器实现两阶段提交，但本身数据库事务就不快，基于数据库事务实现的分布式事务就慢得难以忍受，所以使用率不高。</p>

<p>Spring为了同时支持JDBC和JTA两种事务模型，就抽象出<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>。因为我们的代码只需要JDBC事务，因此，在<code class="language-plaintext highlighter-rouge">AppConfig</code>中，需要再定义一个<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>对应的Bean，它的实际类型是<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"jdbc.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>完整示例：</p>

<p>初始化与dao：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="n">password</span><span class="o">,</span><span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">name</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="kt">int</span> <span class="n">pageIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">*</span> <span class="o">(</span><span class="n">pageIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT ? OFFSET ?"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
                <span class="n">limit</span><span class="o">,</span> <span class="n">offset</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 传入SQL，SQL参数，返回更新的行数:</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"INSERT INTO users(id,email, password, name) VALUES(?,?,?,?)"</span>
                <span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"更新出错"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">jdbc.properties</code>:</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 数据库文件名为testdb:
</span><span class="py">jdbc.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb</span>

<span class="c"># Hsqldb默认的用户名是sa，口令是空字符串:
</span><span class="py">jdbc.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">jdbc.password</span><span class="p">=</span>
</code></pre></div></div>

<p>启动类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">TransactionStatus</span> <span class="n">tx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">PlatformTransactionManager</span> <span class="n">txManager</span><span class="o">=</span><span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">PlatformTransactionManager</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="cm">/*开启ts事务*/</span>
            <span class="n">tx</span> <span class="o">=</span> <span class="n">txManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">());</span>
            <span class="c1">// 相关JDBC操作:</span>
            <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
            <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
            <span class="cm">/*提交事务,并关闭*/</span>
            <span class="n">txManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="cm">/*出现异常,中断ts事务并事务回滚,若不执行则ts事务将开启至程序结束*/</span>
            <span class="n">txManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
            <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：<code class="language-plaintext highlighter-rouge">[]</code>，加上相同主键异常。因为回滚了事务，所以没有插入任何一条数据。</p>

<p>去掉事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
    <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
<span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[User{id=1, email='1@qq.com', password='小米', name='1'}]
</code></pre></div></div>

<p>第一条插入成功了。</p>

<p>使用事务时，要特别注意使用提交或回滚结束事务，如果不及时提交或者回滚，当另一个事务需要对本事务中影响的行进行<strong>更新</strong>的时候是会被阻塞的。一直等到事务超时释放。所以一个事物要么尽快提交，要么尽快回滚。</p>

<h4 id="基于transactiontemplate的编程式事务管理">基于<code class="language-plaintext highlighter-rouge">TransactionTemplate</code>的编程式事务管理</h4>

<p>事务处理的代码散落在业务逻辑代码中，破坏了原有代码的条理性， 并且每一个业务方法都包含了类似的启动事务、提交以及回滚事务的样板代码。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionTemplate</code> 的<code class="language-plaintext highlighter-rouge">execute</code> 方法有一个<code class="language-plaintext highlighter-rouge">TransactionCallback</code> 接口类型的参数，该接口中定义了一个<code class="language-plaintext highlighter-rouge">doInTransaction</code>方法。在这里可以使用默认的事务提交和回滚规则，在业务代码中不需要显式调用任何事务处理的API。</p>

<p><code class="language-plaintext highlighter-rouge">dolnTransaction</code>方法有一个<code class="language-plaintext highlighter-rouge">TransactionStatus</code> 类型的参数，可以在方法的任何位置调用该参数的<code class="language-plaintext highlighter-rouge">setRollbackOnly</code>方法将事务<strong>标识</strong>为回滚，以执行事务回滚。</p>

<p>根据默认规则，如果在执行回调方法的过程中抛出了<strong>未检查异常（也即运行时异常）</strong>，或者显式调用了<code class="language-plaintext highlighter-rouge">setRollbackOnly</code>方法，则回滚事务；如果事务执行完成或者抛出了<code class="language-plaintext highlighter-rouge">checked</code> 类型的异常，则提交事务。</p>

<p>示例，在上个例子添加代码：</p>

<p><code class="language-plaintext highlighter-rouge">Config</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Bean</span>
    <span class="nc">TransactionTemplate</span> <span class="nf">createTransactionTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">PlatformTransactionManager</span> <span class="n">ptm</span><span class="o">){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">TransactionTemplate</span><span class="o">(</span><span class="n">ptm</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">UserService</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
	<span class="o">...</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUsers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">){</span>
        <span class="n">tt</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">TransactionCallback</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">doInTransaction</span><span class="o">(</span><span class="nc">TransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="k">for</span> <span class="o">(</span><span class="nc">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">insertUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
                    <span class="n">status</span><span class="o">.</span><span class="na">setRollbackOnly</span><span class="o">();</span><span class="cm">/*显示调用回滚*/</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
            <span class="n">userService</span><span class="o">.</span><span class="na">insertUsers</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：<code class="language-plaintext highlighter-rouge">[]</code>，加上相同主键异常。因为回滚了事务，所以没有插入任何一条数据。</p>

<h4 id="声明式事务">声明式事务</h4>

<p>使用编程的方式使用Spring事务仍然比较繁琐，更好的方式是通过声明式事务来实现。</p>

<p>声明式事务管理最大的优点是不需要通过编程的方式管理事务，因而不需要在业务逻辑代码中掺杂事务处理的代码，只需相关的事务规则声明便可以将事务规则应用到业务逻辑中。通常情况下，在开发中使用声明式事务处理不仅因为其简单，更主要的是因为这样使得纯业务代码不被污染，极大地方便了后期的代码维护。</p>

<p>与编程式事务管理相比，声明式事务管理唯一不足的地方是最细粒度只能作用到方法级别，无法做到像编程式事务管理那样可以作用到代码块级别。但即便有这样的需求，也可以通过变通的方法进行解决，例如可以将需要进行事务处理的代码块独立为方法等。</p>

<p>Spring 的声明式事务管理可以通过两种方式来实现，一是基于XML 的方式， 二是基于<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解的方式。</p>

<h5 id="基于xml">基于XML</h5>

<p>基于XML方式的声明式事务管理是通过在配置文件中配置事务规则的相关声明来实现的。Spring框架提供了<code class="language-plaintext highlighter-rouge">tx</code>命名空间来配置事务，提供了<code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code>元素来配置事务的通知。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code> 标签：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">id</code> 属性：用于给事务通知指定一个唯一的标识符。</li>
  <li><code class="language-plaintext highlighter-rouge">transaction-manager</code> 属性：指定要使用的事务管理器的名称。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">&lt;tx:attributes&gt;</code> 标签：</p>

<ul>
  <li>该标签用于定义事务的属性，即事务的行为和配置。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;tx:method&gt;</code> 标签用于指定要应用事务的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">name</code> 属性：用于指定方法的名称。</li>
  <li>其他属性（如 <code class="language-plaintext highlighter-rouge">propagation</code>、<code class="language-plaintext highlighter-rouge">isolation</code>、<code class="language-plaintext highlighter-rouge">timeout</code>、<code class="language-plaintext highlighter-rouge">readOnly</code> 等）可以用于进一步配置事务的行为。</li>
</ul>

<p>下面是一个示例，展示了如何使用 <code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code> 标签及其子标签：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;tx:advice</span> <span class="na">id=</span><span class="s">"myAdvice"</span> <span class="na">transaction-manager=</span><span class="s">"transactionManager"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tx:attributes&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"insert*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">isolation=</span><span class="s">"DEFAULT"</span> <span class="na">timeout=</span><span class="s">"10"</span> <span class="na">readOnly=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"update*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">isolation=</span><span class="s">"DEFAULT"</span> <span class="na">timeout=</span><span class="s">"10"</span> <span class="na">readOnly=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"delete*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">isolation=</span><span class="s">"DEFAULT"</span> <span class="na">timeout=</span><span class="s">"10"</span> <span class="na">readOnly=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"get*"</span> <span class="na">propagation=</span><span class="s">"SUPPORTS"</span> <span class="na">isolation=</span><span class="s">"DEFAULT"</span> <span class="na">timeout=</span><span class="s">"10"</span> <span class="na">readOnly=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/tx:attributes&gt;</span>
<span class="nt">&lt;/tx:advice&gt;</span>
</code></pre></div></div>

<p>在上述示例中，事务通知（<code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code>）被命名为 <code class="language-plaintext highlighter-rouge">myAdvice</code>，并使用名为 <code class="language-plaintext highlighter-rouge">transactionManager</code> 的事务管理器。<code class="language-plaintext highlighter-rouge">&lt;tx:attributes&gt;</code> 标签下定义了多个 <code class="language-plaintext highlighter-rouge">&lt;tx:method&gt;</code> 标签，每个标签指定了一个方法的事务属性。例如，<code class="language-plaintext highlighter-rouge">name="insert*"</code> 表示匹配以 “insert” 开头的方法，并将其配置为使用 <code class="language-plaintext highlighter-rouge">REQUIRED</code> 传播行为、<code class="language-plaintext highlighter-rouge">DEFAULT</code> 隔离级别、<code class="language-plaintext highlighter-rouge">10</code> 秒的超时时间和非只读模式。</p>

<p>在<code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code>元素自己置了事务的增强处理后就可以通过编写AOP配置让Spring自动对目标对象生成代理。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 是 Spring AOP 配置中的一个标签，用于定义切面（aspect）和切入点（pointcut）之间的关联关系。它允许将一个切面应用于一个或多个切入点，以便在匹配的方法执行时执行相应的通知（advice）。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 标签具有以下属性：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">advice-ref</code>：指定要应用的通知的引用。通常是一个事务通知、日志记录通知或其他自定义通知。</li>
  <li><code class="language-plaintext highlighter-rouge">pointcut-ref</code>：指定要应用通知的切入点的引用。切入点定义了哪些方法将被通知所影响。</li>
  <li><code class="language-plaintext highlighter-rouge">order</code>：指定切面的执行顺序。如果有多个切面应用于同一个切入点，可以使用 <code class="language-plaintext highlighter-rouge">order</code> 属性来控制它们的执行顺序。</li>
</ul>

<p>以下是一个示例，展示了如何使用 <code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 标签：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aop:config&gt;</span>
    <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">"cut"</span> <span class="na">expression=</span><span class="s">"execution(void com.example.service.UserService.saveUser(..))"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"myAdvice"</span> <span class="na">pointcut-ref=</span><span class="s">"cut"</span> <span class="na">order=</span><span class="s">"1"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<p>在上述示例中，<code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code> 标签用于配置 AOP。<code class="language-plaintext highlighter-rouge">&lt;aop:pointcut&gt;</code> 标签定义了一个切入点，它匹配了 <code class="language-plaintext highlighter-rouge">com.example.service.UserService</code> 类的 <code class="language-plaintext highlighter-rouge">saveUser</code> 方法。<code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 标签将切面（<code class="language-plaintext highlighter-rouge">myAdvice</code>）和切入点（<code class="language-plaintext highlighter-rouge">cut</code>）关联起来，并指定了执行顺序为 1。</p>

<p>当出现unchecked异常时会发生回滚。</p>

<p>在编程式事务管理实例上修改为基于XML形式：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="na">xmlns:aop=</span><span class="s">"http://www.springframework.org/schema/aop"</span>
       <span class="na">xmlns:tx=</span><span class="s">"http://www.springframework.org/schema/tx"</span> <span class="na">xmlns:context=</span><span class="s">"http://www.springframework.org/schema/context"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"location"</span> <span class="na">value=</span><span class="s">"classpath:jdbc.properties"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"hikariConfig"</span> <span class="na">class=</span><span class="s">"com.zaxxer.hikari.HikariConfig"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jdbcUrl"</span> <span class="na">value=</span><span class="s">"${jdbc.url}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">"${jdbc.username}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"${jdbc.password}"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSourceProperties"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;props&gt;</span>
                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"autoCommit"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/prop&gt;</span>
                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"connectionTimeout"</span><span class="nt">&gt;</span>5000<span class="nt">&lt;/prop&gt;</span>
                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"idleTimeout"</span><span class="nt">&gt;</span>60000<span class="nt">&lt;/prop&gt;</span>
            <span class="nt">&lt;/props&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span> <span class="na">class=</span><span class="s">"com.zaxxer.hikari.HikariDataSource"</span> <span class="na">destroy-method=</span><span class="s">"close"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"hikariConfig"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"jdbcTemplate"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.core.JdbcTemplate"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"transactionManager"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
    <span class="c">&lt;!--扫描自动装配，其他的Bean懒得手动写了--&gt;</span>
    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"com.aotmd.test"</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!--编写通知声明事务--&gt;</span>
    <span class="nt">&lt;tx:advice</span> <span class="na">id=</span><span class="s">"myAdvice"</span> <span class="na">transaction-manager=</span><span class="s">"transactionManager"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;tx:attributes&gt;&lt;tx:method</span> <span class="na">name=</span><span class="s">"*"</span><span class="nt">/&gt;</span><span class="c">&lt;!--*表示任意方法--&gt;</span><span class="nt">&lt;/tx:attributes&gt;</span>
    <span class="nt">&lt;/tx:advice&gt;</span>
    <span class="nt">&lt;aop:config&gt;</span><span class="c">&lt;!--编写AOP,让spring自动对目标对象生成代理,需要使用AspectJ的表达式--&gt;</span>
        <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">"cut"</span> <span class="na">expression=</span><span class="s">"execution(void com.aotmd.test.UserService.insertUsers(..))"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"myAdvice"</span> <span class="na">pointcut-ref=</span><span class="s">"cut"</span><span class="nt">/&gt;</span><span class="c">&lt;!--切面,将切入点与通知关联--&gt;</span>
    <span class="nt">&lt;/aop:config&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<p>上述XML配置是使用Spring的AOP（面向切面编程）来配置事务管理的示例。</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">&lt;tx:advice&gt;</code> 元素定义了一个事务通知（advice），它的id属性设置为<code class="language-plaintext highlighter-rouge">myAdvice</code>，并指定了事务管理器为<code class="language-plaintext highlighter-rouge">transactionManager</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;tx:attributes&gt;</code> 元素用于定义事务的属性，这里使用了<code class="language-plaintext highlighter-rouge">&lt;tx:method&gt;</code> 元素，并设置<code class="language-plaintext highlighter-rouge">name</code>属性为<code class="language-plaintext highlighter-rouge">*</code>，表示适用于所有方法，<code class="language-plaintext highlighter-rouge">&lt;tx:method&gt;</code> 标签是在 <code class="language-plaintext highlighter-rouge">&lt;aop:pointcut&gt;</code> 标签匹配的基础上再进行一次匹配过滤。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;</code> 元素用于配置AOP，它包含了切入点和通知的定义。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;aop:pointcut&gt;</code> 元素定义了一个切入点（pointcut），它的<code class="language-plaintext highlighter-rouge">id</code>属性设置为<code class="language-plaintext highlighter-rouge">cut</code>，并使用了AspectJ表达式来匹配目标对象的方法。在这个示例中，切入点表达式为<code class="language-plaintext highlighter-rouge">execution(void com.aotmd.test.UserService.insertUsers(..))</code>，表示匹配<code class="language-plaintext highlighter-rouge">com.aotmd.test.UserService</code> 类中的<code class="language-plaintext highlighter-rouge">insertUsers</code> 方法。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;aop:advisor&gt;</code> 元素用于将切入点和通知关联起来，它的<code class="language-plaintext highlighter-rouge">advice-ref</code>属性指定了要使用的通知<code class="language-plaintext highlighter-rouge">myAdvice</code>，<code class="language-plaintext highlighter-rouge">pointcut-ref</code>属性指定了要使用的切入点<code class="language-plaintext highlighter-rouge">cut</code>。</li>
</ol>

<p>通过上述配置，Spring会自动为匹配切入点的方法生成代理，并在方法执行前后应用事务通知。事务通知会根据事务属性（在<code class="language-plaintext highlighter-rouge">&lt;tx:attributes&gt;</code>中定义）来管理事务的开始、提交或回滚。</p>

<p><code class="language-plaintext highlighter-rouge">com.aotmd.test.Test4</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span><span class="o">=</span><span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
            <span class="n">userService</span><span class="o">.</span><span class="na">insertUsers</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="n">password</span><span class="o">,</span><span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">name</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="kt">int</span> <span class="n">pageIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">*</span> <span class="o">(</span><span class="n">pageIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT ? OFFSET ?"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
                <span class="n">limit</span><span class="o">,</span> <span class="n">offset</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 传入SQL，SQL参数，返回更新的行数:</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"INSERT INTO users(id,email, password, name) VALUES(?,?,?,?)"</span>
                <span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"更新出错"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUsers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">insertUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：<code class="language-plaintext highlighter-rouge">[]</code>，加上相同主键异常。因为回滚了事务，所以没有插入任何一条数据。</p>

<h5 id="基于transactional-注解实例">基于<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解实例</h5>

<p>Spring对一个声明式事务的方法，是如何开启的事务支持？原理仍然是AOP代理，即通过自动创建Bean的Proxy实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span><span class="err">$</span><span class="n">$EnhancerBySpringCGLIB</span> <span class="kd">extends</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nc">UserService</span> <span class="n">target</span> <span class="o">=</span> <span class="o">...</span>
    <span class="nc">PlatformTransactionManager</span> <span class="n">txManager</span> <span class="o">=</span> <span class="o">...</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">TransactionStatus</span> <span class="n">tx</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">tx</span> <span class="o">=</span> <span class="n">txManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">());</span>
            <span class="n">target</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
            <span class="n">txManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">txManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">tx</span><span class="o">);</span>
            <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ Transactional</code> 注解可以作用于<strong>接口、接口方法、类以及类的方法</strong>上。当作用于类上时，该类的所有<code class="language-plaintext highlighter-rouge">public</code> 方法都将具有该类型的事务属性。当Spring检测到带有<code class="language-plaintext highlighter-rouge">@Transactional</code>注解的方法时，它会使用配置的事务管理器来管理这些方法的事务。</p>

<p>同时也可以在方法级别使用该注解来<strong>覆盖</strong>类级别的定义。虽然<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解可以作用于接口、接口方法、类以及类的方法上，但是Spring小组建议不要在接口或者接口方法上使用该注解，因为它只有在使用基于接口的代理时才会生效。</p>

<p>另外， <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解应该只被应用到 <code class="language-plaintext highlighter-rouge">public</code> 方法上，这是由 Spring AOP 的本质决定的。如果你在 <code class="language-plaintext highlighter-rouge">protected</code>、<code class="language-plaintext highlighter-rouge">private</code> 或者默认可见性的方法上使用 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解，这将被忽略，也不会抛出任何异常。</p>

<p>当出现unchecked异常时会发生回滚。</p>

<p>如果不想对某个异常进行事务处理， 可以使用如下代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span><span class="o">=</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">//不对RuntimeException回滚生效</span>
<span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span><span class="o">=</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">//不对Exception回滚生效</span>
</code></pre></div></div>

<p>另外，<strong>需要确保在Spring的配置类中启用了事务管理</strong>，可以通过在<strong>配置类</strong>上添加<code class="language-plaintext highlighter-rouge">@EnableTransactionManagement</code>注解来启用事务管理。</p>

<p><strong>注意：声明了<code class="language-plaintext highlighter-rouge">@EnableTransactionManagement</code>后，不必额外添加<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>。</strong></p>

<p>不过<code class="language-plaintext highlighter-rouge">@EnableTransactionManagement</code>只会处理事务的注解，AOP的注解还是需要<code class="language-plaintext highlighter-rouge">@EnableAspectJAutoProxy</code>来处理。</p>

<p>在编程式事务管理实例上修改添加：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">Controller</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">controller</span><span class="o">.</span><span class="na">test1</span><span class="o">();</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">Controller</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">(){</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：<code class="language-plaintext highlighter-rouge">[]</code>，加上相同主键异常。</p>

<p>去掉<code class="language-plaintext highlighter-rouge">@Transactional</code>后：<code class="language-plaintext highlighter-rouge">[User{id=1, email='1@qq.com', password='小米', name='1'}]</code>，加上相同主键异常。</p>

<p>基于<code class="language-plaintext highlighter-rouge">TransactionDefinition</code> 、<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>、<code class="language-plaintext highlighter-rouge">TransactionStatus</code> 的编程式事务管理是Spring 提供的最原始的方式，通常在实际工程中不推荐使用，但了解这种方式对理解Spring 事务处理的本质有很大帮助。</p>

<p>基于<code class="language-plaintext highlighter-rouge">TransactionTemplate</code> 的编程式事务管理是对上一种方式的封装，使得编码更简单、清晰。基于<code class="language-plaintext highlighter-rouge">@Transactional</code> 的方式将事务管理简化到了极致，极大地提高了编程开发效率。</p>

<h4 id="事务回滚">事务回滚</h4>

<p>默认情况下，如果发生了<code class="language-plaintext highlighter-rouge">RuntimeException</code>，Spring的声明式事务将自动回滚。在一个事务方法中，如果程序判断需要回滚事务，只需抛出<code class="language-plaintext highlighter-rouge">RuntimeException</code>。</p>

<p>如果要针对Checked Exception回滚事务，需要在<code class="language-plaintext highlighter-rouge">@Transactional</code>注解中写出来：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">IOException</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</code></pre></div></div>

<p>上述代码表示在抛出<code class="language-plaintext highlighter-rouge">RuntimeException</code>或<code class="language-plaintext highlighter-rouge">IOException</code>时，事务将回滚。</p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 注解中定义了以下方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">value()</code>：用于设置事务管理器的别名，是 <code class="language-plaintext highlighter-rouge">transactionManager()</code> 方法的别名。</li>
  <li><code class="language-plaintext highlighter-rouge">transactionManager()</code>：用于设置事务管理器的限定符值，可以用来确定目标事务管理器，匹配特定的 <code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code> bean 定义。</li>
  <li><code class="language-plaintext highlighter-rouge">propagation()</code>：用于设置事务传播类型，默认为 <code class="language-plaintext highlighter-rouge">Propagation.REQUIRED</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">isolation()</code>：用于设置事务隔离级别，默认为 <code class="language-plaintext highlighter-rouge">Isolation.DEFAULT</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">timeout()</code>：用于设置事务超时时间，单位秒，默认为底层事务系统的默认超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">readOnly()</code>：用于设置事务是否为只读，默认为 <code class="language-plaintext highlighter-rouge">false</code>。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">rollbackFor()</code>：定义了必须导致事务回滚的异常类，可以是 <code class="language-plaintext highlighter-rouge">Throwable</code> 的子类。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">rollbackForClassName()</code>：定义了必须导致事务回滚的异常类名，可以是 <code class="language-plaintext highlighter-rouge">Throwable</code> 的子类的类名。</li>
  <li><code class="language-plaintext highlighter-rouge">noRollbackFor()</code>：定义了不应导致事务回滚的异常类，可以是 <code class="language-plaintext highlighter-rouge">Throwable</code> 的子类。</li>
  <li><code class="language-plaintext highlighter-rouge">noRollbackForClassName()</code>：定义了不应导致事务回滚的异常类名，可以是 <code class="language-plaintext highlighter-rouge">Throwable</code> 的子类的类名。</li>
</ul>

<p>这些方法用于配置 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解的属性，以便在应用程序中定义事务行为。</p>

<h4 id="事务边界">事务边界</h4>

<p>在使用事务的时候，明确事务边界非常重要。对于声明式事务，例如，下面的<code class="language-plaintext highlighter-rouge">register()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 事务开始</span>
       <span class="o">...</span>
    <span class="o">}</span> <span class="c1">// 事务结束</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它的事务边界就是<code class="language-plaintext highlighter-rouge">register()</code>方法开始和结束。</p>

<p>类似的，一个负责给用户增加积分的<code class="language-plaintext highlighter-rouge">addBonus()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BonusService</span> <span class="o">{</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addBonus</span><span class="o">(</span><span class="kt">long</span> <span class="n">userId</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bonus</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 事务开始</span>
       <span class="o">...</span>
    <span class="o">}</span> <span class="c1">// 事务结束</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它的事务边界就是<code class="language-plaintext highlighter-rouge">addBonus()</code>方法开始和结束。</p>

<p>用户注册后，能自动获得100积分，因此，实际代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">BonusService</span> <span class="n">bonusService</span><span class="o">;</span>

    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 插入用户记录:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
        <span class="c1">// 增加100积分:</span>
        <span class="n">bonusService</span><span class="o">.</span><span class="na">addBonus</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>调用方（比如<code class="language-plaintext highlighter-rouge">RegisterController</code>）调用<code class="language-plaintext highlighter-rouge">UserService.register()</code>这个事务方法，该方法在内部又调用了<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>这个事务方法，一共有几个事务？如果<code class="language-plaintext highlighter-rouge">addBonus()</code>抛出了异常需要回滚事务，<code class="language-plaintext highlighter-rouge">register()</code>方法的事务是否也要回滚？</p>

<h4 id="事务传播">事务传播</h4>

<p>要解决上面的问题，首先要定义事务的传播模型。</p>

<p>假设用户注册的入口是<code class="language-plaintext highlighter-rouge">RegisterController</code>，它本身没有事务，仅仅是调用<code class="language-plaintext highlighter-rouge">UserService.register()</code>这个事务方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RegisterController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/register"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">doRegister</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
        <span class="k">return</span> <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因此，<code class="language-plaintext highlighter-rouge">UserService.register()</code>这个事务方法的起始和结束，就是事务的范围。</p>

<p>需要关心的问题是，在<code class="language-plaintext highlighter-rouge">UserService.register()</code>这个事务方法内，调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>，应该期待的事务行为是什么：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 事务已开启:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
    <span class="c1">// ???:</span>
    <span class="n">bonusService</span><span class="o">.</span><span class="na">addBonus</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
<span class="o">}</span> <span class="c1">// 事务结束</span>
</code></pre></div></div>

<p>对于大多数业务来说，<code class="language-plaintext highlighter-rouge">UserService.register()</code>已经开启了一个事务，那么在内部调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>时，<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法就没必要再开启一个新事务，直接加入到<code class="language-plaintext highlighter-rouge">BonusService.register()</code>的事务里就好了。</p>

<p>其实就相当于：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">UserService.register()</code>先执行了一条INSERT语句：<code class="language-plaintext highlighter-rouge">INSERT INTO users ...</code></li>
  <li><code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>再执行一条INSERT语句：<code class="language-plaintext highlighter-rouge">INSERT INTO bonus ...</code></li>
</ol>

<hr />

<p>Spring的声明式事务为事务传播定义了几个级别，默认传播级别就是<code class="language-plaintext highlighter-rouge">REQUIRED</code>，它的意思是，如果当前<strong>没有</strong>事务，<strong>就创建</strong>一个新事务，如果当前<strong>有</strong>事务，<strong>就加入</strong>到当前事务中执行。</p>

<p><code class="language-plaintext highlighter-rouge">UserService.register()</code>方法，它在<code class="language-plaintext highlighter-rouge">RegisterController</code>中执行，因为<code class="language-plaintext highlighter-rouge">RegisterController</code>没有事务，因此，<code class="language-plaintext highlighter-rouge">UserService.register()</code>方法会自动创建一个新事务。</p>

<p>在<code class="language-plaintext highlighter-rouge">UserService.register()</code>方法内部，调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法时，因为<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>检测到当前已经有事务了，因此，它会加入到当前事务中执行。</p>

<p>因此，整个业务流程的事务边界就清晰了：它只有一个事务，并且范围就是<code class="language-plaintext highlighter-rouge">UserService.register()</code>方法。</p>

<p>把<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法的<code class="language-plaintext highlighter-rouge">@Transactional</code>去掉，变成一个普通方法，那不就规避了复杂的传播模型吗？</p>

<p>去掉<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法的<code class="language-plaintext highlighter-rouge">@Transactional</code>，会引来另一个问题，即其他地方如果调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>方法，那就没法保证事务了。</p>

<hr />

<p>默认的事务传播级别是<code class="language-plaintext highlighter-rouge">REQUIRED</code>，它满足绝大部分的需求。还有一些其他的传播级别：</p>

<p><code class="language-plaintext highlighter-rouge">SUPPORTS</code>：表示如果<strong>有</strong>事务，<strong>就加入</strong>到当前事务，如果<strong>没有</strong>，那<strong>也不开启</strong>事务执行。这种传播级别可用于查询方法，因为<code class="language-plaintext highlighter-rouge">SELECT</code>语句既可以在事务内执行，也可以不需要事务；</p>

<p><code class="language-plaintext highlighter-rouge">MANDATORY</code>：表示<strong>必须要存在</strong>当前事务<strong>并加入</strong>执行，<strong>否则</strong>将抛出<strong>异常</strong>。这种传播级别可用于核心更新逻辑，比如用户余额变更，它总是被其他事务方法调用，不能直接由非事务方法调用；</p>

<p><code class="language-plaintext highlighter-rouge">REQUIRES_NEW</code>：表示<strong>不管</strong>当前<strong>有没有</strong>事务，都<strong>必须开启</strong>一个<strong>新的</strong>事务执行。如果当前已经有事务，那么当前事务会挂起，等新事务完成后，再恢复执行；</p>

<p><code class="language-plaintext highlighter-rouge">NOT_SUPPORTED</code>：表示<strong>不支持</strong>事务，如果当前有事务，那么当前事务会挂起，等这个方法执行完成后，再恢复执行；</p>

<p><code class="language-plaintext highlighter-rouge">NEVER</code>：和<code class="language-plaintext highlighter-rouge">NOT_SUPPORTED</code>相比，它不但<strong>不支持</strong>事务，而且在<strong>监测到</strong>当前有事务时，会抛出<strong>异常</strong>拒绝执行；</p>

<p><code class="language-plaintext highlighter-rouge">NESTED</code>：表示<strong>如果当前有</strong>事务，则<strong>开启一个嵌套</strong>级别事务，如果当前<strong>没有</strong>事务，则开启一个<strong>新</strong>事务。</p>

<p>上面这么多种事务的传播级别，其实默认的<code class="language-plaintext highlighter-rouge">REQUIRED</code>已经满足绝大部分需求，<code class="language-plaintext highlighter-rouge">SUPPORTS</code>和<code class="language-plaintext highlighter-rouge">REQUIRES_NEW</code>在少数情况下会用到，其他基本不会用到，因为把事务搞得越复杂，不仅逻辑跟着复杂，而且速度也会越慢。</p>

<p>定义事务的传播级别也是写在<code class="language-plaintext highlighter-rouge">@Transactional</code>注解里的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="nc">Propagation</span><span class="o">.</span><span class="na">REQUIRES_NEW</span><span class="o">)</span>
</code></pre></div></div>

<hr />

<p>Spring是如何传播事务的？在JDBC中使用事务的时候，是这么个写法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">openConnection</span><span class="o">();</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="c1">// 关闭自动提交:</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
    <span class="c1">// 执行多条SQL语句:</span>
    <span class="n">insert</span><span class="o">();</span> <span class="n">update</span><span class="o">();</span> <span class="n">delete</span><span class="o">();</span>
    <span class="c1">// 提交事务:</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 回滚事务:</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring使用声明式事务，最终也是通过执行JDBC事务来实现功能的，那么，一个事务方法，如何获知当前是否存在事务？</p>

<p>答案是使用<code class="language-plaintext highlighter-rouge">ThreadLocal</code>。Spring总是把JDBC相关的<code class="language-plaintext highlighter-rouge">Connection</code>和<code class="language-plaintext highlighter-rouge">TransactionStatus</code>实例绑定到<code class="language-plaintext highlighter-rouge">ThreadLocal</code>。如果一个事务方法从<code class="language-plaintext highlighter-rouge">ThreadLocal</code>未取到事务，那么它会打开一个新的JDBC连接，同时开启一个新的事务，否则，它就直接使用从<code class="language-plaintext highlighter-rouge">ThreadLocal</code>获取的JDBC连接以及<code class="language-plaintext highlighter-rouge">TransactionStatus</code>。因此，事务能正确传播的前提是，<strong>方法调用是在一个线程内才行</strong>。如果像下面这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// BEGIN TX-A</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="c1">// BEGIN TX-B:</span>
        <span class="n">bonusService</span><span class="o">.</span><span class="na">addBonus</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
        <span class="c1">// END TX-B</span>
    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
<span class="o">}</span> <span class="c1">// END TX-A</span>
</code></pre></div></div>

<p>在另一个线程中调用<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>，它根本获取不到当前事务，因此，<code class="language-plaintext highlighter-rouge">UserService.register()</code>和<code class="language-plaintext highlighter-rouge">BonusService.addBonus()</code>两个方法，将分别开启两个完全独立的事务。换句话说，<strong>事务只能在当前线程传播，无法跨线程传播。</strong></p>

<p>如果想实现跨线程传播事务，就要想办法把当前线程绑定到<code class="language-plaintext highlighter-rouge">ThreadLocal</code>的<code class="language-plaintext highlighter-rouge">Connection</code>和<code class="language-plaintext highlighter-rouge">TransactionStatus</code>实例传递给新线程，但实现起来非常复杂，根据异常回滚更加复杂，不推荐自己去实现。</p>

<h4 id="事务隔离级别">事务隔离级别</h4>

<p>隔离级别是指若干个并发的事务之间的隔离程度。<code class="language-plaintext highlighter-rouge">TransactionDefinition</code> 接口中定义了五个表示隔离级别的常量：</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_DEFAULT</code>：这是<strong>默认值</strong>，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是<code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_READ_COMMITTED</code>。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code>：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别<strong>不能防止脏读和不可重复读</strong>，因此很少使用该隔离级别。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_READ_COMMITTED</code>：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别<strong>可以防止脏读</strong>，这也是大多数情况下的推荐值。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_REPEATABLE_READ</code>：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别<strong>可以防止脏读和不可重复读</strong>。</p>

<p><code class="language-plaintext highlighter-rouge">TransactionDefinition.ISOLATION_SERIALIZABLE</code>：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别<strong>可以防止脏读、不可重复读以及幻读</strong>。但是这将<strong>严重影响程序的性能</strong>。通常情况下也不会用到该级别。</p>

<p><a href="/2021/09/03/其他/#事务">具体参见</a></p>

<h3 id="使用泛型编写通用模板方法">使用泛型编写通用模板方法</h3>

<p>通用模板：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Base</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">table</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">entityClass</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">RowMapper</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">rowMapper</span><span class="o">;</span>
    <span class="cm">/*在继承该抽象类的具体实现类中生效*/</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">JdbcTemplate</span> <span class="nf">getJdbcTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setJdbcTemplate</span><span class="o">(</span><span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getParameterizedType</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">getClass</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">cls</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">()</span> <span class="o">!=</span> <span class="nc">Base</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">cls</span> <span class="o">=</span> <span class="n">cls</span><span class="o">.</span><span class="na">getSuperclass</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nc">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">cls</span><span class="o">.</span><span class="na">getGenericSuperclass</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="k">instanceof</span> <span class="nc">ParameterizedType</span><span class="o">)</span> <span class="o">{</span><span class="c1">//判断是否为ParameterizedType，如果是，则表示泛型父类有实际类型参数。</span>
            <span class="nc">ParameterizedType</span> <span class="n">pt</span> <span class="o">=</span> <span class="o">(</span><span class="nc">ParameterizedType</span><span class="o">)</span> <span class="n">type</span><span class="o">;</span>
            <span class="nc">Type</span><span class="o">[]</span> <span class="n">types</span> <span class="o">=</span> <span class="n">pt</span><span class="o">.</span><span class="na">getActualTypeArguments</span><span class="o">();</span> <span class="c1">// 获取泛型的实际类型参数的数组。</span>
            <span class="nc">Type</span> <span class="n">firstType</span> <span class="o">=</span> <span class="n">types</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// 获取第一个泛型的实际类型参数</span>
            <span class="k">return</span> <span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;)</span> <span class="n">firstType</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"找不到泛型"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">Base</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 获取当前的泛型类型:</span>
        <span class="k">this</span><span class="o">.</span><span class="na">entityClass</span> <span class="o">=</span> <span class="n">getParameterizedType</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">table</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">entityClass</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">()</span> <span class="o">+</span> <span class="s">"s"</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">rowMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BeanPropertyRowMapper</span><span class="o">&lt;&gt;(</span><span class="n">entityClass</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">getJdbcTemplate</span><span class="o">().</span><span class="na">queryForObject</span><span class="o">(</span><span class="s">"SELECT * FROM "</span> <span class="o">+</span> <span class="n">table</span> <span class="o">+</span> <span class="s">" WHERE id = ?"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">rowMapper</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">pageIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">*</span> <span class="o">(</span><span class="n">pageIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">getJdbcTemplate</span><span class="o">().</span><span class="na">query</span><span class="o">(</span><span class="s">"SELECT * FROM "</span> <span class="o">+</span> <span class="n">table</span> <span class="o">+</span> <span class="s">" LIMIT ? OFFSET ?"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nc">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="n">limit</span><span class="o">,</span> <span class="n">offset</span> <span class="o">},</span>
                <span class="k">this</span><span class="o">.</span><span class="na">rowMapper</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">getJdbcTemplate</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="s">"DELETE FROM "</span> <span class="o">+</span> <span class="n">table</span> <span class="o">+</span> <span class="s">" WHERE id = ?"</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后继承即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="kd">extends</span> <span class="nc">Base</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">getJdbcTemplate</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">getJdbcTemplate</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">){</span>
        <span class="c1">// 传入SQL，SQL参数，返回更新的行数:</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">1</span> <span class="o">!=</span> <span class="n">getJdbcTemplate</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="s">"INSERT INTO users(id,email, password, name) VALUES(?,?,?,?)"</span>
                <span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span><span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"更新出错"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其他没有变化的类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">email</span><span class="o">,</span><span class="n">password</span><span class="o">,</span><span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;}</span><span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">name</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"小米"</span><span class="o">));</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">insertUser</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"三星"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[User{id=1, email='1@qq.com', password='123456', name='小米'}, User{id=2, email='2@qq.com', password='123456', name='三星'}]
User{id=1, email='1@qq.com', password='123456', name='小米'}
[User{id=2, email='2@qq.com', password='123456', name='三星'}]
</code></pre></div></div>

<h3 id="集成hibernate">集成Hibernate</h3>

<p>使用<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的时候，用得最多的方法就是<code class="language-plaintext highlighter-rouge">List&lt;T&gt; query(String, RowMapper, Object...)</code>。这个<code class="language-plaintext highlighter-rouge">RowMapper</code>的作用就是把<code class="language-plaintext highlighter-rouge">ResultSet</code>的一行记录映射为Java Bean。</p>

<p>这种把关系数据库的表记录映射为Java对象的过程就是ORM：Object-Relational Mapping。ORM既可以把记录转换成Java对象，也可以把Java对象转换为行记录。</p>

<p>使用<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>配合<code class="language-plaintext highlighter-rouge">RowMapper</code>可以看作是最原始的ORM。如果要实现更自动化的ORM，可以选择成熟的ORM框架，例如<a href="https://hibernate.org/">Hibernate</a>。</p>

<p>Hibernate作为ORM框架，可以替代<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，但Hibernate仍然需要JDBC驱动，需要引入JDBC驱动、连接池，以及Hibernate本身。在Maven中，需要加入以下依赖项：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-orm<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.persistence<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.persistence-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hibernate<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hibernate-core<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.6.15.Final<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.4.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.zaxxer<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>HikariCP<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>4.0.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">jdbc.properties</code>:</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 数据库文件名为testdb:
</span><span class="py">jdbc.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:mem:testdb</span>

<span class="c"># Hsqldb默认的用户名是sa，口令是空字符串:
</span><span class="py">jdbc.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">jdbc.password</span><span class="p">=</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">AppConfig</code>中，仍然需要引入JDBC配置文件创建<code class="language-plaintext highlighter-rouge">DataSource</code>，为了启用Hibernate，还要创建一个<code class="language-plaintext highlighter-rouge">LocalSessionFactoryBean</code>，之后还需要创建<code class="language-plaintext highlighter-rouge">HibernateTransactionManager</code>作为事务管理器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">LocalSessionFactoryBean</span> <span class="nf">createSessionFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.hbm2ddl.auto"</span><span class="o">,</span> <span class="s">"update"</span><span class="o">);</span> <span class="c1">// 生产环境不要使用</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.dialect"</span><span class="o">,</span> <span class="s">"org.hibernate.dialect.HSQLDialect"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.show_sql"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="kt">var</span> <span class="n">sessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="c1">// 扫描指定的package获取所有entity class:</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">);</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setHibernateProperties</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HibernateTransactionManager</span><span class="o">(</span><span class="n">sessionFactory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在Hibernate中，<code class="language-plaintext highlighter-rouge">Session</code>是封装了一个JDBC <code class="language-plaintext highlighter-rouge">Connection</code>的实例，而<code class="language-plaintext highlighter-rouge">SessionFactory</code>是封装了JDBC <code class="language-plaintext highlighter-rouge">DataSource</code>的实例，即<code class="language-plaintext highlighter-rouge">SessionFactory</code>持有连接池。</p>

<p>每次需要操作数据库的时候，<code class="language-plaintext highlighter-rouge">SessionFactory</code>创建一个新的<code class="language-plaintext highlighter-rouge">Session</code>，相当于从连接池获取到一个新的<code class="language-plaintext highlighter-rouge">Connection</code>。<code class="language-plaintext highlighter-rouge">SessionFactory</code>就是Hibernate提供的最核心的一个对象，<code class="language-plaintext highlighter-rouge">LocalSessionFactoryBean</code>是Spring提供的为了让我们方便创建<code class="language-plaintext highlighter-rouge">SessionFactory</code>的类。</p>

<p>创建<code class="language-plaintext highlighter-rouge">LocalSessionFactoryBean</code>的代码，首先用<code class="language-plaintext highlighter-rouge">Properties</code>持有Hibernate初始化<code class="language-plaintext highlighter-rouge">SessionFactory</code>时用到的所有设置，常用的设置请参考<a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#configurations">Hibernate文档</a>，这里只定义了3个设置：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">hibernate.hbm2ddl.auto=update</code>：表示在应用启动时自动创建或更新数据库表结构。这在开发和测试环境中非常有用，但在生产环境中应谨慎使用，以避免数据丢失或结构不一致的问题。</li>
  <li><code class="language-plaintext highlighter-rouge">hibernate.dialect=org.hibernate.dialect.HSQLDialect</code>：指示Hibernate使用的数据库是HSQLDB。Hibernate使用一种HQL的查询语句，它和SQL类似，但真正在“翻译”成SQL时，会根据设定的数据库“方言”来生成针对数据库优化的SQL；</li>
  <li><code class="language-plaintext highlighter-rouge">hibernate.show_sql=true</code>：让Hibernate打印执行的SQL，这对于调试非常有用，可以方便地看到Hibernate生成的SQL语句是否符合我们的预期。</li>
</ul>

<p>此外，<code class="language-plaintext highlighter-rouge">setPackagesToScan("com.aotmd.test")</code> 指示 Hibernate 扫描指定的包，以找到所有映射为数据库表的实体类。</p>

<p>而<code class="language-plaintext highlighter-rouge">HibernateTransactionManager</code> 是 Spring 提供的一个事务管理器，用于管理 Hibernate 的事务。</p>

<h4 id="将数据库表结构映射为java对象">将数据库表结构映射为Java对象</h4>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="k">user</span>
    <span class="n">id</span> <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">email</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">password</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">createdAt</span> <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="nv">`id`</span><span class="p">),</span>
    <span class="k">UNIQUE</span> <span class="k">KEY</span> <span class="nv">`email`</span> <span class="p">(</span><span class="nv">`email`</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">id</code>是自增主键，<code class="language-plaintext highlighter-rouge">email</code>、<code class="language-plaintext highlighter-rouge">password</code>、<code class="language-plaintext highlighter-rouge">name</code>是<code class="language-plaintext highlighter-rouge">VARCHAR</code>类型，<code class="language-plaintext highlighter-rouge">email</code>带唯一索引以确保唯一性，<code class="language-plaintext highlighter-rouge">createdAt</code>存储整型类型的时间戳。用JavaBean表示如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>还需要添加一些注解来告诉Hibernate如何把<code class="language-plaintext highlighter-rouge">User</code>类映射到表记录：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果一个JavaBean被用于映射，就标记一个<code class="language-plaintext highlighter-rouge">@Entity</code>。默认情况下，映射的表名是<code class="language-plaintext highlighter-rouge">user</code>，如果实际的表名不同，例如实际表名是<code class="language-plaintext highlighter-rouge">users</code>，可以追加一个<code class="language-plaintext highlighter-rouge">@Table(name="users")</code>表示。</p>

<p>每个属性到数据库列的映射用<code class="language-plaintext highlighter-rouge">@Column()</code>标识，<code class="language-plaintext highlighter-rouge">nullable</code>指示列是否允许为<code class="language-plaintext highlighter-rouge">NULL</code>，<code class="language-plaintext highlighter-rouge">updatable</code>指示该列是否允许被用在<code class="language-plaintext highlighter-rouge">UPDATE</code>语句，<code class="language-plaintext highlighter-rouge">length</code>指示<code class="language-plaintext highlighter-rouge">String</code>类型的列的长度（如果没有指定，默认是<code class="language-plaintext highlighter-rouge">255</code>）。</p>

<p>主键需要用<code class="language-plaintext highlighter-rouge">@Id</code>标识，<code class="language-plaintext highlighter-rouge">@GeneratedValue(strategy = GenerationType.IDENTITY)</code>表示指定主键生成策略为 <code class="language-plaintext highlighter-rouge">IDENTITY</code>。这种策略依赖于数据库自动生成主键值（通常用于自增列）。</p>

<p>主键<code class="language-plaintext highlighter-rouge">id</code>定义的类型不是<code class="language-plaintext highlighter-rouge">long</code>，而是<code class="language-plaintext highlighter-rouge">Long</code>。是因为Hibernate如果检测到主键为<code class="language-plaintext highlighter-rouge">null</code>，就<strong>不会</strong>在<code class="language-plaintext highlighter-rouge">INSERT</code>语句中指定主键的值，而是返回由数据库生成的自增值，否则，Hibernate认为我们的程序指定了主键的值，会在<code class="language-plaintext highlighter-rouge">INSERT</code>语句中直接列出。<code class="language-plaintext highlighter-rouge">long</code>型字段<strong>总是具有默认值<code class="language-plaintext highlighter-rouge">0</code></strong>，因此，每次插入的主键值总是0，导致除第一次外后续插入都将失败。</p>

<p><code class="language-plaintext highlighter-rouge">createdAt</code>虽然是整型，但没有使用<code class="language-plaintext highlighter-rouge">long</code>，而是<code class="language-plaintext highlighter-rouge">Long</code>，这是因为使用基本类型会导致findByExample查询会添加意外的条件，<strong>作为映射使用的JavaBean，所有属性都使用包装类型而不是基本类型。</strong></p>

<p>再定义一个<code class="language-plaintext highlighter-rouge">Book</code>类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它们定义的<code class="language-plaintext highlighter-rouge">id</code>、<code class="language-plaintext highlighter-rouge">createdAt</code>属性是一样的，这在数据库表结构的设计中很常见：对于每个表，通常会统一使用一种主键生成机制，并添加<code class="language-plaintext highlighter-rouge">createdAt</code>表示创建时间，<code class="language-plaintext highlighter-rouge">updatedAt</code>表示修改时间等通用字段。</p>

<p>不必在<code class="language-plaintext highlighter-rouge">User</code>和<code class="language-plaintext highlighter-rouge">Book</code>中重复定义这些通用字段，可以把它们提到一个抽象类中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MappedSuperclass</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">id</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Transient</span>
    <span class="kd">public</span> <span class="nc">ZonedDateTime</span> <span class="nf">getCreatedDateTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">createdAt</span><span class="o">).</span><span class="na">atZone</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PrePersist</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">preInsert</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对于<code class="language-plaintext highlighter-rouge">AbstractEntity</code>来说，要标注一个<code class="language-plaintext highlighter-rouge">@MappedSuperclass</code>表示它用于继承。表示这个类是一个 JPA 映射的超类（mapped superclass），不会直接映射到数据库表，但其属性会被继承到子类，并映射到子类所对应的数据库表中。</p>

<p><code class="language-plaintext highlighter-rouge">@Transient</code>表示该属性<strong>不需要持久化到数据库</strong>中，即在数据库表中不会有相应的列。返回一个“虚拟”的属性。因为<code class="language-plaintext highlighter-rouge">getCreatedDateTime()</code>是计算得出的属性，而不是从数据库表读出的值，因此必须要标注<code class="language-plaintext highlighter-rouge">@Transient</code>，否则Hibernate会尝试从数据库读取名为<code class="language-plaintext highlighter-rouge">createdDateTime</code>这个不存在的字段从而出错。</p>

<p><code class="language-plaintext highlighter-rouge">@PrePersist</code> 的方法，表示将一个JavaBean持久化到数据库之前（即执行INSERT语句），Hibernate会先执行该方法，这样就可以自动设置好<code class="language-plaintext highlighter-rouge">createdAt</code>属性。注意，@PrePersist 是 JPA 规范中提供的，老版本 Hibernate SessionFactory （5.1.0.Final）并不能使用。但是新版本的 HIbernate（大于等于 5.2.17） 是可以使用的。</p>

<p>有了<code class="language-plaintext highlighter-rouge">AbstractEntity</code>，就可以大幅简化<code class="language-plaintext highlighter-rouge">User</code>和<code class="language-plaintext highlighter-rouge">Book</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用Spring集成Hibernate，配合JPA注解，无需任何额外的XML配置。类似<code class="language-plaintext highlighter-rouge">User</code>、<code class="language-plaintext highlighter-rouge">Book</code>这样的用于ORM的Java Bean，通常称之为Entity Bean。</p>

<p>上面作用于<code class="language-plaintext highlighter-rouge">getter </code>方法的注解也可以放在字段上，而不仅仅是放在 <code class="language-plaintext highlighter-rouge">getter</code> 方法上。JPA 允许你在字段级别或属性级别（<code class="language-plaintext highlighter-rouge">getter</code> 方法）使用注解。选择在字段或 <code class="language-plaintext highlighter-rouge">getter</code> 方法上放置注解主要取决于你的设计习惯和代码风格。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">@Column</code> 注解用于指定持久化属性或字段在数据库中的映射列。下面是对 <code class="language-plaintext highlighter-rouge">@Column</code> 注解属性的详细解释：</p>

<p><strong><code class="language-plaintext highlighter-rouge">name</code></strong>：指定列的名称。默认情况下，列名与属性名相同。</p>

<p><strong><code class="language-plaintext highlighter-rouge">unique</code></strong>：指定列是否是唯一键。此属性是表级 <code class="language-plaintext highlighter-rouge">UniqueConstraint</code> 注解的快捷方式，当唯一键约束只对应单列时使用。</p>

<p><strong><code class="language-plaintext highlighter-rouge">nullable</code></strong>：指定列是否允许 <code class="language-plaintext highlighter-rouge">NULL</code> 值。示例：<code class="language-plaintext highlighter-rouge">@Column(nullable = false) private String name;</code>，这将使 <code class="language-plaintext highlighter-rouge">name</code> 列不允许 <code class="language-plaintext highlighter-rouge">NULL</code> 值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">insertable</code></strong>：指定列是否包含在生成的 SQL INSERT 语句中。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">insertable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="kd">private</span> <span class="nc">String</span> <span class="n">readOnlyField</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">readOnlyField</code> 列在 INSERT 语句中被<strong>忽略</strong>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">updatable</code></strong>：指定列是否包含在生成的 SQL UPDATE 语句中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="kd">private</span> <span class="nc">String</span> <span class="n">createdAt</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">createdAt</code> 列在 UPDATE 语句中被<strong>忽略</strong>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">columnDefinition</code></strong>：指定生成 DDL 时使用的 SQL 片段。默认为推断类型生成的 SQL。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">columnDefinition</span> <span class="o">=</span> <span class="s">"CLOB NOT NULL"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">String</span> <span class="n">description</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">description</code> 列在生成 DDL 时使用指定的 SQL 片段。<code class="language-plaintext highlighter-rouge">description</code> 列被定义为 CLOB 类型，并且不允许为空。</p>

<p><strong><code class="language-plaintext highlighter-rouge">table</code></strong>：指定包含该列的表名。如果未指定，则默认该列在主表中。</p>

<p><strong><code class="language-plaintext highlighter-rouge">length</code></strong>：指定列的长度。仅适用于字符串类型的列，默认为255。</p>

<p><strong><code class="language-plaintext highlighter-rouge">precision</code></strong>：指定精确数值（如小数）列的精度。仅适用于精确数值列。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">precision</span> <span class="o">=</span> <span class="mi">12</span><span class="o">,</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">2</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">cost</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">cost</code> 列的精度为 12，小数位数为 2。</p>

<p><strong><code class="language-plaintext highlighter-rouge">scale</code></strong>：指定精确数值列的小数位数。仅适用于精确数值列。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Column</span><span class="o">(</span><span class="n">precision</span> <span class="o">=</span> <span class="mi">12</span><span class="o">,</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">2</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">cost</span><span class="o">;</span>
</code></pre></div></div>

<p>这将使 <code class="language-plaintext highlighter-rouge">cost</code> 列的精度为 12，小数位数为 2。</p>

<p><code class="language-plaintext highlighter-rouge">@Column</code> 注解提供了详细的配置选项，允许你精确控制持久化属性与数据库列的映射方式。这些配置选项包括列名、唯一性、可空性、是否参与插入和更新、列的 SQL 定义、所在表名、字符串列的长度、数值列的精度和小数位数等。通过合理使用这些属性，你可以确保实体类与数据库表之间的映射符合业务需求。</p>

<h4 id="crud">CRUD</h4>

<p>如果对<code class="language-plaintext highlighter-rouge">user</code>表进行增删改查。因为使用了Hibernate，因此，实际上是对<code class="language-plaintext highlighter-rouge">User</code>这个JavaBean进行“增删改查”。编写一个<code class="language-plaintext highlighter-rouge">UserService</code>，注入<code class="language-plaintext highlighter-rouge">SessionFactory</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Hibernate 中大多数的数据修改操作（如插入、更新、删除）都需要在事务中执行。这是因为事务能够确保数据的一致性、隔离性、持久性和原子性，保证了数据库操作的可靠性和完整性。</p>

<p>在 Hibernate 中，如果没有启用事务，对于一些修改操作（如更新数据库记录），虽然可以正常执行，但实际上并不会立即将操作同步到数据库中。相反，它们将缓存在 Hibernate 的会话（Session）中，直到会话被关闭或事务被提交时才会同步到数据库中。如果没有事务管理，这可能导致数据不一致或丢失。</p>

<p>因此，当使用 Hibernate 时，强烈建议在数据修改操作中使用事务来确保数据的完整性和一致性。在 Spring 中，可以使用 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解轻松地管理事务，确保在方法执行期间自动开启、提交或回滚事务。</p>

<p>要启用事务，注意：配置事务管理器、启用事务注解<code class="language-plaintext highlighter-rouge">@EnableTransactionManagement</code>、使用<code class="language-plaintext highlighter-rouge">@Transactional</code>。</p>

<p><strong>Insert操作</strong></p>

<p>要持久化一个<code class="language-plaintext highlighter-rouge">User</code>实例，只需调用<code class="language-plaintext highlighter-rouge">persist()</code>方法。以<code class="language-plaintext highlighter-rouge">register()</code>方法为例，代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="c1">// 不要设置id，因为使用了自增主键</span>
    <span class="c1">// 保存到数据库:</span>
    <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="c1">// 现在已经自动获得了id:</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Delete操作</strong></p>

<p>删除一个<code class="language-plaintext highlighter-rouge">User</code>相当于从表中删除对应的记录。注意Hibernate总是用<code class="language-plaintext highlighter-rouge">id</code>来删除记录，因此，要正确设置<code class="language-plaintext highlighter-rouge">User</code>的<code class="language-plaintext highlighter-rouge">id</code>属性才能正常删除记录：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过主键删除记录时，一个常见的用法是先根据主键加载该记录，再删除。注意到当记录不存在时，<code class="language-plaintext highlighter-rouge">load()</code>返回<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p><strong>Update操作</strong></p>

<p>更新记录相当于先更新<code class="language-plaintext highlighter-rouge">User</code>的指定属性，然后调用<code class="language-plaintext highlighter-rouge">merge()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">merge</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在定义<code class="language-plaintext highlighter-rouge">User</code>时，对有的属性标注了<code class="language-plaintext highlighter-rouge">@Column(updatable=false)</code>。Hibernate在更新记录时，它只会把<code class="language-plaintext highlighter-rouge">@Column(updatable=true)</code>的属性加入到<code class="language-plaintext highlighter-rouge">UPDATE</code>语句中，这样可以提供一层额外的安全性，即如果不小心修改了<code class="language-plaintext highlighter-rouge">User</code>的<code class="language-plaintext highlighter-rouge">email</code>、<code class="language-plaintext highlighter-rouge">createdAt</code>等属性，执行<code class="language-plaintext highlighter-rouge">update()</code>时并不会更新对应的数据库列。</p>

<p><strong>Select操作</strong></p>

<p>编写的大部分方法都是各种各样的查询。根据<code class="language-plaintext highlighter-rouge">id</code>查询可以直接调用<code class="language-plaintext highlighter-rouge">load()</code>，如果要使用条件查询，例如，假设想执行以下查询：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">user</span> <span class="k">WHERE</span> <span class="n">email</span> <span class="o">=</span> <span class="o">?</span> <span class="k">AND</span> <span class="n">password</span> <span class="o">=</span> <span class="o">?</span>
</code></pre></div></div>

<p>一种常用的查询是直接编写Hibernate内置的HQL查询：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">()</span>
            <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"from User u where u.email = ?1 and u.password = ?2"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
            <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
            <span class="o">.</span><span class="na">list</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>和SQL相比，HQL使用类名和属性名，由Hibernate自动转换为实际的表名和列名。详细的HQL语法可以参考<a href="https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#query-language">Hibernate文档</a>。</p>

<p>除了可以直接传入HQL字符串外，Hibernate还可以使用一种<code class="language-plaintext highlighter-rouge">NamedQuery</code>，它给查询起个名字，然后保存在注解中。使用<code class="language-plaintext highlighter-rouge">NamedQuery</code>时，要先在<code class="language-plaintext highlighter-rouge">User</code>类标注，<code class="language-plaintext highlighter-rouge">NamedQueries</code> 注释可以应用于实体或映射的超类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NamedQueries</span><span class="o">(</span>
    <span class="nd">@NamedQuery</span><span class="o">(</span>
        <span class="c1">// 查询名称:</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
        <span class="c1">// 查询语句:</span>
        <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
    <span class="o">)</span>
<span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>它和直接传入HQL有点不同的是，占位符使用<code class="language-plaintext highlighter-rouge">:e</code>和<code class="language-plaintext highlighter-rouge">:pwd</code>。使用<code class="language-plaintext highlighter-rouge">NamedQuery</code>只需要引入查询名和参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">()</span>
        <span class="o">.</span><span class="na">createNamedQuery</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 创建NamedQuery</span>
        <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span> <span class="c1">// 绑定e参数</span>
        <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"pwd"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="c1">// 绑定pwd参数</span>
        <span class="o">.</span><span class="na">list</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>直接写HQL和使用<code class="language-plaintext highlighter-rouge">NamedQuery</code>各有优劣。前者可以在代码中直观地看到查询语句，后者可以在<code class="language-plaintext highlighter-rouge">User</code>类统一管理所有相关查询。</p>

<p>要写多个<code class="language-plaintext highlighter-rouge">@NamedQuery</code>，可以用<code class="language-plaintext highlighter-rouge">{}</code>包起来，如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NamedQueries</span><span class="o">({</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
            <span class="c1">// 查询名称:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
            <span class="c1">// 查询语句:</span>
            <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
        <span class="o">),</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
            <span class="c1">// 查询名称:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s">"selectByID"</span><span class="o">,</span>
            <span class="c1">// 查询语句:</span>
            <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.id = :id"</span>
        <span class="o">),</span>
    <span class="o">}</span>
<span class="o">)</span>
</code></pre></div></div>

<hr />

<p>编程式事务，原：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="c1">// 不要设置id，因为使用了自增主键</span>
    <span class="c1">// 保存到数据库:</span>
    <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="c1">// 现在已经自动获得了id:</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>修改后：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

    <span class="nc">Transaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">transaction</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">session</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">transaction</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>查询可以不用事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">()</span>
        <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"from User u where u.email = ?1 and u.password = ?2"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
        <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
        <span class="o">.</span><span class="na">list</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>完整实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.hibernate.Session</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.hibernate.SessionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.hibernate.Transaction</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.hibernate5.HibernateTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.hibernate5.LocalSessionFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.PlatformTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.Instant</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZoneId</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZonedDateTime</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>


<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">,</span><span class="s">"小米"</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">,</span><span class="s">"小明"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword2</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list2</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">deleteUser</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list3</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">updateUser</span><span class="o">(</span><span class="mi">2L</span><span class="o">,</span><span class="s">"小华"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list4</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list4</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">LocalSessionFactoryBean</span> <span class="nf">createSessionFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.hbm2ddl.auto"</span><span class="o">,</span> <span class="s">"update"</span><span class="o">);</span> <span class="c1">// 生产环境不要使用</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.dialect"</span><span class="o">,</span> <span class="s">"org.hibernate.dialect.HSQLDialect"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.show_sql"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="kt">var</span> <span class="n">sessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="c1">// 扫描指定的package获取所有entity class:</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">);</span>
        <span class="n">sessionFactoryBean</span><span class="o">.</span><span class="na">setHibernateProperties</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HibernateTransactionManager</span><span class="o">(</span><span class="n">sessionFactory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>



<span class="nd">@MappedSuperclass</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">id</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Transient</span>
    <span class="kd">public</span> <span class="nc">ZonedDateTime</span> <span class="nf">getCreatedDateTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">createdAt</span><span class="o">).</span><span class="na">atZone</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PrePersist</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">preInsert</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@NamedQueries</span><span class="o">({</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
                <span class="c1">// 查询名称:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
                <span class="c1">// 查询语句:</span>
                <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
        <span class="o">),</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
                <span class="c1">// 查询名称:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"selectByID"</span><span class="o">,</span>
                <span class="c1">// 查询语句:</span>
                <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.id = :id"</span>
        <span class="o">),</span>
    <span class="o">}</span>
<span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

        <span class="nc">Transaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">transaction</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
            <span class="c1">// 保存到数据库:</span>
            <span class="n">session</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
            <span class="c1">// 现在已经自动获得了id:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">transaction</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">merge</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">()</span>
                <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"from User u where u.email = ?1 and u.password = ?2"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
                <span class="o">.</span><span class="na">list</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword2</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">()</span>
                <span class="o">.</span><span class="na">createNamedQuery</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 创建NamedQuery</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span> <span class="c1">// 绑定e参数</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"pwd"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="c1">// 绑定pwd参数</span>
                <span class="o">.</span><span class="na">list</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h4 id="参数详细解释">参数详细解释</h4>

<p><code class="language-plaintext highlighter-rouge">sessionFactory.getCurrentSession()</code> 是 Hibernate 中的一个方法，用于获取当前线程关联的 <code class="language-plaintext highlighter-rouge">Session</code> 对象。在 Hibernate 中，<code class="language-plaintext highlighter-rouge">Session</code> 对象代表了与数据库的一次会话，它提供了对持久化对象的管理和数据库操作的支持。</p>

<p>通常情况下，通过 <code class="language-plaintext highlighter-rouge">sessionFactory.openSession()</code> 方法来获取一个新的 <code class="language-plaintext highlighter-rouge">Session</code> 对象。这种方式每次调用都会创建一个新的 <code class="language-plaintext highlighter-rouge">Session</code> 对象。然而，在某些情况下，尤其是在使用基于线程的事务管理器（如 <code class="language-plaintext highlighter-rouge">ThreadLocalSessionContext</code>）时，可能希望获取当前线程关联的 <code class="language-plaintext highlighter-rouge">Session</code> 对象，以确保所有的数据库操作都在同一个会话中执行。这时就可以使用 <code class="language-plaintext highlighter-rouge">sessionFactory.getCurrentSession()</code> 方法。</p>

<p>使用 <code class="language-plaintext highlighter-rouge">getCurrentSession()</code> 方法时，Hibernate 会检查当前线程是否已经存在与之关联的 <code class="language-plaintext highlighter-rouge">Session</code> 对象。如果存在，则返回该 <code class="language-plaintext highlighter-rouge">Session</code> 对象；如果不存在，则根据配置创建一个新的 <code class="language-plaintext highlighter-rouge">Session</code> 对象，并将其与当前线程关联起来。通过这种方式，确保在同一个线程内的所有数据库操作都使用同一个 <code class="language-plaintext highlighter-rouge">Session</code> 对象，从而避免线程安全问题和多个 <code class="language-plaintext highlighter-rouge">Session</code> 实例之间的数据不一致性。</p>

<p>需要注意的是，使用 <code class="language-plaintext highlighter-rouge">getCurrentSession()</code> 方法时，需要在 Hibernate 的配置文件（如 <code class="language-plaintext highlighter-rouge">hibernate.cfg.xml</code>）中配置 <code class="language-plaintext highlighter-rouge">hibernate.current_session_context_class</code> 参数，指定使用的线程上下文（如 <code class="language-plaintext highlighter-rouge">thread</code>、<code class="language-plaintext highlighter-rouge">jta</code> 等），以告诉 Hibernate 如何管理当前会话。</p>

<p>以下是 <code class="language-plaintext highlighter-rouge">SessionFactory</code> 接口中一些常用的方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">openSession()</code></strong>：打开一个新的会话（<code class="language-plaintext highlighter-rouge">Session</code>），每次调用都会创建一个新的 <code class="language-plaintext highlighter-rouge">Session</code> 实例。</p>

<p><strong><code class="language-plaintext highlighter-rouge">getCurrentSession()</code></strong>：获取当前线程关联的会话（<code class="language-plaintext highlighter-rouge">Session</code>），如果没有与当前线程关联的会话，则根据配置创建一个新的会话。需要注意，使用该方法时需要在 Hibernate 的配置文件中配置 <code class="language-plaintext highlighter-rouge">hibernate.current_session_context_class</code> 参数。</p>

<p><strong><code class="language-plaintext highlighter-rouge">openStatelessSession()</code></strong>：打开一个新的无状态会话（<code class="language-plaintext highlighter-rouge">StatelessSession</code>），无状态会话不会缓存任何持久化对象的状态信息。</p>

<p><strong><code class="language-plaintext highlighter-rouge">close()</code></strong>：关闭 <code class="language-plaintext highlighter-rouge">SessionFactory</code>，释放资源。</p>

<hr />

<p><strong>Session</strong></p>

<p><code class="language-plaintext highlighter-rouge">Session</code> 是 Hibernate 中用于与数据库进行交互的核心接口，它提供了许多方法来执行数据库操作、管理持久化对象和控制事务等。以下是 <code class="language-plaintext highlighter-rouge">Session</code> 接口中一些常用的方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">save(Object entity)</code></strong>：保存或更新给定的实体对象到数据库中。如果对象是新创建的，则插入数据；如果对象已经存在于数据库中，则更新数据。</p>

<p><strong><code class="language-plaintext highlighter-rouge">persist(Object entity)</code></strong>：将给定的实体对象持久化到数据库中。与 <code class="language-plaintext highlighter-rouge">save()</code> 方法类似，但 <code class="language-plaintext highlighter-rouge">persist()</code> 方法不返回持久化对象的标识符，也不会立即执行 INSERT 操作。</p>

<p><strong><code class="language-plaintext highlighter-rouge">update(Object entity)</code></strong>：更新给定的实体对象到数据库中，不返回任何值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">merge(Object entity)</code></strong> ：是 Hibernate 中用于将游离状态（detached）的实体对象合并到持久化状态（persistent）的方法之一。它的作用是将传入的实体对象的状态与数据库中的对应实体对象的状态进行合并，并返回持久化状态的实体对象。如果数据库中<strong>不存在</strong>对应的实体对象，则会<strong>创建一个新的实体对象</strong>，并将传入的实体对象的状态复制到新创建的实体对象上，对该副本的<strong>任何更改将在数据库中反映出来</strong>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">delete(Object entity)</code></strong>：从数据库中删除给定的实体对象。</p>

<p><strong><code class="language-plaintext highlighter-rouge">get(Class clazz, Serializable id)</code></strong>：根据实体类和主键获取对象。如果对象不存在，则返回 null。</p>

<p><strong><code class="language-plaintext highlighter-rouge">byId(Class&lt;T&gt; entityClass)</code></strong> ：该方法返回一个 <code class="language-plaintext highlighter-rouge">IdentifierLoadAccess&lt;T&gt;</code> 实例，用于通过主键检索指定的实体类型，<code class="language-plaintext highlighter-rouge">entityClass</code>：要检索的实体类型的 <code class="language-plaintext highlighter-rouge">Class</code> 对象，配合<code class="language-plaintext highlighter-rouge">T load(Serializable id)</code>得到类似下面的<code class="language-plaintext highlighter-rouge">load(Class clazz, Serializable id)</code>的效果。</p>

<p><strong><code class="language-plaintext highlighter-rouge">load(Class clazz, Serializable id)</code></strong>：根据实体类和主键获取对象。如果对象不存在，则抛出异常。</p>

<p><strong><code class="language-plaintext highlighter-rouge">createQuery(String hql)</code></strong>：创建一个查询对象，用于执行 HQL（Hibernate Query Language）查询。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">hql</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">createSQLQuery(String sql)</code></strong>：创建一个原生 SQL 查询对象，用于执行 SQL 查询。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SQLQuery</span> <span class="n">sqlQuery</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createSQLQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">beginTransaction()</code></strong>：开启一个新的事务。</p>

<p><strong><code class="language-plaintext highlighter-rouge">close()</code></strong>：关闭当前会话，释放资源。</p>

<p>这些是 <code class="language-plaintext highlighter-rouge">Session</code> 接口中的一些常用方法，可以根据具体需求选择使用。在实际开发中，通常会使用这些方法来执行数据库操作、管理持久化对象和控制事务等。</p>

<hr />

<p><strong>Transaction</strong></p>

<p>在 Hibernate 中，事务管理通常是通过 <code class="language-plaintext highlighter-rouge">Transaction</code> 接口来完成的。<code class="language-plaintext highlighter-rouge">Transaction</code> 接口提供了开始、提交、回滚等操作，用于管理数据库事务。以下是 <code class="language-plaintext highlighter-rouge">Transaction</code> 接口中一些常用的方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">begin()</code></strong>：开启一个新的事务。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Transaction</span> <span class="n">tx</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">commit()</code></strong>：提交当前事务，将事务中的修改保存到数据库。</p>

<p><strong><code class="language-plaintext highlighter-rouge">rollback()</code></strong>：回滚当前事务，撤销事务中的修改。</p>

<p><strong><code class="language-plaintext highlighter-rouge">isActive()</code></strong>：检查事务是否处于活动状态（即已经开始但尚未提交或回滚）。</p>

<p><strong><code class="language-plaintext highlighter-rouge">setTimeout(int seconds)</code></strong>：设置事务的超时时间，单位为秒。</p>

<p><strong><code class="language-plaintext highlighter-rouge">getStatus()</code></strong>：获取事务的状态，返回一个枚举值表示事务的状态（如活动、已提交、已回滚等）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TransactionStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">tx</span><span class="o">.</span><span class="na">getStatus</span><span class="o">();</span>
</code></pre></div></div>

<p>这些方法可以在代码中方便地管理事务的生命周期，确保数据库操作的一致性和可靠性。通常情况下，会通过调用 <code class="language-plaintext highlighter-rouge">beginTransaction()</code> 开启一个新的事务，然后执行数据库操作，最后通过调用 <code class="language-plaintext highlighter-rouge">commit()</code> 提交事务或 <code class="language-plaintext highlighter-rouge">rollback()</code> 回滚事务。</p>

<hr />

<p><strong>Query</strong></p>

<p><code class="language-plaintext highlighter-rouge">org.hibernate.query.Query</code> 接口继承了 <code class="language-plaintext highlighter-rouge">TypedQuery&lt;R&gt;</code>, <code class="language-plaintext highlighter-rouge">org.hibernate.Query&lt;R&gt;</code>, 和 <code class="language-plaintext highlighter-rouge">CommonQueryContract</code> 接口，并提供了一系列用于执行查询操作的方法。以下是一些常用方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameter(String name, Object value)</code></strong>:为查询设置命名参数和对应的值。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameter(int position, Object value)</code></strong>:为查询设置位置参数和对应的值。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameter(String name, Object value, TemporalType temporalType)</code></strong>:为查询设置命名参数和对应的值，并指定参数类型为日期时间。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameter(int position, Object value, TemporalType temporalType)</code></strong>:为查询设置位置参数和对应的值，并指定参数类型为日期时间。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setFirstResult(int startPosition)</code></strong>:设置结果集的起始位置。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setMaxResults(int maxResult)</code></strong>:设置返回结果的最大数量。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getResultList()</code></strong>:执行查询并返回查询结果列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getSingleResult()</code></strong>:执行查询并返回单个结果。如果结果不唯一或查询结果为空，则抛出异常。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">list()</code></strong>:与 <code class="language-plaintext highlighter-rouge">getResultList()</code> 方法功能相同，也是执行查询并返回结果列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">uniqueResult()</code></strong>:与 <code class="language-plaintext highlighter-rouge">getSingleResult()</code> 方法功能相同，也是执行查询并返回单个结果。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameterList(String name, Collection values)</code></strong>:为查询设置命名参数和对应的值列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameterList(String name, Object[] values)</code></strong>:为查询设置命名参数和对应的值数组。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameterList(int position, Collection values)</code></strong>:为查询设置位置参数和对应的值列表。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setParameterList(int position, Object[] values)</code></strong>:为查询设置位置参数和对应的值数组。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setFlushMode(FlushModeType flushMode)</code></strong>:设置查询的刷新模式。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setReadOnly(boolean readOnly)</code></strong>:设置查询是否为只读。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">unwrap(Class&lt;T&gt; type)</code></strong>:将查询对象转换为指定类型的对象。</li>
</ul>

<p>这些方法覆盖了常用的查询操作，可以根据具体的需求选择使用。</p>

<hr />

<p><strong>扩展：</strong></p>

<p>如果需要将多个实体类映射到数据库，而这多个实体类继承自同一个抽象类或者接口，而查询或者别的操作又需要使用这种多态性，可以参考<a href="https://thorben-janssen.com/complete-guide-inheritance-strategies-jpa-hibernate/">这篇文章</a>。</p>

<p>如果实体类中有一个字段是一个集合，可以参考<a href="https://thorben-janssen.com/ultimate-guide-association-mappings-jpa-hibernate/">这篇文章</a>。里面讨论了一对一、一对多、多对多、多对一等各种情况。</p>

<p>使用Hibernate时，有时候希望在一个实体中嵌入另一个对象，比如在一个人员实体中嵌入地址对象。这时，可以使用<code class="language-plaintext highlighter-rouge">@Embeddable</code>和<code class="language-plaintext highlighter-rouge">@Embedded</code>注解来实现。</p>

<p>首先，定义一个嵌入式组件，比如地址对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.persistence.Embeddable</span><span class="o">;</span>

<span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">country</span><span class="o">;</span>

    <span class="c1">// 构造函数、getter和setter方法</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里，<code class="language-plaintext highlighter-rouge">Address</code>被标记为<code class="language-plaintext highlighter-rouge">@Embeddable</code>，表示它是一个值对象，可以被嵌入到其他实体中。</p>

<p>接下来，定义<code class="language-plaintext highlighter-rouge">Person</code>实体：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="nd">@Embedded</span>
    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">address</span><span class="o">;</span>

    <span class="c1">// 构造函数、getter和setter方法</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个类对应的表结构为：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">Person</span> <span class="p">(</span>
    <span class="n">id</span> <span class="nb">BIGINT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">address_street</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">address_city</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">address_country</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>在这里，在<code class="language-plaintext highlighter-rouge">address</code>字段上使用了<code class="language-plaintext highlighter-rouge">@Embedded</code>注解，表示它是一个嵌入式组件。</p>

<p>现在，当你持久化一个<code class="language-plaintext highlighter-rouge">Person</code>实体时，Hibernate会自动持久化嵌入的<code class="language-plaintext highlighter-rouge">Address</code>对象。以下是一个示例用法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个新的Person，并设置地址信息</span>
<span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">();</span>
<span class="n">person</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"张三"</span><span class="o">);</span>

<span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">();</span>
<span class="n">address</span><span class="o">.</span><span class="na">setStreet</span><span class="o">(</span><span class="s">"长江路123号"</span><span class="o">);</span>
<span class="n">address</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="s">"上海"</span><span class="o">);</span>
<span class="n">address</span><span class="o">.</span><span class="na">setCountry</span><span class="o">(</span><span class="s">"中国"</span><span class="o">);</span>

<span class="n">person</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>

<span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
</code></pre></div></div>

<p>这将同时持久化<code class="language-plaintext highlighter-rouge">Person</code>和其嵌入的<code class="language-plaintext highlighter-rouge">Address</code>对象到数据库中。</p>

<p>注意，<code class="language-plaintext highlighter-rouge">Address</code>对象中的每个属性都被映射到了<code class="language-plaintext highlighter-rouge">Person</code>表中的相应字段，且字段名遵循了默认的命名规则：<code class="language-plaintext highlighter-rouge">address_</code> + <code class="language-plaintext highlighter-rouge">属性名</code>。这是因为嵌入式组件在数据库中被表示为<code class="language-plaintext highlighter-rouge">Person</code>表的一部分，而不是单独的表。</p>

<p>如果要重新命名，可以这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Embeddable</span><span class="o">;</span>

<span class="nd">@Embeddable</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"street"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"city"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"country"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">country</span><span class="o">;</span>

    <span class="c1">// 构造函数、getter和setter方法</span>
<span class="o">}</span>

</code></pre></div></div>

<p>这样，<code class="language-plaintext highlighter-rouge">Person</code>类对应的表结构如下所示：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">Person</span> <span class="p">(</span>
    <span class="n">id</span> <span class="nb">BIGINT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">name</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">street</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">city</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
    <span class="n">country</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>在这个表结构中：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">id</code>、<code class="language-plaintext highlighter-rouge">name</code>字段与<code class="language-plaintext highlighter-rouge">Person</code>类中的属性对应，无变化。</li>
  <li><code class="language-plaintext highlighter-rouge">street</code>、<code class="language-plaintext highlighter-rouge">city</code>、<code class="language-plaintext highlighter-rouge">country</code>字段对应于<code class="language-plaintext highlighter-rouge">Address</code>对象中的属性，通过<code class="language-plaintext highlighter-rouge">@Column</code>注解指定了列名。这些字段直接位于<code class="language-plaintext highlighter-rouge">Person</code>表中，而不是<code class="language-plaintext highlighter-rouge">Address</code>表，因为<code class="language-plaintext highlighter-rouge">Address</code>对象是嵌入式的，不是单独的实体。</li>
</ul>

<p><a href="https://memorynotfound.com/hibernate-embeddable-embedded-annotation-example/">详细参考</a>。</p>

<h4 id="jpa">JPA</h4>

<p>JPA：Java Persistence API，JPA就是JavaEE的一个ORM标准，它的实现其实和Hibernate没啥本质区别，但是用户如果使用JPA，那么引用的就是<code class="language-plaintext highlighter-rouge">javax.persistence</code>这个“标准”包，而不是<code class="language-plaintext highlighter-rouge">org.hibernate</code>这样的第三方包。因为JPA只是接口，所以，还需要选择一个实现产品，跟JDBC接口和MySQL驱动一个道理。</p>

<p>使用JPA时也完全可以选择Hibernate作为底层实现，但也可以选择其它的JPA提供方，比如<a href="https://www.eclipse.org/eclipselink/">EclipseLink</a>。Spring内置了JPA的集成，并支持选择Hibernate或EclipseLink作为实现。若要以Hibernate作为JPA实现，则和使用Hibernate一样，只需要引入同样的依赖。Hibernate既提供了它自己的接口，也提供了JPA接口，用JPA接口就相当于通过JPA操作Hibernate。</p>

<p>使用Hibernate时，需要创建一个<code class="language-plaintext highlighter-rouge">LocalSessionFactoryBean</code>，并让它再自动创建一个<code class="language-plaintext highlighter-rouge">SessionFactory</code>。使用JPA也是类似的，也创建一个<code class="language-plaintext highlighter-rouge">LocalContainerEntityManagerFactoryBean</code>，并让它再自动创建一个<code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">LocalContainerEntityManagerFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">emFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalContainerEntityManagerFactoryBean</span><span class="o">();</span>
    <span class="c1">// 注入DataSource:</span>
    <span class="n">emFactory</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="c1">// 扫描指定的package获取所有entity class:</span>
    <span class="n">emFactory</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="nc">AbstractEntity</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getPackageName</span><span class="o">());</span>
    <span class="c1">// 使用Hibernate作为JPA实现:</span>
    <span class="n">emFactory</span><span class="o">.</span><span class="na">setJpaVendorAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">HibernateJpaVendorAdapter</span><span class="o">());</span>
    <span class="c1">// 其他配置项:</span>
    <span class="kt">var</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.hbm2ddl.auto"</span><span class="o">,</span> <span class="s">"update"</span><span class="o">);</span> <span class="c1">// 生产环境不要使用</span>
    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.dialect"</span><span class="o">,</span> <span class="s">"org.hibernate.dialect.HSQLDialect"</span><span class="o">);</span>
    <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.show_sql"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
    <span class="n">emFactory</span><span class="o">.</span><span class="na">setJpaProperties</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">emFactory</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>除了需要注入<code class="language-plaintext highlighter-rouge">DataSource</code>和设定自动扫描的<code class="language-plaintext highlighter-rouge">package</code>外，还需要指定JPA的提供商，这里使用Spring提供的一个<code class="language-plaintext highlighter-rouge">HibernateJpaVendorAdapter</code>，最后，针对Hibernate自己需要的配置，以<code class="language-plaintext highlighter-rouge">Properties</code>的形式注入。</p>

<p>还需要实例化一个<code class="language-plaintext highlighter-rouge">JpaTransactionManager</code>，以实现声明式事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">EntityManagerFactory</span> <span class="n">entityManagerFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">JpaTransactionManager</span><span class="o">(</span><span class="n">entityManagerFactory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，就完成了JPA的全部初始化工作。使用Spring+Hibernate作为JPA实现，无需任何配置文件。</p>

<p>所有Entity Bean的配置和上一节完全相同，全部采用Annotation标注。现在只需关心具体的业务类如何通过JPA接口操作数据库。</p>

<p>还是以<code class="language-plaintext highlighter-rouge">UserService</code>为例，需要注入一个<code class="language-plaintext highlighter-rouge">EntityManager</code>，但是不要使用<code class="language-plaintext highlighter-rouge">@Autowired</code>，而是<code class="language-plaintext highlighter-rouge">@PersistenceContext</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@PersistenceContext</span>
    <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JDBC、Hibernate和JPA提供的接口，实际上，它们的关系如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">JDBC</th>
      <th style="text-align: left">Hibernate</th>
      <th style="text-align: left">JPA</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DataSource</td>
      <td style="text-align: left">SessionFactory</td>
      <td style="text-align: left">EntityManagerFactory</td>
    </tr>
    <tr>
      <td style="text-align: left">Connection</td>
      <td style="text-align: left">Session</td>
      <td style="text-align: left">EntityManager</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">SessionFactory</code>和<code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>相当于<code class="language-plaintext highlighter-rouge">DataSource</code>，<code class="language-plaintext highlighter-rouge">Session</code>和<code class="language-plaintext highlighter-rouge">EntityManager</code>相当于<code class="language-plaintext highlighter-rouge">Connection</code>。每次需要访问数据库的时候，需要获取新的<code class="language-plaintext highlighter-rouge">Session</code>和<code class="language-plaintext highlighter-rouge">EntityManager</code>，用完后再关闭。</p>

<p><code class="language-plaintext highlighter-rouge">UserService</code>注入的不是<code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>，而是<code class="language-plaintext highlighter-rouge">EntityManager</code>，并且标注了<code class="language-plaintext highlighter-rouge">@PersistenceContext</code>。难道使用JPA可以允许多线程操作同一个<code class="language-plaintext highlighter-rouge">EntityManager</code>？</p>

<p>实际上这里注入的并不是真正的<code class="language-plaintext highlighter-rouge">EntityManager</code>，而是一个<code class="language-plaintext highlighter-rouge">EntityManager</code>的代理类，相当于：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EntityManagerProxy</span> <span class="kd">implements</span> <span class="nc">EntityManager</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">EntityManagerFactory</span> <span class="n">emf</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring遇到标注了<code class="language-plaintext highlighter-rouge">@PersistenceContext</code>的<code class="language-plaintext highlighter-rouge">EntityManager</code>会自动注入代理，该代理会在必要的时候自动打开<code class="language-plaintext highlighter-rouge">EntityManager</code>。换句话说，多线程引用的<code class="language-plaintext highlighter-rouge">EntityManager</code>虽然是同一个代理类，但该代理类内部针对不同线程会创建不同的<code class="language-plaintext highlighter-rouge">EntityManager</code>实例。</p>

<p>因此，标注了<code class="language-plaintext highlighter-rouge">@PersistenceContext</code>的<code class="language-plaintext highlighter-rouge">EntityManager</code>可以被多线程安全地共享。</p>

<p>因此，在<code class="language-plaintext highlighter-rouge">UserService</code>的每个业务方法里，直接使用<code class="language-plaintext highlighter-rouge">EntityManager</code>就很方便。以主键查询为例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</code></pre></div></div>

<p>对比Hibernate：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">byId</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</code></pre></div></div>

<p>与HQL查询类似，JPA使用JPQL查询，它的语法和HQL基本差不多：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">em</span>
            <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"SELECT u from User u where u.email = :e and u.password = :p"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
            <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"p"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
            <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对比Hibernate，不同点在于：不需要<code class="language-plaintext highlighter-rouge">getCurrentSession()</code>，占位符名称不同，<code class="language-plaintext highlighter-rouge">list()</code>变为<code class="language-plaintext highlighter-rouge">getResultList()</code>。</p>

<p>同样的，JPA也支持<code class="language-plaintext highlighter-rouge">NamedQuery</code>，即先给查询起个名字，再按名字创建查询：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword2</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">em</span>
            <span class="o">.</span><span class="na">createNamedQuery</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 创建NamedQuery</span>
            <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span> <span class="c1">// 绑定e参数</span>
            <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"pwd"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="c1">// 绑定pwd参数</span>
            <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">NamedQuery</code>通过注解标注在<code class="language-plaintext highlighter-rouge">User</code>类上，它的定义和上一节的<code class="language-plaintext highlighter-rouge">User</code>类一样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NamedQueries</span><span class="o">(</span>
    <span class="nd">@NamedQuery</span><span class="o">(</span>
        <span class="c1">// 查询名称:</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
        <span class="c1">// 查询语句:</span>
        <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
    <span class="o">)</span>
<span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对比Hibernate，不同点在于：不需要<code class="language-plaintext highlighter-rouge">getCurrentSession()</code>，<code class="language-plaintext highlighter-rouge">list()</code>变为<code class="language-plaintext highlighter-rouge">getResultList()</code>。</p>

<p>对数据库进行增删改的操作，可以分别使用<code class="language-plaintext highlighter-rouge">persist()</code>、<code class="language-plaintext highlighter-rouge">remove()</code>和<code class="language-plaintext highlighter-rouge">merge()</code>方法，参数均为Entity Bean本身，使用非常简单，基本上都是去掉<code class="language-plaintext highlighter-rouge">getCurrentSession()</code>就行。</p>

<p>实际上，<code class="language-plaintext highlighter-rouge">EntityManager</code>接口和Hibernate的<code class="language-plaintext highlighter-rouge">Session</code>接口在方法上有很多重叠之处，因为<code class="language-plaintext highlighter-rouge">EntityManager</code>接口是JPA的一部分，而Hibernate<strong>实现</strong>了JPA规范。即：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Session</span> <span class="kd">extends</span> <span class="nc">SharedSessionContract</span><span class="o">,</span> <span class="nc">EntityManager</span><span class="o">,</span> <span class="nc">HibernateEntityManager</span><span class="o">,</span> <span class="nc">AutoCloseable</span><span class="o">,</span> <span class="nc">Closeable</span> <span class="o">{}</span>
</code></pre></div></div>

<p>一些常见的方法，无论是在<code class="language-plaintext highlighter-rouge">EntityManager</code>接口还是Hibernate的<code class="language-plaintext highlighter-rouge">Session</code>接口中都可以找到，包括<code class="language-plaintext highlighter-rouge">persist()</code>、<code class="language-plaintext highlighter-rouge">merge()</code>、<code class="language-plaintext highlighter-rouge">refresh()</code>、<code class="language-plaintext highlighter-rouge">find()</code>、<code class="language-plaintext highlighter-rouge">remove()</code>等。这些方法在JPA规范中定义，并且Hibernate作为JPA的实现，也提供了相应的实现。</p>

<p>对于之前提到的编程式事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

    <span class="nc">Transaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">transaction</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">session</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">transaction</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>改写一下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

    <span class="nc">EntityTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span>  <span class="o">{</span>
        <span class="n">transaction</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">transaction</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行后会报错：不允许在共享 <code class="language-plaintext highlighter-rouge">EntityManager</code> 上创建事务 - 改用 Spring 事务或 EJB CMT。</p>

<p>改为Spring事务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="kd">private</span>  <span class="nc">PlatformTransactionManager</span> <span class="n">transactionManager</span><span class="o">;</span>

<span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

    <span class="nc">TransactionDefinition</span> <span class="n">def</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">();</span>
    <span class="nc">TransactionStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">transactionManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="n">def</span><span class="o">);</span>
    <span class="k">try</span>  <span class="o">{</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">transactionManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">transactionManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>正常。</p>

<p>完整实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.jpa.JpaTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.PlatformTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.TransactionDefinition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.TransactionStatus</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.support.DefaultTransactionDefinition</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.Instant</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZoneId</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.time.ZonedDateTime</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">,</span><span class="s">"小米"</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span><span class="s">"123456"</span><span class="o">,</span><span class="s">"小明"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword2</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list2</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">deleteUser</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list3</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">updateUser</span><span class="o">(</span><span class="mi">2L</span><span class="o">,</span><span class="s">"小华"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list4</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">selectByEmailAndByPassword</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list4</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">LocalContainerEntityManagerFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">emFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalContainerEntityManagerFactoryBean</span><span class="o">();</span>
        <span class="c1">// 注入DataSource:</span>
        <span class="n">emFactory</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="c1">// 扫描指定的package获取所有entity class:</span>
        <span class="n">emFactory</span><span class="o">.</span><span class="na">setPackagesToScan</span><span class="o">(</span><span class="nc">AbstractEntity</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getPackageName</span><span class="o">());</span>
        <span class="c1">// 使用Hibernate作为JPA实现:</span>
        <span class="n">emFactory</span><span class="o">.</span><span class="na">setJpaVendorAdapter</span><span class="o">(</span><span class="k">new</span> <span class="nc">HibernateJpaVendorAdapter</span><span class="o">());</span>
        <span class="c1">// 其他配置项:</span>
        <span class="kt">var</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.hbm2ddl.auto"</span><span class="o">,</span> <span class="s">"update"</span><span class="o">);</span> <span class="c1">// 生产环境不要使用</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.dialect"</span><span class="o">,</span> <span class="s">"org.hibernate.dialect.HSQLDialect"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"hibernate.show_sql"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">emFactory</span><span class="o">.</span><span class="na">setJpaProperties</span><span class="o">(</span><span class="n">props</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">emFactory</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span> <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">EntityManagerFactory</span> <span class="n">entityManagerFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JpaTransactionManager</span><span class="o">(</span><span class="n">entityManagerFactory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@MappedSuperclass</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractEntity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">id</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">updatable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Transient</span>
    <span class="kd">public</span> <span class="nc">ZonedDateTime</span> <span class="nf">getCreatedDateTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">createdAt</span><span class="o">).</span><span class="na">atZone</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PrePersist</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">preInsert</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@NamedQueries</span><span class="o">({</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
                <span class="c1">// 查询名称:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"login"</span><span class="o">,</span>
                <span class="c1">// 查询语句:</span>
                <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.email = :e AND u.password = :pwd"</span>
        <span class="o">),</span>
        <span class="nd">@NamedQuery</span><span class="o">(</span>
                <span class="c1">// 查询名称:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">"selectByID"</span><span class="o">,</span>
                <span class="c1">// 查询语句:</span>
                <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT u FROM User u WHERE u.id = :id"</span>
        <span class="o">),</span>
    <span class="o">}</span>
<span class="o">)</span>
<span class="nd">@Entity</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">AbstractEntity</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="nd">@PersistenceContext</span>
    <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span>  <span class="nc">PlatformTransactionManager</span> <span class="n">transactionManager</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>

        <span class="nc">TransactionDefinition</span> <span class="n">def</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">();</span>
        <span class="nc">TransactionStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">transactionManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="n">def</span><span class="o">);</span>
        <span class="k">try</span>  <span class="o">{</span>
            <span class="c1">// 保存到数据库:</span>
            <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="n">transactionManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
            <span class="c1">// 现在已经自动获得了id:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">transactionManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">id</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">id</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">em</span>
                <span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"SELECT u from User u where u.email = :e and u.password = :p"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">).</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"p"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">selectByEmailAndByPassword2</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">em</span>
                <span class="o">.</span><span class="na">createNamedQuery</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 创建NamedQuery</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"e"</span><span class="o">,</span> <span class="n">email</span><span class="o">)</span> <span class="c1">// 绑定e参数</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"pwd"</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span> <span class="c1">// 绑定pwd参数</span>
                <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="集成mybatis">集成MyBatis</h3>

<p>使用Hibernate或JPA操作数据库时，这类ORM主要工作就是把<code class="language-plaintext highlighter-rouge">ResultSet</code>的每一行变成Java Bean，或者把Java Bean自动转换到<code class="language-plaintext highlighter-rouge">INSERT</code>或<code class="language-plaintext highlighter-rouge">UPDATE</code>语句的参数中，从而实现ORM。ORM框架之所以知道如何把行数据映射到Java Bean，是因为在Java Bean的属性上给了足够的注解作为元数据，ORM框架获取Java Bean的注解后，就知道如何进行双向映射。</p>

<p>ORM框架使用代理模式跟踪Java Bean的修改，以便在<code class="language-plaintext highlighter-rouge">update()</code>操作中更新必要的属性。从ORM框架读取的<code class="language-plaintext highlighter-rouge">User</code>实例实际上并不是<code class="language-plaintext highlighter-rouge">User</code>类，而是代理类，代理类继承自<code class="language-plaintext highlighter-rouge">User</code>类，但针对每个<code class="language-plaintext highlighter-rouge">setter</code>方法做了覆写，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserProxy</span> <span class="kd">extends</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">_isNameChanged</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">_isNameChanged</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，代理类可以跟踪到每个属性的变化。</p>

<p>针对一对多或多对一关系时，代理类可以直接通过<code class="language-plaintext highlighter-rouge">getter</code>方法查询数据库：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserProxy</span> <span class="kd">extends</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nc">Session</span> <span class="n">_session</span><span class="o">;</span>
    <span class="kt">boolean</span> <span class="n">_isNameChanged</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">_isNameChanged</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 获取User对象关联的Address对象:
     */</span>
    <span class="kd">public</span> <span class="nc">Address</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Query</span> <span class="n">q</span> <span class="o">=</span> <span class="n">_session</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"from Address where userId = :userId"</span><span class="o">);</span>
        <span class="n">q</span><span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"userId"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">list</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">list</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>为了实现这样的查询，<code class="language-plaintext highlighter-rouge">UserProxy</code>必须保存Hibernate的当前<code class="language-plaintext highlighter-rouge">Session</code>。但是，当事务提交后，<code class="language-plaintext highlighter-rouge">Session</code>自动关闭，此时再获取<code class="language-plaintext highlighter-rouge">getAddress()</code>将无法访问数据库，或者获取的不是事务一致的数据。因此，ORM框架总是引入了Attached/Detached状态，表示当前此Java Bean到底是在Session的范围内，还是脱离了Session变成了一个“游离”对象。很多初学者无法正确理解状态变化和事务边界，就会造成大量的<code class="language-plaintext highlighter-rouge">PersistentObjectException</code>异常。这种隐式状态使得普通Java Bean的生命周期变得复杂。</p>

<p>此外，Hibernate和JPA为了实现兼容多种数据库，使用HQL或JPQL查询，经过一道转换，变成特定数据库的SQL，理论上这样可以做到无缝切换数据库，但这一层自动转换除了少许的性能开销外，给SQL级别的优化带来了麻烦。</p>

<p>最后，ORM框架通常提供了缓存，并且还分为一级缓存和二级缓存。一级缓存是指在一个Session范围内的缓存，常见的情景是根据主键查询时，两次查询可以返回同一实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="n">user1</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">123</span><span class="o">);</span>
<span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">123</span><span class="o">);</span>
</code></pre></div></div>

<p>二级缓存是指跨Session的缓存，一般默认关闭，需要手动配置。二级缓存极大的增加了数据的不一致性，原因在于SQL非常灵活，常常会导致意外的更新。例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 线程1读取:</span>
<span class="nc">User</span> <span class="n">user1</span> <span class="o">=</span> <span class="n">session1</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">123</span><span class="o">);</span>
<span class="o">...</span>
<span class="c1">// 一段时间后，线程2读取:</span>
<span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">session2</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">123</span><span class="o">);</span>
</code></pre></div></div>

<p>当二级缓存生效的时候，两个线程读取的<code class="language-plaintext highlighter-rouge">User</code>实例是一样的，但是，数据库对应的行记录完全可能被修改，例如：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 给老用户增加100积分:</span>
<span class="k">UPDATE</span> <span class="n">users</span> <span class="k">SET</span> <span class="n">bonus</span> <span class="o">=</span> <span class="n">bonus</span> <span class="o">+</span> <span class="mi">100</span> <span class="k">WHERE</span> <span class="n">createdAt</span> <span class="o">&lt;=</span> <span class="o">?</span>
</code></pre></div></div>

<p>ORM无法判断<code class="language-plaintext highlighter-rouge">id=123</code>的用户是否受该<code class="language-plaintext highlighter-rouge">UPDATE</code>语句影响。考虑到数据库通常会支持多个应用程序，此<code class="language-plaintext highlighter-rouge">UPDATE</code>语句可能由其他进程执行，ORM框架就更不知道了。</p>

<p>这种ORM框架称之为全自动ORM框架。</p>

<p>对比Spring提供的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，它和ORM框架相比，主要有几点差别：</p>

<ul>
  <li>查询后需要手动提供<code class="language-plaintext highlighter-rouge">Mapper</code>实例以便把<code class="language-plaintext highlighter-rouge">ResultSet</code>的每一行变为Java对象；</li>
  <li>增删改操作所需的参数列表，需要手动传入，即把<code class="language-plaintext highlighter-rouge">User</code>实例变为<code class="language-plaintext highlighter-rouge">[user.id, user.name, user.email]</code>这样的列表，比较麻烦。</li>
</ul>

<p>但是<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的优势在于它的确定性：即每次读取操作<strong>一定是数据库操作而不是缓存</strong>，所执行的SQL是完全确定的，缺点就是代码比较繁琐，构造<code class="language-plaintext highlighter-rouge">INSERT INTO users VALUES (?,?,?)</code>更是复杂。</p>

<p>所以，介于全自动ORM如Hibernate和手写全部如<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>之间，还有一种半自动的ORM，它只负责把<code class="language-plaintext highlighter-rouge">ResultSet</code>自动映射到Java Bean，或者自动填充Java Bean参数，但仍需自己写出SQL。<a href="https://mybatis.org/">MyBatis</a>就是这样一种半自动化ORM框架。</p>

<h4 id="引入mybatis">引入Mybatis</h4>

<p>首先，要引入MyBatis本身，其次，由于Spring并没有像Hibernate那样内置对MyBatis的集成，所以，需要再引入MyBatis官方自己开发的一个与Spring集成的库：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-orm<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.4.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.zaxxer<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>HikariCP<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>4.0.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.3.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>和前面一样，先创建<code class="language-plaintext highlighter-rouge">DataSource</code>是必不可少的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Hibernate和JPA的<code class="language-plaintext highlighter-rouge">SessionFactory</code>与<code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>，MyBatis与之对应的是<code class="language-plaintext highlighter-rouge">SqlSessionFactory</code>和<code class="language-plaintext highlighter-rouge">SqlSession</code>：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">JDBC</th>
      <th style="text-align: left">Hibernate</th>
      <th style="text-align: left">JPA</th>
      <th style="text-align: left">MyBatis</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DataSource</td>
      <td style="text-align: left">SessionFactory</td>
      <td style="text-align: left">EntityManagerFactory</td>
      <td style="text-align: left">SqlSessionFactory</td>
    </tr>
    <tr>
      <td style="text-align: left">Connection</td>
      <td style="text-align: left">Session</td>
      <td style="text-align: left">EntityManager</td>
      <td style="text-align: left">SqlSession</td>
    </tr>
  </tbody>
</table>

<p>ORM的设计套路都是类似的。使用MyBatis的核心就是创建<code class="language-plaintext highlighter-rouge">SqlSessionFactory</code>，这里需要创建的是<code class="language-plaintext highlighter-rouge">SqlSessionFactoryBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
    <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为MyBatis可以直接使用Spring管理的声明式事务，因此，创建事务管理器和使用JDBC是一样的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">PlatformTransactionManager</span>  <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span>  <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="crud-1">CRUD</h4>

<p>和Hibernate不同的是，MyBatis使用Mapper来实现映射，而且Mapper必须是接口。以<code class="language-plaintext highlighter-rouge">User</code>类为例，在<code class="language-plaintext highlighter-rouge">User</code>类和<code class="language-plaintext highlighter-rouge">users</code>表之间映射的<code class="language-plaintext highlighter-rouge">UserMapper</code>编写如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
	<span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = #{id}"</span><span class="o">)</span>
	<span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里的Mapper不是<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的<code class="language-plaintext highlighter-rouge">RowMapper</code>的概念，它是定义访问<code class="language-plaintext highlighter-rouge">users</code>表的接口方法。比如我们定义了一个<code class="language-plaintext highlighter-rouge">User getById(long)</code>的主键查询方法，不仅要定义接口方法本身，还要明确写出查询的SQL，这里用注解<code class="language-plaintext highlighter-rouge">@Select</code>标记。SQL语句的任何参数，都与方法参数按名称对应。例如，方法参数<code class="language-plaintext highlighter-rouge">id</code>的名字通过注解<code class="language-plaintext highlighter-rouge">@Param()</code>标记为<code class="language-plaintext highlighter-rouge">id</code>，则SQL语句里将来替换的占位符就是<code class="language-plaintext highlighter-rouge">#{id}</code>。</p>

<p>如果有多个参数，那么每个参数命名后直接在SQL中写出对应的占位符即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT #{offset}, #{maxResults}"</span><span class="o">)</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
</code></pre></div></div>

<p>MyBatis执行查询后，将根据方法的返回类型自动把<code class="language-plaintext highlighter-rouge">ResultSet</code>的每一行转换为<code class="language-plaintext highlighter-rouge">User</code>实例，转换规则当然是按列名和属性名对应。如果<strong>列名和属性名不同</strong>，最简单的方式是编写<code class="language-plaintext highlighter-rouge">SELECT</code>语句的别名：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 列名是created_time，属性名是createdAt:</span>
<span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">created_time</span> <span class="k">AS</span> <span class="n">createdAt</span> <span class="k">FROM</span> <span class="n">users</span>
</code></pre></div></div>

<p>执行INSERT语句就稍微麻烦点，因为我们希望传入<code class="language-plaintext highlighter-rouge">User</code>实例，因此，定义的方法接口与<code class="language-plaintext highlighter-rouge">@Insert</code>注解如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO users (email, password, name, createdAt) VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})"</span><span class="o">)</span>
<span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
</code></pre></div></div>

<p>上述方法传入的参数名称是<code class="language-plaintext highlighter-rouge">user</code>，参数类型是<code class="language-plaintext highlighter-rouge">User</code>类，在SQL中引用的时候，以<code class="language-plaintext highlighter-rouge">#{obj.property}</code>的方式写占位符。和Hibernate这样的全自动化ORM相比，MyBatis必须写出完整的INSERT语句。</p>

<p>如果<code class="language-plaintext highlighter-rouge">users</code>表的<code class="language-plaintext highlighter-rouge">id</code>是自增主键，那么，在SQL中不传入<code class="language-plaintext highlighter-rouge">id</code>，但希望获取插入后的主键，需要再加一个<code class="language-plaintext highlighter-rouge">@Options</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Options</span><span class="o">(</span><span class="n">useGeneratedKeys</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">keyProperty</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">,</span> <span class="n">keyColumn</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">)</span>
<span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO users (email, password, name, createdAt) VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})"</span><span class="o">)</span>
<span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">keyProperty</code>和<code class="language-plaintext highlighter-rouge">keyColumn</code>分别指出JavaBean的属性和数据库的主键列名。</p>

<p>执行<code class="language-plaintext highlighter-rouge">UPDATE</code>和<code class="language-plaintext highlighter-rouge">DELETE</code>语句相对比较简单，定义方法如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Update</span><span class="o">(</span><span class="s">"UPDATE users SET name = #{user.name}, createdAt = #{user.createdAt} WHERE id = #{user.id}"</span><span class="o">)</span>
<span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>

<span class="nd">@Delete</span><span class="o">(</span><span class="s">"DELETE FROM users WHERE id = #{id}"</span><span class="o">)</span>
<span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
</code></pre></div></div>

<p>有了<code class="language-plaintext highlighter-rouge">UserMapper</code>接口，还需要对应的实现类才能真正执行这些数据库操作的方法。虽然可以自己写实现类，但除了编写<code class="language-plaintext highlighter-rouge">UserMapper</code>接口外，还有<code class="language-plaintext highlighter-rouge">BookMapper</code>、<code class="language-plaintext highlighter-rouge">BonusMapper</code>……一个一个写太麻烦，因此，MyBatis提供了一个<code class="language-plaintext highlighter-rouge">MapperFactoryBean</code>来自动创建所有Mapper的实现类。可以用一个简单的注解<code class="language-plaintext highlighter-rouge">@MapperScan</code>来启用它：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@MapperScan</code>是MyBatis框架中的一个注解，用于扫描指定包路径下的Mapper接口，并将其注册为Spring的Bean，使得这些Mapper接口可以被注入到其他Bean中使用。</p>

<p><code class="language-plaintext highlighter-rouge">@MapperScan("com.aotmd.test")</code>指示Spring在<code class="language-plaintext highlighter-rouge">com.aotmd.test</code>包及其子包下扫描所有的Mapper接口，并注册为Spring的Bean，使得这些Mapper接口可以被自动注入到其他组件中使用。</p>

<p>MyBatis在启动时会自动给每个Mapper接口创建如下Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserMapperImpl</span> <span class="kd">implements</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">SqlSessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="n">getSqlFromAnnotation</span><span class="o">(...);</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">SqlSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">createSession</span><span class="o">())</span> <span class="o">{</span>
            <span class="o">...</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Spring允许动态创建Bean并添加到applicationContext中</p>

<hr />

<p>从<strong>mybatis3.4.0</strong>开始加入了<code class="language-plaintext highlighter-rouge">@Mapper</code>注解，目的就是为了<strong>不再写</strong>mapper映射文件。在使用MyBatis时，除了通过<code class="language-plaintext highlighter-rouge">@MapperScan</code>注解扫描Mapper接口外，还可以直接在Mapper接口上使用<code class="language-plaintext highlighter-rouge">@Mapper</code>注解，这是因为MyBatis提供了<code class="language-plaintext highlighter-rouge">org.apache.ibatis.annotations.Mapper</code>注解来标识Mapper接口。</p>

<p>具体来说，使用<code class="language-plaintext highlighter-rouge">@Mapper</code>注解标注的接口会被MyBatis扫描并注册为Mapper接口，这样就不需要显式地在配置类中使用<code class="language-plaintext highlighter-rouge">@MapperScan</code>进行扫描。如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
	<span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = #{id}"</span><span class="o">)</span>
	<span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>在业务逻辑中，可以直接注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>初始化一下表：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">userID1</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"user1"</span><span class="o">).</span><span class="na">getId</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">userID2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"user2"</span><span class="o">).</span><span class="na">getId</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user2</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">updateEmail</span><span class="o">(</span><span class="s">"小华"</span><span class="o">,</span> <span class="n">userID2</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user3</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
1
[User{id=0, email='1@qq.com', password='123456', name='user1', createdAt=1718607558794}, User{id=1, email='2@qq.com', password='123456', name='user2', createdAt=1718607558823}]
User{id=0, email='1@qq.com', password='123456', name='user1', createdAt=1718607558794}
null
1
User{id=1, email='2@qq.com', password='123456', name='小华', createdAt=1718607558823}
</code></pre></div></div>

<p>完整实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.SqlSessionFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.annotation.MapperScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.PlatformTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd.test"</span><span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">Test4</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">UserService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">ac</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">UserService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">userID1</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"1@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"user1"</span><span class="o">).</span><span class="na">getId</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">userID2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="s">"2@qq.com"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">,</span> <span class="s">"user2"</span><span class="o">).</span><span class="na">getId</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID1</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user2</span><span class="o">);</span>
        <span class="n">service</span><span class="o">.</span><span class="na">updateEmail</span><span class="o">(</span><span class="s">"小华"</span><span class="o">,</span> <span class="n">userID2</span><span class="o">);</span>
        <span class="nc">User</span> <span class="n">user3</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">userID2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
<span class="cm">/*        // 创建 MyBatis 的 Configuration 对象
        org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();

        // 开启 MyBatis 的 SQL 调试模式
        configuration.setLogImpl(org.apache.ibatis.logging.stdout.StdOutImpl.class);
        //configuration.setLogPrefix("mybatis.debug.");
        configuration.setLogPrefix("mybatis.debug.sql.");

        // 将 Configuration 对象设置到 SqlSessionFactoryBean 中
        sqlSessionFactoryBean.setConfiguration(configuration);*/</span>

        <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span>  <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span>  <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", createdAt="</span> <span class="o">+</span> <span class="n">createdAt</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users WHERE id = #{id}"</span><span class="o">)</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM users LIMIT #{offset}, #{maxResults}"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO users (email, password, name, createdAt) VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="nd">@Options</span><span class="o">(</span><span class="n">useGeneratedKeys</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">keyProperty</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">,</span> <span class="n">keyColumn</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">)</span>
    <span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO users (email, password, name, createdAt) VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="nd">@Update</span><span class="o">(</span><span class="s">"UPDATE users SET name = #{user.name} WHERE id = #{user.id}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>

    <span class="nd">@Delete</span><span class="o">(</span><span class="s">"DELETE FROM users WHERE id = #{id}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="使用xml的编写sql">使用XML的编写SQL</h4>

<p>只需要修改一下配置，指定映射文件位置为<code class="language-plaintext highlighter-rouge">"classpath:mapper/*.xml"</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setMapperLocations</span><span class="o">(</span><span class="k">new</span> <span class="nc">PathMatchingResourcePatternResolver</span><span class="o">().</span><span class="na">getResources</span><span class="o">(</span><span class="s">"classpath:mapper/*.xml"</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>这样就不用注解了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>

    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对应的sql写在xml文件中：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.aotmd.test.UserMapper"</span><span class="nt">&gt;</span><span class="c">&lt;!--命名空间为接口名称--&gt;</span>
    <span class="c">&lt;!--id需与接口方法完全一致,parameterType形参,resultType返回值类型--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getById"</span> <span class="na">parameterType=</span><span class="s">"Long"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getAll"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users LIMIT #{offset}, #{maxResults}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert2"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span> <span class="na">useGeneratedKeys=</span><span class="s">"true"</span> <span class="na">keyProperty=</span><span class="s">"id"</span> <span class="na">keyColumn=</span><span class="s">"id"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>

    <span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateName"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        UPDATE users
        SET name = #{user.name}
        WHERE id = #{user.id}
    <span class="nt">&lt;/update&gt;</span>

    <span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">"deleteById"</span> <span class="na">parameterType=</span><span class="s">"long"</span><span class="nt">&gt;</span>
        DELETE
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/delete&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<hr />

<p>更新<code class="language-plaintext highlighter-rouge">User</code>时根据属性值构造动态SQL：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateUser"</span><span class="nt">&gt;</span>
  UPDATE users SET
  <span class="nt">&lt;set&gt;</span>
    <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"user.name != null"</span><span class="nt">&gt;</span> name = #{user.name} <span class="nt">&lt;/if&gt;</span>
    <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"user.hobby != null"</span><span class="nt">&gt;</span> hobby = #{user.hobby} <span class="nt">&lt;/if&gt;</span>
    <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"user.summary != null"</span><span class="nt">&gt;</span> summary = #{user.summary} <span class="nt">&lt;/if&gt;</span>
  <span class="nt">&lt;/set&gt;</span>
  WHERE id = #{user.id}
<span class="nt">&lt;/update&gt;</span>
</code></pre></div></div>

<p>编写XML配置的优点是可以组装出动态SQL，并且把所有SQL操作集中在一起。缺点是配置起来太繁琐，调用方法时如果想查看SQL还需要定位到XML配置中，<a href="https://mybatis.org/mybatis-3/zh/configuration.html">官方文档</a>。</p>

<p>使用MyBatis最大的问题是所有SQL都需要全部手写，优点是执行的SQL就是我们自己写的SQL，对SQL进行优化非常简单，也可以编写任意复杂的SQL，或者使用数据库的特定语法，但切换数据库可能就不太容易。好消息是大部分项目并没有切换数据库的需求，完全可以针对某个数据库编写尽可能优化的SQL。</p>

<h4 id="设置调试日志">设置调试日志</h4>

<p>引入log4j依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>log4j<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>log4j<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2.17<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>初始化时配置log4j：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
    <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setMapperLocations</span><span class="o">(</span><span class="k">new</span> <span class="nc">PathMatchingResourcePatternResolver</span><span class="o">().</span><span class="na">getResources</span><span class="o">(</span><span class="s">"classpath:mapper/*.xml"</span><span class="o">));</span>
    <span class="c1">// 创建 MyBatis 的 Configuration 对象</span>
    <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span><span class="o">();</span>

    <span class="c1">// 设置日志实现为Log4j</span>
    <span class="n">configuration</span><span class="o">.</span><span class="na">setLogImpl</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Log4jImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="c1">// 将 Configuration 对象设置到 SqlSessionFactoryBean 中</span>
    <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setConfiguration</span><span class="o">(</span><span class="n">configuration</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">classpath</code>根目录新建<code class="language-plaintext highlighter-rouge">log4j.properties</code>:</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Global logging configuration
</span><span class="py">log4j.rootLogger</span><span class="p">=</span><span class="s">ERROR, stdout</span>
<span class="c"># MyBatis logging configuration...
</span><span class="py">log4j.logger.com.aotmd.test</span><span class="p">=</span><span class="s">DEBUG</span>
<span class="c">#log4j.logger.org.springframework=DEBUG
# Console output...
</span><span class="py">log4j.appender.stdout</span><span class="p">=</span><span class="s">org.apache.log4j.ConsoleAppender</span>
<span class="py">log4j.appender.stdout.layout</span><span class="p">=</span><span class="s">org.apache.log4j.PatternLayout</span>
<span class="py">log4j.appender.stdout.layout.ConversionPattern</span><span class="p">=</span><span class="s">%d{yyyy-MM-dd HH:mm:ss} %5p [%t] - %m%n</span>
<span class="py">mybatis.configuration.call-setters-on-nulls</span><span class="p">=</span><span class="s">true</span>
<span class="py">log4j.appender.Console.layout.ConversionPattern</span><span class="p">=</span><span class="s">%d{yyyy-MM-dd HH:mm:ss} %5p [%t] (%F:%L) - %m%n</span>
</code></pre></div></div>

<p>注意第4行的<code class="language-plaintext highlighter-rouge">log4j.logger.com.aotmd.test=DEBUG</code>，表示对<code class="language-plaintext highlighter-rouge">com.aotmd.test</code>包下的接口方法进行日志DEBUG级别输出。</p>

<h1 id="spring-mvc">Spring MVC</h1>

<p>Spring提供的是一个IoC容器，所有的Bean，包括Controller，都在Spring IoC容器中被初始化，而Servlet容器由JavaEE服务器提供（如Tomcat）。</p>

<p>要使用Spring MVC，需要以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.embed<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>tomcat-embed-core<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>9.0.26<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.embed<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>tomcat-embed-jasper<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>9.0.26<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>pebble-spring5<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.2.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>文件目录结构：</p>

<pre><code class="language-ascii">spring-web-mvc
├── pom.xml
└── src
    └── main
        ├── java
        │   └── com
        │       └── aotmd
        │           └── test
        │               └── Test4.java
        ├── resources
        │   ├── jdbc.properties
        │   └── log4j.properties
        └── webapp
            ├── WEB-INF
            │   ├── templates
            │   │   └── test.html
            │   └── web.xml
            └── static
                ├── css
                └── js
</code></pre>

<p>其中，<code class="language-plaintext highlighter-rouge">src/main/webapp</code>是标准web目录，<code class="language-plaintext highlighter-rouge">WEB-INF</code>存放<code class="language-plaintext highlighter-rouge">web.xml</code>，编译的class，第三方jar，以及不允许浏览器直接访问的View模版，<code class="language-plaintext highlighter-rouge">static</code>目录存放所有静态文件。</p>

<p><code class="language-plaintext highlighter-rouge">src/main/resources</code>目录中存放的是Java程序读取的classpath资源文件。<code class="language-plaintext highlighter-rouge">src/main/java</code>就是编写的Java代码。</p>

<hr />

<p>和普通Spring配置一样，只需加上<code class="language-plaintext highlighter-rouge">@EnableWebMvc</code>注解，就“激活”了Spring MVC。</p>

<p>除了创建<code class="language-plaintext highlighter-rouge">DataSource</code>、<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>、<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>外，<code class="language-plaintext highlighter-rouge">AppConfig</code>需要额外创建几个用于Spring MVC的Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>并不是必须的，在这里创建了一个默认的<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>，只覆写<code class="language-plaintext highlighter-rouge">addResourceHandlers()</code>，目的是让Spring MVC自动处理静态文件，并且映射路径为<code class="language-plaintext highlighter-rouge">/static/**</code>。</p>

<p>另一个必须要创建的Bean是<code class="language-plaintext highlighter-rouge">ViewResolver</code>，因为Spring MVC允许集成任何模板引擎，使用哪个模板引擎，就实例化一个对应的<code class="language-plaintext highlighter-rouge">ViewResolver</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
            <span class="c1">// cache:</span>
            <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
            <span class="c1">// loader:</span>
            <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ViewResolver</code>通过指定<code class="language-plaintext highlighter-rouge">prefix</code>和<code class="language-plaintext highlighter-rouge">suffix</code>来确定如何查找View。上述配置使用Pebble引擎，指定模板文件存放在<code class="language-plaintext highlighter-rouge">/WEB-INF/templates/</code>目录下。</p>

<p>剩下的Bean都是普通的<code class="language-plaintext highlighter-rouge">@Component</code>，但Controller必须标记为<code class="language-plaintext highlighter-rouge">@Controller</code>，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Controller使用@Controller标记而不是@Component:</span>
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="c1">// 正常使用@Autowired注入:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="c1">// 处理一个URL映射:</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果是普通的Java应用程序，可以通过<code class="language-plaintext highlighter-rouge">main()</code>方法可以很简单地创建一个Spring容器的实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在Web应用中启动Spring容器有很多种方法，可以通过Listener启动，也可以通过Servlet启动，可以使用XML配置，也可以使用注解配置。这里，介绍一种最简单的启动Spring容器的方式。在<code class="language-plaintext highlighter-rouge">web.xml</code>中配置Spring MVC提供的<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="nt">&lt;web-app&gt;</span>
    <span class="nt">&lt;servlet&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextClass<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>com.aotmd.test.Test4<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;load-on-startup&gt;</span>0<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;/servlet&gt;</span>

    <span class="nt">&lt;servlet-mapping&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/servlet-mapping&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<p>初始化参数<code class="language-plaintext highlighter-rouge">contextClass</code>指定使用注解配置的<code class="language-plaintext highlighter-rouge">AnnotationConfigWebApplicationContext</code>，配置文件的位置参数<code class="language-plaintext highlighter-rouge">contextConfigLocation</code>指向<code class="language-plaintext highlighter-rouge">AppConfig</code>的完整类名，最后，把这个Servlet映射到<code class="language-plaintext highlighter-rouge">/*</code>，即处理所有URL。</p>

<p>上述配置可以看作一个样板配置，有了这个配置，Servlet容器会首先初始化Spring MVC的<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>，在<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>启动时，它根据配置<code class="language-plaintext highlighter-rouge">AppConfig</code>创建了一个类型是<code class="language-plaintext highlighter-rouge">WebApplicationContext</code>的IoC容器，完成所有Bean的初始化，并将容器绑到<code class="language-plaintext highlighter-rouge">ServletContext</code>上。</p>

<p>因为<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>持有IoC容器，能从IoC容器中获取所有<code class="language-plaintext highlighter-rouge">@Controller</code>的Bean，因此，<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>接收到所有HTTP请求后，根据Controller方法配置的路径，就可以正确地把请求转发到指定方法，并根据返回的<code class="language-plaintext highlighter-rouge">ModelAndView</code>决定如何渲染页面。</p>

<p>最后，在<code class="language-plaintext highlighter-rouge">AppConfig</code>中通过<code class="language-plaintext highlighter-rouge">main()</code>方法启动嵌入式Tomcat：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableWebMvc</span>
<span class="nd">@MapperScan</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">src/main/webapp/WEB-INF/templates/test.html</code>：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>测试<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>上述Web应用程序就是使用Spring MVC时的一个最小启动功能集。</p>

<hr />

<p>有了Web应用程序的最基本的结构，重点就可以放在如何编写Controller上。Spring MVC对Controller没有固定的要求，也不需要实现特定的接口。以<code class="language-plaintext highlighter-rouge">UserController</code>为例，编写Controller只需要遵循以下要点：</p>

<p>总是标记<code class="language-plaintext highlighter-rouge">@Controller</code>而不是<code class="language-plaintext highlighter-rouge">@Component</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>一个方法对应一个HTTP请求路径，用<code class="language-plaintext highlighter-rouge">@GetMapping</code>或<code class="language-plaintext highlighter-rouge">@PostMapping</code>表示GET或POST请求：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">doSignin</span><span class="o">(</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"email"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"password"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span>
        <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>需要接收的HTTP参数以<code class="language-plaintext highlighter-rouge">@RequestParam()</code>标注，可以设置默认值。如果方法参数需要传入<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>、<code class="language-plaintext highlighter-rouge">HttpServletResponse</code>或者<code class="language-plaintext highlighter-rouge">HttpSession</code>，直接添加这个类型的参数即可，Spring MVC会自动按类型传入。</p>

<p>返回的ModelAndView通常包含View的路径和一个Map作为Model，但也可以没有Model，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="k">new</span> <span class="nc">ModelAndView</span><span class="o">(</span><span class="s">"signin.html"</span><span class="o">);</span> <span class="c1">// 仅View，没有Model</span>
</code></pre></div></div>

<p>返回重定向时既可以写<code class="language-plaintext highlighter-rouge">new ModelAndView("redirect:/signin")</code>，也可以直接返回String：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(...)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"redirect:/signin"</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"redirect:/profile"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果在方法内部直接操作<code class="language-plaintext highlighter-rouge">HttpServletResponse</code>发送响应，返回<code class="language-plaintext highlighter-rouge">null</code>表示无需进一步处理：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">download</span><span class="o">(</span><span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="o">...</span>
    <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"application/octet-stream"</span><span class="o">);</span>
    <span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
    <span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    <span class="n">output</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对URL进行分组，每组对应一个Controller是一种很好的组织形式，并可以在Controller的class定义出添加URL前缀，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/user"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="c1">// 注意实际URL映射是/user/profile</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>

    <span class="c1">// 注意实际URL映射是/user/changePassword</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/changePassword"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">changePassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实际方法的URL映射总是前缀+路径，这种形式还可以有效避免不小心导致的重复的URL映射。</p>

<p>使用Spring MVC时，整个Web应用程序按如下顺序启动：</p>

<ol>
  <li>启动Tomcat服务器；</li>
  <li>Tomcat读取<code class="language-plaintext highlighter-rouge">web.xml</code>并初始化<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>创建IoC容器并自动注册到<code class="language-plaintext highlighter-rouge">ServletContext</code>中。</li>
</ol>

<p>启动后，浏览器发出的HTTP请求全部由<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>接收，并根据配置转发到指定Controller的指定方法处理。</p>

<h2 id="rest">REST</h2>

<p>使用Spring MVC开发Web应用程序的主要工作就是编写Controller逻辑。在Web应用中，除了需要使用MVC给用户显示页面外，还有一类API接口，我们称之为REST，通常输入输出都是JSON，便于第三方调用或者使用页面JavaScript与之交互。</p>

<p>直接在Controller中处理JSON是可以的，因为Spring MVC的<code class="language-plaintext highlighter-rouge">@GetMapping</code>和<code class="language-plaintext highlighter-rouge">@PostMapping</code>都支持指定输入和输出的格式。如果想接收JSON，输出JSON，那么可以这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/rest"</span><span class="o">,</span>
             <span class="n">consumes</span> <span class="o">=</span> <span class="s">"application/json;charset=UTF-8"</span><span class="o">,</span>
             <span class="n">produces</span> <span class="o">=</span> <span class="s">"application/json;charset=UTF-8"</span><span class="o">)</span>
<span class="nd">@ResponseBody</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">rest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="s">"{\"restSupport\":true}"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>需要加入Jackson这个依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.17.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>测试：post-body-raw-JSON：<code class="language-plaintext highlighter-rouge">{"email":"bob@example.com"}</code>，访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/rest</code>，显示正常:<code class="language-plaintext highlighter-rouge">{"restSupport": true}</code>。</p>

<p><code class="language-plaintext highlighter-rouge">@PostMapping</code>使用<code class="language-plaintext highlighter-rouge">consumes</code>声明能接收的类型，使用<code class="language-plaintext highlighter-rouge">produces</code>声明输出的类型，并且额外加了<code class="language-plaintext highlighter-rouge">@ResponseBody</code>表示返回的<code class="language-plaintext highlighter-rouge">String</code>无需额外处理，直接作为输出内容写入<code class="language-plaintext highlighter-rouge">HttpServletResponse</code>。输入的JSON则根据注解<code class="language-plaintext highlighter-rouge">@RequestBody</code>直接被Spring反序列化为<code class="language-plaintext highlighter-rouge">User</code>这个JavaBean。</p>

<p>直接用Spring的Controller配合一大堆注解写REST太麻烦了，因此，Spring还额外提供了一个<code class="language-plaintext highlighter-rouge">@RestController</code>注解，使用<code class="language-plaintext highlighter-rouge">@RestController</code>替代<code class="language-plaintext highlighter-rouge">@Controller</code>后，每个方法自动变成API接口方法。还是以实际代码举例，编写<code class="language-plaintext highlighter-rouge">ApiController</code>如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写REST接口只需要定义<code class="language-plaintext highlighter-rouge">@RestController</code>，然后，每个方法都是一个API接口，输入和输出只要能被Jackson序列化或反序列化为JSON就没有问题。</p>

<p>测试：post-body-raw-JSON：<code class="language-plaintext highlighter-rouge">{"email":"bob@example.com","password":"bob123","name":"test"}</code>，访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/signin</code>，显示正常:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"user"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
        </span><span class="nl">"email"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bob@example.com"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bob123"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"test"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"createdAt"</span><span class="p">:</span><span class="w"> </span><span class="mi">1719308650728</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">User</code>能被正确地序列化为JSON，但暴露了<code class="language-plaintext highlighter-rouge">password</code>属性，这是我们不期望的。要避免输出<code class="language-plaintext highlighter-rouge">password</code>属性，可以把<code class="language-plaintext highlighter-rouge">User</code>复制到另一个<code class="language-plaintext highlighter-rouge">UserBean</code>对象，该对象只持有必要的属性，但这样做比较繁琐。另一种简单的方法是直接在<code class="language-plaintext highlighter-rouge">User</code>的<code class="language-plaintext highlighter-rouge">password</code>属性定义处加上<code class="language-plaintext highlighter-rouge">@JsonIgnore</code>表示完全忽略该属性：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@JsonIgnore</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是这样一来，如果写一个<code class="language-plaintext highlighter-rouge">register(User user)</code>方法，那么该方法的User对象也拿不到注册时用户传入的密码了。如果要允许输入<code class="language-plaintext highlighter-rouge">password</code>，但不允许输出<code class="language-plaintext highlighter-rouge">password</code>，即在JSON序列化和反序列化时，允许写属性，禁用读属性，可以更精细地控制如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">Access</span><span class="o">.</span><span class="na">WRITE_ONLY</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>同样的，可以使用<code class="language-plaintext highlighter-rouge">@JsonProperty(access = Access.READ_ONLY)</code>允许输出，不允许输入。</p>

<h2 id="集成filter">集成Filter</h2>

<p>在Spring MVC中，<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>只需要固定配置到<code class="language-plaintext highlighter-rouge">web.xml</code>中，剩下的工作主要是专注于编写Controller。</p>

<p>在Servlet规范中，还可以使用<code class="language-plaintext highlighter-rouge">Filter</code>。如果要在Spring MVC中使用<code class="language-plaintext highlighter-rouge">Filter</code>，应该怎么做？</p>

<p>在上一节的Web应用中注册时输入中文会导致乱码，因为Servlet默认按非UTF-8编码读取参数。为了修复这一问题，可以简单地使用一个EncodingFilter，在全局范围类给<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>和<code class="language-plaintext highlighter-rouge">HttpServletResponse</code>强制设置为UTF-8编码。</p>

<p>可以自己编写一个EncodingFilter，也可以直接使用Spring MVC自带的一个<code class="language-plaintext highlighter-rouge">CharacterEncodingFilter</code>。配置Filter时，只需在<code class="language-plaintext highlighter-rouge">web.xml</code>中声明即可：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>
    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>forceEncoding<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>
<span class="nt">&lt;/filter&gt;</span>

<span class="nt">&lt;filter-mapping&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<p>因为这种Filter和业务关系不大，<code class="language-plaintext highlighter-rouge">CharacterEncodingFilter</code>其实和Spring的IoC容器没有任何关系，两者均互不知晓对方的存在，因此，配置这种Filter十分简单。</p>

<p>如果允许用户使用Basic模式进行用户验证，即在HTTP请求中添加头<code class="language-plaintext highlighter-rouge">Authorization: Basic email:password</code>，这个需求如何实现？</p>

<p>编写一个<code class="language-plaintext highlighter-rouge">AuthFilter</code>是最简单的实现方式：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AuthFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">HttpServletRequest</span> <span class="n">req</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">;</span>
        <span class="c1">// 获取Authorization头:</span>
        <span class="nc">String</span> <span class="n">authHeader</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authHeader</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">authHeader</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"Basic "</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str</span><span class="o">=</span><span class="n">authHeader</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">str</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="nc">Base64</span><span class="o">.</span><span class="na">getDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">str</span><span class="o">));</span>
            <span class="c1">// 从Header中提取email和password:</span>
            <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">)[</span><span class="mi">0</span><span class="o">];</span>
            <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="c1">// 登录:</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="c1">// 放入Session:</span>
            <span class="n">req</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"KEY_USER"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 继续处理请求:</span>
        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是，在Spring中创建的这个<code class="language-plaintext highlighter-rouge">AuthFilter</code>是一个普通Bean，Servlet容器并不知道，所以它不会起作用。</p>

<p>如果直接在<code class="language-plaintext highlighter-rouge">web.xml</code>中声明这个<code class="language-plaintext highlighter-rouge">AuthFilter</code>，则<code class="language-plaintext highlighter-rouge">AuthFilter</code>的实例将由Servlet容器而不是Spring容器初始化，因此，<code class="language-plaintext highlighter-rouge">@Autowire</code>根本不生效，用于登录的<code class="language-plaintext highlighter-rouge">UserService</code>成员变量永远是<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p>所以，得通过一种方式，让Servlet容器实例化的Filter，间接引用Spring容器实例化的<code class="language-plaintext highlighter-rouge">AuthFilter</code>。Spring MVC提供了一个<code class="language-plaintext highlighter-rouge">DelegatingFilterProxy</code>，专门来干这个事情：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>authFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="nt">&lt;/filter-class&gt;</span>
<span class="nt">&lt;/filter&gt;</span>

<span class="nt">&lt;filter-mapping&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>authFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<p>Servlet容器从<code class="language-plaintext highlighter-rouge">web.xml</code>中读取配置，实例化<code class="language-plaintext highlighter-rouge">DelegatingFilterProxy</code>，注意命名是<code class="language-plaintext highlighter-rouge">authFilter</code>；</p>

<p>Spring容器通过扫描<code class="language-plaintext highlighter-rouge">@Component</code>实例化<code class="language-plaintext highlighter-rouge">AuthFilter</code>。</p>

<p>当<code class="language-plaintext highlighter-rouge">DelegatingFilterProxy</code>生效后，它会自动查找注册在<code class="language-plaintext highlighter-rouge">ServletContext</code>上的Spring容器，再试图从容器中查找<strong>名为<code class="language-plaintext highlighter-rouge">authFilter</code>的Bean</strong>，也就是我们用<code class="language-plaintext highlighter-rouge">@Component</code>声明的<code class="language-plaintext highlighter-rouge">AuthFilter</code>。</p>

<p><code class="language-plaintext highlighter-rouge">DelegatingFilterProxy</code>将请求代理给<code class="language-plaintext highlighter-rouge">AuthFilter</code>，核心代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DelegatingFilterProxy</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Filter</span> <span class="n">delegate</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(...)</span> <span class="kd">throws</span> <span class="o">...</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">delegate</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">delegate</span> <span class="o">=</span> <span class="n">findBeanFromSpringContainer</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">delegate</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">,</span> <span class="n">chain</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这就是一个代理模式的简单应用。画图表示它们之间的引用关系如下：</p>

<pre><code class="language-ascii">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
  ┌─────────────────────┐        ┌───────────┐   │
│ │DelegatingFilterProxy│─│─│─ ─&gt;│AuthFilter │
  └─────────────────────┘        └───────────┘   │
│ ┌─────────────────────┐ │ │    ┌───────────┐
  │  DispatcherServlet  │─ ─ ─ ─&gt;│Controllers│   │
│ └─────────────────────┘ │ │    └───────────┘
                                                 │
│    Servlet Container    │ │  Spring Container
 ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>如果在<code class="language-plaintext highlighter-rouge">web.xml</code>中配置的Filter名字和Spring容器的<strong>Bean的名字不一致</strong>，那么需要指定Bean的名字：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>basicAuthFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="nt">&lt;/filter-class&gt;</span>
    <span class="c">&lt;!-- 指定Bean的名字 --&gt;</span>
    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>targetBeanName<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>authFilter<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>
<span class="nt">&lt;/filter&gt;</span>
</code></pre></div></div>

<p>实际应用时，尽量保持名字一致，以减少不必要的配置。</p>

<p>要使用Basic模式的用户认证，可以使用postman测试。例如，用户登录名是<code class="language-plaintext highlighter-rouge">tom@example.com</code>，口令是<code class="language-plaintext highlighter-rouge">tomcat</code>，那么先构造一个使用URL编码的<code class="language-plaintext highlighter-rouge">用户名:口令</code>的字符串：<code class="language-plaintext highlighter-rouge">tom@example.com:tomcat</code>,然后通过<code class="language-plaintext highlighter-rouge">btoa("tom@example.com:tomcat")</code>编码为：<code class="language-plaintext highlighter-rouge">dG9tQGV4YW1wbGUuY29tOnRvbWNhdA==</code>，并在前头添加<code class="language-plaintext highlighter-rouge">Basic  </code> 和空格，组成：<code class="language-plaintext highlighter-rouge">Basic dG9tQGV4YW1wbGUuY29tOnRvbWNhdA==</code>。</p>

<p>首先设置url：<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/signin</code>,post方式body-raw-json：<code class="language-plaintext highlighter-rouge">{"email":"tom@example.com","password":"tomcat","name":"test"}</code>,插入一条数据。</p>

<p>然后构建一下登录：</p>

<p><code class="language-plaintext highlighter-rouge">UserMapper</code>添加：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="nf">getByEmailAndByPassword</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">UserMapper.xml</code>添加：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getByEmailAndByPassword"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
    SELECT *
    FROM users
    WHERE email = #{user.email} and
    password=#{user.password}
<span class="nt">&lt;/select&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">UserService</code>添加：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
    <span class="c1">// 创建一个User对象:</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="c1">// 设置好各个属性:</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="n">user</span><span class="o">=</span><span class="n">userMapper</span><span class="o">.</span><span class="na">getByEmailAndByPassword</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>get：<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/users</code>，并附带header：Authorization：<code class="language-plaintext highlighter-rouge">Basic dG9tQGV4YW1wbGUuY29tOnRvbWNhdA==</code></p>

<p>控制台打印：<code class="language-plaintext highlighter-rouge">User{id=0, email='tom@example.com', password='tomcat', name='test', createdAt=1719387371455}</code>，返回的Cookie带有:<code class="language-plaintext highlighter-rouge">JSESSIONID=5DEFF8E659A261619EDE0CA1D646038D</code>正常使用。</p>

<p>完整实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.zaxxer.hikari.HikariDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Param</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.SqlSessionFactoryBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.annotation.MapperScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.PropertySource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.core.io.support.PathMatchingResourcePatternResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.PlatformTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ModelAndView</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.EnableWebMvc</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.ViewControllerRegistry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.WebMvcConfigurer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.annotation.PostConstruct</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Base64</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>


<span class="cm">/**
 * @author aotmd
 * @version 1.0
 * @date 2024/6/1 22:16
 */</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@MapperScan</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:jdbc.properties"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUrl</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.username}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcUsername</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">jdbcPassword</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HikariConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HikariConfig</span><span class="o">();</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setJdbcUrl</span><span class="o">(</span><span class="n">jdbcUrl</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">jdbcUsername</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">jdbcPassword</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"autoCommit"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"connectionTimeout"</span><span class="o">,</span> <span class="s">"5"</span><span class="o">);</span>
        <span class="n">config</span><span class="o">.</span><span class="na">addDataSourceProperty</span><span class="o">(</span><span class="s">"idleTimeout"</span><span class="o">,</span> <span class="s">"60"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">HikariDataSource</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SqlSessionFactoryBean</span> <span class="nf">createEntityManagerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">sqlSessionFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBean</span><span class="o">();</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setMapperLocations</span><span class="o">(</span><span class="k">new</span> <span class="nc">PathMatchingResourcePatternResolver</span><span class="o">().</span><span class="na">getResources</span><span class="o">(</span><span class="s">"classpath:mapper/*.xml"</span><span class="o">));</span>
        <span class="c1">// 创建 MyBatis 的 Configuration 对象</span>
        <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">session</span><span class="o">.</span><span class="na">Configuration</span><span class="o">();</span>

        <span class="c1">// 设置日志实现为Log4j</span>
        <span class="n">configuration</span><span class="o">.</span><span class="na">setLogImpl</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Log4jImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="c1">//configuration.setLogPrefix("mybatis.debug.");</span>
<span class="cm">/*        configuration.setLogPrefix("mybatis.debug.sql.");*/</span>

        <span class="c1">// 将 Configuration 对象设置到 SqlSessionFactoryBean 中</span>
        <span class="n">sqlSessionFactoryBean</span><span class="o">.</span><span class="na">setConfiguration</span><span class="o">(</span><span class="n">configuration</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">sqlSessionFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">PlatformTransactionManager</span>  <span class="nf">createTxManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span>  <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", createdAt="</span> <span class="o">+</span> <span class="n">createdAt</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="c1">//新增的部分</span>
    <span class="nc">User</span> <span class="nf">getByEmailAndByPassword</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
	<span class="c1">//新增的部分</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">=</span><span class="n">userMapper</span><span class="o">.</span><span class="na">getByEmailAndByPassword</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Controller使用@Controller标记而不是@Component:</span>
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="c1">// 正常使用@Autowired注入:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="c1">// 处理一个URL映射:</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/rest"</span><span class="o">,</span>
            <span class="n">consumes</span> <span class="o">=</span> <span class="s">"application/json;charset=UTF-8"</span><span class="o">,</span>
            <span class="n">produces</span> <span class="o">=</span> <span class="s">"application/json;charset=UTF-8"</span><span class="o">)</span>
    <span class="nd">@ResponseBody</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">rest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"{\"restSupport\":true}"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">//新增的部分</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">AuthFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">HttpServletRequest</span> <span class="n">req</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">;</span>
        <span class="c1">// 获取Authorization头:</span>
        <span class="nc">String</span> <span class="n">authHeader</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authHeader</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">authHeader</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"Basic "</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">str</span><span class="o">=</span><span class="n">authHeader</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="n">str</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="nc">Base64</span><span class="o">.</span><span class="na">getDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">str</span><span class="o">));</span>
            <span class="c1">// 从Header中提取email和password:</span>
            <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">)[</span><span class="mi">0</span><span class="o">];</span>
            <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">)[</span><span class="mi">1</span><span class="o">];</span>
            <span class="c1">// 登录:</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
            <span class="c1">// 放入Session:</span>
            <span class="n">req</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"KEY_USER"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 继续处理请求:</span>
        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">web.xml</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>
         <span class="na">version=</span><span class="s">"4.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;servlet&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextClass<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>com.aotmd.test.Test4<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;load-on-startup&gt;</span>0<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;/servlet&gt;</span>

    <span class="nt">&lt;servlet-mapping&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/servlet-mapping&gt;</span>
	<span class="c">&lt;!--新增的部分--&gt;</span>
    <span class="nt">&lt;filter&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>forceEncoding<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
    <span class="nt">&lt;/filter&gt;</span>
	
    <span class="nt">&lt;filter-mapping&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/filter-mapping&gt;</span>
	<span class="c">&lt;!--新增的部分--&gt;</span>
    <span class="nt">&lt;filter&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>authFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="nt">&lt;/filter-class&gt;</span>
    <span class="nt">&lt;/filter&gt;</span>

    <span class="nt">&lt;filter-mapping&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>authFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/filter-mapping&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">UserMapper.xml</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.aotmd.test.UserMapper"</span><span class="nt">&gt;</span><span class="c">&lt;!--命名空间为接口名称--&gt;</span>
    <span class="c">&lt;!--id需与接口方法完全一致,parameterType形参,resultType返回值类型--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getById"</span> <span class="na">parameterType=</span><span class="s">"Long"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getAll"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users LIMIT #{offset}, #{maxResults}
    <span class="nt">&lt;/select&gt;</span>
    <span class="c">&lt;!--新增的部分--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getByEmailAndByPassword"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE email = #{user.email} and
        password=#{user.password}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert2"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span> <span class="na">useGeneratedKeys=</span><span class="s">"true"</span> <span class="na">keyProperty=</span><span class="s">"id"</span> <span class="na">keyColumn=</span><span class="s">"id"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>

    <span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateName"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.test.User"</span><span class="nt">&gt;</span>
        UPDATE users
        SET name = #{user.name}
        WHERE id = #{user.id}
    <span class="nt">&lt;/update&gt;</span>

    <span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">"deleteById"</span> <span class="na">parameterType=</span><span class="s">"long"</span><span class="nt">&gt;</span>
        DELETE
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/delete&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<h2 id="使用interceptor">使用Interceptor</h2>

<p>在Web程序中，使用Filter的时候，Filter由Servlet容器管理，它在Spring MVC的Web应用程序中作用范围如下：</p>

<pre><code class="language-ascii">         │   ▲
         ▼   │
       ┌───────┐
       │Filter1│
       └───────┘
         │   ▲
         ▼   │
       ┌───────┐
┌ ─ ─ ─│Filter2│─ ─ ─ ─ ─ ─ ─ ─ ┐
       └───────┘
│        │   ▲                  │
         ▼   │
│ ┌─────────────────┐           │
  │DispatcherServlet│&lt;───┐
│ └─────────────────┘    │      │
   │              ┌────────────┐
│  │              │ModelAndView││
   │              └────────────┘
│  │                     ▲      │
   │    ┌───────────┐    │
│  ├───&gt;│Controller1│────┤      │
   │    └───────────┘    │
│  │                     │      │
   │    ┌───────────┐    │
│  └───&gt;│Controller2│────┘      │
        └───────────┘
└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>上图虚线框就是Filter2的拦截范围，Filter组件实际上并不知道后续内部处理是通过Spring MVC提供的<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>还是其他Servlet组件，因为Filter是Servlet规范定义的标准组件，它可以应用在任何基于Servlet的程序中。</p>

<p>如果只基于Spring MVC开发应用程序，还可以使用Spring MVC提供的一种功能类似Filter的拦截器：Interceptor。和Filter相比，Interceptor拦截范围不是后续整个处理流程，而是仅针对Controller拦截：</p>

<pre><code class="language-ascii">       │   ▲
       ▼   │
     ┌───────┐
     │Filter1│
     └───────┘
       │   ▲
       ▼   │
     ┌───────┐
     │Filter2│
     └───────┘
       │   ▲
       ▼   │
┌─────────────────┐
│DispatcherServlet│&lt;───┐
└─────────────────┘    │
 │ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┼ ─ ─ ─ ┐
 │                     │
 │ │            ┌────────────┐ │
 │              │   Render   │
 │ │            └────────────┘ │
 │                     ▲
 │ │                   │       │
 │              ┌────────────┐
 │ │            │ModelAndView│ │
 │              └────────────┘
 │ │                   ▲       │
 │    ┌───────────┐    │
 ├─┼─&gt;│Controller1│────┤       │
 │    └───────────┘    │
 │ │                   │       │
 │    ┌───────────┐    │
 └─┼─&gt;│Controller2│────┘       │
      └───────────┘
   └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>上图虚线框就是Interceptor的拦截范围，Controller的处理方法一般都类似这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Controller1</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/path/to/hello"</span><span class="o">)</span>
    <span class="nc">ModelAndView</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>所以，Interceptor的拦截范围其实就是Controller方法，它实际上就相当于基于AOP的方法拦截。因为Interceptor只拦截Controller方法，所以要注意，返回<code class="language-plaintext highlighter-rouge">ModelAndView</code>并渲染后，后续处理就脱离了Interceptor的拦截范围。</p>

<p>使用Interceptor的好处是Interceptor本身是Spring管理的Bean，因此注入任意Bean都非常简单。此外，可以应用多个Interceptor，并通过简单的<code class="language-plaintext highlighter-rouge">@Order</code>指定顺序。先写一个<code class="language-plaintext highlighter-rouge">LoggerInterceptor</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoggerInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"preHandle {}..."</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"debug"</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;p&gt;DEBUG MODE&lt;/p&gt;"</span><span class="o">);</span>
            <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"postHandle {}."</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">modelAndView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__time__"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"afterCompletion {}: exception = {}"</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">(),</span> <span class="n">ex</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>一个Interceptor必须实现<code class="language-plaintext highlighter-rouge">HandlerInterceptor</code>接口，可以选择实现<code class="language-plaintext highlighter-rouge">preHandle()</code>、<code class="language-plaintext highlighter-rouge">postHandle()</code>和<code class="language-plaintext highlighter-rouge">afterCompletion()</code>方法。<code class="language-plaintext highlighter-rouge">preHandle()</code>是Controller方法调用前执行，<code class="language-plaintext highlighter-rouge">postHandle()</code>是Controller方法正常返回后执行，而<code class="language-plaintext highlighter-rouge">afterCompletion()</code>无论Controller方法是否抛异常都会执行，参数<code class="language-plaintext highlighter-rouge">ex</code>就是Controller方法抛出的异常（未抛出异常是<code class="language-plaintext highlighter-rouge">null</code>）。</p>

<p>在<code class="language-plaintext highlighter-rouge">preHandle()</code>中，也可以直接处理响应，返回<code class="language-plaintext highlighter-rouge">false</code>表示无需调用Controller方法继续处理，通常在认证或者安全检查失败时直接返回错误响应。在<code class="language-plaintext highlighter-rouge">postHandle()</code>中，因为捕获了Controller方法返回的<code class="language-plaintext highlighter-rouge">ModelAndView</code>，所以可以继续往<code class="language-plaintext highlighter-rouge">ModelAndView</code>里添加一些通用数据，很多页面需要的全局数据如Copyright信息等都可以放到这里，无需在每个Controller方法中重复添加。</p>

<p>最后，要让拦截器生效，我们在<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>中注册所有的Interceptor：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">HandlerInterceptor</span><span class="o">[]</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">interceptor</span> <span class="o">:</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">interceptor</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="o">...</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果拦截器没有生效，请检查是否忘了在WebMvcConfigurer中注册。</p>

<p>如果是通过xml配置，则<code class="language-plaintext highlighter-rouge">LoggerInterceptor</code>照旧，但可以去掉<code class="language-plaintext highlighter-rouge">@Component</code>，如果不需要指定执行顺序，也可以去掉<code class="language-plaintext highlighter-rouge">@Order(1)</code>。xml文件配置如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mvc:interceptors&gt;</span>
    <span class="nt">&lt;mvc:interceptor&gt;</span>
        <span class="c">&lt;!--mapping:哪些路径需要经过拦截器 /**: 表示n层路径 /*:表示一层路径 --&gt;</span>
        <span class="nt">&lt;mvc:mapping</span> <span class="na">path=</span><span class="s">"/**"</span><span class="nt">/&gt;</span>
        <span class="c">&lt;!--exclude-mapping:设置不经过该拦截的路径--&gt;</span>
        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">"/img/*"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">"/css/**"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">"/js/**"</span><span class="nt">/&gt;</span>
        <span class="c">&lt;!--bean表示你自定义的拦截器类路径--&gt;</span>
        <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"com.aotmd.test.LoggerInterceptor"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/mvc:interceptor&gt;</span>
<span class="nt">&lt;/mvc:interceptors&gt;</span>
</code></pre></div></div>

<p>对应的代码是：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">HandlerInterceptor</span><span class="o">[]</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">interceptor</span> <span class="o">:</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">interceptor</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addPathPatterns</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">excludePathPatterns</span><span class="o">(</span><span class="s">"/img/*"</span><span class="o">,</span> <span class="s">"/css/**"</span><span class="o">,</span> <span class="s">"/js/**"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="处理异常">处理异常</h2>

<p>在Controller中，Spring MVC还允许定义基于<code class="language-plaintext highlighter-rouge">@ExceptionHandler</code>注解的异常处理方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">handleUnknowException</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"500.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="n">ex</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">(),</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()));</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>异常处理方法没有固定的方法签名，可以传入<code class="language-plaintext highlighter-rouge">Exception</code>、<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>等，返回值可以是<code class="language-plaintext highlighter-rouge">void</code>，也可以是<code class="language-plaintext highlighter-rouge">ModelAndView</code>，上述代码通过<code class="language-plaintext highlighter-rouge">@ExceptionHandler(RuntimeException.class)</code>表示当发生<code class="language-plaintext highlighter-rouge">RuntimeException</code>的时候，就自动调用此方法处理。</p>

<p>这里返回了一个新的<code class="language-plaintext highlighter-rouge">ModelAndView</code>，这样在应用程序内部如果发生了预料之外的异常，可以给用户显示一个出错页面，而不是简单的500 Internal Server Error或404 Not Found。</p>

<p>也可以编写多个错误处理方法，每个方法针对特定的异常。例如，处理<code class="language-plaintext highlighter-rouge">LoginException</code>使得页面可以自动跳转到登录页。</p>

<p>使用<code class="language-plaintext highlighter-rouge">ExceptionHandler</code>时，要注意它<strong>仅作用于当前的Controller</strong>，即ControllerA中定义的一个<code class="language-plaintext highlighter-rouge">ExceptionHandler</code>方法对ControllerB不起作用。</p>

<p>要在所有Controller生效可以使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解。</p>

<p><code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>用于定义全局控制器增强（Global Controller Advice）类。它允许在多个控制器中共享相同的异常处理逻辑、数据绑定和其他通用的控制器功能。</p>

<p>使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解的类可以包含以下类型的方法：</p>

<ol>
  <li>异常处理方法：使用<code class="language-plaintext highlighter-rouge">@ExceptionHandler</code>注解的方法可以处理控制器中抛出的特定异常。这些方法可以根据异常类型来定义处理逻辑，并返回适当的响应。</li>
  <li>模型属性方法：使用<code class="language-plaintext highlighter-rouge">@ModelAttribute</code>注解的方法可以在每个请求处理方法之前添加模型属性。这些属性可以在多个控制器中共享，并在视图中使用。</li>
  <li>绑定参数预处理方法：使用<code class="language-plaintext highlighter-rouge">@InitBinder</code>注解的方法可以在请求处理方法之前对请求参数进行预处理。这可以包括数据绑定、格式化和验证等操作。</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>类可以应用于整个应用程序，或者可以通过指定特定的包或控制器来限定其作用范围。</p>

<p>以下是一个使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解的示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ControllerAdvice</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GlobalControllerAdvice</span> <span class="o">{</span>

    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">handleException</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 处理异常逻辑</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="s">"Internal Server Error"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@ModelAttribute</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCommonAttributes</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 添加共享的模型属性</span>
        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"appName"</span><span class="o">,</span> <span class="s">"MyApp"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@InitBinder</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initBinder</span><span class="o">(</span><span class="nc">WebDataBinder</span> <span class="n">binder</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 预处理请求参数</span>
        <span class="n">binder</span><span class="o">.</span><span class="na">registerCustomEditor</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nc">CustomLocalDateEditor</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上面的示例中，<code class="language-plaintext highlighter-rouge">GlobalControllerAdvice</code>类使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解进行标注。它包含了一个异常处理方法<code class="language-plaintext highlighter-rouge">handleException</code>，一个模型属性方法<code class="language-plaintext highlighter-rouge">addCommonAttributes</code>，以及一个参数预处理方法<code class="language-plaintext highlighter-rouge">initBinder</code>。这些方法可以在整个应用程序中的多个控制器中共享，并提供统一的处理逻辑和功能。</p>

<p>通过使用<code class="language-plaintext highlighter-rouge">@ControllerAdvice</code>注解，可以将这些通用的控制器增强逻辑集中到一个类中，以提高代码的可维护性和重用性。</p>

<h2 id="处理cors">处理CORS</h2>

<p>在开发REST应用时，很多时候，是通过<strong>页面</strong>的JavaScript和后端的REST API交互。</p>

<p>在JavaScript与REST交互的时候，有很多安全限制。默认情况下，<strong>浏览器</strong>按同源策略放行JavaScript调用API，即：</p>

<ul>
  <li>如果A站在域名<code class="language-plaintext highlighter-rouge">a.com</code>页面的JavaScript调用A站自己的API时，没有问题；</li>
  <li>如果A站在域名<code class="language-plaintext highlighter-rouge">a.com</code>页面的JavaScript调用B站<code class="language-plaintext highlighter-rouge">b.com</code>的API时，将被<strong>浏览器</strong>拒绝访问，因为不满足同源策略。</li>
</ul>

<p>同源要求域名要完全相同（<code class="language-plaintext highlighter-rouge">a.com</code>和<code class="language-plaintext highlighter-rouge">www.a.com</code>不同），协议要相同（<code class="language-plaintext highlighter-rouge">http</code>和<code class="language-plaintext highlighter-rouge">https</code>不同），端口要相同 。</p>

<p>那么，在域名<code class="language-plaintext highlighter-rouge">a.com</code>页面的JavaScript要调用B站<code class="language-plaintext highlighter-rouge">b.com</code>的API时，还有没有办法？</p>

<p>办法是有的，那就是CORS，全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源。如果A站的JavaScript访问B站API的时候，B站能够返回响应头<code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin: http://a.com</code>，那么，<strong>浏览器</strong>就允许A站的JavaScript访问B站的API。</p>

<p>注意到跨域访问能否成功，取决于B站是否愿意给A站返回一个正确的<code class="language-plaintext highlighter-rouge">Access-Control-Allow-Origin</code>响应头，所以决定权永远在提供API的服务方手中。详细信息可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN文档</a>。</p>

<p>使用Spring的<code class="language-plaintext highlighter-rouge">@RestController</code>开发REST应用时，同样会面对跨域问题。如果我们允许指定的网站通过页面JavaScript访问这些REST API，就必须正确地设置CORS。</p>

<h3 id="使用crossorigin">使用<code class="language-plaintext highlighter-rouge">@CrossOrigin</code></h3>

<p>第一种方法是使用<code class="language-plaintext highlighter-rouge">@CrossOrigin</code>注解，可以在<code class="language-plaintext highlighter-rouge">@RestController</code>的class级别或方法级别定义一个<code class="language-plaintext highlighter-rouge">@CrossOrigin</code>，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">"http://a.com:8080"</span><span class="o">)</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述定义在<code class="language-plaintext highlighter-rouge">ApiController</code>处的<code class="language-plaintext highlighter-rouge">@CrossOrigin</code>指定了只允许来自<code class="language-plaintext highlighter-rouge">a.com:8080</code>跨域访问，允许多个域访问需要写成数组形式，例如<code class="language-plaintext highlighter-rouge">origins = {"http://a.com:8080", "https://www.b.com:8080"})</code>。如果要允许任何域访问，写成<code class="language-plaintext highlighter-rouge">origins = "*"</code>即可。</p>

<p>如果有多个REST Controller都需要使用CORS，那么，每个Controller<strong>都必须标注</strong><code class="language-plaintext highlighter-rouge">@CrossOrigin</code>注解。</p>

<h3 id="使用corsregistry">使用<code class="language-plaintext highlighter-rouge">CorsRegistry</code></h3>

<p>第二种方法是在<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>中定义一个全局CORS配置，下面是一个示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/api/**"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://a.com:8080"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
            <span class="c1">// 可以继续添加其他URL规则:</span>
            <span class="c1">// registry.addMapping("/rest/v2/**")...</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这种方式可以创建一个全局CORS配置，如果仔细地设计URL结构，那么可以一目了然地看到各个URL的CORS规则，推荐使用这种方式配置CORS。</p>

<hr />

<p>在Spring框架中，<code class="language-plaintext highlighter-rouge">CorsRegistry</code>是用于配置跨域资源共享（CORS）的类。它包含了一些方法，用于配置允许跨域请求的规则。以下是CorsRegistry中常用的方法：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">addMapping(String pattern)</code></strong>：用于指定允许跨域请求的路径模式。可以使用Ant样式的路径模式，例如”/api/**“。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">allowedOrigins(String... origins)</code></strong>：用于指定允许跨域请求的来源。可以传入一个或多个允许的来源，例如<code class="language-plaintext highlighter-rouge">http://example.com</code>或<code class="language-plaintext highlighter-rouge">*</code>（表示允许所有来源）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">allowedMethods(String... methods)</code></strong>：用于指定允许的请求方法，例如GET、POST、PUT等。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">allowedHeaders(String... headers)</code></strong>：用于指定允许的请求头，例如”Content-Type”、”Authorization”等。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">exposedHeaders(String... headers)</code></strong>：用于指定在响应中可以暴露给客户端的响应头。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">allowCredentials(boolean allowCredentials)</code></strong>：用于指定是否允许发送身份验证信息（如cookies）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">maxAge(long maxAge)</code></strong>：用于指定预检请求的有效期（以秒为单位）。</li>
</ol>

<p>这些方法可以通过CorsRegistry对象调用，以配置CORS规则，确保你的应用程序可以安全地处理跨域请求。</p>

<p>以下是一个常用的调用代码示例，用于在Spring框架中配置CorsRegistry：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableWebMvc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/api/**"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://localhost:8080"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">,</span> <span class="s">"PUT"</span><span class="o">,</span> <span class="s">"DELETE"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedHeaders</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">,</span> <span class="s">"Cache-Control"</span><span class="o">,</span> <span class="s">"Content-Type"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">exposedHeaders</span><span class="o">(</span><span class="s">"header1"</span><span class="o">,</span> <span class="s">"header2"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在这个示例中，我们创建了一个名为WebConfig的类，并实现了WebMvcConfigurer接口。通过覆盖addCorsMappings方法，可以配置CorsRegistry。</p>

<p>在addCorsMappings方法中，使用registry对象调用了一系列方法来配置CORS规则：</p>
<ul>
  <li>使用addMapping指定了允许跨域请求的路径模式为”/api/**“。</li>
  <li>使用allowedOrigins指定了允许的来源为<code class="language-plaintext highlighter-rouge">http://localhost:8080</code>。</li>
  <li>使用allowedMethods指定了允许的请求方法为GET、POST、PUT和DELETE。</li>
  <li>使用allowedHeaders指定了允许的请求头为”Authorization”、”Cache-Control”和”Content-Type”。</li>
  <li>使用exposedHeaders指定了在响应中可以暴露给客户端的响应头为”header1”和”header2”。</li>
  <li>使用allowCredentials指定了允许发送身份验证信息（如cookies）。</li>
  <li>使用maxAge指定了预检请求的有效期为3600秒。</li>
</ul>

<p>通过这样的配置，我们可以确保我们的应用程序可以安全地处理跨域请求，并且只允许来自指定来源的特定请求方法和请求头。</p>

<hr />

<h3 id="写一个corsfilter">写一个<code class="language-plaintext highlighter-rouge">CORSFilter</code></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CORSFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span> 
            <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">HttpServletRequest</span> <span class="n">req</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">;</span>
        <span class="nc">HttpServletResponse</span> <span class="n">resp</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletResponse</span><span class="o">)</span> <span class="n">response</span><span class="o">;</span>

        <span class="c1">// 设置CORS头信息</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Origin"</span><span class="o">,</span> <span class="s">"http://127.0.0.1:5500"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Methods"</span><span class="o">,</span> <span class="s">"GET, POST, PUT, DELETE, OPTIONS"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Headers"</span><span class="o">,</span> <span class="s">"Content-Type, Signature-Method, Signature"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Credentials"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Max-Age"</span><span class="o">,</span> <span class="s">"3600"</span><span class="o">);</span>

        <span class="c1">// 处理预检请求</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"OPTIONS"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getMethod</span><span class="o">()))</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="nc">HttpServletResponse</span><span class="o">.</span><span class="na">SC_OK</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 继续执行其他过滤器或目标资源</span>
        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 清理代码，如果有需要</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果有多个网址，可以通过逗号分隔：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Origin"</span><span class="o">,</span> <span class="s">"http://127.0.0.1:5500, http://example.com"</span><span class="o">);</span>
</code></pre></div></div>

<p>如果允许所有IP，可以直接设置一个<code class="language-plaintext highlighter-rouge">*</code>号，如果允许指定ip的所有端口，可以这样写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Access-Control-Allow-Origin"</span><span class="o">,</span> <span class="s">"http://127.0.0.1:*"</span><span class="o">);</span>
</code></pre></div></div>

<p>如果想允许来自 <code class="language-plaintext highlighter-rouge">http://127.0.0.*</code> 这样的多个 IP 的请求，需要单独设置每个 IP，不能使用通配符来表示。</p>

<p>注意过滤器顺序：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>CORSFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>com.example.CORSFilter<span class="nt">&lt;/filter-class&gt;</span>
<span class="nt">&lt;/filter&gt;</span>
<span class="nt">&lt;filter-mapping&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>CORSFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<p>当然如果HTML 文件是通过本地文件系统打开的（例如使用 <code class="language-plaintext highlighter-rouge">file://</code> 协议），而不是通过 Web 服务器（例如 <code class="language-plaintext highlighter-rouge">http://</code> 或 <code class="language-plaintext highlighter-rouge">https://</code>）访问的，那么跨域请求的限制则不适用。本地文件可以自由加载其他本地文件，不受跨域请求的限制。</p>

<p>因此，如果HTML 文件是通过本地文件系统打开的，而不是通过 Web 服务器访问的，无需设置任何 CORS 相关的头，可以直接进行跨域请求。</p>

<hr />

<h3 id="测试">测试</h3>

<p>当配置好CORS后，可以在浏览器中测试一下规则是否生效。写一个前端：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>接口测试<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>接口测试<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"apiTestForm"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div&gt;</span>
            <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"jsonData"</span><span class="nt">&gt;</span>输入JSON：<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"jsonData"</span> <span class="na">rows=</span><span class="s">"10"</span> <span class="na">cols=</span><span class="s">"50"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;</span>
            <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"apiUrl"</span><span class="nt">&gt;</span>接口URL：<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"apiUrl"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">id=</span><span class="s">"post"</span> <span class="na">name=</span><span class="s">"requestType"</span> <span class="na">value=</span><span class="s">"post"</span> <span class="na">checked</span><span class="nt">&gt;</span>
            <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"post"</span><span class="nt">&gt;</span>POST<span class="nt">&lt;/label&gt;</span>
            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">id=</span><span class="s">"get"</span> <span class="na">name=</span><span class="s">"requestType"</span> <span class="na">value=</span><span class="s">"get"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"get"</span><span class="nt">&gt;</span>GET<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div&gt;</span>
            <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">onclick=</span><span class="s">"submitData()"</span><span class="nt">&gt;</span>提交<span class="nt">&lt;/button&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;div&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"jsonData"</span><span class="nt">&gt;</span>返回内容：<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"jsonData2"</span> <span class="na">rows=</span><span class="s">"10"</span> <span class="na">cols=</span><span class="s">"50"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;script&gt;</span>
    <span class="kd">function</span> <span class="nx">submitData</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">jsonData</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">jsonData</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">apiUrl</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">requestType</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[name="requestType"]:checked</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">requestOptions</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">method</span><span class="p">:</span> <span class="nx">requestType</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(),</span>
            <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span>
            <span class="p">}</span>
        <span class="p">};</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">requestType</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">requestOptions</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">jsonData</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kd">var</span> <span class="nx">jsonData2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">jsonData2</span><span class="dl">'</span><span class="p">)</span>
        <span class="nx">fetch</span><span class="p">(</span><span class="nx">apiUrl</span><span class="p">,</span> <span class="nx">requestOptions</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Network response was not ok</span><span class="dl">'</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// 在这里处理从接口返回的数据</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">data</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// 将对象转换为 JSON 字符串</span>
                <span class="p">}</span>
                <span class="nx">jsonData2</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">jsonData2</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">error</span><span class="p">;</span>
                <span class="c1">// 在这里处理错误</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>然后用vscode开启Live Server，启用5500端口，此时网址为：<code class="language-plaintext highlighter-rouge">http://127.0.0.1:5500</code>。</p>

<p>测试<code class="language-plaintext highlighter-rouge">http://127.0.0.1:8080/api/signin</code>，json：<code class="language-plaintext highlighter-rouge">{"email":"tom@example.com","password":"tomcat","name":"test"}</code>，post方式，提交。</p>

<p>输入接口URL：<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/users</code>，get方式，提交，控制台无报错。返回：<code class="language-plaintext highlighter-rouge">[{"id":0,"email":"tom@example.com","password":"tomcat","name":"test","createdAt":时间戳}]</code>。</p>

<p>相关控制器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>服务层：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="国际化">国际化</h2>

<p>在开发应用程序的时候，经常会遇到支持多语言的需求，这种支持多语言的功能称之为国际化，英文是internationalization，缩写为i18n（因为首字母i和末字母n中间有18个字母）。</p>

<p>还有针对特定地区的本地化功能，英文是localization，缩写为L10n，本地化是指根据地区调整类似姓名、日期的显示等。</p>

<p>也有把上面两者合称为全球化，英文是globalization，缩写为g11n。</p>

<p>在Java中，支持多语言和本地化是通过<code class="language-plaintext highlighter-rouge">MessageFormat</code>配合<code class="language-plaintext highlighter-rouge">Locale</code>实现的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">price</span> <span class="o">=</span> <span class="mf">123.5</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="nc">Object</span><span class="o">[]</span> <span class="n">arguments</span> <span class="o">=</span> <span class="o">{</span> <span class="n">price</span><span class="o">,</span> <span class="n">number</span> <span class="o">};</span>
<span class="nc">MessageFormat</span> <span class="n">mfUS</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageFormat</span><span class="o">(</span><span class="s">"Pay {0,number,currency} for {1} books."</span><span class="o">,</span> <span class="nc">Locale</span><span class="o">.</span><span class="na">US</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mfUS</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">arguments</span><span class="o">));</span>
<span class="nc">MessageFormat</span> <span class="n">mfZH</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageFormat</span><span class="o">(</span><span class="s">"{1}本书一共{0,number,currency}。"</span><span class="o">,</span> <span class="nc">Locale</span><span class="o">.</span><span class="na">CHINA</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mfZH</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">arguments</span><span class="o">));</span>
</code></pre></div></div>

<p>对于Web应用程序，要实现国际化功能，主要是渲染View的时候，要把各种语言的资源文件提出来，这样，不同的用户访问同一个页面时，显示的语言就是不同的。</p>

<h3 id="获取locale">获取<code class="language-plaintext highlighter-rouge">Locale</code></h3>

<p>实现国际化的第一步是获取到用户的<code class="language-plaintext highlighter-rouge">Locale</code>。在Web应用程序中，HTTP规范规定了浏览器会在请求中携带<code class="language-plaintext highlighter-rouge">Accept-Language</code>头，用来指示用户浏览器设定的语言顺序，如：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Accept-Language: zh-CN,zh;q=0.8,en;q=0.2
</code></pre></div></div>

<p>上述HTTP请求头表示优先选择简体中文，其次选择中文，最后选择英文。<code class="language-plaintext highlighter-rouge">q</code>表示权重，解析后可获得一个根据优先级排序的语言列表，把它转换为Java的<code class="language-plaintext highlighter-rouge">Locale</code>，即获得了用户的<code class="language-plaintext highlighter-rouge">Locale</code>。大多数框架通常只返回权重最高的<code class="language-plaintext highlighter-rouge">Locale</code>。</p>

<p>Spring MVC通过<code class="language-plaintext highlighter-rouge">LocaleResolver</code>来自动从<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>中获取<code class="language-plaintext highlighter-rouge">Locale</code>。有多种<code class="language-plaintext highlighter-rouge">LocaleResolver</code>的实现类，其中最常用的是<code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Primary</span>
<span class="nd">@Bean</span>
<span class="nc">LocaleResolver</span> <span class="nf">createLocaleResolver</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">clr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CookieLocaleResolver</span><span class="o">();</span>
    <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultLocale</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
    <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultTimeZone</span><span class="o">(</span><span class="nc">TimeZone</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">clr</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>从<code class="language-plaintext highlighter-rouge">HttpServletRequest</code>中获取<code class="language-plaintext highlighter-rouge">Locale</code>时，首先根据一个特定的Cookie判断是否指定了<code class="language-plaintext highlighter-rouge">Locale</code>，如果没有，就从HTTP头获取，如果还没有，就返回默认的<code class="language-plaintext highlighter-rouge">Locale</code>。</p>

<p>当用户第一次访问网站时，<code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>只能从HTTP头获取<code class="language-plaintext highlighter-rouge">Locale</code>，即使用浏览器的默认语言。通常网站也允许用户自己选择语言，此时，<code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>就会把用户选择的语言存放到Cookie中，下一次访问时，就会返回用户上次选择的语言而不是浏览器默认语言。</p>

<p><code class="language-plaintext highlighter-rouge">CookieLocaleResolver</code>读取Locale的顺序是<strong>先从<code class="language-plaintext highlighter-rouge">cookie</code>读取，再看有没有设置默认locale,最后从<code class="language-plaintext highlighter-rouge">accept-language</code>中读取。</strong></p>

<h3 id="提取资源文件">提取资源文件</h3>

<p>第二步是把写死在模板中的字符串以资源文件的方式存储在外部。对于多语言，主文件名如果命名为<code class="language-plaintext highlighter-rouge">messages</code>，那么资源文件必须按如下方式命名并放入classpath中：</p>

<ul>
  <li>默认语言，文件名必须为<code class="language-plaintext highlighter-rouge">messages.properties</code>；</li>
  <li>简体中文，Locale是<code class="language-plaintext highlighter-rouge">zh_CN</code>，文件名必须为<code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>；</li>
  <li>日文，Locale是<code class="language-plaintext highlighter-rouge">ja_JP</code>，文件名必须为<code class="language-plaintext highlighter-rouge">messages_ja_JP.properties</code>；</li>
  <li>其它更多语言……</li>
</ul>

<p>每个资源文件都有相同的key，例如，默认语言是英文，文件<code class="language-plaintext highlighter-rouge">messages.properties</code>内容如下：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">Language</span>
<span class="py">home</span><span class="p">=</span><span class="s">Home</span>
<span class="py">signin</span><span class="p">=</span><span class="s">Sign In</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">Copyright©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">hello</span>
</code></pre></div></div>

<p>文件<code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>内容如下：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">语言</span>
<span class="py">home</span><span class="p">=</span><span class="s">首页</span>
<span class="py">signin</span><span class="p">=</span><span class="s">登录</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">版权所有©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">你好</span>
</code></pre></div></div>

<h3 id="创建messagesource">创建<code class="language-plaintext highlighter-rouge">MessageSource</code></h3>

<p>第三步是创建一个Spring提供的<code class="language-plaintext highlighter-rouge">MessageSource</code>实例，它自动读取所有的<code class="language-plaintext highlighter-rouge">.properties</code>文件，并提供一个统一接口来实现“翻译”：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// code, arguments, locale:</span>
<span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="s">"signin"</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">signin</code>是在<code class="language-plaintext highlighter-rouge">.properties</code>文件中定义的key，第二个参数是<code class="language-plaintext highlighter-rouge">Object[]</code>数组作为格式化时传入的参数，最后一个参数就是获取的用户<code class="language-plaintext highlighter-rouge">Locale</code>实例。</p>

<p>创建<code class="language-plaintext highlighter-rouge">MessageSource</code>如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
<span class="nc">MessageSource</span> <span class="nf">createMessageSource</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">messageSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResourceBundleMessageSource</span><span class="o">();</span>
    <span class="c1">// 指定文件是UTF-8编码:</span>
    <span class="n">messageSource</span><span class="o">.</span><span class="na">setDefaultEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
    <span class="c1">// 指定主文件名:</span>
    <span class="n">messageSource</span><span class="o">.</span><span class="na">setBasename</span><span class="o">(</span><span class="s">"messages"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">messageSource</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ResourceBundleMessageSource</code>会自动根据主文件名自动把所有相关语言的资源文件都读进来。</p>

<p>Spring容器会创建不只一个<code class="language-plaintext highlighter-rouge">MessageSource</code>实例，我们自己创建的这个<code class="language-plaintext highlighter-rouge">MessageSource</code>是专门给页面国际化使用的，因此命名为<code class="language-plaintext highlighter-rouge">i18n</code>，不会与其它<code class="language-plaintext highlighter-rouge">MessageSource</code>实例冲突。</p>

<h3 id="实现多语言">实现多语言</h3>

<p>要在View中使用<code class="language-plaintext highlighter-rouge">MessageSource</code>加上<code class="language-plaintext highlighter-rouge">Locale</code>输出多语言，可以通过编写一个<code class="language-plaintext highlighter-rouge">MvcInterceptor</code>，把相关资源注入到<code class="language-plaintext highlighter-rouge">ModelAndView</code>中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>

    <span class="c1">// 注意注入的MessageSource名称是i18n:</span>
    <span class="nd">@Autowired</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
    <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">modelAndView</span> <span class="o">!=</span> <span class="kc">null</span> <span class="c1">// 返回了ModelAndView</span>
            <span class="o">&amp;&amp;</span> <span class="n">modelAndView</span><span class="o">.</span><span class="na">getViewName</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="c1">// 设置了View</span>
            <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">modelAndView</span><span class="o">.</span><span class="na">getViewName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"redirect:"</span><span class="o">)</span> <span class="c1">// 不是重定向</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 解析用户的Locale:</span>
            <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="n">localeResolver</span><span class="o">.</span><span class="na">resolveLocale</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="c1">// 放入Model:</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__messageSource__"</span><span class="o">,</span> <span class="n">messageSource</span><span class="o">);</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__locale__"</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>并在<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>中注册<code class="language-plaintext highlighter-rouge">MvcInterceptor</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">HandlerInterceptor</span><span class="o">[]</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">interceptor</span> <span class="o">:</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">interceptor</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="o">...</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在，就可以在View中调用<code class="language-plaintext highlighter-rouge">MessageSource.getMessage()</code>方法来实现多语言：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/signin"</span><span class="nt">&gt;&lt;/a&gt;</span>
</code></pre></div></div>

<p>上述这种写法虽然可行，但格式太复杂了。使用View时，要根据每个特定的View引擎定制国际化函数。在Pebble中，可以封装一个国际化函数，名称就是下划线<code class="language-plaintext highlighter-rouge">_</code>，改造一下创建<code class="language-plaintext highlighter-rouge">ViewResolver</code>的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">,</span> <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
            <span class="c1">// cache:</span>
            <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
            <span class="c1">// loader:</span>
            <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
            <span class="c1">// 添加扩展:</span>
            <span class="o">.</span><span class="na">extension</span><span class="o">(</span><span class="n">createExtension</span><span class="o">(</span><span class="n">messageSource</span><span class="o">))</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">private</span> <span class="nc">Extension</span> <span class="nf">createExtension</span><span class="o">(</span><span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">AbstractExtension</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Function</span><span class="o">&gt;</span> <span class="nf">getFunctions</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"_"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Function</span><span class="o">()</span> <span class="o">{</span>
                <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">args</span><span class="o">,</span> <span class="nc">PebbleTemplate</span> <span class="n">self</span><span class="o">,</span> <span class="nc">EvaluationContext</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">args</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">extractArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
                    <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Locale</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getVariable</span><span class="o">(</span><span class="s">"__locale__"</span><span class="o">);</span>
                    <span class="k">return</span> <span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">arguments</span><span class="o">.</span><span class="na">toArray</span><span class="o">(),</span> <span class="s">"???"</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">"???"</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">extractArguments</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
                        <span class="nc">Object</span> <span class="n">param</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
                        <span class="n">arguments</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">param</span><span class="o">);</span>
                        <span class="n">i</span><span class="o">++;</span>
                    <span class="o">}</span>
                    <span class="k">return</span> <span class="n">arguments</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getArgumentNames</span><span class="o">()</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">});</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，我们可以把多语言页面改写为：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/signin"</span><span class="nt">&gt;&lt;/a&gt;</span>
</code></pre></div></div>

<p>如果是带参数的多语言，需要把参数传进去：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h5&gt;&lt;/h5&gt;</span>
</code></pre></div></div>

<p>使用其它View引擎时，也应当根据引擎接口实现更方便的语法。</p>

<hr />

<p>也可以直接把pebble-spring已经实现的SpringExtension拿来用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">,</span> <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
            <span class="c1">// cache:</span>
            <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
            <span class="c1">// loader:</span>
            <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
            <span class="c1">// 添加扩展:</span>
            <span class="o">.</span><span class="na">extension</span><span class="o">(</span><span class="k">new</span> <span class="nc">SpringExtension</span><span class="o">(</span><span class="n">messageSource</span><span class="o">))</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
    <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后在模板里，可以直接使用MessageSourceFunction定义的函数message(…)：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/signin"</span><span class="nt">&gt;&lt;/a&gt;</span>
</code></pre></div></div>

<h3 id="切换locale">切换<code class="language-plaintext highlighter-rouge">Locale</code></h3>

<p>如果需要允许用户手动切换<code class="language-plaintext highlighter-rouge">Locale</code>，可以编写一个<code class="language-plaintext highlighter-rouge">LocaleController</code>来实现该功能：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">LocaleController</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/locale/{lo}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">setLocale</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"lo"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">lo</span><span class="o">,</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 根据传入的lo创建Locale实例:</span>
        <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">'_'</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">pos</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">country</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Locale</span><span class="o">(</span><span class="n">lang</span><span class="o">,</span> <span class="n">country</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Locale</span><span class="o">(</span><span class="n">lo</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 设定此Locale:</span>
        <span class="n">localeResolver</span><span class="o">.</span><span class="na">setLocale</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"locale is set to {}."</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="c1">// 刷新页面:</span>
        <span class="nc">String</span> <span class="n">referer</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Referer"</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"redirect:"</span> <span class="o">+</span> <span class="o">(</span><span class="n">referer</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">"/"</span> <span class="o">:</span> <span class="n">referer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/locale/en</code>即可切换到 <code class="language-plaintext highlighter-rouge">messages_en.properties</code>文件内容。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/locale/zh</code>即可切换到<code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>文件。</p>

<p><code class="language-plaintext highlighter-rouge">templates/index.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>也可以通过spring自带的一个通过GET请求参数传递并修改locale的<code class="language-plaintext highlighter-rouge">LocaleChangeInterceptor</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
		<span class="o">...</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">LocaleChangeInterceptor</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocaleChangeInterceptor</span><span class="o">();</span>
            <span class="n">l</span><span class="o">.</span><span class="na">setParamName</span><span class="o">(</span><span class="s">"lang"</span><span class="o">);</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以代替MvcInterceptor和LocaleController组合，直接通过类似<code class="language-plaintext highlighter-rouge">request_url/?lang=en</code>方式修改locale，他的要点则是需要注入我们自己的CookieLocaleResolver作为他的LocaleResolver，办法也很简单，给我们的bean添加一个别名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"localeResolver"</span><span class="o">)</span>
<span class="nc">LocaleResolver</span> <span class="nf">createLocaleResolver</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">clr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CookieLocaleResolver</span><span class="o">();</span>
    <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultLocale</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
    <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultTimeZone</span><span class="o">(</span><span class="nc">TimeZone</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">clr</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其实pebble内置了一个i18n函数，和message也大致相同，不同的是没有用到ResourceBundleMessageSource，需要在用的时候给出bundle名，如：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h3 id="实例">实例</h3>

<p>完整代码1：</p>

<p><code class="language-plaintext highlighter-rouge">Test4.java</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.extension.AbstractExtension</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.extension.Extension</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.extension.Function</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.template.EvaluationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.template.PebbleTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mybatis.spring.annotation.MapperScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.MessageSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Primary</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ResourceBundleMessageSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.EnableTransactionManagement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PathVariable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.HandlerInterceptor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.LocaleResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ModelAndView</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.i18n.CookieLocaleResolver</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>


<span class="cm">/**
 * @author aotmd
 * @version 1.0
 * @date 2024/6/1 22:16
 */</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="c1">//Locale.setDefault(Locale.ENGLISH);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">HandlerInterceptor</span><span class="o">[]</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://127.0.0.1:5500"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
                <span class="c1">// 可以继续添加其他URL规则:</span>
                <span class="c1">// registry.addMapping("/rest/v2/**")...</span>
            <span class="o">}</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">interceptor</span> <span class="o">:</span> <span class="n">interceptors</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">interceptor</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
    <span class="nc">MessageSource</span> <span class="nf">createMessageSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">messageSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResourceBundleMessageSource</span><span class="o">();</span>
        <span class="c1">// 指定文件是UTF-8编码:</span>
        <span class="n">messageSource</span><span class="o">.</span><span class="na">setDefaultEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 指定主文件名:</span>
        <span class="n">messageSource</span><span class="o">.</span><span class="na">setBasename</span><span class="o">(</span><span class="s">"messages"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">messageSource</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">,</span> <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="c1">// 添加扩展:</span>
                <span class="o">.</span><span class="na">extension</span><span class="o">(</span><span class="n">createExtension</span><span class="o">(</span><span class="n">messageSource</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Extension</span> <span class="nf">createExtension</span><span class="o">(</span><span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AbstractExtension</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Function</span><span class="o">&gt;</span> <span class="nf">getFunctions</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"_"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Function</span><span class="o">()</span> <span class="o">{</span>
                    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">args</span><span class="o">,</span> <span class="nc">PebbleTemplate</span> <span class="n">self</span><span class="o">,</span> <span class="nc">EvaluationContext</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">args</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
                        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">extractArguments</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
                        <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Locale</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getVariable</span><span class="o">(</span><span class="s">"__locale__"</span><span class="o">);</span>
                        <span class="k">return</span> <span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">arguments</span><span class="o">.</span><span class="na">toArray</span><span class="o">(),</span> <span class="s">"???"</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">"???"</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">extractArguments</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
                        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
                        <span class="k">while</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
                            <span class="nc">Object</span> <span class="n">param</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
                            <span class="n">arguments</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">param</span><span class="o">);</span>
                            <span class="n">i</span><span class="o">++;</span>
                        <span class="o">}</span>
                        <span class="k">return</span> <span class="n">arguments</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getArgumentNames</span><span class="o">()</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">});</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span>
    <span class="nc">LocaleResolver</span> <span class="nf">createLocaleResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">clr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CookieLocaleResolver</span><span class="o">();</span>
        <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultLocale</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultTimeZone</span><span class="o">(</span><span class="nc">TimeZone</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">clr</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>


<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MvcInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>

    <span class="c1">// 注意注入的MessageSource名称是i18n:</span>
    <span class="nd">@Autowired</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
    <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">modelAndView</span> <span class="o">!=</span> <span class="kc">null</span> <span class="c1">// 返回了ModelAndView</span>
                <span class="o">&amp;&amp;</span> <span class="n">modelAndView</span><span class="o">.</span><span class="na">getViewName</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="c1">// 设置了View</span>
                <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">modelAndView</span><span class="o">.</span><span class="na">getViewName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"redirect:"</span><span class="o">)</span> <span class="c1">// 不是重定向</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 解析用户的Locale:</span>
            <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="n">localeResolver</span><span class="o">.</span><span class="na">resolveLocale</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="c1">// 放入Model:</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__messageSource__"</span><span class="o">,</span> <span class="n">messageSource</span><span class="o">);</span>
            <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">"__locale__"</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">LocaleController</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">LocaleResolver</span> <span class="n">localeResolver</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/locale/{lo}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">setLocale</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"lo"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">lo</span><span class="o">,</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 根据传入的lo创建Locale实例:</span>
        <span class="nc">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">'_'</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">pos</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">country</span> <span class="o">=</span> <span class="n">lo</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Locale</span><span class="o">(</span><span class="n">lang</span><span class="o">,</span> <span class="n">country</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">locale</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Locale</span><span class="o">(</span><span class="n">lo</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 设定此Locale:</span>
        <span class="n">localeResolver</span><span class="o">.</span><span class="na">setLocale</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"locale is set to {}."</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
        <span class="c1">// 刷新页面:</span>
        <span class="nc">String</span> <span class="n">referer</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Referer"</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"redirect:"</span> <span class="o">+</span> <span class="o">(</span><span class="n">referer</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s">"/"</span> <span class="o">:</span> <span class="n">referer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">src/main/webapp/WEB-INF/templates/index.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">web.xml</code>:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>
         <span class="na">version=</span><span class="s">"4.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;servlet&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextClass<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>com.aotmd.test.Test4<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;load-on-startup&gt;</span>0<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;/servlet&gt;</span>

    <span class="nt">&lt;servlet-mapping&gt;</span>
        <span class="nt">&lt;servlet-name&gt;</span>dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/servlet-mapping&gt;</span>

    <span class="nt">&lt;filter&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>UTF-8<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
        <span class="nt">&lt;init-param&gt;</span>
            <span class="nt">&lt;param-name&gt;</span>forceEncoding<span class="nt">&lt;/param-name&gt;</span>
            <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
        <span class="nt">&lt;/init-param&gt;</span>
    <span class="nt">&lt;/filter&gt;</span>

    <span class="nt">&lt;filter-mapping&gt;</span>
        <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
        <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
    <span class="nt">&lt;/filter-mapping&gt;</span>

<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">messages.properties</code></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">Language</span>
<span class="py">home</span><span class="p">=</span><span class="s">Home</span>
<span class="py">signin</span><span class="p">=</span><span class="s">Sign In</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">Copyright©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">hello</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">messages_en.properties</code></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">Language</span>
<span class="py">home</span><span class="p">=</span><span class="s">Home</span>
<span class="py">signin</span><span class="p">=</span><span class="s">Sign In</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">Copyright©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">hello</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">language.select</span><span class="p">=</span><span class="s">语言</span>
<span class="py">home</span><span class="p">=</span><span class="s">首页</span>
<span class="py">signin</span><span class="p">=</span><span class="s">登录</span>
<span class="py">copyright</span><span class="p">=</span><span class="s">版权所有©{0,number,#}</span>
<span class="py">hello</span><span class="p">=</span><span class="s">你好</span>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/locale/en</code>即可切换到 <code class="language-plaintext highlighter-rouge">messages_en.properties</code>文件内容。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/locale/zh</code>即可切换到<code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>文件。</p>

<p>完整代码2，在1上修改：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.extension.SpringExtension</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.MessageSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ResourceBundleMessageSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.LocaleResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.i18n.CookieLocaleResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.i18n.LocaleChangeInterceptor</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TimeZone</span><span class="o">;</span>


<span class="cm">/**
 * @author aotmd
 * @version 1.0
 * @date 2024/6/1 22:16
 */</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="c1">//Locale.setDefault(Locale.ENGLISH);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://127.0.0.1:5500"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
                <span class="c1">// 可以继续添加其他URL规则:</span>
                <span class="c1">// registry.addMapping("/rest/v2/**")...</span>
            <span class="o">}</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">LocaleChangeInterceptor</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocaleChangeInterceptor</span><span class="o">();</span>
                <span class="n">l</span><span class="o">.</span><span class="na">setParamName</span><span class="o">(</span><span class="s">"lang"</span><span class="o">);</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span>
    <span class="nc">MessageSource</span> <span class="nf">createMessageSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">messageSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResourceBundleMessageSource</span><span class="o">();</span>
        <span class="c1">// 指定文件是UTF-8编码:</span>
        <span class="n">messageSource</span><span class="o">.</span><span class="na">setDefaultEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 指定主文件名:</span>
        <span class="n">messageSource</span><span class="o">.</span><span class="na">setBasename</span><span class="o">(</span><span class="s">"messages"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">messageSource</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">,</span> <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"i18n"</span><span class="o">)</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="c1">// 添加扩展:</span>
                <span class="o">.</span><span class="na">extension</span><span class="o">(</span><span class="k">new</span> <span class="nc">SpringExtension</span><span class="o">(</span><span class="n">messageSource</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"localeResolver"</span><span class="o">)</span>
    <span class="nc">LocaleResolver</span> <span class="nf">createLocaleResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">clr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CookieLocaleResolver</span><span class="o">();</span>
        <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultLocale</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="n">clr</span><span class="o">.</span><span class="na">setDefaultTimeZone</span><span class="o">(</span><span class="nc">TimeZone</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">clr</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>index.html:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>其他文件不变。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/?lang=en</code>即可切换到 <code class="language-plaintext highlighter-rouge">messages_en.properties</code>文件内容。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/?lang=zh</code>即可切换到 <code class="language-plaintext highlighter-rouge">messages_zh_CN.properties</code>文件内容。</p>

<h2 id="websocket">WebSocket</h2>

<p>WebSocket是一种基于HTTP的长链接技术。传统的HTTP协议是一种请求-响应模型，如果浏览器不发送请求，那么服务器无法主动给浏览器推送数据。如果需要定期给浏览器推送数据，例如股票行情，或者不定期给浏览器推送数据，例如在线聊天，基于HTTP协议实现这类需求，只能依靠浏览器的JavaScript定时轮询，效率很低且实时性不高。</p>

<p>因为HTTP本身是基于TCP连接的，所以，WebSocket在HTTP协议的基础上做了一个简单的升级，即建立TCP连接后，浏览器发送请求时，附带几个头：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /chat HTTP/1.1
Host: www.example.com
Upgrade: websocket
Connection: Upgrade
</code></pre></div></div>

<p>就表示客户端希望升级连接，变成长连接的WebSocket，服务器返回升级成功的响应：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
</code></pre></div></div>

<p>收到成功响应后表示WebSocket“握手”成功，这样，代表WebSocket的这个TCP连接将不会被服务器关闭，而是一直保持，服务器可随时向浏览器推送消息，浏览器也可随时向服务器推送消息。双方推送的消息既可以是文本消息，也可以是二进制消息，一般来说，绝大部分应用程序会推送基于JSON的文本消息。</p>

<p>现代浏览器都已经支持WebSocket协议，服务器则需要底层框架支持。Java的Servlet规范从3.1开始支持WebSocket，所以，必须选择支持Servlet 3.1或更高规范的Servlet容器，才能支持WebSocket。最新版本的Tomcat、Jetty等开源服务器均支持WebSocket。</p>

<p>在Spring MVC中实现对WebSocket的支持，首先，需要在<code class="language-plaintext highlighter-rouge">pom.xml</code>中加入以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat.embed<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>tomcat-embed-websocket<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>9.0.26<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-websocket<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>第一项是嵌入式Tomcat支持WebSocket的组件，第二项是Spring封装的支持WebSocket的接口。</p>

<p>接下来，需要在AppConfig中加入Spring Web对WebSocket的配置，此处需要创建一个<code class="language-plaintext highlighter-rouge">WebSocketConfigurer</code>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebSocketConfigurer</span> <span class="nf">createWebSocketConfigurer</span><span class="o">(</span>
        <span class="nd">@Autowired</span> <span class="nc">ChatHandler</span> <span class="n">chatHandler</span><span class="o">,</span>
        <span class="nd">@Autowired</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="n">chatInterceptor</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebSocketConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerWebSocketHandlers</span><span class="o">(</span><span class="nc">WebSocketHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 把URL与指定的WebSocketHandler关联，可关联多个:</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">chatHandler</span><span class="o">,</span> <span class="s">"/chat"</span><span class="o">).</span><span class="na">addInterceptors</span><span class="o">(</span><span class="n">chatInterceptor</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>此实例在内部通过<code class="language-plaintext highlighter-rouge">WebSocketHandlerRegistry</code>注册能处理WebSocket的<code class="language-plaintext highlighter-rouge">WebSocketHandler</code>，以及可选的WebSocket拦截器<code class="language-plaintext highlighter-rouge">HandshakeInterceptor</code>。注入的这两个类都是自己编写的业务逻辑，这里只需关注浏览器连接到WebSocket的URL是<code class="language-plaintext highlighter-rouge">/chat</code>。</p>

<p>然后需要启用WebSocket：<code class="language-plaintext highlighter-rouge">@EnableWebSocket</code>。</p>

<p><strong>处理WebSocket连接</strong></p>

<p>和处理普通HTTP请求不同，没法用一个方法处理一个URL。Spring提供了<code class="language-plaintext highlighter-rouge">TextWebSocketHandler</code>和<code class="language-plaintext highlighter-rouge">BinaryWebSocketHandler</code>分别处理文本消息和二进制消息，这里我们选择文本消息作为聊天室的协议，因此，<code class="language-plaintext highlighter-rouge">ChatHandler</code>需要继承自<code class="language-plaintext highlighter-rouge">TextWebSocketHandler</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatHandler</span> <span class="kd">extends</span> <span class="nc">TextWebSocketHandler</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当浏览器请求一个WebSocket连接后，如果成功建立连接，Spring会自动调用<code class="language-plaintext highlighter-rouge">afterConnectionEstablished()</code>方法，任何原因导致WebSocket连接中断时，Spring会自动调用<code class="language-plaintext highlighter-rouge">afterConnectionClosed</code>方法，因此，覆写这两个方法即可处理连接成功和结束后的业务逻辑：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatHandler</span> <span class="kd">extends</span> <span class="nc">TextWebSocketHandler</span> <span class="o">{</span>
    <span class="c1">// 保存所有Client的WebSocket会话实例:</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">WebSocketSession</span><span class="o">&gt;</span> <span class="n">clients</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterConnectionEstablished</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 新会话根据ID放入Map:</span>
        <span class="n">clients</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">session</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"Guest1"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterConnectionClosed</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">,</span> <span class="nc">CloseStatus</span> <span class="n">status</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">clients</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>每个WebSocket会话以<code class="language-plaintext highlighter-rouge">WebSocketSession</code>表示，且已分配唯一ID。和WebSocket相关的数据，例如用户名称等，均可放入关联的<code class="language-plaintext highlighter-rouge">getAttributes()</code>中。</p>

<p>用实例变量<code class="language-plaintext highlighter-rouge">clients</code>持有当前所有的<code class="language-plaintext highlighter-rouge">WebSocketSession</code>是为了广播，即向所有用户推送同一消息时，可以这么写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">json</span> <span class="o">=</span> <span class="o">...</span>
<span class="nc">TextMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextMessage</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">clients</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">WebSocketSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">clients</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="n">session</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>发送的消息是序列化后的JSON，可以用<code class="language-plaintext highlighter-rouge">ChatMessage</code>表示：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatMessage</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">long</span> <span class="n">timestamp</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>每收到一个用户的消息后，我们就需要广播给所有用户：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatHandler</span> <span class="kd">extends</span> <span class="nc">TextWebSocketHandler</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleTextMessage</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">,</span> <span class="nc">TextMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getPayload</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">r</span> <span class="o">=</span> <span class="o">...</span> <span class="c1">// 根据输入消息构造待发送消息</span>
        <span class="n">broadcastMessage</span><span class="o">(</span><span class="n">r</span><span class="o">);</span> <span class="c1">// 推送给所有用户</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果要推送给指定的几个用户，那就需要在<code class="language-plaintext highlighter-rouge">clients</code>中根据条件查找出某些<code class="language-plaintext highlighter-rouge">WebSocketSession</code>，然后发送消息。</p>

<p>注意到我们在注册WebSocket时还传入了一个<code class="language-plaintext highlighter-rouge">ChatHandshakeInterceptor</code>，这个类实际上可以从<code class="language-plaintext highlighter-rouge">HttpSessionHandshakeInterceptor</code>继承，它的主要作用是在WebSocket建立连接后，把HttpSession的一些属性复制到WebSocketSession，例如，用户的登录信息等：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="kd">extends</span> <span class="nc">HttpSessionHandshakeInterceptor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">ChatHandshakeInterceptor</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 指定从HttpSession复制属性到WebSocketSession:</span>
        <span class="kd">super</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">UserController</span><span class="o">.</span><span class="na">KEY_USER</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，在<code class="language-plaintext highlighter-rouge">ChatHandler</code>中，可以从<code class="language-plaintext highlighter-rouge">WebSocketSession.getAttributes()</code>中获取到复制过来的属性。</p>

<p>在完成了服务器端的开发后，还需要在页面编写一点JavaScript逻辑：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建WebSocket连接:</span>
<span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="dl">'</span><span class="s1">ws://</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/chat</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// 连接成功时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">websocket connected.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// 收到消息时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">message: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">msgs</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="c1">// TODO:</span>
<span class="p">});</span>
<span class="c1">// 连接关闭时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">websocket closed.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// 绑定到全局变量:</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span> <span class="o">=</span> <span class="nx">ws</span><span class="p">;</span>
</code></pre></div></div>

<p>用户可以在连接成功后任何时候给服务器发送消息：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">inputText</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello, WebSocket.</span><span class="dl">'</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">text</span><span class="p">:</span> <span class="nx">inputText</span><span class="p">}));</span>
</code></pre></div></div>

<p>最后，连调浏览器和服务器端，如果一切无误，可以开多个不同的浏览器测试WebSocket的推送和广播。</p>

<p>Servlet的线程模型并不适合大规模的长链接。基于NIO的Netty等框架更适合处理WebSocket长链接。</p>

<p><strong>完整代码：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.i18n.LocaleChangeInterceptor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.CloseStatus</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.TextMessage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.WebSocketSession</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.EnableWebSocket</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.WebSocketConfigurer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.handler.TextWebSocketHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.ConcurrentHashMap</span><span class="o">;</span>

<span class="nd">@EnableWebSocket</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://127.0.0.1:5500"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
                <span class="c1">// 可以继续添加其他URL规则:</span>
                <span class="c1">// registry.addMapping("/rest/v2/**")...</span>
            <span class="o">}</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addInterceptors</span><span class="o">(</span><span class="nc">InterceptorRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">LocaleChangeInterceptor</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocaleChangeInterceptor</span><span class="o">();</span>
                <span class="n">l</span><span class="o">.</span><span class="na">setParamName</span><span class="o">(</span><span class="s">"lang"</span><span class="o">);</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addInterceptor</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebSocketConfigurer</span> <span class="nf">createWebSocketConfigurer</span><span class="o">(</span>
            <span class="nd">@Autowired</span> <span class="nc">ChatHandler</span> <span class="n">chatHandler</span><span class="o">,</span>
            <span class="nd">@Autowired</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="n">chatInterceptor</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebSocketConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerWebSocketHandlers</span><span class="o">(</span><span class="nc">WebSocketHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 把URL与指定的WebSocketHandler关联，可关联多个:</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">chatHandler</span><span class="o">,</span> <span class="s">"/chat"</span><span class="o">).</span><span class="na">addInterceptors</span><span class="o">(</span><span class="n">chatInterceptor</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">ChatHandler</span> <span class="kd">extends</span> <span class="nc">TextWebSocketHandler</span> <span class="o">{</span>
    <span class="c1">// 保存所有Client的WebSocket会话实例:</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">WebSocketSession</span><span class="o">&gt;</span> <span class="n">clients</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterConnectionEstablished</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 新会话根据ID放入Map:</span>
        <span class="n">clients</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">session</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"Guest1"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterConnectionClosed</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">,</span> <span class="nc">CloseStatus</span> <span class="n">status</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">clients</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"用户"</span><span class="o">+</span><span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">()+</span><span class="s">"已退出"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleTextMessage</span><span class="o">(</span><span class="nc">WebSocketSession</span> <span class="n">session</span><span class="o">,</span> <span class="nc">TextMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getPayload</span><span class="o">();</span>
        <span class="c1">// 根据输入消息构造待发送消息</span>
        <span class="nc">ObjectMapper</span> <span class="n">mapper</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="n">mapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">ChatMessage</span> <span class="n">chatMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChatMessage</span><span class="o">();</span>
        <span class="n">chatMessage</span><span class="o">.</span><span class="na">timestamp</span><span class="o">=</span><span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">getTime</span><span class="o">();</span>
        <span class="n">chatMessage</span><span class="o">.</span><span class="na">name</span><span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
        <span class="n">chatMessage</span><span class="o">.</span><span class="na">text</span><span class="o">=</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"text"</span><span class="o">);</span>
        <span class="n">broadcastMessage</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">chatMessage</span><span class="o">));</span> <span class="c1">// 推送给所有用户</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">broadcastMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">json</span> <span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">TextMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextMessage</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">id</span> <span class="o">:</span> <span class="n">clients</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">WebSocketSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">clients</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
            <span class="n">session</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">ChatMessage</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="n">timestamp</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
<span class="o">}</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="kd">extends</span> <span class="nc">HttpSessionHandshakeInterceptor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">ChatHandshakeInterceptor</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 指定从HttpSession复制属性到WebSocketSession:</span>
        <span class="c1">//super(List.of(UserController.KEY_USER));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>打开浏览器，开两个新的<code class="language-plaintext highlighter-rouge">http://localhost:8080/</code>页面，分别建立WebSocket连接：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建WebSocket连接:</span>
<span class="kd">var</span> <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="dl">'</span><span class="s1">ws://</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">host</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/chat</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// 连接成功时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">websocket connected.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// 收到消息时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">message</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">message: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">msgs</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="c1">// TODO:</span>
<span class="p">});</span>
<span class="c1">// 连接关闭时:</span>
<span class="nx">ws</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">websocket closed.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="c1">// 绑定到全局变量:</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span> <span class="o">=</span> <span class="nx">ws</span><span class="p">;</span>
</code></pre></div></div>

<p>发送：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">inputText</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello, WebSocket.</span><span class="dl">'</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">text</span><span class="p">:</span> <span class="nx">inputText</span><span class="p">}));</span>
</code></pre></div></div>

<p>则两个页面的控制台都会显示如：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">message</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">timestamp</span><span class="dl">"</span><span class="p">:</span><span class="o">***</span><span class="p">,</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">Hello, WebSocket.</span><span class="dl">"</span><span class="p">}</span>
</code></pre></div></div>

<p>用后连接的发送：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">inputText</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">测试</span><span class="dl">'</span><span class="p">;</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">chatWs</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">text</span><span class="p">:</span> <span class="nx">inputText</span><span class="p">}));</span>
</code></pre></div></div>

<p>则显示：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">message</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">timestamp</span><span class="dl">"</span><span class="p">:</span><span class="o">***</span><span class="p">,</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">测试</span><span class="dl">"</span><span class="p">}</span>
</code></pre></div></div>

<p>关闭页面，则java控制台显示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>13:31:51.143 [http-nio-8080-exec-9] DEBUG org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator - StandardWebSocketSession[id=1, uri=ws://localhost:8080/chat] closed with CloseStatus[code=1001, reason=null]
用户1已退出
13:32:19.014 [http-nio-8080-exec-10] DEBUG org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator - StandardWebSocketSession[id=0, uri=ws://localhost:8080/chat] closed with CloseStatus[code=1001, reason=null]
用户0已退出
</code></pre></div></div>

<p>功能正常。</p>

<p>如果要允许在所有页面访问，可以进行设置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">WebSocketConfigurer</span> <span class="nf">createWebSocketConfigurer</span><span class="o">(</span>
        <span class="nd">@Autowired</span> <span class="nc">ChatHandler</span> <span class="n">chatHandler</span><span class="o">,</span>
        <span class="nd">@Autowired</span> <span class="nc">ChatHandshakeInterceptor</span> <span class="n">chatInterceptor</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">WebSocketConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerWebSocketHandlers</span><span class="o">(</span><span class="nc">WebSocketHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 把URL与指定的WebSocketHandler关联，可关联多个:</span>
            <span class="n">registry</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">chatHandler</span><span class="o">,</span> <span class="s">"/chat"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">addInterceptors</span><span class="o">(</span><span class="n">chatInterceptor</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="s">"*"</span><span class="o">);</span><span class="c1">//允许所有页面</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">WebSocketHandlerRegistration</code>接口提供了一系列方法，用于配置WebSocket处理程序的各种细节：</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addHandler(WebSocketHandler handler, String... paths)</code> - 添加更多的处理程序，们将共享相同的配置（拦截器、SockJS 配置）。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">setHandshakeHandler(HandshakeHandler handshakeHandler)</code> - 配置要使用的握手处理程序。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addInterceptorsHandshakeInterceptor... interceptors)</code> - 配置用于握手请求的截器。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">setAllowedOrigins(String... origins)</code> - 配置允许连接到 WebSocket 端点的来源。该检查主要针浏览器客户端，每个允许的来源必须以 “http://”、”https://” 或 “*“（表示所有来源都被允许）开头。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">withSockJS()</code> - 启用 SockJS 回退选项。</p>
  </li>
</ul>

<p>这些方法提供了丰富和灵活地配置 WebSocket 处理程序所需功能。你可以根据需要使用这些方法来定制和优化 WebSocket 处理程序。</p>

<h2 id="集成javamail">集成JavaMail</h2>

<p>在Spring中，同样可以集成JavaMail。因为在服务器端，主要以发送邮件为主，例如在注册成功、登录时、购物付款后通知用户，基本上不会遇到接收用户邮件的情况，所以只讨论如何在Spring中发送邮件。</p>

<p>在Spring中，发送邮件最终也是需要JavaMail，Spring只对JavaMail做了一点简单的封装，目的是简化代码。为了在Spring中集成JavaMail，在<code class="language-plaintext highlighter-rouge">pom.xml</code>中添加以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/javax.mail/javax.mail-api --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.mail<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.mail-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.6.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/com.sun.mail/javax.mail --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.sun.mail<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.mail<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.6.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context-support<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>我们希望用户在注册成功后能收到注册邮件，为此，先定义一个<code class="language-plaintext highlighter-rouge">JavaMailSender</code>的Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">JavaMailSender</span> <span class="nf">createJavaMailSender</span><span class="o">(</span>
    <span class="c1">// smtp.properties:</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.host}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">host</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.port}"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">port</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.auth}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">auth</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.username}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.debug:true}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">debug</span><span class="o">)</span>
<span class="o">{</span>
    <span class="kt">var</span> <span class="n">mailSender</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JavaMailSenderImpl</span><span class="o">();</span>
    <span class="n">mailSender</span><span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="n">host</span><span class="o">);</span>
    <span class="n">mailSender</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
    <span class="n">mailSender</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="n">mailSender</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
    <span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="n">mailSender</span><span class="o">.</span><span class="na">getJavaMailProperties</span><span class="o">();</span>
    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.transport.protocol"</span><span class="o">,</span> <span class="s">"smtp"</span><span class="o">);</span>
    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.auth"</span><span class="o">,</span> <span class="n">auth</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">port</span> <span class="o">==</span> <span class="mi">587</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.starttls.enable"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span> <span class="c1">// 不启用TLS加密</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.ssl.enable"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 启用SSL加密</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.socketFactory.class"</span><span class="o">,</span> <span class="s">"javax.net.ssl.SSLSocketFactory"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">port</span> <span class="o">==</span> <span class="mi">465</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.socketFactory.port"</span><span class="o">,</span> <span class="s">"465"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.socketFactory.class"</span><span class="o">,</span> <span class="s">"javax.net.ssl.SSLSocketFactory"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.debug"</span><span class="o">,</span> <span class="n">debug</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">mailSender</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">JavaMailSender</code>接口的实现类是<code class="language-plaintext highlighter-rouge">JavaMailSenderImpl</code>，初始化时，传入的参数与JavaMail是完全一致的。</p>

<p>另外注意到需要注入的属性是从<code class="language-plaintext highlighter-rouge">smtp.properties</code>中读取的，因此，<code class="language-plaintext highlighter-rouge">AppConfig</code>导入的就不止一个<code class="language-plaintext highlighter-rouge">.properties</code>文件，可以导入多个：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="nd">@PropertySource</span><span class="o">({</span> <span class="s">"classpath:/jdbc.properties"</span><span class="o">,</span> <span class="s">"classpath:/smtp.properties"</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>下一步是封装一个<code class="language-plaintext highlighter-rouge">MailService</code>，并定义<code class="language-plaintext highlighter-rouge">sendRegistrationMail()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MailService</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${smtp.from}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">from</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="nc">JavaMailSender</span> <span class="n">mailSender</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRegistrationMail</span><span class="o">(</span><span class="nc">String</span> <span class="n">mail</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">MimeMessage</span> <span class="n">mimeMessage</span> <span class="o">=</span> <span class="n">mailSender</span><span class="o">.</span><span class="na">createMimeMessage</span><span class="o">();</span>
            <span class="nc">MimeMessageHelper</span> <span class="n">helper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeMessageHelper</span><span class="o">(</span><span class="n">mimeMessage</span><span class="o">,</span> <span class="s">"utf-8"</span><span class="o">);</span>
            <span class="n">helper</span><span class="o">.</span><span class="na">setFrom</span><span class="o">(</span><span class="n">from</span><span class="o">);</span>
            <span class="n">helper</span><span class="o">.</span><span class="na">setTo</span><span class="o">(</span><span class="n">mail</span><span class="o">);</span>
            <span class="n">helper</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="s">"Welcome to Java course!"</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">html</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"&lt;p&gt;Hi, %s,&lt;/p&gt;&lt;p&gt;Welcome to Java course!&lt;/p&gt;&lt;p&gt;Sent at %s&lt;/p&gt;"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
            <span class="n">helper</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">html</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
            <span class="n">mailSender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">mimeMessage</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">MessagingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MimeMessage</code>是JavaMail的邮件对象，而<code class="language-plaintext highlighter-rouge">MimeMessageHelper</code>是Spring提供的用于简化设置MimeMessage的类，比如设置HTML邮件就可以直接调用<code class="language-plaintext highlighter-rouge">setText(String text, boolean html)</code>方法，而不必再调用比较繁琐的JavaMail接口方法。</p>

<p>最后一步是调用<code class="language-plaintext highlighter-rouge">JavaMailSender.send()</code>方法把邮件发送出去。</p>

<p>在MVC的某个Controller方法中，当用户注册成功后，就启动一个新线程来异步发送邮件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">MailController</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">MailService</span> <span class="n">mailService</span><span class="o">;</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/testMail"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Mail</span> <span class="n">mail</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// send registration mail:</span>
        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">mailService</span><span class="o">.</span><span class="na">sendRegistrationMail</span><span class="o">(</span><span class="n">mail</span><span class="o">.</span><span class="na">email</span><span class="o">);</span>
        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Mail</span><span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为发送邮件是一种耗时的任务，从几秒到几分钟不等，因此，异步发送是保证页面能快速显示的必要措施。</p>

<p>测试：post请求：<code class="language-plaintext highlighter-rouge">http://localhost:8080/testMail</code>，附带json：<code class="language-plaintext highlighter-rouge">{"email":"收件人@qq.com"}</code>，成功收到邮件。</p>

<h2 id="集成jms">集成JMS</h2>

<p>JMS即Java Message Service，是JavaEE的消息服务接口。JMS主要有两个版本：1.1和2.0。2.0和1.1相比，主要是简化了收发消息的代码。</p>

<p>所谓消息服务，就是两个进程之间，通过消息服务器传递消息：</p>

<pre><code class="language-ascii">┌────────┐    ┌──────────────┐    ┌────────┐
│Producer│───&gt;│Message Server│───&gt;│Consumer│
└────────┘    └──────────────┘    └────────┘
</code></pre>

<p>使用消息服务，而不是直接调用对方的API，它的好处是：</p>

<ul>
  <li>双方各自无需知晓对方的存在，消息可以异步处理，因为消息服务器会在Consumer离线的时候自动缓存消息；</li>
  <li>如果Producer发送的消息频率高于Consumer的处理能力，消息可以积压在消息服务器，不至于压垮Consumer；</li>
  <li>通过一个消息服务器，可以连接多个Producer和多个Consumer。</li>
</ul>

<p>因为消息服务在各类应用程序中非常有用，所以JavaEE专门定义了JMS规范。JMS是一组接口定义，如果要使用JMS，还需要选择一个具体的JMS产品。常用的JMS服务器有开源的<a href="https://activemq.apache.org/">ActiveMQ</a>，商业服务器如WebLogic、WebSphere等也内置了JMS支持。这里选择开源的ActiveMQ作为JMS服务器，因此，在开发JMS之前必须安装ActiveMQ。</p>

<p>ActiveMQ Classic或者ActiveMQ Artemis，这两个是什么关系，又有什么区别？</p>

<p>实际上ActiveMQ Classic原来就叫ActiveMQ，是Apache开发的基于JMS 1.1的消息服务器，目前稳定版本号是5.x，而ActiveMQ Artemis是由RedHat捐赠的<a href="https://hornetq.jboss.org/">HornetQ</a>服务器代码的基础上开发的，目前稳定版本号是2.x。和ActiveMQ Classic相比，Artemis版的代码与Classic完全不同，并且，它支持JMS 2.0，使用基于Netty的异步IO，大大提升了性能。此外，Artemis不仅提供了JMS接口，它还提供了AMQP接口，STOMP接口和物联网使用的MQTT接口。选择Artemis，相当于一鱼四吃。</p>

<p>所以，这里直接选择ActiveMQ Artemis。从官网<a href="https://activemq.apache.org/components/artemis/download/past_releases">下载</a>最后一版支持java8的2.19.1版本，解压后设置环境变量<code class="language-plaintext highlighter-rouge">ARTEMIS_HOME</code>，指向Artemis根目录，例如<code class="language-plaintext highlighter-rouge">C:\Apps\artemis</code>，然后，把<code class="language-plaintext highlighter-rouge">ARTEMIS_HOME/bin</code>加入PATH环境变量：</p>

<ul>
  <li>Windows下添加<code class="language-plaintext highlighter-rouge">%ARTEMIS_HOME%\bin</code>到Path路径；</li>
  <li>Mac和Linux下添加<code class="language-plaintext highlighter-rouge">$ARTEMIS_HOME/bin</code>到PATH路径。</li>
</ul>

<p>Artemis有个很好的设计，就是它把程序和数据完全分离了。解压后的<code class="language-plaintext highlighter-rouge">ARTEMIS_HOME</code>目录是程序目录，要启动一个Artemis服务，还需要创建一个数据目录。</p>

<p>要把数据目录直接设定在项目文件夹的<code class="language-plaintext highlighter-rouge">jms-data</code>目录下。需要在项目文件夹下执行命令<code class="language-plaintext highlighter-rouge">artemis create jms-data</code>。</p>

<p>在创建过程中，会要求输入连接用户和口令，这里设定<code class="language-plaintext highlighter-rouge">admin</code>和<code class="language-plaintext highlighter-rouge">password</code>，以及是否允许匿名访问（这里选择<code class="language-plaintext highlighter-rouge">N</code>）。</p>

<p>此数据目录<code class="language-plaintext highlighter-rouge">jms-data</code>不仅包含消息数据、日志，还自动创建了两个启动服务的命令<code class="language-plaintext highlighter-rouge">bin/artemis</code>和<code class="language-plaintext highlighter-rouge">bin/artemis-service</code>，前者在前台启动运行，按Ctrl+C结束，后者会一直在后台运行。</p>

<p>把目录切换到<code class="language-plaintext highlighter-rouge">jms-data/bin</code>，直接运行<code class="language-plaintext highlighter-rouge">artemis run</code>即可启动Artemis服务。</p>

<p>启动成功后，Artemis提示可以通过URL<code class="language-plaintext highlighter-rouge">http://localhost:8161/console</code>访问管理后台。注意<strong>不要关闭命令行窗口</strong>。</p>

<p>如果Artemis启动时显示警告：<code class="language-plaintext highlighter-rouge">AMQ222212: Disk Full! ... Clients will report blocked.</code>这是因为磁盘空间不够，可以在<code class="language-plaintext highlighter-rouge">etc/broker.xml</code>配置中找到<code class="language-plaintext highlighter-rouge">&lt;max-disk-usage&gt;</code>并改为<code class="language-plaintext highlighter-rouge">99</code>。</p>

<hr />

<p>JMS把生产消息的一方称为Producer，处理消息的一方称为Consumer。有两种类型的消息通道，一种是Queue：</p>

<pre><code class="language-ascii">┌────────┐    ┌────────┐    ┌────────┐
│Producer│───&gt;│ Queue  │───&gt;│Consumer│
└────────┘    └────────┘    └────────┘
</code></pre>

<p>一种是Topic：</p>

<pre><code class="language-ascii">                            ┌────────┐
                         ┌─&gt;│Consumer│
                         │  └────────┘
┌────────┐    ┌────────┐ │  ┌────────┐
│Producer│───&gt;│ Topic  │─┼─&gt;│Consumer│
└────────┘    └────────┘ │  └────────┘
                         │  ┌────────┐
                         └─&gt;│Consumer│
                            └────────┘
</code></pre>

<p>它们的区别在于，Queue是一种一对一的通道，如果Consumer离线无法处理消息时，Queue会把消息存起来，等Consumer再次连接的时候发给它。设定了持久化机制的Queue不会丢失消息。如果有多个Consumer接入同一个Queue，那么它们等效于以集群方式处理消息，例如，发送方发送的消息是A，B，C，D，E，F，两个Consumer可能分别收到A，C，E和B，D，F，即每个消息只会交给其中一个Consumer处理。</p>

<p>Topic则是一种一对多通道。一个Producer发出的消息，会被多个Consumer同时收到，即每个Consumer都会收到一份完整的消息流。如果某个Consumer暂时离线，过一段时间后又上线了，那么在它离线期间产生的消息还能不能收到呢？</p>

<p>这取决于消息服务器对Topic类型消息的持久化机制。如果消息服务器不存储Topic消息，那么离线的Consumer会丢失部分离线时期的消息，如果消息服务器存储了Topic消息，那么离线的Consumer可以收到自上次离线时刻开始后产生的所有消息。JMS规范通过Consumer指定一个持久化订阅可以在上线后收取所有离线期间的消息，如果指定的是非持久化订阅，那么离线期间的消息会全部丢失。</p>

<p>如果一个Topic的消息全部都持久化了，并且只有一个Consumer，那么它和Queue其实是一样的。实际上，很多消息服务器内部都只有Topic类型的消息架构，Queue可以通过Topic“模拟”出来。</p>

<p>无论是Queue还是Topic，对Producer没有什么要求。多个Producer也可以写入同一个Queue或者Topic，此时消息服务器内部会自动排序确保消息总是有序的。</p>

<p>以上是消息服务的基本模型。具体到某个消息服务器时，Producer和Consumer通常是通过TCP连接消息服务器，在编写JMS程序时，又会遇到<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>、<code class="language-plaintext highlighter-rouge">Connection</code>、<code class="language-plaintext highlighter-rouge">Session</code>等概念，其实这和JDBC连接是类似的：</p>

<ul>
  <li>ConnectionFactory：代表一个到消息服务器的连接池，类似JDBC的DataSource；</li>
  <li>Connection：代表一个到消息服务器的连接，类似JDBC的Connection；</li>
  <li>Session：代表一个经过认证后的连接会话；</li>
  <li>Message：代表一个消息对象。</li>
</ul>

<p>在JMS 1.1中，发送消息的典型代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="nc">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// 创建连接:</span>
        <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
        <span class="c1">// 创建会话:</span>
        <span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span><span class="nc">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>
        <span class="c1">// 创建一个Producer并关联到某个Queue:</span>
        <span class="nc">MessageProducer</span> <span class="n">messageProducer</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createProducer</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
        <span class="c1">// 创建一个文本消息:</span>
        <span class="nc">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
        <span class="c1">// 发送消息:</span>
        <span class="n">messageProducer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">textMessage</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="c1">// 关闭连接:</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">JMSException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 处理JMS异常</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JMS 2.0改进了一些API接口，发送消息变得更简单：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">JMSContext</span> <span class="n">context</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createContext</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">context</span><span class="o">.</span><span class="na">createProducer</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="n">queue</span><span class="o">,</span> <span class="n">text</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">JMSContext</code>实现了<code class="language-plaintext highlighter-rouge">AutoCloseable</code>接口，可以使用<code class="language-plaintext highlighter-rouge">try(resource)</code>语法，代码更简单。</p>

<p>有了以上预备知识，就可以开始开发JMS应用了。</p>

<p>首先，在<code class="language-plaintext highlighter-rouge">pom.xml</code>中添加如下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-jms<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.0.2.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/org.apache.activemq/artemis-jms-client --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.activemq<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>artemis-jms-client<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.19.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>Artemis的Client接口依赖了<code class="language-plaintext highlighter-rouge">jakarta.jms:jakarta.jms-api</code>，因此不必再引入JMS API的依赖。</p>

<p>在AppConfig中，通过<code class="language-plaintext highlighter-rouge">@EnableJms</code>让Spring自动扫描JMS相关的Bean，并加载JMS配置文件<code class="language-plaintext highlighter-rouge">jms.properties</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@EnableJms</span> <span class="c1">// 启用JMS</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="nd">@PropertySource</span><span class="o">({</span> <span class="s">"classpath:/jdbc.properties"</span><span class="o">,</span> <span class="s">"classpath:/jms.properties"</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>首先要创建的Bean是<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>，即连接消息服务器的连接池：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">ConnectionFactory</span> <span class="nf">createJMSConnectionFactory</span><span class="o">(</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.uri:tcp://localhost:61616}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">uri</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.username:admin}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.password:password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ActiveMQJMSConnectionFactory</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为使用的消息服务器是ActiveMQ Artemis，所以<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>的实现类就是消息服务器提供的<code class="language-plaintext highlighter-rouge">ActiveMQJMSConnectionFactory</code>，它需要的参数均由配置文件读取后传入，并设置了默认值。</p>

<p>再创建一个<code class="language-plaintext highlighter-rouge">JmsTemplate</code>，它是Spring提供的一个工具类，和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>类似，可以简化发送消息的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nc">JmsTemplate</span> <span class="nf">createJmsTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">JmsTemplate</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>下一步要创建的是<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>，</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span><span class="o">(</span><span class="s">"jmsListenerContainerFactory"</span><span class="o">)</span>
<span class="nc">DefaultJmsListenerContainerFactory</span> <span class="nf">createJmsListenerContainerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">var</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultJmsListenerContainerFactory</span><span class="o">();</span>
    <span class="n">factory</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">factory</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>除了必须指定Bean的名称为<code class="language-plaintext highlighter-rouge">jmsListenerContainerFactory</code>外，这个Bean的作用是处理和Consumer相关的Bean。先跳过它的原理，继续编写<code class="language-plaintext highlighter-rouge">MessagingService</code>来发送消息：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">MessageCreator</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">createMessage</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JMSException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JMS的消息类型支持以下几种：</p>

<ul>
  <li>TextMessage：文本消息；</li>
  <li>BytesMessage：二进制消息；</li>
  <li>MapMessage：包含多个Key-Value对的消息；</li>
  <li>ObjectMessage：直接序列化Java对象的消息；</li>
  <li>StreamMessage：一个包含基本类型序列的消息。</li>
</ul>

<p>最常用的是发送基于JSON的文本消息，上述代码通过<code class="language-plaintext highlighter-rouge">JmsTemplate</code>创建一个<code class="language-plaintext highlighter-rouge">TextMessage</code>并发送到名称为<code class="language-plaintext highlighter-rouge">jms/queue/mail</code>的Queue。</p>

<p>注意：Artemis消息服务器默认配置下会自动创建Queue，因此不必手动创建一个名为<code class="language-plaintext highlighter-rouge">jms/queue/mail</code>的Queue，但不是所有的消息服务器都会自动创建Queue，生产环境的消息服务器通常会关闭自动创建功能，需要手动创建Queue。</p>

<p><code class="language-plaintext highlighter-rouge">session.createTextMessage(msg);</code>创建了<code class="language-plaintext highlighter-rouge">TextMessage</code>，它的内容是字符串。</p>

<hr />

<p>下面要详细讨论的是如何处理消息，即编写Consumer。从理论上讲，可以创建另一个Java进程来处理消息，但对于这个简单的Web程序来说没有必要，直接在同一个Web应用中接收并处理消息即可。</p>

<p>处理消息的核心代码是编写一个Bean，并在处理方法上标注<code class="language-plaintext highlighter-rouge">@JmsListener</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MailMessageListener</span> <span class="o">{</span>
    <span class="nd">@JmsListener</span><span class="o">(</span><span class="n">destination</span> <span class="o">=</span> <span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="n">concurrency</span> <span class="o">=</span> <span class="s">"10"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMailMessageReceived</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">((</span><span class="nc">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">).</span><span class="na">getText</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@JmsListener</code>指定了Queue的名称，因此，凡是发到此Queue的消息都会被这个<code class="language-plaintext highlighter-rouge">onMailMessageReceived()</code>方法处理，方法参数是JMS的<code class="language-plaintext highlighter-rouge">Message</code>接口，通过强制转型为<code class="language-plaintext highlighter-rouge">TextMessage</code>并提取字符串。</p>

<hr />

<p>Spring处理JMS消息的流程是什么？</p>

<p>如果直接调用JMS的API来处理消息，那么编写的代码大致如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建JMS连接:</span>
<span class="nc">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
<span class="c1">// 创建会话:</span>
<span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="nc">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>
<span class="c1">// 创建一个Consumer:</span>
<span class="nc">MessageConsumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createConsumer</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
<span class="c1">// 为Consumer指定一个消息处理器:</span>
<span class="n">consumer</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">MessageListener</span><span class="o">()</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 在此处理消息... </span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="c1">// 启动接收消息的循环:</span>
<span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>

<p>我们自己编写的<code class="language-plaintext highlighter-rouge">MailMessageListener.onMailMessageReceived()</code>相当于消息处理器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">consumer</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">MessageListener</span><span class="o">()</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mailMessageListener</span><span class="o">.</span><span class="na">onMailMessageReceived</span><span class="o">(</span><span class="n">message</span><span class="o">);</span> 
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div></div>

<p>所以，Spring根据<code class="language-plaintext highlighter-rouge">AppConfig</code>的注解<code class="language-plaintext highlighter-rouge">@EnableJms</code>自动扫描带有<code class="language-plaintext highlighter-rouge">@JmsListener</code>的Bean方法，并为其创建一个<code class="language-plaintext highlighter-rouge">MessageListener</code>把它包装起来。</p>

<p>注意到前面我们还创建了一个<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>的Bean，它的作用就是为每个<code class="language-plaintext highlighter-rouge">MessageListener</code>创建<code class="language-plaintext highlighter-rouge">MessageConsumer</code>并启动消息接收循环。</p>

<p>再注意到<code class="language-plaintext highlighter-rouge">@JmsListener</code>还有一个<code class="language-plaintext highlighter-rouge">concurrency</code>参数，10表示可以最多同时并发处理10个消息，<code class="language-plaintext highlighter-rouge">5-10</code>表示并发处理的线程可以在5~10之间调整。</p>

<p>因此，Spring在通过<code class="language-plaintext highlighter-rouge">MessageListener</code>接收到消息后，并不是直接调用<code class="language-plaintext highlighter-rouge">mailMessageListener.onMailMessageReceived()</code>，而是用线程池调用，因此，要时刻牢记，<code class="language-plaintext highlighter-rouge">onMailMessageReceived()</code>方法可能被多线程并发执行，一定要保证线程安全。</p>

<p>总结一下Spring接收消息的步骤：</p>

<p>通过<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>配合<code class="language-plaintext highlighter-rouge">@EnableJms</code>扫描所有<code class="language-plaintext highlighter-rouge">@JmsListener</code>方法，自动创建<code class="language-plaintext highlighter-rouge">MessageConsumer</code>、<code class="language-plaintext highlighter-rouge">MessageListener</code>以及线程池，启动消息循环接收处理消息，最终由我们自己编写的<code class="language-plaintext highlighter-rouge">@JmsListener</code>方法处理消息，可能会由多线程同时并发处理。</p>

<hr />

<p>要验证消息发送和处理，新建一个Controller：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">TextController</span><span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">MessagingService</span> <span class="n">messagingService</span><span class="o">;</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test/{msg}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"msg"</span><span class="o">)</span>  <span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
        <span class="n">messagingService</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/test/hi</code>，控制台输出：<code class="language-plaintext highlighter-rouge">hi</code>。</p>

<p>完整代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.PebbleEngine</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.pebble.loader.ServletLoader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.pebbletemplates.spring.servlet.PebbleViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.LifecycleException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.WebResourceRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.startup.Tomcat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.DirResourceSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.catalina.webresources.StandardRoot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.PropertySource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.annotation.EnableJms</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.annotation.JmsListener</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.config.DefaultJmsListenerContainerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.core.JmsTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jms.core.MessageCreator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PathVariable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.ViewResolver</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.jms.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Locale</span><span class="o">;</span>


<span class="cm">/**
 * @author aotmd
 * @version 1.0
 * @date 2024/6/1 22:16
 */</span>
<span class="nd">@EnableJms</span> <span class="c1">// 启用JMS</span>
<span class="nd">@EnableWebMvc</span>
<span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test4</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
        <span class="c1">//Locale.setDefault(Locale.ENGLISH);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
        <span class="nc">Tomcat</span> <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tomcat</span><span class="o">();</span>
        <span class="c1">// 设置Tomcat的端口号，默认为8080</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="s">"port"</span><span class="o">,</span> <span class="mi">8080</span><span class="o">));</span>
        <span class="c1">// 获取Tomcat的连接器</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getConnector</span><span class="o">();</span>

        <span class="c1">// 将webapp添加到Tomcat，路径为src/main/webapp</span>
        <span class="nc">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span>
                <span class="s">""</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"src/main/webapp"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">()</span>
        <span class="o">);</span>
        <span class="c1">//设置热部署</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setReloadable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="c1">// 创建Web资源根目录</span>
        <span class="nc">WebResourceRoot</span> <span class="n">resources</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardRoot</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
        <span class="c1">// 添加预设资源，包括类路径和WEB-INF目录</span>
        <span class="n">resources</span><span class="o">.</span><span class="na">addPreResources</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">DirResourceSet</span><span class="o">(</span>
                        <span class="n">resources</span><span class="o">,</span>
                        <span class="s">"/WEB-INF/classes"</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">"target/classes"</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
                        <span class="s">"/"</span>
                <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">// 设置Web应用的资源</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
        <span class="c1">// 启动Tomcat</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="c1">// 等待Tomcat服务器结束</span>
        <span class="n">tomcat</span><span class="o">.</span><span class="na">getServer</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">({</span><span class="s">"classpath:jms.properties"</span><span class="o">})</span>
<span class="kd">class</span> <span class="nc">Config</span> <span class="o">{</span>
   <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">).</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"/static/"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addViewControllers</span><span class="o">(</span><span class="nc">ViewControllerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addViewController</span><span class="o">(</span><span class="s">"/"</span><span class="o">).</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"/index.html"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="s">"http://127.0.0.1:5500"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">ViewResolver</span> <span class="nf">createViewResolver</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">().</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="c1">// cache:</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
                <span class="c1">// loader:</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">))</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="kt">var</span> <span class="n">viewResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleViewResolver</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates/"</span><span class="o">);</span>
        <span class="n">viewResolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">viewResolver</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">ConnectionFactory</span> <span class="nf">createJMSConnectionFactory</span><span class="o">(</span>
            <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.uri:tcp://localhost:61616}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">uri</span><span class="o">,</span>
            <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.username:admin}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
            <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jms.password:password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ActiveMQJMSConnectionFactory</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">JmsTemplate</span> <span class="nf">createJmsTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JmsTemplate</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"jmsListenerContainerFactory"</span><span class="o">)</span>
    <span class="nc">DefaultJmsListenerContainerFactory</span> <span class="nf">createJmsListenerContainerFactory</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">ConnectionFactory</span> <span class="n">connectionFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultJmsListenerContainerFactory</span><span class="o">();</span>
        <span class="n">factory</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">factory</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@RestController</span>
<span class="kd">class</span> <span class="nc">TextController</span><span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">MessagingService</span> <span class="n">messagingService</span><span class="o">;</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test/{msg}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"msg"</span><span class="o">)</span>  <span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
        <span class="n">messagingService</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">){</span>
        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">MessageCreator</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">createMessage</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JMSException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">MailMessageListener</span> <span class="o">{</span>
    <span class="nd">@JmsListener</span><span class="o">(</span><span class="n">destination</span> <span class="o">=</span> <span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="n">concurrency</span> <span class="o">=</span> <span class="s">"10"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMailMessageReceived</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">((</span><span class="nc">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">).</span><span class="na">getText</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="使用scheduler">使用Scheduler</h2>

<p>在很多应用程序中，经常需要执行定时任务。例如，每天或每月给用户发送账户汇总报表，定期检查并发送系统状态报告，等等。Java标准库本身就提供了定时执行任务的功能。在Spring中，使用定时任务更简单，不需要手写线程池相关代码，只需要两个注解即可。</p>

<p>直接在<code class="language-plaintext highlighter-rouge">AppConfig</code>中加上<code class="language-plaintext highlighter-rouge">@EnableScheduling</code>就开启了定时任务的支持。</p>

<p>接下来，我们可以直接在一个Bean中编写一个<code class="language-plaintext highlighter-rouge">public void</code>无参数方法，然后加上<code class="language-plaintext highlighter-rouge">@Scheduled</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">TaskService</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Scheduled</span><span class="o">(</span><span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">,</span> <span class="n">fixedRate</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">checkSystemStatusEveryMinute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"开始检查系统状态.."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述注解指定了启动延迟1秒，并以1秒的间隔执行任务。现在，我们直接运行应用程序，就可以在控制台看到定时任务打印的日志：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>14:50:58.306 [pool-1-thread-1] INFO com.aotmd.test.TaskService - 开始检查系统状态..
14:50:59.306 [pool-1-thread-1] INFO com.aotmd.test.TaskService - 开始检查系统状态..
14:51:00.304 [pool-1-thread-1] INFO com.aotmd.test.TaskService - 开始检查系统状态..
</code></pre></div></div>

<p>除了可以使用<code class="language-plaintext highlighter-rouge">fixedRate</code>外，还可以使用<code class="language-plaintext highlighter-rouge">fixedDelay</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">,</span> <span class="n">fixedDelay</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">)</span>
</code></pre></div></div>

<p>因为Java的注解全部是常量，写死了<code class="language-plaintext highlighter-rouge">fixedDelay=1_000</code>，如果根据实际情况要改成60秒怎么办，只能重新编译？</p>

<p>可以把定时任务的配置放到配置文件中，例如<code class="language-plaintext highlighter-rouge">task.properties</code>：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">task.checkDiskSpace</span><span class="p">=</span><span class="s">30000</span>
</code></pre></div></div>

<p>这样就可以随时修改配置文件而无需动代码。但是在代码中，需要用<code class="language-plaintext highlighter-rouge">fixedDelayString</code>取代<code class="language-plaintext highlighter-rouge">fixedDelay</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">1_000</span><span class="o">,</span> <span class="n">fixedDelayString</span> <span class="o">=</span> <span class="s">"${task.checkDiskSpace:30000}"</span><span class="o">)</span>
</code></pre></div></div>

<p>上述代码的注解参数<code class="language-plaintext highlighter-rouge">fixedDelayString</code>是一个属性占位符，并配有默认值30000，Spring在处理<code class="language-plaintext highlighter-rouge">@Scheduled</code>注解时，如果遇到<code class="language-plaintext highlighter-rouge">String</code>，会根据占位符自动用配置项替换，这样就可以灵活地修改定时任务的配置。</p>

<p>此外，<code class="language-plaintext highlighter-rouge">fixedDelayString</code>还可以使用更易读的<code class="language-plaintext highlighter-rouge">Duration</code>，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">initialDelay</span> <span class="o">=</span> <span class="mi">30_000</span><span class="o">,</span> <span class="n">fixedDelayString</span> <span class="o">=</span> <span class="s">"${task.checkDiskSpace:PT2M30S}"</span><span class="o">)</span>
</code></pre></div></div>

<p>以字符串<code class="language-plaintext highlighter-rouge">PT2M30S</code>表示的<code class="language-plaintext highlighter-rouge">Duration</code>就是2分30秒，请参考<a href="/2021/04/12/函日期和时间/#duration和period">日期和时间</a>一节的Duration相关部分。</p>

<p>多个<code class="language-plaintext highlighter-rouge">@Scheduled</code>方法完全可以放到一个Bean中，这样便于统一管理各类定时任务。</p>

<hr />

<p><strong>使用Cron任务</strong></p>

<p>还有一类定时任务，它不是简单的重复执行，而是按时间触发，我们把这类任务称为Cron任务，例如：</p>

<ul>
  <li>每天凌晨2:15执行报表任务；</li>
  <li>每个工作日12:00执行特定任务；</li>
  <li>……</li>
</ul>

<p>Cron源自Unix/Linux系统自带的crond守护进程，以一个简洁的表达式定义任务触发时间。在Spring中，也可以使用Cron表达式来执行Cron任务，在Spring中，它的格式是：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>秒 分 小时 天 月份 星期 年
</code></pre></div></div>

<p>年是可以忽略的，通常不写。每天凌晨2:15执行的Cron表达式就是：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 15 2 * * *
</code></pre></div></div>

<p>每个工作日12:00执行的Cron表达式就是：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 0 12 * * MON-FRI
</code></pre></div></div>

<p>每个月1号，2号，3号和10号12:00执行的Cron表达式就是：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 0 12 1-3,10 * *
</code></pre></div></div>

<p>在Spring中，定义一个每天凌晨2:15执行的任务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskService</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Scheduled</span><span class="o">(</span><span class="n">cron</span> <span class="o">=</span> <span class="s">"${task.report:0 15 2 * * *}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cronDailyReport</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"开始检查系统状态.."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Cron任务同样可以使用属性占位符，这样修改起来更加方便。</p>

<p>Cron表达式还可以表达每10分钟执行，例如：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 */10 * * * *
</code></pre></div></div>

<p>这样，在每个小时的0:00，10:00，20:00，30:00，40:00，50:00均会执行任务，实际上它可以取代<code class="language-plaintext highlighter-rouge">fixedRate</code>类型的定时任务。</p>

<hr />

<p><strong>集成Quartz</strong></p>

<p>在Spring中使用定时任务和Cron任务都十分简单，但是要注意到，这些任务的调度都是在每个JVM进程中的。如果在本机启动两个进程，或者在多台机器上启动应用，这些进程的定时任务和Cron任务都是独立运行的，互不影响。</p>

<p>如果一些定时任务要以集群的方式运行，例如每天23:00执行检查任务，只需要集群中的一台运行即可，这个时候，可以考虑使用<a href="https://www.quartz-scheduler.org/">Quartz</a>。</p>

<p>Quartz可以配置一个JDBC数据源，以便存储所有的任务调度计划以及任务执行状态。也可以使用内存来调度任务，但这样配置就和使用Spring的调度没啥区别了，额外集成Quartz的意义就不大。</p>

<p>Quartz的JDBC配置比较复杂，Spring对其也有一定的支持。要详细了解Quartz的集成，请参考<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#scheduling-quartz">Spring的文档</a>。</p>

<h2 id="集成jmx">集成JMX</h2>

<p>JMX是Java Management Extensions，它是一个Java平台的管理和监控接口。在所有的应用程序中，对运行中的程序进行监控都是非常重要的，Java应用程序也不例外。我们肯定希望知道Java应用程序当前的状态，例如，占用了多少内存，分配了多少内存，当前有多少活动线程，有多少休眠线程等等。如何获取这些信息呢？</p>

<p>为了标准化管理和监控，Java平台使用JMX作为管理和监控的标准接口，任何程序，只要按JMX规范访问这个接口，就可以获取所有管理与监控信息。</p>

<p>实际上，常用的运维监控如Zabbix、Nagios等工具对JVM本身的监控都是通过JMX获取的信息。</p>

<p>因为JMX是一个标准接口，不但可以用于管理JVM，还可以管理应用程序自身。下图是JMX的架构：</p>

<pre><code class="language-ascii">    ┌─────────┐  ┌─────────┐
    │jconsole │  │   Web   │
    └─────────┘  └─────────┘
         │            │
┌ ─ ─ ─ ─│─ ─ ─ ─ ─ ─ ┼ ─ ─ ─ ─
 JVM     ▼            ▼        │
│   ┌─────────┐  ┌─────────┐
  ┌─┤Connector├──┤ Adaptor ├─┐ │
│ │ └─────────┘  └─────────┘ │
  │       MBeanServer        │ │
│ │ ┌──────┐┌──────┐┌──────┐ │
  └─┤MBean1├┤MBean2├┤MBean3├─┘ │
│   └──────┘└──────┘└──────┘
 ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>JMX把所有被管理的资源都称为MBean（Managed Bean），这些MBean全部由MBeanServer管理，如果要访问MBean，可以通过MBeanServer对外提供的访问接口，例如通过RMI或HTTP访问。</p>

<p>使用JMX不需要安装任何额外组件，也不需要第三方库，因为MBeanServer已经内置在JavaSE标准库中了。JavaSE还提供了一个<code class="language-plaintext highlighter-rouge">jconsole</code>程序，用于通过RMI连接到MBeanServer，这样就可以管理整个Java进程。</p>

<p>除了JVM会把自身的各种资源以MBean注册到JMX中，我们自己的配置、监控信息也可以作为MBean注册到JMX，这样，管理程序就可以直接控制我们暴露的MBean。因此，应用程序使用JMX，只需要两步：</p>

<ol>
  <li>编写MBean提供管理接口和监控数据；</li>
  <li>注册MBean。</li>
</ol>

<p>而在Spring应用程序中，使用JMX只需要一步：</p>

<ol>
  <li>编写MBean提供管理接口和监控数据。</li>
</ol>

<p>第二步注册的过程由Spring自动完成。</p>

<p>首先在<code class="language-plaintext highlighter-rouge">AppConfig</code>中加上<code class="language-plaintext highlighter-rouge">@EnableMBeanExport</code>注解，告诉Spring自动注册MBean。</p>

<p>剩下的全部工作就是编写MBean。以实际问题为例，假设我们希望给应用程序添加一个IP黑名单功能，凡是在黑名单中的IP禁止访问，传统的做法是定义一个配置文件，启动的时候读取：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># blacklist.txt
1.2.3.4
5.6.7.8
2.2.3.4
...
</code></pre></div></div>

<p>如果要修改黑名单怎么办？修改配置文件，然后重启应用程序。</p>

<p>但是每次都重启应用程序实在是太麻烦了，能不能不重启应用程序？可以自己写一个定时读取配置文件的功能，检测到文件改动时自动重新读取。</p>

<p>上述需求本质上是在应用程序运行期间对参数、配置等进行热更新并要求尽快生效。如果以JMX的方式实现，不必自己编写自动重新读取等任何代码，只需要提供一个符合JMX标准的MBean来存储配置即可。</p>

<p>还是以IP黑名单为例，JMX的MBean通常以MBean结尾，因此遵循标准命名规范，首先编写一个<code class="language-plaintext highlighter-rouge">BlacklistMBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlacklistMBean</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ips</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getBlacklist</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addBlacklist</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ips</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeBlacklist</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ips</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">shouldBlock</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个MBean没什么特殊的，它的逻辑和普通Java类没有任何区别。</p>

<p>下一步，我们要使用JMX的客户端来实时热更新这个MBean，所以要给它加上一些注解，让Spring能根据注解自动把相关方法注册到MBeanServer中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ManagedResource</span><span class="o">(</span><span class="n">objectName</span> <span class="o">=</span> <span class="s">"sample:name=blacklist"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Blacklist of IP addresses"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlacklistMBean</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ips</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@ManagedAttribute</span><span class="o">(</span><span class="n">description</span> <span class="o">=</span> <span class="s">"Get IP addresses in blacklist"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getBlacklist</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="n">ips</span><span class="o">.</span><span class="na">size</span><span class="o">()]);</span>
    <span class="o">}</span>

    <span class="nd">@ManagedOperation</span>
    <span class="nd">@ManagedOperationParameter</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ip"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Target IP address that will be added to blacklist"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addBlacklist</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ips</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@ManagedOperation</span>
    <span class="nd">@ManagedOperationParameter</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ip"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Target IP address that will be removed from blacklist"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeBlacklist</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ips</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">shouldBlock</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ips</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BlacklistMBean</code>首先是一个标准的Spring管理的Bean，其次，添加了<code class="language-plaintext highlighter-rouge">@ManagedResource</code>表示这是一个MBean，将要被注册到JMX。objectName指定了这个MBean的名字，通常以<code class="language-plaintext highlighter-rouge">company:name=Xxx</code>来分类MBean。</p>

<p>对于属性，使用<code class="language-plaintext highlighter-rouge">@ManagedAttribute</code>注解标注。上述MBean只有get属性，没有set属性，说明这是一个只读属性。</p>

<p>对于操作，使用<code class="language-plaintext highlighter-rouge">@ManagedOperation</code>注解标准。上述MBean定义了两个操作：<code class="language-plaintext highlighter-rouge">addBlacklist()</code>和<code class="language-plaintext highlighter-rouge">removeBlacklist()</code>，其他方法如<code class="language-plaintext highlighter-rouge">shouldBlock()</code>不会被暴露给JMX。</p>

<p>使用MBean和普通Bean是完全一样的。例如，在<code class="language-plaintext highlighter-rouge">BlacklistInterceptor</code>对IP进行黑名单拦截：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlacklistInterceptor</span> <span class="kd">implements</span> <span class="nc">HandlerInterceptor</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">BlacklistMBean</span> <span class="n">blacklistMBean</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRemoteAddr</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"检查 IP 地址 {}..."</span><span class="o">,</span> <span class="n">ip</span><span class="o">);</span>
        <span class="c1">// 是否在黑名单中:</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">blacklistMBean</span><span class="o">.</span><span class="na">shouldBlock</span><span class="o">(</span><span class="n">ip</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"将阻止 IP {}，因为它在黑名单中。"</span><span class="o">,</span> <span class="n">ip</span><span class="o">);</span>
            <span class="c1">// 发送403错误响应:</span>
            <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="mi">403</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>下一步就是正常启动Web应用程序，不要关闭它，我们打开另一个命令行窗口，输入<code class="language-plaintext highlighter-rouge">jconsole</code>启动JavaSE自带的一个JMX客户端程序：</p>

<p>通过jconsole连接到一个Java进程最简单的方法是直接在Local Process中找到正在运行的<code class="language-plaintext highlighter-rouge">AppConfig</code>，点击Connect即可连接到当前正在运行的Web应用，在jconsole中可直接看到内存、CPU等资源的监控。</p>

<p>点击MBean，左侧按分类列出所有MBean，在<code class="language-plaintext highlighter-rouge">sample</code>中可以看到我们自己的MBean，点击可查看属性<code class="language-plaintext highlighter-rouge">blacklist</code>。</p>

<p>点击<code class="language-plaintext highlighter-rouge">Operations</code>-<code class="language-plaintext highlighter-rouge">addBlacklist</code>，可以填入<code class="language-plaintext highlighter-rouge">127.0.0.1</code>并点击<code class="language-plaintext highlighter-rouge">addBlacklist</code>按钮，相当于jconsole通过JMX接口，调用了我们自己的<code class="language-plaintext highlighter-rouge">BlacklistMBean</code>的<code class="language-plaintext highlighter-rouge">addBlacklist()</code>方法，传入的参数就是填入的<code class="language-plaintext highlighter-rouge">127.0.0.1</code>。</p>

<p>再次查看属性<code class="language-plaintext highlighter-rouge">blacklist</code>，可以看到结果已经更新了。</p>

<p>注意：如果使用IPv6，那么需要把<code class="language-plaintext highlighter-rouge">0:0:0:0:0:0:0:1</code>这个本机地址加到黑名单。</p>

<p>可以在浏览器中测试一下黑名单功能是否已生效：</p>

<p>可见，<code class="language-plaintext highlighter-rouge">127.0.0.1</code>确实被添加到了黑名单，后台日志打印如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>09:10:31.557 [http-nio-8080-exec-9] INFO com.aotmd.test.BlacklistInterceptor - 检查 IP 地址 0:0:0:0:0:0:0:1...
09:10:31.557 [http-nio-8080-exec-9] WARN com.aotmd.test.BlacklistInterceptor - 将阻止 IP 0:0:0:0:0:0:0:1，因为它在黑名单中。
</code></pre></div></div>

<p>如果从jconsole中调用<code class="language-plaintext highlighter-rouge">removeBlacklist</code>移除<code class="language-plaintext highlighter-rouge">127.0.0.1</code>，刷新浏览器可以看到又允许访问了。</p>

<p>使用jconsole直接通过Local Process连接JVM有个限制，就是jconsole和正在运行的JVM必须在同一台机器。如果要远程连接，首先要打开JMX端口。在启动<code class="language-plaintext highlighter-rouge">AppConfig</code>时，需要传入以下JVM启动参数：</p>

<ul>
  <li>-Dcom.sun.management.jmxremote.port=19999</li>
  <li>-Dcom.sun.management.jmxremote.authenticate=false</li>
  <li>-Dcom.sun.management.jmxremote.ssl=false</li>
</ul>

<p>第一个参数表示在19999端口监听JMX连接，第二个和第三个参数表示无需验证，不使用SSL连接，在开发测试阶段比较方便，生产环境必须指定验证方式并启用SSL。详细参数可参考Oracle<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/management/agent.html#gdeum">官方文档</a>。这样jconsole可以用<code class="language-plaintext highlighter-rouge">ip:19999</code>的远程方式连接JMX。连接后的操作是完全一样的。</p>

<p>许多JavaEE服务器如JBoss的管理后台都是通过JMX提供管理接口，并由Web方式访问，对用户更加友好。</p>

<p>通过JMX实现配置的实时更新其实并不常用，JMX更多地用于收集JVM的运行状态和应用程序的性能数据，然后通过监控服务器汇总数据后实现监控与报警。一个典型的监控系统架构如下：</p>

<pre><code class="language-ascii">┌───────────────┐   ┌───────────────┐
│  Web Console  │◀──│Metrics Server │
└───────────────┘   └───────────────┘
                            │
                            │
   ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─│─ ─ ┐
     ┌───────────────┐      │
   │ │      App      │      │    │
     ├─────────┬─────┤   ┌─────┐
   │ │         │ JMX │──▶│Agent│ │
     │         └─────┤   └─────┘
   │ │      JVM      │           │
     └───────────────┘
   └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>其中，App自身和JVM的的统计数据都通过JMX收集并发送给本机的一个Agent，Agent再将数据发送至监控服务器，最后以可视化的形式将监控数据通过Web等形式展示给用户。常用的监控系统有开源的<a href="https://prometheus.io/">Prometheus</a>和以云服务方式提供的<a href="https://www.datadoghq.com/">DataDog</a>等。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">简单实现@GetMapping</title><link href="/2024/05/17/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0@GetMapping/" rel="alternate" type="text/html" title="简单实现@GetMapping" /><published>2024-05-17T00:00:00+08:00</published><updated>2024-05-17T00:00:00+08:00</updated><id>/2024/05/17/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0@GetMapping</id><content type="html" xml:base="/2024/05/17/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0@GetMapping/"><![CDATA[<h1 id="简单实现getmapping">简单实现@GetMapping</h1>

<p>首先写个<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>，URL路径为：<code class="language-plaintext highlighter-rouge">/</code>,表示所有没有指定<code class="language-plaintext highlighter-rouge">Servlet</code>处理的URL，都映射到此Servlet，然后<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>再根据路径执行特定的方法。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DispatcherServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Get</span><span class="o">&gt;</span> <span class="n">getMappings</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// todo 扫描注解</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 根据路径查找GetDispatcher:</span>
        <span class="nc">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">().</span><span class="na">length</span><span class="o">());</span>
        <span class="nc">Get</span> <span class="n">get</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getMappings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">get</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 未找到返回404:</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="mi">404</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">String</span> <span class="n">s</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="cm">/*调用使用反射的方法*/</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">get</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InvocationTargetException</span> <span class="o">|</span> <span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"redirect:"</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">9</span><span class="o">));</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="cm">/*todo 其他处理*/</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span><span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后写个Get类用于通过反射执行指定方法，还需要传入指定方法需要的形参类型的实例，如果形参名字对的上key就尝试获取值：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Get</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="n">instance</span><span class="o">;</span> <span class="c1">// Controller实例</span>
    <span class="kd">private</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">;</span> <span class="c1">// Controller方法</span>
    <span class="kd">private</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">parameterNames</span><span class="o">;</span> <span class="c1">// 方法参数名称</span>
    <span class="kd">private</span> <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">parameterClasses</span><span class="o">;</span> <span class="c1">// 方法参数类型</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InvocationTargetException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="nc">Object</span><span class="o">[]</span> <span class="n">arguments</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">parameterClasses</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parameterClasses</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">parameterName</span> <span class="o">=</span> <span class="n">parameterNames</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">parameterClass</span> <span class="o">=</span> <span class="n">parameterClasses</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="nc">HttpServletRequest</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="nc">HttpServletResponse</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="nc">HttpSession</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">getOrDefault</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parameterName</span><span class="o">,</span> <span class="s">"0"</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="kt">long</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">getOrDefault</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parameterName</span><span class="o">,</span> <span class="s">"0"</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="kt">boolean</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Boolean</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">getOrDefault</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parameterName</span><span class="o">,</span> <span class="s">"false"</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">parameterClass</span> <span class="o">==</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">arguments</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">getOrDefault</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parameterName</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"缺少类型的处理程序: "</span> <span class="o">+</span> <span class="n">parameterClass</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">instance</span><span class="o">,</span> <span class="n">arguments</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">getOrDefault</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">defaultValue</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">defaultValue</span> <span class="o">:</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setInstance</span><span class="o">(</span><span class="nc">Object</span> <span class="n">instance</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">instance</span> <span class="o">=</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMethod</span><span class="o">(</span><span class="nc">Method</span> <span class="n">method</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">method</span> <span class="o">=</span> <span class="n">method</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setParameterNames</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">parameterNames</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">parameterNames</span> <span class="o">=</span> <span class="n">parameterNames</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setParameterClasses</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">parameterClasses</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">parameterClasses</span> <span class="o">=</span> <span class="n">parameterClasses</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再之后就是写注解了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">GetMapping</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">value</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后需要一个根据指定包扫描注解对应的类，方法，和方法参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Scan</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Get</span><span class="o">&gt;</span> <span class="n">getMappings</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Class</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">classes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="nf">Scan</span><span class="o">(</span><span class="nc">String</span> <span class="n">packageName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">scanClassFile</span><span class="o">(</span><span class="n">packageName</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">workAnnotations</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InstantiationException</span> <span class="o">|</span> <span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getClasspath</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
        <span class="no">URL</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">classLoader</span><span class="o">.</span><span class="na">getResource</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">resource</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">resource</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 找全部class
     * @param packageName
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">scanClassFile</span><span class="o">(</span><span class="nc">String</span> <span class="n">packageName</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">basePath</span><span class="o">=</span> <span class="n">packageName</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'/'</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">classpath</span> <span class="o">=</span> <span class="n">getClasspath</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">File</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">File</span> <span class="n">baseDir</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">classpath</span><span class="o">,</span> <span class="n">basePath</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">baseDir</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">file</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span> <span class="k">continue</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">list</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">listFiles</span><span class="o">()));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">".class"</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">packageName</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">replace</span><span class="o">(</span><span class="s">".class"</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">className</span><span class="o">);</span>
                    <span class="n">classes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// 处理异常</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">workAnnotations</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InstantiationException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="cm">/*过滤掉接口*/</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Class</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">collect</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">x</span><span class="o">.</span><span class="na">isInterface</span><span class="o">()).</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">aClass</span> <span class="o">:</span> <span class="n">collect</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Object</span> <span class="n">o</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
            <span class="nc">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">aClass</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">methods</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Annotation</span><span class="o">[]</span> <span class="n">annotations</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getAnnotations</span><span class="o">();</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Annotation</span> <span class="n">annotation</span> <span class="o">:</span> <span class="n">annotations</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">annotation</span> <span class="k">instanceof</span> <span class="nc">GetMapping</span><span class="o">){</span>
                        <span class="cm">/*共享实例，不然实例变量无效了（因为每个方法都实例化了一个实例对象）*/</span>
                        <span class="n">o</span><span class="o">=</span><span class="n">getMappingWork</span><span class="o">(</span><span class="n">aClass</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="o">(</span><span class="nc">GetMapping</span><span class="o">)</span> <span class="n">annotation</span><span class="o">,</span><span class="n">o</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="nc">Object</span> <span class="nf">getMappingWork</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">aClass</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">GetMapping</span> <span class="n">annotation</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InstantiationException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="nc">Parameter</span><span class="o">[]</span> <span class="n">parameters</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getParameters</span><span class="o">();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">parameterNames</span><span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="n">parameters</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">parameterClasses</span><span class="o">=</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">[</span><span class="n">parameters</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parameters</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Parameter</span> <span class="n">parameter</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">parameterNames</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">parameter</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
            <span class="n">parameterClasses</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">parameter</span><span class="o">.</span><span class="na">getType</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span> <span class="n">o</span> <span class="o">=</span> <span class="n">aClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
        <span class="nc">Get</span> <span class="n">getDispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Get</span><span class="o">();</span>
        <span class="n">getDispatcher</span><span class="o">.</span><span class="na">setInstance</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
        <span class="n">getDispatcher</span><span class="o">.</span><span class="na">setMethod</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
        <span class="n">getDispatcher</span><span class="o">.</span><span class="na">setParameterClasses</span><span class="o">(</span><span class="n">parameterClasses</span><span class="o">);</span>
        <span class="n">getDispatcher</span><span class="o">.</span><span class="na">setParameterNames</span><span class="o">(</span><span class="n">parameterNames</span><span class="o">);</span>
        <span class="n">getMappings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">annotation</span><span class="o">.</span><span class="na">value</span><span class="o">(),</span><span class="n">getDispatcher</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Get</span><span class="o">&gt;</span> <span class="nf">getGetMappings</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">getMappings</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>最后整合进<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// todo 扫描注解</span>
    <span class="nc">Scan</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scan</span><span class="o">(</span><span class="s">"servlet"</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">getMappings</span><span class="o">=</span><span class="n">test</span><span class="o">.</span><span class="na">getGetMappings</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样就扫描了<code class="language-plaintext highlighter-rouge">servlet</code>包下的所有<code class="language-plaintext highlighter-rouge">@GetMapping</code>注解。测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span><span class="n">key</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"redirect:index.jsp"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">index.jsp</code>:</p>

<div class="language-jsp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>你好!<span class="nt">&lt;c:out </span><span class="na">value=</span><span class="s">"</span><span class="si">${</span><span class="n">user</span><span class="si">}</span><span class="s">"</span><span class="nt">/&gt;&lt;/h1&gt;</span>
</code></pre></div></div>

<p>设置程序编译参数：<code class="language-plaintext highlighter-rouge">-parameters</code>，它的作用是在编译后的类文件中<strong>保留方法参数的名称</strong>。默认情况下，Java编译器在编译过程中会丢弃方法参数的名称，而只保留参数的顺序。</p>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/test?key=bob</code>正常使用。</p>

<hr />

<p>还可以使用模板引擎渲染内容：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/io.pebbletemplates/pebble --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>pebble<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>3.2.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewEngine</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">PebbleEngine</span> <span class="n">engine</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ViewEngine</span><span class="o">(</span><span class="nc">ServletContext</span> <span class="n">servletContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 定义一个ServletLoader用于加载模板:</span>
        <span class="nc">ServletLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServletLoader</span><span class="o">(</span><span class="n">servletContext</span><span class="o">);</span>
        <span class="c1">// 模板编码:</span>
        <span class="n">loader</span><span class="o">.</span><span class="na">setCharset</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 模板前缀，这里默认模板必须放在`/WEB-INF/templates`目录:</span>
        <span class="n">loader</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/templates"</span><span class="o">);</span>
        <span class="c1">// 模板后缀:</span>
        <span class="n">loader</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="c1">// 创建Pebble实例:</span>
        <span class="k">this</span><span class="o">.</span><span class="na">engine</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PebbleEngine</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">autoEscaping</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="c1">// 默认打开HTML字符转义，防止XSS攻击</span>
                <span class="o">.</span><span class="na">cacheActive</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="c1">// 禁用缓存使得每次修改模板可以立刻看到效果</span>
                <span class="o">.</span><span class="na">loader</span><span class="o">(</span><span class="n">loader</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="nc">ModelAndView</span> <span class="n">mv</span><span class="o">,</span> <span class="nc">Writer</span> <span class="n">writer</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// 查找模板:</span>
        <span class="nc">PebbleTemplate</span> <span class="n">template</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">engine</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getView</span><span class="o">());</span>
        <span class="c1">// 渲染:</span>
        <span class="n">template</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">writer</span><span class="o">,</span> <span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>存储页面URL和映射表：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ModelAndView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">view</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">getModel</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">model</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setModel</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getView</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setView</span><span class="o">(</span><span class="nc">String</span> <span class="n">view</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">view</span> <span class="o">=</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因此，返回值需要从<code class="language-plaintext highlighter-rouge">String</code>修改为<code class="language-plaintext highlighter-rouge">ModelAndView</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DispatcherServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Get</span><span class="o">&gt;</span> <span class="n">getMappings</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ViewEngine</span> <span class="n">viewEngine</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// todo 扫描注解</span>
        <span class="nc">Scan</span> <span class="n">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scan</span><span class="o">(</span><span class="s">"servlet2"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">getMappings</span><span class="o">=</span><span class="n">test</span><span class="o">.</span><span class="na">getGetMappings</span><span class="o">();</span>
        <span class="c1">// 模板引擎初始化</span>
        <span class="n">viewEngine</span><span class="o">=</span><span class="k">new</span> <span class="nc">ViewEngine</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="c1">// 根据路径查找GetDispatcher:</span>
        <span class="nc">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">().</span><span class="na">length</span><span class="o">());</span>
        <span class="nc">Get</span> <span class="n">get</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getMappings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">get</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 未找到返回404:</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="mi">404</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">ModelAndView</span> <span class="n">mv</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">mv</span> <span class="o">=</span> <span class="n">get</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InvocationTargetException</span> <span class="o">|</span> <span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 允许返回null:</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">mv</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 允许返回`redirect:`开头的view表示重定向:</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getView</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"redirect:"</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getView</span><span class="o">().</span><span class="na">substring</span><span class="o">(</span><span class="mi">9</span><span class="o">));</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 将模板引擎渲染的内容写入响应:</span>
        <span class="nc">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewEngine</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">,</span> <span class="n">pw</span><span class="o">);</span>
        <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">test</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="nc">ModelAndView</span> <span class="n">modelAndView</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ModelAndView</span><span class="o">();</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span><span class="n">key</span><span class="o">);</span>
        <span class="n">modelAndView</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
        <span class="n">modelAndView</span><span class="o">.</span><span class="na">setView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">modelAndView</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">/WEB-INF/templates/test.html</code>内用双大括号引用变量<code class="language-plaintext highlighter-rouge">user</code>即：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/test?key=bob</code>正常使用。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">设计模式</title><link href="/2024/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="alternate" type="text/html" title="设计模式" /><published>2024-05-02T00:00:00+08:00</published><updated>2024-05-02T00:00:00+08:00</updated><id>/2024/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F</id><content type="html" xml:base="/2024/05/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"><![CDATA[<h1 id="引言">引言</h1>
<p>设计模式，即Design Patterns，是指在软件设计中，被反复使用的一种代码设计经验。使用设计模式的目的是为了可重用代码，提高代码的可扩展性和可维护性。</p>

<h1 id="设计模式">设计模式</h1>

<p>软件开发要实现可维护、可扩展，就必须尽量复用代码，并且降低代码的耦合度。设计模式主要是基于OOP编程提炼的。23个常用模式分为创建型模式、结构型模式和行为型模式三类，基于以下几个原则：</p>

<p><strong>开闭原则</strong></p>

<p>软件应该对扩展开放，而对修改关闭。在增加新功能的时候，能不改代码就尽量不要改，如果只增加代码就完成了新功能，那是最好的。</p>

<p><strong>单一职责原则</strong></p>

<p>一个类只负责一项职责。针对一个类，其承担的职责越多，被复用的可能性就越小。如果类承担的职责很多，就意味着这些职责耦合在了一起。</p>

<p><strong>里氏替换原则</strong></p>

<p>如果调用一个父类的方法可以成功，那么替换成子类调用也应该完全可以运行。</p>

<p><strong>接口隔离原则</strong></p>

<ul>
  <li>客户需要什么样的接口，就提供什么样的接口，不需要的就删除掉；</li>
  <li>类之间的依赖关系应建立在最小的接口上。也就是说，接口中的方法要尽量的少，接口功能要尽量的细分。</li>
</ul>

<p><strong>依赖倒置原则</strong></p>

<p>依赖倒转原则就是要依赖于抽象，不要依赖于实现。高层模块不依赖于底层模块，二者都依赖其抽象；抽象不依赖于细节，细节应该依赖抽象。</p>

<p>也就是说应当使用接口和抽象类进行变量类型声明、参数类型声明、方法返还类型说明，以及数据类型的转换等，而不是用具体类。<strong>一个具体类应当只实现接口和抽象类中声明过的方法，而不要给出多余的方法</strong>。特例：对象的创建过程是违背“开—闭”原则以及依赖倒转原则的，但通过工厂模式，能很好地解决对象创建过程中的依赖倒转问题。</p>

<p><strong>迪米特原则</strong></p>

<p>又称为最少知识原则，<strong>一个软件实体应当尽可能少地与其他实体发生相互作用。</strong></p>

<p>如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用。如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。</p>

<p>在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；</p>

<p>在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；只要有可能，一个类型应当设计成不变类；在对其他类的引用上，一个对象对其他对象的引用应当降到最低。</p>

<p><strong>组合/聚合复用原则</strong></p>

<p>简单的说是，尽量使用对象的组合/聚合，而不是继承来达到复用的目的。</p>

<p>组合和聚合都是对象建模中关联关系的一种。聚合表示整体与部分的关系，表示“含有”，整体由部分组合而成，部分可以脱离整体作为一个独立的个体存在。组合则是一种更强的聚合，部分组成整体，而且不可分割，部分不能脱离整体而单独存在。</p>

<p>组合/聚合和继承是实现代码复用的两种基本途径，在设计过程中尽量使用组合/聚合，而不是继承。因为继承使得基类与子类有较强的耦合性，通常情况下基类的内部细节对子类来说是可见的，这样基类的实现细节会暴露给子类，破坏了系统的封装性。</p>

<p>开闭原则是所有面向对象原则的核心；里式替换原则是实现开闭原则的重要方式之一；依赖倒置原则是系统抽象化的具体实现，其是面向对象设计的主要实现机制之一；接口隔离原则要求接口的方法尽量少，接口尽量细化；迪米特原则降低系统的耦合度，其使得一个模块的修改尽量少的影响其他模块，扩展会相对容易；尽量使用组合/聚合而不是继承达到代码复用的目的。</p>

<h2 id="创建型模式">创建型模式</h2>

<p>创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。</p>

<p>常见的创建型模式：</p>

<ul>
  <li><strong>工厂方法模式（Factory Method Pattern）</strong>：定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。</li>
  <li><strong>抽象工厂模式（Abstract Factory Pattern）</strong>：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</li>
  <li><strong>建造者模式（Builder Pattern）</strong>：将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示。</li>
  <li><strong>原型模式（Prototype Pattern）</strong>：用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</li>
  <li><strong>单例模式（Singleton Pattern）</strong>：确保一个类只有一个实例，并提供一个全局访问点。</li>
</ul>

<h3 id="工厂方法">工厂方法</h3>

<blockquote>
  <p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。</p>
</blockquote>

<p>工厂方法即Factory Method，是一种对象创建型模式。</p>

<p>工厂方法的目的是使得<strong>创建对象</strong>和<strong>使用对象</strong>是<strong>分离</strong>的，并且客户端<strong>总是引用抽象工厂和抽象产品</strong>：</p>

<pre><code class="language-ascii">┌─────────────┐      ┌─────────────┐
│   Product   │      │   Factory   │
└─────────────┘      └─────────────┘
       ▲                    ▲
       │                    │
┌─────────────┐      ┌─────────────┐
│ ProductImpl │&lt;─ ─ ─│ FactoryImpl │
└─────────────┘      └─────────────┘
</code></pre>

<p>实现一个解析<code class="language-plaintext highlighter-rouge">字符串</code>为<code class="language-plaintext highlighter-rouge">Number</code>的<code class="language-plaintext highlighter-rouge">Factory</code>，可以定义如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">NumberFactory</span> <span class="o">{</span>
    <span class="nc">Number</span> <span class="nf">parse</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>有了工厂接口，再编写一个工厂的实现类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberFactoryImpl</span> <span class="kd">implements</span> <span class="nc">NumberFactory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Number</span> <span class="nf">parse</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>产品接口是<code class="language-plaintext highlighter-rouge">Number</code>，<code class="language-plaintext highlighter-rouge">NumberFactoryImpl</code>返回的实际产品是<code class="language-plaintext highlighter-rouge">BigDecimal</code>。</p>

<p>通常会在接口<code class="language-plaintext highlighter-rouge">Factory</code>中再定义一个静态方法<code class="language-plaintext highlighter-rouge">getFactory()</code>来返回真正的子类（在 <strong>Java 8</strong> 中，接口可以包含静态方法）：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">NumberFactory</span> <span class="o">{</span>
    <span class="c1">// 创建方法:</span>
    <span class="nc">Number</span> <span class="nf">parse</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
    <span class="c1">// 获取工厂实例:</span>
    <span class="kd">static</span> <span class="nc">NumberFactory</span> <span class="nf">getFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">impl</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">NumberFactory</span> <span class="n">impl</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NumberFactoryImpl</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在客户端中，只需要和工厂接口<code class="language-plaintext highlighter-rouge">NumberFactory</code>以及抽象产品<code class="language-plaintext highlighter-rouge">Number</code>打交道：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">NumberFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="nc">NumberFactory</span><span class="o">.</span><span class="na">getFactory</span><span class="o">();</span>
<span class="nc">Number</span> <span class="n">result</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">"123.456"</span><span class="o">);</span>
</code></pre></div></div>

<p>调用方可以完全忽略真正的工厂<code class="language-plaintext highlighter-rouge">NumberFactoryImpl</code>和实际的产品<code class="language-plaintext highlighter-rouge">BigDecimal</code>，这样做的好处是允许创建产品的代码独立地变换，而不会影响到调用方。</p>

<hr />

<p>实际上，大多数情况下并不需要抽象工厂，而是通过静态方法直接返回产品，即：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberFactory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Number</span> <span class="nf">parse</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这种简化的使用静态方法创建产品的方式称为静态工厂方法（Static Factory Method）。</p>

<p>静态工厂方法广泛地应用在Java标准库中。例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Integer</code>既是产品又是静态工厂，它提供了静态方法<code class="language-plaintext highlighter-rouge">valueOf()</code>来创建<code class="language-plaintext highlighter-rouge">Integer</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Integer</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Integer</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="nc">IntegerCache</span><span class="o">.</span><span class="na">low</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="nc">IntegerCache</span><span class="o">.</span><span class="na">high</span><span class="o">)</span>
            <span class="k">return</span> <span class="nc">IntegerCache</span><span class="o">.</span><span class="na">cache</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="o">(-</span><span class="nc">IntegerCache</span><span class="o">.</span><span class="na">low</span><span class="o">)];</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Integer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">valueOf()</code>内部可能会使用<code class="language-plaintext highlighter-rouge">new</code>创建一个新的<code class="language-plaintext highlighter-rouge">Integer</code>实例，但也可能直接返回一个缓存的<code class="language-plaintext highlighter-rouge">Integer</code>实例。对于调用方来说，没必要知道<code class="language-plaintext highlighter-rouge">Integer</code>创建的细节。</p>

<p>工厂方法可以<strong>隐藏创建产品的细节</strong>，且不一定每次都会真正创建产品，完全可以返回缓存的产品，从而提升速度并减少内存消耗。</p>

<p>如果调用方直接使用<code class="language-plaintext highlighter-rouge">Integer n = new Integer(100)</code>，那么就失去了使用缓存优化的可能性。</p>

<hr />

<p>经常使用的另一个静态工厂方法是<code class="language-plaintext highlighter-rouge">List.of()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">);</span>
</code></pre></div></div>

<p>这个静态工厂方法接收可变参数，然后返回<code class="language-plaintext highlighter-rouge">List</code>接口。需要注意的是，调用方获取的产品总是<code class="language-plaintext highlighter-rouge">List</code>接口，而且并不关心它的实际类型。</p>

<p>即使调用方知道<code class="language-plaintext highlighter-rouge">List</code>产品的实际类型是<code class="language-plaintext highlighter-rouge">java.util.ImmutableCollections$ListN</code>，也不要去强制转型为子类，因为静态工厂方法<code class="language-plaintext highlighter-rouge">List.of()</code>保证返回<code class="language-plaintext highlighter-rouge">List</code>，但也完全可以修改为返回<code class="language-plaintext highlighter-rouge">java.util.ArrayList</code>。这就是里氏替换原则：返回实现接口的任意子类都可以满足该方法的要求，且不影响调用方。</p>

<p>总是引用接口而非实现类，能允许变换子类而不影响调用方，即尽可能面向抽象编程。</p>

<hr />

<p>和<code class="language-plaintext highlighter-rouge">List.of()</code>类似，使用<code class="language-plaintext highlighter-rouge">MessageDigest</code>时，为了创建某个摘要算法，总是使用静态工厂方法<code class="language-plaintext highlighter-rouge">getInstance(String)</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MessageDigest</span> <span class="n">md5</span> <span class="o">=</span> <span class="nc">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"MD5"</span><span class="o">);</span>
<span class="nc">MessageDigest</span> <span class="n">sha1</span> <span class="o">=</span> <span class="nc">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"SHA-1"</span><span class="o">);</span>
</code></pre></div></div>

<p>调用方通过产品名称获得产品实例，不但调用简单，而且获得的引用仍然是<code class="language-plaintext highlighter-rouge">MessageDigest</code>这个抽象类。</p>

<h3 id="抽象工厂">抽象工厂</h3>

<blockquote>
  <p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
</blockquote>

<p>抽象工厂模式（Abstract Factory）是一个比较复杂的创建型模式。</p>

<p>抽象工厂模式和工厂方法不太一样，它要解决的问题比较复杂，工厂是抽象的，产品也是抽象的，而且有多个产品需要创建，因此，这个抽象工厂会对应到多个实际工厂，每个实际工厂负责创建多个实际产品：</p>

<pre><code class="language-ascii">                                ┌────────┐
                             ─ &gt;│ProductA│
┌────────┐    ┌─────────┐   │   └────────┘
│ Client │─ ─&gt;│ Factory │─ ─
└────────┘    └─────────┘   │   ┌────────┐
                   ▲         ─ &gt;│ProductB│
           ┌───────┴───────┐    └────────┘
           │               │
      ┌─────────┐     ┌─────────┐
      │Factory1 │     │Factory2 │
      └─────────┘     └─────────┘
           │   ┌─────────┐ │   ┌─────────┐
            ─ &gt;│ProductA1│  ─ &gt;│ProductA2│
           │   └─────────┘ │   └─────────┘
               ┌─────────┐     ┌─────────┐
           └ ─&gt;│ProductB1│ └ ─&gt;│ProductB2│
               └─────────┘     └─────────┘
</code></pre>

<p>这种模式有点类似于多个供应商负责提供一系列类型的产品。</p>

<p>假设希望为用户提供一个可以买荤素菜的环境，定义接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="o">{</span>
    <span class="nc">IMeat</span> <span class="nf">buyMeatDishes</span><span class="o">();</span>
    <span class="nc">IVegetarian</span> <span class="nf">buyVegetarianDishes</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">IMeat</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">getMeatName</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">IVegetarian</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">getVegetarianName</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>定义了抽象工厂（<code class="language-plaintext highlighter-rouge">ImeatAndVegetarianFactory</code>）以及两个抽象产品（<code class="language-plaintext highlighter-rouge">IMeat</code>和<code class="language-plaintext highlighter-rouge">IVegetarian</code>）。假设环境可以是超市也可以是菜市场，先写菜市场：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*菜市场*/</span>
<span class="kd">class</span> <span class="nc">MeatDishesFromTheWetMarketImpl</span> <span class="kd">implements</span> <span class="nc">IMeat</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getMeatName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"菜市场的荤菜"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">VegetarianDishesInTheWetMarketImpl</span> <span class="kd">implements</span> <span class="nc">IVegetarian</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getVegetarianName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"菜市场的素菜"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">MarketFactoryImpl</span> <span class="kd">implements</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IMeat</span> <span class="nf">buyMeatDishes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MeatDishesFromTheWetMarketImpl</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IVegetarian</span> <span class="nf">buyVegetarianDishes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">VegetarianDishesInTheWetMarketImpl</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后就可以使用了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">meatAndVegetarianFactory</span> <span class="n">f</span><span class="o">=</span><span class="k">new</span> <span class="nc">MarketFactoryImpl</span><span class="o">();</span><span class="c1">//菜市场</span>
<span class="nc">IMeat</span> <span class="nc">IMeat</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">buyMeatDishes</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">IMeat</span><span class="o">.</span><span class="na">getMeatName</span><span class="o">());</span><span class="c1">//菜市场的荤菜</span>
<span class="nc">IVegetarian</span> <span class="nc">IVegetarian</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">buyVegetarianDishes</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">IVegetarian</span><span class="o">.</span><span class="na">getVegetarianName</span><span class="o">());</span><span class="c1">//菜市场的素菜</span>
</code></pre></div></div>

<p>看起来似乎也没什么特别的作用。</p>

<p>再写超市：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MeatDishesFromTheWetSupermarket</span> <span class="kd">implements</span> <span class="nc">IMeat</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getMeatName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"超市的荤菜"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">VegetarianDishesInTheWetSupermarket</span> <span class="kd">implements</span> <span class="nc">IVegetarian</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getVegetarianName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"超市的素菜"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SupermarketImpl</span> <span class="kd">implements</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IMeat</span> <span class="nf">buyMeatDishes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MeatDishesFromTheWetSupermarket</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IVegetarian</span> <span class="nf">buyVegetarianDishes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">VegetarianDishesInTheWetSupermarket</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>要使用，则只需要改动一下初始化的工厂就行了：即把<code class="language-plaintext highlighter-rouge">new MarketFactoryImpl();</code>改成<code class="language-plaintext highlighter-rouge">new SupermarketImpl();</code>。这下作用比较明显了。</p>

<p>还可以把这行也隐藏起来，这样用户就完全不会接触到具体实现了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ImeatAndVegetarianFactory</span> <span class="n">f</span><span class="o">=</span> <span class="nc">ImeatAndVegetarianFactory</span><span class="o">.</span><span class="na">createFactory</span><span class="o">(</span><span class="s">"超市"</span><span class="o">);</span>
        <span class="nc">IMeat</span> <span class="nc">IMeat</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">buyMeatDishes</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">IMeat</span><span class="o">.</span><span class="na">getMeatName</span><span class="o">());</span>
        <span class="nc">IVegetarian</span> <span class="nc">IVegetarian</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">buyVegetarianDishes</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">IVegetarian</span><span class="o">.</span><span class="na">getVegetarianName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="o">{</span>
    <span class="nc">IMeat</span> <span class="nf">buyMeatDishes</span><span class="o">();</span>
    <span class="nc">IVegetarian</span> <span class="nf">buyVegetarianDishes</span><span class="o">();</span>
    <span class="kd">static</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="nf">createFactory</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"超市"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">SupermarketImpl</span><span class="o">();</span>
        <span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"菜市场"</span><span class="o">)){</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">MarketFactoryImpl</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"未定义"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>抽象工厂模式是为了让创建工厂和一组产品与使用相分离，并可以随时切换到另一个工厂以及另一组产品；</p>

<p>抽象工厂模式实现的关键点是<strong>定义工厂接口和产品接口</strong>，但如何实现工厂与产品本身需要留给具体的子类实现，<strong>客户端只和抽象工厂与抽象产品打交道</strong>。</p>

<hr />

<p>完整代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ImeatAndVegetarianFactory</span> <span class="n">f</span><span class="o">=</span> <span class="nc">ImeatAndVegetarianFactory</span><span class="o">.</span><span class="na">createFactory</span><span class="o">(</span><span class="s">"超市"</span><span class="o">);</span>
        <span class="n">test</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
        <span class="n">f</span><span class="o">=</span><span class="nc">ImeatAndVegetarianFactory</span><span class="o">.</span><span class="na">createFactory</span><span class="o">(</span><span class="s">"菜市场"</span><span class="o">);</span>
        <span class="n">test</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="nc">ImeatAndVegetarianFactory</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">IMeat</span> <span class="nc">IMeat</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">buyMeatDishes</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">IMeat</span><span class="o">.</span><span class="na">getMeatName</span><span class="o">());</span>
        <span class="nc">IVegetarian</span> <span class="nc">IVegetarian</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">buyVegetarianDishes</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">IVegetarian</span><span class="o">.</span><span class="na">getVegetarianName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="o">{</span>
    <span class="nc">IMeat</span> <span class="nf">buyMeatDishes</span><span class="o">();</span>
    <span class="nc">IVegetarian</span> <span class="nf">buyVegetarianDishes</span><span class="o">();</span>
    <span class="kd">static</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="nf">createFactory</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"超市"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">SupermarketImpl</span><span class="o">();</span>
        <span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"菜市场"</span><span class="o">)){</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">MarketFactoryImpl</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"未定义"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">IMeat</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">getMeatName</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">IVegetarian</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">getVegetarianName</span><span class="o">();</span>
<span class="o">}</span>
<span class="cm">/*菜市场*/</span>
<span class="kd">class</span> <span class="nc">MeatDishesFromTheWetMarketImpl</span> <span class="kd">implements</span> <span class="nc">IMeat</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getMeatName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"菜市场的荤菜"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">VegetarianDishesInTheWetMarketImpl</span> <span class="kd">implements</span> <span class="nc">IVegetarian</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getVegetarianName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"菜市场的素菜"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">MarketFactoryImpl</span> <span class="kd">implements</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IMeat</span> <span class="nf">buyMeatDishes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MeatDishesFromTheWetMarketImpl</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IVegetarian</span> <span class="nf">buyVegetarianDishes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">VegetarianDishesInTheWetMarketImpl</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*超市*/</span>
<span class="kd">class</span> <span class="nc">MeatDishesFromTheWetSupermarket</span> <span class="kd">implements</span> <span class="nc">IMeat</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getMeatName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"超市的荤菜"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">VegetarianDishesInTheWetSupermarket</span> <span class="kd">implements</span> <span class="nc">IVegetarian</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getVegetarianName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"超市的素菜"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SupermarketImpl</span> <span class="kd">implements</span> <span class="nc">ImeatAndVegetarianFactory</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IMeat</span> <span class="nf">buyMeatDishes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MeatDishesFromTheWetSupermarket</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">IVegetarian</span> <span class="nf">buyVegetarianDishes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">VegetarianDishesInTheWetSupermarket</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="生成器">生成器</h3>

<blockquote>
  <p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>

<p>生成器模式/建造者模式（Builder）是使用多个“小型”工厂来最终创建出一个完整对象。</p>

<p>使用Builder是因为创建这个对象的步骤比较多，每个步骤都需要一个零部件，最终组合成一个完整的对象。</p>

<p>以Markdown转HTML为例，直接编写一个完整的转换器比较困难，但如果针对类似下面的<strong>一行</strong>文本：</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># this is a heading</span>
</code></pre></div></div>

<p>转换成HTML就很简单：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>this is a heading<span class="nt">&lt;/h1&gt;</span>
</code></pre></div></div>

<p>因此，把Markdown转HTML看作一行一行的转换，每一行根据语法，使用不同的转换器：</p>

<ul>
  <li>如果以<code class="language-plaintext highlighter-rouge">#</code>开头，使用<code class="language-plaintext highlighter-rouge">HeadingBuilder</code>转换；</li>
  <li>如果以<code class="language-plaintext highlighter-rouge">&gt;</code>开头，使用<code class="language-plaintext highlighter-rouge">QuoteBuilder</code>转换；</li>
  <li>如果以<code class="language-plaintext highlighter-rouge">---</code>开头，使用<code class="language-plaintext highlighter-rouge">HrBuilder</code>转换；</li>
  <li>其余使用<code class="language-plaintext highlighter-rouge">ParagraphBuilder</code>转换。</li>
</ul>

<p>这个<code class="language-plaintext highlighter-rouge">HtmlBuilder</code>写出来如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">HtmlBuilder</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">HeadingBuilder</span> <span class="n">headingBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HeadingBuilder</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">HrBuilder</span> <span class="n">hrBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HrBuilder</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">ParagraphBuilder</span> <span class="n">paragraphBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ParagraphBuilder</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">QuoteBuilder</span> <span class="n">quoteBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QuoteBuilder</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toHtml</span><span class="o">(</span><span class="nc">String</span> <span class="n">markdown</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="nc">String</span> <span class="o">[]</span><span class="n">s</span><span class="o">=</span><span class="n">markdown</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\s"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">line</span> <span class="o">:</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"#"</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">headingBuilder</span><span class="o">.</span><span class="na">buildHeading</span><span class="o">(</span><span class="n">line</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"&gt;"</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">quoteBuilder</span><span class="o">.</span><span class="na">buildQuote</span><span class="o">(</span><span class="n">line</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"---"</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">hrBuilder</span><span class="o">.</span><span class="na">buildHr</span><span class="o">(</span><span class="n">line</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">paragraphBuilder</span><span class="o">.</span><span class="na">buildParagraph</span><span class="o">(</span><span class="n">line</span><span class="o">)).</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">HtmlBuilder</code>并不是一次性把整个Markdown转换为HTML，而是一行一行转换，并且，它自己并不会将某一行转换为特定的HTML，而是根据特性把每一行都“委托”给一个<code class="language-plaintext highlighter-rouge">XxxBuilder</code>去转换，最后，把所有转换的结果组合起来，返回给客户端。</p>

<p>这样一来，只需要针对每一种类型编写不同的Builder。例如，针对以<code class="language-plaintext highlighter-rouge">#</code>开头的行，需要<code class="language-plaintext highlighter-rouge">HeadingBuilder</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">HeadingBuilder</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">buildHeading</span><span class="o">(</span><span class="nc">String</span> <span class="n">line</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'#'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">n</span><span class="o">++;</span>
            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"&lt;h%d&gt;%s&lt;/h%d&gt;"</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">line</span><span class="o">.</span><span class="na">trim</span><span class="o">(),</span> <span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可见，使用Builder模式时，适用于创建的对象比较复杂，最好一步一步创建出“零件”，最后再装配起来。</p>

<p><code class="language-plaintext highlighter-rouge">JavaMail</code>的<code class="language-plaintext highlighter-rouge">MimeMessage</code>就可以看作是一个Builder模式，只不过Builder和最终产品合二为一，都是<code class="language-plaintext highlighter-rouge">MimeMessage</code>。</p>

<p>很多时候，可以简化Builder模式，以链式调用的方式来创建对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"123"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"456"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"789"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</code></pre></div></div>

<p>生成器模式旨在通过一步一步构建复杂对象来创建对象。在使用 <code class="language-plaintext highlighter-rouge">JavaBean</code> 的 <code class="language-plaintext highlighter-rouge">set</code> 方法构建 <code class="language-plaintext highlighter-rouge">JavaBean</code> 时，虽然没有明确的构建步骤，但通过设置各个属性来构建对象的过程与生成器模式中逐步构建对象的思想相似。因此，可以将使用 <code class="language-plaintext highlighter-rouge">JavaBean</code> 的 <code class="language-plaintext highlighter-rouge">set</code> 方法构建 <code class="language-plaintext highlighter-rouge">JavaBean</code> 视为一种类似生成器模式的实现方式。</p>

<p><code class="language-plaintext highlighter-rouge">lombok</code>有个<code class="language-plaintext highlighter-rouge">@Builder</code> 可以使对象实现 builder 功能:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="no">A</span> <span class="n">build</span> <span class="o">=</span> <span class="no">A</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">a</span><span class="o">(</span><span class="s">"1"</span><span class="o">).</span><span class="na">b</span><span class="o">(</span><span class="s">"2"</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">build</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
<span class="nd">@ToString</span>
<span class="nd">@Builder</span>
<span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>生成的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">a</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">b</span><span class="o">;</span>
    <span class="no">A</span><span class="o">(</span><span class="nc">String</span> <span class="n">a</span><span class="o">,</span> <span class="nc">String</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ABuilder</span> <span class="nf">builder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ABuilder</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"A(a="</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">+</span> <span class="s">", b="</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">+</span> <span class="s">")"</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ABuilder</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">a</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">b</span><span class="o">;</span>

        <span class="nc">ABuilder</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">ABuilder</span> <span class="nf">a</span><span class="o">(</span><span class="nc">String</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">ABuilder</span> <span class="nf">b</span><span class="o">(</span><span class="nc">String</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="no">A</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">A</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">"A.ABuilder(a="</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">+</span> <span class="s">", b="</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">+</span> <span class="s">")"</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>内部生成器的<code class="language-plaintext highlighter-rouge">toString</code>会自动生成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="no">A</span><span class="o">.</span><span class="na">ABuilder</span> <span class="n">b</span> <span class="o">=</span> <span class="no">A</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">a</span><span class="o">(</span><span class="s">"1"</span><span class="o">).</span><span class="na">b</span><span class="o">(</span><span class="s">"2"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span><span class="c1">//A.ABuilder(a=1, b=2)</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Builder</span>
<span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="原型">原型</h3>

<blockquote>
  <p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
</blockquote>

<p>原型模式，即Prototype，是指创建新对象的时候，根据现有的一个原型来创建。</p>

<p>我们举个例子：如果我们已经有了一个<code class="language-plaintext highlighter-rouge">String[]</code>数组，想再创建一个一模一样的<code class="language-plaintext highlighter-rouge">String[]</code>数组，怎么写？</p>

<p>实际上创建过程很简单，就是把现有数组的元素复制到新数组。如果我们把这个创建过程封装一下，就成了原型模式。用代码实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 原型:</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">original</span> <span class="o">=</span> <span class="o">{</span> <span class="s">"Apple"</span><span class="o">,</span> <span class="s">"Pear"</span><span class="o">,</span> <span class="s">"Banana"</span> <span class="o">};</span>
<span class="c1">// 新对象:</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">original</span><span class="o">,</span> <span class="n">original</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</code></pre></div></div>

<p>对于普通类，如何实现原型拷贝？Java的<code class="language-plaintext highlighter-rouge">Object</code>提供了一个<code class="language-plaintext highlighter-rouge">clone()</code>方法，它的意图就是复制一个新的对象出来，需要实现一个<code class="language-plaintext highlighter-rouge">Cloneable</code>接口来标识一个对象是“可复制”的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Student</span> <span class="kd">implements</span> <span class="nc">Cloneable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">score</span><span class="o">;</span>

    <span class="c1">// 复制新对象并返回:</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Student</span> <span class="n">std</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
        <span class="n">std</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
        <span class="n">std</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
        <span class="n">std</span><span class="o">.</span><span class="na">score</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">score</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用的时候，因为<code class="language-plaintext highlighter-rouge">clone()</code>的方法签名是定义在<code class="language-plaintext highlighter-rouge">Object</code>中，返回类型也是<code class="language-plaintext highlighter-rouge">Object</code>，所以要强制转型，比较麻烦。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Student</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
<span class="nc">Object</span> <span class="n">clone</span> <span class="o">=</span> <span class="n">student</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">);</span><span class="c1">//test.Student@6f4a47c7</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clone</span><span class="o">);</span><span class="c1">//test.Student@ae13544</span>
</code></pre></div></div>

<p>实际上，使用原型模式更好的方式是定义一个<code class="language-plaintext highlighter-rouge">copy()</code>方法，返回明确的类型：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">score</span><span class="o">;</span>

    <span class="c1">// 复制新对象并返回:</span>
    <span class="kd">public</span> <span class="nc">Student</span> <span class="nf">copy</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Student</span> <span class="n">std</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
        <span class="n">std</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
        <span class="n">std</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
        <span class="n">std</span><span class="o">.</span><span class="na">score</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">score</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>原型模式应用不是很广泛，因为很多实例会持有类似文件、Socket这样的资源，而这些资源是无法复制给另一个对象共享的，只有存储简单类型的“值”对象可以复制。</p>

<h3 id="单例">单例</h3>

<blockquote>
  <p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
</blockquote>

<p>单例模式（Singleton）的目的是为了保证在一个进程中，某个类有且仅有一个实例。</p>

<p>因为这个类只有一个实例，因此，自然不能让调用方使用<code class="language-plaintext highlighter-rouge">new ClassName()</code>来创建实例了。所以，单例的构造方法必须是<code class="language-plaintext highlighter-rouge">private</code>，这样就防止了调用方自己创建实例。然后可以对外提供一个静态方法，返回一个固定的实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
    <span class="c1">// 静态字段引用唯一实例:</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>

    <span class="c1">// 通过静态方法返回实例:</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// private构造方法保证外部无法实例化:</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span><span class="c1">//相同实例</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span><span class="c1">//相同实例</span>
</code></pre></div></div>

<p>或者直接把静态变量设置为<code class="language-plaintext highlighter-rouge">public</code>。</p>

<p>单例模式的实现方式很简单：</p>

<ol>
  <li>只有<code class="language-plaintext highlighter-rouge">private</code>构造方法，确保外部无法实例化；</li>
  <li>通过<code class="language-plaintext highlighter-rouge">private static</code>变量持有唯一实例，保证全局唯一性；</li>
  <li>通过<code class="language-plaintext highlighter-rouge">public static</code>方法返回此唯一实例，使外部调用方能获取到实例。</li>
</ol>

<p>Java标准库有一些类就是单例，例如<code class="language-plaintext highlighter-rouge">Runtime</code>这个类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Runtime</span> <span class="n">runtime</span> <span class="o">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">();</span>
</code></pre></div></div>

<h4 id="延迟加载">延迟加载</h4>

<p>即在调用方第一次调用<code class="language-plaintext highlighter-rouge">getInstance()</code>时才初始化全局唯一实例，类似这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">INSTANCE</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但这种写法在多线程中是错误的，必须对整个方法进行加锁，但加锁会严重影响并发性能，得不偿失。</p>

<hr />

<h5 id="双重检查">双重检查</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">INSTANCE</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">synchronized</span> <span class="o">(</span><span class="nc">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="no">INSTANCE</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述描述似乎已经解决了我们面临的所有问题，但实际上，从 JVM 的角度讲，这些代码仍然可能发生错误。</p>

<p>对于 JVM 而言，它执行的是一个个 Java 指令。在 Java 指令中创建对象和赋值操作是分开进行的，也就是说<code class="language-plaintext highlighter-rouge">INSTANCE= new Singleton();</code>语句是分两步执行的。但是 JVM 并不保证这两个操作的先后顺序，即指令重排，也就是说有可能 JVM 会为新的 <code class="language-plaintext highlighter-rouge">Singleton</code> 实例分配空间，然后直接赋值给 <code class="language-plaintext highlighter-rouge">instance</code> 成员，然后再去初始化这个 <code class="language-plaintext highlighter-rouge">Singleton</code> 实例。这样就使出错成为了可能。</p>

<p>不过在<strong>JDK 5</strong>以及更高版本扩展了<code class="language-plaintext highlighter-rouge">volatile</code>的语义，以便系统将不允许<code class="language-plaintext highlighter-rouge">volatile</code>的写相对于任何之前的读或写重新排序，并且<code class="language-plaintext highlighter-rouge">volatile</code>的读也不能相对于任何后续的读或写重新排序。</p>

<p>因此，<strong>为<code class="language-plaintext highlighter-rouge">INSTANCE</code>变量添加<code class="language-plaintext highlighter-rouge">volatile</code>就修复了这个问题</strong>。</p>

<p>另外，如果<code class="language-plaintext highlighter-rouge">INSTANCE</code>变量是一个不可变对象，则也不用加<code class="language-plaintext highlighter-rouge">volatile</code>，就如同<code class="language-plaintext highlighter-rouge">int</code>和<code class="language-plaintext highlighter-rouge">float</code>一样，他们的赋值操作是原子的。（<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">参见</a>）</p>

<hr />

<h5 id="通过内部类实现">通过内部类实现</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingletonContainer</span><span class="o">{</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 静态内部类只有在被使用时才会装载，静态属性只会在第一次装载时初始化
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
        <span class="k">return</span> <span class="nc">SingletonContainer</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。</p>

<p>这样第一次调用<code class="language-plaintext highlighter-rouge">getInstance</code>的时候，JVM能够保证<code class="language-plaintext highlighter-rouge">INSTANCE</code>只被创建一次，并且会保证把赋值给<code class="language-plaintext highlighter-rouge">INSTANCE</code>的内存初始化完毕。此外该方法也只会在第一次调用的时候使用互斥机制。</p>

<p><code class="language-plaintext highlighter-rouge">INSTANCE</code> 是在第一次加载 <code class="language-plaintext highlighter-rouge">SingletonContainer</code> 类时被创建的，而 <code class="language-plaintext highlighter-rouge">SingletonContainer</code> 类则在调用 <code class="language-plaintext highlighter-rouge">getInstance</code> 方法的时候才会被加载，因此也实现了延迟加载。</p>

<hr />

<p>要防止通过<strong>反射强行调用私有构造方法</strong>，可以在构造方法添加代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="nc">SingletonContainer</span><span class="o">.</span><span class="na">INSTANCE</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>反射测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Constructor</span><span class="o">&lt;</span><span class="nc">Singleton</span><span class="o">&gt;</span> <span class="n">declaredConstructor</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">();</span>
<span class="n">declaredConstructor</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="nc">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="n">declaredConstructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span><span class="c1">//java.lang.RuntimeException: !</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">singleton</span><span class="o">);</span>
</code></pre></div></div>

<p>正常调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span><span class="c1">//test.Singleton@ae13544</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span><span class="c1">//test.Singleton@ae13544</span>
</code></pre></div></div>

<hr />

<h4 id="序列化破坏单例">序列化破坏单例</h4>

<p>单例对象创建好之后，有时需要将对象序列化然后写入磁盘，在需要时从磁盘中读取对象并加载至内存，反序列化后的对象会重新分配内存，如果序列化的目标对象恰好是单例对象，就会破坏单例模式。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span><span class="nc">ClassNotFoundException</span> <span class="o">{</span>
        <span class="nc">Singleton</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

        <span class="k">try</span><span class="o">(</span><span class="nc">FileOutputStream</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectOutputStream</span> <span class="n">oos</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">)){</span>
                <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">Singleton</span> <span class="n">s2</span><span class="o">;</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">fis</span><span class="o">=</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectInputStream</span> <span class="n">ois</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">)){</span>
                <span class="n">s2</span><span class="o">=</span> <span class="o">(</span><span class="nc">Singleton</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span><span class="c1">//test.Singleton@7494f96a</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span><span class="c1">//test.Singleton@37883b97</span>
    <span class="o">}</span>

<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>添加一个<code class="language-plaintext highlighter-rouge">readResolve()</code>,就能保证反序列化是同一个实例了</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="nf">readResolve</span><span class="o">(){</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在 Java 的序列化中，当对象被序列化时，如果类中定义了 <code class="language-plaintext highlighter-rouge">readResolve</code> 方法，并且该方法返回一个对象，那么在反序列化时<strong>会调用该方法来获取对象</strong>，而<strong>不是通过从流中反序列化创建一个新的对象</strong>。</p>

<p>这意味着 <code class="language-plaintext highlighter-rouge">readResolve()</code> 方法可以用来控制反序列化过程中返回的对象，<strong>可以在方法中返回任何想要的对象，而不受反序列化的影响</strong>。如果一个类写了 <code class="language-plaintext highlighter-rouge">readResolve()</code> 方法，并且在方法中返回了特定的对象，那么反序列化过程<strong>就会返回这个方法中指定的对象</strong>，而<strong>不会</strong>从文件中重新构造对象。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">Singleton</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="n">s1</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="s">"序列化前"</span><span class="o">;</span>

        <span class="k">try</span><span class="o">(</span><span class="nc">FileOutputStream</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectOutputStream</span> <span class="n">oos</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">)){</span>
                <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span><span class="c1">//test.Singleton@561b6512</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">name</span><span class="o">);</span><span class="c1">//序列化前</span>

    <span class="o">}</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span><span class="nc">ClassNotFoundException</span> <span class="o">{</span>
        <span class="nc">Singleton</span> <span class="n">s2</span><span class="o">;</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">fis</span><span class="o">=</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectInputStream</span> <span class="n">ois</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">)){</span>
                <span class="n">s2</span><span class="o">=</span> <span class="o">(</span><span class="nc">Singleton</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span><span class="c1">//test.Singleton@c86b9e3</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">.</span><span class="na">name</span><span class="o">);</span><span class="c1">//null</span>
    <span class="o">}</span>

<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="nf">readResolve</span><span class="o">(){</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>先运行<code class="language-plaintext highlighter-rouge">test1()</code>,然后等JVM关闭后重新运行<code class="language-plaintext highlighter-rouge">test2()</code>,模拟序列化的实际运用场景，这个场景下内存地址肯定不一样，但后设置的<code class="language-plaintext highlighter-rouge">name</code>值也丢了。</p>

<p>实际上，<code class="language-plaintext highlighter-rouge">readResolve()</code> 方法的作用是控制对象的反序列化过程，可以用来确保反序列化后的对象符合特定的要求，或者实现单例模式等。</p>

<hr />

<p>那么我们保存的<code class="language-plaintext highlighter-rouge">s.obj</code>序列化文件就这么废了吗？也不一定，<strong>序列化仅涉及对象的状态（即实例变量）</strong>，不包括类的方法。序列化的主要目的是保存对象的状态，以便在稍后可以将其完全恢复为原始状态。把<code class="language-plaintext highlighter-rouge">readResolve()</code> 方法注释掉不就好了。</p>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">Singleton</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="n">s1</span><span class="o">.</span><span class="na">name</span><span class="o">=</span><span class="s">"序列化前"</span><span class="o">;</span>

        <span class="k">try</span><span class="o">(</span><span class="nc">FileOutputStream</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectOutputStream</span> <span class="n">oos</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">)){</span>
                <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span><span class="c1">//Singleton{name='序列化前'}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">name</span><span class="o">);</span><span class="c1">//序列化前</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="nf">readResolve</span><span class="o">(){</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Singleton{name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行<code class="language-plaintext highlighter-rouge">test1()</code>生成<code class="language-plaintext highlighter-rouge">s.obj</code>。删除<code class="language-plaintext highlighter-rouge">readResolve</code>，<code class="language-plaintext highlighter-rouge">运行test2()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span><span class="nc">ClassNotFoundException</span> <span class="o">{</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">fis</span><span class="o">=</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectInputStream</span> <span class="n">ois</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">)){</span>
                <span class="nc">Object</span> <span class="n">x</span> <span class="o">=</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span><span class="c1">//Singleton{name='序列化前'}</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="nc">Singleton</span><span class="o">)</span> <span class="n">x</span><span class="o">).</span><span class="na">name</span><span class="o">);</span><span class="c1">//序列化前</span>
            <span class="o">}</span>
        <span class="o">}</span>

    <span class="o">}</span>

<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Singleton{name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>正常恢复，没有问题，那么试试删除<code class="language-plaintext highlighter-rouge">public String toString()</code>，提示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java.io.InvalidClassException: test.Singleton; local class incompatible: stream classdesc serialVersionUID = 5155019565252345970, local class serialVersionUID = -6864115338217441473
</code></pre></div></div>

<p>改动太大了，改变了<code class="language-plaintext highlighter-rouge">serialVersionUID</code>，那么显示的在类里指定：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">5155019565252345970L</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Singleton</span> <span class="no">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再运行<code class="language-plaintext highlighter-rouge">test2()</code>,正常反序列化，只是这次<code class="language-plaintext highlighter-rouge">toString</code>没有了：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test.Singleton@79d8407f
序列化前
</code></pre></div></div>

<p>实际上，非重写的方法可以随便添加修改删除，而重写的方法不能动，动了就会导致<code class="language-plaintext highlighter-rouge">serialVersionUID</code>编号。（显示指定<code class="language-plaintext highlighter-rouge">serialVersionUID</code>编号就好了）</p>

<hr />

<h4 id="使用枚举">使用枚举</h4>

<p>Java保证枚举类的每个枚举都是单例，所以只需要编写一个只有一个枚举的类即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">World</span> <span class="o">{</span>
    <span class="c1">// 唯一枚举:</span>
	<span class="no">INSTANCE</span><span class="o">;</span>

	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"world"</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>枚举类也完全可以像其他类那样定义自己的字段、方法，这样上面这个<code class="language-plaintext highlighter-rouge">World</code>类在调用方看来就可以这么用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="nc">World</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</code></pre></div></div>

<p>使用枚举实现Singleton也避免了即序列化和反序列化会绕过普通类的<code class="language-plaintext highlighter-rouge">private</code>构造方法从而创建出多个实例，而枚举类就没有这个问题。</p>

<p>枚举在序列化和反序列化过程中<strong>会丢失枚举常量中的普通字段的值</strong>。这是因为枚举在序列化时只保留了枚举常量的名称，并没有保存其他字段的状态。在反序列化时，只会根据枚举常量的名称重新构建枚举常量，而普通字段的值需要在程序中重新设置。即：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">World</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"序列化前"</span><span class="o">);</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">FileOutputStream</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectOutputStream</span> <span class="n">oos</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">)){</span>
                <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="nc">World</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">World</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">);</span><span class="c1">//World{name='序列化前'}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">World</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span><span class="c1">//序列化前</span>
    <span class="o">}</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span><span class="nc">ClassNotFoundException</span> <span class="o">{</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">fis</span><span class="o">=</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectInputStream</span> <span class="n">ois</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">)){</span>
                <span class="nc">World</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="nc">World</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span><span class="c1">//World{name='null'}</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span><span class="c1">//null</span>
            <span class="o">}</span>
        <span class="o">}</span>

    <span class="o">}</span>

<span class="o">}</span>
<span class="kd">enum</span> <span class="nc">World</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="c1">// 唯一枚举:</span>
    <span class="no">INSTANCE</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"World{name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用有参构造器设置就好了，虽然并没有改变问题的根本，也是个曲线的好办法。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">FileOutputStream</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectOutputStream</span> <span class="n">oos</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">)){</span>
                <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="nc">World</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">World</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">);</span><span class="c1">//World{name='序列化前'}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">World</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span><span class="c1">//序列化前</span>

    <span class="o">}</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span><span class="nc">ClassNotFoundException</span> <span class="o">{</span>
        <span class="k">try</span><span class="o">(</span><span class="nc">FileInputStream</span> <span class="n">fis</span><span class="o">=</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"s.obj"</span><span class="o">)){</span>
            <span class="k">try</span><span class="o">(</span><span class="nc">ObjectInputStream</span> <span class="n">ois</span><span class="o">=</span><span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">)){</span>
                <span class="nc">World</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="nc">World</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span><span class="c1">//World{name='null'}</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span><span class="c1">//null</span>
            <span class="o">}</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">enum</span> <span class="nc">World</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="c1">// 唯一枚举:</span>
    <span class="no">INSTANCE</span><span class="o">(</span><span class="s">"序列化前"</span><span class="o">);</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nc">World</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"World{name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>而枚举天然就不能使用反射调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Constructor</span><span class="o">&lt;</span><span class="nc">World</span><span class="o">&gt;</span> <span class="n">declaredConstructor</span> <span class="o">=</span> <span class="nc">World</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">declaredConstructor</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="nc">World</span> <span class="n">world</span> <span class="o">=</span> <span class="n">declaredConstructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="s">"test"</span><span class="o">);</span><span class="c1">//java.lang.NoSuchMethodException: test.World.&lt;init&gt;(java.lang.String)</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">world</span><span class="o">);</span>
</code></pre></div></div>

<p>找不到指定类型的构造方法，看看<code class="language-plaintext highlighter-rouge">java.lang.Enum</code>的源码，只有：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="nf">Enum</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">ordinal</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">ordinal</span> <span class="o">=</span> <span class="n">ordinal</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>唯一构造函数。程序员无法调用此构造函数。它供编译器发出的代码使用，以响应枚举类型声明。形参:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">name</code> – - 此枚举常量的名称，它是用于声明它的标识符。</li>
  <li><code class="language-plaintext highlighter-rouge">ordinal</code> – - 此枚举常量的序数（它在枚举声明中的位置，其中初始常量的序数为零）</li>
</ul>

<p>那么改成这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Constructor</span><span class="o">&lt;</span><span class="nc">World</span><span class="o">&gt;</span> <span class="n">declaredConstructor</span> <span class="o">=</span> <span class="nc">World</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">declaredConstructor</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="nc">World</span> <span class="n">world</span> <span class="o">=</span> <span class="n">declaredConstructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="s">"枚举名"</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="s">"test"</span><span class="o">);</span><span class="c1">//java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">world</span><span class="o">);</span>
</code></pre></div></div>

<p>异常位置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CallerSensitive</span>
<span class="nd">@ForceInline</span> <span class="c1">// to ensure Reflection.getCallerClass optimization</span>
<span class="kd">public</span> <span class="no">T</span> <span class="nf">newInstance</span><span class="o">(</span><span class="nc">Object</span> <span class="o">...</span> <span class="n">initargs</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">InstantiationException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span><span class="o">,</span>
           <span class="nc">IllegalArgumentException</span><span class="o">,</span> <span class="nc">InvocationTargetException</span>
<span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">override</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">caller</span> <span class="o">=</span> <span class="nc">Reflection</span><span class="o">.</span><span class="na">getCallerClass</span><span class="o">();</span>
        <span class="n">checkAccess</span><span class="o">(</span><span class="n">caller</span><span class="o">,</span> <span class="n">clazz</span><span class="o">,</span> <span class="n">clazz</span><span class="o">,</span> <span class="n">modifiers</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">((</span><span class="n">clazz</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">()</span> <span class="o">&amp;</span> <span class="nc">Modifier</span><span class="o">.</span><span class="na">ENUM</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Cannot reflectively create enum objects"</span><span class="o">);</span>
    <span class="nc">ConstructorAccessor</span> <span class="n">ca</span> <span class="o">=</span> <span class="n">constructorAccessor</span><span class="o">;</span>   <span class="c1">// read volatile</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">ca</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ca</span> <span class="o">=</span> <span class="n">acquireConstructorAccessor</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="no">T</span> <span class="n">inst</span> <span class="o">=</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="n">ca</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">initargs</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">inst</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>什么时候应该用Singleton呢？实际上，很多程序，尤其是Web程序，大部分服务类都应该被视作Singleton，如果全部按Singleton的写法写，会非常麻烦，所以，通常是通过约定让框架（例如Spring）来实例化这些类，保证只有一个实例，调用方自觉通过框架获取实例而不是<code class="language-plaintext highlighter-rouge">new</code>操作符：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span> <span class="c1">// 表示一个单例组件</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因此，除非确有必要，否则Singleton模式一般以“约定”为主，不会刻意实现它。</p>

<h2 id="结构型模式">结构型模式</h2>

<p>结构型模式主要关注如何组合不同的对象以获得更好、更灵活的结构。尽管面向对象的继承机制提供了基本的子类扩展父类功能的能力，但结构型模式不仅限于简单的继承，而更多地通过组合和运行时的动态组合来实现更灵活的功能。</p>

<p>主要关注如何组合类或对象以获得更大的结构，并且提供了一种方式来定义类之间的关系，以确保系统的某一部分变化不会影响其他部分。</p>

<p>结构型模式包括以下几种常见的模式：</p>

<ol>
  <li><strong>适配器模式（Adapter Pattern）</strong>：将一个类的接口<strong>转换</strong>成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li>
  <li><strong>桥接模式（Bridge Pattern）</strong>：将抽象部分与它的实现部分<strong>分离</strong>，使它们可以独立地变化。</li>
  <li><strong>组合模式（Composite Pattern）</strong>：将对象组合成<strong>树形结构</strong>以表示“部分-整体”的层次结构，使得客户端对单个对象和组合对象的使用具有一致性。</li>
  <li><strong>装饰器模式（Decorator Pattern）</strong>：动态地给一个对象添加一些额外的职责，就<strong>增加功能</strong>来说，装饰模式比生成子类更为灵活。</li>
  <li><strong>外观模式（Facade Pattern）</strong>：为子系统中的一组接口提供一个统一的接口，外观模式定义了一个<strong>高层接口</strong>，这个接口使得这一子系统更加容易使用。</li>
  <li><strong>享元模式（Flyweight Pattern）</strong>：运用共享技术有效地支持大量细粒度的对象。</li>
  <li><strong>代理模式（Proxy Pattern）</strong>：为其他对象提供一种代理以控制对这个对象的访问。</li>
</ol>

<p>适配器就是转换兼容，桥接就是拆分可复用部分，组合就是树形结构，装饰器就是在不改变类的情况下增强类功能，外观就是封装，享元就是缓存不变类，代理模式就是控制限制类。</p>

<h3 id="适配器">适配器</h3>

<blockquote>
  <p>将一个类的接口<strong>转换</strong>成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
</blockquote>

<p>适配器模式是Adapter，也称Wrapper，是指如果一个接口需要B接口，但是待传入的对象却是A接口，则中间需要一个适配器转换。将下面的类传入线程是不行的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">A</span> <span class="kd">implements</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">123L</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="no">A</span><span class="o">();</span>
<span class="nc">Thread</span> <span class="n">thread</span><span class="o">=</span><span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="n">a</span><span class="o">);</span><span class="c1">//没有实现Runnable接口，所以不能向上转型为Runnable</span>
<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>

<p>办法一是改写<code class="language-plaintext highlighter-rouge">A</code>类，把实现的<code class="language-plaintext highlighter-rouge">Callable</code>改为<code class="language-plaintext highlighter-rouge">Runnable</code>，但这样做不好，因为<code class="language-plaintext highlighter-rouge">A</code>有可能在其他地方作为<code class="language-plaintext highlighter-rouge">Callable</code>被引用，改写<code class="language-plaintext highlighter-rouge">Task</code>的接口，会导致其他正常工作的代码无法编译。</p>

<p>另一个办法不用改写<code class="language-plaintext highlighter-rouge">A</code>类，而是用一个Adapter，把这个<code class="language-plaintext highlighter-rouge">Callable</code>接口“变成”<code class="language-plaintext highlighter-rouge">Runnable</code>接口，这样，就可以正常编译：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="no">A</span><span class="o">();</span>
<span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">CallableToRunnableAdapter</span><span class="o">(</span><span class="n">a</span><span class="o">));</span>
<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">CallableToRunnableAdapter</code>类就是Adapter，它接收一个<code class="language-plaintext highlighter-rouge">Callable</code>，输出一个<code class="language-plaintext highlighter-rouge">Runnable</code>。实现非常简单：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CallableToRunnableAdapter</span> <span class="kd">implements</span> <span class="nc">Runnable</span><span class="o">{</span>
    <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">CallableToRunnableAdapter</span><span class="o">(</span><span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">c</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写一个Adapter的步骤如下：</p>

<ol>
  <li>实现目标接口，这里是<code class="language-plaintext highlighter-rouge">Runnable</code>；</li>
  <li>内部持有一个待转换接口的引用，这里是通过字段持有<code class="language-plaintext highlighter-rouge">Callable</code>接口；</li>
  <li>在目标接口的实现方法内部，调用待转换接口的方法。</li>
</ol>

<p>这样一来，Thread就可以接收这个<code class="language-plaintext highlighter-rouge">RunnableAdapter</code>，因为它实现了<code class="language-plaintext highlighter-rouge">Runnable</code>接口。<code class="language-plaintext highlighter-rouge">Thread</code>作为调用方，它会调用<code class="language-plaintext highlighter-rouge">RunnableAdapter</code>的<code class="language-plaintext highlighter-rouge">run()</code>方法，在这个<code class="language-plaintext highlighter-rouge">run()</code>方法内部，又调用了<code class="language-plaintext highlighter-rouge">Callable</code>的<code class="language-plaintext highlighter-rouge">call()</code>方法，相当于<code class="language-plaintext highlighter-rouge">Thread</code>通过一层转换，间接调用了<code class="language-plaintext highlighter-rouge">Callable</code>的<code class="language-plaintext highlighter-rouge">call()</code>方法。</p>

<p>使用lambda也是可以的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">a</span><span class="o">=</span><span class="k">new</span> <span class="no">A</span><span class="o">();</span>
        <span class="nc">Thread</span> <span class="n">thread</span><span class="o">=</span><span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">a</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">A</span> <span class="kd">implements</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">123L</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>从某种程度上说，这确实可以被看作是一种简单的转换器思想，通过实现 <code class="language-plaintext highlighter-rouge">Runnable</code> 接口，将 <code class="language-plaintext highlighter-rouge">Callable</code> 接口的 <code class="language-plaintext highlighter-rouge">call</code> 方法转换成了 <code class="language-plaintext highlighter-rouge">Runnable</code> 接口的 <code class="language-plaintext highlighter-rouge">run</code> 方法，使得原本的 <code class="language-plaintext highlighter-rouge">Callable</code> 对象 <code class="language-plaintext highlighter-rouge">a</code> 可以在 <code class="language-plaintext highlighter-rouge">Thread</code> 中被使用。</p>

<p>虽然这种用法不是传统意义上的转换器模式，但从某种程度上可以看作是一种类似的思想，即通过接口或类的适配来实现不同对象之间的协同工作。</p>

<p>如果不局限与接口或类的适配，那么实例化类也沾点转换器思想，因为将数据整合“转换“为了类实例。</p>

<p>向上转型和向下转型在某种程度上也可以被视为适配器思想的一种体现。向上转型是指将子类对象转换为父类对象的过程，这样做可以使得子类对象可以被当做父类对象对待，从而实现多态性。这种转型可以被看作是一种接口的适配，将子类对象适配成了父类对象。</p>

<p>向下转型是指将父类对象转换为子类对象的过程。这种转型可能涉及到类型检查和转换，以确保父类对象确实可以被转换为子类对象。向下转型也可以被视为一种适配器思想，将父类对象适配成了子类对象，以便对其进行特定的操作或方法调用。</p>

<hr />

<p>适配器模式在Java标准库中有广泛应用。比如我们持有数据类型是<code class="language-plaintext highlighter-rouge">String[]</code>，但是需要<code class="language-plaintext highlighter-rouge">List</code>接口时，可以用一个Adapter：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">exist</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">"Good"</span><span class="o">,</span> <span class="s">"morning"</span><span class="o">,</span> <span class="s">"Bob"</span><span class="o">,</span> <span class="s">"and"</span><span class="o">,</span> <span class="s">"Alice"</span><span class="o">};</span>
<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">exist</span><span class="o">));</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">List&lt;T&gt; Arrays.asList(T[])</code>就相当于一个转换器，它可以把数组转换为<code class="language-plaintext highlighter-rouge">List</code>。</p>

<p>假设有一个<code class="language-plaintext highlighter-rouge">InputStream</code>，但希望调用<code class="language-plaintext highlighter-rouge">readText(Reader)</code>这个方法，但它的参数类型是<code class="language-plaintext highlighter-rouge">Reader</code>而不是<code class="language-plaintext highlighter-rouge">InputStream</code>，怎么办？当然是使用适配器，把<code class="language-plaintext highlighter-rouge">InputStream</code>“变成”<code class="language-plaintext highlighter-rouge">Reader</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">InputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">newInputStream</span><span class="o">(</span><span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"/path/to/file"</span><span class="o">));</span>
<span class="nc">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">);</span>
<span class="n">readText</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">InputStreamReader</code>就是Java标准库提供的<code class="language-plaintext highlighter-rouge">Adapter</code>，它负责把一个<code class="language-plaintext highlighter-rouge">InputStream</code>适配为<code class="language-plaintext highlighter-rouge">Reader</code>。类似的还有<code class="language-plaintext highlighter-rouge">OutputStreamWriter</code>。</p>

<p>除了前面提到的对象适配器和类适配器之外，适配器思想还可以体现在以下几个方面：</p>

<ol>
  <li><strong>接口适配器模式（Interface Adapter Pattern）</strong>：当一个接口中定义了许多方法，但只有部分方法需要被实现时，可以创建一个抽象类实现该接口，并为接口中的每个方法提供一个空实现。这样在需要使用该接口时，只需要继承这个抽象类，重写需要的方法即可，避免了在实现类中实现所有方法的繁琐性。</li>
  <li><strong>数据适配器</strong>：将一个数据格式转换为另一个数据格式的过程可以看作是一种适配器思想的应用。例如，将一个JSON格式的数据转换为XML格式的数据，或者将一个数据结构转换为另一个数据结构以适应不同的应用场景。</li>
  <li><strong>协议适配器</strong>：在网络通信中，不同的设备或系统可能使用不同的通信协议。协议适配器用于将一个通信协议转换为另一个通信协议，以实现不同设备或系统之间的通信。</li>
  <li><strong>电源适配器</strong>：在不同国家或地区，电源插头的形状和电压标准可能不同。电源适配器用于将一个电源插头转换为另一个电源插头，以适应不同地区的电源标准。</li>
</ol>

<h3 id="桥接">桥接</h3>

<blockquote>
  <p>将抽象部分与它的实现<strong>部分分离</strong>，使它们都可以独立地变化。</p>
</blockquote>

<p>假设某个汽车厂商生产三种品牌的汽车：Big、Tiny和Boss，每种品牌又可以选择燃油、纯电和混合动力。如果用传统的继承来表示各个最终车型，一共有3个抽象类加9个最终子类：</p>

<pre><code class="language-ascii">                   ┌───────┐
                   │  Car  │
                   └───────┘
                       ▲
    ┌──────────────────┼───────────────────┐
    │                  │                   │
┌───────┐          ┌───────┐          ┌───────┐
│BigCar │          │TinyCar│          │BossCar│
└───────┘          └───────┘          └───────┘
    ▲                  ▲                  ▲
    │                  │                  │
    │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐
    ├─│  BigFuelCar   │├─│  TinyFuelCar  │├─│  BossFuelCar  │
    │ └───────────────┘│ └───────────────┘│ └───────────────┘
    │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐
    ├─│BigElectricCar │├─│TinyElectricCar│├─│BossElectricCar│
    │ └───────────────┘│ └───────────────┘│ └───────────────┘
    │ ┌───────────────┐│ ┌───────────────┐│ ┌───────────────┐
    └─│ BigHybridCar  │└─│ TinyHybridCar │└─│ BossHybridCar │
      └───────────────┘  └───────────────┘  └───────────────┘
</code></pre>

<p>如果要新增一个品牌，或者加一个新的引擎（比如核动力），那么子类的数量增长更快。</p>

<p>所以，桥接模式就是为了避免直接继承带来的子类爆炸。</p>

<p>在桥接模式中，首先把<code class="language-plaintext highlighter-rouge">Car</code>按品牌进行子类化，但是，每个品牌选择什么发动机，不再使用子类扩充，而是通过一个抽象的“修正”类，以组合的形式引入。</p>

<p>首先定义抽象类<code class="language-plaintext highlighter-rouge">Car</code>，它引用一个<code class="language-plaintext highlighter-rouge">Engine</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
    <span class="c1">// 引用Engine:</span>
    <span class="kd">protected</span> <span class="nc">Engine</span> <span class="n">engine</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">engine</span> <span class="o">=</span> <span class="n">engine</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">drive</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">Engine</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">start</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>紧接着，在一个“修正”的抽象类<code class="language-plaintext highlighter-rouge">RefinedCar</code>中定义一些<strong>额外操作</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">RefinedCar</span> <span class="kd">extends</span> <span class="nc">Car</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">RefinedCar</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">drive</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">engine</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"驾驶 "</span> <span class="o">+</span> <span class="n">getBrand</span><span class="o">()</span> <span class="o">+</span> <span class="s">" 汽车..."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getBrand</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样一来，最终的不同品牌继承自<code class="language-plaintext highlighter-rouge">RefinedCar</code>，例如<code class="language-plaintext highlighter-rouge">BossCar</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BossCar</span> <span class="kd">extends</span> <span class="nc">RefinedCar</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">BossCar</span><span class="o">(</span><span class="nc">Engine</span> <span class="n">engine</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">engine</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getBrand</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Boss"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>而针对每一种引擎，继承自<code class="language-plaintext highlighter-rouge">Engine</code>，例如<code class="language-plaintext highlighter-rouge">HybridEngine</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">HybridEngine</span> <span class="kd">implements</span> <span class="nc">Engine</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"启动混合引擎"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>客户端通过自己选择一个品牌，再配合一种引擎，得到最终的<code class="language-plaintext highlighter-rouge">Car</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">RefinedCar</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BossCar</span><span class="o">(</span><span class="k">new</span> <span class="nc">HybridEngine</span><span class="o">());</span>
<span class="n">car</span><span class="o">.</span><span class="na">drive</span><span class="o">();</span>
</code></pre></div></div>

<p>使用桥接模式的好处在于，如果要增加一种引擎，只需要针对<code class="language-plaintext highlighter-rouge">Engine</code>派生一个新的子类，如果要增加一个品牌，只需要针对<code class="language-plaintext highlighter-rouge">RefinedCar</code>派生一个子类，任何<code class="language-plaintext highlighter-rouge">RefinedCar</code>的子类都可以和任何一种<code class="language-plaintext highlighter-rouge">Engine</code>自由组合，即一辆汽车的两个维度：品牌和引擎都可以独立地变化。</p>

<pre><code class="language-ascii">       ┌───────────┐
       │    Car    │
       └───────────┘
             ▲
             │
       ┌───────────┐       ┌─────────┐
       │RefinedCar │ ─ ─ ─&gt;│ Engine  │
       └───────────┘       └─────────┘
             ▲                  ▲
    ┌────────┼────────┐         │ ┌──────────────┐
    │        │        │         ├─│  FuelEngine  │
┌───────┐┌───────┐┌───────┐     │ └──────────────┘
│BigCar ││TinyCar││BossCar│     │ ┌──────────────┐
└───────┘└───────┘└───────┘     ├─│ElectricEngine│
                                │ └──────────────┘
                                │ ┌──────────────┐
                                └─│ HybridEngine │
                                  └──────────────┘
</code></pre>

<p>桥接模式实现比较复杂，实际应用也非常少，但它提供的设计思想值得借鉴，即不要过度使用继承，而是优先拆分某些部件，使用组合的方式来扩展功能。</p>

<h3 id="组合">组合</h3>

<blockquote>
  <p>将对象组合成<strong>树形结构</strong>以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p>
</blockquote>

<p>组合模式（Composite）经常用于树形结构，为了简化代码，使用Composite可以把一个叶子节点与一个父节点统一起来处理。</p>

<p>在组合模式中，有两种主要的对象：叶子节点和容器节点。叶子节点表示树中的最终节点，它没有子节点；容器节点表示包含子节点的节点，它可以包含叶子节点和其他容器节点。</p>

<p>通过使用组合模式，可以将单个对象和组合对象都视为相同类型的对象，从而可以统一处理它们。例如，无论是操作单个文件还是操作整个文件夹（包含多个文件和文件夹），客户端都可以使用相同的方式来进行操作，这样就简化了客户端的代码逻辑。</p>

<p>总的来说，组合模式可以构建具有层次结构的对象，并且可以统一处理这些对象，提高代码的灵活性和可维护性。</p>

<p>在XML或HTML中，从根节点开始，每个节点都可能包含任意个其他节点，这些层层嵌套的节点就构成了一颗树。要以树的结构表示XML，先抽象出节点<code class="language-plaintext highlighter-rouge">Node</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Node</span> <span class="o">{</span>
    <span class="c1">// 添加一个节点为子节点:</span>
    <span class="nc">Node</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">);</span>
    <span class="c1">// 获取子节点:</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">();</span>
    <span class="c1">// 输出为XML:</span>
    <span class="nc">String</span> <span class="nf">toXml</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对于一个<code class="language-plaintext highlighter-rouge">&lt;name&gt;</code>这样的节点，称之为<code class="language-plaintext highlighter-rouge">ElementNode</code>，它可以作为容器包含多个子节点：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ElementNode</span> <span class="kd">implements</span> <span class="nc">Node</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="nf">ElementNode</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Node</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toXml</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">start</span> <span class="o">=</span> <span class="s">"&lt;"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"&gt;\n"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">end</span> <span class="o">=</span> <span class="s">"&lt;/"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"&gt;"</span><span class="o">;</span>
        <span class="nc">StringJoiner</span> <span class="n">sj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringJoiner</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">node</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">sj</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">toXml</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="k">return</span> <span class="n">sj</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对于普通文本，把它看作<code class="language-plaintext highlighter-rouge">TextNode</code>，它没有子节点：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TextNode</span> <span class="kd">implements</span> <span class="nc">Node</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">TextNode</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">text</span> <span class="o">=</span> <span class="n">text</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">Node</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toXml</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">text</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>此外，还可以有注释节点：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CommentNode</span> <span class="kd">implements</span> <span class="nc">Node</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">CommentNode</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">text</span> <span class="o">=</span> <span class="n">text</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Node</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toXml</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"&lt;!-- "</span> <span class="o">+</span> <span class="n">text</span> <span class="o">+</span> <span class="s">" --&gt;"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过<code class="language-plaintext highlighter-rouge">ElementNode</code>、<code class="language-plaintext highlighter-rouge">TextNode</code>和<code class="language-plaintext highlighter-rouge">CommentNode</code>，就可以构造出一颗树：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Node</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ElementNode</span><span class="o">(</span><span class="s">"school"</span><span class="o">);</span>
<span class="n">root</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ElementNode</span><span class="o">(</span><span class="s">"classA"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">TextNode</span><span class="o">(</span><span class="s">"Tom"</span><span class="o">))</span>
        <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">TextNode</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">)));</span>
<span class="n">root</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ElementNode</span><span class="o">(</span><span class="s">"classB"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">TextNode</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">))</span>
        <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">TextNode</span><span class="o">(</span><span class="s">"Grace"</span><span class="o">))</span>
        <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">CommentNode</span><span class="o">(</span><span class="s">"comment..."</span><span class="o">)));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">toXml</span><span class="o">());</span>
</code></pre></div></div>

<p>最后通过<code class="language-plaintext highlighter-rouge">root</code>节点输出的XML如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;school&gt;
&lt;classA&gt;
Tom
Alice
&lt;/classA&gt;
&lt;classB&gt;
Bob
Grace
&lt;!-- comment... --&gt;
&lt;/classB&gt;
&lt;/school&gt;
</code></pre></div></div>

<p>使用Composite模式时，需要先统一单个节点以及“容器”节点的接口：</p>

<pre><code class="language-ascii">             ┌───────────┐
             │   Node    │
             └───────────┘
                   ▲
      ┌────────────┼────────────┐
      │            │            │
┌───────────┐┌───────────┐┌───────────┐
│ElementNode││ TextNode  ││CommentNode│
└───────────┘└───────────┘└───────────┘
</code></pre>

<p>作为容器节点的<code class="language-plaintext highlighter-rouge">ElementNode</code>又可以添加任意个<code class="language-plaintext highlighter-rouge">Node</code>，这样就可以构成层级结构。</p>

<p>类似的，像文件夹和文件、GUI窗口的各种组件，都符合Composite模式的定义，因为它们的结构天生就是层级结构。</p>

<p>文件形式的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 创建文件</span>
        <span class="nc">FileSystemComponent</span> <span class="n">file1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"File1.txt"</span><span class="o">);</span>
        <span class="nc">FileSystemComponent</span> <span class="n">file2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"File2.txt"</span><span class="o">);</span>

        <span class="c1">// 创建文件夹并添加文件</span>
        <span class="nc">FileSystemComponent</span> <span class="n">folder1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Folder</span><span class="o">(</span><span class="s">"Folder1"</span><span class="o">);</span>
        <span class="n">folder1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">file1</span><span class="o">);</span>
        <span class="n">folder1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">file2</span><span class="o">);</span>

        <span class="c1">// 创建文件夹并添加文件</span>
        <span class="nc">FileSystemComponent</span> <span class="n">folder2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Folder</span><span class="o">(</span><span class="s">"Folder2"</span><span class="o">);</span>
        <span class="nc">FileSystemComponent</span> <span class="n">file3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"File3.txt"</span><span class="o">);</span>
        <span class="n">folder2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">file3</span><span class="o">);</span>

        <span class="c1">// 将文件夹添加到根文件夹</span>
        <span class="nc">FileSystemComponent</span> <span class="n">rootFolder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Folder</span><span class="o">(</span><span class="s">"Root"</span><span class="o">);</span>
        <span class="n">rootFolder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">folder1</span><span class="o">);</span>
        <span class="n">rootFolder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">folder2</span><span class="o">);</span>

        <span class="c1">// 打印整个文件系统</span>
        <span class="n">rootFolder</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">FileSystemComponent</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">FileSystemComponent</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">sep</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">FileSystemComponent</span> <span class="n">component</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">FileSystemComponent</span> <span class="n">component</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">File</span> <span class="kd">extends</span> <span class="nc">FileSystemComponent</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">sep</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sep</span><span class="o">+</span><span class="s">"File: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">FileSystemComponent</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">FileSystemComponent</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Folder</span> <span class="kd">extends</span> <span class="nc">FileSystemComponent</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FileSystemComponent</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">Folder</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">FileSystemComponent</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">component</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">FileSystemComponent</span> <span class="n">component</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">children</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">component</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">sep</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sep</span><span class="o">+</span><span class="s">"Folder: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">FileSystemComponent</span> <span class="n">component</span> <span class="o">:</span> <span class="n">children</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">component</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sep</span><span class="o">+</span><span class="s">"\t"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="装饰器">装饰器</h3>

<blockquote>
  <p>动态地给一个对象<strong>添加一些额外的职责</strong>。就增加功能来说，相比生成子类更为灵活。</p>
</blockquote>

<p>装饰器（Decorator）模式，是一种在运行期动态给某个对象的实例增加功能的方法。</p>

<p>在Java标准库中，<code class="language-plaintext highlighter-rouge">InputStream</code>是抽象类，<code class="language-plaintext highlighter-rouge">FileInputStream</code>、<code class="language-plaintext highlighter-rouge">ServletInputStream</code>、<code class="language-plaintext highlighter-rouge">Socket.getInputStream()</code>这些<code class="language-plaintext highlighter-rouge">InputStream</code>都是最终数据源。</p>

<p>现在，如果要给不同的最终数据源增加缓冲功能、计算签名功能、加密解密功能，那么，3个最终数据源、3种功能一共需要9个子类。如果继续增加最终数据源，或者增加新功能，子类会爆炸式增长，这种设计方式显然是不可取的。</p>

<p>Decorator模式的目的就是一个一个的附加功能，用Decorator的方式给一层一层地累加到原始数据源上，最终，通过组合获得想要的功能。</p>

<p>例如：给<code class="language-plaintext highlighter-rouge">FileInputStream</code>增加缓冲和解压缩功能，用Decorator模式写出来如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建原始的数据源:</span>
<span class="nc">InputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"test.gz"</span><span class="o">);</span>
<span class="c1">// 增加缓冲功能:</span>
<span class="nc">InputStream</span> <span class="n">bis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
<span class="c1">// 增加解压缩功能:</span>
<span class="nc">InputStream</span> <span class="n">gis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GZIPInputStream</span><span class="o">(</span><span class="n">bis</span><span class="o">);</span>
</code></pre></div></div>

<p>或者一次性写成这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">InputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GZIPInputStream</span><span class="o">(</span> <span class="c1">// 第二层装饰</span>
                        <span class="k">new</span> <span class="nf">BufferedInputStream</span><span class="o">(</span> <span class="c1">// 第一层装饰</span>
                            <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="s">"test.gz"</span><span class="o">)</span> <span class="c1">// 核心功能</span>
                        <span class="o">));</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BufferedInputStream</code>和<code class="language-plaintext highlighter-rouge">GZIPInputStream</code>实际上都是从<code class="language-plaintext highlighter-rouge">FilterInputStream</code>继承的，这个<code class="language-plaintext highlighter-rouge">FilterInputStream</code>就是一个抽象的Decorator。把Decorator模式画出来如下：</p>

<pre><code class="language-ascii">             ┌───────────┐
             │ Component │
             └───────────┘
                   ▲
      ┌────────────┼─────────────────┐
      │            │                 │
┌───────────┐┌───────────┐     ┌───────────┐
│ComponentA ││ComponentB │...  │ Decorator │
└───────────┘└───────────┘     └───────────┘
                                     ▲
                              ┌──────┴──────┐
                              │             │
                        ┌───────────┐ ┌───────────┐
                        │DecoratorA │ │DecoratorB │...
                        └───────────┘ └───────────┘
</code></pre>

<p>最顶层的<code class="language-plaintext highlighter-rouge">Component</code>是接口，对应到IO的就是<code class="language-plaintext highlighter-rouge">InputStream</code>这个抽象类。<code class="language-plaintext highlighter-rouge">ComponentA</code>、<code class="language-plaintext highlighter-rouge">ComponentB</code>是实际的子类，对应到IO的就是<code class="language-plaintext highlighter-rouge">FileInputStream</code>、<code class="language-plaintext highlighter-rouge">ServletInputStream</code>这些数据源。Decorator是用于实现各个附加功能的抽象装饰器，对应到IO的就是<code class="language-plaintext highlighter-rouge">FilterInputStream</code>。而从Decorator派生的就是一个一个的装饰器，它们每个都有独立的功能，对应到IO的就是<code class="language-plaintext highlighter-rouge">BufferedInputStream</code>、<code class="language-plaintext highlighter-rouge">GZIPInputStream</code>等。</p>

<p>Decorator模式实际上把核心功能和附加功能给分开了。核心功能指<code class="language-plaintext highlighter-rouge">FileInputStream</code>这些真正读数据的源头，附加功能指加缓冲、压缩、解密这些功能。</p>

<p>如果要新增核心功能，就增加Component的子类，例如<code class="language-plaintext highlighter-rouge">ByteInputStream</code>。如果要增加附加功能，就增加Decorator的子类，例如<code class="language-plaintext highlighter-rouge">CipherInputStream</code>。两部分都可以独立地扩展，而具体如何附加功能，由调用方自由组合，从而极大地增强了灵活性。</p>

<p>如果要设计完整的Decorator模式，应该如何设计？</p>

<p>假设需要渲染一个HTML的文本，但是文本还可以附加一些效果，比如加粗、变斜体、加下划线等。为了实现动态附加效果，可以采用Decorator模式。</p>

<p>首先，仍然需要定义顶层接口<code class="language-plaintext highlighter-rouge">TextNode</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TextNode</span> <span class="o">{</span>
    <span class="c1">// 设置text:</span>
    <span class="kt">void</span> <span class="nf">setText</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">);</span>
    <span class="c1">// 获取text:</span>
    <span class="nc">String</span> <span class="nf">getText</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对于核心节点，例如<code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>，它需要从<code class="language-plaintext highlighter-rouge">TextNode</code>直接继承：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpanNode</span> <span class="kd">implements</span> <span class="nc">TextNode</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setText</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">text</span> <span class="o">=</span> <span class="n">text</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getText</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"&lt;span&gt;"</span> <span class="o">+</span> <span class="n">text</span> <span class="o">+</span> <span class="s">"&lt;/span&gt;"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>为了实现Decorator模式，需要有一个抽象的Decorator类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">NodeDecorator</span> <span class="kd">implements</span> <span class="nc">TextNode</span> <span class="o">{</span>
    <span class="c1">//注意这里也实现了TextNode接口</span>
    <span class="kd">protected</span> <span class="kd">final</span> <span class="nc">TextNode</span> <span class="n">target</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="nf">NodeDecorator</span><span class="o">(</span><span class="nc">TextNode</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setText</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">target</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">NodeDecorator</code>类的核心是持有一个<code class="language-plaintext highlighter-rouge">TextNode</code>，即将要把功能附加到的<code class="language-plaintext highlighter-rouge">TextNode</code>实例。接下来就可以写一个加粗功能：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoldDecorator</span> <span class="kd">extends</span> <span class="nc">NodeDecorator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">BoldDecorator</span><span class="o">(</span><span class="nc">TextNode</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getText</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//重写加了内容</span>
        <span class="k">return</span> <span class="s">"&lt;b&gt;"</span> <span class="o">+</span> <span class="n">target</span><span class="o">.</span><span class="na">getText</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/b&gt;"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">TextNode</span> <span class="n">n1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SpanNode</span><span class="o">();</span><span class="c1">//外层&lt;span&gt;</span>
<span class="n">n1</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">);</span><span class="c1">//正常修改text</span>
<span class="nc">TextNode</span> <span class="n">n2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BoldDecorator</span><span class="o">(</span><span class="n">n1</span><span class="o">);</span><span class="c1">//getText时加一个&lt;b&gt;包围原内容</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n2</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span><span class="c1">//调用栈：n2.getText()-&gt;n1.getText()</span>

<span class="nc">TextNode</span> <span class="n">n3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BoldDecorator</span><span class="o">(</span><span class="n">n2</span><span class="o">);</span><span class="c1">//getText时加一个&lt;b&gt;包围原内容</span>
<span class="c1">//调用栈：n3.getText()-&gt;n2.getText()-&gt;n1.getText()</span>
<span class="c1">// n1返回text内容，然后n2加&lt;b&gt;返回，然后n1加&lt;b&gt;返回</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n3</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span><span class="c1">//&lt;b&gt;&lt;b&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/b&gt;&lt;/b&gt;</span>
<span class="c1">//调用栈：n3.setText()-&gt;n2.setText()-&gt;n1.setText()-&gt;this.text = text;</span>
<span class="n">n3</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"HI"</span><span class="o">);</span><span class="c1">//只修改了text</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n3</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span><span class="c1">//&lt;b&gt;&lt;b&gt;&lt;span&gt;HI&lt;/span&gt;&lt;/b&gt;&lt;/b&gt;</span>
</code></pre></div></div>

<p>类似的，可以继续加<code class="language-plaintext highlighter-rouge">ItalicDecorator</code>、<code class="language-plaintext highlighter-rouge">UnderlineDecorator</code>等。</p>

<hr />

<p><strong>装饰器与桥接模式</strong></p>

<p>装饰器和桥接的目的都是降低继承中衍生的子类的数量。</p>

<p>桥接是通过把一个组件及其子类作为另一总体的字段引用实现功能组合，也可以用多个组件来拼合总体。桥接的子类是负责总体的局部功能，是构成性的，是必要的。</p>

<p>装饰器则在大类下创建一个装饰器的子族，不管是主要部件还是装饰器都隶属于这个大类，所以装饰器可以不断嵌套。装饰器则是对已经具有了完整功能的总体进行修饰，是附加性的，是可选的。</p>

<h3 id="外观">外观</h3>

<blockquote>
  <p>为子系统中的一组接口提供一个一致的界面。Facade模式定义了一个<strong>高层接口</strong>，这个接口使得这一子系统更加容易使用。</p>
</blockquote>

<p>外观模式，即Facade，是一个比较简单的模式。它的基本思想如下：</p>

<p>如果客户端要跟许多子系统打交道，那么客户端需要了解各个子系统的接口，比较麻烦。如果有一个统一的“中介”，让客户端只跟中介打交道，中介再去跟各个子系统打交道，对客户端来说就比较简单。所以Facade就相当于搞了一个中介。</p>

<p>以注册公司为例，假设注册公司需要三步：</p>

<ol>
  <li>向工商局申请公司营业执照；</li>
  <li>在银行开设账户；</li>
  <li>在税务局开设纳税号。</li>
</ol>

<p>以下是三个系统的接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 工商注册:</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AdminOfIndustry</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Company</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 银行开户:</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bank</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">openAccount</span><span class="o">(</span><span class="nc">String</span> <span class="n">companyId</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 纳税登记:</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Taxation</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">applyTaxCode</span><span class="o">(</span><span class="nc">String</span> <span class="n">companyId</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果子系统比较复杂，并且客户对流程也不熟悉，那就把这些流程全部委托给中介：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Facade</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Company</span> <span class="nf">openCompany</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Company</span> <span class="n">c</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">bankAccount</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">bank</span><span class="o">.</span><span class="na">openAccount</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">c</span><span class="o">.</span><span class="na">setBankAccount</span><span class="o">(</span><span class="n">bankAccount</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">taxCode</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">taxation</span><span class="o">.</span><span class="na">applyTaxCode</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">c</span><span class="o">.</span><span class="na">setTaxCode</span><span class="o">(</span><span class="n">taxCode</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，客户端只跟Facade打交道，一次完成公司注册的所有繁琐流程：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Company</span> <span class="n">c</span> <span class="o">=</span> <span class="n">facade</span><span class="o">.</span><span class="na">openCompany</span><span class="o">(</span><span class="s">"Facade Software Ltd."</span><span class="o">);</span>
</code></pre></div></div>

<p>很多Web程序，内部有多个子系统提供服务，经常使用一个统一的Facade入口，例如一个<code class="language-plaintext highlighter-rouge">RestApiController</code>，使得外部用户调用的时候，只关心Facade提供的接口，不用管内部到底是哪个子系统处理的。</p>

<p>更复杂的Web程序，会有多个Web服务，这个时候，经常会使用一个统一的网关入口来自动转发到不同的Web服务，这种提供统一入口的网关就是Gateway，它本质上也是一个Facade，但可以附加一些用户认证、限流限速的额外服务。</p>

<p>也就是说，我如果需要实现一个功能，比如打印水仙花数，我可以直接在main里写，也可以封装打印水仙花数为一个函数，然后通过主函数调用这个函数。这就是一种简单的外观模式的应用。外观模式的核心思想就是封装复杂的逻辑，提供一个简单的接口给客户端使用，从而简化客户端的操作。</p>

<h3 id="享元">享元</h3>

<blockquote>
  <p>运用共享技术有效地支持大量细粒度的对象。</p>
</blockquote>

<p>享元（Flyweight）的核心思想很简单：如果一个对象实例一经创建就不可变，那么反复创建相同的实例就<strong>没有必要</strong>，直接向调用方返回一个<strong>共享的实例</strong>就行，这样即节省内存，又可以减少创建对象的过程，提高运行速度。</p>

<p>享元模式在Java标准库中有很多应用。包装类型如<code class="language-plaintext highlighter-rouge">Byte</code>、<code class="language-plaintext highlighter-rouge">Integer</code>都是不变类，因此，反复创建同一个值相同的包装类型是没有必要的。以<code class="language-plaintext highlighter-rouge">Integer</code>为例，如果我们通过<code class="language-plaintext highlighter-rouge">Integer.valueOf()</code>这个静态工厂方法创建<code class="language-plaintext highlighter-rouge">Integer</code>实例，当传入的<code class="language-plaintext highlighter-rouge">int</code>范围在<code class="language-plaintext highlighter-rouge">-128</code>~<code class="language-plaintext highlighter-rouge">+127</code>之间时，会直接返回缓存的<code class="language-plaintext highlighter-rouge">Integer</code>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">n1</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="nc">Integer</span> <span class="n">n2</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n1</span> <span class="o">==</span> <span class="n">n2</span><span class="o">);</span> <span class="c1">// true</span>
</code></pre></div></div>

<p>对于<code class="language-plaintext highlighter-rouge">Byte</code>来说，因为它一共只有256个状态，所以，通过<code class="language-plaintext highlighter-rouge">Byte.valueOf()</code>创建的<code class="language-plaintext highlighter-rouge">Byte</code>实例，全部都是缓存对象。</p>

<p>因此，享元模式就是通过工厂方法创建对象，在工厂方法内部，很可能返回缓存的实例，而不是新创建实例，从而实现不可变实例的<strong>复用</strong>。</p>

<p>总是使用工厂方法而不是new操作符创建实例，可获得享元模式的好处。</p>

<p>在实际应用中，<strong>享元模式主要应用于缓存</strong>，即客户端如果重复请求某些对象，不必每次查询数据库或者读取文件，而是直接返回内存中缓存的数据。</p>

<p>以<code class="language-plaintext highlighter-rouge">Student</code>为例，设计一个静态工厂方法，它在内部可以返回缓存的对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
    <span class="c1">// 持有缓存:</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Student</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="c1">// 静态工厂方法:</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Student</span> <span class="nf">create</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">id</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span>
        <span class="c1">// 先查找缓存:</span>
        <span class="nc">Student</span> <span class="n">std</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">std</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 未找到,创建新对象:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"create new Student(%s, %s)"</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">));</span>
            <span class="n">std</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
            <span class="c1">// 放入缓存:</span>
            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">std</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 缓存中存在:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"return cached Student(%s, %s)"</span><span class="o">,</span> <span class="n">std</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="n">std</span><span class="o">.</span><span class="na">name</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在实际应用中，经常使用成熟的缓存库，例如<a href="https://github.com/google/guava">Guava</a>的<a href="https://github.com/google/guava/blob/master/guava/src/com/google/common/cache/Cache.java">Cache</a>，因为它提供了最大缓存数量限制、定时过期等实用功能。</p>

<p>享元模式的设计思想是尽量复用已创建的对象，常用于工厂方法内部的优化。</p>

<p>单例模式是不允许创建新实例，只能使用一个实例。</p>

<p>而享元要求<strong>实例不变</strong>，才能把“创建一个新实例”的操作给优化成“直接返回一个缓存的实例”。</p>

<h3 id="代理">代理</h3>

<blockquote>
  <p>为其他对象提供一种代理以<strong>控制</strong>对这个对象的访问。</p>
</blockquote>

<p>代理模式，即Proxy，它和Adapter模式很类似。Adapter模式，它用于把A接口转换为B接口，即做兼容：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BAdapter</span> <span class="kd">implements</span> <span class="no">B</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">A</span> <span class="n">a</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">BAdapter</span><span class="o">(</span><span class="no">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">b</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">a</span><span class="o">.</span><span class="na">a</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>而Proxy模式不是把A接口转换成B接口，它还是转换成A接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AProxy</span> <span class="kd">implements</span> <span class="no">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">A</span> <span class="n">a</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">AProxy</span><span class="o">(</span><span class="no">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">a</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这是原始的，可以加功能，比如权限判断来限制访问，打印日志：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="no">A</span> <span class="n">aProxy</span><span class="o">=</span><span class="k">new</span> <span class="nc">AProxy</span><span class="o">(</span><span class="k">new</span> <span class="nc">AImpl</span><span class="o">());</span>
        <span class="n">aProxy</span><span class="o">.</span><span class="na">a</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">A</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">a</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">AImpl</span> <span class="kd">implements</span> <span class="no">A</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">a</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"原功能"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">AProxy</span> <span class="kd">implements</span> <span class="no">A</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">A</span> <span class="n">a</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">AProxy</span><span class="o">(</span><span class="no">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">a</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"调用前"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">a</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"调用后"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>为什么不把权限检查的功能直接写到目标实例的内部？因为编写代码的原则有：</p>

<ul>
  <li>职责清晰：一个类只负责一件事；</li>
  <li>易于测试：一次只测一个功能。</li>
</ul>

<p>用Proxy实现这个权限检查，可以获得更清晰、更简洁的代码：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">A</code>接口：只定义接口；</li>
  <li><code class="language-plaintext highlighter-rouge">AImpl</code>类：只实现A接口的业务逻辑；</li>
  <li><code class="language-plaintext highlighter-rouge">AProxy</code>类：只实现A接口的日志输出代理。</li>
</ul>

<p>如果希望编写其他类型的代理，可以继续增加，一个套一个。</p>

<p>实际上权限检查、打印日志只是代理模式的一种应用。Proxy还广泛应用在：</p>

<p><strong>远程代理</strong></p>

<p>远程代理即Remote Proxy，本地的调用者持有的接口实际上是一个代理，这个代理负责把对接口的方法访问转换成远程调用，然后返回结果。Java内置的RMI机制就是一个完整的远程代理模式。</p>

<p><strong>虚代理</strong></p>

<p>虚代理即Virtual Proxy，它让调用者先持有一个代理对象，但真正的对象尚未创建。如果没有必要，这个真正的对象是不会被创建的，直到客户端需要真的必须调用时，才创建真正的对象。JDBC的连接池返回的JDBC连接（Connection对象）就可以是一个虚代理，即获取连接时根本没有任何实际的数据库连接，直到第一次执行JDBC查询或更新操作时，才真正创建实际的JDBC连接。</p>

<p>例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="no">I</span> <span class="n">a</span><span class="o">=</span><span class="no">I</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"得到对象"</span><span class="o">);</span>
        <span class="n">a</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span><span class="o">{</span>
    <span class="kd">static</span> <span class="no">I</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">I</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">private</span> <span class="no">I</span> <span class="n">i</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
                    <span class="n">i</span><span class="o">=</span><span class="k">new</span> <span class="no">A</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="n">i</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">();</span>
<span class="o">}</span>


<span class="kd">class</span> <span class="nc">A</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">A</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实例化"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"打印"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再加上队列复用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Runnable</span> <span class="n">r</span><span class="o">=()-&gt;{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
                <span class="k">try</span><span class="o">(</span><span class="no">I</span> <span class="n">a</span><span class="o">=</span><span class="no">I</span><span class="o">.</span><span class="na">getInstance</span><span class="o">()){</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
                    <span class="n">a</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">r</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">I</span><span class="o">.</span><span class="na">idleQueue</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span> <span class="kd">extends</span> <span class="nc">AutoCloseable</span><span class="o">{</span>
    <span class="cm">/*空闲队列，线程安全的*/</span>
    <span class="nc">Queue</span><span class="o">&lt;</span><span class="no">I</span><span class="o">&gt;</span> <span class="n">idleQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="mi">100</span><span class="o">);</span>
    <span class="cm">/**
     * 虚代理
     * @return 虚代理
     */</span>
    <span class="kd">static</span> <span class="no">I</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="cm">/*复用空闲的A代理*/</span>
        <span class="no">I</span> <span class="n">i</span> <span class="o">=</span> <span class="n">idleQueue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">i</span><span class="o">=</span><span class="k">new</span> <span class="nc">Aproxy</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">();</span>
<span class="o">}</span>
 <span class="kd">class</span> <span class="nc">Aproxy</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">{</span>
    <span class="kd">private</span> <span class="no">I</span> <span class="n">i</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="cm">/*调用方法时才实例化*/</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">i</span><span class="o">=</span><span class="k">new</span> <span class="no">A</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">i</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
        <span class="cm">/*丢回空闲队列*/</span>
        <span class="n">idleQueue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"假装关闭了"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">A</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">A</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实例化"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"打印"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"已关闭"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>A最多只实例化了2次，因为只有2个线程。如果注释掉：<code class="language-plaintext highlighter-rouge">a.print();</code>，则A实例化0次，因为使用了虚代理。</p>

<p><strong>保护代理</strong></p>

<p>保护代理即Protection Proxy，它用代理对象控制对原始对象的访问，常用于鉴权。</p>

<p><strong>智能引用</strong></p>

<p>智能引用即Smart Reference，它也是一种代理对象，如果有很多客户端对它进行访问，通过内部的计数器可以在外部调用者都不使用后自动释放它。</p>

<p>代理模式和装饰器模式有一些相似之处，但它们的目的和使用方式略有不同：</p>

<ul>
  <li><strong>装饰器模式</strong>：装饰器模式旨在动态地给对象<strong>添加额外的职责</strong>，而不改变其接口。它通常通过创建一个包装对象来包裹真实的对象，并在保持真实对象接口不变的情况下，增加额外的功能或责任。</li>
  <li><strong>代理模式</strong>：代理模式为其他对象提供一种代理以<strong>控制对这个对象的访问</strong>。代理类通常在客户端和真实主题之间充当中介，可以用于控制对真实对象的访问权限、缓存对象的访问结果、延迟加载对象等。</li>
</ul>

<p>虽然两者都涉及到包装一个对象以增强其功能，但装饰器模式注重于增加新的行为，而代理模式注重于控制对对象的访问。</p>

<p>Decorator模式让调用者自己创建核心类，然后组合各种功能，而Proxy模式决不能让调用者自己创建再组合，否则就失去了代理的功能。Proxy模式让调用者认为获取到的是核心类接口，但实际上是代理类。</p>

<h2 id="行为型模式">行为型模式</h2>

<p>行为型模式主要涉及算法和对象间的职责分配。通过使用对象组合，行为型模式可以描述一组对象应该如何协作来完成一个整体任务。</p>

<p>行为型模式有：</p>

<p>责任链模式（Chain of Responsibility）：将请求的发送者和接收者<strong>解耦</strong>，让多个对象<strong>都有机会</strong>处理这个请求。</p>

<p>命令模式（Command）：将请求封装成一个对象，从而可以用不同的请求对客户进行参数化，并且对请求排队或记录请求日志，以及支持可撤销的操作。</p>

<p>解释器模式（Interpreter）：给定一个语言，定义它的文法的一种表示，并定义一个<strong>解释器</strong>，该解释器使用该表示来解释语言中的句子。</p>

<p>迭代器模式（Iterator）：提供一种方法<strong>顺序访问</strong>一个<strong>聚合对象中各个元素</strong>，而又不暴露该对象的内部表示。</p>

<p>中介模式（Mediator）：用一个<strong>中介对象</strong>来封装一系列的对象交互，使得对象<strong>不需要显式地相互引用</strong>，从而达到解耦的目的。</p>

<p>备忘录模式（Memento）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外<strong>保存</strong>这个状态，以便之后<strong>恢复</strong>对象到原先保存的状态。</p>

<p>观察者模式（Observer）：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，当主题对象状态发生变化时，会通知所有的观察者对象。观察者模式就是要分离被观察者和观察者之间的<strong>耦合关系</strong>。</p>

<p>状态模式（State）：允许对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。状态模式将<strong>对象的状态封装成独立的类</strong>，并将不同状态对应的行为<strong>抽象</strong>出来，使得<strong>在不同状态下可以定义不同的行为</strong>，而不需要使用大量的条件语句来判断当前状态。这样可以让代码更加清晰、可维护，同时也符合开闭原则，因为添加新的状态类不会影响现有代码。</p>

<p>策略模式（Strategy）：定义了一系列的算法，并将每一个算法封装起来，使得它们可以相互替换，<strong>让算法独立于使用它的客户而独立变化</strong>。</p>

<p>模板方法模式（Template Method）：定义一个操作中的算法的骨架，将一些步骤延迟到子类中，使得子类可以不改变一个算法的<strong>结构</strong>即可<strong>重定义</strong>该算法的某些<strong>特定步骤</strong>。</p>

<p>访问者模式（Visitor）：表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的<strong>新操作</strong>。访问者模式的核心思想是访问比较复杂的数据结构时，不去改变数据结构，而是把对数据的操作<strong>抽象</strong>出来，在“访问”的过程中<strong>以回调形式</strong>在访问者中<strong>处理操作逻辑</strong>。如果要新增一组操作，那么只需要增加一个新的访问者。</p>

<h3 id="责任链">责任链</h3>

<blockquote>
  <p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
</blockquote>

<p>责任链模式（Chain of Responsibility）是一种处理请求的模式，它让多个处理器都有机会处理该请求，直到<strong>其中某个处理成功为止</strong>。责任链模式把多个处理器串成链，然后让请求在链上传递。</p>

<p>用责任链模式时，每个处理方法只关心自己责任的范围内的数据。对于超出自己责任范围的，扔给下一个处理方法。</p>

<p>定义一个要处理的<code class="language-plaintext highlighter-rouge">Request</code>数据：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Data</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">=</span><span class="s">""</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Data</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sum</span> <span class="o">=</span> <span class="n">sum</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSum</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSum</span><span class="o">(</span><span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sum</span> <span class="o">=</span> <span class="n">sum</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>抽象出处理方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">I</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// 返回Boolean.TRUE = 成功</span>
    <span class="c1">// 返回Boolean.FALSE = 拒绝</span>
    <span class="c1">// 返回null = 交下一个处理</span>
    <span class="nc">Boolean</span> <span class="nf">process</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">AHandler</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&gt;{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Boolean</span> <span class="nf">process</span><span class="o">(</span><span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getSum</span><span class="o">()&gt;=</span><span class="mi">90</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"优"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="cm">/*继续责任链*/</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">BHandler</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&gt;{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Boolean</span> <span class="nf">process</span><span class="o">(</span><span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getSum</span><span class="o">()&gt;=</span><span class="mi">80</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"良"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="cm">/*继续责任链*/</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">CHandler</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&gt;{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Boolean</span> <span class="nf">process</span><span class="o">(</span><span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getSum</span><span class="o">()&gt;=</span><span class="mi">60</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"及格"</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="cm">/*继续责任链*/</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">DHandler</span> <span class="kd">implements</span> <span class="no">I</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&gt;{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Boolean</span> <span class="nf">process</span><span class="o">(</span><span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getSum</span><span class="o">()&gt;=</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"不及格"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="cm">/*停止责任链*/</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>组合处理方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">HandlerChain</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="no">I</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">handlers</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addHandler</span><span class="o">(</span><span class="no">I</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">handlers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">start</span><span class="o">(</span><span class="no">T</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 依次调用每个Handler:</span>
        <span class="k">for</span> <span class="o">(</span><span class="no">I</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">handler</span> <span class="o">:</span> <span class="n">handlers</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Boolean</span> <span class="n">r</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 如果返回TRUE或FALSE，处理结束:</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">data</span><span class="o">+</span> <span class="o">(</span><span class="n">r</span> <span class="o">?</span> <span class="s">"已打分"</span> <span class="o">:</span> <span class="s">"已拒绝"</span><span class="o">)</span> <span class="o">+</span><span class="n">handler</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">());</span>
                <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"没有责任方法对此处理："</span> <span class="o">+</span> <span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*构造责任链*/</span>
<span class="nc">HandlerChain</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&gt;</span> <span class="n">handlerChain</span><span class="o">=</span><span class="k">new</span> <span class="nc">HandlerChain</span><span class="o">&lt;&gt;();</span>
<span class="n">handlerChain</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">AHandler</span><span class="o">());</span>
<span class="n">handlerChain</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">BHandler</span><span class="o">());</span>
<span class="n">handlerChain</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">CHandler</span><span class="o">());</span>
<span class="n">handlerChain</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">DHandler</span><span class="o">());</span>
<span class="cm">/*使用责任链*/</span>
<span class="n">handlerChain</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">"小并"</span><span class="o">,</span><span class="mi">100</span><span class="o">));</span>
<span class="n">handlerChain</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="s">"小西"</span><span class="o">,</span><span class="mi">60</span><span class="o">));</span>
<span class="n">handlerChain</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="s">"小强"</span><span class="o">,</span><span class="mi">50</span><span class="o">));</span>
<span class="n">handlerChain</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="s">"小希"</span><span class="o">,-</span><span class="mi">1</span><span class="o">));</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>优
test.Data@8c3b9d已打分AHandler
及格
test.Data@4c39bec8已打分CHandler
不及格
test.Data@f79e已拒绝DHandler
test.Data@7ee8290b已拒绝DHandler
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Handler</code>添加的顺序很重要，如果顺序不对，处理的结果可能就不是符合要求的。</p>

<p>责任链模式有很多变种。有些责任链的实现方式是通过某个<code class="language-plaintext highlighter-rouge">Handler</code>手动调用下一个<code class="language-plaintext highlighter-rouge">Handler</code>来传递<code class="language-plaintext highlighter-rouge">Request</code>。</p>

<p>还有一些责任链模式，每个<code class="language-plaintext highlighter-rouge">Handler</code>都有机会处理<code class="language-plaintext highlighter-rouge">Request</code>，通常这种责任链被称为拦截器（Interceptor）或者过滤器（Filter），它的目的不是找到某个<code class="language-plaintext highlighter-rouge">Handler</code>处理掉<code class="language-plaintext highlighter-rouge">Request</code>，而是每个<code class="language-plaintext highlighter-rouge">Handler</code>都做一些工作，比如：记录日志；检查权限；准备相关资源；</p>

<p>Servlet规范定义的<code class="language-plaintext highlighter-rouge">Filter</code>就是一种责任链模式，它不但允许每个<code class="language-plaintext highlighter-rouge">Filter</code>都有机会处理请求，还允许每个<code class="language-plaintext highlighter-rouge">Filter</code>决定是否将请求“放行”给下一个<code class="language-plaintext highlighter-rouge">Filter</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">AuditFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">ServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">ServletResponse</span> <span class="n">resp</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="c1">//做些工作，如果做完了就放行给下一个：</span>
        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这种模式不但允许一个<code class="language-plaintext highlighter-rouge">Filter</code>自行决定处理<code class="language-plaintext highlighter-rouge">ServletRequest</code>和<code class="language-plaintext highlighter-rouge">ServletResponse</code>，还可以“伪造”<code class="language-plaintext highlighter-rouge">ServletRequest</code>和<code class="language-plaintext highlighter-rouge">ServletResponse</code>以便让下一个<code class="language-plaintext highlighter-rouge">Filter</code>处理，能实现非常复杂的功能。</p>

<p>责任链模式是一种把多个处理器组合在一起，依次处理请求的模式，添加新的处理器或者重新排列处理器非常容易，经常用在拦截、预处理请求等。</p>

<h3 id="命令">命令</h3>

<blockquote>
  <p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p>
</blockquote>

<p>命令模式（Command）是指，把请求封装成一个命令，然后执行该命令。</p>

<p>一个抽象的编辑器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">TextEditor</span> <span class="n">editor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextEditor</span><span class="o">();</span>
        <span class="n">editor</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Command pattern in text editor.\n"</span><span class="o">);</span>
        <span class="n">editor</span><span class="o">.</span><span class="na">copy</span><span class="o">();</span>
        <span class="n">editor</span><span class="o">.</span><span class="na">paste</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">TextEditor</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">StringBuilder</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">copy</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paste</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//String text = getFromClipBoard();</span>
        <span class="c1">//add(text);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">buffer</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用一个<code class="language-plaintext highlighter-rouge">StringBuilder</code>模拟一个文本编辑器，它支持<code class="language-plaintext highlighter-rouge">copy()</code>、<code class="language-plaintext highlighter-rouge">paste()</code>、<code class="language-plaintext highlighter-rouge">add()</code>、<code class="language-plaintext highlighter-rouge">delete()</code>等方法。而调用方需要了解<code class="language-plaintext highlighter-rouge">TextEditor</code>的所有接口信息。</p>

<p>如果改用命令模式，就要把调用方发送命令和执行方执行命令分开。通过引入一个<code class="language-plaintext highlighter-rouge">Command</code>接口，调用方创建一个对应的<code class="language-plaintext highlighter-rouge">Command</code>，然后执行，并不关心内部是如何具体执行的。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">TextEditor</span> <span class="n">editor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextEditor</span><span class="o">();</span>
        <span class="n">editor</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Command pattern in text editor.\n"</span><span class="o">);</span>
        <span class="nc">Command</span> <span class="n">command</span><span class="o">=</span><span class="k">new</span> <span class="nc">CopyCommand</span><span class="o">(</span><span class="n">editor</span><span class="o">);</span>
        <span class="n">command</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
        <span class="nc">Command</span> <span class="n">command2</span><span class="o">=</span><span class="k">new</span> <span class="nc">PasteCommand</span><span class="o">(</span><span class="n">editor</span><span class="o">);</span>
        <span class="n">command2</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">Command</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">execute</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">CopyCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="o">{</span>
    <span class="c1">// 持有执行者对象:</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TextEditor</span> <span class="n">receiver</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CopyCommand</span><span class="o">(</span><span class="nc">TextEditor</span> <span class="n">receiver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">receiver</span> <span class="o">=</span> <span class="n">receiver</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">receiver</span><span class="o">.</span><span class="na">copy</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PasteCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TextEditor</span> <span class="n">receiver</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PasteCommand</span><span class="o">(</span><span class="nc">TextEditor</span> <span class="n">receiver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">receiver</span> <span class="o">=</span> <span class="n">receiver</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">receiver</span><span class="o">.</span><span class="na">paste</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">TextEditor</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">StringBuilder</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">copy</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paste</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//String text = getFromClipBoard();</span>
        <span class="c1">//add(text);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">buffer</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实际上，使用命令模式，增加了系统的复杂度。如果需求很简单，那么直接调用显然更直观而且更简单。</p>

<p>如果<code class="language-plaintext highlighter-rouge">TextEditor</code>复杂到一定程度，并且需要支持Undo、Redo的功能时，就需要使用命令模式，因为可以直接给每个命令增加<code class="language-plaintext highlighter-rouge">undo()</code>，然后把执行的一系列命令用<code class="language-plaintext highlighter-rouge">List</code>保存起来，就既能支持Undo，又能支持Redo。这个时候，又需要一个<code class="language-plaintext highlighter-rouge">Invoker</code>对象，负责执行命令并保存历史命令。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Invoker</span> <span class="n">invoker</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Invoker</span><span class="o">();</span>

        <span class="nc">TextEditor</span> <span class="n">editor</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextEditor</span><span class="o">();</span>
        <span class="nc">Command</span> <span class="n">add</span><span class="o">=</span><span class="k">new</span> <span class="nc">AddCommand</span><span class="o">(</span><span class="n">editor</span><span class="o">);</span>
        <span class="n">add</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"文本编辑器命令模式。"</span><span class="o">);</span>

        <span class="n">invoker</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">add</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>

        <span class="n">invoker</span><span class="o">.</span><span class="na">undo</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>

        <span class="n">invoker</span><span class="o">.</span><span class="na">redo</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>

        <span class="n">add</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"测试"</span><span class="o">);</span>
        <span class="n">invoker</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">add</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
        <span class="n">invoker</span><span class="o">.</span><span class="na">undo</span><span class="o">();</span>
        <span class="n">invoker</span><span class="o">.</span><span class="na">undo</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
        <span class="n">invoker</span><span class="o">.</span><span class="na">redo</span><span class="o">();</span>
        <span class="n">invoker</span><span class="o">.</span><span class="na">redo</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Invoker</span><span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Command</span><span class="o">&gt;</span> <span class="n">commands</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kt">int</span> <span class="n">index</span><span class="o">=-</span><span class="mi">1</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Command</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">command</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
        <span class="n">commands</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">command</span><span class="o">);</span>
        <span class="n">index</span><span class="o">++;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">undo</span><span class="o">(){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">index</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"无撤销的命令"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">undo</span><span class="o">();</span>
        <span class="n">index</span><span class="o">--;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">redo</span><span class="o">(){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="o">&gt;</span><span class="n">commands</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"无恢复的命令"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">index</span><span class="o">++;</span>
        <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">).</span><span class="na">redo</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">Command</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">setText</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">);</span>

    <span class="kt">void</span> <span class="nf">undo</span><span class="o">();</span>

    <span class="kt">void</span> <span class="nf">redo</span><span class="o">();</span>

    <span class="kt">void</span> <span class="nf">execute</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">AddCommand</span> <span class="kd">implements</span> <span class="nc">Command</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TextEditor</span> <span class="n">receiver</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">text</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">index</span><span class="o">=-</span><span class="mi">1</span><span class="o">;</span>


    <span class="kd">public</span> <span class="nf">AddCommand</span><span class="o">(</span><span class="nc">TextEditor</span> <span class="n">receiver</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">receiver</span> <span class="o">=</span> <span class="n">receiver</span><span class="o">;</span>
        <span class="cm">/*最初的值*/</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">receiver</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
        <span class="n">index</span><span class="o">++;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setText</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">text</span><span class="o">=</span><span class="n">text</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">undo</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"无撤销的命令"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">index</span><span class="o">--;</span>
        <span class="n">receiver</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">redo</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="o">&gt;=</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"无恢复的命令"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">index</span><span class="o">++;</span>
        <span class="n">receiver</span><span class="o">.</span><span class="na">setState</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">receiver</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
        <span class="cm">/*更新或者添加*/</span>
        <span class="n">index</span><span class="o">++;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;</span><span class="n">index</span><span class="o">){</span>
            <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">index</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">receiver</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">receiver</span><span class="o">.</span><span class="na">getState</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">TextEditor</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">StringBuilder</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">buffer</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setState</span><span class="o">(</span><span class="nc">String</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">buffer</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
        <span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">state</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>命令模式带来的设计复杂度的增加是随着需求而增加的，它减少的是系统各组件的耦合度。</p>

<h3 id="解释器">解释器</h3>

<blockquote>
  <p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>
</blockquote>

<p>解释器模式（Interpreter）是一种针对特定问题设计的一种解决方案。</p>

<p>匹配字符串的时候，由于匹配条件非常灵活，使得通过代码来实现非常不灵活。因此，需要一种通用的表示方法——正则表达式来进行匹配。正则表达式就是一个字符串，但要把正则表达式解析为语法树，然后再匹配指定的字符串，就需要一个解释器。实现一个完整的正则表达式的解释器非常复杂，但是使用解释器模式却很简单：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"+861012345678"</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">"^\\+\\d+$"</span><span class="o">));</span>
</code></pre></div></div>

<p>比如执行java程序，可以在控制台添加参数，而具体要执行什么逻辑实现比较复杂，而用户只需根据文档指定参数即可实现功能。</p>

<h3 id="迭代器">迭代器</h3>

<blockquote>
  <p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>
</blockquote>

<p>迭代器模式（Iterator）在Java的集合类中广泛使用。以<code class="language-plaintext highlighter-rouge">List</code>为例，要遍历<code class="language-plaintext highlighter-rouge">ArrayList</code>，即使知道它的内部存储了一个<code class="language-plaintext highlighter-rouge">Object[]</code>数组，也不应该直接使用数组索引去遍历，因为这样需要了解集合内部的存储结构。如果使用<code class="language-plaintext highlighter-rouge">Iterator</code>遍历，那么，<code class="language-plaintext highlighter-rouge">ArrayList</code>和<code class="language-plaintext highlighter-rouge">LinkedList</code>都可以以一种统一的接口来遍历：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">,</span> <span class="s">"Orange"</span><span class="o">,</span> <span class="s">"Pear"</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为Iterator模式十分有用，因此，Java允许直接把任何支持<code class="language-plaintext highlighter-rouge">Iterator</code>的集合对象用<code class="language-plaintext highlighter-rouge">foreach</code>循环写出来：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">,</span> <span class="s">"Orange"</span><span class="o">,</span> <span class="s">"Pear"</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后由Java编译器完成Iterator模式的所有循环代码。</p>

<p>如果我们自己编写了一个集合类，想要使用<code class="language-plaintext highlighter-rouge">for each</code>循环，只需满足以下条件：</p>

<ul>
  <li>集合类实现<code class="language-plaintext highlighter-rouge">Iterable</code>接口，该接口要求返回一个<code class="language-plaintext highlighter-rouge">Iterator</code>对象；</li>
  <li>用<code class="language-plaintext highlighter-rouge">Iterator</code>对象迭代集合内部数据。</li>
</ul>

<p>这里的关键在于，集合类通过调用<code class="language-plaintext highlighter-rouge">iterator()</code>方法，返回一个<code class="language-plaintext highlighter-rouge">Iterator</code>对象，这个对象必须自己知道如何遍历该集合。</p>

<p>一个简单的<code class="language-plaintext highlighter-rouge">Iterator</code>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ReverseList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">rlist</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReverseList</span><span class="o">&lt;&gt;();</span>
        <span class="n">rlist</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">);</span>
        <span class="n">rlist</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Orange"</span><span class="o">);</span>
        <span class="n">rlist</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Pear"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">rlist</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">ReverseList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Iterator</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
            <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="no">T</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nc">ReverseList</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">++);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>虽然实现类稍微比较复杂，但这是底层集合库，只需编写一次。而调用方则完全按<code class="language-plaintext highlighter-rouge">for each</code>循环编写代码，根本不需要知道集合内部的存储逻辑和遍历逻辑。</p>

<p>在编写<code class="language-plaintext highlighter-rouge">Iterator</code>的时候，通常可以用一个内部类来实现<code class="language-plaintext highlighter-rouge">Iterator</code>接口，这个内部类可以直接访问对应的外部类的所有字段和方法。例如，上述代码中，内部类可以用<code class="language-plaintext highlighter-rouge">ReverseList.this</code>获得当前外部类的<code class="language-plaintext highlighter-rouge">this</code>引用，然后，通过这个<code class="language-plaintext highlighter-rouge">this</code>引用就可以访问<code class="language-plaintext highlighter-rouge">ReverseList</code>的所有字段和方法。</p>

<p><code class="language-plaintext highlighter-rouge">Iterator</code>是一种抽象的数据访问模型。使用<code class="language-plaintext highlighter-rouge">Iterator</code>模式进行迭代的好处有：</p>

<ul>
  <li>对任何集合都采用同一种访问模型；</li>
  <li>调用者对集合内部结构一无所知；</li>
  <li>集合类返回的<code class="language-plaintext highlighter-rouge">Iterator</code>对象知道如何迭代。</li>
</ul>

<p>Java提供了标准的迭代器模型，即集合类实现<code class="language-plaintext highlighter-rouge">java.util.Iterable</code>接口，返回<code class="language-plaintext highlighter-rouge">java.util.Iterator</code>实例。</p>

<h3 id="中介">中介</h3>

<blockquote>
  <p>用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
</blockquote>

<p>中介模式（Mediator）又称调停者模式，它的目的是把多方会谈变成双方会谈，从而实现多方的松耦合。</p>

<p>假设有一个多选框，有三个选项，然后有三个按钮，一个是全选，一个是全不选，一个是反选。当多选框全都没有选的时候全不选按钮失效，当多选框全都选了的时候全选按钮失效。当用户点击反选的时候也可能影响全选和全不选按钮的生效情况，如果不加入一个中间对象，那么代码会比较复杂，耦合性也会增加。</p>

<p>如果引入一个中介，把多方会谈变成多个双方会谈，虽然多了一个对象，但对象之间的关系就变简单了。它把多边关系变成多个双边关系，从而简化系统组件的交互耦合度。</p>

<p>按钮组件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">SelectButton</span><span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">state</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
    <span class="kd">abstract</span> <span class="kt">boolean</span> <span class="nf">start</span><span class="o">(</span><span class="kt">boolean</span><span class="o">[]</span> <span class="n">multiCheckBox</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SelectAllButton</span> <span class="kd">extends</span> <span class="nc">SelectButton</span><span class="o">{</span>

    <span class="kt">boolean</span> <span class="nf">start</span><span class="o">(</span><span class="kt">boolean</span><span class="o">[]</span> <span class="n">multiCheckBox</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">)</span><span class="k">return</span> <span class="kc">false</span><span class="o">;</span><span class="c1">//检查按钮是否可点击</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">multiCheckBox</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">CancelAllButton</span> <span class="kd">extends</span> <span class="nc">SelectButton</span><span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">start</span><span class="o">(</span><span class="kt">boolean</span><span class="o">[]</span> <span class="n">multiCheckBox</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">)</span><span class="k">return</span> <span class="kc">false</span><span class="o">;</span><span class="c1">//检查按钮是否可点击</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">multiCheckBox</span><span class="o">,</span><span class="kc">false</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">CounterSelectButton</span> <span class="kd">extends</span> <span class="nc">SelectButton</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">start</span><span class="o">(</span><span class="kt">boolean</span><span class="o">[]</span> <span class="n">multiCheckBox</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">)</span><span class="k">return</span> <span class="kc">false</span><span class="o">;</span><span class="c1">//检查按钮是否可点击</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">multiCheckBox</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">multiCheckBox</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">!</span><span class="n">multiCheckBox</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>中间人：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">UI</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="o">[]</span><span class="n">multiCheckBox</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">SelectAllButton</span> <span class="n">selectAllButton</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CancelAllButton</span> <span class="n">cancelAllButton</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CounterSelectButton</span> <span class="n">counterSelectButton</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UI</span><span class="o">(</span><span class="kt">boolean</span><span class="o">[]</span> <span class="n">multiCheckBox</span><span class="o">,</span> <span class="nc">SelectAllButton</span> <span class="n">selectAllButton</span><span class="o">,</span> <span class="nc">CancelAllButton</span> <span class="n">cancelAllButton</span><span class="o">,</span> <span class="nc">CounterSelectButton</span> <span class="n">counterSelectButton</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">multiCheckBox</span> <span class="o">=</span> <span class="n">multiCheckBox</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">selectAllButton</span> <span class="o">=</span> <span class="n">selectAllButton</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cancelAllButton</span> <span class="o">=</span> <span class="n">cancelAllButton</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">counterSelectButton</span> <span class="o">=</span> <span class="n">counterSelectButton</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">changeEvent</span><span class="o">(){</span>
        <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">boolean</span> <span class="n">checkBox</span> <span class="o">:</span> <span class="n">multiCheckBox</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="n">checkBox</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">count</span><span class="o">==</span><span class="n">multiCheckBox</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>
            <span class="n">selectAllButton</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
            <span class="n">cancelAllButton</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">count</span><span class="o">==</span><span class="mi">0</span><span class="o">){</span>
            <span class="n">selectAllButton</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
            <span class="n">cancelAllButton</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">selectAllButton</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
            <span class="n">cancelAllButton</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">){</span>
        <span class="n">multiCheckBox</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span>
        <span class="n">changeEvent</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">cancel</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">){</span>
        <span class="n">multiCheckBox</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]=</span><span class="kc">false</span><span class="o">;</span>
        <span class="n">changeEvent</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kt">boolean</span> <span class="nf">selectAllButton</span><span class="o">(){</span>
        <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">selectAllButton</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">multiCheckBox</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span><span class="n">selectAllButton</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">flag</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">boolean</span> <span class="nf">cancelAllButton</span><span class="o">(){</span>
        <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">cancelAllButton</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">multiCheckBox</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span><span class="n">cancelAllButton</span><span class="o">.</span><span class="na">state</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">flag</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">boolean</span> <span class="nf">counterSelectButton</span><span class="o">(){</span>
        <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">counterSelectButton</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">multiCheckBox</span><span class="o">);</span>
        <span class="n">changeEvent</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">flag</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="o">[]</span><span class="n">multiCheckBox</span><span class="o">={</span><span class="kc">false</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="kc">false</span><span class="o">};</span><span class="cm">/*多选框组件*/</span>
<span class="nc">SelectAllButton</span> <span class="n">selectAllButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SelectAllButton</span><span class="o">();</span><span class="cm">/*全选按钮*/</span>
<span class="nc">CancelAllButton</span> <span class="n">cancelAllButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CancelAllButton</span><span class="o">();</span><span class="cm">/*全不选按钮*/</span>
<span class="nc">CounterSelectButton</span> <span class="n">counterSelectButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CounterSelectButton</span><span class="o">();</span><span class="cm">/*反选按钮*/</span>
<span class="no">UI</span> <span class="n">ui</span> <span class="o">=</span> <span class="k">new</span> <span class="no">UI</span><span class="o">(</span><span class="n">multiCheckBox</span><span class="o">,</span><span class="n">selectAllButton</span><span class="o">,</span> <span class="n">cancelAllButton</span><span class="o">,</span> <span class="n">counterSelectButton</span><span class="o">);</span><span class="cm">/*中间人*/</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ui</span><span class="o">.</span><span class="na">selectAllButton</span><span class="o">()?</span><span class="s">"全选执行成功"</span><span class="o">:</span><span class="s">"全选按钮失效"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ui</span><span class="o">.</span><span class="na">selectAllButton</span><span class="o">()?</span><span class="s">"全选执行成功"</span><span class="o">:</span><span class="s">"全选按钮失效"</span><span class="o">);</span>
<span class="n">ui</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ui</span><span class="o">.</span><span class="na">selectAllButton</span><span class="o">()?</span><span class="s">"全选执行成功"</span><span class="o">:</span><span class="s">"全选按钮失效"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ui</span><span class="o">.</span><span class="na">counterSelectButton</span><span class="o">()?</span><span class="s">"反选执行成功"</span><span class="o">:</span><span class="s">"反选按钮失效"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ui</span><span class="o">.</span><span class="na">cancelAllButton</span><span class="o">()?</span><span class="s">"全不选执行成功"</span><span class="o">:</span><span class="s">"全不选按钮失效"</span><span class="o">);</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>全选执行成功
全选按钮失效
全选执行成功
反选执行成功
全不选按钮失效
</code></pre></div></div>

<p>使用Mediator模式后，各个UI组件互不引用，这样就减少了组件之间的耦合关系，Mediator用于当一个组件发生状态变化时，根据当前所有组件的状态决定更新某些组件；如果新增一个UI组件，只需要修改Mediator更新状态的逻辑，现有的<strong>其他UI组件代码不变</strong>。</p>

<h3 id="备忘录">备忘录</h3>

<blockquote>
  <p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p>
</blockquote>

<p>备忘录模式（Memento），主要用于捕获一个对象的内部状态，以便在将来的某个时候恢复此状态。</p>

<p>几乎所有软件都用到了备忘录模式。最简单的备忘录模式就是保存到文件，打开文件。</p>

<p>对于文本编辑器来说，保存就是把<code class="language-plaintext highlighter-rouge">TextEditor</code>类的字符串存储到文件，打开就是恢复<code class="language-plaintext highlighter-rouge">TextEditor</code>类的状态。对于图像编辑器来说，原理是一样的，只是保存和恢复的数据格式比较复杂而已。Java的序列化也可以看作是备忘录模式。</p>

<p>在使用文本编辑器的时候，还经常使用Undo、Redo这些功能。这些其实也可以用备忘录模式实现，即不定期地把<code class="language-plaintext highlighter-rouge">TextEditor</code>类的字符串复制一份存起来，这样就可以Undo或Redo。之前在命令模式中实现撤销重做的<code class="language-plaintext highlighter-rouge">AddCommand</code>类中就用到了备忘录模式记录文本。</p>

<p>标准的备忘录模式有这么几种角色：</p>

<ul>
  <li>Memento：存储的内部状态；</li>
  <li>Originator：创建一个备忘录并设置其状态；</li>
  <li>Caretaker：负责保存备忘录。</li>
</ul>

<p>实际上在使用备忘录模式的时候，不必设计得这么复杂，只需要对类似<code class="language-plaintext highlighter-rouge">TextEditor</code>的类，增加<code class="language-plaintext highlighter-rouge">getState()</code>和<code class="language-plaintext highlighter-rouge">setState()</code>就可以了。对这个简单的文本编辑器，用一个<code class="language-plaintext highlighter-rouge">String</code>就可以表示其状态，对于复杂的对象模型，通常会使用JSON、XML或序列化等复杂格式。</p>

<h3 id="观察者">观察者</h3>

<blockquote>
  <p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>
</blockquote>

<p>观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub）。它是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。</p>

<p>假设一个电商网站，有多种<code class="language-plaintext highlighter-rouge">Product</code>（商品），同时，<code class="language-plaintext highlighter-rouge">Customer</code>（消费者）和<code class="language-plaintext highlighter-rouge">Admin</code>（管理员）对商品上架、价格改变都感兴趣，希望能第一时间获得通知。于是，<code class="language-plaintext highlighter-rouge">Store</code>（商场）可以这么写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Store</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Store</span><span class="o">();</span>
        <span class="n">store</span><span class="o">.</span><span class="na">addNewProduct</span><span class="o">(</span><span class="s">"商品1"</span><span class="o">,</span><span class="mi">56</span><span class="o">);</span>
        <span class="n">store</span><span class="o">.</span><span class="na">addNewProduct</span><span class="o">(</span><span class="s">"商品2"</span><span class="o">,</span><span class="mi">78</span><span class="o">);</span>
        <span class="n">store</span><span class="o">.</span><span class="na">setProductPrice</span><span class="o">(</span><span class="s">"商品2"</span><span class="o">,</span><span class="mi">1000</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Store</span> <span class="o">{</span>
    <span class="nc">Customer</span> <span class="n">customer</span><span class="o">=</span><span class="k">new</span> <span class="nc">Customer</span><span class="o">();</span>
    <span class="nc">Admin</span> <span class="n">admin</span><span class="o">=</span><span class="k">new</span> <span class="nc">Admin</span><span class="o">();</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addNewProduct</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Product</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">price</span><span class="o">);</span>
        <span class="n">products</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">p</span><span class="o">);</span>
        <span class="c1">// 通知用户:</span>
        <span class="n">customer</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="c1">// 通知管理员:</span>
        <span class="n">admin</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProductPrice</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Product</span> <span class="n">p</span> <span class="o">=</span> <span class="n">products</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">p</span><span class="o">.</span><span class="na">setPrice</span><span class="o">(</span><span class="n">price</span><span class="o">);</span>
        <span class="c1">// 通知用户:</span>
        <span class="n">customer</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="c1">// 通知管理员:</span>
        <span class="n">admin</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="kd">class</span> <span class="nc">Product</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">price</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Product</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Customer</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">on</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"用户查看了："</span><span class="o">+</span><span class="n">p</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Admin</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">on</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"管理员查看了："</span><span class="o">+</span><span class="n">p</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Store</code>类直接引用了<code class="language-plaintext highlighter-rouge">Customer</code>和<code class="language-plaintext highlighter-rouge">Admin</code>。先不考虑多个<code class="language-plaintext highlighter-rouge">Customer</code>或多个<code class="language-plaintext highlighter-rouge">Admin</code>的问题，上述<code class="language-plaintext highlighter-rouge">Store</code>类最大的问题是，如果要加一个新的观察者类型，例如工商局管理员，<code class="language-plaintext highlighter-rouge">Store</code>类就必须继续改动。</p>

<p>问题的本质是<code class="language-plaintext highlighter-rouge">Store</code>希望发送通知给那些关心<code class="language-plaintext highlighter-rouge">Product</code>的对象，但<code class="language-plaintext highlighter-rouge">Store</code>并不想知道这些人是谁。<strong>观察者模式就是要分离被观察者和观察者之间的耦合关系。</strong></p>

<p>要实现这一目标也很简单，<code class="language-plaintext highlighter-rouge">Store</code>不能直接引用<code class="language-plaintext highlighter-rouge">Customer</code>和<code class="language-plaintext highlighter-rouge">Admin</code>，相反，它引用一个<code class="language-plaintext highlighter-rouge">ProductObserver</code>接口列表，任何人想要观察<code class="language-plaintext highlighter-rouge">Store</code>，只要实现该接口，并且把自己注册到<code class="language-plaintext highlighter-rouge">Store</code>即可。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Admin</span> <span class="n">admin</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Admin</span><span class="o">();</span>
        <span class="nc">Customer</span> <span class="n">customer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Customer</span><span class="o">();</span>

        <span class="nc">Store</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Store</span><span class="o">();</span>
        <span class="n">store</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">admin</span><span class="o">);</span>
        <span class="n">store</span><span class="o">.</span><span class="na">addObserver</span><span class="o">(</span><span class="n">customer</span><span class="o">);</span>

        <span class="n">store</span><span class="o">.</span><span class="na">addNewProduct</span><span class="o">(</span><span class="s">"商品1"</span><span class="o">,</span><span class="mi">56</span><span class="o">);</span>
        <span class="n">store</span><span class="o">.</span><span class="na">addNewProduct</span><span class="o">(</span><span class="s">"商品2"</span><span class="o">,</span><span class="mi">78</span><span class="o">);</span>
        <span class="n">store</span><span class="o">.</span><span class="na">setProductPrice</span><span class="o">(</span><span class="s">"商品2"</span><span class="o">,</span><span class="mi">1000</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Store</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductObserver</span><span class="o">&gt;</span> <span class="n">observers</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addNewProduct</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Product</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">price</span><span class="o">);</span>
        <span class="n">products</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">p</span><span class="o">);</span>
        <span class="c1">// 通知全部:</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">ProductObserver</span> <span class="n">observer</span> <span class="o">:</span> <span class="n">observers</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">observer</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProductPrice</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Product</span> <span class="n">p</span> <span class="o">=</span> <span class="n">products</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">p</span><span class="o">.</span><span class="na">setPrice</span><span class="o">(</span><span class="n">price</span><span class="o">);</span>
        <span class="c1">// 通知全部:</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">ProductObserver</span> <span class="n">observer</span> <span class="o">:</span> <span class="n">observers</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">observer</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 注册观察者</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addObserver</span><span class="o">(</span><span class="nc">ProductObserver</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">observers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 取消注册</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeObserver</span><span class="o">(</span><span class="nc">ProductObserver</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">observers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="kd">class</span> <span class="nc">Product</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">price</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Product</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">ProductObserver</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">on</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Customer</span> <span class="kd">implements</span> <span class="nc">ProductObserver</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">on</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"用户查看了："</span><span class="o">+</span><span class="n">p</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Admin</span> <span class="kd">implements</span> <span class="nc">ProductObserver</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">on</span><span class="o">(</span><span class="nc">Product</span> <span class="n">p</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"管理员查看了："</span><span class="o">+</span><span class="n">p</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>观察者模式：</p>

<pre><code class="language-ascii">┌─────────┐      ┌───────────────┐
│  Store  │─ ─ ─&gt;│ProductObserver│
└─────────┘      └───────────────┘
     │                   ▲
                         │
     │             ┌─────┴─────┐
     ▼             │           │
┌─────────┐   ┌─────────┐ ┌─────────┐
│ Product │   │  Admin  │ │Customer │ ...
└─────────┘   └─────────┘ └─────────┘
</code></pre>

<p>观察者模式也有很多变体形式。有的观察者模式把被观察者也抽象出接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductObservable</span> <span class="o">{</span> <span class="c1">// 注意此处拼写是Observable不是Observer!</span>
    <span class="kt">void</span> <span class="nf">addObserver</span><span class="o">(</span><span class="nc">ProductObserver</span> <span class="n">observer</span><span class="o">);</span>
    <span class="kt">void</span> <span class="nf">removeObserver</span><span class="o">(</span><span class="nc">ProductObserver</span> <span class="n">observer</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对应的实体被观察者就要实现该接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Store</span> <span class="kd">implements</span> <span class="nc">ProductObservable</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>有些观察者模式把通知变成一个Event对象，从而不再有多种方法通知，而是统一成一种：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductObserver</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">onEvent</span><span class="o">(</span><span class="nc">ProductEvent</span> <span class="n">event</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>让观察者自己从Event对象中读取通知类型和通知数据。</p>

<p>广义的观察者模式包括所有消息系统。所谓消息系统，就是把观察者和被观察者完全分离，通过消息系统本身来通知：</p>

<pre><code class="language-ascii">                 ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
                   Messaging System
                 │                       │
                   ┌──────────────────┐
              ┌──┼&gt;│Topic:newProduct  │──┼─┐    ┌─────────┐
              │    └──────────────────┘    ├───&gt;│ConsumerA│
┌─────────┐   │  │ ┌──────────────────┐  │ │    └─────────┘
│Producer │───┼───&gt;│Topic:priceChanged│────┘
└─────────┘   │  │ └──────────────────┘  │
              │    ┌──────────────────┐         ┌─────────┐
              └──┼&gt;│Topic:soldOut     │──┼─────&gt;│ConsumerB│
                   └──────────────────┘         └─────────┘
                 └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>消息发送方称为Producer，消息接收方称为Consumer，Producer发送消息的时候，必须选择发送到哪个Topic。Consumer可以订阅自己感兴趣的Topic，从而只获得特定类型的消息。</p>

<p>使用消息系统实现观察者模式时，Producer和Consumer甚至经常不在同一台机器上，并且双方对对方完全一无所知，因为注册观察者这个动作本身都在消息系统中完成，而不是在Producer内部完成。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 通知全部:</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">ProductObserver</span> <span class="n">observer</span> <span class="o">:</span> <span class="n">observers</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">observer</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在编写观察者模式的时候，各个观察者是依次获得的同步通知，如果上一个观察者处理太慢，会导致下一个观察者不能及时获得通知。可以异步处理：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 另开线程，异步通知全部:</span>
<span class="k">new</span> <span class="nf">Thread</span><span class="o">(()-&gt;{</span>
    <span class="n">observers</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">observer</span><span class="o">-&gt;</span> <span class="n">observer</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
<span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>

<p>此外，如果观察者在处理通知的时候，发生了异常，还需要被观察者处理异常，才能保证继续通知下一个观察者。</p>

<h3 id="状态">状态</h3>

<blockquote>
  <p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。</p>
</blockquote>

<p>状态模式（State）经常用在带有状态的对象中。以QQ聊天为例，一个用户的QQ有几种状态：</p>

<ul>
  <li>离线状态（尚未登录）；</li>
  <li>正在登录状态；</li>
  <li>在线状态；</li>
  <li>忙状态（暂时离开）。</li>
</ul>

<p>定义一个<code class="language-plaintext highlighter-rouge">enum</code>就可以表示不同的状态。不同的状态需要对应不同的行为，比如收到消息时：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">ONLINE</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 闪烁图标</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="no">BUSY</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">reply</span><span class="o">(</span><span class="s">"现在忙，稍后回复"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">...</span>
</code></pre></div></div>

<p>状态模式的目的是为了把上述一大串<code class="language-plaintext highlighter-rouge">if...else...</code>的逻辑给<strong>分拆到不同的状态类</strong>中，使得<strong>将来增加状态比较容易</strong>。</p>

<p>状态模式的实现关键在于状态转换。简单的状态转换可以直接由调用方指定，复杂的状态转换可以在内部根据条件触发完成。</p>

<p>例如，我们设计一个聊天机器人，它有未连线和已连线两个状态。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">State</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">init</span><span class="o">();</span>
    <span class="nc">String</span> <span class="nf">reply</span><span class="o">(</span><span class="nc">String</span> <span class="n">input</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">//对于未连线状态，收到消息也不回复</span>
<span class="kd">class</span> <span class="nc">DisconnectedState</span> <span class="kd">implements</span> <span class="nc">State</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Bye!"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">reply</span><span class="o">(</span><span class="nc">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">//对于已连线状态，回应收到的消息：</span>
<span class="kd">class</span> <span class="nc">ConnectedState</span> <span class="kd">implements</span> <span class="nc">State</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Hello, I'm Bob."</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">reply</span><span class="o">(</span><span class="nc">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">"?"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">"Yes. "</span> <span class="o">+</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">"!"</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">"."</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">"!"</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">"?"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>状态模式的关键设计思想在于状态切换，引入一个<code class="language-plaintext highlighter-rouge">BotContext</code>完成状态切换：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BotContext</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">State</span> <span class="n">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DisconnectedState</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">chat</span><span class="o">(</span><span class="nc">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"hello"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">input</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// 收到hello切换到在线状态:</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="k">instanceof</span> <span class="nc">DisconnectedState</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConnectedState</span><span class="o">();</span>
                <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="s">"bye"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">input</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">//  收到bye切换到离线状态:</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="k">instanceof</span> <span class="nc">ConnectedState</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DisconnectedState</span><span class="o">();</span>
                <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">reply</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="nc">BotContext</span> <span class="n">bot</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BotContext</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"&gt; "</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
    <span class="nc">String</span> <span class="n">output</span> <span class="o">=</span> <span class="n">bot</span><span class="o">.</span><span class="na">chat</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">output</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">?</span> <span class="s">"(no reply)"</span> <span class="o">:</span> <span class="s">"&lt; "</span> <span class="o">+</span> <span class="n">output</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="策略">策略</h3>

<blockquote>
  <p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p>
</blockquote>

<p>策略模式：Strategy，是指，定义一组算法，并把其封装到一个对象中。然后在运行时，可以灵活的使用其中的一个算法。</p>

<p>策略模式在Java标准库中应用非常广泛，以排序为例，通过<code class="language-plaintext highlighter-rouge">Arrays.sort()</code>实现忽略大小写排序：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">{</span> <span class="s">"apple"</span><span class="o">,</span> <span class="s">"Pear"</span><span class="o">,</span> <span class="s">"Banana"</span><span class="o">,</span> <span class="s">"orange"</span> <span class="o">};</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="nl">String:</span><span class="o">:</span><span class="n">compareToIgnoreCase</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array</span><span class="o">));</span>
</code></pre></div></div>

<p>如果想忽略大小写排序，就传入<code class="language-plaintext highlighter-rouge">String::compareToIgnoreCase</code>，如果想倒序排序，就传入<code class="language-plaintext highlighter-rouge">(s1, s2) -&gt; -s1.compareTo(s2)</code>，这个比较两个元素大小的算法就是策略。</p>

<p><code class="language-plaintext highlighter-rouge">Arrays.sort()</code>排序方法在比较两个元素大小的时候，需要借助我们传入的<code class="language-plaintext highlighter-rouge">Comparator</code>对象，才能完成比较。这里的策略是指比较两个元素大小的策略，可以是忽略大小写比较，可以是倒序比较，也可以根据字符串长度比较。</p>

<p>上述排序使用到了策略模式，实际上指，在一个方法中，流程是确定的，但是，<strong>某些关键步骤的算法依赖调用方传入的策略</strong>，这样，传入不同的策略，即可获得不同的结果，大大增强了系统的灵活性。简单的例子：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">inventory</span><span class="o">((</span><span class="n">e</span><span class="o">)-&gt;{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"检查："</span><span class="o">+</span><span class="n">e</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="n">inventory</span><span class="o">((</span><span class="n">e</span><span class="o">)-&gt;{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"吃："</span><span class="o">+</span><span class="n">e</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="n">inventory</span><span class="o">((</span><span class="n">e</span><span class="o">)-&gt;{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"丢："</span><span class="o">+</span><span class="n">e</span><span class="o">);</span>
        <span class="o">});</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">inventory</span><span class="o">(</span><span class="no">I</span> <span class="n">i</span><span class="o">){</span>
        <span class="cm">/*假设代表这几个实体*/</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">s</span><span class="o">={</span><span class="s">"香蕉"</span><span class="o">,</span><span class="s">"苹果"</span><span class="o">,</span><span class="s">"火龙果"</span><span class="o">,</span><span class="s">"西瓜"</span><span class="o">};</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">string</span> <span class="o">:</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>根据传入的策略，<code class="language-plaintext highlighter-rouge">inventory</code>实现了不同的功能。</p>

<p>一个完整的策略模式要定义策略以及使用策略的上下文。以购物车结算为例，假设网站针对普通会员、高级会员有不同的折扣，同时活动期间还有一个满100减20的活动，这些就可以作为策略实现。先定义打折策略接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">DiscountStrategy</span> <span class="o">{</span>
    <span class="c1">// 计算折扣额度:</span>
    <span class="nc">BigDecimal</span> <span class="nf">getDiscount</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">total</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>接下来，就是实现各种策略：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">UserDiscountStrategy</span> <span class="kd">implements</span> <span class="nc">DiscountStrategy</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">getDiscount</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 普通会员打九折:</span>
        <span class="k">return</span> <span class="n">total</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"0.1"</span><span class="o">)).</span><span class="na">setScale</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="nc">RoundingMode</span><span class="o">.</span><span class="na">DOWN</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">OverDiscountStrategy</span> <span class="kd">implements</span> <span class="nc">DiscountStrategy</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">getDiscount</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 满100减20优惠:</span>
        <span class="k">return</span> <span class="n">total</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">100</span><span class="o">))</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="nc">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span> <span class="o">:</span> <span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SeniorDiscountStrategy</span> <span class="kd">implements</span> <span class="nc">DiscountStrategy</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">getDiscount</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 高级会员打八折:</span>
        <span class="k">return</span> <span class="n">total</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"0.2"</span><span class="o">)).</span><span class="na">setScale</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="nc">RoundingMode</span><span class="o">.</span><span class="na">DOWN</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>要应用策略，可以定义一个<code class="language-plaintext highlighter-rouge">DiscountContext</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">DiscountContext</span> <span class="o">{</span>
    <span class="c1">// 持有某个策略:</span>
    <span class="kd">private</span> <span class="nc">DiscountStrategy</span> <span class="n">strategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UserDiscountStrategy</span><span class="o">();</span>

    <span class="c1">// 允许客户端设置新策略:</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStrategy</span><span class="o">(</span><span class="nc">DiscountStrategy</span> <span class="n">strategy</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">strategy</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">calculatePrice</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">total</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">strategy</span><span class="o">.</span><span class="na">getDiscount</span><span class="o">(</span><span class="n">total</span><span class="o">)).</span><span class="na">setScale</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>调用方必须首先创建一个<code class="language-plaintext highlighter-rouge">DiscountContext</code>，并指定一个策略（或者使用默认策略），即可获得折扣后的价格：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">DiscountContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DiscountContext</span><span class="o">();</span>

<span class="c1">// 默认使用普通会员折扣:</span>
<span class="nc">BigDecimal</span> <span class="n">pay1</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">calculatePrice</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">105</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pay1</span><span class="o">);</span>

<span class="c1">// 使用满减折扣:</span>
<span class="n">ctx</span><span class="o">.</span><span class="na">setStrategy</span><span class="o">(</span><span class="k">new</span> <span class="nc">OverDiscountStrategy</span><span class="o">());</span>
<span class="nc">BigDecimal</span> <span class="n">pay2</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">calculatePrice</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">105</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pay2</span><span class="o">);</span>

<span class="c1">// 使用高级会员折扣:</span>
<span class="n">ctx</span><span class="o">.</span><span class="na">setStrategy</span><span class="o">(</span><span class="k">new</span> <span class="nc">SeniorDiscountStrategy</span><span class="o">());</span>
<span class="nc">BigDecimal</span> <span class="n">pay3</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">calculatePrice</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">105</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pay3</span><span class="o">);</span>
</code></pre></div></div>

<p>还可以组合：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OverUserDiscountStrategy</span> <span class="kd">implements</span> <span class="nc">DiscountStrategy</span><span class="o">{</span>
    <span class="nc">DiscountStrategy</span> <span class="n">ov</span><span class="o">=</span><span class="k">new</span> <span class="nc">OverDiscountStrategy</span><span class="o">();</span>
    <span class="nc">DiscountStrategy</span> <span class="n">ud</span><span class="o">=</span><span class="k">new</span> <span class="nc">UserDiscountStrategy</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">getDiscount</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/*先减，再折*/</span>
        <span class="nc">BigDecimal</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">ov</span><span class="o">.</span><span class="na">getDiscount</span><span class="o">(</span><span class="n">total</span><span class="o">);</span>
        <span class="nc">BigDecimal</span> <span class="n">d2</span> <span class="o">=</span> <span class="n">ud</span><span class="o">.</span><span class="na">getDiscount</span><span class="o">(</span><span class="n">total</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="n">d1</span><span class="o">));</span>
        <span class="k">return</span> <span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">d1</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">d2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>策略模式的核心思想是在一个计算方法中把容易变化的算法抽出来作为“策略”参数传进去，从而使得新增策略不必修改原有逻辑。</p>

<h3 id="模板方法">模板方法</h3>

<blockquote>
  <p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
</blockquote>

<p>模板方法（Template Method）是一个比较简单的模式。它的主要思想是，定义一个操作的一系列步骤，对于某些暂时确定不下来的步骤，就留给子类去实现好了，这样不同的子类就可以定义出不同的步骤。</p>

<p>因此，模板方法的核心在于定义一个“骨架”。</p>

<p>假设开发了一个从数据库读取设置的类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Setting</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="nc">String</span> <span class="nf">getSetting</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">readFromDatabase</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="kd">private</span> <span class="nc">String</span> <span class="nf">readFromDatabase</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// TODO: 从数据库读取</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>由于从数据库读取数据较慢，可以考虑把读取的设置缓存起来，这样下一次读取同样的key就不必再访问数据库了。怎么实现缓存，暂时没想好，但可以先写出使用缓存的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Setting</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="nc">String</span> <span class="nf">getSetting</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 先从缓存读取:</span>
        <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">lookupCache</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 在缓存中未找到,从数据库读取:</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">readFromDatabase</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[DEBUG] load from db: "</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
            <span class="c1">// 放入缓存:</span>
            <span class="n">putIntoCache</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[DEBUG] load from cache: "</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">readFromDatabase</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">){</span>
        <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>整个流程没有问题，但是，<code class="language-plaintext highlighter-rouge">lookupCache(key)</code>和<code class="language-plaintext highlighter-rouge">putIntoCache(key, value)</code>这两个方法还根本没实现，怎么编译通过？这个不要紧，声明抽象方法就可以：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractSetting</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="nc">String</span> <span class="nf">getSetting</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">lookupCache</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">readFromDatabase</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="n">putIntoCache</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">readFromDatabase</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">){</span>
        <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">lookupCache</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">putIntoCache</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为声明了抽象方法，自然整个类也必须是抽象类。如何实现<code class="language-plaintext highlighter-rouge">lookupCache(key)</code>和<code class="language-plaintext highlighter-rouge">putIntoCache(key, value)</code>这两个方法就交给子类了。子类其实并不关心核心代码<code class="language-plaintext highlighter-rouge">getSetting(key)</code>的逻辑，它只需要关心如何完成两个小小的子任务就可以了。</p>

<p>假设希望用一个<code class="language-plaintext highlighter-rouge">Map</code>做缓存，那么可以写一个<code class="language-plaintext highlighter-rouge">LocalSetting</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalSetting</span> <span class="kd">extends</span> <span class="nc">AbstractSetting</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">lookupCache</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">putIntoCache</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果要使用Redis做缓存，那么可以再写一个<code class="language-plaintext highlighter-rouge">RedisSetting</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.lettuce<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>lettuce-core<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.2.1.RELEASE<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisSetting</span> <span class="kd">extends</span> <span class="nc">AbstractSetting</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">RedisClient</span> <span class="n">client</span> <span class="o">=</span> <span class="nc">RedisClient</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"redis://localhost:6379"</span><span class="o">);</span>

    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">lookupCache</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">connect</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
            <span class="k">return</span> <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">putIntoCache</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">connect</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
            <span class="n">commands</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>客户端代码使用本地缓存的代码这么写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AbstractSetting</span> <span class="n">setting1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalSetting</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"test = "</span> <span class="o">+</span> <span class="n">setting1</span><span class="o">.</span><span class="na">getSetting</span><span class="o">(</span><span class="s">"test"</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"test = "</span> <span class="o">+</span> <span class="n">setting1</span><span class="o">.</span><span class="na">getSetting</span><span class="o">(</span><span class="s">"test"</span><span class="o">));</span>
</code></pre></div></div>

<p>要改成Redis缓存，只需要把<code class="language-plaintext highlighter-rouge">LocalSetting</code>替换为<code class="language-plaintext highlighter-rouge">RedisSetting</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AbstractSetting</span> <span class="n">setting2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisSetting</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"autosave = "</span> <span class="o">+</span> <span class="n">setting2</span><span class="o">.</span><span class="na">getSetting</span><span class="o">(</span><span class="s">"autosave"</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"autosave = "</span> <span class="o">+</span> <span class="n">setting2</span><span class="o">.</span><span class="na">getSetting</span><span class="o">(</span><span class="s">"autosave"</span><span class="o">));</span>
</code></pre></div></div>

<p>模板方法的核心思想是：父类定义骨架，子类实现某些细节。</p>

<p>为了防止子类重写父类的骨架方法，可以在父类中对骨架方法使用<code class="language-plaintext highlighter-rouge">final</code>。对于需要子类实现的抽象方法，一般声明为<code class="language-plaintext highlighter-rouge">protected</code>，使得这些方法对外部客户端不可见。</p>

<p>Java标准库也有很多模板方法的应用。在集合类中，<code class="language-plaintext highlighter-rouge">AbstractList</code>和<code class="language-plaintext highlighter-rouge">AbstractQueuedSynchronizer</code>都定义了很多通用操作，子类只需要实现某些必要方法。</p>

<h3 id="访问者">访问者</h3>

<blockquote>
  <p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
</blockquote>

<p>访问者模式（Visitor）是一种操作一组对象的操作，它的目的是不改变对象的定义，但允许新增不同的访问者，来定义新的操作。</p>

<p>假设我们要递归遍历某个文件夹的所有子文件夹和文件，然后找出<code class="language-plaintext highlighter-rouge">.java</code>文件，正常的做法是写个递归：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">scan</span><span class="o">(</span><span class="nc">File</span> <span class="n">dir</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">File</span><span class="o">&gt;</span> <span class="n">collector</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">File</span> <span class="n">file</span> <span class="o">:</span> <span class="n">dir</span><span class="o">.</span><span class="na">listFiles</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isFile</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">".java"</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">collector</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// 递归调用:</span>
            <span class="n">scan</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">collector</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码的问题在于，扫描目录的逻辑和找java文件的逻辑混在了一起。如果下次需要增加一个清理<code class="language-plaintext highlighter-rouge">.class</code>文件的功能，就必须再重复写扫描逻辑。</p>

<p>因此，访问者模式先把<strong>数据结构</strong>（这里是文件夹和文件构成的树型结构）和对其的<strong>操作</strong>（查找文件）分离开，以后如果要新增操作（例如清理<code class="language-plaintext highlighter-rouge">.class</code>文件），只需要新增访问者，不需要改变现有逻辑。</p>

<p>用访问者模式改写上述代码步骤如下：</p>

<p>首先，定义访问者接口，即该访问者能够干的事情：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Visitor</span> <span class="o">{</span>
    <span class="c1">// 访问文件夹:</span>
    <span class="kt">void</span> <span class="nf">visitDir</span><span class="o">(</span><span class="nc">File</span> <span class="n">dir</span><span class="o">);</span>
    <span class="c1">// 访问文件:</span>
    <span class="kt">void</span> <span class="nf">visitFile</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>定义能持有文件夹和文件的数据结构<code class="language-plaintext highlighter-rouge">FileStructure</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">FileStructure</span> <span class="o">{</span>
    <span class="c1">// 根目录:</span>
    <span class="kd">private</span> <span class="nc">File</span> <span class="n">path</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">FileStructure</span><span class="o">(</span><span class="nc">File</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">path</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">scan</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">path</span><span class="o">,</span> <span class="n">visitor</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">scan</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">,</span> <span class="nc">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// 让访问者处理文件夹:</span>
			<span class="n">visitor</span><span class="o">.</span><span class="na">visitDir</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
			<span class="k">for</span> <span class="o">(</span><span class="nc">File</span> <span class="n">sub</span> <span class="o">:</span> <span class="n">file</span><span class="o">.</span><span class="na">listFiles</span><span class="o">())</span> <span class="o">{</span>
                <span class="c1">// 递归处理子文件夹:</span>
				<span class="n">scan</span><span class="o">(</span><span class="n">sub</span><span class="o">,</span> <span class="n">visitor</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isFile</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// 让访问者处理文件:</span>
			<span class="n">visitor</span><span class="o">.</span><span class="na">visitFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>java文件访问者：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">JavaFileVisitor</span> <span class="kd">implements</span> <span class="nc">Visitor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitDir</span><span class="o">(</span><span class="nc">File</span> <span class="n">dir</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"访问目录："</span> <span class="o">+</span> <span class="n">dir</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitFile</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">".java"</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"找到的java文件： "</span> <span class="o">+</span> <span class="n">file</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，就把访问者的行为抽象出来了。如果要实现查找<code class="language-plaintext highlighter-rouge">.java</code>文件，就传入<code class="language-plaintext highlighter-rouge">JavaFileVisitor</code>。</p>

<p>如果要清理<code class="language-plaintext highlighter-rouge">.class</code>文件，可以再写一个<code class="language-plaintext highlighter-rouge">ClassFileClearnerVisitor</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ClassFileCleanerVisitor</span> <span class="kd">implements</span> <span class="nc">Visitor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitDir</span><span class="o">(</span><span class="nc">File</span> <span class="n">dir</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitFile</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">".class"</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"将清理类文件： "</span> <span class="o">+</span> <span class="n">file</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>访问者模式的核心思想是访问比较复杂的数据结构时，不去改变数据结构，而是把对数据的操作<strong>抽象</strong>出来，在“访问”的过程中<strong>以回调形式</strong>在访问者中<strong>处理操作逻辑</strong>。如果要新增一组操作，那么只需要增加一个新的访问者。</p>

<p>实际上，Java标准库提供的<code class="language-plaintext highlighter-rouge">Files.walkFileTree()</code>已经实现了一个访问者模式：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Files</span><span class="o">.</span><span class="na">walkFileTree</span><span class="o">(</span><span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"."</span><span class="o">),</span> <span class="k">new</span> <span class="nc">SimpleFileVisitor</span><span class="o">&lt;</span><span class="nc">Path</span><span class="o">&gt;(){</span>
    <span class="c1">// 处理Directory:</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">FileVisitResult</span> <span class="nf">preVisitDirectory</span><span class="o">(</span><span class="nc">Path</span> <span class="n">dir</span><span class="o">,</span> <span class="nc">BasicFileAttributes</span> <span class="n">attrs</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"pre visit dir: "</span> <span class="o">+</span> <span class="n">dir</span><span class="o">);</span>
        <span class="c1">// 返回CONTINUE表示继续访问:</span>
        <span class="k">return</span> <span class="nc">FileVisitResult</span><span class="o">.</span><span class="na">CONTINUE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 处理File:</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">FileVisitResult</span> <span class="nf">visitFile</span><span class="o">(</span><span class="nc">Path</span> <span class="n">file</span><span class="o">,</span> <span class="nc">BasicFileAttributes</span> <span class="n">attrs</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"visit file: "</span> <span class="o">+</span> <span class="n">file</span><span class="o">);</span>
        <span class="c1">// 返回CONTINUE表示继续访问:</span>
        <span class="k">return</span> <span class="nc">FileVisitResult</span><span class="o">.</span><span class="na">CONTINUE</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Files.walkFileTree()</code>允许访问者返回<code class="language-plaintext highlighter-rouge">FileVisitResult.CONTINUE</code>以便继续访问，或者返回<code class="language-plaintext highlighter-rouge">FileVisitResult.TERMINATE</code>停止访问。</p>

<p>类似的，对XML的SAX处理也是一个访问者模式，需要提供一个SAX Handler作为访问者处理XML的各个节点。</p>

<p>简化的写法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">File</span><span class="o">&gt;</span> <span class="n">collector</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">scan</span><span class="o">(</span><span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"."</span><span class="o">).</span><span class="na">toFile</span><span class="o">(),</span> <span class="k">new</span> <span class="nc">Visitor</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitDir</span><span class="o">(</span><span class="nc">File</span> <span class="n">dir</span><span class="o">)</span> <span class="o">{</span>

            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitFile</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">".java"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">collector</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>

    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">scan</span><span class="o">(</span><span class="nc">File</span> <span class="n">dir</span><span class="o">,</span><span class="nc">Visitor</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">File</span> <span class="n">file</span> <span class="o">:</span> <span class="n">dir</span><span class="o">.</span><span class="na">listFiles</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isFile</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">v</span><span class="o">.</span><span class="na">visitFile</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">v</span><span class="o">.</span><span class="na">visitDir</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
                <span class="c1">// 递归调用:</span>
                <span class="n">scan</span><span class="o">(</span><span class="n">file</span><span class="o">,</span><span class="n">v</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">Visitor</span> <span class="o">{</span>
    <span class="c1">// 访问文件夹:</span>
    <span class="kt">void</span> <span class="nf">visitDir</span><span class="o">(</span><span class="nc">File</span> <span class="n">dir</span><span class="o">);</span>
    <span class="c1">// 访问文件:</span>
    <span class="kt">void</span> <span class="nf">visitFile</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>策略模式和访问者模式都允许在运行时改变对象的行为，但它们的应用场景和目的有所不同。</p>

<p>在策略模式中，定义了一系列算法，并将每个算法封装到具有共同接口的独立类中，使得这些算法可以互相替换。客户端可以在运行时选择不同的算法来使用，而不需要修改原有的代码。策略模式主要关注的是<strong>算法的选择和切换</strong>。</p>

<p>而在访问者模式中，主要关注的是对<strong>不同类型的元素进行不同的操作</strong>，同时又不改变元素本身的结构。通过访问者模式，可以在不改变元素结构的情况下，定义新的操作方式。访问者模式通常用于处理具有复杂结构的对象，且这些对象的结构经常发生变化。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">函数式编程</title><link href="/2024/04/25/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/" rel="alternate" type="text/html" title="函数式编程" /><published>2024-04-25T00:00:00+08:00</published><updated>2024-04-25T00:00:00+08:00</updated><id>/2024/04/25/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B</id><content type="html" xml:base="/2024/04/25/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"><![CDATA[<h1 id="引言">引言</h1>
<p>Lambda、方法引用、Stream。</p>

<h1 id="函数式编程">函数式编程</h1>

<p>函数是一种最基本的任务，一个大型程序就是一个顶层函数调用若干底层函数，这些被调用的函数又可以调用其他函数，即大任务被一层层拆解并执行。所以函数就是面向过程的程序设计的基本单元。</p>

<p>Java不支持单独定义函数，但可以把静态方法视为独立的函数，把实例方法视为自带<code class="language-plaintext highlighter-rouge">this</code>参数的函数。函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数，函数式编程最早是数学家阿隆佐·邱奇研究的一套函数变换逻辑，又称Lambda Calculus（λ-Calculus），所以也经常把函数式编程称为Lambda计算。从<strong>Java 8</strong>开始，Java支持函数式编程。</p>

<h2 id="lambda表达式">Lambda表达式</h2>

<p>在Java程序中，经常遇到一大堆<strong>单方法接口</strong>，即一个接口只定义了一个方法：<code class="language-plaintext highlighter-rouge">Comparator</code>、<code class="language-plaintext highlighter-rouge">Runnable</code>、<code class="language-plaintext highlighter-rouge">Callable</code>。</p>

<p>以<code class="language-plaintext highlighter-rouge">Comparator</code>为例，调用<code class="language-plaintext highlighter-rouge">Arrays.sort()</code>时，可以传入一个<code class="language-plaintext highlighter-rouge">Comparator</code>实例，以匿名类方式编写如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">...</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">String</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">s1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div></div>

<p>从<strong>Java 8</strong>开始，可以用Lambda表达式替换<strong>单方法接口</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">s1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div></div>

<p>参数是<code class="language-plaintext highlighter-rouge">(s1, s2)</code>，参数类型可以省略，因为编译器可以自动推断出<code class="language-plaintext highlighter-rouge">String</code>类型。<code class="language-plaintext highlighter-rouge">-&gt; { ... }</code>表示方法体，所有代码写在内部即可。Lambda表达式没有<code class="language-plaintext highlighter-rouge">class</code>定义，因此写法非常简洁。</p>

<p>如果只有一行<code class="language-plaintext highlighter-rouge">return xxx</code>的代码，完全可以用更简单的写法：<code class="language-plaintext highlighter-rouge">Arrays.sort(array, (s1, s2) -&gt; s1.compareTo(s2));</code>。返回值的类型也是由编译器自动推断的，这里推断出的返回值是<code class="language-plaintext highlighter-rouge">int</code>，因此，只要返回<code class="language-plaintext highlighter-rouge">int</code>，编译器就不会报错。</p>

<h2 id="函数式接口">函数式接口</h2>

<p>函数式接口是Java中的一个概念，它是指<strong>只包含一个抽象方法的接口</strong>。函数式接口可以用作Lambda表达式的类型，从而支持函数式编程的特性。在Java中，函数式接口可以通过<code class="language-plaintext highlighter-rouge">@FunctionalInterface</code>注解来<strong>标识</strong>，确保接口只包含一个抽象方法（同<code class="language-plaintext highlighter-rouge">@Override</code>注解只是用来让IDE检查的）。</p>

<p>如<code class="language-plaintext highlighter-rouge">Callable</code>接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">V</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Comparator</code>接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="no">T</span> <span class="n">o1</span><span class="o">,</span> <span class="no">T</span> <span class="n">o2</span><span class="o">);</span>

    <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">);</span>

    <span class="k">default</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">reversed</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">default</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">thenComparing</span><span class="o">(</span><span class="nc">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>虽然<code class="language-plaintext highlighter-rouge">Comparator</code>接口有很多方法，但只有一个抽象方法<code class="language-plaintext highlighter-rouge">int compare(T o1, T o2)</code>，其他的方法都是<code class="language-plaintext highlighter-rouge">default</code>方法或<code class="language-plaintext highlighter-rouge">static</code>方法。<code class="language-plaintext highlighter-rouge">boolean equals(Object obj)</code>是<code class="language-plaintext highlighter-rouge">Object</code>定义的方法，不算在接口方法内。因此，<code class="language-plaintext highlighter-rouge">Comparator</code>也是一个<code class="language-plaintext highlighter-rouge">FunctionalInterface</code>。</p>

<p>当使用函数式接口时，编译器会根据<strong>Lambda表达式</strong>或<strong>方法引用</strong>的上下文，将其<strong>转换为函数式接口的实例</strong>，并在需要时调用相应的方法。这些实例可以在运行时被JVM执行。</p>

<p>因此，函数式接口的调用是在运行时由<strong>JVM执行</strong>的，<strong>编译器</strong>负责将<strong>Lambda表达式</strong>或<strong>方法引用</strong>转换为<strong>函数式接口</strong>的实例，以便在程序运行时进行调用。</p>

<h2 id="柯里化">柯里化</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.BiConsumer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">staticMethod</span><span class="o">(</span><span class="nc">Object</span> <span class="o">...</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"静态方法:"</span><span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 柯里化（currying）的技巧，将一个多参数的方法转换为一系列单参数的方法。</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Runnable</span><span class="o">&gt;</span> <span class="n">cr2</span> <span class="o">=</span>
                <span class="o">(</span><span class="n">v1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">Main</span><span class="o">.</span><span class="na">staticMethod</span><span class="o">(</span><span class="n">v1</span><span class="o">);</span>
        <span class="n">cr2</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
        
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;&gt;</span> <span class="n">cr3</span> <span class="o">=</span>
                <span class="o">(</span><span class="n">v1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">v2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">v3</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Main</span><span class="o">.</span><span class="na">staticMethod</span><span class="o">(</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">,</span> <span class="n">v3</span><span class="o">);</span>
        <span class="n">cr3</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">apply</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">accept</span><span class="o">(</span><span class="s">"Consumer"</span><span class="o">);</span>
        
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="n">自定义接口</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">cr</span> <span class="o">=</span>
                <span class="o">(</span><span class="n">v1</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">v4</span><span class="o">,</span> <span class="n">v5</span><span class="o">,</span> <span class="n">v6</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Main</span><span class="o">.</span><span class="na">staticMethod</span><span class="o">(</span><span class="n">v1</span><span class="o">,</span> <span class="n">v4</span><span class="o">,</span> <span class="n">v5</span><span class="o">,</span> <span class="n">v6</span><span class="o">);</span>
        <span class="n">cr</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">随便</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">自定义接口</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">U</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="n">随便</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">,</span> <span class="no">U</span> <span class="n">u</span><span class="o">,</span> <span class="no">V</span> <span class="n">v</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>柯里化是一种函数式编程的技术，通过这种技巧可以将<strong>多参数函数</strong>转换为一系列接受<strong>单个参数的函数</strong>。在柯里化中，每个函数只接受一个参数，并返回一个接受下一个参数的函数，直到接受完所有参数后返回最终结果。</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">cr2</code>是一个<code class="language-plaintext highlighter-rouge">Function&lt;Integer, Runnable&gt;</code>，它接受一个整数参数，并返回一个<code class="language-plaintext highlighter-rouge">Runnable</code>，这个<code class="language-plaintext highlighter-rouge">Runnable</code>调用了<code class="language-plaintext highlighter-rouge">Main.staticMethod</code>方法。</li>
  <li><code class="language-plaintext highlighter-rouge">cr3</code>是一个<code class="language-plaintext highlighter-rouge">Function&lt;Integer, Function&lt;Integer, Consumer&lt;String&gt;&gt;&gt;</code>，它接受两个整数参数，并返回一个<code class="language-plaintext highlighter-rouge">Consumer&lt;String&gt;</code>，这个<code class="language-plaintext highlighter-rouge">Consumer&lt;String&gt;</code>调用了<code class="language-plaintext highlighter-rouge">Main.staticMethod</code>方法。</li>
  <li><code class="language-plaintext highlighter-rouge">cr</code>是一个<code class="language-plaintext highlighter-rouge">Function&lt;Integer, 自定义接口&lt;Integer, Integer, Integer&gt;&gt;</code>，它接受一个整数参数，并返回一个自定义接口的实例，这个自定义接口接受三个整数参数，并调用了<code class="language-plaintext highlighter-rouge">Main.staticMethod</code>方法。</li>
</ol>

<p>通过柯里化，可以更灵活地使用多参数方法，将其转换为一系列单参数方法，使得代码更加模块化和易于理解。  也可以为多个参数。</p>

<p>拆解一个比较复杂的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">staticMethod</span><span class="o">(</span><span class="nc">Object</span> <span class="o">...</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"静态方法:"</span><span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">t0</span><span class="o">&lt;</span><span class="n">t1</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="n">t2</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">,</span><span class="nc">String</span><span class="o">,</span> <span class="n">f3</span><span class="o">&lt;</span><span class="nc">Boolean</span><span class="o">,</span><span class="nc">Float</span><span class="o">,</span><span class="nc">Person</span><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">cr</span><span class="o">=</span>
            <span class="o">()-&gt;</span><span class="n">a</span><span class="o">-&gt;(</span><span class="n">b</span><span class="o">,</span><span class="n">c</span><span class="o">)-&gt;(</span><span class="n">d</span><span class="o">,</span><span class="n">e</span><span class="o">,</span><span class="n">f</span><span class="o">)-&gt;</span><span class="nc">Main</span><span class="o">.</span><span class="na">staticMethod</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">,</span><span class="n">c</span><span class="o">,</span><span class="n">d</span><span class="o">,</span><span class="n">e</span><span class="o">,</span><span class="n">f</span><span class="o">);</span>
        <span class="n">cr</span><span class="o">.</span><span class="na">f0</span><span class="o">().</span><span class="na">f1</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">f2</span><span class="o">(</span><span class="mf">2.3</span><span class="o">,</span><span class="s">"你好"</span><span class="o">).</span><span class="na">n3</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span><span class="mf">4.5f</span><span class="o">,</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"小明"</span><span class="o">,</span><span class="mi">18</span><span class="o">));</span>
        <span class="c1">// 拆解：</span>
        <span class="n">t0</span><span class="o">&lt;</span><span class="n">t1</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="n">t2</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">,</span><span class="nc">String</span><span class="o">,</span> <span class="n">f3</span><span class="o">&lt;</span><span class="nc">Boolean</span><span class="o">,</span><span class="nc">Float</span><span class="o">,</span><span class="nc">Person</span><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">cr2</span><span class="o">=</span>
            <span class="o">()-&gt;</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"无参数"</span><span class="o">);</span>
                <span class="k">return</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"一个参数"</span><span class="o">);</span>
                    <span class="k">return</span> <span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"两个参数"</span><span class="o">);</span>
                        <span class="k">return</span> <span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="n">e</span><span class="o">,</span> <span class="n">f</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"三个参数"</span><span class="o">);</span>
                            <span class="nc">Main</span><span class="o">.</span><span class="na">staticMethod</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">,</span> <span class="n">e</span><span class="o">,</span> <span class="n">f</span><span class="o">);</span>
                        <span class="o">};</span>
                    <span class="o">};</span>
                <span class="o">};</span>
            <span class="o">};</span>
        <span class="n">t1</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="n">t2</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">,</span><span class="nc">String</span><span class="o">,</span> <span class="n">f3</span><span class="o">&lt;</span><span class="nc">Boolean</span><span class="o">,</span><span class="nc">Float</span><span class="o">,</span><span class="nc">Person</span><span class="o">&gt;&gt;&gt;</span> <span class="n">t1</span><span class="o">=</span><span class="n">cr2</span><span class="o">.</span><span class="na">f0</span><span class="o">();</span>
        <span class="n">t2</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">,</span><span class="nc">String</span><span class="o">,</span> <span class="n">f3</span><span class="o">&lt;</span><span class="nc">Boolean</span><span class="o">,</span><span class="nc">Float</span><span class="o">,</span><span class="nc">Person</span><span class="o">&gt;&gt;</span> <span class="n">t2</span><span class="o">=</span><span class="n">t1</span><span class="o">.</span><span class="na">f1</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">f3</span><span class="o">&lt;</span><span class="nc">Boolean</span><span class="o">,</span><span class="nc">Float</span><span class="o">,</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">f3</span><span class="o">=</span><span class="n">t2</span><span class="o">.</span><span class="na">f2</span><span class="o">(</span><span class="mf">2.3</span><span class="o">,</span><span class="s">"你好"</span><span class="o">);</span>
        <span class="n">f3</span><span class="o">.</span><span class="na">n3</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span><span class="mf">4.5f</span><span class="o">,</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"小明"</span><span class="o">,</span><span class="mi">18</span><span class="o">));</span>
        <span class="c1">//当然，泛型参数也可以不按顺序来，可以把第一个泛型参数当返回值，可能会被打。</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">t0</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;{</span>
    <span class="no">T</span> <span class="nf">f0</span><span class="o">();</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">t1</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span><span class="no">U</span><span class="o">&gt;{</span>
    <span class="no">U</span> <span class="nf">f1</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">t2</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span><span class="no">U</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;{</span>
    <span class="no">V</span> <span class="nf">f2</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">,</span><span class="no">U</span> <span class="n">u</span><span class="o">);</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">f3</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">U</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">n3</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">,</span> <span class="no">U</span> <span class="n">u</span><span class="o">,</span> <span class="no">V</span> <span class="n">v</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Person</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">nane</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">nane</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">nane</span> <span class="o">=</span> <span class="n">nane</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"Person{nane='"</span> <span class="o">+</span> <span class="n">nane</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", age="</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JavaScript实现无限递归调用比较麻烦，而Java则很简单：</p>

<p>JavaScript：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span> <span class="p">...</span><span class="nx">args</span> <span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">sum</span><span class="o">+=</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="p">...</span><span class="nx">args2</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">add</span><span class="p">(</span> <span class="nx">sum</span> <span class="p">,</span> <span class="p">...</span><span class="nx">args2</span> <span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">fn</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">sum</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">fn</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span> <span class="c1">// 输出 10</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span> <span class="c1">// 输出 15</span>
</code></pre></div></div>

<p>将上面的代码硬转为Java是这样的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="no">T</span> <span class="n">t</span><span class="o">=</span><span class="k">new</span> <span class="no">T</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="no">T2</span> <span class="nf">f</span><span class="o">(</span><span class="nc">Integer</span><span class="o">...</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">var</span> <span class="n">o</span><span class="o">=</span><span class="k">new</span> <span class="nc">Object</span><span class="o">(){</span>
                    <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
                <span class="o">};</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">o</span><span class="o">.</span><span class="na">sum</span> <span class="o">+=</span> <span class="n">integer</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="no">T</span> <span class="n">t</span><span class="o">=</span><span class="k">this</span><span class="o">;</span>
                <span class="no">T2</span> <span class="n">t2</span><span class="o">=</span><span class="k">new</span> <span class="no">T2</span><span class="o">()</span> <span class="o">{</span>
                    <span class="nd">@Override</span>
                    <span class="kd">public</span> <span class="no">T2</span> <span class="nf">f</span><span class="o">(</span><span class="nc">Integer</span><span class="o">...</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                        <span class="kt">int</span> <span class="n">sum2</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
                        <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                            <span class="n">sum2</span> <span class="o">+=</span> <span class="n">integer</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">sum</span><span class="o">,</span><span class="n">sum2</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="nd">@Override</span>
                    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">sum</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">};</span>
                <span class="k">return</span> <span class="n">t2</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">).</span><span class="na">f</span><span class="o">(</span><span class="mi">6</span><span class="o">));</span><span class="c1">//21</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">f</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="na">f</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">));</span><span class="c1">//21</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">T</span><span class="o">{</span>
    <span class="no">T2</span> <span class="nf">f</span><span class="o">(</span><span class="nc">Integer</span> <span class="o">...</span><span class="na">i</span><span class="o">);</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">T2</span><span class="o">{</span>
    <span class="no">T2</span> <span class="nf">f</span><span class="o">(</span><span class="nc">Integer</span> <span class="o">...</span><span class="na">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实际上完全不用这么麻烦：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="no">T</span> <span class="n">t</span><span class="o">=</span><span class="k">new</span> <span class="no">T</span><span class="o">()</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="no">T</span> <span class="nf">f</span><span class="o">(</span><span class="nc">Integer</span><span class="o">...</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">sum</span> <span class="o">+=</span> <span class="n">integer</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="n">sum</span><span class="o">;</span>
                <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
                <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">).</span><span class="na">f</span><span class="o">(</span><span class="mi">6</span><span class="o">));</span><span class="c1">//21</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">f</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">).</span><span class="na">f</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">));</span><span class="c1">//21</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">T</span><span class="o">{</span>
    <span class="no">T</span> <span class="nf">f</span><span class="o">(</span><span class="nc">Integer</span> <span class="o">...</span><span class="na">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="方法引用">方法引用</h2>

<table>
  <thead>
    <tr>
      <th>引用类型</th>
      <th>方法引用示例</th>
      <th>对应调用示例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>静态方法引用</td>
      <td><code class="language-plaintext highlighter-rouge">Main::staticMethod</code></td>
      <td><code class="language-plaintext highlighter-rouge">Main.staticMethod(...)</code></td>
    </tr>
    <tr>
      <td>实例方法引用</td>
      <td><code class="language-plaintext highlighter-rouge">main::instanceMethod</code></td>
      <td><code class="language-plaintext highlighter-rouge">main.instanceMethod(...)</code></td>
    </tr>
    <tr>
      <td>构造方法引用</td>
      <td><code class="language-plaintext highlighter-rouge">Main::new</code></td>
      <td><code class="language-plaintext highlighter-rouge">new Main(...)</code></td>
    </tr>
    <tr>
      <td>数组构造方法引用</td>
      <td><code class="language-plaintext highlighter-rouge">Main[]::new</code></td>
      <td><code class="language-plaintext highlighter-rouge">new Main[?]</code></td>
    </tr>
  </tbody>
</table>

<p>方法引用，是指如果某个方法签名和单方法接口签名恰好一致，就可以直接传入方法引用。 在这里，方法签名只看参数类型和返回类型，<strong>不看方法名称</strong>，也不看类的继承关系。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">"Apple"</span><span class="o">,</span> <span class="s">"Orange"</span><span class="o">,</span> <span class="s">"Banana"</span><span class="o">,</span> <span class="s">"Lemon"</span> <span class="o">};</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="nl">String:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">", "</span><span class="o">,</span> <span class="n">array</span><span class="o">));</span>
</code></pre></div></div>

<p>对于<code class="language-plaintext highlighter-rouge">String.compareTo()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">String</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">String</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个方法的签名只有一个参数，为什么和<code class="language-plaintext highlighter-rouge">int compare(T t, T t)</code>能匹配呢？</p>

<p>因为使用<code class="language-plaintext highlighter-rouge">类名::实例方法</code>这样的方法引用，则会有一个<strong>隐含</strong>的<code class="language-plaintext highlighter-rouge">this</code>参数，<code class="language-plaintext highlighter-rouge">String</code>类的<code class="language-plaintext highlighter-rouge">compareTo()</code>方法在实际调用的时候，<strong>第一个隐含参数总是传入<code class="language-plaintext highlighter-rouge">this</code></strong>，相当于静态方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">String</span> <span class="k">this</span><span class="o">,</span> <span class="nc">String</span> <span class="n">o</span><span class="o">);</span>
</code></pre></div></div>

<p>所以，<code class="language-plaintext highlighter-rouge">String.compareTo()</code>方法也可作为方法引用传入。</p>

<p><code class="language-plaintext highlighter-rouge">类名::实例方法</code>这种方法引用形式，实际上是一种语法糖，它可以理解为对<code class="language-plaintext highlighter-rouge">实例::实例方法</code>的一种特殊情况。</p>

<p>使用<code class="language-plaintext highlighter-rouge">类名::实例方法</code>方法引用，实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">instanceMethod</span><span class="o">(){</span>
        <span class="k">return</span> <span class="s">"123"</span><span class="o">;</span>
    <span class="o">}</span>
   <span class="kd">static</span> <span class="nc">String</span> <span class="nf">call</span><span class="o">(</span><span class="no">I</span> <span class="n">i</span><span class="o">){</span>
        <span class="k">return</span>  <span class="n">i</span><span class="o">.</span><span class="na">func</span><span class="o">(</span><span class="k">new</span> <span class="nc">Main</span><span class="o">());</span>
   <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="nl">Main:</span><span class="o">:</span><span class="n">instanceMethod</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span><span class="o">{</span>
    <span class="nc">String</span> <span class="nf">func</span><span class="o">(</span><span class="nc">Main</span> <span class="n">a</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这种方法引用需要一个接收者参数，因此<code class="language-plaintext highlighter-rouge">I</code>接口的<code class="language-plaintext highlighter-rouge">func</code>方法需要接收一个<code class="language-plaintext highlighter-rouge">Main</code>类型的参数。</p>

<p>有点类似通过反射的形式调用方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">instanceMethod</span><span class="o">(){</span>
        <span class="k">return</span> <span class="s">"123"</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">String</span> <span class="nf">ref</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">c</span><span class="o">,</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">NoSuchMethodException</span><span class="o">,</span> <span class="nc">InvocationTargetException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">c</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">invoke</span><span class="o">(</span><span class="k">new</span> <span class="nc">Main</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">NoSuchMethodException</span><span class="o">,</span> <span class="nc">InvocationTargetException</span><span class="o">,</span> <span class="nc">IllegalAccessException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">ref</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="s">"instanceMethod"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用<code class="language-plaintext highlighter-rouge">实例::实例方法</code>方法引用，则没有隐含参数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">instanceMethod</span><span class="o">(){</span>
        <span class="k">return</span> <span class="s">"123"</span><span class="o">;</span>
    <span class="o">}</span>
   <span class="kd">static</span> <span class="nc">String</span> <span class="nf">call</span><span class="o">(</span><span class="no">I</span> <span class="n">i</span><span class="o">){</span>
        <span class="k">return</span>  <span class="n">i</span><span class="o">.</span><span class="na">func</span><span class="o">();</span>
   <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Main</span> <span class="n">main</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Main</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="nl">main:</span><span class="o">:</span><span class="n">instanceMethod</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">interface</span> <span class="nc">I</span><span class="o">{</span>
    <span class="nc">String</span> <span class="nf">func</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这种方法引用不需要接收者参数，因为实例本身已经确定了。</p>

<h3 id="无参引用调用">无参引用调用</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>常用接口</th>
      <th>代码</th>
      <th>等效调用</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>静态方法</td>
      <td>Runnable</td>
      <td><code class="language-plaintext highlighter-rouge">Runnable r=Main::staticMethod;r.run();</code></td>
      <td><code class="language-plaintext highlighter-rouge">Main.staticMethod();</code></td>
    </tr>
    <tr>
      <td>实例方法</td>
      <td>Runnable</td>
      <td><code class="language-plaintext highlighter-rouge">Runnable r=main::instanceMethod;r.run();</code></td>
      <td><code class="language-plaintext highlighter-rouge">main.instanceMethod();</code></td>
    </tr>
    <tr>
      <td>构造方法</td>
      <td>Supplier</td>
      <td><code class="language-plaintext highlighter-rouge">Supplier&lt;Main&gt; s=Main::new;s.get();</code></td>
      <td><code class="language-plaintext highlighter-rouge">new Main();</code></td>
    </tr>
    <tr>
      <td>数组</td>
      <td>IntFunction</td>
      <td><code class="language-plaintext highlighter-rouge">IntFunction&lt;Main[]&gt; g=Main[]::new;g.apply(5);</code></td>
      <td><code class="language-plaintext highlighter-rouge">new Main[5];</code></td>
    </tr>
  </tbody>
</table>

<p>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.IntFunction</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Supplier</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">staticMethod</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"静态方法"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">instanceMethod</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实例方法"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="nf">Main</span><span class="o">()</span> <span class="o">{</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"构造方法"</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 静态方法引用</span>
        <span class="nc">Runnable</span> <span class="n">r1</span> <span class="o">=</span> <span class="nl">Main:</span><span class="o">:</span><span class="n">staticMethod</span><span class="o">;</span><span class="c1">//只能调用无参</span>
        <span class="n">r1</span><span class="o">.</span><span class="na">run</span><span class="o">();</span><span class="c1">//Main.staticMethod()</span>
        <span class="c1">// 实例方法引用</span>
        <span class="nc">Main</span> <span class="n">main</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Main</span><span class="o">();</span>
        <span class="nc">Runnable</span> <span class="n">r2</span> <span class="o">=</span> <span class="nl">main:</span><span class="o">:</span><span class="n">instanceMethod</span><span class="o">;</span><span class="c1">//只能调用无参</span>
        <span class="n">r2</span><span class="o">.</span><span class="na">run</span><span class="o">();</span><span class="c1">//main.instanceMethod()</span>
        <span class="c1">// 构造方法引用</span>
        <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Main</span><span class="o">&gt;</span> <span class="n">supplier</span> <span class="o">=</span> <span class="nl">Main:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span><span class="c1">//只能调用无参</span>
        <span class="nc">Main</span> <span class="n">main2</span> <span class="o">=</span> <span class="n">supplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span><span class="c1">//new Main()</span>
        <span class="c1">// 数组构造方法引用</span>
        <span class="nc">IntFunction</span><span class="o">&lt;</span><span class="nc">Main</span><span class="o">[]&gt;</span> <span class="n">generator</span> <span class="o">=</span> <span class="nc">Main</span><span class="o">[]::</span><span class="k">new</span><span class="o">;</span><span class="c1">//只能调用无参</span>
        <span class="nc">Main</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">generator</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span><span class="c1">//new Main[5]</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h3 id="带参引用调用无返回值">带参引用调用（无返回值）</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>接口</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>无参方法</td>
      <td>Runnable</td>
      <td><code class="language-plaintext highlighter-rouge">run()</code>调用</td>
    </tr>
    <tr>
      <td>一个参数</td>
      <td>Consumer<code class="language-plaintext highlighter-rouge">&lt;T&gt;</code></td>
      <td><code class="language-plaintext highlighter-rouge">accept(T)</code>调用</td>
    </tr>
    <tr>
      <td>两个参数</td>
      <td>BiConsumer&lt;T,U&gt;</td>
      <td><code class="language-plaintext highlighter-rouge">accept(T,U)</code>调用</td>
    </tr>
    <tr>
      <td>更多个参数</td>
      <td>自定义函数式接口，并使用<code class="language-plaintext highlighter-rouge">@FunctionalInterface</code></td>
      <td>调用随便</td>
    </tr>
  </tbody>
</table>

<p>实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.BiConsumer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">staticMethod</span><span class="o">(</span><span class="nc">Object</span> <span class="o">...</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"静态方法:"</span><span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 方法引用</span>
        <span class="nc">Runnable</span> <span class="n">a</span><span class="o">=</span><span class="nl">Main:</span><span class="o">:</span><span class="n">staticMethod</span><span class="o">;</span>
        <span class="n">a</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
        
        <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="nl">Main:</span><span class="o">:</span><span class="n">staticMethod</span><span class="o">;</span>
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">);</span>
        
        <span class="nc">BiConsumer</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">b</span><span class="o">=</span><span class="nl">Main:</span><span class="o">:</span><span class="n">staticMethod</span><span class="o">;</span>
        <span class="n">b</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">"123"</span><span class="o">,</span><span class="s">"123"</span><span class="o">);</span>
        
        <span class="n">自定义接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">t</span><span class="o">=</span><span class="nl">Main:</span><span class="o">:</span><span class="n">staticMethod</span><span class="o">;</span>
        <span class="n">t</span><span class="o">.</span><span class="na">随便</span><span class="o">(</span><span class="s">"123"</span><span class="o">,</span><span class="s">"345"</span><span class="o">,</span><span class="s">"456"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">自定义接口</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">U</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="n">随便</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">,</span> <span class="no">U</span> <span class="n">u</span><span class="o">,</span> <span class="no">V</span> <span class="n">v</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h3 id="带参引用调用构造方法有返回值">带参引用调用构造方法（有返回值）</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>接口</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>无参方法</td>
      <td>Supplier<类名></类名></td>
      <td><code class="language-plaintext highlighter-rouge">get()</code>调用</td>
    </tr>
    <tr>
      <td>一个参数</td>
      <td>Function&lt;T,类名&gt;</td>
      <td><code class="language-plaintext highlighter-rouge">apply(T)</code>调用</td>
    </tr>
    <tr>
      <td>两个参数</td>
      <td>BiFunction&lt;T,U,类名&gt;</td>
      <td><code class="language-plaintext highlighter-rouge">apply(T,U)</code>调用</td>
    </tr>
    <tr>
      <td>更多个参数</td>
      <td>自定义函数式接口，并使用<code class="language-plaintext highlighter-rouge">@FunctionalInterface</code></td>
      <td>调用随便</td>
    </tr>
  </tbody>
</table>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Main</span><span class="o">(</span><span class="nc">Object</span> <span class="o">...</span><span class="na">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"构造方法："</span><span class="o">+</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 构造方法引用</span>
        <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Main</span><span class="o">&gt;</span> <span class="n">supplier</span> <span class="o">=</span> <span class="nl">Main:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>
        <span class="nc">Main</span> <span class="n">main1</span> <span class="o">=</span> <span class="n">supplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>

        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="n">constructor</span> <span class="o">=</span> <span class="nl">Main:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>
        <span class="nc">Main</span> <span class="n">main2</span> <span class="o">=</span> <span class="n">constructor</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"你好"</span><span class="o">);</span>

        <span class="nc">BiFunction</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="n">constructor2</span> <span class="o">=</span> <span class="nl">Main:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>
        <span class="nc">Main</span> <span class="n">main3</span> <span class="o">=</span> <span class="n">constructor2</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"你好"</span><span class="o">);</span>

        <span class="n">自定义接口</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">Boolean</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="n">constructor3</span> <span class="o">=</span> <span class="nl">Main:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>
        <span class="nc">Main</span> <span class="n">main4</span> <span class="o">=</span> <span class="n">constructor3</span><span class="o">.</span><span class="na">随便</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"你好"</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
        <span class="c1">//柯里化</span>
        <span class="n">自定义接口</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">Boolean</span><span class="o">,</span> <span class="n">自定义接口</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">Boolean</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;&gt;</span> <span class="n">cr4</span> <span class="o">=</span>
                <span class="o">(</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">,</span> <span class="n">v3</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">v4</span><span class="o">,</span> <span class="n">v5</span><span class="o">,</span> <span class="n">v6</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">Main</span><span class="o">(</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">,</span> <span class="n">v3</span><span class="o">,</span> <span class="n">v4</span><span class="o">,</span> <span class="n">v5</span><span class="o">,</span> <span class="n">v6</span><span class="o">);</span>
        <span class="nc">Main</span> <span class="n">main5</span> <span class="o">=</span> <span class="n">cr4</span><span class="o">.</span><span class="na">随便</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"你好"</span><span class="o">,</span> <span class="kc">true</span><span class="o">).</span><span class="na">随便</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"你好"</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">自定义接口</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">U</span><span class="o">,</span> <span class="no">V</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">R</span> <span class="n">随便</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">,</span> <span class="no">U</span> <span class="n">u</span><span class="o">,</span> <span class="no">V</span> <span class="n">v</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h3 id="展开一个mainnew">展开一个<code class="language-plaintext highlighter-rouge">Main::new;</code></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Main</span><span class="o">(</span><span class="nc">Object</span> <span class="o">...</span><span class="na">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"构造方法："</span><span class="o">+</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 方法引用</span>
        <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Main</span><span class="o">&gt;</span> <span class="n">f1</span><span class="o">=</span><span class="nl">Main:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>
        <span class="c1">// Lambda</span>
        <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="n">f2</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Main</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">};</span>
        <span class="c1">// 匿名内部类</span>
        <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="n">f3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Main</span> <span class="n">方法</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">Main</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
        <span class="c1">// 普通内部类</span>
        <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="n">f4</span> <span class="o">=</span><span class="k">new</span> <span class="nc">Main</span><span class="o">().</span><span class="na">new</span> <span class="no">A</span><span class="o">();</span>
        <span class="c1">// 静态内部类</span>
        <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="n">f5</span> <span class="o">=</span><span class="k">new</span> <span class="nc">Main</span><span class="o">.</span><span class="na">B</span><span class="o">();</span>
        <span class="c1">// 外部类</span>
        <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="n">f6</span> <span class="o">=</span><span class="k">new</span> <span class="no">C</span><span class="o">();</span>

        <span class="n">f1</span><span class="o">.</span><span class="na">方法</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">f1</span><span class="o">.</span><span class="na">getClass</span><span class="o">()));</span>
        <span class="n">f2</span><span class="o">.</span><span class="na">方法</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">f2</span><span class="o">.</span><span class="na">getClass</span><span class="o">()));</span>
        <span class="n">f3</span><span class="o">.</span><span class="na">方法</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">f3</span><span class="o">.</span><span class="na">getClass</span><span class="o">()));</span>
        <span class="n">f4</span><span class="o">.</span><span class="na">方法</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">f4</span><span class="o">.</span><span class="na">getClass</span><span class="o">()));</span>
        <span class="n">f5</span><span class="o">.</span><span class="na">方法</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">f5</span><span class="o">.</span><span class="na">getClass</span><span class="o">()));</span>
        <span class="n">f6</span><span class="o">.</span><span class="na">方法</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">f6</span><span class="o">.</span><span class="na">getClass</span><span class="o">()));</span>
    <span class="o">}</span>
    <span class="kd">class</span> <span class="nc">A</span> <span class="kd">implements</span> <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Main</span> <span class="n">方法</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Main</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">B</span> <span class="kd">implements</span> <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Main</span> <span class="n">方法</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Main</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">C</span> <span class="kd">implements</span> <span class="n">接口</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Main</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Main</span> <span class="n">方法</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Main</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">接口</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">R</span> <span class="n">方法</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">构造方法</span><span class="err">：</span><span class="o">[]</span>
<span class="n">构造方法</span><span class="err">：</span><span class="o">[</span><span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">Main</span><span class="err">$</span><span class="n">$Lambda</span><span class="err">$</span><span class="mi">14</span><span class="o">/</span><span class="mh">0x00000008000c0b40</span><span class="o">]</span>
<span class="n">构造方法</span><span class="err">：</span><span class="o">[</span><span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">Main</span><span class="err">$</span><span class="n">$Lambda</span><span class="err">$</span><span class="mi">15</span><span class="o">/</span><span class="mh">0x00000008000c0d80</span><span class="o">]</span>
<span class="n">构造方法</span><span class="err">：</span><span class="o">[</span><span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">Main</span><span class="err">$</span><span class="mi">1</span><span class="o">]</span>
<span class="n">构造方法</span><span class="err">：</span><span class="o">[</span><span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">Main</span><span class="n">$A</span><span class="o">]</span>
<span class="n">构造方法</span><span class="err">：</span><span class="o">[</span><span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">Main</span><span class="n">$B</span><span class="o">]</span>
<span class="n">构造方法</span><span class="err">：</span><span class="o">[</span><span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">aotmd</span><span class="o">.</span><span class="na">C</span><span class="o">]</span>
</code></pre></div></div>

<p>从上到下，越来越易懂。</p>

<h2 id="stream">Stream</h2>

<p>Java从8开始，不但引入了Lambda表达式，还引入了一个全新的<strong>流式</strong>API：Stream API。它位于<code class="language-plaintext highlighter-rouge">java.util.stream</code>包中。</p>

<p>这个<code class="language-plaintext highlighter-rouge">Stream</code>不同于<code class="language-plaintext highlighter-rouge">java.io</code>的<code class="language-plaintext highlighter-rouge">InputStream</code>和<code class="language-plaintext highlighter-rouge">OutputStream</code>，它代表的是<strong>任意</strong>Java对象的序列。两者对比如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left"><code class="language-plaintext highlighter-rouge">java.io</code></th>
      <th><code class="language-plaintext highlighter-rouge">java.util.stream</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">存储</td>
      <td style="text-align: left">顺序读写的<code class="language-plaintext highlighter-rouge">byte</code>或<code class="language-plaintext highlighter-rouge">char</code></td>
      <td>顺序输出的任意Java对象实例</td>
    </tr>
    <tr>
      <td style="text-align: left">用途</td>
      <td style="text-align: left">序列化至文件或网络</td>
      <td>内存计算／业务逻辑</td>
    </tr>
  </tbody>
</table>

<p>这个<code class="language-plaintext highlighter-rouge">Stream</code>和<code class="language-plaintext highlighter-rouge">List</code>也不一样，<code class="language-plaintext highlighter-rouge">List</code>存储的每个元素都是已经存储在内存中的某个Java对象，而<code class="language-plaintext highlighter-rouge">Stream</code>输出的元素可能并没有预先存储在内存中，而是<strong>实时计算</strong>出来的。<code class="language-plaintext highlighter-rouge">List</code>的用途是操作一组已存在的Java对象，而<code class="language-plaintext highlighter-rouge">Stream</code>实现的是<strong>惰性计算</strong>，两者对比如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left"><code class="language-plaintext highlighter-rouge">java.util.List</code></th>
      <th><code class="language-plaintext highlighter-rouge">java.util.stream</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">元素</td>
      <td style="text-align: left">已分配并存储在内存</td>
      <td>可能未分配，实时计算</td>
    </tr>
    <tr>
      <td style="text-align: left">用途</td>
      <td style="text-align: left">操作一组已存在的Java对象</td>
      <td>惰性计算</td>
    </tr>
  </tbody>
</table>

<p>如果要表示一个全体自然数的集合，显然，用<code class="language-plaintext highlighter-rouge">List</code>是不可能写出来的，因为自然数是无限的，内存再大也没法放到<code class="language-plaintext highlighter-rouge">List</code>中。但是，用<code class="language-plaintext highlighter-rouge">Stream</code>可以做到：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">BigInteger</span><span class="o">&gt;</span> <span class="n">naturals</span> <span class="o">=</span> <span class="n">createNaturalStream</span><span class="o">();</span> <span class="c1">// 全体自然数</span>
</code></pre></div></div>

<p>先不考虑<code class="language-plaintext highlighter-rouge">createNaturalStream()</code>方法是如何实现。</p>

<p>可以对每个自然数做一个平方，这样就把这个<code class="language-plaintext highlighter-rouge">Stream</code>转换成了另一个<code class="language-plaintext highlighter-rouge">Stream</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">BigInteger</span><span class="o">&gt;</span> <span class="n">naturals</span> <span class="o">=</span> <span class="n">createNaturalStream</span><span class="o">();</span> <span class="c1">// 全体自然数</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">BigInteger</span><span class="o">&gt;</span> <span class="n">streamNxN</span> <span class="o">=</span> <span class="n">naturals</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">n</span><span class="o">));</span> <span class="c1">// 全体自然数的平方</span>
</code></pre></div></div>

<p>因为这个<code class="language-plaintext highlighter-rouge">streamNxN</code>也有无限多个元素，要打印它，必须首先把无限多个元素变成有限个元素，可以用<code class="language-plaintext highlighter-rouge">limit()</code>方法截取前100个元素，最后用<code class="language-plaintext highlighter-rouge">forEach()</code>处理每个元素，这样，就打印出了前100个自然数的平方：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">BigInteger</span><span class="o">&gt;</span> <span class="n">naturals</span> <span class="o">=</span> <span class="n">createNaturalStream</span><span class="o">();</span>
<span class="n">naturals</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="c1">// 1, 4, 9, 16, 25...</span>
        <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
        <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<p>它可以“存储”有限个或无限个元素。这里的存储打了个引号，是因为元素有可能已经全部存储在内存中，也有可能是根据需要实时计算出来的。</p>

<p><code class="language-plaintext highlighter-rouge">Stream</code>的另一个特点是，一个<code class="language-plaintext highlighter-rouge">Stream</code>可以轻易地转换为另一个<code class="language-plaintext highlighter-rouge">Stream</code>，而不是修改原<code class="language-plaintext highlighter-rouge">Stream</code>本身。</p>

<p>最后，真正的计算通常发生在最后结果的获取，也就是惰性计算。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">BigInteger</span><span class="o">&gt;</span> <span class="n">naturals</span> <span class="o">=</span> <span class="n">createNaturalStream</span><span class="o">();</span> <span class="c1">// 不计算</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">BigInteger</span><span class="o">&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">naturals</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">BigInteger:</span><span class="o">:</span><span class="n">multiply</span><span class="o">);</span> <span class="c1">// 不计算</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">BigInteger</span><span class="o">&gt;</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s2</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="c1">// 不计算</span>
<span class="n">s3</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span> <span class="c1">// 计算</span>
</code></pre></div></div>

<p>惰性计算的特点是：一个<code class="language-plaintext highlighter-rouge">Stream</code>转换为另一个<code class="language-plaintext highlighter-rouge">Stream</code>时，实际上只存储了转换规则，并没有任何计算发生。</p>

<p>例如，创建一个全体自然数的<code class="language-plaintext highlighter-rouge">Stream</code>，不会进行计算，把它转换为上述<code class="language-plaintext highlighter-rouge">s2</code>这个<code class="language-plaintext highlighter-rouge">Stream</code>，也不会进行计算。再把<code class="language-plaintext highlighter-rouge">s2</code>这个无限<code class="language-plaintext highlighter-rouge">Stream</code>转换为<code class="language-plaintext highlighter-rouge">s3</code>这个有限的<code class="language-plaintext highlighter-rouge">Stream</code>，也不会进行计算。只有最后，调用<code class="language-plaintext highlighter-rouge">forEach</code>确实需要<code class="language-plaintext highlighter-rouge">Stream</code>输出的元素时，才进行计算。</p>

<p>通常把<code class="language-plaintext highlighter-rouge">Stream</code>的操作写成链式操作，代码更简洁：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">createNaturalStream</span><span class="o">()</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">BigInteger:</span><span class="o">:</span><span class="n">multiply</span><span class="o">)</span>
    <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
    <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<p>因此，Stream API的基本用法就是：创建一个<code class="language-plaintext highlighter-rouge">Stream</code>，然后做若干次转换，最后调用一个求值方法获取真正计算的结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">createNaturalStream</span><span class="o">()</span> <span class="c1">// 创建Stream</span>
             <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="c1">// 任意个转换</span>
             <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span><span class="o">)</span> <span class="c1">// 任意个转换</span>
             <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="c1">// 任意个转换</span>
             <span class="o">.</span><span class="na">sum</span><span class="o">();</span> <span class="c1">// 最终计算结果</span>
</code></pre></div></div>

<h3 id="创建stream">创建<code class="language-plaintext highlighter-rouge">Stream</code></h3>

<p>要使用<code class="language-plaintext highlighter-rouge">Stream</code>，就必须先创建它，创建<code class="language-plaintext highlighter-rouge">Stream</code>有很多种方法。</p>

<h4 id="streamof"><code class="language-plaintext highlighter-rouge">Stream.of</code></h4>

<p>创建<code class="language-plaintext highlighter-rouge">Stream</code>最简单的方式是直接用<code class="language-plaintext highlighter-rouge">Stream.of()</code>静态方法，传入可变参数即创建了一个能输出确定元素的<code class="language-plaintext highlighter-rouge">Stream</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">,</span> <span class="s">"D"</span><span class="o">);</span>
<span class="c1">// forEach()方法相当于内部循环调用，</span>
<span class="c1">// 可传入符合Consumer接口的void accept(T t)的方法引用：</span>
<span class="n">stream</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="基于数组或集合">基于数组或集合</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">{</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">};</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stream1</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
<span class="n">stream1</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"X"</span><span class="o">,</span> <span class="s">"Y"</span><span class="o">,</span> <span class="s">"Z"</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stream2</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">();</span>
<span class="n">stream2</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<p>把数组变成<code class="language-plaintext highlighter-rouge">Stream</code>使用<code class="language-plaintext highlighter-rouge">Arrays.stream()</code>方法。对于<code class="language-plaintext highlighter-rouge">Collection</code>（<code class="language-plaintext highlighter-rouge">List</code>、<code class="language-plaintext highlighter-rouge">Set</code>、<code class="language-plaintext highlighter-rouge">Queue</code>等），直接调用<code class="language-plaintext highlighter-rouge">stream()</code>方法就可以获得<code class="language-plaintext highlighter-rouge">Stream</code>。</p>

<p>上述创建<code class="language-plaintext highlighter-rouge">Stream</code>的方法都是把一个现有的序列变为<code class="language-plaintext highlighter-rouge">Stream</code>，它的元素是固定的。</p>

<h4 id="streamiterate"><code class="language-plaintext highlighter-rouge">Stream.iterate</code></h4>

<p>创建<code class="language-plaintext highlighter-rouge">Stream</code>还可以通过<code class="language-plaintext highlighter-rouge">Stream.generate()</code>方法，它需要传入一个<code class="language-plaintext highlighter-rouge">Supplier</code>接口对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sp</span><span class="o">);</span>
</code></pre></div></div>

<p>基于<code class="language-plaintext highlighter-rouge">Supplier</code>创建的<code class="language-plaintext highlighter-rouge">Stream</code>会不断调用<code class="language-plaintext highlighter-rouge">Supplier.get()</code>方法来不断产生下一个元素，这种<code class="language-plaintext highlighter-rouge">Stream</code>保存的不是元素，而是算法，它可以用来表示<strong>无限序列</strong>。</p>

<p>例如，编写一个能不断生成自然数的<code class="language-plaintext highlighter-rouge">Supplier</code>，它的代码非常简单，每次调用<code class="language-plaintext highlighter-rouge">get()</code>方法，就生成下一个自然数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">natual</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">new</span> <span class="nc">Supplier</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
    <span class="kt">long</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">n</span><span class="o">++;</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="c1">// 注意：无限序列必须先变成有限序列再打印:</span>
<span class="n">natual</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<p>不过它并不能代表所有自然数，因为<code class="language-plaintext highlighter-rouge">long</code>是有极限的,最大<code class="language-plaintext highlighter-rouge">2^63-1</code>。如果用<code class="language-plaintext highlighter-rouge">List</code>表示，即便在<code class="language-plaintext highlighter-rouge">int</code>范围内，也会占用巨大的内存，而<code class="language-plaintext highlighter-rouge">Stream</code>几乎不占用空间，因为每个元素都是实时计算出来的，用的时候再算。</p>

<p>对于<strong>无限序列</strong>，如果直接调用<code class="language-plaintext highlighter-rouge">forEach()</code>或者<code class="language-plaintext highlighter-rouge">count()</code>这些最终求值操作，会进入死循环，因为永远无法计算完这个序列，所以正确的方法是先把无限序列变成有限序列，例如，用<strong><code class="language-plaintext highlighter-rouge">limit()</code></strong>方法可以截取前面若干个元素，这样就变成了一个有限序列，对这个有限序列调用<code class="language-plaintext highlighter-rouge">forEach()</code>或者<code class="language-plaintext highlighter-rouge">count()</code>操作就没有问题。</p>

<p><code class="language-plaintext highlighter-rouge">BigInteger</code>虽然没有极限，但<code class="language-plaintext highlighter-rouge">limit</code>方法只能传入<code class="language-plaintext highlighter-rouge">long</code>型，因此改成<code class="language-plaintext highlighter-rouge">BigInteger</code>，也没用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">BigInteger</span><span class="o">&gt;</span> <span class="n">natual</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">new</span> <span class="nc">Supplier</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">BigInteger</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">BigInteger</span><span class="o">.</span><span class="na">ZERO</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">BigInteger</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">BigInteger</span> <span class="n">result</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">BigInteger</span><span class="o">.</span><span class="na">ONE</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="n">natual</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="streamiterate-1"><code class="language-plaintext highlighter-rouge">Stream.iterate</code></h4>

<p><code class="language-plaintext highlighter-rouge">Stream.iterate()</code>方法的方法签名如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">iterate</span><span class="o">(</span><span class="no">T</span> <span class="n">seed</span><span class="o">,</span> <span class="nc">UnaryOperator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">)</span>
</code></pre></div></div>

<p>其中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">T</code>：流中元素的类型。</li>
  <li><code class="language-plaintext highlighter-rouge">seed</code>：初始值，即流的第一个元素。</li>
  <li><code class="language-plaintext highlighter-rouge">f</code>：生成流中后续元素的函数，它接受一个参数（前一个元素）并返回一个结果（下一个元素）。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Stream.iterate()</code>方法会生成一个无限长度的流，从初始值开始，根据指定的函数生成后续的元素。要使这种流变为有限流，通常需要使用<code class="language-plaintext highlighter-rouge">limit()</code>方法来限制流的长度。</p>

<p><code class="language-plaintext highlighter-rouge">UnaryOperator&lt;T&gt;</code>的方法签名如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UnaryOperator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="o">{}</span>
</code></pre></div></div>

<p>而<code class="language-plaintext highlighter-rouge">Function&lt;T, R&gt;</code>是这样的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因此<code class="language-plaintext highlighter-rouge">UnaryOperator&lt;T&gt;</code>，实际上就是这这样的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UnaryOperator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">T</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">iterate</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">2</span><span class="o">);</span>
</code></pre></div></div>

<p>斐波那契：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">.</span><span class="na">iterate</span><span class="o">(</span><span class="k">new</span> <span class="kt">long</span><span class="o">[]{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="n">f</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[]{</span><span class="n">f</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">f</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">f</span><span class="o">[</span><span class="mi">1</span><span class="o">]})</span>
        <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
        <span class="o">.</span><span class="na">mapToLong</span><span class="o">(</span><span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span>
        <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">" "</span><span class="o">));</span>
</code></pre></div></div>

<h4 id="其他方法">其他方法</h4>

<p>创建<code class="language-plaintext highlighter-rouge">Stream</code>的第三种方法是通过一些API提供的接口，直接获得<code class="language-plaintext highlighter-rouge">Stream</code>。</p>

<p>例如，<code class="language-plaintext highlighter-rouge">Files</code>类的<code class="language-plaintext highlighter-rouge">lines()</code>方法可以把一个文件变成一个<code class="language-plaintext highlighter-rouge">Stream</code>，每个元素代表文件的一行内容：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">lines</span><span class="o">(</span><span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"1.xml"</span><span class="o">)))</span> <span class="o">{</span>
    <span class="n">lines</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>此方法对于按行遍历文本文件十分有用。</p>

<p>正则表达式的<code class="language-plaintext highlighter-rouge">Pattern</code>对象有一个<code class="language-plaintext highlighter-rouge">splitAsStream()</code>方法，可以直接把一个长字符串分割成<code class="language-plaintext highlighter-rouge">Stream</code>序列而不是数组：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"\\s+"</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">splitAsStream</span><span class="o">(</span><span class="s">"The quick brown fox jumps over the lazy dog"</span><span class="o">);</span>
<span class="n">s</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="基本类型">基本类型</h4>

<p>因为Java的泛型不支持基本类型，所以无法用<code class="language-plaintext highlighter-rouge">Stream&lt;int&gt;</code>这样的类型，会发生编译错误。为了保存<code class="language-plaintext highlighter-rouge">int</code>，只能使用<code class="language-plaintext highlighter-rouge">Stream&lt;Integer&gt;</code>，但这样会产生频繁的装箱、拆箱操作。为了提高效率，Java标准库提供了<code class="language-plaintext highlighter-rouge">IntStream</code>、<code class="language-plaintext highlighter-rouge">LongStream</code>和<code class="language-plaintext highlighter-rouge">DoubleStream</code>这三种使用基本类型的<code class="language-plaintext highlighter-rouge">Stream</code>，它们的使用方法和泛型<code class="language-plaintext highlighter-rouge">Stream</code>没有大的区别，设计这三个<code class="language-plaintext highlighter-rouge">Stream</code>的目的是提高运行效率：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 将int[]数组变为IntStream:</span>
<span class="nc">IntStream</span> <span class="n">is</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="o">});</span>
<span class="c1">// 将Stream&lt;String&gt;转换为LongStream:</span>
<span class="nc">LongStream</span> <span class="n">ls</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"1"</span><span class="o">,</span> <span class="s">"2"</span><span class="o">,</span> <span class="s">"3"</span><span class="o">).</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToLong</span><span class="o">(</span><span class="nl">Long:</span><span class="o">:</span><span class="n">parseLong</span><span class="o">);</span>

<span class="n">is</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="n">ls</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="map方法"><code class="language-plaintext highlighter-rouge">map</code>方法</h3>

<p><code class="language-plaintext highlighter-rouge">Stream.map()</code>是<code class="language-plaintext highlighter-rouge">Stream</code>最常用的一个转换方法，它<strong>把一个<code class="language-plaintext highlighter-rouge">Stream</code>转换为另一个<code class="language-plaintext highlighter-rouge">Stream</code></strong>。</p>

<p><code class="language-plaintext highlighter-rouge">map</code>操作，就是把一种操作运算，映射到一个序列的<strong>每一个元素上</strong>。例如，对<code class="language-plaintext highlighter-rouge">x</code>计算它的平方，可以使用函数<code class="language-plaintext highlighter-rouge">f(x) = x * x</code>。我们把这个函数映射到一个序列1，2，3，4，5上，就得到了另一个序列1，4，9，16，25。传入的方法需符合<code class="language-plaintext highlighter-rouge">Function</code>接口</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span><span class="o">);</span>
<span class="n">s2</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Stream.map()</code> 方法还有有以下几种变种：</p>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">mapToInt(ToIntFunction&lt;? super T&gt; mapper)</code></strong>：对流中的每个元素执行指定的映射函数，将结果映射为一个 <code class="language-plaintext highlighter-rouge">IntStream</code>。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mapToLong(ToLongFunction&lt;? super T&gt; mapper)</code>：对流中的每个元素执行指定的映射函数，将结果映射为一个 <code class="language-plaintext highlighter-rouge">LongStream</code>。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</code>：对流中的每个元素执行指定的映射函数，将结果映射为一个 <code class="language-plaintext highlighter-rouge">DoubleStream</code>。</p>
  </li>
</ol>

<p>这些变种方法允许你根据需要将流中的元素映射为不同类型的流，例如，将流中的对象映射为整数流、长整型流或双精度浮点数流。</p>

<h3 id="filter方法"><code class="language-plaintext highlighter-rouge">Filter</code>方法</h3>

<p><code class="language-plaintext highlighter-rouge">Stream.filter()</code>是<code class="language-plaintext highlighter-rouge">Stream</code>的另一个常用<strong>转换</strong>方法。</p>

<p><code class="language-plaintext highlighter-rouge">filter()</code>操作，就是对一个<code class="language-plaintext highlighter-rouge">Stream</code>的所有元素进行判断，不满足条件的就被“滤掉”了，剩下的满足条件的元素就构成了一个新的<code class="language-plaintext highlighter-rouge">Stream</code>。</p>

<p><code class="language-plaintext highlighter-rouge">filter()</code>方法接收的对象是<code class="language-plaintext highlighter-rouge">Predicate</code>接口对象，它定义了一个<code class="language-plaintext highlighter-rouge">test()</code>方法，负责判断元素是否符合条件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Predicate</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// 判断元素t是否符合条件:</span>
    <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">IntStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Main:</span><span class="o">:</span><span class="n">singular</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">singular</span><span class="o">(</span><span class="kt">int</span> <span class="n">t</span><span class="o">){</span>
        <span class="k">return</span>  <span class="n">t</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>对对象操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">persons</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"小明"</span><span class="o">,</span> <span class="mi">88</span><span class="o">),</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"小黑"</span><span class="o">,</span> <span class="mi">62</span><span class="o">),</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"小白"</span><span class="o">,</span> <span class="mi">45</span><span class="o">),</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"小黄"</span><span class="o">,</span> <span class="mi">78</span><span class="o">),</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"小红"</span><span class="o">,</span> <span class="mi">99</span><span class="o">),</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"小林"</span><span class="o">,</span> <span class="mi">58</span><span class="o">));</span>
        <span class="n">persons</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span>
                <span class="n">person</span> <span class="o">-&gt;</span> <span class="n">person</span><span class="o">.</span><span class="na">score</span> <span class="o">&gt;=</span> <span class="mi">60</span>
            <span class="o">).</span><span class="na">map</span><span class="o">(</span>
                <span class="n">person</span> <span class="o">-&gt;</span> <span class="n">person</span><span class="o">.</span><span class="na">name</span>
            <span class="o">).</span><span class="na">forEach</span><span class="o">(</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span>
            <span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">score</span><span class="o">;</span>

    <span class="nc">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">score</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">score</span> <span class="o">=</span> <span class="n">score</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="reduce方法"><code class="language-plaintext highlighter-rouge">reduce</code>方法</h3>

<p><code class="language-plaintext highlighter-rouge">Stream.reduce()</code>是<code class="language-plaintext highlighter-rouge">Stream</code>的一个聚合方法，可以把一个<code class="language-plaintext highlighter-rouge">Stream</code>的所有元素按照聚合函数聚合成一个结果。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span>
    <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="mi">0</span><span class="o">,(</span><span class="n">acc</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">acc</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span> <span class="c1">// 45</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">reduce</code>的参数<code class="language-plaintext highlighter-rouge">identity</code>表示初始值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">T</span> <span class="nf">reduce</span><span class="o">(</span><span class="no">T</span> <span class="n">identity</span><span class="o">,</span> <span class="nc">BinaryOperator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BinaryOperator</code>接口，定义了一个<code class="language-plaintext highlighter-rouge">apply()</code>方法，负责把上次累加的结果和本次的元素 进行运算，并返回累加的结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BinaryOperator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// Bi操作：两个输入，一个输出</span>
    <span class="no">T</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">,</span> <span class="no">T</span> <span class="n">u</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>换成普通形式：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
<span class="kt">int</span> <span class="n">acc</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">acc</span><span class="o">=</span><span class="n">acc</span> <span class="o">+</span> <span class="n">n</span><span class="o">;</span>
<span class="o">}</span>
<span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="n">acc</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span> <span class="c1">// 45</span>
</code></pre></div></div>

<p>如果去掉初始值<code class="language-plaintext highlighter-rouge">identity</code>，会得到一个<code class="language-plaintext highlighter-rouge">Optional&lt;Integer&gt;</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">sum</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span>
    <span class="o">.</span><span class="na">reduce</span><span class="o">((</span><span class="n">acc</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">acc</span> <span class="o">+</span> <span class="n">n</span><span class="o">);</span>
<span class="k">if</span> <span class="o">(</span><span class="n">sum</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因为<code class="language-plaintext highlighter-rouge">Stream</code>的元素有可能是0个，这样就没法调用<code class="language-plaintext highlighter-rouge">reduce()</code>的聚合函数了，因此会返回<code class="language-plaintext highlighter-rouge">Optional</code>对象，需要进一步判断结果是否存在。</p>

<p>注意：计算<strong>求积</strong>时，初始值必须设置为<code class="language-plaintext highlighter-rouge">1</code>。</p>

<hr />

<p>将配置文件的每一行配置通过<code class="language-plaintext highlighter-rouge">map()</code>和<code class="language-plaintext highlighter-rouge">reduce()</code>操作聚合成一个<code class="language-plaintext highlighter-rouge">Map&lt;String, String&gt;</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">props</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"profile=native"</span><span class="o">,</span> <span class="s">"debug=true"</span><span class="o">,</span> <span class="s">"logging=warn"</span><span class="o">,</span> <span class="s">"interval=500"</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
        <span class="c1">// 把k=v转换为Map[k]=v:</span>
        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">kv</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">ss</span> <span class="o">=</span> <span class="n">kv</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"="</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">ss</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">ss</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span><span class="c1">//Java8 及以下版本:Collections.singletonMap(ss[0], ss[1]);</span>
        <span class="o">})</span>
        <span class="c1">// 把所有Map聚合到一个Map:</span>
        <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;(),</span> <span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="n">kv</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">m</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">kv</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">m</span><span class="o">;</span>
        <span class="o">});</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
</code></pre></div></div>

<p>一些<code class="language-plaintext highlighter-rouge">reduce</code>的特例：</p>

<p><code class="language-plaintext highlighter-rouge">min(Comparator&lt;? super T&gt; comparator)</code>：返回流中的最小元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">minElement</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">min</span><span class="o">((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">b</span><span class="o">));</span>
</code></pre></div></div>

<p>等于：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerStream</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">minElement</span> <span class="o">=</span> <span class="n">integerStream</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">);</span>
<span class="n">minElement</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerStream2</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">minElement2</span> <span class="o">=</span> <span class="n">integerStream2</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span>
        <span class="nc">BinaryOperator</span><span class="o">.</span><span class="na">minBy</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">)</span>
<span class="o">);</span>
<span class="n">minElement2</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">max(Comparator&lt;? super T&gt; comparator)</code>：返回流中的最大元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">maxElement</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">max</span><span class="o">((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">b</span><span class="o">));</span>
</code></pre></div></div>

<p>等于：（把之前的代码里的<code class="language-plaintext highlighter-rouge">min</code>换成<code class="language-plaintext highlighter-rouge">max</code>就行了）</p>

<hr />

<p>针对<code class="language-plaintext highlighter-rouge">IntStream</code>、<code class="language-plaintext highlighter-rouge">LongStream</code>和<code class="language-plaintext highlighter-rouge">DoubleStream</code>，还额外提供了以下聚合方法：</p>

<p><code class="language-plaintext highlighter-rouge">sum()</code>：返回流中元素的和。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">intStream</span><span class="o">.</span><span class="na">sum</span><span class="o">();</span>
</code></pre></div></div>

<p>等于：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">IntStream</span> <span class="n">integerStream</span> <span class="o">=</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">sum1</span> <span class="o">=</span> <span class="n">integerStream</span><span class="o">.</span><span class="na">sum</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum1</span><span class="o">);</span>

<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerStream2</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">sum2</span> <span class="o">=</span> <span class="n">integerStream2</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span>
        <span class="mi">0</span><span class="o">,</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">sum</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum2</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">average()</code>：返回流中元素的平均值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">OptionalDouble</span> <span class="n">average</span> <span class="o">=</span> <span class="n">doubleStream</span><span class="o">.</span><span class="na">average</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="collect方法"><code class="language-plaintext highlighter-rouge">collect</code>方法</h3>

<p>等于：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">IntStream</span> <span class="n">integerStream</span> <span class="o">=</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="nc">OptionalDouble</span> <span class="n">average1</span> <span class="o">=</span> <span class="n">integerStream</span><span class="o">.</span><span class="na">average</span><span class="o">();</span>
<span class="n">average1</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerStream2</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="kt">long</span><span class="o">[]</span> <span class="n">average</span> <span class="o">=</span> <span class="n">integerStream2</span><span class="o">.</span><span class="na">collect</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span>
        <span class="o">(</span><span class="n">ll</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">0</span><span class="o">]++;</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">},</span>
        <span class="o">(</span><span class="n">ll</span><span class="o">,</span> <span class="n">rr</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="n">rr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="n">rr</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">});</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span> <span class="n">average</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">/</span> <span class="n">average</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</code></pre></div></div>

<p>这段代码使用了 <code class="language-plaintext highlighter-rouge">collect</code> 方法来计算整数流的平均值。具体来说，它创建了一个 <code class="language-plaintext highlighter-rouge">long</code> 数组，数组的第一个元素用于存储流中的元素数量，第二个元素用于存储流中所有元素的总和。然后使用三个参数的 <code class="language-plaintext highlighter-rouge">collect</code> 方法来对流进行归约操作，将每个元素的值累加到总和中，并且每处理一个元素，计数器加1。最后，通过将总和除以元素数量得到平均值，并将结果转换为 <code class="language-plaintext highlighter-rouge">double</code> 类型进行打印。具体解释：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">() -&gt; new long[2]</code>：创建一个新的 <code class="language-plaintext highlighter-rouge">long</code> 数组作为收集器的初始值，数组的第一个元素表示元素数量，第二个元素表示元素总和。</li>
  <li><code class="language-plaintext highlighter-rouge">(ll, i) -&gt; { ll[0]++; ll[1] += i; }</code>：累加器函数，用于处理流中的每个元素。对于每个元素，将计数器加1，并将元素的值累加到总和中。</li>
  <li><code class="language-plaintext highlighter-rouge">(ll, rr) -&gt; { ll[0] += rr[0]; ll[1] += rr[1]; }</code>：组合器函数，用于将两个部分结果合并为一个结果。在<strong>并行流</strong>的情况下，可能会有多个部分结果需要<strong>合并</strong>。</li>
  <li>最终得到的 <code class="language-plaintext highlighter-rouge">long[]</code> 数组中，第一个元素表示元素数量，第二个元素表示元素总和。通过将总和除以元素数量，得到平均值。</li>
</ol>

<p>定义：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="no">R</span> <span class="nf">collect</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="n">supplier</span><span class="o">,</span>
              <span class="nc">BiConsumer</span><span class="o">&lt;</span><span class="no">R</span><span class="o">,</span> <span class="o">?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">,</span>
              <span class="nc">BiConsumer</span><span class="o">&lt;</span><span class="no">R</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">combiner</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">collect</code>方法是一个终结操作，用于对流的元素执行可变的归约操作。可变的归约是指归约的结果是一个可变的结果容器，比如一个<code class="language-plaintext highlighter-rouge">ArrayList</code>，在归约过程中通过更新结果的状态来包含元素，而不是通过替换结果来包含元素。</p>

<p>在<strong>并行流</strong>的情况下，<code class="language-plaintext highlighter-rouge">collect</code>操作可以进行并行化，而不需要额外的同步。</p>

<p><code class="language-plaintext highlighter-rouge">collect</code>方法的参数包括：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">supplier</code>：一个函数，用于创建一个新的可变结果容器。对于并行执行，这个函数可能会被多次调用，并且必须每次返回一个新的值。</li>
  <li><code class="language-plaintext highlighter-rouge">accumulator</code>：一个关联的、无副作用、无状态的函数，用于将一个元素合并到结果容器中。</li>
  <li><code class="language-plaintext highlighter-rouge">combiner</code>：一个关联的、无副作用、无状态的函数，用于<strong>合并两个部分结果容器</strong>。这个函数必须与累加器函数兼容，它的作用是将第二个结果容器中的元素合并到第一个结果容器中。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">collect</code>方法的返回值是归约的结果。</p>

<p>JDK 中有许多现有类，其签名非常适合与方法引用一起用作的 <code class="language-plaintext highlighter-rouge">collect()</code>参数。例如，以下内容会将字符串累积成一个 <code class="language-plaintext highlighter-rouge">ArrayList</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">asList</span> <span class="o">=</span> <span class="n">stringStream</span>
     <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nl">ArrayList:</span><span class="o">:</span><span class="k">new</span><span class="o">,</span> <span class="nl">ArrayList:</span><span class="o">:</span><span class="n">add</span><span class="o">,</span><span class="nl">ArrayList:</span><span class="o">:</span><span class="n">addAll</span><span class="o">);</span>
</code></pre></div></div>

<p>以下将获取字符串流并将它们连接成一个字符串：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">concat</span> <span class="o">=</span> <span class="n">stringStream</span>
    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nl">StringBuilder:</span><span class="o">:</span><span class="k">new</span><span class="o">,</span> 
             <span class="nl">StringBuilder:</span><span class="o">:</span><span class="n">append</span><span class="o">,</span>
             <span class="nl">StringBuilder:</span><span class="o">:</span><span class="n">append</span>
            <span class="o">).</span><span class="na">toString</span><span class="o">();</span>
</code></pre></div></div>

<hr />

<p>测试并行合并：无并行：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerStream2</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="kt">long</span><span class="o">[]</span> <span class="n">average</span> <span class="o">=</span> <span class="n">integerStream2</span><span class="o">.</span><span class="na">collect</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span>
        <span class="o">(</span><span class="n">ll</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">0</span><span class="o">]++;</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">},</span>
        <span class="o">(</span><span class="n">ll</span><span class="o">,</span> <span class="n">rr</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"合并操作"</span><span class="o">);</span><span class="c1">//无输出</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="n">rr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="n">rr</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">});</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span> <span class="n">average</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">/</span> <span class="n">average</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</code></pre></div></div>

<p>有并行：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerStream2</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="kt">long</span><span class="o">[]</span> <span class="n">average</span> <span class="o">=</span> <span class="n">integerStream2</span><span class="o">.</span><span class="na">parallel</span><span class="o">().</span><span class="na">collect</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span>
        <span class="o">(</span><span class="n">ll</span><span class="o">,</span> <span class="n">i</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">0</span><span class="o">]++;</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">},</span>
        <span class="o">(</span><span class="n">ll</span><span class="o">,</span> <span class="n">rr</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"合并操作"</span><span class="o">);</span><span class="c1">//输出八次</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="n">rr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="n">ll</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="n">rr</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">});</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span> <span class="n">average</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">/</span> <span class="n">average</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</code></pre></div></div>

<p>正常。</p>

<h3 id="区分转换与聚合">区分转换与聚合</h3>

<p><code class="language-plaintext highlighter-rouge">map()</code>、<code class="language-plaintext highlighter-rouge">filter()</code>、<code class="language-plaintext highlighter-rouge">reduce()</code>。这些操作对<code class="language-plaintext highlighter-rouge">Stream</code>来说可以分为两类，一类是转换操作，即把一个<code class="language-plaintext highlighter-rouge">Stream</code>转换为另一个<code class="language-plaintext highlighter-rouge">Stream</code>，例如<code class="language-plaintext highlighter-rouge">map()</code>和<code class="language-plaintext highlighter-rouge">filter()</code>，另一类是聚合操作，即对<code class="language-plaintext highlighter-rouge">Stream</code>的每个元素进行计算，得到一个确定的结果，例如<code class="language-plaintext highlighter-rouge">reduce()</code>。</p>

<p>区分这两种操作是非常重要的，因为对于<code class="language-plaintext highlighter-rouge">Stream</code>来说，对其进行转换操作并不会触发任何计算。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">new</span> <span class="nc">Supplier</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
    <span class="kt">long</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">n</span><span class="o">++;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"得到参数："</span><span class="o">+</span><span class="n">n</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s1</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s2</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">s4</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s4</span><span class="o">);</span> <span class="c1">// 除此外，无其他输出</span>
</code></pre></div></div>

<p>转换操作只是保存了转换规则，无论对一个<code class="language-plaintext highlighter-rouge">Stream</code>转换多少次，都不会有任何实际计算发生。</p>

<p>而聚合操作则不一样，聚合操作会立刻促使<code class="language-plaintext highlighter-rouge">Stream</code>输出它的每一个元素，并依次纳入计算，以获得最终结果。所以，对一个<code class="language-plaintext highlighter-rouge">Stream</code>进行聚合操作，会触发一系列连锁反应。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">new</span> <span class="nc">Supplier</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
    <span class="kt">long</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">n</span><span class="o">++;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"得到参数："</span><span class="o">+</span><span class="n">n</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s1</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s2</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">s4</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">s4</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="mi">0L</span><span class="o">,</span> <span class="nl">Long:</span><span class="o">:</span><span class="n">sum</span><span class="o">);</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>得到参数：1
得到参数：2
得到参数：3
得到参数：4
得到参数：5
得到参数：6
得到参数：7
得到参数：8
得到参数：9
得到参数：10
</code></pre></div></div>

<p>聚合操作是真正需要从<code class="language-plaintext highlighter-rouge">Stream</code>请求数据的，对一个<code class="language-plaintext highlighter-rouge">Stream</code>做聚合计算后，结果就不是一个<code class="language-plaintext highlighter-rouge">Stream</code>，而是一个其他的Java对象。</p>

<h3 id="转换为其他类型">转换为其他类型</h3>

<p><code class="language-plaintext highlighter-rouge">collect(Collectors.toList())</code>：将流中的元素收集到一个<code class="language-plaintext highlighter-rouge">List</code>中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">collect(Collectors.toSet())</code>：将流中的元素收集到一个<code class="language-plaintext highlighter-rouge">Set</code>中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Set</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toSet</span><span class="o">());</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">collect(Collectors.joining(delimiter))</code>：将流中的元素拼接成一个字符串。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">", "</span><span class="o">));</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">toArray()</code> 是 <code class="language-plaintext highlighter-rouge">Stream</code> 类中的一个聚合方法，用于将流中的元素收集到一个数组中。该方法没有参数，返回一个包含流中所有元素的数组，语法如下：<code class="language-plaintext highlighter-rouge">Object[] toArray();</code>。</p>

<p>如果要将流中的元素收集到特定类型的数组中，可以使用带有 <code class="language-plaintext highlighter-rouge">IntFunction&lt;A[]&gt; generator</code> 参数的重载方法 <code class="language-plaintext highlighter-rouge">toArray(IntFunction&lt;A[]&gt; generator)</code>，其中 <code class="language-plaintext highlighter-rouge">generator</code> 是一个数组生成器函数，用于创建指定类型的数组。例如，如果要将流中的元素收集到一个 <code class="language-plaintext highlighter-rouge">String</code> 数组中，可以这样使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">collect(Collectors.toMap(keyMapper, valueMapper))</code>：将流中的元素收集到一个<code class="language-plaintext highlighter-rouge">Map</code>中，可以指定key和value的映射关系。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"apple"</span><span class="o">,</span> <span class="s">"banana"</span><span class="o">,</span> <span class="s">"cherry"</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">length</span><span class="o">,</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span><span class="c1">//{5=apple, 6=banana, 6=cherry}，注意到键的唯一性。</span>
</code></pre></div></div>

<hr />

<p>示例1：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
<span class="nc">Integer</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">s1</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array</span><span class="o">));</span>

<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">collect</span> <span class="o">=</span> <span class="n">s2</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">collect</span><span class="o">);</span>
</code></pre></div></div>

<p>示例2：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">" 2019-12-31 "</span><span class="o">,</span> <span class="s">"2020 - 01-09 "</span><span class="o">,</span> <span class="s">"2020- 05 - 01 "</span><span class="o">,</span> <span class="s">"2022 - 02 - 01"</span><span class="o">,</span> <span class="s">" 2025-01 -01"</span><span class="o">};</span>
<span class="nc">LocalDate</span><span class="o">[]</span> <span class="n">array2</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">array</span><span class="o">)</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"\\s"</span><span class="o">,</span> <span class="s">""</span><span class="o">))</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">LocalDate:</span><span class="o">:</span><span class="n">parse</span><span class="o">)</span>
    <span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>

<span class="k">for</span> <span class="o">(</span><span class="nc">LocalDate</span> <span class="n">localDate</span> <span class="o">:</span> <span class="n">array2</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">localDate</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="其他聚合方法">其他聚合方法</h3>

<p><code class="language-plaintext highlighter-rouge">collect(Collectors.groupingBy(classifier))</code>：根据指定的<strong>分类器</strong>对流中的元素进行<strong>分组</strong>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"apple"</span><span class="o">,</span> <span class="s">"banana"</span><span class="o">,</span> <span class="s">"cherry"</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">groupedByLength</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">length</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">groupedByLength</span><span class="o">);</span><span class="c1">//{5=[apple], 6=[banana, cherry]}</span>
</code></pre></div></div>

<p>还可以指定聚合的类型：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">,</span> <span class="s">"Banana"</span><span class="o">,</span> <span class="s">"Blackberry"</span><span class="o">,</span> <span class="s">"Coconut"</span><span class="o">,</span> <span class="s">"Avocado"</span><span class="o">,</span> <span class="s">"Cherry"</span><span class="o">,</span> <span class="s">"Apricots"</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">,</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span>
        <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span> 
        <span class="nc">Collectors</span><span class="o">.</span><span class="na">toSet</span><span class="o">()</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">groups</span><span class="o">);</span><span class="c1">//{A=[Apple, Avocado, Apricots], B=[Banana, Blackberry], C=[Coconut, Cherry]}</span>
</code></pre></div></div>

<p>分组输出使用<code class="language-plaintext highlighter-rouge">Collectors.groupingBy()</code>，它需要提供两个函数：一个是分组的key，这里使用<code class="language-plaintext highlighter-rouge">s -&gt; s.substring(0, 1)</code>，表示只要首字母相同的<code class="language-plaintext highlighter-rouge">String</code>分到一组，第二个是分组的value，这里直接使用<code class="language-plaintext highlighter-rouge">Collectors.toSet()</code>，表示输出为<code class="language-plaintext highlighter-rouge">Set</code>。</p>

<p>还支持嵌套分组：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Address</span><span class="o">[]</span> <span class="n">addresses</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">[]{</span>
                <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="s">"湖南省"</span><span class="o">,</span> <span class="s">"长沙市"</span><span class="o">,</span> <span class="s">"岳麓区"</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="s">"湖南省"</span><span class="o">,</span> <span class="s">"长沙市"</span><span class="o">,</span> <span class="s">"雨花区"</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="s">"湖南省"</span><span class="o">,</span> <span class="s">"永州市"</span><span class="o">,</span> <span class="s">"零陵区"</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="s">"湖南省"</span><span class="o">,</span> <span class="s">"永州市"</span><span class="o">,</span> <span class="s">"冷水滩区"</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="s">"江苏省"</span><span class="o">,</span> <span class="s">"南京市"</span><span class="o">,</span> <span class="s">"建邺区"</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="s">"江苏省"</span><span class="o">,</span> <span class="s">"南京市"</span><span class="o">,</span> <span class="s">"秦淮区"</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="s">"江苏省"</span><span class="o">,</span> <span class="s">"苏州市"</span><span class="o">,</span> <span class="s">"吴江区"</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">Address</span><span class="o">(</span><span class="s">"江苏省"</span><span class="o">,</span> <span class="s">"苏州市"</span><span class="o">,</span> <span class="s">"姑苏区"</span><span class="o">),</span>
        <span class="o">};</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;&gt;&gt;</span> <span class="n">addressGrouping</span> <span class="o">=</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">addresses</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span>
                <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span>
                    <span class="nl">Address:</span><span class="o">:</span><span class="n">province</span><span class="o">,</span>
                    <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span>
                        <span class="nl">Address:</span><span class="o">:</span><span class="n">city</span>
                    <span class="o">)</span>
                <span class="o">)</span>
            <span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">addressGrouping</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"="</span><span class="o">,</span><span class="s">":"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">province</span><span class="o">,</span><span class="n">city</span><span class="o">,</span><span class="n">district</span><span class="o">;</span>

    <span class="nc">Address</span><span class="o">(</span><span class="nc">String</span> <span class="n">province</span><span class="o">,</span> <span class="nc">String</span> <span class="n">city</span><span class="o">,</span> <span class="nc">String</span> <span class="n">district</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">province</span> <span class="o">=</span> <span class="n">province</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">district</span> <span class="o">=</span> <span class="n">district</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">province</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">province</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">city</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">city</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">district</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">district</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"{province=\"%s\", city=\"%s\", district=\"%s\"}"</span><span class="o">,</span> <span class="n">province</span><span class="o">,</span> <span class="n">city</span><span class="o">,</span> <span class="n">district</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="err">江苏省:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">苏州市:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="err">province:</span><span class="w"> </span><span class="s2">"江苏省"</span><span class="p">,</span><span class="w"> </span><span class="err">city:</span><span class="w"> </span><span class="s2">"苏州市"</span><span class="p">,</span><span class="w"> </span><span class="err">district:</span><span class="w"> </span><span class="s2">"吴江区"</span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="err">province:</span><span class="w"> </span><span class="s2">"江苏省"</span><span class="p">,</span><span class="w"> </span><span class="err">city:</span><span class="w"> </span><span class="s2">"苏州市"</span><span class="p">,</span><span class="w"> </span><span class="err">district:</span><span class="w"> </span><span class="s2">"姑苏区"</span><span class="p">}</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="err">南京市:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="err">province:</span><span class="w"> </span><span class="s2">"江苏省"</span><span class="p">,</span><span class="w"> </span><span class="err">city:</span><span class="w"> </span><span class="s2">"南京市"</span><span class="p">,</span><span class="w"> </span><span class="err">district:</span><span class="w"> </span><span class="s2">"建邺区"</span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="err">province:</span><span class="w"> </span><span class="s2">"江苏省"</span><span class="p">,</span><span class="w"> </span><span class="err">city:</span><span class="w"> </span><span class="s2">"南京市"</span><span class="p">,</span><span class="w"> </span><span class="err">district:</span><span class="w"> </span><span class="s2">"秦淮区"</span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">湖南省:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">长沙市:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="err">province:</span><span class="w"> </span><span class="s2">"湖南省"</span><span class="p">,</span><span class="w"> </span><span class="err">city:</span><span class="w"> </span><span class="s2">"长沙市"</span><span class="p">,</span><span class="w"> </span><span class="err">district:</span><span class="w"> </span><span class="s2">"岳麓区"</span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="err">province:</span><span class="w"> </span><span class="s2">"湖南省"</span><span class="p">,</span><span class="w"> </span><span class="err">city:</span><span class="w"> </span><span class="s2">"长沙市"</span><span class="p">,</span><span class="w"> </span><span class="err">district:</span><span class="w"> </span><span class="s2">"雨花区"</span><span class="p">}</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="err">永州市:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="err">province:</span><span class="w"> </span><span class="s2">"湖南省"</span><span class="p">,</span><span class="w"> </span><span class="err">city:</span><span class="w"> </span><span class="s2">"永州市"</span><span class="p">,</span><span class="w"> </span><span class="err">district:</span><span class="w"> </span><span class="s2">"零陵区"</span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="err">province:</span><span class="w"> </span><span class="s2">"湖南省"</span><span class="p">,</span><span class="w"> </span><span class="err">city:</span><span class="w"> </span><span class="s2">"永州市"</span><span class="p">,</span><span class="w"> </span><span class="err">district:</span><span class="w"> </span><span class="s2">"冷水滩区"</span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">collect(Collectors.partitioningBy(predicate))</code>：根据指定的<strong>条件</strong>对流中的元素进行<strong>分区</strong>，将满足条件的元素放入一个分区，不满足条件的放入另一个分区。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"apple"</span><span class="o">,</span> <span class="s">"banana"</span><span class="o">,</span> <span class="s">"cherry"</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Boolean</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">partitioned</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">partitioningBy</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"a"</span><span class="o">)));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">partitioned</span><span class="o">);</span><span class="c1">//{false=[banana, cherry], true=[apple]}</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">anyMatch(Predicate&lt;? super T&gt; predicate)</code>：判断流中<strong>是否存在</strong>满足指定条件的元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="kt">boolean</span> <span class="n">anyMatch</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">anyMatch</span><span class="o">);</span><span class="c1">//true，因为流中有偶数元素。</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">allMatch(Predicate&lt;? super T&gt; predicate)</code>：判断流中的<strong>所有元素</strong>是否<strong>都满足</strong>指定条件。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="kt">boolean</span> <span class="n">allMatch</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">allMatch</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">allMatch</span><span class="o">);</span><span class="c1">//true，因为流中所有元素都大于0。</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">noneMatch(Predicate&lt;? super T&gt; predicate)</code>：判断流中是否<strong>不存在</strong>满足指定条件的元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="kt">boolean</span> <span class="n">noneMatch</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">noneMatch</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">noneMatch</span><span class="o">);</span><span class="c1">//true，因为流中所有元素都不小于0。</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">forEach()</code>，可以循环处理<code class="language-plaintext highlighter-rouge">Stream</code>的每个元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">,</span> <span class="s">"D"</span><span class="o">);</span>
<span class="n">stream</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="其他转换操作">其他转换操作</h3>

<p>排序<code class="language-plaintext highlighter-rouge">sorted()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Orange"</span><span class="o">,</span> <span class="s">"apple"</span><span class="o">,</span> <span class="s">"Banana"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
    <span class="o">.</span><span class="na">sorted</span><span class="o">()</span>
    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</code></pre></div></div>

<p>此方法要求<code class="language-plaintext highlighter-rouge">Stream</code>的每个元素必须实现<code class="language-plaintext highlighter-rouge">Comparable</code>接口。如果要自定义排序，传入指定的<code class="language-plaintext highlighter-rouge">Comparator</code>即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Orange"</span><span class="o">,</span> <span class="s">"apple"</span><span class="o">,</span> <span class="s">"Banana"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
    <span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">compareToIgnoreCase</span><span class="o">)</span>
    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</code></pre></div></div>

<hr />

<p>去重，可以直接用<code class="language-plaintext highlighter-rouge">distinct()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">,</span> <span class="s">"A"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">,</span> <span class="s">"D"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
    <span class="o">.</span><span class="na">distinct</span><span class="o">()</span>
    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span> <span class="c1">// [A, B, C, D]</span>
</code></pre></div></div>

<hr />

<p>截取操作常用于把一个无限的<code class="language-plaintext highlighter-rouge">Stream</code>转换成有限的<code class="language-plaintext highlighter-rouge">Stream</code>，<code class="language-plaintext highlighter-rouge">skip()</code>用于跳过当前<code class="language-plaintext highlighter-rouge">Stream</code>的前N个元素，<code class="language-plaintext highlighter-rouge">limit()</code>用于截取当前<code class="language-plaintext highlighter-rouge">Stream</code>最多前N个元素：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">,</span> <span class="s">"D"</span><span class="o">,</span> <span class="s">"E"</span><span class="o">,</span> <span class="s">"F"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
    <span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="c1">// 跳过A, B</span>
    <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="c1">// 截取C, D, E</span>
    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span> <span class="c1">// [C, D, E]</span>
</code></pre></div></div>

<hr />

<p>合并，将两个<code class="language-plaintext highlighter-rouge">Stream</code>合并为一个<code class="language-plaintext highlighter-rouge">Stream</code>可以使用<code class="language-plaintext highlighter-rouge">Stream</code>的静态方法<code class="language-plaintext highlighter-rouge">concat()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">).</span><span class="na">stream</span><span class="o">();</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"D"</span><span class="o">,</span> <span class="s">"E"</span><span class="o">).</span><span class="na">stream</span><span class="o">();</span>
<span class="c1">// 合并:</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">()));</span> <span class="c1">// [A, B, C, D, E]</span>
</code></pre></div></div>

<hr />

<p>如果<code class="language-plaintext highlighter-rouge">Stream</code>的元素是集合：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">),</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">));</span>
</code></pre></div></div>

<p>而我们希望把上述<code class="language-plaintext highlighter-rouge">Stream</code>转换为<code class="language-plaintext highlighter-rouge">Stream&lt;Integer&gt;</code>，就可以使用<code class="language-plaintext highlighter-rouge">flatMap()</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">list</span> <span class="o">-&gt;</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">());</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">flatMap()</code>，是指把<code class="language-plaintext highlighter-rouge">Stream</code>的每个元素（这里是<code class="language-plaintext highlighter-rouge">List</code>）映射为<code class="language-plaintext highlighter-rouge">Stream</code>，然后合并成一个新的<code class="language-plaintext highlighter-rouge">Stream</code>。</p>

<hr />

<p>并行，把一个普通<code class="language-plaintext highlighter-rouge">Stream</code>转换为可以并行处理的<code class="language-plaintext highlighter-rouge">Stream</code>非常简单，只需要用<code class="language-plaintext highlighter-rouge">parallel()</code>进行转换：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="o">...</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">parallel</span><span class="o">()</span> <span class="c1">// 变成一个可以并行处理的Stream</span>
                   <span class="o">.</span><span class="na">sorted</span><span class="o">()</span> <span class="c1">// 可以进行并行排序</span>
                   <span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
</code></pre></div></div>

<p>经过<code class="language-plaintext highlighter-rouge">parallel()</code>转换后的<code class="language-plaintext highlighter-rouge">Stream</code>只要可能，就会对后续操作进行并行处理。不需要编写任何多线程代码就可以享受到并行处理带来的执行效率的提升。</p>

<p>也可以通过<code class="language-plaintext highlighter-rouge">parallelStream()</code><strong>直接创建一个并行流</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">parallelStream</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="s">"b"</span><span class="o">,</span> <span class="s">"c"</span><span class="o">).</span><span class="na">parallelStream</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="特殊的方法">特殊的方法</h3>

<p>调试方法：<code class="language-plaintext highlighter-rouge">peek(Consumer&lt;? super T&gt; action)</code>：对流中的每个元素执行操作，并返回一个新的流。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
   <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">peeked</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                                <span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<p>此方法需要在流真正计算的时候才会运行，即后面需要接聚合方法。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">findFirst()</code>：返回流中的第一个元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findFirst</span><span class="o">();</span>
<span class="n">first</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span><span class="c1">//1，因为流中的第一个元素是1。</span>
</code></pre></div></div>

<p>不会遍历流，只会取第一个：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">first</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
        <span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">)</span><span class="c1">//1</span>
        <span class="o">.</span><span class="na">findFirst</span><span class="o">();</span>
<span class="n">first</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span><span class="c1">//1</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">findAny()</code>：返回流中的任意一个元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">any</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findAny</span><span class="o">();</span>
<span class="n">any</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span><span class="c1">//输出结果为任意一个流中的元素。</span>
</code></pre></div></div>

<p>不会遍历流，只会取一个：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">any</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
        <span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">)</span><span class="c1">//输出结果为任意一个流中的元素。</span>
        <span class="o">.</span><span class="na">findAny</span><span class="o">();</span>
<span class="n">any</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span><span class="c1">//与peek相同</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">count()</code>：返回流中元素的数量。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">count</span><span class="o">();</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">peek</code>可能无输出，即可能不会遍历流，但还是会消耗并关闭流</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">();</span>
<span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">stream</span>
        <span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">)</span><span class="c1">//无输出</span>
        <span class="o">.</span><span class="na">count</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span><span class="c1">//5</span>
</code></pre></div></div>

<p>在调用 <code class="language-plaintext highlighter-rouge">count</code> 操作时。如果流源（如 <code class="language-plaintext highlighter-rouge">List</code>）已知其包含的元素数量，并且管道中的中间操作不改变元素数量（即它们是非破坏性的），则可以直接从源头计算数量，而无需实际遍历流或评估中间操作。</p>

<p><code class="language-plaintext highlighter-rouge">list</code> 的大小是已知的，而 <code class="language-plaintext highlighter-rouge">peek</code> 操作是非破坏性的（它只是简单地打印元素）。因此，流实现可以直接使用 <code class="language-plaintext highlighter-rouge">List</code> 的大小来确定计数，而无需实际打印元素或评估 <code class="language-plaintext highlighter-rouge">peek</code> 操作。</p>

<p>这种优化对于在不完全处理流的情况下确定计数很有用。然而，重要的是要注意，它依赖于特定的条件（已知大小，非破坏性的中间操作），并不总是适用。</p>

<p>依然会消耗流：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">();</span>
<span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">stream</span>
        <span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">)</span><span class="c1">//无输出</span>
        <span class="o">.</span><span class="na">count</span><span class="o">();</span>
<span class="n">stream</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span><span class="c1">//异常：流已关闭</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="collectors的方法"><code class="language-plaintext highlighter-rouge">Collectors</code>的方法</h3>

<p><code class="language-plaintext highlighter-rouge">Collectors</code> 类提供了许多静态工厂方法，用于创建各种收集器，可以用于将流中的元素收集到不同类型的集合中，或进行分组、分区等操作。</p>

<h4 id="基本收集器">基本收集器</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">toList()</code>：将流中的元素收集到一个 <code class="language-plaintext highlighter-rouge">List</code> 中。</li>
  <li><code class="language-plaintext highlighter-rouge">toSet()</code>：将流中的元素收集到一个 <code class="language-plaintext highlighter-rouge">Set</code> 中。</li>
  <li><code class="language-plaintext highlighter-rouge">toMap(keyMapper, valueMapper)</code>：将流中的元素收集到一个 <code class="language-plaintext highlighter-rouge">Map</code> 中，可以指定 <code class="language-plaintext highlighter-rouge">key</code> 和 <code class="language-plaintext highlighter-rouge">value</code> 的映射关系。</li>
  <li><code class="language-plaintext highlighter-rouge">toMap(keyMapper, valueMapper, mergeFunction)</code>：将流中的元素收集到一个 <code class="language-plaintext highlighter-rouge">Map</code> 中，可以指定 <code class="language-plaintext highlighter-rouge">key</code> 和 <code class="language-plaintext highlighter-rouge">value</code> 的映射关系，并使用指定的<strong>合并函数</strong>在收集过程中处理<strong>相同键</strong>的值。</li>
  <li><code class="language-plaintext highlighter-rouge">toConcurrentMap(keyMapper, valueMapper)</code>：将流中的元素收集到一个并发 <code class="language-plaintext highlighter-rouge">Map</code> 中，可以指定 <code class="language-plaintext highlighter-rouge">key</code> 和 <code class="language-plaintext highlighter-rouge">value</code> 的映射关系。</li>
  <li><code class="language-plaintext highlighter-rouge">toConcurrentMap(keyMapper, valueMapper, mergeFunction)</code>：将流中的元素收集到一个并发 <code class="language-plaintext highlighter-rouge">Map</code> 中，可以指定 <code class="language-plaintext highlighter-rouge">key</code> 和 <code class="language-plaintext highlighter-rouge">value</code> 的映射关系，并使用指定的<strong>合并函数</strong>在收集过程中处理<strong>相同键</strong>的值。比如在合并函数中，如果遇到相同的键，则将旧值与新值用 <code class="language-plaintext highlighter-rouge">|</code> 连接起来。</li>
  <li><code class="language-plaintext highlighter-rouge">joining()</code>：将流中的元素连接成一个字符串。</li>
  <li><code class="language-plaintext highlighter-rouge">joining(delimiter)</code>：将流中的元素连接成一个字符串，使用指定的分隔符。</li>
  <li><code class="language-plaintext highlighter-rouge">joining(delimiter, prefix, suffix)</code>：将流中的元素连接成一个字符串，使用指定的分隔符、前缀和后缀。</li>
</ul>

<hr />

<h4 id="汇总统计收集器">汇总统计收集器</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">counting()</code>：计算流中元素的数量，返回一个 <code class="language-plaintext highlighter-rouge">long</code> 值。</li>
  <li><code class="language-plaintext highlighter-rouge">summarizingInt()</code>, <code class="language-plaintext highlighter-rouge">summarizingLong()</code>, <code class="language-plaintext highlighter-rouge">summarizingDouble()</code>：对流中的元素进行汇总统计，返回一个包含 <code class="language-plaintext highlighter-rouge">count</code>、<code class="language-plaintext highlighter-rouge">sum</code>、<code class="language-plaintext highlighter-rouge">min</code>、<code class="language-plaintext highlighter-rouge">average</code>、<code class="language-plaintext highlighter-rouge">max</code> 等统计信息的 <code class="language-plaintext highlighter-rouge">IntSummaryStatistics</code>、<code class="language-plaintext highlighter-rouge">LongSummaryStatistics</code> 或 <code class="language-plaintext highlighter-rouge">DoubleSummaryStatistics</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">averagingInt()</code>, <code class="language-plaintext highlighter-rouge">averagingLong()</code>, <code class="language-plaintext highlighter-rouge">averagingDouble()</code>：平均值，返回一个 <code class="language-plaintext highlighter-rouge">double</code> 值。</li>
  <li><code class="language-plaintext highlighter-rouge">summingInt()</code>，<code class="language-plaintext highlighter-rouge">summingLong()</code>，<code class="language-plaintext highlighter-rouge">summingDouble()</code>：求和。</li>
</ul>

<hr />

<h4 id="最大最小值收集器">最大最小值收集器</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">maxBy(comparator)</code>：根据指定的比较器找到流中的最大元素。</li>
  <li><code class="language-plaintext highlighter-rouge">minBy(comparator)</code>：根据指定的比较器找到流中的最小元素。</li>
</ul>

<hr />

<h4 id="分组和分区收集器">分组和分区收集器</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">groupingBy(classifier)</code>：根据指定的分类器对流中的元素进行分组。</li>
  <li><code class="language-plaintext highlighter-rouge">groupingBy(classifier, downstream)</code>：根据指定的分类器对流中的元素进行分组，并将结果传递给另一个收集器进行进一步的收集。</li>
  <li><code class="language-plaintext highlighter-rouge">groupingBy(classifier, supplier, downstream)</code>：根据指定的分类器对流中的元素进行分组，指定一个供应商（supplier），用于提供初始的 <code class="language-plaintext highlighter-rouge">Map</code> 容量大小，这在知道分组数量可能较大时可以提高性能，避免 <code class="language-plaintext highlighter-rouge">Map</code> 不断扩容，并将结果传递给另一个收集器进行进一步的收集。</li>
  <li><code class="language-plaintext highlighter-rouge">groupingByConcurrent(classifier)</code>：根据指定的分类器对流中的元素进行分组，并将结果放入一个并发 <code class="language-plaintext highlighter-rouge">Map</code> 中。</li>
  <li><code class="language-plaintext highlighter-rouge">groupingByConcurrent(classifier, downstream)</code>：根据指定的分类器对流中的元素进行分组，并将结果传递给另一个收集器进行进一步的收集，最终放入一个并发 <code class="language-plaintext highlighter-rouge">Map</code> 中。</li>
  <li><code class="language-plaintext highlighter-rouge">groupingByConcurrent(classifier, supplier, downstream)</code>：根据指定的分类器对流中的元素进行分组，并使用指定的供应商提供 Map 初始容量，并将结果传递给另一个收集器进行进一步的收集，最终放入一个并发 <code class="language-plaintext highlighter-rouge">Map</code> 中。</li>
  <li><code class="language-plaintext highlighter-rouge">partitioningBy(predicate)</code>：根据指定的条件对流中的元素进行分区。</li>
  <li><code class="language-plaintext highlighter-rouge">partitioningBy(predicate, downstream)</code>：根据指定的条件对流中的元素进行分区，并将结果传递给另一个收集器进行进一步的收集。</li>
</ul>

<hr />

<h4 id="其他收集器">其他收集器</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">reducing(op)</code>：使用累加器函数递归地将流中的元素进行归约操作。</li>
  <li><code class="language-plaintext highlighter-rouge">reducing(identity, op)</code>：使用给定的初始值和累加器函数递归地将流中的元素进行归约操作。</li>
  <li><code class="language-plaintext highlighter-rouge">reducing(mapper, op)</code>：使用映射函数对流中的元素进行归约操作。</li>
  <li><code class="language-plaintext highlighter-rouge">mapping(mapper, downstream)</code>：对流中的元素进行映射，并将结果传递给另一个收集器进行进一步的收集。</li>
  <li><code class="language-plaintext highlighter-rouge">collectingAndThen(downstream, finisher)</code>：对收集器的结果应用一个转换函数。</li>
  <li><code class="language-plaintext highlighter-rouge">filtering(predicate, downstream)</code>：根据指定的条件对流中的元素进行过滤，并将结果传递给另一个收集器进行进一步的收集。</li>
  <li><code class="language-plaintext highlighter-rouge">flatMapping(mapper, downstream)</code>：对流中的元素进行扁平化映射，并将结果传递给另一个收集器进行进一步的收集。</li>
  <li><code class="language-plaintext highlighter-rouge">teeing(first, second, merger)</code>：对流中的元素应用两个收集器，然后使用提供的合并器对两个结果进行合并。</li>
</ul>

<p>这些方法提供了丰富的功能，可以灵活地处理流中的元素，进行分组、分区、汇总统计等操作，使得流式编程更加便捷和高效。</p>

<h4 id="示例">示例</h4>

<p>这里给出上述方法的一些示例代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>

<span class="c1">// counting()，'collect(counting())' 可被替换为 'count()'</span>
<span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">counting</span><span class="o">()</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Count: "</span> <span class="o">+</span> <span class="n">count</span><span class="o">);</span>

<span class="c1">// summarizingInt()，count，sum，min，average，max</span>
<span class="nc">IntSummaryStatistics</span> <span class="n">stats</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">summarizingInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">intValue</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Summarizing statistics: "</span> <span class="o">+</span> <span class="n">stats</span><span class="o">);</span>

<span class="c1">// averagingInt()，同average</span>
<span class="kt">double</span> <span class="n">average</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">averagingInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">intValue</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Average: "</span> <span class="o">+</span> <span class="n">average</span><span class="o">);</span>

<span class="c1">// groupingByConcurrent(classifier, supplier, downstream)</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">map1</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span>
        <span class="n">x</span><span class="o">-&gt;</span><span class="n">x</span><span class="o">%</span><span class="mi">3</span><span class="o">,</span>
        <span class="nl">HashMap:</span><span class="o">:</span><span class="k">new</span><span class="o">,</span> <span class="c1">// 使用 HashMap 作为分组的初始容器</span>
        <span class="nc">Collectors</span><span class="o">.</span><span class="na">averagingDouble</span><span class="o">(</span><span class="n">x</span><span class="o">-&gt;</span> <span class="n">x</span><span class="o">)</span> <span class="c1">// 统计每个分组的平均值</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="c1">//{0=6.0, 1=5.5, 2=5.0}</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map1</span><span class="o">);</span>


<span class="c1">// reducing(),'collect(reducing())' 可被替换为 'reduce()'</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">reducing</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="nl">Integer:</span><span class="o">:</span><span class="n">sum</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sum: "</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>

<span class="c1">// collectingAndThen()，</span>
<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">collectingAndThen</span><span class="o">(</span>
        <span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">", "</span><span class="o">),</span>
        <span class="n">s</span> <span class="o">-&gt;</span> <span class="s">"["</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="s">"]"</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="c1">//Result: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>


<span class="c1">// toMap(keyMapper, valueMapper, mergeFunction)</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map2</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span>
        <span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span><span class="o">%</span><span class="mi">3</span><span class="o">,</span>
        <span class="n">num</span> <span class="o">-&gt;</span> <span class="s">"value"</span> <span class="o">+</span> <span class="n">num</span><span class="o">,</span>
        <span class="o">(</span><span class="n">existing</span><span class="o">,</span> <span class="n">replacement</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">existing</span> <span class="o">+</span> <span class="s">"|"</span> <span class="o">+</span> <span class="n">replacement</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="c1">// Map: {0=value3|value6|value9, 1=value1|value4|value7|value10, 2=value2|value5|value8}</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Map: "</span> <span class="o">+</span> <span class="n">map2</span><span class="o">);</span>

<span class="c1">// toConcurrentMap(keyMapper, valueMapper)</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">concurrentMap1</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">toConcurrentMap</span><span class="o">(</span>
        <span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span><span class="o">,</span>
        <span class="n">num</span> <span class="o">-&gt;</span> <span class="s">"value"</span> <span class="o">+</span> <span class="n">num</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Concurrent map: "</span> <span class="o">+</span> <span class="n">concurrentMap1</span><span class="o">);</span>

<span class="c1">// toConcurrentMap(keyMapper, valueMapper, mergeFunction)</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">concurrentMap2</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">toConcurrentMap</span><span class="o">(</span>
        <span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span><span class="o">%</span><span class="mi">5</span><span class="o">,</span>
        <span class="n">num</span> <span class="o">-&gt;</span> <span class="s">"value"</span> <span class="o">+</span> <span class="n">num</span><span class="o">,</span>
        <span class="c1">//在合并函数中，如果遇到相同的键，则将旧值与新值用 "|" 连接起来。</span>
        <span class="o">(</span><span class="n">existing</span><span class="o">,</span> <span class="n">replacement</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">existing</span> <span class="o">+</span> <span class="s">"|"</span> <span class="o">+</span> <span class="n">replacement</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Concurrent map: "</span> <span class="o">+</span> <span class="n">concurrentMap2</span><span class="o">);</span>

<span class="c1">// mapping(mapper, downstream)，'collect(mapping())' 可被替换为 'map().collect()'</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">mappedList</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">mapping</span><span class="o">(</span>
        <span class="n">num</span> <span class="o">-&gt;</span> <span class="s">"value"</span> <span class="o">+</span> <span class="n">num</span><span class="o">,</span>
        <span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">()</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="c1">//Mapped list: [value1, value2, value3, value4, value5, value6, value7, value8, value9, value10]</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Mapped list: "</span> <span class="o">+</span> <span class="n">mappedList</span><span class="o">);</span>

<span class="c1">// filtering(predicate, downstream)，同filter</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">filteredMap</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">filtering</span><span class="o">(</span>
        <span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">,</span>
        <span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">()</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="c1">//Filtered map: [2, 4, 6, 8, 10]</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Filtered map: "</span> <span class="o">+</span> <span class="n">filteredMap</span><span class="o">);</span>

<span class="c1">// flatMapping(mapper, downstream)，同flat</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">nestedList</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">),</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">flattenedList</span> <span class="o">=</span> <span class="n">nestedList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
    <span class="nc">Collectors</span><span class="o">.</span><span class="na">flatMapping</span><span class="o">(</span>
        <span class="nl">List:</span><span class="o">:</span><span class="n">stream</span><span class="o">,</span>
        <span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">()</span>
    <span class="o">)</span>
<span class="o">);</span>
<span class="c1">//Flattened list: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Flattened list: "</span> <span class="o">+</span> <span class="n">flattenedList</span><span class="o">);</span>
</code></pre></div></div>

<p>联合使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>

        <span class="nc">Product</span> <span class="n">prod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"15.5"</span><span class="o">),</span> <span class="s">"面包"</span><span class="o">,</span> <span class="s">"零食"</span><span class="o">);</span>
        <span class="nc">Product</span> <span class="n">prod2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="mi">2L</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"20"</span><span class="o">),</span> <span class="s">"饼干"</span><span class="o">,</span> <span class="s">"零食"</span><span class="o">);</span>
        <span class="nc">Product</span> <span class="n">prod3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="mi">3L</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"30"</span><span class="o">),</span> <span class="s">"月饼"</span><span class="o">,</span> <span class="s">"零食"</span><span class="o">);</span>
        <span class="nc">Product</span> <span class="n">prod4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="mi">4L</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"10"</span><span class="o">),</span> <span class="s">"青岛啤酒"</span><span class="o">,</span> <span class="s">"啤酒"</span><span class="o">);</span>
        <span class="nc">Product</span> <span class="n">prod5</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="mi">5L</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"15"</span><span class="o">),</span> <span class="s">"百威啤酒"</span><span class="o">,</span> <span class="s">"啤酒"</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">prodList</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">prod1</span><span class="o">,</span><span class="n">prod2</span><span class="o">,</span><span class="n">prod3</span><span class="o">,</span><span class="n">prod4</span><span class="o">,</span><span class="n">prod5</span><span class="o">);</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="n">prodMap</span> <span class="o">=</span> <span class="n">prodList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
            <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span>
                <span class="nl">Product:</span><span class="o">:</span><span class="n">getCategory</span><span class="o">,</span>
                <span class="c1">//求总数</span>
                <span class="nc">Collectors</span><span class="o">.</span><span class="na">counting</span><span class="o">()</span>
            <span class="o">)</span>
        <span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">prodMap</span><span class="o">);</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">prodMap2</span> <span class="o">=</span> <span class="n">prodList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
            <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span>
                <span class="nl">Product:</span><span class="o">:</span><span class="n">getCategory</span><span class="o">,</span>
                <span class="c1">//求和</span>
                <span class="nc">Collectors</span><span class="o">.</span><span class="na">summingInt</span><span class="o">(</span>
                    <span class="nl">Product:</span><span class="o">:</span><span class="n">getNum</span>
                <span class="o">)</span>
            <span class="o">)</span>
        <span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">prodMap2</span><span class="o">);</span>

        <span class="cm">/*把收集器的结果转换为另一种类型,String表示Category，
        Product表示每个分组中num属性最大的Product对象。*/</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Product</span><span class="o">&gt;</span> <span class="n">prodMap3</span> <span class="o">=</span> <span class="n">prodList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
            <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span><span class="c1">//按Category分组</span>
                <span class="nl">Product:</span><span class="o">:</span><span class="n">getCategory</span><span class="o">,</span>
                <span class="nc">Collectors</span><span class="o">.</span><span class="na">collectingAndThen</span><span class="o">(</span><span class="c1">//对结果进行转换</span>
                    <span class="c1">//对每个分组中的元素取num属性最大的Product对象。</span>
                    <span class="nc">Collectors</span><span class="o">.</span><span class="na">maxBy</span><span class="o">(</span>
                        <span class="nc">Comparator</span><span class="o">.</span><span class="na">comparingInt</span><span class="o">(</span><span class="nl">Product:</span><span class="o">:</span><span class="n">getNum</span><span class="o">)</span>
                    <span class="o">),</span>
                    <span class="c1">//这一步并没有直接得到最大的Product对象，而是得到了一个Optional&lt;Product&gt;对象</span>
                    <span class="c1">// ，因为有可能某个分组为空，所以需要用Optional来包装结果。</span>
                    <span class="nl">Optional:</span><span class="o">:</span><span class="n">get</span>
                <span class="o">)</span>
            <span class="o">)</span>
        <span class="o">);</span>
        <span class="c1">//{啤酒=Product{id=5, num=10, price=15, name='百威啤酒', category='啤酒'}, 零食=Product{id=3, num=3, price=30, name='月饼', category='零食'}}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">prodMap3</span><span class="o">);</span>
        <span class="cm">/*prodMap3可写为：*/</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Product</span><span class="o">&gt;</span> <span class="n">prodMap4</span> <span class="o">=</span> <span class="n">prodList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
            <span class="nc">Collectors</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span>
                <span class="nl">Product:</span><span class="o">:</span><span class="n">getCategory</span><span class="o">,</span><span class="c1">//以Category为key</span>
                <span class="n">x</span><span class="o">-&gt;</span><span class="n">x</span><span class="o">,</span><span class="c1">//value不变</span>
                <span class="nc">BinaryOperator</span><span class="o">.</span><span class="na">maxBy</span><span class="o">(</span><span class="c1">//对重复值取最大</span>
                    <span class="c1">//比较器</span>
                    <span class="nc">Comparator</span><span class="o">.</span><span class="na">comparingInt</span><span class="o">(</span><span class="nl">Product:</span><span class="o">:</span><span class="n">getNum</span><span class="o">)</span>
                <span class="o">)</span>
            <span class="o">)</span>
        <span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">prodMap4</span><span class="o">);</span>

        <span class="cm">/*联合其他收集器*/</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">prodMap5</span> <span class="o">=</span> <span class="n">prodList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span>
            <span class="nc">Collectors</span><span class="o">.</span><span class="na">groupingBy</span><span class="o">(</span>
                <span class="nl">Product:</span><span class="o">:</span><span class="n">getCategory</span><span class="o">,</span>
                <span class="nc">Collectors</span><span class="o">.</span><span class="na">mapping</span><span class="o">(</span>
                    <span class="cm">/*只取name，并放入set去重*/</span>
                    <span class="nl">Product:</span><span class="o">:</span><span class="n">getName</span><span class="o">,</span>
                    <span class="nc">Collectors</span><span class="o">.</span><span class="na">toSet</span><span class="o">()</span>
                <span class="o">)</span>
            <span class="o">)</span>
        <span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">prodMap5</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Product</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Integer</span> <span class="n">num</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">BigDecimal</span> <span class="n">price</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">category</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getNum</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">num</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">price</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCategory</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">category</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nc">Product</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">num</span><span class="o">,</span> <span class="nc">BigDecimal</span> <span class="n">price</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">category</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">category</span> <span class="o">=</span> <span class="n">category</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Product{id=%d, num=%d, price=%s, name='%s', category='%s'}"</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">num</span><span class="o">,</span> <span class="n">price</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">category</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>说明一下比较复杂的</p>

<p><code class="language-plaintext highlighter-rouge">prodMap3</code>：</p>

<p>按照<code class="language-plaintext highlighter-rouge">Product</code>对象的<code class="language-plaintext highlighter-rouge">Category</code>属性进行分组，并且对每个分组中的元素取<code class="language-plaintext highlighter-rouge">num</code>属性最大的<code class="language-plaintext highlighter-rouge">Product</code>对象。</p>

<p>具体来说，代码的执行步骤如下：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">prodList.stream()</code>：将<code class="language-plaintext highlighter-rouge">prodList</code>转换为一个<code class="language-plaintext highlighter-rouge">Stream</code>流。</li>
  <li><code class="language-plaintext highlighter-rouge">Collectors.groupingBy(Product::getCategory)</code>：使用<code class="language-plaintext highlighter-rouge">Collectors.groupingBy</code>方法按照<code class="language-plaintext highlighter-rouge">Product</code>对象的<code class="language-plaintext highlighter-rouge">Category</code>属性进行分组，得到一个<code class="language-plaintext highlighter-rouge">Map&lt;String, List&lt;Product&gt;&gt;</code>，其中<code class="language-plaintext highlighter-rouge">String</code>表示<code class="language-plaintext highlighter-rouge">Category</code>，<code class="language-plaintext highlighter-rouge">List&lt;Product&gt;</code>表示属于该<code class="language-plaintext highlighter-rouge">Category</code>的所有<code class="language-plaintext highlighter-rouge">Product</code>对象列表。</li>
  <li><code class="language-plaintext highlighter-rouge">Collectors.maxBy(Comparator.comparingInt(Product::getNum))</code>：使用<code class="language-plaintext highlighter-rouge">Collectors.maxBy</code>方法和<code class="language-plaintext highlighter-rouge">Comparator.comparingInt</code>方法找出每个分组中<code class="language-plaintext highlighter-rouge">num</code>属性最大的<code class="language-plaintext highlighter-rouge">Product</code>对象。这一步并没有直接得到最大的<code class="language-plaintext highlighter-rouge">Product</code>对象，而是得到了一个<code class="language-plaintext highlighter-rouge">Optional&lt;Product&gt;</code>对象，因为有可能某个分组为空，所以需要用<code class="language-plaintext highlighter-rouge">Optional</code>来包装结果。</li>
  <li><code class="language-plaintext highlighter-rouge">Collectors.collectingAndThen(..., Optional::get)</code>：使用<code class="language-plaintext highlighter-rouge">Collectors.collectingAndThen</code>方法对上一步得到的<code class="language-plaintext highlighter-rouge">Optional&lt;Product&gt;</code>对象进行处理，通过<code class="language-plaintext highlighter-rouge">Optional::get</code>方法获取其中的<code class="language-plaintext highlighter-rouge">Product</code>对象。这样就得到了每个分组中<code class="language-plaintext highlighter-rouge">num</code>属性最大的<code class="language-plaintext highlighter-rouge">Product</code>对象。</li>
  <li>最终，整个表达式将返回一个<code class="language-plaintext highlighter-rouge">Map&lt;String, Product&gt;</code>，其中<code class="language-plaintext highlighter-rouge">String</code>表示<code class="language-plaintext highlighter-rouge">Category</code>，<code class="language-plaintext highlighter-rouge">Product</code>表示每个分组中<code class="language-plaintext highlighter-rouge">num</code>属性最大的<code class="language-plaintext highlighter-rouge">Product</code>对象。</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">prodMap5</code>：</p>

<p>按照 <code class="language-plaintext highlighter-rouge">Product</code> 对象的 <code class="language-plaintext highlighter-rouge">Category</code> 属性进行分组，并且将每个分组中的 <code class="language-plaintext highlighter-rouge">Product</code> 对象的 <code class="language-plaintext highlighter-rouge">Name</code> 属性收集到一个 <code class="language-plaintext highlighter-rouge">Set</code> 中。</p>

<p>具体来说，代码的执行步骤如下：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">prodList.stream()</code>：将 <code class="language-plaintext highlighter-rouge">prodList</code> 转换为一个 <code class="language-plaintext highlighter-rouge">Stream</code> 流。</li>
  <li><code class="language-plaintext highlighter-rouge">Collectors.groupingBy(Product::getCategory)</code>：使用 <code class="language-plaintext highlighter-rouge">Collectors.groupingBy</code> 方法按照 <code class="language-plaintext highlighter-rouge">Product</code> 对象的 <code class="language-plaintext highlighter-rouge">Category</code> 属性进行分组，得到一个 <code class="language-plaintext highlighter-rouge">Map&lt;String, List&lt;Product&gt;&gt;</code>，其中 <code class="language-plaintext highlighter-rouge">String</code> 表示 <code class="language-plaintext highlighter-rouge">Category</code>，<code class="language-plaintext highlighter-rouge">List&lt;Product&gt;</code> 表示属于该 <code class="language-plaintext highlighter-rouge">Category</code> 的所有 <code class="language-plaintext highlighter-rouge">Product</code> 对象列表。</li>
  <li><code class="language-plaintext highlighter-rouge">Collectors.mapping(Product::getName, Collectors.toSet())</code>：使用 <code class="language-plaintext highlighter-rouge">Collectors.mapping</code> 方法将每个分组中的 <code class="language-plaintext highlighter-rouge">Product</code> 对象转换为其 <code class="language-plaintext highlighter-rouge">Name</code> 属性，并将结果收集到一个 <code class="language-plaintext highlighter-rouge">Set</code> 中。这样就得到了一个 <code class="language-plaintext highlighter-rouge">Map&lt;String, Set&lt;String&gt;&gt;</code>，其中 <code class="language-plaintext highlighter-rouge">String</code> 表示 <code class="language-plaintext highlighter-rouge">Category</code>，<code class="language-plaintext highlighter-rouge">Set&lt;String&gt;</code> 表示每个分组中的 <code class="language-plaintext highlighter-rouge">Name</code> 属性集合。</li>
  <li>最终，整个表达式将返回一个 <code class="language-plaintext highlighter-rouge">Map&lt;String, Set&lt;String&gt;&gt;</code>，其中 <code class="language-plaintext highlighter-rouge">String</code> 表示 <code class="language-plaintext highlighter-rouge">Category</code>，<code class="language-plaintext highlighter-rouge">Set&lt;String&gt;</code> 表示每个分组中的 <code class="language-plaintext highlighter-rouge">Name</code> 属性集合。</li>
</ol>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">网络编程</title><link href="/2024/04/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/" rel="alternate" type="text/html" title="网络编程" /><published>2024-04-23T00:00:00+08:00</published><updated>2024-04-23T00:00:00+08:00</updated><id>/2024/04/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B</id><content type="html" xml:base="/2024/04/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"><![CDATA[<h1 id="引言">引言</h1>
<p>TCP、UDP、Email、HTTP、RMI。</p>

<h1 id="网络编程">网络编程</h1>

<p>网络编程是指编写能够在计算机网络上进行通信的程序的过程。网络编程涉及使用各种协议和技术来实现不同类型的网络通信，例如传输文件、发送电子邮件、浏览网页等。在网络编程中，通常涉及两个或多个计算机之间的数据交换，这些计算机通过网络连接在一起。</p>

<p>常见服务和对应端口号</p>

<table>
  <thead>
    <tr>
      <th>端口</th>
      <th>对应服务</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>7</td>
      <td>Echo服务器</td>
    </tr>
    <tr>
      <td>21</td>
      <td>Ftp</td>
    </tr>
    <tr>
      <td>23</td>
      <td>telnet</td>
    </tr>
    <tr>
      <td>25</td>
      <td>SMTP</td>
    </tr>
    <tr>
      <td>79</td>
      <td>Finger</td>
    </tr>
    <tr>
      <td>80</td>
      <td>HTTP</td>
    </tr>
    <tr>
      <td>110</td>
      <td>POP3</td>
    </tr>
    <tr>
      <td>143</td>
      <td>IMAP</td>
    </tr>
    <tr>
      <td>443</td>
      <td>HTTPS</td>
    </tr>
  </tbody>
</table>

<h2 id="tcp通信">TCP通信</h2>

<h3 id="socket概念">Socket概念</h3>

<p>一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号。端口号总是由操作系统分配，它是一个0～65535之间的数字，其中，小于1024的端口属于<strong>特权端口</strong>，需要管理员权限，大于1024的端口可以由任意用户的应用程序打开。</p>

<p>使用Socket进行网络编程时，本质上就是两个进程之间的网络通信。其中一个进程必须充当服务器端，它会主动监听某个指定的端口，另一个进程必须充当客户端，它必须主动连接服务器的IP地址和指定端口，如果连接成功，服务器端和客户端就成功地建立了一个TCP连接，双方后续就可以随时发送和接收数据。</p>

<p>当Socket连接成功地在服务器端和客户端之间建立后：</p>

<ul>
  <li>对服务器端来说，它的Socket是指定的IP地址和指定的端口号；</li>
  <li>对客户端来说，它的Socket是它所在计算机的IP地址和一个由操作系统分配的随机端口号。</li>
</ul>

<p>Socket通常用来实现client-server连接。<code class="language-plaintext highlighter-rouge">java.net</code>包中定义的两个类<code class="language-plaintext highlighter-rouge">Socket</code>和<code class="language-plaintext highlighter-rouge">ServerSocket</code>,分别用来实现双向连接的<code class="language-plaintext highlighter-rouge">client</code>和<code class="language-plaintext highlighter-rouge">server</code>端.</p>

<p>创建<code class="language-plaintext highlighter-rouge">TCP Socket</code>需要的四个信息：</p>

<ul>
  <li>本地系统的<code class="language-plaintext highlighter-rouge">IP</code></li>
  <li>本地应用程序使用的<code class="language-plaintext highlighter-rouge">TCP</code>端口号</li>
  <li>远程系统的<code class="language-plaintext highlighter-rouge">IP</code></li>
  <li>远程应用程序相应的<code class="language-plaintext highlighter-rouge">TCP</code>端口号</li>
</ul>

<h3 id="inetaddress类">InetAddress类</h3>

<p><code class="language-plaintext highlighter-rouge">InetAddress</code> 类表示互联网协议 (IP) 地址。它提供了一种将 IP 地址和主机名之间进行转换的方法，以及创建原始套接字时所需的一些其他方法。<code class="language-plaintext highlighter-rouge">InetAddress</code> 类是用于网络编程的基础之一，可以用来确定主机的 IP 地址，或者将 IP 地址转换为主机名。</p>

<p>要获取<code class="language-plaintext highlighter-rouge">InetAddress</code> 类实例，可以使用其静态方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">InetAddress getByAddress(byte[] addr)</code>：根据原始 IP 地址获取 <code class="language-plaintext highlighter-rouge">InetAddress</code> 实例。</li>
  <li><code class="language-plaintext highlighter-rouge">InetAddress getByAddress(String host, byte[] addr)</code>：根据主机名和原始 IP 地址获取 <code class="language-plaintext highlighter-rouge">InetAddress</code> 实例。</li>
  <li><code class="language-plaintext highlighter-rouge">InetAddress getByName(String host)</code>：根据主机名获取 <code class="language-plaintext highlighter-rouge">InetAddress</code> 实例。</li>
  <li><code class="language-plaintext highlighter-rouge">InetAddress[] getAllByName(String host)</code>：根据主机名获取所有与之关联的 <code class="language-plaintext highlighter-rouge">InetAddress</code> 实例数组。</li>
  <li><code class="language-plaintext highlighter-rouge">InetAddress getLocalHost()</code>：获取本地主机的 <code class="language-plaintext highlighter-rouge">InetAddress</code> 实例。</li>
</ul>

<p>这些静态方法可用于创建 <code class="language-plaintext highlighter-rouge">InetAddress</code> 实例，以便与网络通信。</p>

<p><code class="language-plaintext highlighter-rouge">InetAddress</code> 类的常用方法包括：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getHostName()</code>：获取主机名。</li>
  <li><code class="language-plaintext highlighter-rouge">getCanonicalHostName()</code>：获取主机的全限定域名。</li>
  <li><code class="language-plaintext highlighter-rouge">getHostAddress()</code>：获取主机的 IP 地址字符串。</li>
  <li><code class="language-plaintext highlighter-rouge">isReachable(int timeout)</code>：测试是否可以达到该主机，在指定的超时时间内。</li>
  <li><code class="language-plaintext highlighter-rouge">isReachable(NetworkInterface netif, int ttl, int timeout)</code>：测试是否可以达到该主机，使用指定的网络接口和生存时间（TTL）。</li>
</ul>

<p>这些方法可用于获取主机名、IP 地址、测试主机的可达性等操作。</p>

<h3 id="socket类">Socket类</h3>

<p><code class="language-plaintext highlighter-rouge">Socket</code> 类在 Java 网络编程中扮演着重要的角色，它用于实现网络中的两个端点之间的通信。一个 <code class="language-plaintext highlighter-rouge">Socket</code> 实例表示一个网络中的端点，它可以用于发送和接收数据。<code class="language-plaintext highlighter-rouge">Socket</code> 可以连接到远程主机的某个端口，以便与之通信，也可以监听本地端口，等待其他程序的连接请求。</p>

<p>总的来说，<code class="language-plaintext highlighter-rouge">Socket</code> 的主要作用包括：</p>

<ul>
  <li><strong>建立连接：</strong> 客户端使用 <code class="language-plaintext highlighter-rouge">Socket</code> 来连接到服务器端的主机和端口，从而建立网络连接。</li>
  <li><strong>发送和接收数据：</strong> 通过 <code class="language-plaintext highlighter-rouge">Socket</code> 实例，可以发送数据到连接的另一端，并从另一端接收数据。</li>
  <li><strong>实现网络应用：</strong> <code class="language-plaintext highlighter-rouge">Socket</code> 是实现网络应用的基础，例如 Web 客户端、服务器、邮件客户端等。</li>
</ul>

<p>在 Java 中，<code class="language-plaintext highlighter-rouge">Socket</code> 类用于实现传输层的 TCP 协议，而 <code class="language-plaintext highlighter-rouge">ServerSocket</code> 则用于在服务器端监听和接受客户端连接请求。</p>

<p><strong>Socket类构造器</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Socket()</code>: 创建一个未连接的Socket对象。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Socket(InetAddress address, int port)</code>: 创建一个Socket对象，并将其连接到指定的远程地址和端口号。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">Socket(InetAddress address, int port, boolean stream)</code>: 创建一个Socket对象，并将其连接到指定的远程地址和端口号，指定是否使用流模式。</li>
  <li><code class="language-plaintext highlighter-rouge">Socket(InetAddress address, int port, InetAddress localAddr, int localPort)</code>: 创建一个Socket对象，并将其连接到指定的远程地址和端口号，并绑定到指定的本地地址和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">Socket(String host, int port)</code>: 创建一个Socket对象，并将其连接到指定的远程主机名和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">Socket(String host, int port, boolean stream)</code>: 创建一个Socket对象，并将其连接到指定的远程主机名和端口号，指定是否使用流模式。</li>
  <li><code class="language-plaintext highlighter-rouge">Socket(String host, int port, InetAddress localAddr, int localPort)</code>: 创建一个Socket对象，并将其连接到指定的远程主机名和端口号，并绑定到指定的本地地址和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">ServerSocket(int port)</code>: 创建一个<code class="language-plaintext highlighter-rouge">ServerSocket</code>对象，绑定到指定的端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">ServerSocket(int port, int count)</code>: 创建一个<code class="language-plaintext highlighter-rouge">ServerSocket</code>对象，绑定到指定的端口号，并指定等待连接的队列长度。</li>
</ul>

<p><strong>Socket的常用方法</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">connect(SocketAddress endpoint)</code>: 连接到指定的远程端点。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getInputStream()</code>: 返回此套接字的输入流。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">getOutputStream()</code>: 返回此套接字的输出流。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">close()</code>: 关闭套接字连接。</li>
  <li><code class="language-plaintext highlighter-rouge">isConnected()</code>: 返回套接字连接的状态。</li>
  <li><code class="language-plaintext highlighter-rouge">isClosed()</code>: 返回套接字是否已关闭。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getInetAddress()</code>: 获取远程连接的IP地址。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">getLocalAddress()</code>: 获取本地连接的IP地址。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getPort()</code>: 获取远程连接的端口号。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">getLocalPort()</code>: 获取本地连接的端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">setSoTimeout(int timeout)</code>: 设置套接字的读取超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">setKeepAlive(boolean on)</code>: 设置套接字是否在空闲时保持连接。</li>
  <li><code class="language-plaintext highlighter-rouge">setTcpNoDelay(boolean on)</code>: 设置是否启用 Nagle 算法。</li>
</ul>

<h3 id="serversocket类">ServerSocket类</h3>

<p><code class="language-plaintext highlighter-rouge">ServerSocket</code> 类是 Java 网络编程中用于创建服务器端的类。通过 <code class="language-plaintext highlighter-rouge">ServerSocket</code>，可以监听指定的端口，等待客户端的连接请求，并在建立连接后与客户端进行通信。</p>

<p>一般来说，使用 <code class="language-plaintext highlighter-rouge">ServerSocket</code> 的基本流程如下：</p>

<ol>
  <li>创建一个 <code class="language-plaintext highlighter-rouge">ServerSocket</code> 实例，并指定服务器监听的端口。</li>
  <li>调用 <code class="language-plaintext highlighter-rouge">ServerSocket</code> 的 <code class="language-plaintext highlighter-rouge">accept()</code> 方法，该方法会阻塞程序，直到有客户端连接请求到达。</li>
  <li>一旦有连接请求到达，<code class="language-plaintext highlighter-rouge">accept()</code> 方法会返回一个 <code class="language-plaintext highlighter-rouge">Socket</code> 实例，代表与客户端的连接。</li>
  <li>使用返回的 <code class="language-plaintext highlighter-rouge">Socket</code> 实例与客户端进行通信，可以发送和接收数据。</li>
  <li>当通信结束后，关闭 <code class="language-plaintext highlighter-rouge">Socket</code> 实例，并继续等待下一个连接请求。</li>
</ol>

<p><strong>构造器：</strong></p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">ServerSocket(int port)</code>：用指定的端口<code class="language-plaintext highlighter-rouge">port</code>来创建一个侦听<code class="language-plaintext highlighter-rouge">Socket</code>。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">ServerSocket(int port, int backlog)</code>：加上一个用来改变连接队列长度的参数<code class="language-plaintext highlighter-rouge">backlog</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">ServerSocket(int port, int backlog, InetAddress localAddr)</code>：在机器存在多个<code class="language-plaintext highlighter-rouge">IP</code>地址的情况下，允许通过<code class="language-plaintext highlighter-rouge">localAddr</code>这个参数来指定侦听的<code class="language-plaintext highlighter-rouge">IP</code>地址。</li>
</ul>

<p><strong>常用方法：</strong></p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">accept()</code>: 监听并接受到此套接字的连接。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">bind(SocketAddress endpoint)</code>: 将套接字绑定到特定的本地地址和端口。</li>
  <li><code class="language-plaintext highlighter-rouge">close()</code>: 关闭套接字。</li>
  <li><code class="language-plaintext highlighter-rouge">getInetAddress()</code>: 返回此套接字的本地地址。</li>
  <li><code class="language-plaintext highlighter-rouge">getLocalPort()</code>: 返回此套接字绑定的本地端口。</li>
  <li><code class="language-plaintext highlighter-rouge">setSoTimeout(int timeout)</code>: 设置通过<code class="language-plaintext highlighter-rouge">accept()</code>方法接受客户端连接的超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">getSoTimeout()</code>: 获取通过<code class="language-plaintext highlighter-rouge">accept()</code>方法接受客户端连接的超时时间。</li>
</ul>

<p>这些方法可用于管理<code class="language-plaintext highlighter-rouge">ServerSocket</code>的状态并与客户端进行通信。</p>

<h3 id="tcp使用实例">TCP使用实例</h3>

<p>服务端程序编写</p>

<ol>
  <li>调用<code class="language-plaintext highlighter-rouge">ServerSocket(int port)</code>创建一个服务端套接字，并绑定到指定端口上；</li>
  <li>调用<code class="language-plaintext highlighter-rouge">accept()</code>监听链接请求，如果客户端请求链接，则接受链接，返回通信套接字；</li>
  <li>调用<code class="language-plaintext highlighter-rouge">socket</code>类的<code class="language-plaintext highlighter-rouge">getOutputStream()</code>和<code class="language-plaintext highlighter-rouge">getlnputStream()</code>获取输入流和输出流</li>
  <li>关闭<code class="language-plaintext highlighter-rouge">socket</code>；</li>
</ol>

<p>客户端程序编写</p>

<ol>
  <li>调用<code class="language-plaintext highlighter-rouge">Socket()</code>创建流套接字，并链接到服务端；</li>
  <li>调用<code class="language-plaintext highlighter-rouge">socket</code>类的<code class="language-plaintext highlighter-rouge">getOutputStream()</code>和<code class="language-plaintext highlighter-rouge">getInputStream()</code>获取输入流和输出流；</li>
  <li>关闭<code class="language-plaintext highlighter-rouge">socket</code>；</li>
</ol>

<p>客户端Socket的建立，链接服务器。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.net.ServerSocket</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.net.Socket</span><span class="o">;</span>  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoteTest</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="k">try</span> <span class="o">{</span>  
            <span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="s">"127.0.0.1"</span><span class="o">,</span> <span class="mi">2000</span><span class="o">);</span>  
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>  
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Error:"</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>  
        <span class="o">}</span>  
    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<p>服务器端Socket的建立</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.net.ServerSocket</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.net.Socket</span><span class="o">;</span>  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoteTest</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="nc">ServerSocket</span> <span class="n">server</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>  
        <span class="k">try</span> <span class="o">{</span>  
            <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>  
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>  
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"can not listen to :"</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>  
        <span class="o">}</span>  
        <span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>  
        <span class="k">try</span> <span class="o">{</span>  
            <span class="n">socket</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>  
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>  
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Error:"</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>  
        <span class="o">}</span>  
    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<p>打开输入/出流</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">PrintStream</span> <span class="n">os</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">BufferedOutputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>  
<span class="nc">DataInputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataInputStream</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
</code></pre></div></div>

<p>关闭Socket</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">os</span><span class="o">.</span><span class="na">close</span><span class="o">();</span><span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span><span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<p>简单的<code class="language-plaintext highlighter-rouge">client</code>/<code class="language-plaintext highlighter-rouge">server</code>程序</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd.test</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.net.ConnectException</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.net.ServerSocket</span><span class="o">;</span>  
<span class="kn">import</span> <span class="nn">java.net.Socket</span><span class="o">;</span>  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoteTest</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
    <span class="o">}</span>  
<span class="o">}</span>  
<span class="kd">class</span> <span class="nc">Server1</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="k">try</span> <span class="o">{</span>  
            <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"resource"</span><span class="o">)</span>  
            <span class="nc">ServerSocket</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="mi">8888</span><span class="o">);</span>  
            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>  
                <span class="nc">Socket</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>  
                <span class="nc">OutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="n">s1</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>  
                <span class="nc">DataOutputStream</span> <span class="n">dos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataOutputStream</span><span class="o">(</span><span class="n">os</span><span class="o">);</span>  
                <span class="n">dos</span><span class="o">.</span><span class="na">writeUTF</span><span class="o">(</span><span class="s">"Hello,"</span> <span class="o">+</span> <span class="n">s1</span><span class="o">.</span><span class="na">getInetAddress</span><span class="o">()</span> <span class="o">+</span> <span class="s">"port#"</span> <span class="o">+</span> <span class="n">s1</span><span class="o">.</span><span class="na">getPort</span><span class="o">()</span> <span class="o">+</span> <span class="s">"bye-bye!"</span><span class="o">);</span>  
                <span class="n">dos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>  
                <span class="n">s1</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>  
                <span class="c1">// s.close();  </span>
            <span class="o">}</span>  
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>  
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>  
        <span class="o">}</span>  
    <span class="o">}</span>  
<span class="o">}</span>  
<span class="kd">class</span> <span class="nc">Client1</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="k">try</span> <span class="o">{</span>  
            <span class="nc">Socket</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="s">"127.0.0.1"</span><span class="o">,</span> <span class="mi">8888</span><span class="o">);</span>  
            <span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span><span class="n">s1</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>  
            <span class="nc">DataInputStream</span> <span class="n">dis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataInputStream</span><span class="o">(</span><span class="n">is</span><span class="o">);</span>  
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dis</span><span class="o">.</span><span class="na">readUTF</span><span class="o">());</span>  
            <span class="n">dis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>  
            <span class="n">s1</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>  
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ConnectException</span> <span class="n">connExc</span><span class="o">)</span> <span class="o">{</span>  
            <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"服务器连接失败！"</span><span class="o">);</span>  
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>  
        <span class="o">}</span>  
    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<p>先运行服务器,然后运行客户端,会收到服务器发的信息.</p>

<p>例子二</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Server1</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">ServerSocket</span> <span class="n">server</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="mi">1234</span><span class="o">);</span>
            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Socket</span> <span class="n">sk</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
                <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="n">sk</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">()));</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"你好，端口"</span> <span class="o">+</span> <span class="n">sk</span><span class="o">.</span><span class="na">getPort</span><span class="o">()</span> <span class="o">+</span> <span class="s">"，你成功连接了服务器："</span> <span class="o">+</span> <span class="n">server</span><span class="o">.</span><span class="na">getLocalPort</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
                <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">sk</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sk</span><span class="o">.</span><span class="na">getPort</span><span class="o">()</span> <span class="o">+</span><span class="s">":"</span><span class="o">+</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
                <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">server</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Client1</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Socket</span> <span class="n">client</span><span class="o">;</span>
        <span class="nc">PrintStream</span> <span class="n">ps</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">,</span> <span class="mi">1234</span><span class="o">);</span>
            <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="n">ps</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintStream</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>
            <span class="n">ps</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"哦，真好！"</span><span class="o">);</span>
            <span class="n">ps</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
            <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>例子三：</p>

<p>服务端：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Server</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">ServerSocket</span> <span class="n">ss</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="mi">6666</span><span class="o">);</span> <span class="c1">// 监听指定端口</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"服务器正在运行..."</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
            <span class="nc">Socket</span> <span class="n">sock</span> <span class="o">=</span> <span class="n">ss</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span><span class="c1">//每有一个新客户端就返回一个Socket</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"connected from "</span> <span class="o">+</span> <span class="n">sock</span><span class="o">.</span><span class="na">getRemoteSocketAddress</span><span class="o">());</span>
            <span class="c1">// 用新线程处理</span>
            <span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
                <span class="k">try</span> <span class="o">(</span><span class="nc">InputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
                     <span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">()</span>
                <span class="o">)</span> <span class="o">{</span>
                    <span class="nc">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
                    <span class="nc">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
                    <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"你好!\n"</span><span class="o">);</span><span class="c1">//注意加换行符，要不然客户端不会结束读取。</span>
                    <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
                    <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span><span class="c1">//若没有新内容则阻塞。</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"再见"</span><span class="o">))</span> <span class="o">{</span>
                            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"再见\n"</span><span class="o">);</span>
                            <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
                            <span class="k">break</span><span class="o">;</span><span class="c1">//结束线程</span>
                        <span class="o">}</span>
                        <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"好的: "</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
                        <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="n">sock</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
                    <span class="o">}</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"客户端已断开连接."</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">});</span>
            <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>代码<code class="language-plaintext highlighter-rouge">ss.accept()</code>表示每当有新的客户端连接进来后，就返回一个<code class="language-plaintext highlighter-rouge">Socket</code>实例，这个<code class="language-plaintext highlighter-rouge">Socket</code>实例就是用来和刚连接的客户端进行通信的。由于客户端很多，要实现并发处理，就必须为每个新的<code class="language-plaintext highlighter-rouge">Socket</code>创建一个新线程来处理，这样，主线程的作用就是接收新的连接，每当收到新连接后，就创建一个新线程进行处理。</p>

<p>如果没有客户端连接进来，<code class="language-plaintext highlighter-rouge">accept()</code>方法会阻塞并一直等待。如果有多个客户端同时连接进来，<code class="language-plaintext highlighter-rouge">ServerSocket</code>会把连接扔到队列里，然后一个一个处理。对于Java程序而言，只需要通过循环不断调用<code class="language-plaintext highlighter-rouge">accept()</code>就可以获取新的连接。</p>

<p>客户端：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">Socket</span> <span class="n">sock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">,</span> <span class="mi">6666</span><span class="o">);</span> <span class="c1">// 连接指定服务器端口</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">InputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
             <span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">var</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
            <span class="kt">var</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
            <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[服务器] "</span> <span class="o">+</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"&gt;&gt;&gt; "</span><span class="o">);</span> <span class="c1">// 打印提示</span>
                <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span> <span class="c1">// 读取一行输入</span>
                <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
                <span class="n">writer</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span><span class="c1">//换行符</span>
                <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
                <span class="nc">String</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span><span class="c1">// 若没有新内容则阻塞。</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;&lt;&lt; "</span> <span class="o">+</span> <span class="n">resp</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">resp</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"再见"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">sock</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"断开连接."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当Socket连接创建成功后，无论是服务器端，还是客户端，都使用<code class="language-plaintext highlighter-rouge">Socket</code>实例进行网络通信。因为TCP是一种基于流的协议，因此，Java标准库使用<code class="language-plaintext highlighter-rouge">InputStream</code>和<code class="language-plaintext highlighter-rouge">OutputStream</code>来封装Socket的数据流，这样使用Socket的流，和普通IO流类似：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 用于读取网络数据:</span>
<span class="nc">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
<span class="c1">// 用于写入网络数据:</span>
<span class="nc">OutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</code></pre></div></div>

<p>如果不调用<code class="language-plaintext highlighter-rouge">flush()</code>，很可能会发现，客户端和服务器都收不到数据，这并不是Java标准库的设计问题，而是以流的形式写入数据的时候，并不是一写入就立刻发送到网络，而是先写入内存缓冲区，直到缓冲区满了以后，才会一次性真正发送到网络，这样设计的目的是为了提高传输效率。如果缓冲区的数据很少，而又想强制把这些数据发送到网络，就必须调用<code class="language-plaintext highlighter-rouge">flush()</code>强制把缓冲区数据发送出去。</p>

<p><strong>URL与Socket通信的区别</strong></p>

<p>利用<code class="language-plaintext highlighter-rouge">URL</code>进行通信与利用<code class="language-plaintext highlighter-rouge">socket</code>进行通信有许多相似之处。它们都是利用建立连接、获取流来进行通信。它们的区别在：</p>

<p>利用<code class="language-plaintext highlighter-rouge">socket</code>进行通信时，在服务器端运行一个<code class="language-plaintext highlighter-rouge">socket</code>通信程序。服务器端不停地监听某个端口，等待客户的连接申请，接到申请后建立连接并进行通信，所以，在<code class="language-plaintext highlighter-rouge">socket</code>通信方式中，服务器是主动等待连接通信的到来。</p>

<p>利用<code class="language-plaintext highlighter-rouge">URL</code>进行通信时，在服务器端常驻一个<code class="language-plaintext highlighter-rouge">CGI</code>程序，但它一直处于休眠状态。只有在客户端要求建立连接时才被激活，然后点用户进行通信。所以，在<code class="language-plaintext highlighter-rouge">URL</code>通信方式中，服务器是被动等待连接通信的到来。</p>

<h2 id="udp通信">UDP通信</h2>

<p>在基于<code class="language-plaintext highlighter-rouge">TCP/IP</code>网络体系结构的网络中主要使用<code class="language-plaintext highlighter-rouge">TCP</code>和<code class="language-plaintext highlighter-rouge">UDP</code>（<code class="language-plaintext highlighter-rouge">UserDatagramProtocol</code>，用户数据报协议）来实现数据通信。<code class="language-plaintext highlighter-rouge">TCP</code>是一种面向连接可靠的传输，它能确保数据传送正确到达目的端；而<code class="language-plaintext highlighter-rouge">UDP</code>则是一种面向无连接的不可靠传输协议，它<strong>不能</strong>确保数据能正确到达目的端，但是它能<strong>提高网络通信的效率</strong>。</p>

<p>在Java中使用UDP编程，仍然需要使用Socket，因为应用程序在使用UDP时必须指定网络接口（IP）和端口号。注意：UDP端口和TCP端口虽然都使用0~65535，但他们是两套独立的端口，即一个应用程序用TCP占用了端口1234，不影响另一个应用程序用UDP占用端口1234。</p>

<p><strong>UDP Socket特性</strong></p>

<p>通过UDP的UDP端口来实现UDP协议的网络通信。</p>

<p>其工作过程如下：</p>

<ul>
  <li>创建一个适当的要发送且注明收发人地址数据报；</li>
  <li>为一个特定的应用程序建立一个传输端口来传送和接收数据包；</li>
  <li>将数据报插入一个传输端口中进行传输；</li>
  <li>等待接收来自于传输端口的一个数据报；</li>
  <li>解码数据报以解开消息、接收者和其它信息；</li>
</ul>

<h3 id="datagramsocket类">DatagramSocket类</h3>

<p><code class="language-plaintext highlighter-rouge">DatagramSocket</code> 类是用于实现 UDP 协议的套接字。</p>

<p>构造方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DatagramSocket()</code>：通常用于客户端编程，它并没有特定监听的端囗，仅仅使用一个临时的。程序会让操作系统分配一个可用的端口。（使用这个构造方法时，系统会分配给他一个空闲的端口，但是也可以自己指定一个）</li>
  <li><strong><code class="language-plaintext highlighter-rouge">DatagramSocket(int port)</code>：创建实例，并固定监听<code class="language-plaintext highlighter-rouge">Port</code>端口的报文。通常用于服务端</strong></li>
  <li><code class="language-plaintext highlighter-rouge">DatagramSocket(int port,InetAddress localAddr)</code>：这是个非常有用的构建器，当一台机器拥有多于一个IP地址的时候，由它创建的实例仅仅接收来自<code class="language-plaintext highlighter-rouge">LocalAddr</code>的报文。</li>
</ul>

<p>方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">void bind(SocketAddress addr)</code>：将套接字绑定到指定的本地地址和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">void close()</code>：关闭套接字。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">void connect(InetAddress address, int port)</code>：将套接字连接到指定的远程主机和端口号。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void disconnect()</code>：断开与远程主机的连接。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean getBroadcast()</code>：获取套接字的广播状态。</li>
  <li><code class="language-plaintext highlighter-rouge">Object getOption(int optID)</code>：获取套接字选项的当前值。</li>
  <li><code class="language-plaintext highlighter-rouge">int getPort()</code>：获取套接字绑定的本地端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">SocketAddress getLocalSocketAddress()</code>：获取套接字绑定的本地地址。</li>
  <li><code class="language-plaintext highlighter-rouge">InetAddress getLocalAddress()</code>：获取套接字绑定的本地 IP 地址。</li>
  <li><code class="language-plaintext highlighter-rouge">int getLocalPort()</code>：获取套接字绑定的本地端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">SocketAddress getRemoteSocketAddress()</code>：获取套接字连接的远程地址。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isBound()</code>：检查套接字是否绑定到本地地址。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isConnected()</code>：检查套接字是否连接到远程主机。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">void receive(DatagramPacket p)</code>：接收一个数据包。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">void send(DatagramPacket p)</code>：发送一个数据包。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void setBroadcast(boolean on)</code>：设置套接字的广播状态。</li>
  <li><code class="language-plaintext highlighter-rouge">void setOption(int optID, Object value)</code>：设置套接字选项的值。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">void setSoTimeout(int timeout)</code>：设置套接字的超时时间（接收数据时的超时时间）。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">int getSoTimeout()</code>：获取套接字的超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">String toString()</code>：返回套接字的字符串表示形式。</li>
</ul>

<hr />

<h3 id="datagrampacket类">DatagramPacket类</h3>

<p><code class="language-plaintext highlighter-rouge">DatagramPacket</code> 类表示数据报包，它包含了要发送或接收的数据以及目标地址和端口号等信息。</p>

<p>常用构造方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">DatagramPacket(byte[] buf, int length)</code>: 创建一个数据报包，用于发送长度为 <code class="language-plaintext highlighter-rouge">length</code> 的数据，数据存储在 <code class="language-plaintext highlighter-rouge">buf</code> 中。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">DatagramPacket(byte[] buf, int length, InetAddress address, int port)</code>: 创建一个数据报包，用于发送长度为 <code class="language-plaintext highlighter-rouge">length</code> 的数据到指定的地址和端口。</li>
  <li><code class="language-plaintext highlighter-rouge">DatagramPacket(byte[] buf, int offset, int length)</code>: 创建一个数据报包，用于发送从 <code class="language-plaintext highlighter-rouge">buf</code> 的偏移量 <code class="language-plaintext highlighter-rouge">offset</code> 开始的 <code class="language-plaintext highlighter-rouge">length</code> 长度的数据。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port)</code>: 创建一个数据报包，用于发送从 <code class="language-plaintext highlighter-rouge">buf</code> 的偏移量 <code class="language-plaintext highlighter-rouge">offset</code> 开始的 <code class="language-plaintext highlighter-rouge">length</code> 长度的数据到指定的地址和端口。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">DatagramPacket(byte[] buf, int length, SocketAddress address)</code>: 创建一个数据报包，用于发送长度为 <code class="language-plaintext highlighter-rouge">length</code> 的数据到指定的地址和端口。</li>
  <li><code class="language-plaintext highlighter-rouge">DatagramPacket(byte[] buf, int offset, int length, SocketAddress address)</code>: 创建一个数据报包，用于发送从 <code class="language-plaintext highlighter-rouge">buf</code> 的偏移量 <code class="language-plaintext highlighter-rouge">offset</code> 开始的 <code class="language-plaintext highlighter-rouge">length</code> 长度的数据到指定的地址和端口。</li>
</ul>

<p>这些构造方法可以用于创建不同类型的数据报包，以便发送或接收数据。</p>

<p>方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DatagramPacket(byte[] buf, int length)</code>：使用指定的缓冲区和长度创建一个 DatagramPacket，用于接收数据。</li>
  <li><code class="language-plaintext highlighter-rouge">DatagramPacket(byte[] buf, int length, InetAddress address, int port)</code>：使用指定的缓冲区、长度、远程主机地址和端口号创建一个 DatagramPacket，用于发送数据。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">byte[] getData()</code>：返回数据缓冲区。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">void setData(byte[] buf)</code>：设置数据缓冲区。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">int getLength()</code>：返回数据缓冲区的长度。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void setLength(int length)</code>：设置数据缓冲区的长度。</li>
  <li><code class="language-plaintext highlighter-rouge">InetAddress getAddress()</code>：返回远程主机的地址。</li>
  <li><code class="language-plaintext highlighter-rouge">void setAddress(InetAddress address)</code>：设置远程主机的地址。</li>
  <li><code class="language-plaintext highlighter-rouge">int getPort()</code>：返回远程主机的端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">void setPort(int port)</code>：设置远程主机的端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">SocketAddress getSocketAddress()</code>：返回远程主机的地址和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">void setSocketAddress(SocketAddress address)</code>：设置远程主机的地址和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">void setData(byte[] buf, int offset, int length)</code>：设置数据缓冲区的一部分。</li>
  <li><code class="language-plaintext highlighter-rouge">void setData(ByteBuffer buf)</code>：设置数据缓冲区。</li>
  <li><code class="language-plaintext highlighter-rouge">ByteBuffer getData()</code>：返回数据缓冲区。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">int getOffset()</code>：返回数据缓冲区的偏移量。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void setOffset(int offset)</code>：设置数据缓冲区的偏移量。</li>
  <li><code class="language-plaintext highlighter-rouge">void setLength(int length, InetAddress address, int port)</code>：设置数据缓冲区的长度、远程主机地址和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">void setAddress(InetAddress address, int port)</code>：设置远程主机的地址和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">void setAddress(SocketAddress address)</code>：设置远程主机的地址和端口号。</li>
  <li><code class="language-plaintext highlighter-rouge">SocketAddress getLocalSocketAddress()</code>：返回本地主机的地址和端口号。</li>
</ul>

<p>这些方法可以在数据报包中读取和设置数据，以及获取目标地址和端口号等信息。</p>

<hr />

<h3 id="udp使用实例">UDP使用实例</h3>

<p>在服务器端，使用UDP也需要监听指定的端口。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">DatagramSocket</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatagramSocket</span><span class="o">(</span><span class="mi">6666</span><span class="o">);</span> <span class="c1">// 监听指定端口</span>
<span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span> <span class="c1">// 无限循环</span>
    <span class="c1">// 数据缓冲区:</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
    <span class="nc">DatagramPacket</span> <span class="n">packet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatagramPacket</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="n">ds</span><span class="o">.</span><span class="na">receive</span><span class="o">(</span><span class="n">packet</span><span class="o">);</span> <span class="c1">// 收取一个UDP数据包,阻塞</span>
    <span class="c1">// 收取到的数据存储在buffer中，由packet.getOffset(), packet.getLength()指定起始位置和长度，将其按UTF-8编码转换为String:</span>
    <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">packet</span><span class="o">.</span><span class="na">getData</span><span class="o">(),</span> <span class="n">packet</span><span class="o">.</span><span class="na">getOffset</span><span class="o">(),</span> <span class="n">packet</span><span class="o">.</span><span class="na">getLength</span><span class="o">(),</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="c1">// 发送数据:</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="s">"ACK"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
    <span class="n">packet</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span><span class="c1">//设置数据包。</span>
    <span class="n">ds</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">packet</span><span class="o">);</span><span class="c1">//发送</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当服务器收到一个<code class="language-plaintext highlighter-rouge">DatagramPacket</code>后，通常必须立刻回复一个或多个UDP包，因为客户端地址在<code class="language-plaintext highlighter-rouge">DatagramPacket</code>中，每次收到的<code class="language-plaintext highlighter-rouge">DatagramPacket</code>可能是不同的客户端，如果不回复，客户端就收不到任何UDP包。UDP 是无连接的协议，服务器在接收到 UDP 数据报后，通常需要<strong>立即</strong>给客户端发送响应，以确保通信的连续性和可靠性。没有响应的话，客户端<strong>可能会超时或者认为连接失败</strong>。</p>

<p>客户端使用UDP时，只需要直接向服务器端发送UDP包，然后接收返回的UDP包：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">DatagramSocket</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatagramSocket</span><span class="o">();</span>
<span class="n">ds</span><span class="o">.</span><span class="na">setSoTimeout</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span><span class="c1">//设置超时时间</span>
<span class="n">ds</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="nc">InetAddress</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">),</span> <span class="mi">6666</span><span class="o">);</span> <span class="c1">// 连接指定服务器和端口</span>

<span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
<span class="nc">DatagramPacket</span> <span class="n">packet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatagramPacket</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
<span class="n">ds</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">packet</span><span class="o">);</span><span class="c1">// 发送</span>

<span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
<span class="n">packet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatagramPacket</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
<span class="n">ds</span><span class="o">.</span><span class="na">receive</span><span class="o">(</span><span class="n">packet</span><span class="o">);</span><span class="c1">// 收取一个UDP数据包,阻塞,超过超时时间则异常</span>
<span class="nc">String</span> <span class="n">resp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">packet</span><span class="o">.</span><span class="na">getData</span><span class="o">(),</span> <span class="n">packet</span><span class="o">.</span><span class="na">getOffset</span><span class="o">(),</span> <span class="n">packet</span><span class="o">.</span><span class="na">getLength</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">resp</span><span class="o">);</span>
<span class="n">ds</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span><span class="c1">// 关闭</span>
<span class="n">ds</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<p>客户端创建<code class="language-plaintext highlighter-rouge">DatagramSocket</code>实例时并不需要指定端口，而是由操作系统自动指定一个当前未使用的端口。紧接着，调用<code class="language-plaintext highlighter-rouge">setSoTimeout(1000)</code>设定超时1秒，意思是后续接收UDP包时，等待时间最多不会超过1秒，否则在没有收到UDP包时，客户端会无限等待下去。这一点和服务器端不一样，服务器端可以无限等待，因为它本来就被设计成长时间运行。</p>

<p>客户端的<code class="language-plaintext highlighter-rouge">DatagramSocket</code>还调用了一个<code class="language-plaintext highlighter-rouge">connect()</code>方法“连接”到指定的服务器端。</p>

<p>这个<code class="language-plaintext highlighter-rouge">connect()</code>方法不是真连接，它是为了在客户端的<code class="language-plaintext highlighter-rouge">DatagramSocket</code>实例中保存服务器端的IP和端口号，确保这个<code class="language-plaintext highlighter-rouge">DatagramSocket</code>实例只能往指定的地址和端口发送UDP包，不能往其他地址和端口发送。这么做不是UDP的限制，而是Java内置了安全检查。</p>

<p>后续的收发数据和服务器端是一致的。通常来说，客户端必须先发UDP包，因为客户端不发UDP包，服务器端就根本不知道客户端的地址和端口号。</p>

<p>如果客户端认为通信结束，就可以调用<code class="language-plaintext highlighter-rouge">disconnect()</code>断开连接：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ds</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">disconnect()</code>也不是真正地断开连接，它只是清除了客户端<code class="language-plaintext highlighter-rouge">DatagramSocket</code>实例记录的远程服务器地址和端口号，这样，<code class="language-plaintext highlighter-rouge">DatagramSocket</code>实例就可以连接另一个服务器端。</p>

<p>如果客户端希望向两个不同的服务器发送UDP包，有两种方法：</p>

<ol>
  <li>客户端可以创建两个<code class="language-plaintext highlighter-rouge">DatagramSocket</code>实例，用<code class="language-plaintext highlighter-rouge">connect()</code>连接到不同的服务器；</li>
  <li>客户端也可以不调用<code class="language-plaintext highlighter-rouge">connect()</code>方法，而是在创建<code class="language-plaintext highlighter-rouge">DatagramPacket</code>的时候指定服务器地址，这样可以用一个<code class="language-plaintext highlighter-rouge">DatagramSocket</code>实例发送<code class="language-plaintext highlighter-rouge">DatagramPacket</code>到不同的服务器。</li>
</ol>

<p>不调用<code class="language-plaintext highlighter-rouge">connect()</code>方法的代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">DatagramSocket</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatagramSocket</span><span class="o">();</span>
<span class="n">ds</span><span class="o">.</span><span class="na">setSoTimeout</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
<span class="nc">InetAddress</span> <span class="n">localhost</span> <span class="o">=</span> <span class="nc">InetAddress</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">);</span>
<span class="c1">// 发送到localhost:6666:</span>
<span class="kt">byte</span><span class="o">[]</span> <span class="n">data1</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
<span class="kt">var</span> <span class="n">packet1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatagramPacket</span><span class="o">(</span><span class="n">data1</span><span class="o">,</span> <span class="n">data1</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">localhost</span><span class="o">,</span> <span class="mi">6666</span><span class="o">);</span>
<span class="n">ds</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">packet1</span><span class="o">);</span>
<span class="c1">// 发送到localhost:8888:</span>
<span class="kt">byte</span><span class="o">[]</span> <span class="n">data2</span> <span class="o">=</span> <span class="s">"Hi"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
<span class="kt">var</span> <span class="n">packet2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DatagramPacket</span><span class="o">(</span><span class="n">data2</span><span class="o">,</span> <span class="n">data2</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">localhost</span><span class="o">,</span> <span class="mi">8888</span><span class="o">);</span>
<span class="n">ds</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">packet2</span><span class="o">);</span>
<span class="c1">// 关闭:</span>
<span class="n">ds</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<h2 id="发送email">发送Email</h2>

<p>Email就是电子邮件。电子邮件的应用已经有几十年的历史了，我们熟悉的邮箱地址比如<code class="language-plaintext highlighter-rouge">abc@example.com</code>，邮件软件比如Outlook都是用来收发邮件的。</p>

<p>使用Java程序也可以收发电子邮件。我们先来看一下传统的邮件是如何发送的。</p>

<p>传统的邮件是通过邮局投递，然后从一个邮局到另一个邮局，最终到达用户的邮箱：</p>

<pre><code class="language-ascii">           ┌──────────┐    ┌──────────┐
           │PostOffice│    │PostOffice│     .───.
┌─────┐    ├──────────┤    ├──────────┤    (   ( )
│═══ ░│──▶│ ┌─┐ ┌┐┌┐  │──▶│ ┌─┐ ┌┐┌┐ │──▶ `─┬─'
└─────┘    │ │░│ └┘└┘ │    │ │░│ └┘└┘ │       │
           └─┴─┴──────┘    └─┴─┴──────┘       │
</code></pre>

<p>电子邮件的发送过程也是类似的，只不过是电子邮件是从用户电脑的邮件软件，例如Outlook，发送到邮件服务器上，可能经过若干个邮件服务器的中转，最终到达对方邮件服务器上，收件方就可以用软件接收邮件：</p>

<pre><code class="language-ascii">             ┌─────────┐    ┌─────────┐    ┌─────────┐
             │░░░░░░░░░│    │░░░░░░░░░│    │░░░░░░░░░│
┌───────┐    ├─────────┤    ├─────────┤    ├─────────┤    ┌───────┐
│░░░░░░░│    │░░░░░░░░░│    │░░░░░░░░░│    │░░░░░░░░░│    │░░░░░░░│
├───────┤    ├─────────┤    ├─────────┤    ├─────────┤    ├───────┤
│       │──▶│O ░░░░░░░│───▶│O ░░░░░░░│───▶│O ░░░░░░░│◀──│       │
└───────┘    └─────────┘    └─────────┘    └─────────┘    └───────┘
   MUA           MTA            MTA            MDA           MUA
</code></pre>

<p>类似Outlook这样的邮件软件称为MUA：Mail User Agent，意思是给用户服务的邮件代理；</p>

<p>邮件服务器则称为MTA：Mail Transfer Agent，意思是邮件中转的代理；</p>

<p>最终到达的邮件服务器称为MDA：Mail Delivery Agent，意思是邮件到达的代理。</p>

<p>电子邮件一旦到达MDA，就不再动了。实际上，电子邮件通常就存储在MDA服务器的硬盘上，然后等收件人通过软件或者登陆浏览器查看邮件。</p>

<p>MTA和MDA这样的服务器软件通常是现成的，我们不关心这些服务器内部是如何运行的。要发送邮件，我们关心的是如何编写一个MUA的软件，把邮件发送到MTA上。</p>

<p>MUA到MTA发送邮件的协议就是SMTP协议，它是Simple Mail Transport Protocol的缩写，使用标准端口25，也可以使用加密端口465或587。</p>

<p>SMTP协议是一个建立在TCP之上的协议，任何程序发送邮件都必须遵守SMTP协议。使用Java程序发送邮件时，无需关心SMTP协议的底层原理，只需要使用<code class="language-plaintext highlighter-rouge">JavaMail</code>这个标准API就可以直接发送邮件。</p>

<p>注：若在web邮箱中设置了“保存到已发送”，使用客户端SMTP服务发信时，已发邮件也会自动同步到网页端“已发送”文件夹内。</p>

<hr />

<p>假设准备使用自己的邮件地址<code class="language-plaintext highlighter-rouge">me@example.com</code>给小明发送邮件，已知小明的邮件地址是<code class="language-plaintext highlighter-rouge">xiaoming@somewhere.com</code>，发送邮件前，首先要确定作为MTA的邮件服务器地址和端口号。邮件服务器地址通常是<code class="language-plaintext highlighter-rouge">smtp.example.com</code>，端口号由邮件服务商确定使用25、465还是587。以下是一些常用邮件服务商的SMTP信息：</p>

<ul>
  <li>QQ邮箱：SMTP服务器是smtp.qq.com，端口是465/587；</li>
  <li>163邮箱：SMTP服务器是smtp.163.com，端口是465；</li>
  <li>Gmail邮箱：SMTP服务器是smtp.gmail.com，端口是465/587。</li>
</ul>

<p>有了SMTP服务器的域名和端口号，还需要SMTP服务器的登录信息，通常是使用自己的邮件地址作为用户名，登录口令是用户口令或者一个独立设置的SMTP口令。</p>

<p>使用<code class="language-plaintext highlighter-rouge">JavaMail</code>发送邮件，需要把<code class="language-plaintext highlighter-rouge">JavaMail</code>相关的两个依赖加入进来，注意版本号相同：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/jakarta.mail/jakarta.mail-api --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>jakarta.mail<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jakarta.mail-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/com.sun.mail/jakarta.mail --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.sun.mail<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jakarta.mail<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>这两个包一个是接口定义，一个是具体实现。如果使用早期的1.x版本，则需注意引入的包名有所不同：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/javax.mail/javax.mail-api --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.mail<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.mail-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.6.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/com.sun.mail/javax.mail --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.sun.mail<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.mail<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.6.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>并且代码引用的<code class="language-plaintext highlighter-rouge">jakarta.mail</code>需替换为<code class="language-plaintext highlighter-rouge">javax.mail</code>。</p>

<hr />

<h3 id="验证发送方信息">验证发送方信息</h3>

<p><code class="language-plaintext highlighter-rouge">Session</code>类是<code class="language-plaintext highlighter-rouge">JavaMail</code> API中表示邮件会话的类，它包含了创建和管理邮件的相关方法。以下是<code class="language-plaintext highlighter-rouge">Session</code>类的一些常用方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">getSession(Properties props, Authenticator authenticator)</code>：静态方法，用于获取<code class="language-plaintext highlighter-rouge">Session</code>实例。需要传入<code class="language-plaintext highlighter-rouge">Properties</code>对象和<code class="language-plaintext highlighter-rouge">Authenticator</code>对象来配置会话属性和认证信息。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">getTransport(String protocol)</code>：获取指定协议的<code class="language-plaintext highlighter-rouge">Transport</code>对象，用于发送邮件。</li>
  <li><code class="language-plaintext highlighter-rouge">getStore(String protocol)</code>：获取指定协议的<code class="language-plaintext highlighter-rouge">Store</code>对象，用于接收邮件。</li>
  <li><code class="language-plaintext highlighter-rouge">getDebug()</code>：获取调试模式的状态。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setDebug(boolean debug)</code>：设置调试模式的状态。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">setProtocolForAddress(String type, String protocol)</code>：设置指定地址类型对应的协议。</li>
  <li><code class="language-plaintext highlighter-rouge">setProvider(Provider provider)</code>：设置指定协议的提供者。</li>
  <li><code class="language-plaintext highlighter-rouge">getProperty(String name)</code>：获取指定属性名的属性值。</li>
  <li><code class="language-plaintext highlighter-rouge">setProperty(String name, String value)</code>：设置指定属性名的属性值。</li>
  <li><code class="language-plaintext highlighter-rouge">getDefaultInstance(Properties props, Authenticator authenticator)</code>：静态方法，获取默认的<code class="language-plaintext highlighter-rouge">Session</code>实例。</li>
</ul>

<p>这些方法可以帮配置和管理邮件会话，以及创建<code class="language-plaintext highlighter-rouge">Transport</code>和<code class="language-plaintext highlighter-rouge">Store</code>对象来发送和接收邮件。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">Session</code> 可以配置的一些常见属性包括：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">mail.smtp.host</code>: SMTP 服务器主机名。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">mail.smtp.port</code>: SMTP 服务器端口号。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">mail.smtp.auth</code>: 指定是否需要进行用户认证，通常为 <code class="language-plaintext highlighter-rouge">"true"</code>。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.starttls.enable</code>: 指定是否启用 STARTTLS 加密，通常为 <code class="language-plaintext highlighter-rouge">"true"</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.socketFactory.fallback</code>: 指定是否在连接失败时回退到普通套接字，通常为 <code class="language-plaintext highlighter-rouge">"false"</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.socketFactory.port</code>: 指定用于创建 SMTP 套接字的端口号，通常与 <code class="language-plaintext highlighter-rouge">mail.smtp.port</code> 相同。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.connectiontimeout</code>: 设置连接超时时间，以毫秒为单位。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.timeout</code>: 设置读取超时时间，以毫秒为单位。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.writetimeout</code>: 设置写入超时时间，以毫秒为单位。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.from</code>：设置发件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.user</code>：设置 SMTP 认证的用户名。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.password</code>：设置 SMTP 认证的密码。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">mail.smtp.socketFactory.class</code>: 指定用于创建 SMTP 套接字的 <code class="language-plaintext highlighter-rouge">SocketFactory</code> 类的名称， 可以设置为 <code class="language-plaintext highlighter-rouge">javax.net.ssl.SSLSocketFactory</code>，用于创建 SSL 套接字。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">mail.smtp.ssl.enable</code>：指定是否启用 SSL 安全连接。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.ssl.trust</code>：指定信任的 SSL 服务器主机名列表。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.ssl.protocols</code>：指定使用的 SSL 协议列表。</li>
  <li><code class="language-plaintext highlighter-rouge">mail.smtp.ssl.ciphersuites</code>：指定使用的 SSL 加密套件列表。</li>
</ul>

<p>中间的协议名改成对应的协议。这些属性可以用于配置 <code class="language-plaintext highlighter-rouge">Session</code> 实例，以控制邮件发送的行为和连接设置。</p>

<hr />

<p>通过<code class="language-plaintext highlighter-rouge">JavaMail</code> API连接到SMTP服务器上：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">jakarta.mail.Authenticator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.PasswordAuthentication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.Session</span><span class="o">;</span>
<span class="o">...</span>
<span class="c1">// 服务器地址:</span>
<span class="nc">String</span> <span class="n">smtp</span> <span class="o">=</span> <span class="s">"smtp.163.com"</span><span class="o">;</span>
<span class="c1">// 登录用户名:</span>
<span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">"XXX@163.com"</span><span class="o">;</span>
<span class="c1">// 登录口令:</span>
<span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"********"</span><span class="o">;</span>
<span class="c1">// 连接到SMTP服务器587端口:</span>
<span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.host"</span><span class="o">,</span> <span class="s">"smtp.163.com"</span><span class="o">);</span> <span class="c1">// SMTP主机名</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.port"</span><span class="o">,</span> <span class="s">"587"</span><span class="o">);</span> <span class="c1">// 主机端口号</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.auth"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 是否需要用户认证</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.starttls.enable"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span> <span class="c1">// 不启用TLS加密</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.ssl.enable"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 启用SSL加密</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.socketFactory.class"</span><span class="o">,</span> <span class="s">"javax.net.ssl.SSLSocketFactory"</span><span class="o">);</span>
<span class="c1">// 获取Session实例:</span>
<span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Authenticator</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">PasswordAuthentication</span> <span class="nf">getPasswordAuthentication</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PasswordAuthentication</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="c1">// 设置debug模式便于调试:</span>
<span class="n">session</span><span class="o">.</span><span class="na">setDebug</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</code></pre></div></div>

<p>以587端口为例，连接SMTP服务器时，需要准备一个<code class="language-plaintext highlighter-rouge">Properties</code>对象，填入相关信息。获取<code class="language-plaintext highlighter-rouge">Session</code>实例时，如果服务器需要认证，还需要传入一个<code class="language-plaintext highlighter-rouge">Authenticator</code>对象，用于提供用户名和密码进行身份验证。获取到<code class="language-plaintext highlighter-rouge">Session</code>实例后，打开调试模式可以看到SMTP通信的详细内容，便于调试。</p>

<p>SSL加密协议就用587端口，并改成以下代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.port"</span><span class="o">,</span> <span class="s">"587"</span><span class="o">);</span> <span class="c1">// 主机端口号</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.starttls.enable"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span> <span class="c1">// 不启用TLS加密</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.ssl.enable"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 启用SSL加密</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.socketFactory.class"</span><span class="o">,</span> <span class="s">"javax.net.ssl.SSLSocketFactory"</span><span class="o">);</span>
</code></pre></div></div>

<p>TLS就用25端口（非SSL协议，看服务器传回的消息里表示会判断这个）：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.port"</span><span class="o">,</span> <span class="s">"25"</span><span class="o">);</span> <span class="c1">// 主机端口号</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.smtp.starttls.enable"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 启用TLS加密</span>
</code></pre></div></div>

<h3 id="发送邮件">发送邮件</h3>

<p><code class="language-plaintext highlighter-rouge">MimeMessage</code>是<code class="language-plaintext highlighter-rouge">Message</code>的实现类，用于创建多部分邮件消息。<code class="language-plaintext highlighter-rouge">MimeMessage</code>类提供了多个构造方法，主要用于创建不同类型的消息。以下是<code class="language-plaintext highlighter-rouge">MimeMessage</code>类的一些常用构造方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">MimeMessage(Session session)</code>：使用指定的<code class="language-plaintext highlighter-rouge">Session</code>对象创建<code class="language-plaintext highlighter-rouge">MimeMessage</code>实例。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">MimeMessage(Session session, InputStream is)</code>：使用指定的<code class="language-plaintext highlighter-rouge">Session</code>对象和输入流创建<code class="language-plaintext highlighter-rouge">MimeMessage</code>实例，从输入流中读取消息内容。</li>
  <li><code class="language-plaintext highlighter-rouge">MimeMessage(MimeMessage source)</code>：使用另一个<code class="language-plaintext highlighter-rouge">MimeMessage</code>实例创建新的<code class="language-plaintext highlighter-rouge">MimeMessage</code>实例，复制源消息的内容。</li>
  <li><code class="language-plaintext highlighter-rouge">MimeMessage(Session session, byte[] content)</code>：使用指定的<code class="language-plaintext highlighter-rouge">Session</code>对象和字节数组创建<code class="language-plaintext highlighter-rouge">MimeMessage</code>实例，字节数组包含消息的原始内容。</li>
  <li><code class="language-plaintext highlighter-rouge">MimeMessage(Session session, InputStream is, InternetHeaders headers)</code>：使用指定的<code class="language-plaintext highlighter-rouge">Session</code>对象、输入流和邮件头信息创建<code class="language-plaintext highlighter-rouge">MimeMessage</code>实例，用于处理邮件头和消息内容分开的情况。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">MimeMessage</code>类提供了许多方法，用于<strong>设置和获取邮件消息的各种属性和内容</strong>。以下是<code class="language-plaintext highlighter-rouge">MimeMessage</code>类的一些常用方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">setSubject(String subject)</code>：设置邮件的主题为指定的字符串。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setSubject(String subject, String charset)</code>：设置邮件的主题为指定的字符串，并指定字符集。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">setSubject(MimeMessage.RecipientType type, String subject)</code>：设置邮件的特定类型（如收件人、抄送人、密送人）的主题。</li>
  <li><code class="language-plaintext highlighter-rouge">setSubject(String subject, String charset, String encoding)</code>：设置邮件的主题为指定的字符串，并指定字符集和编码方式。</li>
  <li><code class="language-plaintext highlighter-rouge">setSubject(String subject, String charset, String encoding, MimeUtility.EncodedWord.Encoder encoder)</code>：设置邮件的主题为指定的字符串，并指定字符集、编码方式和编码器。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setFrom(Address address)</code>：设置发件人地址。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">setRecipient(Message.RecipientType type, Address address)</code>：设置收件人、抄送人或密送人地址。</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Message.RecipientType.TO</code>：主要收件人（”To”）这些收件人是邮件的主要目标，邮件会直接发送给他们。通常，主要收件人是你希望直接收到邮件的人。</li>
      <li><code class="language-plaintext highlighter-rouge">Message.RecipientType.CC</code>：抄送（”Cc”），抄送的收件人会收到一份副本，但他们不是主要目标。通常，抄送用于通知其他人邮件的内容，但他们不需要采取任何行动。</li>
      <li><code class="language-plaintext highlighter-rouge">Message.RecipientType.BCC</code>：秘密抄送（”Bcc”），秘密抄送的收件人也会收到一份副本，但其他收件人无法看到他们的地址。这在你希望向某些人发送邮件，但不想让其他收件人知道这些人的地址时很有用。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setContent(Object content, String contentType)</code>：设置邮件内容和内容类型。内容可以是字符串、字节数组或<code class="language-plaintext highlighter-rouge">Multipart</code>对象。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">setText(String text)</code>：设置纯文本邮件的内容。可以指定第二个参数文字编码，还可以指定第三个参数设置消息的子类型html或plain：</strong></li>
  <li><code class="language-plaintext highlighter-rouge">setSentDate(Date date)</code>：设置邮件的发送日期。</li>
  <li><code class="language-plaintext highlighter-rouge">addHeader(String name, String value)</code>：添加邮件头。</li>
  <li><code class="language-plaintext highlighter-rouge">saveChanges()</code>：保存对邮件的更改。</li>
  <li><code class="language-plaintext highlighter-rouge">getSubject()</code>：获取邮件主题。</li>
  <li><code class="language-plaintext highlighter-rouge">getFrom()</code>：获取发件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">getRecipients(Message.RecipientType type)</code>：获取指定类型的收件人、抄送人或密送人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">getContent()</code>：获取邮件内容。</li>
  <li><code class="language-plaintext highlighter-rouge">getSentDate()</code>：获取邮件发送日期。</li>
  <li><code class="language-plaintext highlighter-rouge">getAllHeaders()</code>：获取所有邮件头。</li>
  <li><code class="language-plaintext highlighter-rouge">getHeader(String name)</code>：根据名称获取邮件头的值。</li>
  <li><code class="language-plaintext highlighter-rouge">removeHeader(String name)</code>：移除指定名称的邮件头。</li>
  <li><code class="language-plaintext highlighter-rouge">getContentType()</code>：获取邮件内容类型。</li>
</ul>

<p>这些方法可以对邮件消息进行各种操作，包括设置和获取邮件的属性、内容，以及添加和移除邮件头等。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">InternetAddress</code> 类用于表示<strong>电子邮件地址</strong>。它有几种不同的构造方法，可以根据需要选择使用：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">InternetAddress(String address)</code>：使用给定的电子邮件地址字符串创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">InternetAddress(String address, boolean strict)</code>：使用给定的电子邮件地址字符串创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例，并指定是否启用严格模式。</li>
  <li><code class="language-plaintext highlighter-rouge">InternetAddress(String address, String personal)</code>：使用给定的电子邮件地址字符串和个人名称创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">InternetAddress(String address, String personal, String charset)</code>：使用给定的电子邮件地址字符串、个人名称和字符集创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">InternetAddress(String address, String personal, String charset, boolean strict)</code>：使用给定的电子邮件地址字符串、个人名称、字符集和严格模式创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">InternetAddress</code> 类还提供了一些常用的方法，用于处理电子邮件地址的操作，例如：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">String getAddress()</code>：获取电子邮件地址的地址部分（不包括个人名称）。</li>
  <li><code class="language-plaintext highlighter-rouge">String getPersonal()</code>：获取电子邮件地址的个人名称部分。</li>
  <li><code class="language-plaintext highlighter-rouge">void setAddress(String address)</code>：设置电子邮件地址的地址部分。</li>
  <li><code class="language-plaintext highlighter-rouge">void setPersonal(String personal)</code>：设置电子邮件地址的个人名称部分。</li>
  <li><code class="language-plaintext highlighter-rouge">String getType()</code>：获取电子邮件地址的类型。</li>
  <li><code class="language-plaintext highlighter-rouge">void setType(String type)</code>：设置电子邮件地址的类型。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isGroup()</code>：检查该地址是否表示一个邮件组。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isUnicodeSupported()</code>：检查是否支持 Unicode 编码。</li>
  <li><code class="language-plaintext highlighter-rouge">String toString()</code>：将 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 对象转换为字符串表示形式。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">Transport</code> 类用于<strong>发送邮件消息</strong>。以下是 <code class="language-plaintext highlighter-rouge">Transport</code> 类的一些常用方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">send(Message message)</code>：发送邮件消息。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">connect()</code>：连接到邮件服务器。</li>
  <li><code class="language-plaintext highlighter-rouge">connect(String host, String user, String password)</code>：连接到指定主机的邮件服务器。</li>
  <li><code class="language-plaintext highlighter-rouge">close()</code>：关闭连接。</li>
  <li><code class="language-plaintext highlighter-rouge">addConnectionListener(ConnectionListener listener)</code>：添加连接监听器。</li>
  <li><code class="language-plaintext highlighter-rouge">removeConnectionListener(ConnectionListener listener)</code>：移除连接监听器。</li>
  <li><code class="language-plaintext highlighter-rouge">addTransportListener(TransportListener listener)</code>：添加传输监听器。</li>
  <li><code class="language-plaintext highlighter-rouge">removeTransportListener(TransportListener listener)</code>：移除传输监听器。</li>
  <li><code class="language-plaintext highlighter-rouge">isConnected()</code>：检查是否已连接到邮件服务器。</li>
  <li><code class="language-plaintext highlighter-rouge">isSSL()</code>：检查是否使用 SSL 连接。</li>
  <li><code class="language-plaintext highlighter-rouge">getURLName()</code>：获取连接的 URL 名称。</li>
  <li><code class="language-plaintext highlighter-rouge">setURLName(URLName urlname)</code>：设置连接的 URL 名称。</li>
  <li><code class="language-plaintext highlighter-rouge">setDebug(boolean debug)</code>：设置调试模式，用于输出调试信息。</li>
</ul>

<p>这些方法可以连接到邮件服务器并发送邮件消息。</p>

<hr />

<p>发送邮件时，需要构造一个<code class="language-plaintext highlighter-rouge">Message</code>对象，然后调用<code class="language-plaintext highlighter-rouge">Transport.send(Message)</code>即可完成发送：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">jakarta.mail.internet.MimeMessage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.internet.InternetAddress</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.MimeMessage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.Transport</span><span class="o">;</span>
<span class="o">...</span>
<span class="nc">MimeMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeMessage</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
<span class="c1">// 设置发送方地址:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setFrom</span><span class="o">(</span><span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="n">username</span><span class="o">,</span><span class="s">"Sora"</span><span class="o">,</span><span class="s">"UTF-8"</span><span class="o">));</span>
<span class="c1">// 设置接收方地址:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setRecipient</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"xiaoming@somewhere.com"</span><span class="o">));</span>
<span class="c1">// 设置邮件主题:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="s">"你好!"</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">);</span>
<span class="c1">// 设置邮件正文:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"这是一幅邮件"</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">);</span>
<span class="c1">// 发送:</span>
<span class="nc">Transport</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</code></pre></div></div>

<p>绝大多数邮件服务器要求<strong>发送方地址和登录用户名必须一致</strong>，否则发送将失败。</p>

<p>填入真实的地址，运行上述代码，可以在控制台看到<code class="language-plaintext highlighter-rouge">JavaMail</code>打印的调试信息：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>这是JavaMail打印的调试信息:
DEBUG: setDebug: Jakarta Mail version 2.0.1
DEBUG: getProvider() returning jakarta.mail.Provider[TRANSPORT,smtp,com.sun.mail.smtp.SMTPTransport,Oracle]
DEBUG SMTP: need username and password for authentication
DEBUG SMTP: protocolConnect returning false, host=smtp.163.com, user=XXX, password=&lt;null&gt;
DEBUG SMTP: useEhlo true, useAuth true
DEBUG SMTP: trying to connect to host "smtp.163.com", port 587, isSSL true
220 163.com Anti-spam GT for Coremail System (163com[20141201])
开始尝试连接smtp.163.comm:
DEBUG SMTP: connected to host "smtp.163.com", port: 587, ...
发送命令EHLO:
EHLO localhost
SMTP服务器响应250:
...
发送命令STARTTLS:
STARTTLS
SMTP服务器响应250:
...
尝试登录:
DEBUG SMTP: protocolConnect login, host=smtp.163.com, user=XXX@163.com, password=&lt;non-null&gt;
DEBUG SMTP: Attempt to authenticate using mechanisms: LOGIN PLAIN DIGEST-MD5 NTLM XOAUTH2 
DEBUG SMTP: Using mechanism LOGIN
DEBUG SMTP: AUTH LOGIN command trace suppressed
登录成功:
DEBUG SMTP: AUTH LOGIN succeeded
DEBUG SMTP: use8bit false
开发发送邮件，设置FROM:
MAIL FROM:发件人
250 2.1.0 Sender OK
设置TO:
RCPT TO:收件人
250 2.1.5 Recipient OK
发送邮件数据:
DATA
服务器响应354:
354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
真正的邮件数据:
Date: 时间
From: 发送方
To: 收件方
Message-ID: &lt;283383329.0.1713860754302@localhost&gt;
邮件主题是编码后的文本:
Subject: =?UTF-8?B?5L2g5aW9IQ==?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: base64

邮件正文是Base64编码的文本:
5oiR5Y+R5LqG5LiA5Lu96YKu5Lu2
发送成功:
DEBUG SMTP: message successfully delivered to mail server
发送QUIT命令:
QUIT
服务器响应221结束TCP连接:
221 Bye
</code></pre></div></div>

<p>从上面的调试信息可以看出，SMTP协议是一个请求-响应协议，客户端总是发送命令，然后等待服务器响应。服务器响应总是以数字开头，后面的信息才是用于调试的文本。这些响应码已经被定义在<a href="https://www.iana.org/assignments/smtp-enhanced-status-codes/smtp-enhanced-status-codes.txt">SMTP协议</a>中了，查看具体的响应码就可以知道出错原因。</p>

<p><strong>发送HTML邮件</strong></p>

<p>发送HTML邮件和文本邮件是类似的，只需要把：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"这是一幅邮件"</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">);</span>
</code></pre></div></div>

<p>改为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"&lt;h1&gt;这是一幅邮件&lt;/h1&gt;"</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">,</span> <span class="s">"html"</span><span class="o">);</span>
</code></pre></div></div>

<p>传入的<code class="language-plaintext highlighter-rouge">body</code>是类似<code class="language-plaintext highlighter-rouge">&lt;h1&gt;Hello&lt;/h1&gt;&lt;p&gt;Hi, xxx&lt;/p&gt;</code>这样的HTML字符串即可。</p>

<h3 id="发送附件">发送附件</h3>

<p><code class="language-plaintext highlighter-rouge">MimeMultipart</code> 是 <code class="language-plaintext highlighter-rouge">JavaMail</code> 中用于处理多部分 MIME 消息的类，<code class="language-plaintext highlighter-rouge">MimeMultipart</code> 类有多个构造方法，用于创建不同类型的多部分消息。以下是一些常用的构造方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">MimeMultipart()</code>：创建一个空的多部分消息，默认使用混合 (<code class="language-plaintext highlighter-rouge">mixed</code>) 类型。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">MimeMultipart(String subtype)</code>：根据指定的子类型创建一个空的多部分消息。常用的子类型包括 <code class="language-plaintext highlighter-rouge">related</code>（相关）、<code class="language-plaintext highlighter-rouge">alternative</code>（备选）、<code class="language-plaintext highlighter-rouge">mixed</code>（混合）等。例如：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">MimeMultipart("related")</code>：创建一个相关类型的多部分消息。</li>
      <li><code class="language-plaintext highlighter-rouge">MimeMultipart("alternative")</code>：创建一个备选类型的多部分消息。</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">MimeMultipart(javax.mail.internet.ContentType contentType)</code>：根据指定的 <code class="language-plaintext highlighter-rouge">ContentType</code> 对象创建一个空的多部分消息。ContentType 对象可以包含主类型、子类型、参数等信息。</li>
  <li><code class="language-plaintext highlighter-rouge">MimeMultipart(InputStream is)</code>：从输入流中读取内容，并根据读取的内容创建一个多部分消息。</li>
</ul>

<p>这些构造方法提供了不同的方式来创建 <code class="language-plaintext highlighter-rouge">MimeMultipart</code> 对象，以满足不同场景下的需求。</p>

<p><strong>常用方法包括：</strong></p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">addBodyPart(BodyPart part)</code>：将一个 <code class="language-plaintext highlighter-rouge">BodyPart</code> 对象添加到多部分消息中。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">removeBodyPart(int index)</code>：从多部分消息中移除指定索引位置的 <code class="language-plaintext highlighter-rouge">BodyPart</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">getBodyPart(int index)</code>：获取多部分消息中指定索引位置的 <code class="language-plaintext highlighter-rouge">BodyPart</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">getBodyPart(String CID)</code>：根据 Content-ID（CID）获取多部分消息中对应的 <code class="language-plaintext highlighter-rouge">BodyPart</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">getBodyPartCount()</code>：获取多部分消息中 <code class="language-plaintext highlighter-rouge">BodyPart</code> 对象的数量。</li>
  <li><code class="language-plaintext highlighter-rouge">setSubType(String subtype)</code>：设置多部分消息的子类型（subtype），例如 “mixed”、”alternative” 等。</li>
  <li><code class="language-plaintext highlighter-rouge">setPreamble(String preamble)</code>：设置消息的开头部分（preamble）。</li>
  <li><code class="language-plaintext highlighter-rouge">setEpilogue(String epilogue)</code>：设置消息的结尾部分（epilogue）。</li>
  <li><code class="language-plaintext highlighter-rouge">writeTo(OutputStream os)</code>：将多部分消息写入输出流中。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">MimeBodyPart</code> 类用于表示邮件的各个部分，包括正文、附件等。它的构造方法相对简单，通常使用默认构造方法创建对象，然后使用 <code class="language-plaintext highlighter-rouge">setContent</code> 等方法设置内容。以下是 <code class="language-plaintext highlighter-rouge">MimeBodyPart</code> 的构造方法：</p>

<ul>
  <li><strong>默认构造方法：<code class="language-plaintext highlighter-rouge">MimeBodyPart()</code></strong></li>
  <li>使用输入流构造方法：<code class="language-plaintext highlighter-rouge">MimeBodyPart(InputStream is)</code></li>
  <li>使用 <code class="language-plaintext highlighter-rouge">DataSource</code> 对象构造方法：<code class="language-plaintext highlighter-rouge">MimeBodyPart(DataSource ds)</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">MimeBodyPart</code> 类的方法如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">addHeader(String name, String value)</code>：添加指定名称和值的头信息。</li>
  <li><code class="language-plaintext highlighter-rouge">addHeaderLine(String line)</code>：添加包含完整头信息行的字符串。</li>
  <li><code class="language-plaintext highlighter-rouge">setContentID(String cid)</code>：设置内容 ID。</li>
  <li><code class="language-plaintext highlighter-rouge">setContentLanguage(String[] languages)</code>：设置内容语言。</li>
  <li><code class="language-plaintext highlighter-rouge">setContentTransferEncoding(String encoding)</code>：设置内容传输编码。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setDataHandler(DataHandler dh)</code>：设置数据处理程序。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">setDescription(String description)</code>：设置描述信息。</li>
  <li><code class="language-plaintext highlighter-rouge">setDisposition(String disposition)</code>：设置附件描述。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setFileName(String filename)</code>：设置文件名。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">setHeader(String name, String value)</code>：设置指定名称的头信息值。</li>
  <li><code class="language-plaintext highlighter-rouge">setText(String text)</code>：设置文本内容。</li>
  <li><code class="language-plaintext highlighter-rouge">updateHeaders()</code>：更新所有头信息。</li>
  <li><code class="language-plaintext highlighter-rouge">addRecipient(Message.RecipientType type, Address address)</code>：添加接收者地址。</li>
  <li><code class="language-plaintext highlighter-rouge">getAllHeaders()</code>：获取所有头信息。</li>
  <li><code class="language-plaintext highlighter-rouge">getContentType()</code>：获取内容类型。</li>
  <li><code class="language-plaintext highlighter-rouge">getDataHandler()</code>：获取数据处理程序。</li>
  <li><code class="language-plaintext highlighter-rouge">getDescription()</code>：获取描述信息。</li>
  <li><code class="language-plaintext highlighter-rouge">getDisposition()</code>：获取附件描述。</li>
  <li><code class="language-plaintext highlighter-rouge">getFileName()</code>：获取文件名。</li>
  <li><code class="language-plaintext highlighter-rouge">getHeader(String name)</code>：根据名称获取头信息值。</li>
  <li><code class="language-plaintext highlighter-rouge">getInputStream()</code>：获取输入流。</li>
  <li><code class="language-plaintext highlighter-rouge">getLineCount()</code>：获取行数。</li>
  <li><code class="language-plaintext highlighter-rouge">getSize()</code>：获取大小。</li>
  <li><code class="language-plaintext highlighter-rouge">getText()</code>：获取文本内容。</li>
  <li><code class="language-plaintext highlighter-rouge">isMimeType(String mimeType)</code>：检查是否与指定的 MIME 类型匹配。</li>
  <li><code class="language-plaintext highlighter-rouge">removeHeader(String name)</code>：移除指定名称的头信息。</li>
  <li><code class="language-plaintext highlighter-rouge">setContent(Multipart mp)</code>：设置内容为多部分。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setContent(Object obj, String type)</code>：设置内容对象和类型。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">setContent(Multipart mp)</code>：设置内容为多部分。</li>
  <li><code class="language-plaintext highlighter-rouge">setContentID(String cid)</code>：设置内容 ID。</li>
  <li><code class="language-plaintext highlighter-rouge">setContentLanguage(String[] languages)</code>：设置内容语言。</li>
  <li><code class="language-plaintext highlighter-rouge">setDataHandler(DataHandler dh)</code>：设置数据处理程序。</li>
  <li><code class="language-plaintext highlighter-rouge">setDisposition(String disposition)</code>：设置附件描述。</li>
  <li><code class="language-plaintext highlighter-rouge">setFileName(String filename)</code>：设置文件名。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">setHeader(String name, String value)</code>：设置指定名称的头信息值。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">setText(String text)</code>：设置文本内容。</li>
  <li><code class="language-plaintext highlighter-rouge">setText(String text, String charset)</code>：设置文本内容和字符集。</li>
</ul>

<p>这些方法可以用于配置和操作 <code class="language-plaintext highlighter-rouge">MimeBodyPart</code> 对象的各种属性和内容。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">DataHandler</code> 的构造方法通常用于创建一个处理特定数据类型的数据处理程序对象。它有以下几个常用的构造方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DataHandler(Object obj, String mimeType)</code>：使用给定的对象和 MIME 类型创建一个 <code class="language-plaintext highlighter-rouge">DataHandler</code> 对象。这个构造方法通常用于将 Java 对象转换为数据处理程序。</li>
  <li><code class="language-plaintext highlighter-rouge">DataHandler(URL url)</code>：使用给定的 URL 创建一个 <code class="language-plaintext highlighter-rouge">DataHandler</code> 对象。这个构造方法通常用于处理指向外部资源的 URL。</li>
  <li><code class="language-plaintext highlighter-rouge">DataHandler(DataSource dataSource)</code>：使用给定的数据源创建一个 <code class="language-plaintext highlighter-rouge">DataHandler</code> 对象。这个构造方法通常用于处理数据源对象。</li>
</ul>

<p>这些构造方法根据不同的数据类型和来源创建适当的数据处理程序对象，以便于在应用程序中处理和传输数据。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">ByteArrayDataSource</code> 的构造方法通常用于创建一个包含字节数组数据的数据源对象。它有以下两个常用的构造方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ByteArrayDataSource(byte[] data, String type)</code>：使用给定的字节数组和 MIME 类型创建一个 <code class="language-plaintext highlighter-rouge">ByteArrayDataSource</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">ByteArrayDataSource(InputStream is, String type)</code>：使用给定的输入流和 MIME 类型创建一个 <code class="language-plaintext highlighter-rouge">ByteArrayDataSource</code> 对象。</li>
</ul>

<p>这些构造方法将字节数组或输入流与 MIME 类型关联起来，以便于处理和传输数据。</p>

<hr />

<p>常用文件的 MIME 类型如下：</p>

<ul>
  <li>文本文件：<code class="language-plaintext highlighter-rouge">text/plain</code></li>
  <li>HTML 文件：<code class="language-plaintext highlighter-rouge">text/html</code></li>
  <li>XML 文件：<code class="language-plaintext highlighter-rouge">application/xml</code></li>
  <li>JSON 文件：<code class="language-plaintext highlighter-rouge">application/json</code></li>
  <li>图片文件：<code class="language-plaintext highlighter-rouge">image/jpeg</code>、<code class="language-plaintext highlighter-rouge">image/png</code>、<code class="language-plaintext highlighter-rouge">image/gif</code>、<code class="language-plaintext highlighter-rouge">image/webp</code></li>
  <li>视频文件：<code class="language-plaintext highlighter-rouge">video/mp4</code>、<code class="language-plaintext highlighter-rouge">video/quicktime</code></li>
  <li>音频文件：<code class="language-plaintext highlighter-rouge">audio/mpeg</code>、<code class="language-plaintext highlighter-rouge">audio/wav</code></li>
  <li>PDF 文件：<code class="language-plaintext highlighter-rouge">application/pdf</code></li>
  <li>Word 文档：<code class="language-plaintext highlighter-rouge">application/msword</code>、<code class="language-plaintext highlighter-rouge">application/vnd.openxmlformats-officedocument.wordprocessingml.document</code></li>
  <li>Excel 表格：<code class="language-plaintext highlighter-rouge">application/vnd.ms-excel</code>、<code class="language-plaintext highlighter-rouge">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code></li>
  <li>PowerPoint 演示文稿：<code class="language-plaintext highlighter-rouge">application/vnd.ms-powerpoint</code>、<code class="language-plaintext highlighter-rouge">application/vnd.openxmlformats-officedocument.presentationml.presentation</code></li>
  <li>压缩文件：<code class="language-plaintext highlighter-rouge">application/zip</code></li>
  <li>二进制文件的 MIME 类型通常是 <code class="language-plaintext highlighter-rouge">application/octet-stream</code>。这个 MIME 类型通常用于表示未知的二进制数据类型，或者不属于其他已知 MIME 类型的二进制数据。</li>
</ul>

<p>这些 MIME 类型可以帮助浏览器和其他应用程序识别文件的类型并采取相应的处理方式。</p>

<hr />

<p>要在电子邮件中携带附件，就不能直接调用<code class="language-plaintext highlighter-rouge">message.setText()</code>方法，而是要构造一个<code class="language-plaintext highlighter-rouge">Multipart</code>对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">jakarta.mail.internet.MimeBodyPart</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.internet.MimeMultipart</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.util.ByteArrayDataSource</span><span class="o">;</span>
<span class="o">...</span>
<span class="nc">MimeMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeMessage</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
<span class="c1">// 设置发送方地址:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setFrom</span><span class="o">(</span><span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="n">username</span><span class="o">,</span><span class="s">"Sora"</span><span class="o">,</span><span class="s">"UTF-8"</span><span class="o">));</span>
<span class="c1">// 设置接收方地址:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setRecipient</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"XXX"</span><span class="o">));</span>
<span class="c1">// 设置邮件主题:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="s">"你好!"</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">);</span>
<span class="c1">// 设置邮件正文:</span>
<span class="nc">Multipart</span> <span class="n">multipart</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeMultipart</span><span class="o">();</span>
<span class="c1">// 添加text:</span>
<span class="nc">BodyPart</span> <span class="n">textpart</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeBodyPart</span><span class="o">();</span>
<span class="n">textpart</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="s">"&lt;h1&gt;这是一幅邮件&lt;/h1&gt;"</span><span class="o">,</span> <span class="s">"text/html;charset=utf-8"</span><span class="o">);</span>
<span class="n">multipart</span><span class="o">.</span><span class="na">addBodyPart</span><span class="o">(</span><span class="n">textpart</span><span class="o">);</span>
<span class="c1">// 添加附件:</span>
<span class="nc">BodyPart</span> <span class="n">annex</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeBodyPart</span><span class="o">();</span>
<span class="n">annex</span><span class="o">.</span><span class="na">setFileName</span><span class="o">(</span><span class="s">"附件1.7z"</span><span class="o">);</span>
<span class="n">annex</span><span class="o">.</span><span class="na">setDataHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">DataHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">ByteArrayDataSource</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"Maven.7z"</span><span class="o">),</span> <span class="s">"application/octet-stream"</span><span class="o">)));</span>
<span class="n">multipart</span><span class="o">.</span><span class="na">addBodyPart</span><span class="o">(</span><span class="n">annex</span><span class="o">);</span>
<span class="c1">// 设置邮件内容为multipart:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">multipart</span><span class="o">);</span>
<span class="c1">// 发送:</span>
<span class="nc">Transport</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</code></pre></div></div>

<p>一个<code class="language-plaintext highlighter-rouge">Multipart</code>对象可以添加若干个<code class="language-plaintext highlighter-rouge">BodyPart</code>，其中<strong>第一个</strong><code class="language-plaintext highlighter-rouge">BodyPart</code>是文本，即邮件正文，后面的<code class="language-plaintext highlighter-rouge">BodyPart</code>是附件。</p>

<p><code class="language-plaintext highlighter-rouge">BodyPart</code>依靠<code class="language-plaintext highlighter-rouge">setContent()</code>决定添加的内容。</p>

<p>如果添加文本，用<code class="language-plaintext highlighter-rouge">setContent("...", "text/plain;charset=utf-8")</code>添加纯文本，或者用<code class="language-plaintext highlighter-rouge">setContent("...", "text/html;charset=utf-8")</code>添加HTML文本。</p>

<p>如果添加附件，需要设置文件名（不一定和真实文件名一致），并且添加一个<code class="language-plaintext highlighter-rouge">DataHandler()</code>，传入文件的MIME类型。二进制文件可以用<code class="language-plaintext highlighter-rouge">application/octet-stream</code>，Word文档则是<code class="language-plaintext highlighter-rouge">application/msword</code>。</p>

<p>最后，通过<code class="language-plaintext highlighter-rouge">setContent()</code>把<code class="language-plaintext highlighter-rouge">Multipart</code>添加到<code class="language-plaintext highlighter-rouge">Message</code>中，即可发送。</p>

<p><code class="language-plaintext highlighter-rouge">ByteArrayDataSource</code> 是 <code class="language-plaintext highlighter-rouge">javax.mail.util.ByteArrayDataSource</code> 类的一个子类，用于从字节数组中创建数据源对象。在这个特定的代码片段中，它的作用是将 <code class="language-plaintext highlighter-rouge">FileInputStream</code> 对象中的数据转换为字节数组，并将其作为数据源传递给 <code class="language-plaintext highlighter-rouge">DataHandler</code> 构造方法。</p>

<p><code class="language-plaintext highlighter-rouge">DataHandler</code> 用于将数据封装为一种适合传输的格式，它可以处理各种类型的数据，如字节数组、文件、URL 等。在这里，<code class="language-plaintext highlighter-rouge">ByteArrayDataSource</code> 负责将文件中的数据读取到字节数组中，然后 <code class="language-plaintext highlighter-rouge">DataHandler</code> 将这个字节数组封装为一个数据处理程序，以便于传输和处理。</p>

<p>如果去掉<code class="language-plaintext highlighter-rouge">ByteArrayDataSource</code>，会报错：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">annex</span><span class="o">.</span><span class="na">setDataHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">DataHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"3.png"</span><span class="o">),</span> <span class="s">"image/png"</span><span class="o">));</span>
</code></pre></div></div>

<p>报错是因为 <code class="language-plaintext highlighter-rouge">DataHandler</code> 的构造方法不接受 <code class="language-plaintext highlighter-rouge">FileInputStream</code> 对象作为参数，而是需要一个 <code class="language-plaintext highlighter-rouge">DataSource</code> 对象。<code class="language-plaintext highlighter-rouge">ByteArrayDataSource</code> 实现了 <code class="language-plaintext highlighter-rouge">DataSource</code> 接口，因此可以作为参数传递给 <code class="language-plaintext highlighter-rouge">DataHandler</code> 构造方法。如果直接将 <code class="language-plaintext highlighter-rouge">FileInputStream</code> 传递给 <code class="language-plaintext highlighter-rouge">DataHandler</code> 构造方法，它将无法识别并处理文件流，从而导致错误。因此，需要使用 <code class="language-plaintext highlighter-rouge">ByteArrayDataSource</code> 将文件流转换为 <code class="language-plaintext highlighter-rouge">DataSource</code> 对象，以便 <code class="language-plaintext highlighter-rouge">DataHandler</code> 可以正确处理图像数据。</p>

<h3 id="发送内嵌图片的html邮件">发送内嵌图片的HTML邮件</h3>

<p><code class="language-plaintext highlighter-rouge">setHeader</code> 方法用于设置邮件头的值，其参数为邮件头的名称和对应的值。常用的邮件头包括但不限于：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">From</code>：发件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">To</code>：收件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">Cc</code>：抄送地址。</li>
  <li><code class="language-plaintext highlighter-rouge">Bcc</code>：密送地址。</li>
  <li><code class="language-plaintext highlighter-rouge">Subject</code>：邮件主题。</li>
  <li><code class="language-plaintext highlighter-rouge">Date</code>：邮件发送时间。</li>
  <li><code class="language-plaintext highlighter-rouge">Content-Type</code>：内容类型。</li>
  <li><code class="language-plaintext highlighter-rouge">Content-Disposition</code>：内容描述。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Content-ID</code>：内容 ID。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">MIME-Version</code>：MIME 版本。</li>
  <li><code class="language-plaintext highlighter-rouge">Reply-To</code>：回复地址。</li>
  <li><code class="language-plaintext highlighter-rouge">Return-Path</code>：返回路径。</li>
  <li><code class="language-plaintext highlighter-rouge">Message-ID</code>：消息 ID。</li>
</ul>

<p>这些参数的设置可以根据邮件的需求和格式进行配置，以满足邮件发送的要求和格式规范。</p>

<hr />

<p>HTML邮件中可以内嵌图片。如果给一个<code class="language-plaintext highlighter-rouge">&lt;img src="http://example.com/test.jpg"&gt;</code>，这样的外部图片链接通常会被邮件客户端过滤，并提示用户显示图片并不安全。只有内嵌的图片才能正常在邮件中显示。</p>

<p>内嵌图片实际上也是一个附件，即邮件本身也是<code class="language-plaintext highlighter-rouge">Multipart</code>，但需要做一点额外的处理：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MimeMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeMessage</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
<span class="c1">// 设置发送方地址:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setFrom</span><span class="o">(</span><span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="n">username</span><span class="o">,</span><span class="s">"Sora"</span><span class="o">,</span><span class="s">"UTF-8"</span><span class="o">));</span>
<span class="c1">// 设置接收方地址:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setRecipient</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"XXX"</span><span class="o">));</span>
<span class="c1">// 设置邮件主题:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="s">"你好!"</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">);</span>
<span class="c1">// 设置邮件正文:</span>
<span class="nc">Multipart</span> <span class="n">multipart</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeMultipart</span><span class="o">();</span>
<span class="c1">// 添加text:</span>
<span class="nc">BodyPart</span> <span class="n">textpart</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeBodyPart</span><span class="o">();</span>
<span class="n">textpart</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="s">"&lt;h1&gt;这是一个带图片的邮件&lt;/h1&gt;&lt;p&gt;&lt;img src='cid:img01'"</span><span class="o">,</span> <span class="s">"text/html;charset=utf-8"</span><span class="o">);</span>
<span class="n">multipart</span><span class="o">.</span><span class="na">addBodyPart</span><span class="o">(</span><span class="n">textpart</span><span class="o">);</span>
<span class="c1">// 添加附件:</span>
<span class="nc">BodyPart</span> <span class="n">annex</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeBodyPart</span><span class="o">();</span>
<span class="n">annex</span><span class="o">.</span><span class="na">setFileName</span><span class="o">(</span><span class="s">"图片1.png"</span><span class="o">);</span>
<span class="n">annex</span><span class="o">.</span><span class="na">setDataHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">DataHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">ByteArrayDataSource</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"3.png"</span><span class="o">),</span> <span class="s">"image/png"</span><span class="o">)));</span>
<span class="n">annex</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Content-ID"</span><span class="o">,</span><span class="s">"&lt;img01&gt;"</span><span class="o">);</span>
<span class="n">multipart</span><span class="o">.</span><span class="na">addBodyPart</span><span class="o">(</span><span class="n">annex</span><span class="o">);</span>
<span class="c1">// 设置邮件内容为multipart:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="n">multipart</span><span class="o">);</span>
<span class="c1">// 发送:</span>
<span class="nc">Transport</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</code></pre></div></div>

<p>在HTML邮件中引用图片时，需要设定一个ID，用类似<code class="language-plaintext highlighter-rouge">&lt;img src='cid:img01'"&gt;</code>引用，然后，在添加图片作为<code class="language-plaintext highlighter-rouge">BodyPart</code>时，除了要正确设置MIME类型（根据图片类型使用<code class="language-plaintext highlighter-rouge">image/jpeg</code>或<code class="language-plaintext highlighter-rouge">image/png</code>），还需要设置一个Header：<code class="language-plaintext highlighter-rouge">imagepart.setHeader("Content-ID", "&lt;img01&gt;");</code>。</p>

<h3 id="发送给多个收件人">发送给多个收件人</h3>

<p><strong>设置收件人和发件人：</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">addFrom(Address[] addresses)</code>: 添加发件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">addFrom(String addresses)</code>: 添加发件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">addRecipient(Message.RecipientType type, Address address)</code>: 添加指定类型的收件人地址。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">addRecipients(Message.RecipientType type, Address[] addresses)</code>: 添加指定类型的收件人地址。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">addRecipients(Message.RecipientType type, String addresses)</code>: 添加指定类型的收件人地址。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">addRecipient(String type, String address)</code>: 添加指定类型的收件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">addRecipients(String type, String addresses)</code>: 添加指定类型的收件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">setFrom(Address address)</code>: 设置发件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">setFrom(String address)</code>: 设置发件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">setRecipient(Message.RecipientType type, Address address)</code>: 设置指定类型的收件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">setRecipients(Message.RecipientType type, Address[] addresses)</code>: 设置指定类型的收件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">setRecipients(Message.RecipientType type, String addresses)</code>: 设置指定类型的收件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">setRecipient(String type, Address address)</code>: 设置指定类型的收件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">setRecipients(String type, String addresses)</code>: 设置指定类型的收件人地址。</li>
  <li><code class="language-plaintext highlighter-rouge">setReplyTo(Address[] addresses)</code>: 设置回复地址。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Message.RecipientType</code>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Message.RecipientType.TO</code>：主要收件人（”To”）这些收件人是邮件的主要目标，邮件会直接发送给他们。通常，主要收件人是你希望直接收到邮件的人。</li>
  <li><code class="language-plaintext highlighter-rouge">Message.RecipientType.CC</code>：抄送（”Cc”），抄送的收件人会收到一份副本，但他们不是主要目标。通常，抄送用于通知其他人邮件的内容，但他们不需要采取任何行动。</li>
  <li><code class="language-plaintext highlighter-rouge">Message.RecipientType.BCC</code>：秘密抄送（”Bcc”），秘密抄送的收件人也会收到一份副本，但其他收件人无法看到他们的地址。这在你希望向某些人发送邮件，但不想让其他收件人知道这些人的地址时很有用。</li>
</ul>

<hr />

<p>要设置多个收件人，可以使用<code class="language-plaintext highlighter-rouge">addRecipients</code>方法或<code class="language-plaintext highlighter-rouge">setRecipients</code>方法。这些方法允许为消息的不同类型（如TO、CC、BCC）添加多个收件人。以下是使用这些方法设置多个收件人的示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MimeMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MimeMessage</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
<span class="c1">// 添加多个收件人</span>
<span class="n">message</span><span class="o">.</span><span class="na">addRecipients</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="s">"recipient1@example.com, recipient2@example.com"</span><span class="o">);</span>
<span class="c1">// 或者使用数组</span>
<span class="nc">Address</span><span class="o">[]</span> <span class="n">recipients</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">InternetAddress</span><span class="o">(</span><span class="s">"recipient1@example.com"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">InternetAddress</span><span class="o">(</span><span class="s">"recipient2@example.com"</span><span class="o">)</span>
<span class="o">};</span>
<span class="n">message</span><span class="o">.</span><span class="na">addRecipients</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="n">recipients</span><span class="o">);</span>
</code></pre></div></div>

<p>注意，在使用<code class="language-plaintext highlighter-rouge">addRecipients</code>方法时，<strong>多个收件人应使用逗号分隔</strong>。还可以使用类似的方法设置CC和BCC收件人。</p>

<p><code class="language-plaintext highlighter-rouge">addRecipient</code>方法可以多次调用以添加多个收件人，而<code class="language-plaintext highlighter-rouge">setRecipient</code>方法会覆盖之前设置的收件人。因此，如果需要设置多个收件人，应该使用<code class="language-plaintext highlighter-rouge">addRecipient</code>方法。</p>

<p>如果需要设置收件人、抄送（CC）和密送（BCC）等多个收件人，应该使用<code class="language-plaintext highlighter-rouge">addRecipient</code>方法多次调用来添加不同类型的收件人。例如，可以按照以下方式设置多个收件人：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message</span><span class="o">.</span><span class="na">setRecipient</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"recipient1@example.com"</span><span class="o">));</span>
<span class="n">message</span><span class="o">.</span><span class="na">addRecipient</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"recipient2@example.com"</span><span class="o">));</span>
<span class="n">message</span><span class="o">.</span><span class="na">addRecipient</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">CC</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"cc@example.com"</span><span class="o">));</span>
<span class="n">message</span><span class="o">.</span><span class="na">addRecipient</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">BCC</span><span class="o">,</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"bcc@example.com"</span><span class="o">));</span>
</code></pre></div></div>

<p>而对于多个发件人，SMTP 协议规定邮件的 <code class="language-plaintext highlighter-rouge">From</code> 字段只能有一个发件人。如果需要发送给多个人，但每个人看到的发件人应该不同，可以考虑使用群发邮件的方式，即将所有收件人放在收件人列表中，但在邮件内容中区分不同的收件人。如果需要在邮件内容中显示不同的发件人，可以在邮件内容中自定义发件人的显示方式，例如在邮件正文中注明发件人姓名或其他标识。</p>

<h3 id="设置别名">设置别名</h3>

<p><code class="language-plaintext highlighter-rouge">InternetAddress</code> 类用于表示<strong>电子邮件地址</strong>。它有几种不同的构造方法，可以根据需要选择使用：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">InternetAddress(String address)</code>：使用给定的电子邮件地址字符串创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例。</li>
  <li><code class="language-plaintext highlighter-rouge">InternetAddress(String address, boolean strict)</code>：使用给定的电子邮件地址字符串创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例，并指定是否启用严格模式。</li>
  <li><code class="language-plaintext highlighter-rouge">InternetAddress(String address, String personal)</code>：使用给定的电子邮件地址字符串和个人名称创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">InternetAddress(String address, String personal, String charset)</code>：使用给定的电子邮件地址字符串、个人名称和字符集创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">InternetAddress(String address, String personal, String charset, boolean strict)</code>：使用给定的电子邮件地址字符串、个人名称、字符集和严格模式创建一个 <code class="language-plaintext highlighter-rouge">InternetAddress</code> 实例。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">InternetAddress</code>可以很方便的设置别名</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 设置发送方地址:</span>
<span class="n">message</span><span class="o">.</span><span class="na">setFrom</span><span class="o">(</span><span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="n">username</span><span class="o">,</span><span class="s">"Sora"</span><span class="o">,</span><span class="s">"UTF-8"</span><span class="o">));</span>
</code></pre></div></div>

<p><strong>在字符串里，也可以设置别名</strong>：</p>

<p>在字符串里给收件人设置别名的方法是使用 <code class="language-plaintext highlighter-rouge">&lt;</code> 和 <code class="language-plaintext highlighter-rouge">&gt;</code> 包裹完整的邮件地址，并在地址后面添加别名，格式如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"别名1 &lt;recipient1@example.com&gt;, 别名2 &lt;recipient2@example.com&gt;"</span>
</code></pre></div></div>

<p>例如，如果要将 “Alice” 和 “Bob” 添加到密送列表，可以这样做：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message</span><span class="o">.</span><span class="na">addRecipients</span><span class="o">(</span><span class="nc">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">BCC</span><span class="o">,</span> <span class="s">"Alice &lt;alice@example.com&gt;, Bob &lt;bob@example.com&gt;"</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">InternetAddress</code>里也可以这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">InternetAddress</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"别名 &lt;recipient@example.com&gt;"</span><span class="o">);</span>
</code></pre></div></div>

<p>但是不能同时设置字符集，那中文可能出问题，所以还是得这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">InternetAddress</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"recipient@example.com&gt;"</span><span class="o">,</span><span class="s">"别名"</span><span class="o">,</span><span class="s">"UTF-8"</span><span class="o">);</span>
</code></pre></div></div>

<p>或者这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">InternetAddress</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InternetAddress</span><span class="o">(</span><span class="s">"recipient@example.com"</span><span class="o">);</span>
<span class="n">address</span><span class="o">.</span><span class="na">setPersonal</span><span class="o">(</span><span class="s">"别名"</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="常见问题">常见问题</h3>

<p>如果用户名或口令错误，会导致<code class="language-plaintext highlighter-rouge">535</code>登录失败：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEBUG SMTP: AUTH LOGIN failed
Exception in thread "main" javax.mail.AuthenticationFailedException: 535 5.7.3 Authentication unsuccessful [HK0PR03CA0105.apcprd03.prod.outlook.com]
</code></pre></div></div>

<p>如果<strong>登录用户和发件人不一致</strong>，会导致<code class="language-plaintext highlighter-rouge">554</code>拒绝发送错误：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEBUG SMTP: MessagingException while sending, THROW: 
com.sun.mail.smtp.SMTPSendFailedException: 554 5.2.0 STOREDRV.Submission.Exception:SendAsDeniedException.MapiExceptionSendAsDenied;
</code></pre></div></div>

<p>有些时候，如果邮件主题和正文过于简单，会导致<code class="language-plaintext highlighter-rouge">554</code>被识别为垃圾邮件的错误：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEBUG SMTP: MessagingException while sending, THROW: 
com.sun.mail.smtp.SMTPSendFailedException: 554 DT:SPM
</code></pre></div></div>

<p>使用<code class="language-plaintext highlighter-rouge">JavaMail</code> API发送邮件本质上是一个MUA软件通过SMTP协议发送邮件至MTA服务器；</p>

<p>某些邮件服务商需要开启SMTP，并需要独立的SMTP登录密码。</p>

<h2 id="接收email">接收Email</h2>

<p>发送Email，客户端总是通过SMTP协议把邮件发送给MTA。</p>

<p>接收Email则相反，因为邮件最终到达收件人的MDA服务器，所以，接收邮件是收件人用自己的客户端把邮件从MDA服务器上抓取到本地的过程。</p>

<p>接收邮件使用最广泛的协议是POP3：Post Office Protocol version 3，它也是一个建立在TCP连接之上的协议。POP3服务器的标准端口是110，如果整个会话需要加密，那么使用加密端口995。</p>

<p>另一种接收邮件的协议是IMAP：Internet Mail Access Protocol，它使用标准端口143和加密端口993。IMAP和POP3的主要区别是，IMAP协议在本地的所有操作都会自动同步到服务器上，并且，IMAP可以允许用户在邮件服务器的收件箱中创建文件夹。</p>

<p>以下是 QQ 邮箱、163 邮箱和 Gmail 邮箱的 POP3 和 IMAP 服务器信息：</p>

<ol>
  <li>QQ 邮箱：
    <ul>
      <li>POP3 服务器：pop.qq.com</li>
      <li>IMAP 服务器：imap.qq.com</li>
    </ul>
  </li>
  <li>163 邮箱：
    <ul>
      <li>POP3 服务器：pop.163.com 或 pop3.163.com</li>
      <li>IMAP 服务器：imap.163.com</li>
    </ul>
  </li>
  <li>Gmail 邮箱：
    <ul>
      <li>POP3 服务器：pop.gmail.com（默认端口号：995）</li>
      <li>IMAP 服务器：imap.gmail.com（默认端口号：993）</li>
    </ul>
  </li>
</ol>

<p>对于 Gmail 邮箱，还需要启用“Less secure app access”或生成应用密码。Gmail 强制使用加密连接，请确保使用正确的端口号以及启用 SSL/TLS 加密连接。</p>

<p><strong>POP3与IMAP</strong></p>

<p>POP3协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作（如移动邮件、标记已读等），不会反馈到服务器上，比如通过客户端收取了邮箱中的3封邮件并移动到其他文件夹，邮箱服务器上的这些邮件是没有同时被移动的 。</p>

<p>而IMAP提供webmail 与电子邮件客户端之间的双向通信，客户端的操作都会反馈到服务器上，对邮件进行的操作，服务器上的邮件也会做相应的动作。</p>

<p>同时，<strong>IMAP</strong>像<strong>POP3</strong>那样提供了方便的邮件下载服务，让用户能进行离线阅读。<strong>IMAP</strong>提供的摘要浏览功能可以让你在阅读完所有的邮件到达时间、主题、发件人、大小等信息后才作出是否下载的决定。此外，<strong>IMAP</strong> 更好地支持了从多个不同设备中随时访问新邮件。</p>

<p>总之，<strong>IMAP</strong> 整体上为用户带来更为便捷和可靠的体验。<strong>POP3</strong> 更易丢失邮件或多次下载相同的邮件，而 <strong>IMAP</strong> 通过邮件客户端与webmail 之间的双向同步功能很好地避免了这些问题。</p>

<h3 id="登录邮箱">登录邮箱</h3>

<p><code class="language-plaintext highlighter-rouge">URLName</code> 类构造方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">public URLName()</code>: 默认构造方法，创建一个空的 <code class="language-plaintext highlighter-rouge">URLName</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">public URLName(String url)</code>: 使用给定的 URL 字符串创建一个 <code class="language-plaintext highlighter-rouge">URLName</code> 对象。该 URL 字符串应包含完整的 URL 信息，例如：”protocol://host:port/file”。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">public URLName(String protocol, String host, int port, String file, String username, String password)</code>: 使用指定的协议、主机、端口、文件路径、用户名和密码创建一个 <code class="language-plaintext highlighter-rouge">URLName</code> 对象。用于表示需要身份验证的 URL。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">public URLName(String protocol, String host, int port, String file)</code>: 使用指定的协议、主机、端口和文件路径创建一个 <code class="language-plaintext highlighter-rouge">URLName</code> 对象，用户名和密码为空。通常用于表示不需要身份验证的 URL。</li>
  <li><code class="language-plaintext highlighter-rouge">public URLName(URLName url)</code>: 复制构造方法，创建一个新的 <code class="language-plaintext highlighter-rouge">URLName</code> 对象，其内容与给定的 <code class="language-plaintext highlighter-rouge">URLName</code> 对象相同。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">URLName</code> 类中除了构造方法外还有一些常用的方法，例如：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">public String getProtocol()</code>: 返回 URL 的协议部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public String getHost()</code>: 返回 URL 的主机部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public int getPort()</code>: 返回 URL 的端口部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public String getFile()</code>: 返回 URL 的文件路径部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public String getUsername()</code>: 返回 URL 的用户名部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public String getPassword()</code>: 返回 URL 的密码部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public void setProtocol(String protocol)</code>: 设置 URL 的协议部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public void setHost(String host)</code>: 设置 URL 的主机部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public void setPort(int port)</code>: 设置 URL 的端口部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public void setFile(String file)</code>: 设置 URL 的文件路径部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public void setUsername(String username)</code>: 设置 URL 的用户名部分。</li>
  <li><code class="language-plaintext highlighter-rouge">public void setPassword(String password)</code>: 设置 URL 的密码部分。</li>
</ul>

<hr />

<h4 id="pop3">POP3</h4>

<p>使用POP3收取Email时，无需关心POP3协议底层，因为<code class="language-plaintext highlighter-rouge">JavaMail</code>提供了高层接口。首先需要连接到Store对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.sun.mail.pop3.POP3SSLStore</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.MessagingException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.Session</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.Store</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.URLName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoTest</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">testNegative</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">MessagingException</span> <span class="o">{</span>
        <span class="c1">// 登录用户名:</span>
        <span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">"***@163.com"</span><span class="o">;</span>
        <span class="c1">// 登录口令:</span>
        <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"***"</span><span class="o">;</span>
        <span class="c1">// 主机端口号</span>
        <span class="nc">String</span> <span class="n">port</span> <span class="o">=</span><span class="s">"995"</span><span class="o">;</span>
        <span class="c1">// pop3主机：</span>
        <span class="nc">String</span> <span class="n">host</span><span class="o">=</span><span class="s">"pop3.163.com"</span><span class="o">;</span>
        <span class="c1">// 连接到pop3服务器995端口:</span>
        <span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="n">getProperties</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
        <span class="c1">// 获取Session实例:</span>
        <span class="c1">// 连接到Store:</span>
        <span class="nc">URLName</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLName</span><span class="o">(</span><span class="s">"pop3s"</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">port</span><span class="o">),</span> <span class="s">""</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
        <span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span><span class="c1">//静态方法，用于获取`Session`实例。</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setDebug</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 显示调试信息</span>
        <span class="nc">Store</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">POP3SSLStore</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="n">url</span><span class="o">);</span>
        <span class="n">store</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Properties</span> <span class="nf">getProperties</span><span class="o">(</span><span class="nc">String</span> <span class="n">host</span><span class="o">,</span> <span class="nc">String</span> <span class="n">port</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.store.protocol"</span><span class="o">,</span> <span class="s">"pop3s"</span><span class="o">);</span> <span class="c1">// 协议名称</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.pop3.host"</span><span class="o">,</span> <span class="n">host</span><span class="o">);</span> <span class="c1">// pop3主机名</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.pop3.port"</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span> <span class="c1">// 主机端口号</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.pop3.auth"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 是否需要用户认证</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.pop3.starttls.enable"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span> <span class="c1">// 关闭TLS加密</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.pop3.ssl.enable"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 启用SSL加密</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.pop3.socketFactory.class"</span><span class="o">,</span> <span class="s">"javax.net.ssl.SSLSocketFactory"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.pop3.socketFactory.port"</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">POP3SSLStore</code> 是 <code class="language-plaintext highlighter-rouge">POP3Store</code> 的 SSL 安全版本。它们的构造方法应该是类似的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">POP3Store</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">,</span> <span class="nc">URLName</span> <span class="n">url</span><span class="o">)</span>
</code></pre></div></div>

<p>这个构造方法接受一个 <code class="language-plaintext highlighter-rouge">Session</code> 对象和一个 <code class="language-plaintext highlighter-rouge">URLName</code> 对象作为参数，用于初始化 <code class="language-plaintext highlighter-rouge">POP3Store</code> 对象。<code class="language-plaintext highlighter-rouge">Session</code> 对象包含邮件会话的配置信息，而 <code class="language-plaintext highlighter-rouge">URLName</code> 对象包含用于连接到邮件服务器的 URL 信息。</p>

<p>实际上，<code class="language-plaintext highlighter-rouge">POP3SSLStore</code> 的构造方法内部调用了父类 <code class="language-plaintext highlighter-rouge">POP3Store</code> 的带有四个参数的构造方法，其中第一个参数是 <code class="language-plaintext highlighter-rouge">Session</code> 对象，第二个参数是 <code class="language-plaintext highlighter-rouge">URLName</code> 对象，第三个参数是字符串 <code class="language-plaintext highlighter-rouge">"pop3s"</code>，表示使用 POP3 协议的 SSL 安全版本，第四个参数是 <code class="language-plaintext highlighter-rouge">true</code>，表示要使用 SSL 连接。源码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">POP3SSLStore</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">,</span> <span class="nc">URLName</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="n">url</span><span class="o">,</span> <span class="s">"pop3s"</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样就可以使用 SSL 安全连接到 POP3 邮件服务器。</p>

<p>对于代码中的<code class="language-plaintext highlighter-rouge">pop3s</code>都可以改成<code class="language-plaintext highlighter-rouge">pop3</code>，因为使用<code class="language-plaintext highlighter-rouge">POP3SSLStore</code>已经定义了<code class="language-plaintext highlighter-rouge">pop3s</code>，即<code class="language-plaintext highlighter-rouge">pop3</code>的SSL安全版本：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">URLName</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLName</span><span class="o">(</span><span class="s">"pop3s"</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">port</span><span class="o">),</span> <span class="s">""</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.store.protocol"</span><span class="o">,</span> <span class="s">"pop3s"</span><span class="o">);</span> <span class="c1">// 协议名称</span>
</code></pre></div></div>

<p>实际上整个<code class="language-plaintext highlighter-rouge">getProperties</code>方法都是多余的，协议也是多余的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 登录用户名:</span>
<span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">"***@163.com"</span><span class="o">;</span>
<span class="c1">// 登录口令:</span>
<span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"***"</span><span class="o">;</span>
<span class="c1">// 主机端口号</span>
<span class="nc">String</span> <span class="n">port</span> <span class="o">=</span><span class="s">"995"</span><span class="o">;</span>
<span class="c1">// imap主机：</span>
<span class="nc">String</span> <span class="n">host</span><span class="o">=</span><span class="s">"pop3.163.com"</span><span class="o">;</span>
<span class="c1">// 连接到pop3服务器995端口:</span>
<span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="c1">// 获取Session实例:</span>
<span class="c1">// 连接到Store:</span>
<span class="nc">URLName</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLName</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">port</span><span class="o">),</span> <span class="s">""</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
<span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="n">session</span><span class="o">.</span><span class="na">setDebug</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 显示调试信息</span>
<span class="nc">Store</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">POP3SSLStore</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="n">url</span><span class="o">);</span><span class="c1">//调用就会自动设置pop3s</span>
<span class="n">store</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</code></pre></div></div>

<hr />

<p>如果不需要使用 SSL 安全连接，可以使用 <code class="language-plaintext highlighter-rouge">POP3Store</code> 类而不是 <code class="language-plaintext highlighter-rouge">POP3SSLStore</code> 类。<code class="language-plaintext highlighter-rouge">POP3Store</code> 类用于表示普通的、非加密的 POP3 连接。在创建 <code class="language-plaintext highlighter-rouge">POP3Store</code> 对象时，可以直接指定协议为 <code class="language-plaintext highlighter-rouge">"pop3"</code>，而不是 <code class="language-plaintext highlighter-rouge">"pop3s"</code>，这样就可以使用非加密的方式连接到 POP3 邮件服务器。示例代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"mail.pop3.host"</span><span class="o">,</span> <span class="s">"pop3.163.com"</span><span class="o">);</span><span class="c1">//多余的操作</span>
<span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"mail.pop3.port"</span><span class="o">,</span> <span class="s">"110"</span><span class="o">);</span><span class="c1">//多余的操作</span>
<span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.pop3.ssl.enable"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span> <span class="c1">// 不启用SSL加密，这个也是多余的操作</span>

<span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="nc">Store</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">POP3Store</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="k">new</span> <span class="nc">URLName</span><span class="o">(</span><span class="s">"pop3"</span><span class="o">,</span> <span class="s">"pop3.163.com"</span><span class="o">,</span> <span class="mi">110</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="s">"username"</span><span class="o">,</span> <span class="s">"password"</span><span class="o">));</span>
<span class="n">store</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</code></pre></div></div>

<p>在这个示例中，创建了一个 <code class="language-plaintext highlighter-rouge">POP3Store</code> 对象，并指定了 POP3 邮件服务器的主机、端口、用户名和密码。连接时不需要指定使用 SSL，因为默认情况下 <code class="language-plaintext highlighter-rouge">POP3Store</code> 使用的是非加密的方式。</p>

<p>实际上<code class="language-plaintext highlighter-rouge">POP3Store</code>的构造方法定义如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">POP3Store</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">,</span> <span class="nc">URLName</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="n">url</span><span class="o">,</span> <span class="s">"pop3"</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nf">POP3Store</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">,</span> <span class="nc">URLName</span> <span class="n">url</span><span class="o">,</span>
                 <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isSSL</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="n">url</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">url</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="na">getProtocol</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MailLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">(),</span> <span class="s">"DEBUG POP3"</span><span class="o">,</span>
                            <span class="n">session</span><span class="o">.</span><span class="na">getDebug</span><span class="o">(),</span> <span class="n">session</span><span class="o">.</span><span class="na">getDebugOut</span><span class="o">());</span>

    <span class="k">if</span> <span class="o">(!</span><span class="n">isSSL</span><span class="o">)</span>
        <span class="n">isSSL</span> <span class="o">=</span> <span class="nc">PropUtil</span><span class="o">.</span><span class="na">getBooleanProperty</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getProperties</span><span class="o">(),</span>
                                            <span class="s">"mail."</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">".ssl.enable"</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isSSL</span><span class="o">)</span>
        <span class="k">this</span><span class="o">.</span><span class="na">defaultPort</span> <span class="o">=</span> <span class="mi">995</span><span class="o">;</span>
    <span class="k">else</span>
        <span class="k">this</span><span class="o">.</span><span class="na">defaultPort</span> <span class="o">=</span> <span class="mi">110</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">isSSL</span> <span class="o">=</span> <span class="n">isSSL</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因此，只需要写主机地址和用户名及密码，但由于<code class="language-plaintext highlighter-rouge">URLName</code>这个构造方法要指定端口号，还是指定了<code class="language-plaintext highlighter-rouge">110</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 登录用户名:</span>
<span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">"***@163.com"</span><span class="o">;</span>
<span class="c1">// 登录口令:</span>
<span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"***"</span><span class="o">;</span>
<span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="n">session</span><span class="o">.</span><span class="na">setDebug</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 显示调试信息</span>
<span class="nc">Store</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">POP3Store</span><span class="o">(</span><span class="n">session</span><span class="o">,</span> <span class="k">new</span> <span class="nc">URLName</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"pop3.163.com"</span><span class="o">,</span> <span class="mi">110</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">));</span>
<span class="n">store</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</code></pre></div></div>

<hr />

<h4 id="imap">IMAP</h4>

<p>使用IMAP协议的SSL安全连接方式（还是写规范点）：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.sun.mail.pop3.POP3SSLStore</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.MessagingException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.Session</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.Store</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">jakarta.mail.URLName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Properties</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoTest</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">testNegative</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">MessagingException</span> <span class="o">{</span>
        <span class="c1">// 登录用户名:</span>
        <span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">"***@163.com"</span><span class="o">;</span>
        <span class="c1">// 登录口令:</span>
        <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"***"</span><span class="o">;</span>
        <span class="c1">// 主机端口号</span>
        <span class="nc">String</span> <span class="n">port</span> <span class="o">=</span><span class="s">"993"</span><span class="o">;</span>
        <span class="c1">// imap主机：</span>
        <span class="nc">String</span> <span class="n">host</span><span class="o">=</span><span class="s">"imap.163.com"</span><span class="o">;</span>
        <span class="c1">// 连接到imap服务器993端口:</span>
        <span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="n">getProperties</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
        <span class="c1">// 获取Session实例:</span>
        <span class="c1">// 连接到Store:</span>
        <span class="nc">URLName</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLName</span><span class="o">(</span><span class="s">"imaps"</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">port</span><span class="o">),</span> <span class="s">""</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
        <span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span><span class="c1">//静态方法，用于获取`Session`实例。</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setDebug</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 显示调试信息</span>
        <span class="nc">Store</span> <span class="n">store</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getStore</span><span class="o">(</span><span class="n">url</span><span class="o">);</span><span class="c1">//获取指定协议的`Store`对象，用于接收邮件。</span>
        <span class="n">store</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Properties</span> <span class="nf">getProperties</span><span class="o">(</span><span class="nc">String</span> <span class="n">host</span><span class="o">,</span> <span class="nc">String</span> <span class="n">port</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.store.protocol"</span><span class="o">,</span> <span class="s">"imaps"</span><span class="o">);</span> <span class="c1">// 协议名称</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.imap.host"</span><span class="o">,</span> <span class="n">host</span><span class="o">);</span> <span class="c1">// imap主机名</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.imap.port"</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span> <span class="c1">// 主机端口号</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.imap.auth"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 是否需要用户认证</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.imap.starttls.enable"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span> <span class="c1">// 关闭TLS加密</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.imap.ssl.enable"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span> <span class="c1">// 启用SSL加密</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.imap.socketFactory.class"</span><span class="o">,</span> <span class="s">"javax.net.ssl.SSLSocketFactory"</span><span class="o">);</span>
        <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"mail.imap.socketFactory.port"</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>修改的地方也就几处：<code class="language-plaintext highlighter-rouge">port</code>为<code class="language-plaintext highlighter-rouge">993</code>，<code class="language-plaintext highlighter-rouge">host</code>为<code class="language-plaintext highlighter-rouge">imap.163.com</code>，<code class="language-plaintext highlighter-rouge">Store</code>的获取方式改为：<code class="language-plaintext highlighter-rouge">session.getStore(url);</code>，注意协议都改为了：<code class="language-plaintext highlighter-rouge">imaps</code>，这里不能像前面<code class="language-plaintext highlighter-rouge">pop3</code>一样不加<code class="language-plaintext highlighter-rouge">s</code>一样能SSL安全连接。</p>

<p>同样的，<code class="language-plaintext highlighter-rouge">getProperties</code>方法也是多余的，<code class="language-plaintext highlighter-rouge">new URLName("imaps"...</code>里的<code class="language-plaintext highlighter-rouge">imaps</code>这次不是多余的了，因为调用的是<code class="language-plaintext highlighter-rouge">session.getStore(url);</code>这个一般方法。</p>

<p><strong>也可以改成<code class="language-plaintext highlighter-rouge">Store store = new IMAPSSLStore(session,url);</code></strong></p>

<hr />

<p>要改为非SSL安全连接的：只需要改<code class="language-plaintext highlighter-rouge">port</code>为<code class="language-plaintext highlighter-rouge">143</code>，协议改为：<code class="language-plaintext highlighter-rouge">imap</code>，<code class="language-plaintext highlighter-rouge">ssl</code>指定为<code class="language-plaintext highlighter-rouge">false</code>或者不写。即：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">"***@163.com"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"***"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">port</span> <span class="o">=</span><span class="s">"143"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">host</span><span class="o">=</span><span class="s">"imap.163.com"</span><span class="o">;</span>
<span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="nc">URLName</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLName</span><span class="o">(</span><span class="s">"imap"</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">port</span><span class="o">),</span> <span class="s">""</span><span class="o">,</span> <span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
<span class="nc">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">props</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span><span class="c1">//静态方法，用于获取`Session`实例。</span>
<span class="n">session</span><span class="o">.</span><span class="na">setDebug</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 显示调试信息</span>
<span class="nc">Store</span> <span class="n">store</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">getStore</span><span class="o">(</span><span class="n">url</span><span class="o">);</span><span class="c1">//获取指定协议的`Store`对象，用于接收邮件。</span>
<span class="n">store</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</code></pre></div></div>

<p><strong>也可以改成<code class="language-plaintext highlighter-rouge">Store store = new IMAPStore(session,url);</code></strong></p>

<h3 id="查看邮箱">查看邮箱</h3>

<p><code class="language-plaintext highlighter-rouge">Store</code> 类表示邮件存储的抽象类，它提供了一组方法用于连接到邮件服务器并访问邮件。下面是一些常用的 <code class="language-plaintext highlighter-rouge">Store</code> 类的方法：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">void connect(String host, String user, String password)</code>：连接到指定主机的邮件服务器，使用指定的用户名和密码进行身份验证。</li>
  <li><code class="language-plaintext highlighter-rouge">void connect()</code>：连接到之前设置的邮件服务器，使用之前设置的用户名和密码进行身份验证。</li>
  <li><code class="language-plaintext highlighter-rouge">Folder getDefaultFolder()</code>：获取默认文件夹，通常是收件箱。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Folder getFolder(String name)</code>：根据给定的文件夹名称获取文件夹对象。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">Folder[] getPersonalNamespaces()</code>：获取个人文件夹命名空间。</li>
  <li><code class="language-plaintext highlighter-rouge">Folder[] getUserNamespaces(String user)</code>：获取给定用户的文件夹命名空间。</li>
  <li><code class="language-plaintext highlighter-rouge">void close()</code>：关闭与邮件服务器的连接。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isConnected()</code>：检查是否已连接到邮件服务器。</li>
  <li><code class="language-plaintext highlighter-rouge">void addConnectionListener(ConnectionListener listener)</code>：添加连接监听器，以便在连接状态发生变化时接收通知。</li>
  <li><code class="language-plaintext highlighter-rouge">void removeConnectionListener(ConnectionListener listener)</code>：移除连接监听器。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">Folder</code> 类表示邮件文件夹，它提供了一组方法用于管理和操作邮件文件夹中的邮件。下面是一些常用的 <code class="language-plaintext highlighter-rouge">Folder</code> 类的方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">String getFullName()</code>：获取邮件文件夹的完整名称。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean exists()</code>：检查邮件文件夹是否存在。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">void open(int mode)</code>：打开邮件文件夹，并指定打开模式（只读、读写等）。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">boolean isOpen()</code>：检查邮件文件夹是否已打开。</li>
  <li><code class="language-plaintext highlighter-rouge">void appendMessages(Message[] msgs)</code>：向邮件文件夹中追加邮件。</li>
  <li><code class="language-plaintext highlighter-rouge">void delete(boolean recurse)</code>：删除邮件文件夹，可选择是否递归删除子文件夹。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">int getMessageCount()</code>：获取邮件文件夹中的邮件数量。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">int getNewMessageCount()</code>：获取邮件文件夹中的新邮件数量。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">int getUnreadMessageCount()</code>：获取邮件文件夹中的未读邮件数量。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">int getDeletedMessageCount()</code>：获取邮件文件夹中已标记为删除的邮件数量。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">Message[] getMessages()</code>：获取邮件文件夹中的所有邮件。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">Message getMessage(int msgnum)</code>：根据邮件序号获取邮件对象。</li>
  <li><code class="language-plaintext highlighter-rouge">Message getMessage(int start,int end)</code>：根据邮件序号获取邮件对象。</li>
  <li><code class="language-plaintext highlighter-rouge">Message[] search(SearchTerm term)</code>：根据指定的搜索条件搜索邮件。</li>
  <li><code class="language-plaintext highlighter-rouge">void setFlags(Message[] msgs, Flags flag, boolean value)</code>：设置邮件的标志（例如，已读、已删除等）。</li>
  <li><code class="language-plaintext highlighter-rouge">Message[] expunge()</code>：清除标记为已删除的邮件，并返回已删除的邮件数组。</li>
  <li><code class="language-plaintext highlighter-rouge">void close(boolean expunge)</code>：关闭邮件文件夹，可选择是否删除已删除的邮件。</li>
  <li><code class="language-plaintext highlighter-rouge">void addMessageChangedListener(MessageChangedListener listener)</code>：添加邮件变化监听器。</li>
  <li><code class="language-plaintext highlighter-rouge">void removeMessageChangedListener(MessageChangedListener listener)</code>：移除邮件变化监听器。</li>
  <li><code class="language-plaintext highlighter-rouge">void addFolderListener(FolderListener listener)</code>：添加文件夹监听器。</li>
  <li><code class="language-plaintext highlighter-rouge">void removeFolderListener(FolderListener listener)</code>：移除文件夹监听器。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">MimeUtility</code> 类是 JavaMail API 中用于处理 MIME（Multipurpose Internet Mail Extensions）消息的实用工具类。它提供了一些方法来编码和解码 MIME 消息的各个部分，以及处理文本和二进制数据的方法。</p>

<p>以下是 <code class="language-plaintext highlighter-rouge">MimeUtility</code> 类的一些常用方法：</p>

<ol>
  <li><strong>编码方法</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">encodeText(String text) throws UnsupportedEncodingException</code>：对文本进行 MIME 编码。</li>
      <li><code class="language-plaintext highlighter-rouge">encodeWord(String word) throws UnsupportedEncodingException</code>：对单词进行 MIME 编码。</li>
    </ul>
  </li>
  <li><strong>解码方法</strong>：
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">decodeText(String text) throws UnsupportedEncodingException</code>：解码 MIME 编码的文本。</strong></li>
    </ul>
  </li>
  <li><strong>其他方法</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">fold(int used, String s)</code>：根据 RFC 2822 规范折叠长行。</li>
      <li><code class="language-plaintext highlighter-rouge">unfold(String s)</code>：从折叠的行中还原原始行。</li>
      <li><code class="language-plaintext highlighter-rouge">encodeWord(String word, String charset, String encoding) throws UnsupportedEncodingException</code>：使用指定的字符集和编码对单词进行编码。</li>
      <li><code class="language-plaintext highlighter-rouge">decodeWord(String eword)</code> throws ParseException：解码 MIME 编码的单词。</li>
      <li><code class="language-plaintext highlighter-rouge">quote(String s, String specials)</code>：对字符串中的特殊字符进行引用。</li>
      <li><code class="language-plaintext highlighter-rouge">quote(String s)</code>：对字符串中的特殊字符进行引用，默认引用所有非 ASCII 字符。</li>
    </ul>
  </li>
</ol>

<p>这些方法可能会抛出 <code class="language-plaintext highlighter-rouge">UnsupportedEncodingException</code> 或 <code class="language-plaintext highlighter-rouge">ParseException</code> 异常，因此在使用时需要处理这些异常。</p>

<hr />

<p>一个<code class="language-plaintext highlighter-rouge">Store</code>对象表示整个邮箱的存储，要收取邮件，需要通过<code class="language-plaintext highlighter-rouge">Store</code>访问指定的<code class="language-plaintext highlighter-rouge">Folder</code>（文件夹），<strong>通常是<code class="language-plaintext highlighter-rouge">INBOX</code>表示收件箱</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取收件箱:</span>
<span class="nc">Folder</span> <span class="n">folder</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="na">getFolder</span><span class="o">(</span><span class="s">"INBOX"</span><span class="o">);</span>
<span class="c1">// 以读写方式打开:</span>
<span class="n">folder</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="nc">Folder</span><span class="o">.</span><span class="na">READ_WRITE</span><span class="o">);</span>
<span class="c1">// 打印邮件总数/新邮件数量/未读数量/已删除数量:</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Total messages: "</span> <span class="o">+</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessageCount</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"New messages: "</span> <span class="o">+</span> <span class="n">folder</span><span class="o">.</span><span class="na">getNewMessageCount</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Unread messages: "</span> <span class="o">+</span> <span class="n">folder</span><span class="o">.</span><span class="na">getUnreadMessageCount</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Deleted messages: "</span> <span class="o">+</span> <span class="n">folder</span><span class="o">.</span><span class="na">getDeletedMessageCount</span><span class="o">());</span>
<span class="c1">// 获取每一封邮件:</span>
<span class="nc">Message</span><span class="o">[]</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Message</span> <span class="n">message</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 打印每一封邮件:</span>
    <span class="n">printMessage</span><span class="o">((</span><span class="nc">MimeMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">);</span>
<span class="o">}</span>
<span class="n">folder</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 传入true表示删除操作会同步到服务器上（即删除服务器收件箱的邮件）</span>
<span class="n">store</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<p>获取到一个<code class="language-plaintext highlighter-rouge">Message</code>对象时，可以强制转型为<code class="language-plaintext highlighter-rouge">MimeMessage</code>，然后打印出邮件主题、发件人、收件人等信息：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">printMessage</span><span class="o">(</span><span class="nc">MimeMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">MessagingException</span> <span class="o">{</span>
    <span class="c1">// 邮件主题:</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Subject: "</span> <span class="o">+</span> <span class="nc">MimeUtility</span><span class="o">.</span><span class="na">decodeText</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">getSubject</span><span class="o">()));</span>
    <span class="c1">// 发件人:</span>
    <span class="nc">Address</span><span class="o">[]</span> <span class="n">froms</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">getFrom</span><span class="o">();</span>
    <span class="nc">InternetAddress</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="nc">InternetAddress</span><span class="o">)</span> <span class="n">froms</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From: "</span> <span class="o">+</span> <span class="n">getAddressInfo</span><span class="o">(</span><span class="n">address</span><span class="o">));</span>
    <span class="c1">// 收件人（可以有多个）:</span>
    <span class="nc">InternetAddress</span><span class="o">[]</span> <span class="n">recipients</span> <span class="o">=</span> <span class="o">(</span><span class="nc">InternetAddress</span><span class="o">[])</span> <span class="n">msg</span><span class="o">.</span><span class="na">getAllRecipients</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">InternetAddress</span> <span class="n">recipient</span> <span class="o">:</span> <span class="n">recipients</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Recipient: "</span> <span class="o">+</span> <span class="n">getAddressInfo</span><span class="o">(</span><span class="n">recipient</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="c1">// 打印邮件内容</span>
    <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">getBody</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">MimeUtility</span><span class="o">.</span><span class="na">decodeText</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
<span class="o">}</span>

<span class="cm">/**
 * 获取InternetAddress的字符串形式
 * @param address 地址
 * @return 字符串
 * @throws UnsupportedEncodingException 字符编码不支持。
 */</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">getAddressInfo</span><span class="o">(</span><span class="nc">InternetAddress</span> <span class="n">address</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UnsupportedEncodingException</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">personal</span> <span class="o">=</span> <span class="n">address</span><span class="o">.</span><span class="na">getPersonal</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">personal</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">address</span><span class="o">.</span><span class="na">getAddress</span><span class="o">()</span> <span class="o">:</span> <span class="o">(</span><span class="nc">MimeUtility</span><span class="o">.</span><span class="na">decodeText</span><span class="o">(</span><span class="n">personal</span><span class="o">)</span> <span class="o">+</span> <span class="s">" &lt;"</span> <span class="o">+</span> <span class="n">address</span><span class="o">.</span><span class="na">getAddress</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&gt;"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>获取邮件的正文，一个<code class="language-plaintext highlighter-rouge">MimeMessage</code>对象也是一个<code class="language-plaintext highlighter-rouge">Part</code>对象，它可能只包含一个文本，也可能是一个<code class="language-plaintext highlighter-rouge">Multipart</code>对象，即由几个<code class="language-plaintext highlighter-rouge">Part</code>构成，因此，需要递归地解析出完整的正文：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 邮件内容
 * @param part 邮件部分内容
 * @return 字符串
 * @throws MessagingException
 * @throws IOException
 */</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">getBody</span><span class="o">(</span><span class="nc">Part</span> <span class="n">part</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">MessagingException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">part</span><span class="o">.</span><span class="na">isMimeType</span><span class="o">(</span><span class="s">"text/*"</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// Part是文本:</span>
        <span class="k">return</span> <span class="n">part</span><span class="o">.</span><span class="na">getContent</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">part</span><span class="o">.</span><span class="na">isMimeType</span><span class="o">(</span><span class="s">"multipart/*"</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// Part是一个Multipart对象:</span>
        <span class="nc">Multipart</span> <span class="n">multipart</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Multipart</span><span class="o">)</span> <span class="n">part</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>
        <span class="c1">// 循环解析每个子Part:</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">multipart</span><span class="o">.</span><span class="na">getCount</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">BodyPart</span> <span class="n">bodyPart</span> <span class="o">=</span> <span class="n">multipart</span><span class="o">.</span><span class="na">getBodyPart</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">body</span> <span class="o">=</span> <span class="n">getBody</span><span class="o">(</span><span class="n">bodyPart</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">body</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p><strong>注意！网易邮箱对于IMAP协议收信有额外要求</strong>：<a href="https://help.mail.163.com/faqDetail.do?code=d7a5dc8471cd0c0e8b4b8f4f8e49998b374173cfe9171305fa1ce630d7f67ac2eda07326646e6eb0">imap连接提示Unsafe Login，被阻止的收信行为</a></p>

<p>在<code class="language-plaintext highlighter-rouge">store.connect();</code>后面加上以下代码即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="no">IAM</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="no">IAM</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span><span class="s">"myname"</span><span class="o">);</span>
<span class="no">IAM</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"version"</span><span class="o">,</span><span class="s">"1.0.0"</span><span class="o">);</span>
<span class="no">IAM</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"vendor"</span><span class="o">,</span><span class="s">"myclient"</span><span class="o">);</span>
<span class="no">IAM</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"support-email"</span><span class="o">,</span><span class="s">"testmail@test.com"</span><span class="o">);</span>
<span class="o">((</span><span class="nc">IMAPStore</span><span class="o">)</span><span class="n">store</span><span class="o">).</span><span class="na">id</span><span class="o">(</span><span class="no">IAM</span><span class="o">);</span>
</code></pre></div></div>

<p>发送IMAP ID命令（如果服务器支持）并从服务器返回结果。 ID命令向服务器标识客户端并将有关服务器的信息返回给客户端。</p>

<hr />

<p><strong>获取最近的10封邮件：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取邮件文件夹</span>
<span class="nc">Folder</span> <span class="n">folder</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="na">getFolder</span><span class="o">(</span><span class="s">"INBOX"</span><span class="o">);</span>
<span class="n">folder</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="nc">Folder</span><span class="o">.</span><span class="na">READ_ONLY</span><span class="o">);</span>
<span class="c1">// 获取邮件总数</span>
<span class="kt">int</span> <span class="n">totalMessages</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessageCount</span><span class="o">();</span>
<span class="c1">// 计算要获取的起始邮件号和结束邮件号</span>
<span class="kt">int</span> <span class="n">startMessage</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">totalMessages</span> <span class="o">-</span> <span class="mi">9</span><span class="o">);</span> <span class="c1">// 最近的第一封邮件</span>
<span class="kt">int</span> <span class="n">endMessage</span> <span class="o">=</span> <span class="n">totalMessages</span><span class="o">;</span> <span class="c1">// 最近的最后一封邮件</span>
<span class="c1">// 获取最近的 10 封邮件</span>
<span class="nc">Message</span><span class="o">[]</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessages</span><span class="o">(</span><span class="n">startMessage</span><span class="o">,</span> <span class="n">endMessage</span><span class="o">);</span>
<span class="c1">// 关闭邮件文件夹</span>
<span class="n">folder</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="保存附件">保存附件</h3>

<p>加个判断就行。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">String</span> <span class="nf">getBody</span><span class="o">(</span><span class="nc">Part</span> <span class="n">part</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">MessagingException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">part</span><span class="o">.</span><span class="na">isMimeType</span><span class="o">(</span><span class="s">"text/*"</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// Part是文本:</span>
        <span class="k">return</span> <span class="n">part</span><span class="o">.</span><span class="na">getContent</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">part</span><span class="o">.</span><span class="na">isMimeType</span><span class="o">(</span><span class="s">"multipart/*"</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// Part是一个Multipart对象:</span>
        <span class="nc">Multipart</span> <span class="n">multipart</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Multipart</span><span class="o">)</span> <span class="n">part</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span>
        <span class="c1">// 循环解析每个子Part:</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">multipart</span><span class="o">.</span><span class="na">getCount</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">BodyPart</span> <span class="n">bodyPart</span> <span class="o">=</span> <span class="n">multipart</span><span class="o">.</span><span class="na">getBodyPart</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">body</span> <span class="o">=</span> <span class="n">getBody</span><span class="o">(</span><span class="n">bodyPart</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">body</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c1">// 保存非文本类型的部分为文件</span>
            <span class="n">saveAttachment</span><span class="o">(</span><span class="n">bodyPart</span><span class="o">,</span> <span class="n">sb</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="o">}</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">saveAttachment</span><span class="o">(</span><span class="nc">BodyPart</span> <span class="n">bodyPart</span><span class="o">,</span> <span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">MessagingException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">bodyPart</span><span class="o">.</span><span class="na">isMimeType</span><span class="o">(</span><span class="s">"text/*"</span><span class="o">))</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">bodyPart</span><span class="o">.</span><span class="na">getFileName</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">fileName</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">fileName</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">bodyPart</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
            <span class="nc">FileOutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">fileName</span><span class="o">);</span>
            <span class="kt">byte</span><span class="o">[]</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">bytesRead</span><span class="o">;</span>
            <span class="k">while</span> <span class="o">((</span><span class="n">bytesRead</span> <span class="o">=</span> <span class="n">inputStream</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">outputStream</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">bytesRead</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">outputStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="n">inputStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n已保存的附件: "</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">fileName</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="删除邮件">删除邮件</h3>

<p><code class="language-plaintext highlighter-rouge">Folder</code> 类的删除方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">void open(int mode)</code>：打开邮件文件夹，并指定打开模式（只读、读写等）。</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Folder.READ_ONLY</code>（值为 1）：只读模式，用于读取邮件但不能修改或删除邮件。</li>
      <li><code class="language-plaintext highlighter-rouge">Folder.READ_WRITE</code>（值为 2）：读写模式，用于读取、修改和删除邮件。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">void setFlags(Message[] msgs, Flags flag, boolean value)</code>：设置邮件的标志（例如，已读、已删除等）。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">Message[] expunge()</code>：清除标记为已删除的邮件，并返回已删除的邮件数组。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void close(boolean expunge)</code>：关闭邮件文件夹，可选择是否删除已删除的邮件。</li>
</ul>

<hr />

<p>在 JavaMail API 中，<code class="language-plaintext highlighter-rouge">Flags</code> 类表示邮件的标志。<code class="language-plaintext highlighter-rouge">Flags</code> 类提供了一些常量来表示不同的标志，可以使用这些常量来设置或检查邮件的标志。</p>

<p>构造方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Flags flags = new Flags();</code>：创建一个空的 <code class="language-plaintext highlighter-rouge">Flags</code> 对象。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Flags flags = new Flags(Flags.Flag flag);</code>：创建一个包含指定标志的 <code class="language-plaintext highlighter-rouge">Flags</code> 对象。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">Flags flags = new Flags(Flags flags);</code>：创建一个包含另一个 <code class="language-plaintext highlighter-rouge">Flags</code> 对象中所有标志的 <code class="language-plaintext highlighter-rouge">Flags</code> 对象。</li>
</ul>

<p>常用的方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">void add(Flags.Flag flag)</code>：添加指定的标志。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void add(Flags flags)</code>：添加另一个 <code class="language-plaintext highlighter-rouge">Flags</code> 对象中的所有标志。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean contains(Flags.Flag flag)</code>：检查是否存在指定的标志。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean containsAll(Flags flags)</code>：检查是否存在另一个 <code class="language-plaintext highlighter-rouge">Flags</code> 对象中的所有标志。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean equals(Object obj)</code>：比较两个 <code class="language-plaintext highlighter-rouge">Flags</code> 对象是否相等。</li>
  <li><code class="language-plaintext highlighter-rouge">Flags.Flag[] getSystemFlags()</code>：返回系统定义的所有标志。</li>
  <li><code class="language-plaintext highlighter-rouge">Flags.Flag[] getUserFlags()</code>：返回用户定义的所有标志。</li>
  <li><code class="language-plaintext highlighter-rouge">int hashCode()</code>：返回 <code class="language-plaintext highlighter-rouge">Flags</code> 对象的哈希码值。</li>
  <li><code class="language-plaintext highlighter-rouge">void remove(Flags.Flag flag)</code>：移除指定的标志。</li>
  <li><code class="language-plaintext highlighter-rouge">void remove(Flags flags)</code>：移除另一个 <code class="language-plaintext highlighter-rouge">Flags</code> 对象中的所有标志。</li>
  <li><code class="language-plaintext highlighter-rouge">void set(Flags.Flag flag, boolean value)</code>：设置指定标志的状态。</li>
  <li><code class="language-plaintext highlighter-rouge">void setFlags(Flags.Flag[] flags, boolean value)</code>：设置指定一组标志的状态。</li>
  <li><code class="language-plaintext highlighter-rouge">void setUserFlags(Flags flags)</code>：设置用户定义的标志。</li>
</ul>

<p>以下是 <code class="language-plaintext highlighter-rouge">Flags</code> 类中定义的一些常量：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Flags.Flag.ANSWERED</code>：已回复标志，表示邮件已被回复。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Flags.Flag.DELETED</code>：已删除标志，表示邮件已被标记为删除。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">Flags.Flag.DRAFT</code>：草稿标志，表示邮件是草稿。</li>
  <li><code class="language-plaintext highlighter-rouge">Flags.Flag.FLAGGED</code>：已标记标志，表示邮件已被标记。</li>
  <li><code class="language-plaintext highlighter-rouge">Flags.Flag.RECENT</code>：最近标志，表示邮件是最近收到的。</li>
  <li><code class="language-plaintext highlighter-rouge">Flags.Flag.SEEN</code>：已读标志，表示邮件已被阅读。</li>
  <li><code class="language-plaintext highlighter-rouge">Flags.Flag.USER</code>：用户标志，表示用户定义的标志。</li>
</ul>

<p>可以使用这些常量来创建 <code class="language-plaintext highlighter-rouge">Flags</code> 对象，并将其传递给 <code class="language-plaintext highlighter-rouge">Folder.setFlags()</code> 方法来设置邮件的标志。例如，要创建一个包含已读和已回复标志的 <code class="language-plaintext highlighter-rouge">Flags</code> 对象，可以使用以下代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Flags</span> <span class="n">flags</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Flags</span><span class="o">();</span>
<span class="n">flags</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Flags</span><span class="o">.</span><span class="na">Flag</span><span class="o">.</span><span class="na">SEEN</span><span class="o">);</span>
<span class="n">flags</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Flags</span><span class="o">.</span><span class="na">Flag</span><span class="o">.</span><span class="na">ANSWERED</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<p><strong>批量删除邮件：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取收件箱:</span>
<span class="nc">Folder</span> <span class="n">folder</span> <span class="o">=</span> <span class="n">store</span><span class="o">.</span><span class="na">getFolder</span><span class="o">(</span><span class="s">"INBOX"</span><span class="o">);</span>
<span class="c1">// 以读写方式打开:</span>
<span class="n">folder</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="nc">Folder</span><span class="o">.</span><span class="na">READ_WRITE</span><span class="o">);</span>
<span class="c1">// 打印邮件总数/新邮件数量/未读数量/已删除数量:</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Total messages: "</span> <span class="o">+</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessageCount</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"New messages: "</span> <span class="o">+</span> <span class="n">folder</span><span class="o">.</span><span class="na">getNewMessageCount</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Unread messages: "</span> <span class="o">+</span> <span class="n">folder</span><span class="o">.</span><span class="na">getUnreadMessageCount</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Deleted messages: "</span> <span class="o">+</span> <span class="n">folder</span><span class="o">.</span><span class="na">getDeletedMessageCount</span><span class="o">());</span>
<span class="c1">// 获取每一封邮件:</span>
<span class="nc">Message</span><span class="o">[]</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
<span class="nc">Flags</span> <span class="n">flags</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Flags</span><span class="o">(</span><span class="nc">Flags</span><span class="o">.</span><span class="na">Flag</span><span class="o">.</span><span class="na">DELETED</span><span class="o">);</span>
<span class="n">folder</span><span class="o">.</span><span class="na">setFlags</span><span class="o">(</span><span class="n">messages</span><span class="o">,</span><span class="n">flags</span><span class="o">,</span><span class="kc">true</span><span class="o">);</span>
<span class="n">folder</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 关闭邮件文件夹并删除标记为删除的邮件</span>
</code></pre></div></div>

<p>实际上<code class="language-plaintext highlighter-rouge">Folder</code>的<code class="language-plaintext highlighter-rouge">setFlags</code>方法内部是这样的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">msgs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
    <span class="n">msgs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">setFlags</span><span class="o">(</span><span class="n">flag</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">MessageRemovedException</span> <span class="n">me</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// This message is expunged, skip </span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>因此可以直接在单个<code class="language-plaintext highlighter-rouge">Message</code>上调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取每一封邮件:</span>
<span class="nc">Message</span><span class="o">[]</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
<span class="nc">Flags</span> <span class="n">flags</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Flags</span><span class="o">(</span><span class="nc">Flags</span><span class="o">.</span><span class="na">Flag</span><span class="o">.</span><span class="na">DELETED</span><span class="o">);</span>
<span class="n">messages</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">setFlags</span><span class="o">(</span><span class="n">flags</span><span class="o">,</span><span class="kc">true</span><span class="o">);</span>
<span class="n">messages</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">setFlag</span><span class="o">(</span><span class="nc">Flags</span><span class="o">.</span><span class="na">Flag</span><span class="o">.</span><span class="na">DELETED</span><span class="o">,</span><span class="kc">true</span><span class="o">);</span>
<span class="c1">//...</span>
<span class="n">folder</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 关闭邮件文件夹并删除标记为删除的邮件</span>
</code></pre></div></div>

<p>加<code class="language-plaintext highlighter-rouge">s</code>的表示可以设置多个，后面的<code class="language-plaintext highlighter-rouge">Boolean</code>值表示是设置还是取消，还可以通过<code class="language-plaintext highlighter-rouge">expunge()</code>方法删除。</p>

<p>试试用<code class="language-plaintext highlighter-rouge">folder.expunge();</code>删除标记为删除的邮件：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取每一封邮件:</span>
<span class="nc">Message</span><span class="o">[]</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
<span class="n">messages</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">setFlag</span><span class="o">(</span><span class="nc">Flags</span><span class="o">.</span><span class="na">Flag</span><span class="o">.</span><span class="na">DELETED</span><span class="o">,</span><span class="kc">true</span><span class="o">);</span>
<span class="n">folder</span><span class="o">.</span><span class="na">expunge</span><span class="o">();</span><span class="c1">//删除标记为删除的邮件</span>
<span class="n">folder</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 关闭邮件文件夹</span>
</code></pre></div></div>

<p>提示：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code> jakarta.mail.MethodNotSupportedException: Expunge not supported
</code></pre></div></div>

<p>在使用 POP3 协议时，<code class="language-plaintext highlighter-rouge">POP3Folder</code> 不支持 <code class="language-plaintext highlighter-rouge">expunge()</code> 方法，因此会抛出 <code class="language-plaintext highlighter-rouge">MethodNotSupportedException</code> 异常。因为 POP3 协议不支持在服务器上直接删除邮件，而是通过将邮件标记为删除，然后在下次会话中关闭连接时执行实际的删除操作。</p>

<p>如果需要在使用 POP3 协议时删除邮件，可以考虑以下方法：</p>

<ul>
  <li>在读取邮件时，将要删除的邮件标记为删除，但不执行 <code class="language-plaintext highlighter-rouge">expunge()</code> 操作。最后调用 <code class="language-plaintext highlighter-rouge">close(true)</code> 方法来执行实际的删除操作。</li>
  <li>使用其他支持邮件删除的协议，如 IMAP。IMAP 协议支持在服务器上直接删除邮件。</li>
</ul>

<p><strong>使用IMAP协议执行同样的代码：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取每一封邮件:</span>
<span class="nc">Message</span><span class="o">[]</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">folder</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
<span class="n">messages</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">setFlag</span><span class="o">(</span><span class="nc">Flags</span><span class="o">.</span><span class="na">Flag</span><span class="o">.</span><span class="na">DELETED</span><span class="o">,</span><span class="kc">true</span><span class="o">);</span>
<span class="n">folder</span><span class="o">.</span><span class="na">expunge</span><span class="o">();</span><span class="c1">//删除标记为删除的邮件</span>
<span class="c1">//...</span>
<span class="n">folder</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 关闭邮件文件夹</span>
</code></pre></div></div>

<p>正常删除。</p>

<h2 id="http协议">HTTP协议</h2>

<p>HTTP是目前使用最广泛的Web应用程序使用的基础协议，例如，浏览器访问网站，手机App访问后台服务器，都是通过HTTP协议实现的。</p>

<p>HTTP是HyperText Transfer Protocol的缩写，翻译为超文本传输协议，它是基于TCP协议之上的一种请求-响应协议。</p>

<p>当浏览器希望访问某个网站时，浏览器和网站服务器之间首先建立TCP连接，且服务器总是使用<code class="language-plaintext highlighter-rouge">80</code>端口和加密端口<code class="language-plaintext highlighter-rouge">443</code>，然后，浏览器向服务器发送一个HTTP请求，服务器收到后，返回一个HTTP响应，并且在响应中包含了HTML的网页内容，这样，浏览器解析HTML后就可以给用户显示网页了。</p>

<p>HTTP请求的格式是固定的，由HTTP Header和HTTP Body两部分构成。第一行总是请求方法 路径 HTTP版本，例如，<code class="language-plaintext highlighter-rouge">GET / HTTP/1.1</code>表示使用<code class="language-plaintext highlighter-rouge">GET</code>请求，路径是<code class="language-plaintext highlighter-rouge">/</code>，版本是<code class="language-plaintext highlighter-rouge">HTTP/1.1</code>。</p>

<p>后续的每一行都是固定的<code class="language-plaintext highlighter-rouge">Header: Value</code>格式，即HTTP Header，服务器依靠某些特定的Header来识别客户端请求，例如：</p>

<ul>
  <li>Host：表示请求的域名，因为一台服务器上可能有多个网站，因此有必要依靠Host来识别请求是发给哪个网站的；</li>
  <li>User-Agent：表示客户端自身标识信息，不同的浏览器有不同的标识，服务器依靠User-Agent判断客户端类型是IE还是Chrome，是Firefox还是一个Python爬虫；</li>
  <li>Accept：表示客户端能处理的HTTP响应格式，<code class="language-plaintext highlighter-rouge">*/*</code>表示任意格式，<code class="language-plaintext highlighter-rouge">text/*</code>表示任意文本，<code class="language-plaintext highlighter-rouge">image/png</code>表示PNG格式的图片；</li>
  <li>Accept-Language：表示客户端接收的语言，多种语言按优先级排序，服务器依靠该字段给用户返回特定语言的网页版本。</li>
</ul>

<p>如果是<code class="language-plaintext highlighter-rouge">GET</code>请求，那么该HTTP请求只有HTTP Header，没有HTTP Body。如果是<code class="language-plaintext highlighter-rouge">POST</code>请求，那么该HTTP请求带有Body，以一个空行分隔。一个典型的带Body的HTTP请求如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /login HTTP/1.1
Host: www.example.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 30

username=hello&amp;password=123456
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">POST</code>请求通常要设置<code class="language-plaintext highlighter-rouge">Content-Type</code>表示Body的类型，<code class="language-plaintext highlighter-rouge">Content-Length</code>表示Body的长度，这样服务器就可以根据请求的Header和Body做出正确的响应。</p>

<p>此外，<code class="language-plaintext highlighter-rouge">GET</code>请求的参数必须附加在URL上，并以URLEncode方式编码，例如：<code class="language-plaintext highlighter-rouge">http://www.example.com/?a=1&amp;b=K%26R</code>，参数分别是<code class="language-plaintext highlighter-rouge">a=1</code>和<code class="language-plaintext highlighter-rouge">b=K&amp;R</code>。因为URL的长度限制，<code class="language-plaintext highlighter-rouge">GET</code>请求的参数不能太多，而<code class="language-plaintext highlighter-rouge">POST</code>请求的参数就没有长度限制，因为<code class="language-plaintext highlighter-rouge">POST</code>请求的参数必须放到Body中。并且，<code class="language-plaintext highlighter-rouge">POST</code>请求的参数不一定是URL编码，可以按任意格式编码，只需要在<code class="language-plaintext highlighter-rouge">Content-Type</code>中正确设置即可。常见的发送JSON的<code class="language-plaintext highlighter-rouge">POST</code>请求如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /login HTTP/1.1
Content-Type: application/json
Content-Length: 38

{"username":"bob","password":"123456"}
</code></pre></div></div>

<p>HTTP响应也是由Header和Body两部分组成，一个典型的HTTP响应如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 133251

&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;body&gt;
&lt;h1&gt;Hello&lt;/h1&gt;
...
</code></pre></div></div>

<p>响应的第一行总是<code class="language-plaintext highlighter-rouge">HTTP版本 响应代码 响应说明</code>，例如，<code class="language-plaintext highlighter-rouge">HTTP/1.1 200 OK</code>表示版本是<code class="language-plaintext highlighter-rouge">HTTP/1.1</code>，响应代码是<code class="language-plaintext highlighter-rouge">200</code>，响应说明是<code class="language-plaintext highlighter-rouge">OK</code>。客户端只依赖响应代码判断HTTP响应是否成功。HTTP有固定的响应代码：</p>

<ul>
  <li>1xx：表示一个提示性响应，例如101表示将切换协议，常见于<code class="language-plaintext highlighter-rouge">WebSocket</code>连接；</li>
  <li>2xx：表示一个成功的响应，例如200表示成功，206表示只发送了部分内容；</li>
  <li>3xx：表示一个重定向的响应，例如301表示永久重定向，303表示客户端应该按指定路径重新发送请求；</li>
  <li>4xx：表示一个因为客户端问题导致的错误响应，例如400表示因为Content-Type等各种原因导致的无效请求，404表示指定的路径不存在；</li>
  <li>5xx：表示一个因为服务器问题导致的错误响应，例如500表示服务器内部故障，503表示服务器暂时无法响应。</li>
</ul>

<p>当浏览器收到第一个HTTP响应后，它解析HTML后，又会发送一系列HTTP请求，例如，<code class="language-plaintext highlighter-rouge">GET /logo.jpg HTTP/1.1</code>请求一个图片，服务器响应图片请求后，会直接把二进制内容的图片发送给浏览器：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Content-Type: image/jpeg
Content-Length: 18391

????JFIFHH??XExifMM?i&amp;??X?...(二进制的JPEG图片)
</code></pre></div></div>

<p>因此，服务器总是被动地接收客户端的一个HTTP请求，然后响应它。客户端则根据需要发送若干个HTTP请求。</p>

<p>对于最早期的HTTP/1.0协议，每次发送一个HTTP请求，客户端都需要先创建一个新的TCP连接，然后，收到服务器响应后，关闭这个TCP连接。由于建立TCP连接就比较耗时，因此，为了提高效率，HTTP/1.1协议允许在一个TCP连接中反复发送-响应，这样就能大大提高效率。</p>

<p>因为HTTP协议是一个请求-响应协议，客户端在发送了一个HTTP请求后，必须等待服务器响应后，才能发送下一个请求，这样一来，如果某个响应太慢，它就会堵住后面的请求。</p>

<p>所以，为了进一步提速，HTTP/2.0允许客户端在没有收到响应的时候，发送多个HTTP请求，服务器返回响应的时候，不一定按顺序返回，只要双方能识别出哪个响应对应哪个请求，就可以做到并行发送和接收。因此HTTP/2.0进一步提高了效率。</p>

<hr />

<p>URL（统一资源定位符）用于标识互联网上的资源位置，是 Web 中最常用的概念之一。它指定了资源的位置和访问方式。通常包含以下几个部分：</p>

<ol>
  <li><strong>协议（Protocol）</strong>：指定了访问资源所使用的协议，如 HTTP、HTTPS、FTP 等。</li>
  <li><strong>主机名（Host）</strong>：指定了资源所在的主机或服务器的域名或 IP 地址。</li>
  <li><strong>端口（Port）</strong>：指定了访问服务器的端口号。如果未指定，默认为协议的默认端口。</li>
  <li><strong>路径（Path）</strong>：指定了服务器上资源的路径。</li>
  <li><strong>查询字符串（Query String）</strong>：包含了向服务器传递的参数信息。</li>
  <li><strong>片段标识符（Fragment Identifier）</strong>：指定了资源中的特定部分。</li>
</ol>

<p>例如，对于 URL <code class="language-plaintext highlighter-rouge">https://www.example.com:8080/index.html?query=example#section1</code>，协议为 HTTPS，主机名为 <code class="language-plaintext highlighter-rouge">www.example.com</code>，端口号为 <code class="language-plaintext highlighter-rouge">8080</code>，路径为 <code class="language-plaintext highlighter-rouge">/index.html</code>，查询字符串为 <code class="language-plaintext highlighter-rouge">query=example</code>，片段标识符为 <code class="language-plaintext highlighter-rouge">section1</code>。</p>

<p>URL 在 Web 开发中广泛用于定位和访问 Web 页面、图像、视频等各种资源。</p>

<p><strong>URL类构造方法</strong></p>

<p><code class="language-plaintext highlighter-rouge">public URL(String spec);</code>：通过指定的字符串创建一个 URL 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">URL</span> <span class="n">u1</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="s">"http://home.netscape.com/home/"</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">public URL(URL context, String spec);</code>：通过基于上下文 URL 和相对 URL 字符串创建一个 URL 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">URL</span> <span class="n">u1</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="s">"http://home.netscape.com/home/"</span><span class="o">);</span>
<span class="no">URL</span> <span class="n">u2</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="n">u1</span><span class="o">,</span> <span class="s">"welcome.html"</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">public URL(String protocol, String host, String file);</code>：通过指定协议、主机和文件路径创建一个 URL 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">URL</span> <span class="n">u3</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="s">"http"</span><span class="o">,</span> <span class="s">"www.sun.com"</span><span class="o">,</span> <span class="s">"developers/index.html"</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">public URL(String protocol, String host, int port, String file);</code>：通过指定协议、主机、端口和文件路径创建一个 URL 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">URL</span> <span class="n">u4</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="s">"http"</span><span class="o">,</span> <span class="s">"www.sun.com"</span><span class="o">,</span> <span class="mi">80</span><span class="o">,</span> <span class="s">"developers/index.html"</span><span class="o">);</span>
</code></pre></div></div>

<p>常用方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">String getProtocol()</code>: 获取 URL 的协议部分，例如 <code class="language-plaintext highlighter-rouge">http</code>、<code class="language-plaintext highlighter-rouge">https</code> 等。</li>
  <li><code class="language-plaintext highlighter-rouge">String getHost()</code>: 获取 URL 的主机名部分。</li>
  <li><code class="language-plaintext highlighter-rouge">int getPort()</code>: 获取 URL 的端口号部分。</li>
  <li><code class="language-plaintext highlighter-rouge">String getPath()</code>: 获取 URL 的路径部分。</li>
  <li><code class="language-plaintext highlighter-rouge">String getQuery()</code>: 获取 URL 的查询部分。</li>
  <li><code class="language-plaintext highlighter-rouge">String getFile()</code>: 获取 URL 的文件名部分。</li>
  <li><code class="language-plaintext highlighter-rouge">URLConnection openConnection()</code>: 打开与此 URL 的连接，并返回一个 <code class="language-plaintext highlighter-rouge">URLConnection</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">InputStream openStream()</code>: 打开与此 URL 的连接，并返回一个 <code class="language-plaintext highlighter-rouge">InputStream</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean equals(Object obj)</code>: 比较此 URL 与指定对象是否相等。</li>
  <li><code class="language-plaintext highlighter-rouge">String toString()</code>: 返回 URL 的字符串表示形式。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">URLConnection</code>抽象类</strong></p>

<p><code class="language-plaintext highlighter-rouge">Uonnection</code>类支持<code class="language-plaintext highlighter-rouge">URL</code>连接的输入/输出流方式的通信,并可以获得<code class="language-plaintext highlighter-rouge">URL</code>对象资源的相关信息。它是所有应用程序和<code class="language-plaintext highlighter-rouge">URL</code>连接通信类的父类。可以用它来输出、输入对象所表示的Intenet上的资源。</p>

<p>常用的方法：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">void connect()</code>: 打开与 URL 引用的资源的通信链接。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">Object getContent()</code>: 获取此 URLConnection 的内容。</li>
  <li><code class="language-plaintext highlighter-rouge">String getHeaderField(int n)</code>: 返回与此 URLConnection 的给定字段相关联的值。</li>
  <li><code class="language-plaintext highlighter-rouge">long getLastModified()</code>: 获取指定资源的最后修改日期。</li>
  <li><code class="language-plaintext highlighter-rouge">int getContentLength()</code>: 获取指定资源的内容长度。</li>
  <li><code class="language-plaintext highlighter-rouge">String getContentType()</code>: 获取指定资源的内容类型。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">InputStream getInputStream()</code>: 返回一个输入流，用于从连接到 URL 的资源读取数据。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">OutputStream getOutputStream()</code>: 返回一个输出流，用于将数据写入到与 URLConnection 关联的资源。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">void setDoOutput(boolean dooutput)</code>: 将 doOutput 字段的值设置为指定值。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void setDoInput(boolean doinput)</code>: 将 doInput 字段的值设置为指定值。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">void setRequestMethod(String method)</code>: 设置请求方法。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">void setRequestProperty(String key, String value)</code>: 设置指定的请求头字段的值。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void addRequestProperty(String key, String value)</code>: 添加一个请求属性。</li>
  <li><code class="language-plaintext highlighter-rouge">Map&lt;String, List&lt;String&gt;&gt; getHeaderFields()</code>: 返回与此 URLConnection 关联的请求头字段的映射。</li>
  <li><code class="language-plaintext highlighter-rouge">String getContentEncoding()</code>: 返回指定资源的内容编码。</li>
  <li><code class="language-plaintext highlighter-rouge">int getConnectTimeout()</code>: 返回与此 URLConnection 建立的连接的超时时间（以毫秒为单位）。</li>
  <li><code class="language-plaintext highlighter-rouge">int getReadTimeout()</code>: 返回从连接到 URLConnection 的资源的输入流读取数据的超时时间（以毫秒为单位）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">void setConnectTimeout(int timeout)</code>: 设置与此 URLConnection 建立的连接的超时时间（以毫秒为单位）。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">void setReadTimeout(int timeout)</code>: 设置从连接到 URLConnection 的资源的输入流读取数据的超时时间（以毫秒为单位）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">void setUseCaches(boolean usecaches)</code>: 如果连接上的 <code class="language-plaintext highlighter-rouge">UseCaches</code> 标志为 true，则允许该连接使用它可以使用的任何缓存。如果为 false，则忽略缓存。默认为true。</strong></li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">HttpURLConnection</code> 是 <code class="language-plaintext highlighter-rouge">URLConnection</code> 的子类，提供了一些额外的方法，用于处理 HTTP 请求和响应。以下是 <code class="language-plaintext highlighter-rouge">HttpURLConnection</code> 比 <code class="language-plaintext highlighter-rouge">URLConnection</code> 多出的一些方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getHeaderFieldKey(int n)</code>：返回指定索引处的响应头字段名称。</li>
  <li><code class="language-plaintext highlighter-rouge">getHeaderField(int n)</code>：返回指定索引处的响应头字段的值。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getHeaderFields()</code>：返回一个包含所有响应头字段的映射。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">getRequestMethod()</code>：返回此连接的请求方法。</li>
  <li><code class="language-plaintext highlighter-rouge">setRequestMethod(String method)</code>：设置请求方法（如 GET、POST 等）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">getResponseCode()</code>：获取 HTTP 响应代码。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">getResponseMessage()</code>：获取 HTTP 响应消息。</li>
  <li><code class="language-plaintext highlighter-rouge">usingProxy()</code>：返回一个布尔值，指示是否通过代理进行连接。</li>
  <li><code class="language-plaintext highlighter-rouge">disconnect()</code>：关闭连接并释放与该连接关联的所有系统资源。</li>
</ul>

<p>这些方法使得 <code class="language-plaintext highlighter-rouge">HttpURLConnection</code> 更适合处理 HTTP 请求和响应，而 <code class="language-plaintext highlighter-rouge">URLConnection</code> 则是更通用的类，可以处理不仅限于 HTTP 的多种协议。</p>

<hr />

<p>因为浏览器也是一种HTTP客户端，所以，客户端的HTTP编程，它的行为本质上和浏览器是一样的，即发送一个HTTP请求，接收服务器响应后，获得响应内容。只不过浏览器进一步把响应内容解析后渲染并展示给了用户，而使用Java进行HTTP客户端编程仅限于获得响应内容。</p>

<p>示例：将<code class="language-plaintext highlighter-rouge">baidu</code>内容重定向到<code class="language-plaintext highlighter-rouge">Demo.txt</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"Demo.txt"</span><span class="o">,</span> <span class="kc">true</span><span class="o">)));</span>
<span class="no">URL</span> <span class="n">url2</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="s">"https://www.baidu.com"</span><span class="o">);</span>
<span class="nc">URLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">url2</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
<span class="n">conn</span><span class="o">.</span><span class="na">setDoOutput</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">conn</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
<span class="nc">String</span> <span class="n">nextLine</span><span class="o">;</span>
<span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
<span class="k">while</span> <span class="o">((</span><span class="n">nextLine</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">nextLine</span><span class="o">);</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<p>详细点的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="s">"https://www.baidu.com"</span><span class="o">);</span>
<span class="nc">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
<span class="n">conn</span><span class="o">.</span><span class="na">setRequestMethod</span><span class="o">(</span><span class="s">"GET"</span><span class="o">);</span>
<span class="n">conn</span><span class="o">.</span><span class="na">setUseCaches</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
<span class="n">conn</span><span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span> <span class="c1">// 请求超时5秒</span>
<span class="c1">// 设置HTTP头:</span>
<span class="n">conn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"Accept"</span><span class="o">,</span> <span class="s">"*/*"</span><span class="o">);</span>
<span class="n">conn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"User-Agent"</span><span class="o">,</span> <span class="s">"Mozilla/5.0 (compatible; MSIE 11; Windows NT 5.1)"</span><span class="o">);</span>
<span class="c1">// 连接并发送HTTP请求:</span>
<span class="n">conn</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
<span class="c1">// 判断HTTP响应是否200:</span>
<span class="k">if</span> <span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"bad response"</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">// 获取所有响应Header:</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">getHeaderFields</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
<span class="c1">// 获取响应内容:</span>
<span class="nc">String</span> <span class="n">nextLine</span><span class="o">;</span>
<span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
<span class="k">while</span> <span class="o">((</span><span class="n">nextLine</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">nextLine</span><span class="o">);</span>
<span class="o">}</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
<span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<hr />

<p>从<strong>Java 11</strong>开始，引入了新的<code class="language-plaintext highlighter-rouge">HttpClient</code>，它使用链式调用的API，能大大简化HTTP的处理。首先需要创建一个全局<code class="language-plaintext highlighter-rouge">HttpClient</code>实例，因为<code class="language-plaintext highlighter-rouge">HttpClient</code>内部使用线程池优化多个HTTP连接，可以复用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="nc">HttpClient</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="nc">HttpClient</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
<span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">testNegative</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">URISyntaxException</span><span class="o">,</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
    <span class="nc">HttpRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="nc">HttpRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="k">new</span> <span class="no">URI</span><span class="o">(</span><span class="s">"https://www.baidu.com"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"User-Agent"</span><span class="o">,</span><span class="s">"Mozilla/5.0 (compatible; MSIE 11; Windows NT 5.1)"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Accept"</span><span class="o">,</span><span class="s">"*/*"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">timeout</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span>
            <span class="o">.</span><span class="na">version</span><span class="o">(</span><span class="nc">HttpClient</span><span class="o">.</span><span class="na">Version</span><span class="o">.</span><span class="na">HTTP_2</span><span class="o">)</span>
            <span class="o">.</span><span class="na">GET</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="nc">HttpResponse</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="nc">HttpResponse</span><span class="o">.</span><span class="na">BodyHandlers</span><span class="o">.</span><span class="na">ofString</span><span class="o">());</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">statusCode</span><span class="o">()!=</span><span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"bad response"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// 获取所有响应Header:</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">map</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果要获取图片这样的二进制内容，只需要把<code class="language-plaintext highlighter-rouge">HttpResponse.BodyHandlers.ofString()</code>换成<code class="language-plaintext highlighter-rouge">HttpResponse.BodyHandlers.ofByteArray()</code>，就可以获得一个<code class="language-plaintext highlighter-rouge">HttpResponse&lt;byte[]&gt;</code>对象。如果响应的内容很大，不希望一次性全部加载到内存，可以使用<code class="language-plaintext highlighter-rouge">HttpResponse.BodyHandlers.ofInputStream()</code>获取一个<code class="language-plaintext highlighter-rouge">InputStream</code>流。</p>

<p>如果要使用<code class="language-plaintext highlighter-rouge">POST</code>请求，需要准备好发送的Body数据并正确设置<code class="language-plaintext highlighter-rouge">Content-Type</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"http://www.example.com/login"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">body</span> <span class="o">=</span> <span class="s">"username=bob&amp;password=123456"</span><span class="o">;</span>
<span class="nc">HttpRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="nc">HttpRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">(</span><span class="k">new</span> <span class="no">URI</span><span class="o">(</span><span class="n">url</span><span class="o">))</span>
    <span class="c1">// 设置Header:</span>
    <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Accept"</span><span class="o">,</span> <span class="s">"*/*"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/x-www-form-urlencoded"</span><span class="o">)</span>
    <span class="c1">// 设置超时:</span>
    <span class="o">.</span><span class="na">timeout</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span>
    <span class="c1">// 设置版本:</span>
    <span class="o">.</span><span class="na">version</span><span class="o">(</span><span class="nc">Version</span><span class="o">.</span><span class="na">HTTP_2</span><span class="o">)</span>
    <span class="c1">// 使用POST并设置Body:</span>
    <span class="o">.</span><span class="na">POST</span><span class="o">(</span><span class="nc">BodyPublishers</span><span class="o">.</span><span class="na">ofString</span><span class="o">(</span><span class="n">body</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)).</span><span class="na">build</span><span class="o">();</span>
<span class="nc">HttpResponse</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="nc">HttpResponse</span><span class="o">.</span><span class="na">BodyHandlers</span><span class="o">.</span><span class="na">ofString</span><span class="o">());</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">();</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">HttpRequest</code> 类是 Java 11 中引入的，用于表示 HTTP 请求的类。以下是一些常用的 <code class="language-plaintext highlighter-rouge">HttpRequest</code> 方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">builder(URI uri)</code>: 静态方法，返回一个新的 <code class="language-plaintext highlighter-rouge">HttpRequest.Builder</code> 对象，用于构建 HTTP 请求。</li>
  <li><code class="language-plaintext highlighter-rouge">method()</code>: 返回 HTTP 请求方法，如 GET、POST、PUT 等。</li>
  <li><code class="language-plaintext highlighter-rouge">uri()</code>: 返回请求的 URI。</li>
  <li><code class="language-plaintext highlighter-rouge">headers()</code>: 返回请求头信息，以 <code class="language-plaintext highlighter-rouge">Map&lt;String, List&lt;String&gt;&gt;</code> 的形式表示。</li>
  <li><code class="language-plaintext highlighter-rouge">bodyPublisher()</code>: 返回请求体的发布器（<code class="language-plaintext highlighter-rouge">BodyPublisher</code>），用于发送请求体数据。</li>
  <li><code class="language-plaintext highlighter-rouge">version()</code>: 返回 HTTP 协议版本。</li>
  <li><code class="language-plaintext highlighter-rouge">expectContinue()</code>: 返回一个布尔值，指示是否期望服务器在发送响应之前先发送一个 100 Continue 响应。</li>
  <li><code class="language-plaintext highlighter-rouge">timeout()</code>: 返回超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">copy()</code>: 复制当前请求的副本。</li>
  <li><code class="language-plaintext highlighter-rouge">toString()</code>: 将请求对象转换为字符串表示。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">HttpRequest</code> 类中的静态方法通常用于创建 <code class="language-plaintext highlighter-rouge">HttpRequest</code> 实例或处理 <code class="language-plaintext highlighter-rouge">HttpRequest</code> 请求。以下是一些常用的静态方法：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">static HttpRequest.Builder newBuilder()</code>：创建一个新的 <code class="language-plaintext highlighter-rouge">HttpRequest.Builder</code> 实例，用于构建 <code class="language-plaintext highlighter-rouge">HttpRequest</code> 对象。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">static HttpRequest.Builder newBuilder(URI uri)</code>：创建一个新的 <code class="language-plaintext highlighter-rouge">HttpRequest.Builder</code> 实例，并传入URI用于构建 <code class="language-plaintext highlighter-rouge">HttpRequest</code> 对象。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">static HttpRequest.BodyPublishers ofByteArray(byte[] body)</code>：创建一个发布指定字节数组作为请求主体的 <code class="language-plaintext highlighter-rouge">HttpRequest.BodyPublisher</code> 实例。</li>
  <li><code class="language-plaintext highlighter-rouge">static HttpRequest.BodyPublishers ofInputStream(Supplier&lt;InputStream&gt; bodySupplier)</code>：创建一个发布从提供的 <code class="language-plaintext highlighter-rouge">InputStream</code> 读取数据作为请求主体的 <code class="language-plaintext highlighter-rouge">HttpRequest.BodyPublisher</code> 实例。</li>
  <li><code class="language-plaintext highlighter-rouge">static HttpRequest.BodyPublishers ofString(String body)</code>：创建一个发布指定字符串作为请求主体的 <code class="language-plaintext highlighter-rouge">HttpRequest.BodyPublisher</code> 实例。</li>
  <li><code class="language-plaintext highlighter-rouge">static HttpRequest.BodyPublishers ofFile(Path file)</code>：创建一个发布指定文件内容作为请求主体的 <code class="language-plaintext highlighter-rouge">HttpRequest.BodyPublisher</code> 实例。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">HttpRequest.Builder</code> 类用于构建 <code class="language-plaintext highlighter-rouge">HttpRequest</code> 对象。以下是该类的方法：</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">GET()</code>：设置请求方法为 GET。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">POST(BodyPublisher bodyPublisher)</code>：设置请求方法为 POST，并指定请求体的发布器。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">PUT(BodyPublisher bodyPublisher)</code>：设置请求方法为 PUT，并指定请求体的发布器。</li>
  <li><code class="language-plaintext highlighter-rouge">DELETE()</code>：设置请求方法为 DELETE。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">header(String name, String value)</code>：添加请求头。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">headers(Map&lt;String, List&lt;String&gt;&gt; headers)</code>：添加多个请求头。</li>
  <li><code class="language-plaintext highlighter-rouge">method(String method)</code>：设置请求方法。</li>
  <li><code class="language-plaintext highlighter-rouge">uri(URI uri)</code>：设置请求的 URI。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">version(HttpClient.Version version)</code>：设置 HTTP 协议版本。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">timeout(Duration duration)</code>：设置超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">expectContinue(boolean enable)</code>：设置是否期望服务器在发送响应之前先发送一个 100 Continue 响应。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">build()</code>：构建并返回 <code class="language-plaintext highlighter-rouge">HttpRequest</code> 对象。</strong></li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">URI</code> 类的构造方法如下：</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">URI(String uri)</code>：根据给定的 URI 字符串创建 <code class="language-plaintext highlighter-rouge">URI</code> 对象。该字符串必须符合 URI 的语法规则。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">URI(String scheme, String ssp, String fragment)</code></strong>：使用指定的方案、特定部分和片段创建 <code class="language-plaintext highlighter-rouge">URI</code> 对象。方案和特定部分之间用冒号分隔。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">URI(String scheme, String userInfo, String host, int port, String path, String query, String fragment)</code></strong>：使用指定的参数创建 <code class="language-plaintext highlighter-rouge">URI</code> 对象。参数包括方案、用户信息、主机、端口、路径、查询和片段。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">Duration</code> 类表示一段时间的持续时间，它提供了用于处理持续时间的方法。以下是 <code class="language-plaintext highlighter-rouge">Duration</code> 类的一些主要方法：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">static Duration between(Temporal startInclusive, Temporal endExclusive)</code>：返回两个时间点之间的持续时间。</li>
  <li><code class="language-plaintext highlighter-rouge">static Duration ofDays(long days)</code>：创建指定天数的持续时间。</li>
  <li><code class="language-plaintext highlighter-rouge">static Duration ofHours(long hours)</code>：创建指定小时数的持续时间。</li>
  <li><code class="language-plaintext highlighter-rouge">static Duration ofMinutes(long minutes)</code>：创建指定分钟数的持续时间。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">static Duration ofSeconds(long seconds)</code>：创建指定秒数的持续时间。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">static Duration ofMillis(long millis)</code>：创建指定毫秒数的持续时间。</li>
  <li><code class="language-plaintext highlighter-rouge">static Duration ofNanos(long nanos)</code>：创建指定纳秒数的持续时间。</li>
  <li><code class="language-plaintext highlighter-rouge">long toDays()</code>：获取持续时间的天数部分。</li>
  <li><code class="language-plaintext highlighter-rouge">long toHours()</code>：获取持续时间的小时数部分。</li>
  <li><code class="language-plaintext highlighter-rouge">long toMinutes()</code>：获取持续时间的分钟数部分。</li>
  <li><code class="language-plaintext highlighter-rouge">long toSeconds()</code>：获取持续时间的秒数部分。</li>
  <li><code class="language-plaintext highlighter-rouge">long toMillis()</code>：获取持续时间的毫秒数部分。</li>
  <li><code class="language-plaintext highlighter-rouge">long toNanos()</code>：获取持续时间的纳秒数部分。</li>
  <li><code class="language-plaintext highlighter-rouge">Duration plus(Duration duration)</code>：将另一个持续时间添加到此持续时间。</li>
  <li><code class="language-plaintext highlighter-rouge">Duration minus(Duration duration)</code>：从此持续时间中减去另一个持续时间。</li>
  <li><code class="language-plaintext highlighter-rouge">Duration multipliedBy(long multiplicand)</code>：将此持续时间乘以指定的数量。</li>
  <li><code class="language-plaintext highlighter-rouge">Duration dividedBy(long divisor)</code>：将此持续时间除以指定的数量。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isNegative()</code>：检查持续时间是否为负数。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isZero()</code>：检查持续时间是否为零。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">HttpClient.Version</code> 是一个枚举类，表示 HTTP 客户端支持的协议版本。它包含以下字段：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">HTTP_1_1</code>：表示 HTTP/1.1 协议版本。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">HTTP_2</code>：表示 HTTP/2 协议版本。</strong></li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">BodyPublishers</code> 类提供了以下静态方法来创建不同类型的 <code class="language-plaintext highlighter-rouge">BodyPublisher</code> 实例：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ofByteArray(byte[] body)</code>：将指定的字节数组作为请求主体发送。</li>
  <li><code class="language-plaintext highlighter-rouge">ofByteArrays(Iterable&lt;byte[]&gt; bodies)</code>：按顺序将多个字节数组作为请求主体发送。</li>
  <li><code class="language-plaintext highlighter-rouge">ofFile(Path file)</code>：将指定文件的内容作为请求主体发送。</li>
  <li><code class="language-plaintext highlighter-rouge">ofInputStream(Supplier&lt;? extends InputStream&gt; streamSupplier)</code>：从提供的 <code class="language-plaintext highlighter-rouge">InputStream</code> 中发送请求主体。</li>
  <li><code class="language-plaintext highlighter-rouge">ofString(String body)</code>：将指定的字符串作为请求主体发送。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">ofString(String body, Charset charset)</code>：将指定的字符串以指定的字符集编码作为请求主体发送。</strong></li>
</ul>

<p>这些方法提供了灵活的方式来创建不同类型的请求主体，并使其适应于不同的请求场景。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">HttpClient</code> 类提供了执行 HTTP 请求和处理 HTTP 响应的方法。以下是一些常用的方法：</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">send(HttpRequest request, BodyHandler&lt;T&gt; responseBodyHandler)</code>：发送 HTTP 请求并返回响</strong>应。<code class="language-plaintext highlighter-rouge">request</code> 参数是要发送的请求，<code class="language-plaintext highlighter-rouge">responseBodyHandler</code> 参数指定如何处理响应主体。</li>
  <li><code class="language-plaintext highlighter-rouge">sendAsync(HttpRequest request, BodyHandler&lt;T&gt; responseBodyHandler)</code>：异步发送 HTTP 请求并返回 <code class="language-plaintext highlighter-rouge">CompletableFuture&lt;HttpResponse&lt;T&gt;&gt;</code>，可以在未来的某个时间点获取响应。</li>
  <li><code class="language-plaintext highlighter-rouge">newBuilder()</code>：创建一个新的 <code class="language-plaintext highlighter-rouge">HttpClient.Builder</code> 实例，用于构建 <code class="language-plaintext highlighter-rouge">HttpClient</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">followRedirects()</code>：启用重定向（默认情况下启用）。</li>
  <li><code class="language-plaintext highlighter-rouge">version()</code>：获取当前 <code class="language-plaintext highlighter-rouge">HttpClient</code> 实例使用的协议版本。</li>
  <li><code class="language-plaintext highlighter-rouge">sslContext()</code>：获取当前 <code class="language-plaintext highlighter-rouge">HttpClient</code> 实例使用的 SSL 上下文。</li>
  <li><code class="language-plaintext highlighter-rouge">proxy()</code>：获取当前 <code class="language-plaintext highlighter-rouge">HttpClient</code> 实例使用的代理。</li>
  <li><code class="language-plaintext highlighter-rouge">authenticator()</code>：获取当前 <code class="language-plaintext highlighter-rouge">HttpClient</code> 实例使用的身份验证器。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">HttpResponse</code> 类表示 HTTP 响应，并提供了访问响应状态、头信息和主体的方法。以下是一些常用的方法：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">statusCode()</code>：返回响应的状态码。</li>
  <li><code class="language-plaintext highlighter-rouge">body()</code>：返回响应的主体作为 <code class="language-plaintext highlighter-rouge">HttpResponse.BodySubscriber</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">headers()</code>：返回包含响应头信息的 <code class="language-plaintext highlighter-rouge">Map</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">bodyHandler()</code>：返回用于处理响应主体的 <code class="language-plaintext highlighter-rouge">BodyHandler</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">version()</code>：返回 HTTP 版本。</li>
  <li><code class="language-plaintext highlighter-rouge">uri()</code>：返回请求的 URI。</li>
  <li><code class="language-plaintext highlighter-rouge">request()</code>：返回生成此响应的请求。</li>
  <li><code class="language-plaintext highlighter-rouge">previousResponse()</code>：如果重定向发生，则返回之前的响应。</li>
  <li><code class="language-plaintext highlighter-rouge">sslSession()</code>：返回 SSL 会话。</li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">HttpResponse.BodyHandlers</code> 类是一个工具类，提供了一些静态方法用于创建不同类型的 <code class="language-plaintext highlighter-rouge">BodyHandler</code> 实例，以便处理 HTTP 响应主体。以下是一些常用的静态方法：</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">ofString()</code>：返回一个 <code class="language-plaintext highlighter-rouge">BodyHandler</code>，用于将响应主体作为字符串处理。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">ofByteArray()</code>：返回一个 <code class="language-plaintext highlighter-rouge">BodyHandler</code>，用于将响应主体作为字节数组处理。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">ofInputStream()</code>：返回一个 <code class="language-plaintext highlighter-rouge">BodyHandler</code>，用于将响应主体作为输入流处理。</li>
  <li><code class="language-plaintext highlighter-rouge">ofFile(Path file)</code>：返回一个 <code class="language-plaintext highlighter-rouge">BodyHandler</code>，用于将响应主体保存到指定文件。</li>
</ul>

<h2 id="rmi远程调用">RMI远程调用</h2>

<p>Java的RMI远程调用是指，一个JVM中的代码可以通过网络实现远程调用另一个JVM的某个方法。RMI是Remote Method Invocation的缩写。</p>

<p>提供服务的一方称之为服务器，而实现远程调用的一方称之为客户端。</p>

<p>服务器会提供一个<code class="language-plaintext highlighter-rouge">WorldClock</code>服务，允许客户端获取指定时区的时间，即允许客户端调用下面的方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LocalDateTime</span> <span class="nf">getLocalDateTime</span><span class="o">(</span><span class="nc">String</span> <span class="n">zoneId</span><span class="o">);</span>
</code></pre></div></div>

<p>要实现RMI，服务器和客户端必须共享同一个接口。定义一个<code class="language-plaintext highlighter-rouge">WorldClock</code>接口，代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">WorldClock</span> <span class="kd">extends</span> <span class="nc">Remote</span> <span class="o">{</span>
    <span class="nc">LocalDateTime</span> <span class="nf">getLocalDateTime</span><span class="o">(</span><span class="nc">String</span> <span class="n">zoneId</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RemoteException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Java的RMI规定此接口<strong>必须派生自<code class="language-plaintext highlighter-rouge">java.rmi.Remote</code></strong>，并在每个方法声明抛出<code class="language-plaintext highlighter-rouge">RemoteException</code>，因为远程方法调用缺乏本地调用的可靠性，远程调用总是存在失败的可能。</p>

<p>下一步是编写服务器的实现类，因为客户端请求的调用方法<code class="language-plaintext highlighter-rouge">getLocalDateTime()</code>最终会通过这个实现类返回结果。实现类<code class="language-plaintext highlighter-rouge">WorldClockService</code>代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WorldClockService</span> <span class="kd">implements</span> <span class="nc">WorldClock</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">LocalDateTime</span> <span class="nf">getLocalDateTime</span><span class="o">(</span><span class="nc">String</span> <span class="n">zoneId</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">zoneId</span><span class="o">)).</span><span class="na">withNano</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在，服务器端的服务相关代码就编写完毕。需要通过Java RMI提供的一系列底层支持接口，把上面编写的服务以RMI的形式暴露在网络上，客户端才能调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RemoteException</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"create World clock remote service..."</span><span class="o">);</span>
        <span class="c1">// 实例化一个WorldClock:</span>
        <span class="nc">WorldClock</span> <span class="n">worldClock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WorldClockService</span><span class="o">();</span>
        <span class="c1">// 将此服务转换为远程服务接口:</span>
        <span class="nc">WorldClock</span> <span class="n">skeleton</span> <span class="o">=</span> <span class="o">(</span><span class="nc">WorldClock</span><span class="o">)</span> <span class="nc">UnicastRemoteObject</span><span class="o">.</span><span class="na">exportObject</span><span class="o">(</span><span class="n">worldClock</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span><span class="c1">// 第二个参数为0，表明任何合适的端口都可用来监听客户连接。</span>
        <span class="c1">// 将RMI服务注册到1099端口:</span>
        <span class="nc">Registry</span> <span class="n">registry</span> <span class="o">=</span> <span class="nc">LocateRegistry</span><span class="o">.</span><span class="na">createRegistry</span><span class="o">(</span><span class="mi">1099</span><span class="o">);</span>
        <span class="c1">// 注册此服务，服务名为"WorldClock":</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">rebind</span><span class="o">(</span><span class="s">"WorldClock"</span><span class="o">,</span> <span class="n">skeleton</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码主要目的是通过RMI提供的相关类，将我们自己的<code class="language-plaintext highlighter-rouge">WorldClock</code>实例注册到RMI服务上。RMI的默认端口是<code class="language-plaintext highlighter-rouge">1099</code>，最后一步注册服务时通过<code class="language-plaintext highlighter-rouge">rebind()</code>指定服务名称为<code class="language-plaintext highlighter-rouge">"WorldClock"</code>。</p>

<p>下一步就可以编写客户端代码。RMI要求服务器和客户端共享同一个接口，因此要把<code class="language-plaintext highlighter-rouge">WorldClock.java</code>这个接口文件复制到客户端，然后在客户端实现RMI调用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">RemoteException</span><span class="o">,</span> <span class="nc">NotBoundException</span> <span class="o">{</span>
        <span class="c1">// 连接到服务器localhost，端口1099:</span>
        <span class="nc">Registry</span> <span class="n">registry</span> <span class="o">=</span> <span class="nc">LocateRegistry</span><span class="o">.</span><span class="na">getRegistry</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">,</span> <span class="mi">1099</span><span class="o">);</span>
        <span class="c1">// 查找名称为"WorldClock"的服务并强制转型为WorldClock接口:</span>
        <span class="nc">WorldClock</span> <span class="n">worldClock</span> <span class="o">=</span> <span class="o">(</span><span class="nc">WorldClock</span><span class="o">)</span> <span class="n">registry</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">"WorldClock"</span><span class="o">);</span>
        <span class="c1">// 正常调用接口方法:</span>
        <span class="nc">LocalDateTime</span> <span class="n">now</span> <span class="o">=</span> <span class="n">worldClock</span><span class="o">.</span><span class="na">getLocalDateTime</span><span class="o">(</span><span class="s">"Asia/Shanghai"</span><span class="o">);</span>
        <span class="c1">// 打印调用结果:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">now</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>先运行服务器，再运行客户端。从运行结果可知，因为客户端只有接口，并没有实现类，因此，客户端获得的接口方法返回值实际上是通过网络从服务器端获取的。</p>

<p>对客户端来说，客户端持有的<code class="language-plaintext highlighter-rouge">WorldClock</code>接口实际上对应了一个“实现类”，它是由<code class="language-plaintext highlighter-rouge">Registry</code>内部动态生成的，并负责把方法调用通过网络传递到服务器端。而服务器端接收网络调用的服务并不是我们自己编写的<code class="language-plaintext highlighter-rouge">WorldClockService</code>，而是<code class="language-plaintext highlighter-rouge">Registry</code>自动生成的代码。</p>

<p>把客户端的“实现类”称为<code class="language-plaintext highlighter-rouge">stub</code>，而服务器端的网络服务类称为<code class="language-plaintext highlighter-rouge">skeleton</code>，它会真正调用服务器端的<code class="language-plaintext highlighter-rouge">WorldClockService</code>，获取结果，然后把结果通过网络传递给客户端。整个过程由RMI底层负责实现序列化和反序列化：</p>

<pre><code class="language-ascii">┌ ─ ─ ─ ─ ─ ─ ─ ─ ┐         ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
  ┌─────────────┐                                 ┌─────────────┐
│ │   Service   │ │         │                     │   Service   │ │
  └─────────────┘                                 └─────────────┘
│        ▲        │         │                            ▲        │
         │                                               │
│        │        │         │                            │        │
  ┌─────────────┐   Network   ┌───────────────┐   ┌─────────────┐
│ │ Client Stub ├─┼─────────┼&gt;│Server Skeleton│──&gt;│Service Impl │ │
  └─────────────┘             └───────────────┘   └─────────────┘
└ ─ ─ ─ ─ ─ ─ ─ ─ ┘         └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>Java的RMI严重依赖序列化和反序列化，而这种情况下可能会造成严重的安全漏洞，因为Java的序列化和反序列化不但涉及到数据，还涉及到二进制的字节码，即使使用白名单机制也很难保证100%排除恶意构造的字节码。因此，使用RMI时，双方必须是内网互相信任的机器，不要把1099端口暴露在公网上作为对外服务。</p>

<p>Java的RMI调用机制决定了双方必须是Java程序，其他语言很难调用Java的RMI。如果要使用不同语言进行RPC调用，可以选择更通用的协议，例如<a href="https://grpc.io/">gRPC</a>。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">Remote</code>接口，用于标识那些方法可以从非本地虚拟机调用的接口。任何作为远程对象的对象必须直接或间接实现这个接口。</p>

<p><code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 类是用于导出远程对象的抽象类。它提供了导出远程对象所需的基本功能。在Java RMI中，远程对象必须继承自 <code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 类或调用 <code class="language-plaintext highlighter-rouge">exportObject</code> 方法来导出对象，以便能够被远程客户端访问。</p>

<p>实现类可以实现任意数量的远程接口，并且可以扩展其他远程实现类。RMI提供了一些便利类，远程对象实现可以扩展这些类以方便远程对象的创建。这些类包括<code class="language-plaintext highlighter-rouge">java.rmi.server.UnicastRemoteObject</code>和<code class="language-plaintext highlighter-rouge">java.rmi.activation.Activatable</code>。</p>

<p><code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 类的作用包括：</p>

<ul>
  <li>导出远程对象：通过继承 <code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 类或调用 <code class="language-plaintext highlighter-rouge">exportObject</code> 方法，可以将一个普通的Java对象转换为远程对象，使其能够接收远程调用。</li>
  <li>远程对象的生命周期管理：<code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 类提供了一些方法用于管理远程对象的生命周期，如 <code class="language-plaintext highlighter-rouge">unexportObject</code> 方法用于取消导出远程对象。</li>
  <li>RMI通信的基础支持：<code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 类提供了与RMI通信相关的基础支持，如实现了 <code class="language-plaintext highlighter-rouge">Remote</code> 接口以标识远程对象，同时提供了一些内部实现用于处理远程调用。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 类包含以下重要的方法：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">UnicastRemoteObject()</code>：构造一个新的 <code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">UnicastRemoteObject(int port)</code>：在指定端口上创建一个新的 <code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">UnicastRemoteObject(int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf)</code>：在指定端口上创建一个新的 <code class="language-plaintext highlighter-rouge">UnicastRemoteObject</code> 对象，使用指定的客户端和服务器端套接字工厂。</li>
  <li><code class="language-plaintext highlighter-rouge">static RemoteStub exportObject(Remote obj)</code>：导出远程对象并返回其 stub。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">static RemoteStub exportObject(Remote obj, int port)</code>：导出远程对象并返回其 stub，在指定端口上监听。参数 <code class="language-plaintext highlighter-rouge">obj</code> 是要导出的远程对象，参数 <code class="language-plaintext highlighter-rouge">port</code> 是要监听的端口号。如果端口号为 0，则系统会自动选择一个可用的端口。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">static boolean unexportObject(Remote obj, boolean force)</code>：取消导出远程对象。</li>
  <li><code class="language-plaintext highlighter-rouge">static Object toStub(Remote obj)</code>：返回远程对象的 stub。</li>
</ol>

<p>这些方法用于导出和管理远程对象，使其能够被远程客户端访问。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">LocateRegistry</code> 类是 Java RMI 中用于定位远程注册表的工具类。它提供了一组静态方法，用于获取远程注册表的引用。<code class="language-plaintext highlighter-rouge">LocateRegistry</code> 类的方法包括：</p>

<p><code class="language-plaintext highlighter-rouge">LocateRegistry</code> 类的方法包括：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">static Registry getRegistry(String host, int port)</code>：返回指定主机和端口上的远程注册表引用。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">static Registry getRegistry(String host, int port, RMIClientSocketFactory csf)</code>：返回指定主机和端口上的远程注册表引用，并使用指定的客户端套接字工厂创建套接字连接。</li>
  <li><code class="language-plaintext highlighter-rouge">static Registry getRegistry(String host, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf)</code>：返回指定主机和端口上的远程注册表引用，并使用指定的客户端套接字工厂和服务器套接字工厂创建套接字连接。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">static Registry createRegistry(int port)</code>：在本地主机上的指定端口上创建并返回远程注册表引用。</strong></li>
</ul>

<hr />

<p><code class="language-plaintext highlighter-rouge">Registry</code> 类是 Java RMI 中的一个类，用于提供远程对象的注册和查找服务。它允许远程客户端查找和访问在远程主机上注册的远程对象。</p>

<p><code class="language-plaintext highlighter-rouge">Registry</code> 类的主要方法包括：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">void bind(String name, Remote obj)</code>：将指定的远程对象与指定的名称在此注册表中进行绑定。</li>
  <li><code class="language-plaintext highlighter-rouge">void unbind(String name)</code>：从此注册表中移除指定名称的绑定。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">Remote lookup(String name)</code>：返回指定名称绑定的远程对象的引用。</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">void rebind(String name, Remote obj)</code>：将指定的远程对象与指定的名称在此注册表中进行重新绑定。</strong></li>
  <li><code class="language-plaintext highlighter-rouge">String[] list()</code>：返回此注册表中的所有绑定名称的数组。</li>
</ul>

<p>这些方法允许远程对象在注册表中注册、查找和解绑，从而实现了远程对象之间的通信和访问。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">多线程</title><link href="/2024/04/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B/" rel="alternate" type="text/html" title="多线程" /><published>2024-04-16T00:00:00+08:00</published><updated>2024-04-16T00:00:00+08:00</updated><id>/2024/04/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B</id><content type="html" xml:base="/2024/04/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"><![CDATA[<h1 id="引言">引言</h1>
<p>多线程笔记，包括线程、中断、同步、死锁、等待、唤醒、ReentrantLock、ReadWriteLock、 StampedLock、Semaphore、线程池、 CompletableFuture异步执行、ForkJoin、ThreadLocal、虚拟线程。</p>

<h1 id="多线程">多线程</h1>
<p>操作系统（Windows，macOS，Linux）都可以执行多任务,多任务就是同时运行多个任务。</p>

<p><strong>进程</strong></p>

<p>在计算机中，我们把一个任务称为一个进程，浏览器就是一个进程，视频播放器是另一个进程，类似的，音乐播放器和Word都是进程。</p>

<p>某些进程内部还需要同时执行多个子任务。例如，在使用Word时，可以一边打字，一边进行拼写检查，同时还可以在后台进行打印，我们把子任务称为线程。</p>

<p>进程和线程的关系就是：一个进程可以包含一个或多个线程，但至少会有一个线程。</p>

<pre><code class="language-ascii">                        ┌──────────┐
                        │Process   │
                        │┌────────┐│
            ┌──────────┐││ Thread ││┌──────────┐
            │Process   ││└────────┘││Process   │
            │┌────────┐││┌────────┐││┌────────┐│
┌──────────┐││ Thread ││││ Thread ││││ Thread ││
│Process   ││└────────┘││└────────┘││└────────┘│
│┌────────┐││┌────────┐││┌────────┐││┌────────┐│
││ Thread ││││ Thread ││││ Thread ││││ Thread ││
│└────────┘││└────────┘││└────────┘││└────────┘│
└──────────┘└──────────┘└──────────┘└──────────┘
┌──────────────────────────────────────────────┐
│               Operating System               │
└──────────────────────────────────────────────┘
</code></pre>
<p>操作系统调度的最小任务单位其实不是进程，而是线程。常用的Windows、Linux等操作系统都采用抢占式多任务，<strong>如何调度线程完全由操作系统决定，程序自己不能决定什么时候执行，以及执行多长时间。</strong></p>

<p>因为同一个应用程序，既可以有多个进程，也可以有多个线程，因此，实现多任务的方法，有以下几种：</p>

<p>多进程模式（每个进程只有一个线程）：</p>

<pre><code class="language-ascii">┌──────────┐ ┌──────────┐ ┌──────────┐
│Process   │ │Process   │ │Process   │
│┌────────┐│ │┌────────┐│ │┌────────┐│
││ Thread ││ ││ Thread ││ ││ Thread ││
│└────────┘│ │└────────┘│ │└────────┘│
└──────────┘ └──────────┘ └──────────┘
</code></pre>
<p>多线程模式（一个进程有多个线程）：</p>
<pre><code class="language-ascii">┌────────────────────┐
│Process             │
│┌────────┐┌────────┐│
││ Thread ││ Thread ││
│└────────┘└────────┘│
│┌────────┐┌────────┐│
││ Thread ││ Thread ││
│└────────┘└────────┘│
└────────────────────┘
</code></pre>
<p>多进程＋多线程模式（复杂度最高）：</p>
<pre><code class="language-ascii">┌──────────┐┌──────────┐┌──────────┐
│Process   ││Process   ││Process   │
│┌────────┐││┌────────┐││┌────────┐│
││ Thread ││││ Thread ││││ Thread ││
│└────────┘││└────────┘││└────────┘│
│┌────────┐││┌────────┐││┌────────┐│
││ Thread ││││ Thread ││││ Thread ││
│└────────┘││└────────┘││└────────┘│
└──────────┘└──────────┘└──────────┘
</code></pre>
<p>进程和线程是包含关系，但是多任务既可以由多进程实现，也可以由单进程内的多线程实现，还可以混合多进程＋多线程。具体采用哪种方式，要考虑到进程和线程的特点。</p>

<p>和多线程相比，多进程的缺点在于：</p>

<ul>
  <li>创建进程比创建线程开销大，尤其是在Windows系统上；</li>
  <li>进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。</li>
</ul>

<p>而多进程的优点在于：</p>

<p>多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。</p>

<p><strong>多线程</strong></p>

<p>Java语言内置了多线程支持：一个Java程序实际上是一个JVM进程，JVM进程用一个主线程来执行<code class="language-plaintext highlighter-rouge">main()</code>方法，在<code class="language-plaintext highlighter-rouge">main()</code>方法内部，又可以启动多个线程。此外，JVM还有负责垃圾回收的其他工作线程等。</p>

<p>因此，对于大多数Java程序来说，说多任务，实际上是说如何使用多线程实现多任务。</p>

<p>和单线程相比，多线程编程的特点在于：多线程经常需要读写共享数据，并且需要同步。例如，播放电影时，就必须由一个线程播放视频，另一个线程播放音频，两个线程需要协调运行，否则画面和声音就不同步。因此，多线程编程的复杂度高，调试更困难。</p>

<p>Java多线程编程的特点又在于：</p>

<ul>
  <li>多线程模型是Java程序最基本的并发模型；</li>
  <li>后续读写网络、数据库、Web开发等都依赖Java多线程模型。</li>
</ul>

<hr />

<p><strong>线程类<code class="language-plaintext highlighter-rouge">Thread</code>常用的方法</strong>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">start()</code>：启动线程，使其处于可运行状态。</li>
  <li><code class="language-plaintext highlighter-rouge">run()</code>：线程的执行体，包含了线程要执行的代码。</li>
  <li><code class="language-plaintext highlighter-rouge">Thread.setDaemon(boolean on)</code>：设置线程为守护线程或用户线程。守护线程不会阻止程序的终止，当所有的用户线程结束时，守护线程会自动结束。</li>
  <li><code class="language-plaintext highlighter-rouge">Thread.isDaemon()</code>：判断线程是否为守护线程。</li>
  <li><code class="language-plaintext highlighter-rouge">sleep(long millis)</code>：使当前线程休眠指定的时间，以毫秒为单位。在休眠期间，线程状态不会改变，不会释放已经持有的锁。</li>
  <li><code class="language-plaintext highlighter-rouge">join()</code>：等待线程终止。调用此方法的线程将会被阻塞，直到目标线程执行完成。</li>
  <li><code class="language-plaintext highlighter-rouge">interrupt()</code>：中断线程。通知目标线程应该中断，但实际中断操作由目标线程自行处理。</li>
  <li><code class="language-plaintext highlighter-rouge">isInterrupted()</code>：判断线程是否已经被中断。</li>
  <li><code class="language-plaintext highlighter-rouge">interrupted()</code>：判断当前线程是否已经被中断，并清除中断状态。</li>
  <li><code class="language-plaintext highlighter-rouge">yield()</code>：让出当前线程的执行权，使得其他具有相同优先级的线程有机会执行。</li>
  <li><code class="language-plaintext highlighter-rouge">setName(String name)</code>：设置线程的名称。</li>
  <li><code class="language-plaintext highlighter-rouge">getName()</code>：获取线程的名称。</li>
  <li><code class="language-plaintext highlighter-rouge">isAlive()</code>：判断线程是否处于活动状态（已启动但尚未终止）。</li>
  <li><code class="language-plaintext highlighter-rouge">setPriority(int priority)</code>：设置线程的优先级。优先级范围为1（最低）到10（最高）。</li>
  <li><code class="language-plaintext highlighter-rouge">getPriority()</code>：获取线程的优先级。</li>
</ul>

<p>这些方法可以帮助我们管理和控制线程的执行，使得多线程编程更加灵活和高效。</p>

<hr />

<p>锁的方法通常与<code class="language-plaintext highlighter-rouge">synchronized</code>关键字和<code class="language-plaintext highlighter-rouge">java.util.concurrent.locks</code>包中的锁对象相关联。以下是一些常用的<strong>锁方法</strong>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">synchronized</code>关键字：用于同步方法或同步块，可以实现对代码块的互斥访问。</li>
  <li><code class="language-plaintext highlighter-rouge">wait()</code>：在锁对象上等待，直到其他线程调用该对象的<code class="language-plaintext highlighter-rouge">notify()</code>或<code class="language-plaintext highlighter-rouge">notifyAll()</code>方法唤醒该线程。</li>
  <li><code class="language-plaintext highlighter-rouge">void wait(long timeout)</code>：同<code class="language-plaintext highlighter-rouge">wait()</code>，但如果在指定时间内未收到通知，则当前线程会自动唤醒。</li>
  <li><code class="language-plaintext highlighter-rouge">void wait(long timeout, int nanos)</code>：类似于<code class="language-plaintext highlighter-rouge">wait(long timeout)</code>方法，但还可以指定纳秒级别的超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">notify()</code>：唤醒在锁对象上等待的单个线程。</li>
  <li><code class="language-plaintext highlighter-rouge">notifyAll()</code>：唤醒在锁对象上等待的所有线程。</li>
  <li><code class="language-plaintext highlighter-rouge">ReentrantLock</code>类：可重入锁，提供了更灵活的锁定机制，可以替代<code class="language-plaintext highlighter-rouge">synchronized</code>关键字。常用方法包括<code class="language-plaintext highlighter-rouge">lock()</code>、<code class="language-plaintext highlighter-rouge">unlock()</code>、<code class="language-plaintext highlighter-rouge">tryLock()</code>等。</li>
  <li><code class="language-plaintext highlighter-rouge">Condition</code>接口：配合<code class="language-plaintext highlighter-rouge">ReentrantLock</code>使用，提供了类似<code class="language-plaintext highlighter-rouge">wait()</code>和<code class="language-plaintext highlighter-rouge">notify()</code>的功能，但更加灵活。</li>
  <li><code class="language-plaintext highlighter-rouge">ReadWriteLock</code>接口：读写锁，提供了读锁和写锁，可以提高读操作的并发性能。</li>
  <li><code class="language-plaintext highlighter-rouge">StampedLock</code>类：提供了一种乐观读锁的机制，适用于读多写少的场景。</li>
</ul>

<p>这些方法和类可以帮助我们在多线程环境中实现对共享资源的安全访问和控制。</p>

<hr />

<p>以下是一些<code class="language-plaintext highlighter-rouge">Thread</code>类中的常用<strong>静态方法</strong>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Thread.currentThread()</code>：返回当前正在执行的线程对象。</li>
  <li><code class="language-plaintext highlighter-rouge">Thread.sleep(long millis)</code>：使当前线程休眠指定的毫秒数。</li>
  <li><code class="language-plaintext highlighter-rouge">Thread.yield()</code>：提示调度器当前线程愿意放弃当前对处理器的使用。</li>
  <li><code class="language-plaintext highlighter-rouge">Thread.interrupted()</code>：测试当前线程是否已经中断，并清除该线程的中断状态。</li>
  <li><code class="language-plaintext highlighter-rouge">Thread.interrupt()</code>：中断当前线程。</li>
</ul>

<p>这些静态方法在多线程编程中经常被使用，用于控制线程的行为和状态。</p>
<h2 id="创建新线程">创建新线程</h2>

<p>Java语言内置了多线程支持。当Java程序启动的时候，实际上是启动了一个JVM进程，然后，JVM启动主线程来执行<code class="language-plaintext highlighter-rouge">main()</code>方法。在<code class="language-plaintext highlighter-rouge">main()</code>方法中，又可以启动其他线程。</p>

<p>要创建一个新线程非常容易，实例化一个<code class="language-plaintext highlighter-rouge">Thread</code>实例，然后调用它的<code class="language-plaintext highlighter-rouge">start()</code>方法。</p>

<p>但是这个线程启动后实际上什么也不做就立刻结束了。如果希望新线程能执行指定的代码，有以下几种方法：</p>

<p>方法一：从<code class="language-plaintext highlighter-rouge">Thread</code>派生一个自定义类，然后覆写<code class="language-plaintext highlighter-rouge">run()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(){</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"匿名子类"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>
<span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">start()</code>方法会在内部自动调用实例的<code class="language-plaintext highlighter-rouge">run()</code>方法。</p>

<p>方法二：创建<code class="language-plaintext highlighter-rouge">Thread</code>实例时，传入一个<code class="language-plaintext highlighter-rouge">Runnable</code>实例，这种内部类会取不到当前<code class="language-plaintext highlighter-rouge">Thread</code>匿名子类对象，可以通过<code class="language-plaintext highlighter-rouge">Thread.currentThread()</code>得到当前线程对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Runnable接口匿名类"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程</span>
</code></pre></div></div>
<p>若外部<code class="language-plaintext highlighter-rouge">Thread</code>不是匿名的，则也可以在匿名内部类内通过<code class="language-plaintext highlighter-rouge">外部类名.this</code>来引用外部类的实例。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程</span>
</code></pre></div></div>
<p>注意不能使用<code class="language-plaintext highlighter-rouge">t</code>，因为<code class="language-plaintext highlighter-rouge">t</code>现在还没有初始化（其实内部类代码运行的时候已经实例化了），但对编译器来说无法确定在这个时候<code class="language-plaintext highlighter-rouge">t</code>是否已经被正确初始化。因此，即使在实际运行时<code class="language-plaintext highlighter-rouge">t</code>已经被实例化了，编译器也会在编译时会认为<code class="language-plaintext highlighter-rouge">t</code>是一个未被初始化的变量，从而导致编译错误。</p>

<p>可以使用lambda简化：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Runnable接口匿名类"</span><span class="o">));</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程</span>
</code></pre></div></div>
<p>创建线程后的代码执行顺序：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"main方法开始"</span><span class="o">);</span>
<span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"线程开始"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"线程结束"</span><span class="o">);</span>
<span class="o">});</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"main方法结束"</span><span class="o">);</span>
</code></pre></div></div>
<p>只能肯定<code class="language-plaintext highlighter-rouge">main</code>线程先打印<code class="language-plaintext highlighter-rouge">main方法开始</code>，然后创建并启动了新线程，然后再打印。而新线程会在启动后与<code class="language-plaintext highlighter-rouge">main</code>线程并发运行，因此对于新线程启用后的打印语句顺序是<strong>不可预知</strong>的，调度由操作系统控制，<strong>程序本身无法确定线程的调度顺序</strong>。</p>

<p>要特别注意：直接调用<code class="language-plaintext highlighter-rouge">Thread</code>实例的<code class="language-plaintext highlighter-rouge">run()</code>方法是<strong>无效</strong>的。直接调用<code class="language-plaintext highlighter-rouge">run()</code>方法，相当于调用了一个<strong>普通</strong>的Java方法，当前线程并没有任何改变，也不会启动新线程。</p>

<p><strong>必须</strong>调用<code class="language-plaintext highlighter-rouge">Thread</code>实例的<code class="language-plaintext highlighter-rouge">start()</code>方法才能<strong>启动新线程</strong>，如果查看<code class="language-plaintext highlighter-rouge">Thread</code>类的源代码，会看到<code class="language-plaintext highlighter-rouge">start()</code>方法内部调用了一个<code class="language-plaintext highlighter-rouge">private native void start0()</code>方法，<code class="language-plaintext highlighter-rouge">native</code>修饰符表示这个方法是由JVM虚拟机内部的C代码实现的，不是由Java代码实现的。</p>

<p>可以通过<code class="language-plaintext highlighter-rouge">setPriority(int n)</code>对线程设定优先级，n的值范围是1~10, 默认值为5。</p>

<p>JVM自动把1（低）~10（高）的优先级映射到操作系统实际优先级上（不同操作系统有不同的优先级数量）。优先级高的线程被操作系统调度的优先级较高，操作系统对高优先级线程可能调度更频繁，但<strong>决不能</strong>通过设置优先级来<strong>确保</strong>高优先级的线程<strong>一定会先执行</strong>。</p>

<h2 id="线程的状态">线程的状态</h2>
<p>在Java程序中，<strong>一个线程对象只能调用一次<code class="language-plaintext highlighter-rouge">start()</code>方法启动新线程</strong>，并在新线程中执行<code class="language-plaintext highlighter-rouge">run()</code>方法。一旦<code class="language-plaintext highlighter-rouge">run()</code>方法执行完毕，线程就结束了。因此，Java线程的状态有以下几种：</p>
<ul>
  <li>New：新创建的线程，尚未执行；</li>
  <li>Runnable：运行中的线程，正在<strong>执行</strong><code class="language-plaintext highlighter-rouge">run()</code>方法的Java代码；</li>
  <li>Blocked：运行中的线程，因为某些操作被<strong>阻塞</strong>而挂起；</li>
  <li>Waiting：运行中的线程，因为某些操作在<strong>等待</strong>中；</li>
  <li>Timed Waiting：运行中的线程，因为执行<code class="language-plaintext highlighter-rouge">sleep()</code>方法正在计时<strong>等待</strong>；</li>
  <li>Terminated：线程已<strong>终止</strong>，因为<code class="language-plaintext highlighter-rouge">run()</code>方法执行完毕。</li>
</ul>

<p>用一个状态转移图表示如下：</p>
<pre><code class="language-ascii">         ┌─────────────┐
         │     New     │
         └─────────────┘
                │
                ▼
┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
 ┌─────────────┐ ┌─────────────┐
││  Runnable   │ │   Blocked   ││
 └─────────────┘ └─────────────┘
│┌─────────────┐ ┌─────────────┐│
 │   Waiting   │ │Timed Waiting│
│└─────────────┘ └─────────────┘│
 ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
                │
                ▼
         ┌─────────────┐
         │ Terminated  │
         └─────────────┘
</code></pre>
<p>当线程启动后，它可以在<code class="language-plaintext highlighter-rouge">Runnable</code>、<code class="language-plaintext highlighter-rouge">Blocked</code>、<code class="language-plaintext highlighter-rouge">Waiting</code>和<code class="language-plaintext highlighter-rouge">Timed Waiting</code>这几个状态之间切换，直到最后变成<code class="language-plaintext highlighter-rouge">Terminated</code>状态，线程终止。<br />
线程终止的原因有：</p>

<ul>
  <li>线程正常终止：<code class="language-plaintext highlighter-rouge">run()</code>方法执行到<code class="language-plaintext highlighter-rouge">return</code>语句返回；</li>
  <li>线程意外终止：<code class="language-plaintext highlighter-rouge">run()</code>方法因为未捕获的异常导致线程终止；</li>
  <li>对某个线程的<code class="language-plaintext highlighter-rouge">Thread</code>实例调用<code class="language-plaintext highlighter-rouge">stop()</code>方法强制终止（强烈不推荐使用）。</li>
</ul>

<hr />

<p><strong>等待其他线程执行完毕</strong></p>

<p>一个线程还可以<strong>等待</strong>另一个线程直到其运行结束。</p>

<p>例如，<code class="language-plaintext highlighter-rouge">main</code>线程在启动<code class="language-plaintext highlighter-rouge">t</code>线程后，可以通过<code class="language-plaintext highlighter-rouge">t.join()</code>等待<code class="language-plaintext highlighter-rouge">t</code>线程结束后再继续运行：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"main方法开始"</span><span class="o">);</span>
<span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"线程开始"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"线程结束"</span><span class="o">);</span>
<span class="o">});</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程</span>
<span class="n">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span><span class="c1">//等待t线程结束</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"main方法结束"</span><span class="o">);</span>
</code></pre></div></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>main方法开始
线程开始
线程结束
main方法结束
</code></pre></div></div>
<p>如果<code class="language-plaintext highlighter-rouge">t</code>线程已经结束，对实例<code class="language-plaintext highlighter-rouge">t</code>调用<code class="language-plaintext highlighter-rouge">join()</code>会立刻返回。此外，<code class="language-plaintext highlighter-rouge">join(long)</code>的重载方法也可以指定一个等待时间，超过等待时间后就不再继续等待。</p>

<hr />

<p>在 Java 中，<strong>多线程中的阻塞状态和等待状态是两种不同的状态</strong>，它们之间有一些区别：</p>

<ol>
  <li><strong>阻塞状态（Blocked）</strong>：
    <ul>
      <li>当一个线程在获取锁时，如果该锁已经被其他线程持有，那么这个线程会进入阻塞状态，直到该锁被释放并且它能够获取到锁为止。</li>
      <li>当一个线程已经持有锁时，线程进入阻塞状态是因为正在等待某个条件的发生，一旦条件满足，线程将会被唤醒并切换到就绪状态。</li>
      <li>阻塞状态的线程<strong>仍然持有已经获得的锁</strong>，不会释放锁。</li>
    </ul>
  </li>
  <li><strong>等待状态（Waiting）</strong>：
    <ul>
      <li>当线程调用 <code class="language-plaintext highlighter-rouge">Object.wait()</code>、<code class="language-plaintext highlighter-rouge">Thread.join()</code> 或 <code class="language-plaintext highlighter-rouge">LockSupport.park()</code> 等方法进入等待状态时，线程会进入等待状态。</li>
      <li>等待状态下的线程会<strong>释放持有的锁</strong>，等待其他线程调用 <code class="language-plaintext highlighter-rouge">notify()</code>、<code class="language-plaintext highlighter-rouge">notifyAll()</code> 或被中断时才能被唤醒，并尝试重新获得之前持有的锁，如果获取成功，则可以继续执行。</li>
      <li>等待状态通常用于线程间的协调和通信，等待特定条件满足后再继续执行。</li>
    </ul>
  </li>
</ol>

<p>总的来说，阻塞状态是因为线程被其他原因无法继续执行所产生的状态，而等待状态则是线程主动等待某些条件满足才能继续执行的状态。在编写多线程程序时，理解和正确处理线程的阻塞和等待状态是非常重要的。</p>

<hr />

<p><strong>注意：<code class="language-plaintext highlighter-rouge">Thread.sleep()</code>不会释放持有的锁。</strong></p>

<p>Timed Waiting（计时等待）和Waiting（等待）是两种不同的线程状态。</p>

<ul>
  <li>Timed Waiting（计时等待）是指线程在等待一段时间后自动恢复，例如通过调用<code class="language-plaintext highlighter-rouge">Thread.sleep()</code>或调用了<strong><code class="language-plaintext highlighter-rouge">Object.wait(long timeout)</code></strong>方法。在这种状态下，线程是<strong>持有锁</strong>的。</li>
  <li>Waiting（等待）是指线程在等待某个条件满足后被唤醒，例如通过调用<strong><code class="language-plaintext highlighter-rouge">Object.wait()</code></strong>方法。在这种状态下，线程是<strong>释放了持有的锁</strong>的。</li>
</ul>

<p>这两种状态的区别在于<strong>是否指定了等待的时间</strong>。Timed Waiting是有一个<strong>固定的等待时间</strong>，而Waiting是等待某个条件的发生，<strong>时间不确定</strong>。</p>
<h2 id="中断线程">中断线程</h2>
<p>如果线程需要执行一个长时间任务，就可能需要能中断线程。中断线程就是<strong>其他线程</strong>给该线程发一个信号，该线程收到信号后应结束执行<code class="language-plaintext highlighter-rouge">run()</code>方法，使得自身线程能<strong>立刻结束运行</strong>。</p>

<p>假设从网络下载一个100M的文件，如果网速很慢，用户等得不耐烦，就可能在下载过程中点“取消”，这时，程序就需要中断下载线程的执行。</p>

<p>中断一个线程非常简单，只需要在<strong>其他线程</strong>中<strong>对目标线程</strong>调用<code class="language-plaintext highlighter-rouge">interrupt()</code>方法，<strong>目标线程需要反复检测自身状态</strong>是否是interrupted状态，如果是，就立刻结束运行。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(){</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">isInterrupted</span><span class="o">()){</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">sleep</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
                <span class="n">n</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"线程被中断，结束执行"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"中断了，n="</span><span class="o">+</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"开始"</span><span class="o">);</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>
<span class="n">t</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
<span class="n">t</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"结束"</span><span class="o">);</span>
</code></pre></div></div>
<p>这段代码大概率会一直运行，虽然调用<code class="language-plaintext highlighter-rouge">t.interrupt();</code>时，会改变<code class="language-plaintext highlighter-rouge">interrupted</code>的状态，使得<code class="language-plaintext highlighter-rouge">!isInterrupted()</code>为假。</p>

<p>但主线程请求<code class="language-plaintext highlighter-rouge">t</code>线程中断时，<code class="language-plaintext highlighter-rouge">t</code>线程<strong>大概率</strong>是在运行<code class="language-plaintext highlighter-rouge">sleep(10)</code>，而<strong><code class="language-plaintext highlighter-rouge">sleep()</code>方法会检测线程是否出现中断请求</strong>，如果检测到了，则会抛出<code class="language-plaintext highlighter-rouge">InterruptedException</code>异常，并<strong>清除线程的中断状态</strong>，而异常又被捕获了，因此<code class="language-plaintext highlighter-rouge">while</code>循环不会结束。</p>

<p>也有极小概率会正常终止，当主线程请求<code class="language-plaintext highlighter-rouge">t</code>线程中断时，如果<code class="language-plaintext highlighter-rouge">t</code>线程已经运行完<code class="language-plaintext highlighter-rouge">sleep()</code>,在运行之后的<code class="language-plaintext highlighter-rouge">n++;</code>则会在下次循环通过<code class="language-plaintext highlighter-rouge">!isInterrupted()</code>为假后结束循环。</p>

<p>要让之前的代码正常退出，只需要在<code class="language-plaintext highlighter-rouge">catch</code>块中添加<code class="language-plaintext highlighter-rouge">break;</code>。结果如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>开始
线程被中断，结束执行
中断了，n=9
结束
</code></pre></div></div>

<hr />

<p>调用<code class="language-plaintext highlighter-rouge">interrupt()</code>方法<strong>只是向目标线程发出中断请求</strong>，目标线程<strong>可以选择</strong>是否<strong>响应</strong>这个请求。目标线程可以通过<strong>检查中断状态</strong>并<strong>采取</strong>适当的<strong>措施</strong>来响应中断请求，也可以选择<strong>忽略</strong>中断请求继续执行。</p>

<p>在处理<code class="language-plaintext highlighter-rouge">InterruptedException</code>时，也可以选择继续等待，或处理中断请求提前结束线程的执行，具体取决于应用程序的需求。</p>

<p><strong><code class="language-plaintext highlighter-rouge">InterruptedException</code>通常在以下情况下抛出</strong>：</p>

<ol>
  <li>当一个线程处于计时等待状态（如调用<code class="language-plaintext highlighter-rouge">Thread.sleep()</code>）时，另一个线程调用了该线程的<code class="language-plaintext highlighter-rouge">interrupt()</code>方法，这会导致该线程抛出<code class="language-plaintext highlighter-rouge">InterruptedException</code>，并且<strong>清除该线程的中断状态</strong>。或者在调用<code class="language-plaintext highlighter-rouge">Thread.sleep()</code><strong>之前</strong>，另一个线程调用了该线程的<code class="language-plaintext highlighter-rouge">interrupt()</code>方法，则在执行<code class="language-plaintext highlighter-rouge">Thread.sleep()</code><strong>时</strong>会<strong>检测</strong>到中断请求，并抛出异常，清除中断状态。</li>
  <li>如果一个线程在调用<code class="language-plaintext highlighter-rouge">Object.wait()</code>、<code class="language-plaintext highlighter-rouge">Thread.join()</code>、<code class="language-plaintext highlighter-rouge">Thread.sleep()</code>时被中断，则会抛出<code class="language-plaintext highlighter-rouge">InterruptedException</code>，并且<strong>清除该线程的中断状态</strong>。这样线程在等待某些条件时，如果被中断就会提早终止。如果<strong>调用前</strong>被中断请求，则<strong>调用时</strong>也会检测到中断请求，并抛出异常，清除中断状态。</li>
</ol>

<p>也就是说：当线程处于等待、计时等待状态或以其他方式被占用时，线程在活动之前或期间出现中断时会抛出<code class="language-plaintext highlighter-rouge">InterruptedException</code>。</p>

<p>还可以通过<code class="language-plaintext highlighter-rouge">Thread.currentThread().interrupt()</code>方法来<strong>重新设置当前线程的中断状态</strong>。这种方式可以在捕获<code class="language-plaintext highlighter-rouge">InterruptedException</code>异常后，手动设置线程的中断状态为<code class="language-plaintext highlighter-rouge">true</code>，以便在后续的循环条件中能够正确地退出循环。</p>

<p>因此<strong>正在跑的线程不会响应别的线程发出的中断</strong>。<strong>只有<code class="language-plaintext highlighter-rouge">sleep/wait</code>状态的线程会响应<code class="language-plaintext highlighter-rouge">interrupt</code>。</strong>如果一个线程正在跑，别的线程给他发中断请求，如果没有显示的处理中断请求，它要继续跑到自己调用<code class="language-plaintext highlighter-rouge">sleep/wait</code>的时候，才响应中断请求，抛出异常。</p>

<p>如果你写了一个计算密集型任务，跑一次要10分钟，为了能及时响应别的线程发的<code class="language-plaintext highlighter-rouge">interrupt</code>，可以每跑几秒钟就<code class="language-plaintext highlighter-rouge">sleep(1)</code>一下，确保能及时被<code class="language-plaintext highlighter-rouge">interrupt</code>。</p>

<p><strong>实际上<code class="language-plaintext highlighter-rouge">interrupt()</code>是这么说的</strong>：</p>

<p><code class="language-plaintext highlighter-rouge">interrupt()</code> 方法用于中断线程。除非当前线程是在中断自己，这种情况总是被允许的，否则会调用此线程的 <code class="language-plaintext highlighter-rouge">checkAccess</code> 方法，可能会导致抛出 <code class="language-plaintext highlighter-rouge">SecurityException</code>。</p>

<p>如果线程被阻塞在 <code class="language-plaintext highlighter-rouge">Object</code> 类的 <code class="language-plaintext highlighter-rouge">wait()</code>、<code class="language-plaintext highlighter-rouge">wait(long)</code>、<code class="language-plaintext highlighter-rouge">wait(long, int)</code> 方法，或者 <code class="language-plaintext highlighter-rouge">Thread</code> 类的 <code class="language-plaintext highlighter-rouge">join()</code>、<code class="language-plaintext highlighter-rouge">join(long)</code>、<code class="language-plaintext highlighter-rouge">join(long, int)</code>、<code class="language-plaintext highlighter-rouge">sleep(long)</code>、<code class="language-plaintext highlighter-rouge">sleep(long, int)</code> 方法中，那么它的<strong>中断状态将被清除</strong>，并且会收到一个 <code class="language-plaintext highlighter-rouge">InterruptedException</code>。</p>

<p>如果线程被阻塞在一个 <code class="language-plaintext highlighter-rouge">InterruptibleChannel</code> 的 I/O 操作上，那么该通道将被关闭，线程的<strong>中断状态将被设置</strong>，并且线程将收到一个 <code class="language-plaintext highlighter-rouge">java.nio.channels.ClosedByInterruptException</code>。</p>

<p>如果线程被阻塞在一个 <code class="language-plaintext highlighter-rouge">Selector</code> 上，那么线程的<strong>中断状态将被设置</strong>，并且它将立即从选择操作中返回，可能返回一个非零值，就像调用了选择器的 <code class="language-plaintext highlighter-rouge">wakeup</code> 方法一样。</p>

<p>如果以上情况<strong>都不适用</strong>，那么线程的<strong>中断状态将被设置</strong>。</p>

<p>对一个非存活的线程进行中断操作可能没有任何效果。</p>

<p>此外，文档还指出，在 JDK 参考实现中，对于一个非存活的线程进行中断操作仍然<strong>会记录中断请求</strong>，并通过 <code class="language-plaintext highlighter-rouge">interrupted()</code> 和 <code class="language-plaintext highlighter-rouge">isInterrupted()</code> 方法报告它。</p>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span>  <span class="o">{</span>
        <span class="nc">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="nc">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="c1">//判断中断状态</span>
                <span class="k">while</span> <span class="o">(!</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">isInterrupted</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">n</span><span class="o">++;</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="s">" hello!"</span><span class="o">);</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2：休眠时检测到中断请求"</span><span class="o">);</span>
                        <span class="k">try</span> <span class="o">{</span><span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span><span class="c1">//收拾东西</span>
                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2：走了！"</span><span class="o">);</span>
                        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">_</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2：别催了，马上走！"</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="k">return</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2：运行时检测到中断请求"</span><span class="o">);</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t2：走了！"</span><span class="o">);</span>
            <span class="o">});</span>
            <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span><span class="c1">// 启动新线程t2</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">t2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span> <span class="c1">// 等待t2线程结束</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1：Main通知关门了!"</span><span class="o">);</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1：t2，关门了，快走！"</span><span class="o">);</span>
                <span class="n">t2</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span><span class="c1">// 通知t2，中断请求</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">t2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span><span class="c1">// 等待t2线程结束</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e2</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1：又被Main通知关门了!t2怎么还不走？"</span><span class="o">);</span>
                    <span class="c1">//t2.join();</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"t1：算了我不等了，我先走了"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程t1</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main：t1，关门了，快走！"</span><span class="o">);</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span><span class="c1">// 通知t1，中断请求</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span><span class="c1">// 等1ms</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main：t1，快点！"</span><span class="o">);</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span><span class="c1">// 再次通知t1，中断请求</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span><span class="c1">// 等待t1，中断完成</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main：已确认t1走了"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 hello!
2 hello!
3 hello!
4 hello!
5 hello!
6 hello!
7 hello!
8 hello!
9 hello!
10 hello!
Main：t1，关门了，快走！
t1：Main通知关门了!
t1：t2，关门了，快走！
t2：休眠时检测到中断请求
Main：t1，快点！
t1：又被Main通知关门了!t2怎么还不走？
t1：算了我不等了，我先走了
Main：已确认t1走了
t2：走了！
</code></pre></div></div>
<p>假设一般代码执行没有消耗时间，<code class="language-plaintext highlighter-rouge">XXXXms</code>表示程序运行后的时间。<br />
0~1000ms：<code class="language-plaintext highlighter-rouge">t2</code>持续输出。</p>

<p>1000ms：<code class="language-plaintext highlighter-rouge">main</code>线程通过调用<code class="language-plaintext highlighter-rouge">t1.interrupt()</code>从而通知<code class="language-plaintext highlighter-rouge">t1</code>线程中断，并等待<code class="language-plaintext highlighter-rouge">t1</code>。</p>

<p>1000ms：而此时<code class="language-plaintext highlighter-rouge">t1</code>线程正在等待<code class="language-plaintext highlighter-rouge">t2</code>线程，收到中断请求后，抛出异常，捕获异常后<code class="language-plaintext highlighter-rouge">t1</code>也对<code class="language-plaintext highlighter-rouge">t2</code>发出中断请求，并等待<code class="language-plaintext highlighter-rouge">t2</code>。</p>

<p>1000ms：<code class="language-plaintext highlighter-rouge">t2</code>大概率在休眠时收到中断请求，然后抛出异常，磨蹭10ms后才真正走人。</p>

<p>1001ms：而<code class="language-plaintext highlighter-rouge">main</code>线程在第一次请求<code class="language-plaintext highlighter-rouge">t1</code>中断后，间隔1ms，再次催促<code class="language-plaintext highlighter-rouge">t1</code>中断请求。</p>

<p>1001ms：而此时<code class="language-plaintext highlighter-rouge">t1</code>线程还在等待<code class="language-plaintext highlighter-rouge">t2</code>线程，收到中断请求后，不再等待<code class="language-plaintext highlighter-rouge">t2</code>，也没有继续通知<code class="language-plaintext highlighter-rouge">t2</code>,直接结束了运行。</p>

<p>1001ms：<code class="language-plaintext highlighter-rouge">main</code>线程已经得到<code class="language-plaintext highlighter-rouge">t1</code>线程执行完毕，结束了执行。</p>

<p>1010ms：<code class="language-plaintext highlighter-rouge">t2</code>磨蹭10ms后才真正走人。</p>

<hr />

<p>另一个常用的中断线程的方法是设置标志位。通常会用一个<code class="language-plaintext highlighter-rouge">running</code>标志位来标识线程是否应该继续运行，在外部线程中，通过把<code class="language-plaintext highlighter-rouge">HelloThread.running</code>置为<code class="language-plaintext highlighter-rouge">false</code>，就可以让线程结束。其实和<code class="language-plaintext highlighter-rouge">interrupt()</code>方法是一样的，只是<code class="language-plaintext highlighter-rouge">interrupted</code>字段也会被其他方法检测到状态，比如<code class="language-plaintext highlighter-rouge">join()</code>、<code class="language-plaintext highlighter-rouge">sleep()</code>。如果使用自定义的标志位表示中断线程，则其他方法不会响应。</p>

<p>错误写法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(){</span>
    <span class="kd">public</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">running</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">n</span> <span class="o">++;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="s">" hello!"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"end!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>
<span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程t1</span>
<span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="n">t1</span><span class="o">.</span><span class="na">running</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span><span class="c1">// 通知t1，中断请求</span>
<span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span><span class="c1">// 等</span>
</code></pre></div></div>
<p>因为向上转型的原因，<code class="language-plaintext highlighter-rouge">Thread</code>不存在<code class="language-plaintext highlighter-rouge">running</code>这个字段，好的，我强转回去可以吗，也不行，因为是匿名类。把<code class="language-plaintext highlighter-rouge">Thread</code>改成<code class="language-plaintext highlighter-rouge">var</code>倒是可以，<code class="language-plaintext highlighter-rouge">var t1 = new Thread(){...}</code>，不过不建议。</p>

<p>同样的，如果是实现<code class="language-plaintext highlighter-rouge">Runnable</code>接口传入<code class="language-plaintext highlighter-rouge">Thread</code>构造方法，<code class="language-plaintext highlighter-rouge">Thread</code>当然不知道你定义了<code class="language-plaintext highlighter-rouge">running</code>这个字段，因为<code class="language-plaintext highlighter-rouge">Runnable</code>接口只规定了你有<code class="language-plaintext highlighter-rouge">run()</code>方法。因此只能写正常继承的类了：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span>  <span class="o">{</span>
        <span class="no">T1</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="no">T1</span><span class="o">();</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// 启动新线程t1</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">running</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span><span class="c1">// 通知t1，中断请求</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span><span class="c1">// 等</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">T1</span> <span class="kd">extends</span> <span class="nc">Thread</span><span class="o">{</span>
        <span class="kd">public</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">running</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">n</span> <span class="o">++;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="s">" hello!"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"end!"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 hello!
end!
</code></pre></div></div>
<h2 id="volatile">volatile</h2>
<p>注意到<code class="language-plaintext highlighter-rouge">T1</code>的标志位<code class="language-plaintext highlighter-rouge">boolean running</code>是一个线程间共享的变量。线程间共享变量需要使用<code class="language-plaintext highlighter-rouge">volatile</code>关键字标记，确保每个线程都能读取到更新后的变量值。</p>

<p>为什么要对线程间共享的变量用关键字<code class="language-plaintext highlighter-rouge">volatile</code>声明？这涉及到Java的内存模型。在Java虚拟机中，变量的值保存在主内存中，但是，<strong>当线程访问变量时</strong>，它会先获取一个副本，并保存在自己的工作内存中。如果<strong>线程修改了变量的值</strong>，虚拟机会在<strong>某个时刻</strong>把修改后的值回写到主内存，但是，这个时间是<strong>不确定</strong>的！</p>

<pre><code class="language-ascii">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
           Main Memory
│                               │
   ┌───────┐┌───────┐┌───────┐
│  │ var A ││ var B ││ var C │  │
   └───────┘└───────┘└───────┘
│     │ ▲               │ ▲     │
 ─ ─ ─│─│─ ─ ─ ─ ─ ─ ─ ─│─│─ ─ ─
      │ │               │ │
┌ ─ ─ ┼ ┼ ─ ─ ┐   ┌ ─ ─ ┼ ┼ ─ ─ ┐
      ▼ │               ▼ │
│  ┌───────┐  │   │  ┌───────┐  │
   │ var A │         │ var C │
│  └───────┘  │   │  └───────┘  │
   Thread 1          Thread 2
└ ─ ─ ─ ─ ─ ─ ┘   └ ─ ─ ─ ─ ─ ─ ┘
</code></pre>
<p>这会导致如果一个线程更新了某个变量，另一个线程读取的值<strong>可能</strong>还是<strong>更新前</strong>的。例如，主内存的变量<code class="language-plaintext highlighter-rouge">a = true</code>，线程1对主线程的<code class="language-plaintext highlighter-rouge">a</code>执行<code class="language-plaintext highlighter-rouge">a = false</code>时，它在此刻仅仅是把变量<code class="language-plaintext highlighter-rouge">a</code>的副本变成了<code class="language-plaintext highlighter-rouge">false</code>，主内存的变量<code class="language-plaintext highlighter-rouge">a</code>还是<code class="language-plaintext highlighter-rouge">true</code>，在JVM把修改后的<code class="language-plaintext highlighter-rouge">a</code>回写到主内存之前，其他线程读取到的<code class="language-plaintext highlighter-rouge">a</code>的值仍然是<code class="language-plaintext highlighter-rouge">true</code>，这就造成了多线程之间共享的变量不一致。</p>

<p>而<code class="language-plaintext highlighter-rouge">volatile</code>关键字的目的是告诉虚拟机：</p>

<ul>
  <li>每次访问变量时，总是获取主内存的<strong>最新值</strong>；</li>
  <li>每次修改变量后，<strong>立刻回写</strong>到主内存。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">volatile</code>关键字解决的是可见性问题：当一个<strong>线程</strong>修改了某个<strong>共享变量</strong>的值，其他线程能够<strong>立刻看到</strong>修改后的值。确保多个线程能够正确地读取和修改该变量。</p>

<p>如果去掉<code class="language-plaintext highlighter-rouge">volatile</code>关键字，运行上述程序，发现效果和带<code class="language-plaintext highlighter-rouge">volatile</code>差不多，这是因为在x86的架构下，JVM回写主内存的速度非常快，但是，换成ARM的架构，就会有显著的延迟。</p>

<p><strong>ABA问题</strong></p>

<p><code class="language-plaintext highlighter-rouge">volatile</code>关键字不能解决ABA问题，但不使用<code class="language-plaintext highlighter-rouge">volatile</code>关键字更会导致ABA问题。  ABA问题是指在多线程环境下，一个值从A变成了B，然后又变回A。</p>

<p>例如，线程1读取一个<code class="language-plaintext highlighter-rouge">volatile</code>变量的值为A，然后线程2将其修改为B，最后线程2又将其修改回A，这个过程中线程1可能并不知道变量的值曾经变成过B，因为<code class="language-plaintext highlighter-rouge">volatile</code>只保证了可见性，并没有解决ABA问题。</p>

<p>要解决ABA问题，可以使用<code class="language-plaintext highlighter-rouge">AtomicStampedReference</code>类或<code class="language-plaintext highlighter-rouge">AtomicMarkableReference</code>类，它们可以在引用的同时记录一个标记（stamp或mark），当引用发生变化时，标记也会相应地发生变化，从而避免了ABA问题。</p>

<h2 id="守护线程">守护线程</h2>
<p>Java程序入口就是由JVM启动<code class="language-plaintext highlighter-rouge">main</code>线程，<code class="language-plaintext highlighter-rouge">main</code>线程又可以启动其他线程。当所有线程都运行结束时，JVM退出，进程结束。  只要有一个线程没有退出，JVM进程就不会退出。所以，必须保证所有线程都能及时结束。</p>

<p>但是有一种线程的目的就是无限循环，例如，一个定时触发任务的线程：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span> <span class="n">t</span><span class="o">=</span><span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>
<p>如果这个线程不结束，JVM进程就无法结束。<strong>这类线程</strong>经常没有负责人来负责结束它们。但是，当<strong>其他线程</strong>结束时，JVM进程又必须要结束。</p>

<p>使用守护线程（Daemon Thread）是一个好办法，守护线程是指<strong>为其他线程提供服务的线程</strong>。在调用<code class="language-plaintext highlighter-rouge">start()</code>方法前，调用<code class="language-plaintext highlighter-rouge">setDaemon(true)</code>就能把该线程标记为守护线程。</p>

<p>在JVM中，所有<strong>非守护线程</strong>都执行完毕后，无论有没有守护线程，虚拟机<strong>都会</strong>自动退出。因为所有的非守护线程都结束了，守护线程也就没有存在的必要了。</p>

<p>因此守护线程<strong>不能持有</strong>任何需要关闭的资源，例如打开文件等，因为<strong>虚拟机退出</strong>时，可不管守护线程在干什么，守护线程<strong>没有任何机会来关闭文件</strong>，这会导致数据丢失。</p>

<hr />

<p>父子线程只是谁创建了谁的关系，并没有先后或从属之分，只要创建并运行后，这个所谓的子线程其实和父线程是相互独立的，它的生命周期不受父线程的生命周期影响。</p>

<p>如果想要实现父线程结束时，子线程也结束的效果，可以在子线程中判断父线程是否存活。 <code class="language-plaintext highlighter-rouge">while (fatherThread.isAlive())</code>，示例代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span> <span class="n">fatherThread</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span> <span class="c1">// 获取当前线程，即对于t的父线程</span>
<span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">fatherThread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main还活着"</span> <span class="o">+</span> <span class="n">n</span><span class="o">++);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Main已关闭了"</span><span class="o">);</span>
<span class="o">});</span>
<span class="n">t</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span><span class="c1">//设置守护线程，JVM无视其运行状态</span>
<span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"已关闭"</span><span class="o">);</span>
</code></pre></div></div>
<p>守护进程会在父线程结束后结束。</p>

<p>可以通过<code class="language-plaintext highlighter-rouge">System.exit(0);</code>显示的控制JVM关闭。如果在最后一行调用<code class="language-plaintext highlighter-rouge">System.exit(0);</code>，<code class="language-plaintext highlighter-rouge">t</code>线程就算不是守护线程JVM也会立即终止。</p>

<h2 id="线程同步">线程同步</h2>
<p><strong>当多个线程同时运行时，线程的调度由操作系统决定，程序本身无法决定</strong>。因此，任何一个线程都有可能在<strong>任何指令处被操作系统暂停</strong>，然后在某个时间段后继续执行。</p>

<p>这个时候，有个单线程模型下不存在的问题就来了：如果<strong>多个线程同时读写共享变量</strong>，会出现<strong>数据不一致</strong>的问题。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Thread</span> <span class="n">add</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="nc">Main</span><span class="o">.</span><span class="na">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span> <span class="o">}</span>
        <span class="o">});</span>
        <span class="nc">Thread</span> <span class="n">dec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="nc">Main</span><span class="o">.</span><span class="na">count</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span> <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">add</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">dec</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">add</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="n">dec</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">count</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>上面的代码很简单，两个线程同时对一个<code class="language-plaintext highlighter-rouge">int</code>变量进行操作，一个加10000次，一个减10000次，最后结果应该是0，但是，每次运行，结果实际上都是不一样的。</p>

<p>这是因为对变量进行读取和写入时，如果想得到预期的结果，必须保证是原子操作。原子操作是指不能被中断的一个或一系列操作。</p>

<p>对于语句：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</code></pre></div></div>
<p>看上去是一行语句，实际上对应了3条指令：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">ILOAD</span>
<span class="no">IADD</span>
<span class="no">ISTORE</span>
</code></pre></div></div>
<p>假设<code class="language-plaintext highlighter-rouge">n</code>的值是<code class="language-plaintext highlighter-rouge">100</code>，如果两个线程同时执行<code class="language-plaintext highlighter-rouge">n = n + 1</code>，得到的结果很可能不是<code class="language-plaintext highlighter-rouge">102</code>，而是<code class="language-plaintext highlighter-rouge">101</code>，原因在于：</p>
<pre><code class="language-ascii">┌───────┐    ┌───────┐
│Thread1│    │Thread2│
└───┬───┘    └───┬───┘
    │            │
    │ILOAD (100) │
    │            │ILOAD (100)
    │            │IADD
    │            │ISTORE (101)
    │IADD        │
    │ISTORE (101)│
    ▼            ▼
</code></pre>
<p>如果线程1在执行<code class="language-plaintext highlighter-rouge">ILOAD</code>后被操作系统中断，此刻如果线程2被调度执行，它执行<code class="language-plaintext highlighter-rouge">ILOAD</code>后获取的值仍然是<code class="language-plaintext highlighter-rouge">100</code>，最终结果被两个线程的<code class="language-plaintext highlighter-rouge">ISTORE</code>写入后变成了<code class="language-plaintext highlighter-rouge">101</code>，而不是期待的<code class="language-plaintext highlighter-rouge">102</code>。</p>

<p>这说明多线程模型下，如果要<strong>保证逻辑正确</strong>，则对<strong>共享变量</strong>进行读写时，必须保证<strong>一组指令</strong>以<strong>原子</strong>方式执行：即某一个线程执行这组指令时，其他想执行这组指令的线程必须等待：</p>

<pre><code class="language-ascii">┌───────┐     ┌───────┐
│Thread1│     │Thread2│
└───┬───┘     └───┬───┘
    │             │
    │-- lock --   │
    │ILOAD (100)  │
    │IADD         │
    │ISTORE (101) │
    │-- unlock -- │
    │             │-- lock --
    │             │ILOAD (101)
    │             │IADD
    │             │ISTORE (102)
    │             │-- unlock --
    ▼             ▼
</code></pre>
<p>通过加锁和解锁的操作，就能保证这3条指令总是在一个线程执行期间，不会有其他线程会进入此指令区间。</p>

<p>即使在执行期线程<strong>被操作系统中断</strong>执行，其他线程也会因为无法获得锁导致无法进入此指令区间。只有执行线程将锁释放后，其他线程才有机会获得锁并执行。</p>

<p>这种加锁和解锁之间的代码块称之为<strong>临界区</strong>（Critical Section），任何时候临界区最多只有一个线程能执行。</p>

<h3 id="synchronized">synchronized</h3>
<p>保证一段代码的原子性就是通过加锁和解锁实现的。Java程序使用<code class="language-plaintext highlighter-rouge">synchronized</code>关键字对一个对象进行加锁，<code class="language-plaintext highlighter-rouge">synchronized</code>保证了<strong>代码块</strong>在任意时刻最多只有一个线程能执行。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">synchronized</span><span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>修改后：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Object</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Thread</span> <span class="n">add</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kd">synchronized</span> <span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">lock</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">Main</span><span class="o">.</span><span class="na">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="nc">Thread</span> <span class="n">dec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kd">synchronized</span> <span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">lock</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">Main</span><span class="o">.</span><span class="na">count</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">add</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">dec</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">add</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="n">dec</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">count</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>注意到代码：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">synchronized</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">lock</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 获取锁</span>
    <span class="o">...</span>
<span class="o">}</span> <span class="c1">// 释放锁</span>
</code></pre></div></div>
<p>它表示用<code class="language-plaintext highlighter-rouge">Main.lock</code>实例作为锁，即<code class="language-plaintext highlighter-rouge">new Object();</code>这个实例，因为是静态的，所以两个线程通过获得<code class="language-plaintext highlighter-rouge">Main.lock</code>的是同一个实例。</p>

<p>两个线程在执行各自的<code class="language-plaintext highlighter-rouge">synchronized(Main.lock) { ... }</code>代码块时，必须先获得锁，才能进入代码块进行。执行结束后，在<code class="language-plaintext highlighter-rouge">synchronized</code>语句块结束会自动释放锁。这样一来，对<code class="language-plaintext highlighter-rouge">Main.count</code>变量进行读写就不可能同时进行。</p>

<hr />

<p>使用<code class="language-plaintext highlighter-rouge">synchronized</code>解决了多线程同步访问共享变量的正确性问题。但是，它的缺点是带来了<strong>性能下降</strong>。因为<code class="language-plaintext highlighter-rouge">synchronized</code>代码块无法并发执行，且加锁和解锁需要消耗一定的时间，所以，<code class="language-plaintext highlighter-rouge">synchronized</code>会降低程序的执行效率。</p>

<p>如何使用<code class="language-plaintext highlighter-rouge">synchronized</code>：</p>

<ol>
  <li>找出修改<strong>共享变量</strong>的线程代码块；</li>
  <li>选择一个<strong>共享实例</strong>作为锁；</li>
  <li>使用<code class="language-plaintext highlighter-rouge">synchronized(lockObject) { ... }</code>。</li>
</ol>

<p>在使用<code class="language-plaintext highlighter-rouge">synchronized</code>的时候，不必担心抛出异常。因为无论是否有异常，都会在<code class="language-plaintext highlighter-rouge">synchronized</code>结束处正确释放锁。</p>

<hr />

<p><strong>不需要锁的原子操作，JVM规范定义了几种原子操作</strong>：</p>
<ul>
  <li>基本类型（<code class="language-plaintext highlighter-rouge">long</code>和<code class="language-plaintext highlighter-rouge">double</code><strong>除外</strong>）<strong>赋值</strong>，例如：<code class="language-plaintext highlighter-rouge">int n = m</code>；</li>
  <li>引用类型<strong>赋值</strong>，例如：<code class="language-plaintext highlighter-rouge">List&lt;String&gt; list = anotherList</code>。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">long</code>和<code class="language-plaintext highlighter-rouge">double</code>是64位数据，JVM<strong>没有明确规定</strong>64位赋值操作是不是一个原子操作，不过在x64平台的JVM是把<code class="language-plaintext highlighter-rouge">long</code>和<code class="language-plaintext highlighter-rouge">double</code>的赋值作为原子操作实现的。</p>

<p>单条原子操作不需要锁，如果是多条原子操作，则需要锁。多线程连续读写多个变量时，同步的目的是为了<strong>保证程序逻辑正确</strong>。</p>

<p>不但写需要同步，读也需要同步：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>假定当前坐标是<code class="language-plaintext highlighter-rouge">(100, 200)</code>，那么当设置新坐标为<code class="language-plaintext highlighter-rouge">(110, 220)</code>时，上述未同步的多线程<code class="language-plaintext highlighter-rouge">get()</code><strong>读到</strong>的值可能有：</p>
<ul>
  <li>(100, 200)：x，y更新前；</li>
  <li>(110, 200)：x更新后，y更新前；</li>
  <li>(110, 220)：x，y更新后。</li>
</ul>

<p>如果读取到<code class="language-plaintext highlighter-rouge">(110, 200)</code>，即读到了更新后的x，更新前的y，那么可能会造成程序的逻辑错误，无法保证读取的<strong>多个变量状态保持一致</strong>。</p>

<p>有些时候，通过一些巧妙的转换，可以把非原子操作变为原子操作。例如，上述代码如果改造成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">ps</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">};</span>
        <span class="k">this</span><span class="o">.</span><span class="na">ps</span> <span class="o">=</span> <span class="n">ps</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">this.ps = ps;</code>是原子操作。而<code class="language-plaintext highlighter-rouge">int[] ps = new int[] { x, y };</code>不是，不过没有关系，因为<code class="language-plaintext highlighter-rouge">x</code>与<code class="language-plaintext highlighter-rouge">y</code>不是共享变量，它们的值只在当前线程中可见，所以在这种情况下，不需要担心原子性问题。重要的是<code class="language-plaintext highlighter-rouge">ps</code>，原子操作保证了<code class="language-plaintext highlighter-rouge">ps</code><strong>要么是赋值前的值，要么是赋值后的值</strong>。</p>

<p>不过<code class="language-plaintext highlighter-rouge">get()</code>读取还是有可能存在<code class="language-plaintext highlighter-rouge">x</code>更新后，<code class="language-plaintext highlighter-rouge">y</code>更新前的情况，这个问题并没有解决。</p>

<hr />

<h3 id="测试同步问题">测试同步问题</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Point</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">();</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="c1">// 超出出后停止</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">y</span><span class="o">&lt;</span><span class="mi">100000000</span><span class="o">;</span><span class="n">x</span><span class="o">++,</span><span class="n">y</span><span class="o">++){</span>
                <span class="n">point</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="nc">Thread</span> <span class="n">thread2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="c1">// 线程thread执行完后关闭</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">()){</span>
                <span class="kt">int</span><span class="o">[]</span> <span class="n">ints</span><span class="o">;</span>
                <span class="n">ints</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">ints</span><span class="o">[</span><span class="mi">0</span><span class="o">]-</span><span class="n">ints</span><span class="o">[</span><span class="mi">1</span><span class="o">]!=-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"x="</span><span class="o">+</span><span class="n">ints</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="s">",y="</span><span class="o">+</span><span class="n">ints</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">))</span> <span class="o">{</span>
                        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stringIntegerEntry</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">stringIntegerEntry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="nc">Integer</span> <span class="n">value</span> <span class="o">=</span> <span class="n">stringIntegerEntry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="n">count</span><span class="o">+=</span><span class="n">value</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">+</span><span class="s">",count:"</span><span class="o">+</span><span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"一共"</span><span class="o">+</span><span class="n">count</span><span class="o">+</span><span class="s">"条同步问题"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台提示有同步问题，<strong>1000条左右的量级</strong>。</p>

<p>那么把<code class="language-plaintext highlighter-rouge">set</code>，<strong>加锁</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台提示有同步问题，<strong>100w条左右的量级</strong>，为什么同步问题更多了呢？因为加锁后性能变低了。</p>

<p>那么把<code class="language-plaintext highlighter-rouge">get</code>也<strong>加相同锁</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>肯定没问题，一次只能有一个线程进入<code class="language-plaintext highlighter-rouge">synchronized (this) {}</code>,因此<code class="language-plaintext highlighter-rouge">set</code>和<code class="language-plaintext highlighter-rouge">get</code>互斥了，这时就不存在同时访问的问题了。</p>

<p>那么把<code class="language-plaintext highlighter-rouge">get</code>改成<strong>不同锁</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">())</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">new Object()</code>这样的写法让<code class="language-plaintext highlighter-rouge">synchronized</code>完全失去了作用，控制台提示有同步问题，<strong>100w条左右的量级</strong></p>

<p>那么把<code class="language-plaintext highlighter-rouge">Point</code>的<code class="language-plaintext highlighter-rouge">set</code>改写成线程安全的形式：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">ps</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">};</span>
        <span class="k">this</span><span class="o">.</span><span class="na">ps</span> <span class="o">=</span> <span class="n">ps</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">ps</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">ps</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>但<code class="language-plaintext highlighter-rouge">get</code>还有线程安全问题，控制台提示有同步问题，<strong>大概100条左右的量级</strong>。</p>

<p>那么把<code class="language-plaintext highlighter-rouge">get</code>改写成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">ps</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span><span class="n">ps</span><span class="o">[</span><span class="mi">1</span><span class="o">]};</span>
    <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>当然有问题，不是原子性的语句，控制台提示有同步问题，<strong>大概100条左右的量级</strong>。</p>

<p>那么都简化为一条语句：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">ps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">};</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">ps</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span><span class="n">ps</span><span class="o">[</span><span class="mi">1</span><span class="o">]};</span>
<span class="o">}</span>
</code></pre></div></div>
<p>还是一样的问题，控制台提示有同步问题，<strong>大概100条作用的量级</strong>。</p>

<p>那么把<code class="language-plaintext highlighter-rouge">get</code>改成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
    <span class="k">return</span> <span class="n">ps</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>问题解决</strong>，一共0条同步问题。</p>

<hr />

<p>胡乱分析：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">ps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>
<p>对于 <code class="language-plaintext highlighter-rouge">this.ps = new int[] { x, y };</code>来说，它实际上解决的是同时将<code class="language-plaintext highlighter-rouge">x</code>，<code class="language-plaintext highlighter-rouge">y</code>赋值到<code class="language-plaintext highlighter-rouge">ps</code>的问题，因为对于引用类型变量来说赋值是原子的，所以问题解决了。但是获取<code class="language-plaintext highlighter-rouge">x</code>，<code class="language-plaintext highlighter-rouge">y</code>的值可不是原子的，为什么这里没有问题呢？因为<code class="language-plaintext highlighter-rouge">x</code>与<code class="language-plaintext highlighter-rouge">y</code>都是局部变量，不会有变量共享问题。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
    <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">ps</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span><span class="n">ps</span><span class="o">[</span><span class="mi">1</span><span class="o">]};</span>
<span class="o">}</span>
</code></pre></div></div>
<p>而对于<code class="language-plaintext highlighter-rouge">get</code>来说，<code class="language-plaintext highlighter-rouge">ps[0]</code>,<code class="language-plaintext highlighter-rouge">ps[1]</code>有变量共享问题，因为<code class="language-plaintext highlighter-rouge">ps</code>是共享变量。</p>

<p>总的来说，在这段测试代码中，只要<code class="language-plaintext highlighter-rouge">set</code>和<code class="language-plaintext highlighter-rouge">get</code>方法有一个有同步问题就会导致测试代码出问题。</p>

<hr />

<p><strong>不可变对象无需同步</strong></p>

<p>如果多线程读写的是一个不可变对象，那么无需同步，因为不会修改对象的状态：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Data</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">names</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">names</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">names</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">names</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">set()</code>方法内部创建了一个不可变<code class="language-plaintext highlighter-rouge">List</code>，这个<code class="language-plaintext highlighter-rouge">List</code>包含的对象也是不可变对象<code class="language-plaintext highlighter-rouge">String</code>，因此，整个<code class="language-plaintext highlighter-rouge">List&lt;String&gt;</code>对象都是不可变的，因此读写均无需同步。</p>

<hr />

<p>分析变量是否能被多线程访问时，首先要理清概念，多线程同时执行的是方法。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Status</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">names</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ns</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">names</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">names</span> <span class="o">=</span> <span class="n">ns</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">10</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">+=</span> <span class="n">step</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">+=</span> <span class="n">step</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nc">StatusRecord</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">StatusRecord</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">names</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>如果有A、B两个线程，同时执行是指：</p>
<ul>
  <li>可能同时执行set()；</li>
  <li>可能同时执行get()；</li>
  <li>可能A执行set()，同时B执行get()。</li>
</ul>

<p>对象的成员变量<code class="language-plaintext highlighter-rouge">names</code>、<code class="language-plaintext highlighter-rouge">x</code>、<code class="language-plaintext highlighter-rouge">y</code>显然能被多线程同时读写，但局部变量（包括方法参数）如果没有“逃逸”，那么只有当前线程可见。局部变量<code class="language-plaintext highlighter-rouge">step</code>也仅在<code class="language-plaintext highlighter-rouge">set()</code>方法内部使用，因此每个线程同时执行<code class="language-plaintext highlighter-rouge">set</code>时都有一份独立的<code class="language-plaintext highlighter-rouge">step</code>存储在线程的栈上，互不影响，但是局部变量<code class="language-plaintext highlighter-rouge">ns</code>虽然每个线程也各有一份，但<strong>后续赋值后</strong>对其他线程就变成可见了。对<code class="language-plaintext highlighter-rouge">set()</code>方法同步时，如果要最小化<code class="language-plaintext highlighter-rouge">synchronized</code>代码块，可以改写如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">names</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 局部变量其他线程不可见:</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ns</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">names</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">10</span><span class="o">;</span>
    <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">names</span> <span class="o">=</span> <span class="n">ns</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">+=</span> <span class="n">step</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">+=</span> <span class="n">step</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>因此，深入理解多线程还需理解变量在栈上的存储方式，基本类型和引用类型的存储方式也不同。</p>

<hr />

<p>例子：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Point</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">();</span>
        <span class="n">point</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
        <span class="nc">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">point</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">110</span><span class="o">,</span> <span class="mi">220</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span><span class="c1">//停1毫秒</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">;</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">s</span><span class="o">;</span>
        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">s</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"Point{x=\{x}, y=\{y}\{'}'}"</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>最后一条<code class="language-plaintext highlighter-rouge">System.out.println(point);</code>会等待<code class="language-plaintext highlighter-rouge">point.set(110, 220);</code>执行完释放锁后打印<code class="language-plaintext highlighter-rouge">Point{x=110, y=220}</code>，当然，如果1ms过去了<code class="language-plaintext highlighter-rouge">t1</code>线程还没执行<code class="language-plaintext highlighter-rouge">point.set()</code>拿到锁，则会直接打印<code class="language-plaintext highlighter-rouge">Point{x=110, y=200}</code>。</p>

<p>如果去掉<code class="language-plaintext highlighter-rouge">toString()</code>的锁，则最后一条<code class="language-plaintext highlighter-rouge">System.out.println(point);</code>打印的内容是不可确定的。</p>

<p>可能是<code class="language-plaintext highlighter-rouge">Point{x=100, y=200}</code>（<code class="language-plaintext highlighter-rouge">set</code>执行开始的时间大于1ms）。</p>

<p>可能是<code class="language-plaintext highlighter-rouge">Point{x=110, y=200}</code>（<code class="language-plaintext highlighter-rouge">set</code>执行开始的时间小于1ms，执行到一半，在计时等待）。</p>

<p>不太可能是<code class="language-plaintext highlighter-rouge">Point{x=110, y=220}</code>（<code class="language-plaintext highlighter-rouge">set</code>执行完了，<code class="language-plaintext highlighter-rouge">println</code>才执行，也就是说受到神秘力量干涉，<code class="language-plaintext highlighter-rouge">println</code>延迟了至少999ms才执行）。</p>

<hr />

<h3 id="volatile与synchronized">volatile与synchronized</h3>

<p>程安全问题主要包括原子性问题、有序性问题、可见性问题。  为了应对这些问题，Java构建了内存模型JMM（Java Memory Model），并提供了一些解决方案：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">volatile</code>关键字解决可见性和有序性问题：<code class="language-plaintext highlighter-rouge">volatile</code>关键字用于修饰变量，保证了每个线程读到的数据是最新值，并且禁止了指令重排序。但是，<code class="language-plaintext highlighter-rouge">volatile</code>不能保证<strong>多个线程对同一个变量的操作</strong>的原子性。</li>
  <li><code class="language-plaintext highlighter-rouge">synchronized</code>关键字解决原子性、可见性和有序性问题：<code class="language-plaintext highlighter-rouge">synchronized</code>关键字用于创建同步代码块或同步方法，确保同步代码块内的代码在<strong>同一时刻</strong>只能有一个线程访问，从而保证了线程安全。此外，<code class="language-plaintext highlighter-rouge">synchronized</code>关键字还具有内存屏障的功能，解决可见性和有序性问题。</li>
  <li><code class="language-plaintext highlighter-rouge">CAS</code>（Compare and Swap）解决原子性问题：<code class="language-plaintext highlighter-rouge">CAS</code>是一种无锁算法，通过比较内存中的值和预期值来决定是否更新内存中的值。<code class="language-plaintext highlighter-rouge">CAS</code>操作是原子的，可以解决原子性问题。在Java中，<code class="language-plaintext highlighter-rouge">AtomicInteger</code>、<code class="language-plaintext highlighter-rouge">AtomicLong</code>等原子类使用了<code class="language-plaintext highlighter-rouge">CAS</code>操作来实现线程安全的原子操作。</li>
</ol>

<p>原子性问题解决思路本质是<strong>互斥</strong>。</p>

<h3 id="内存屏障">内存屏障</h3>

<p>内存屏障（Memory Barrier），也称为内存栅栏或内存栅障，是一种硬件或软件的屏障，用于控制特定指令序列的执行顺序以及对内存访问的顺序和方式。内存屏障在多核处理器和多线程环境下发挥重要作用，确保线程间的内存可见性和有序性，从而保证并发程序的正确性。</p>

<p>内存屏障可以分为以下几种类型：</p>

<ol>
  <li>
    <p><strong>读屏障（Read Barrier）</strong>：读屏障用于确保在读取操作之前，所有之前的读取和写入操作都已经完成。它可以防止处理器乱序执行指令或缓存数据不一致的情况。</p>
  </li>
  <li>
    <p><strong>写屏障（Write Barrier）</strong>：写屏障用于确保在写入操作之后，所有之前的写入和读取操作都已经完成。它可以防止处理器将写入操作提前执行，保证写入的值对其他线程可见。</p>
  </li>
  <li>
    <p><strong>全屏障（Full Barrier）</strong>：全屏障用于同时提供读屏障和写屏障的功能，即在执行全屏障之前，所有之前的读取和写入操作都已经完成；在执行全屏障之后，所有之前的写入和读取操作都已经完成。</p>
  </li>
</ol>

<p>内存屏障在Java中的应用：</p>

<ul>
  <li>在<code class="language-plaintext highlighter-rouge">volatile</code>关键字的实现中，编译器会在读取和写入<code class="language-plaintext highlighter-rouge">volatile</code>变量时插入对应的读屏障和写屏障，保证了<code class="language-plaintext highlighter-rouge">volatile</code>变量的可见性和有序性。</li>
  <li>在<code class="language-plaintext highlighter-rouge">synchronized</code>关键字的实现中，<code class="language-plaintext highlighter-rouge">synchronized</code>块的进入和退出分别对应了全屏障的插入，<strong>保证了同步代码块内的指令按照预期顺序执行，同时也保证了线程间的内存可见性。</strong></li>
</ul>

<p>内存屏障是确保多线程程序正确性的重要机制，它能够控制指令的执行顺序和内存访问的顺序，保证了线程间的通信和协调。</p>

<h3 id="同步方法">同步方法</h3>
<p>使用<code class="language-plaintext highlighter-rouge">synchronized</code>的时候，锁住的是哪个对象非常重要。让线程自己选择锁对象往往会使得代码逻辑混乱，也不利于封装。更好的方法是把<code class="language-plaintext highlighter-rouge">synchronized</code>逻辑封装起来。比如：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dec</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">count</span> <span class="o">-=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>这样一来，线程调用<code class="language-plaintext highlighter-rouge">add()</code>、<code class="language-plaintext highlighter-rouge">dec()</code>方法时，不必关心同步逻辑，因为<code class="language-plaintext highlighter-rouge">synchronized</code>代码块在<code class="language-plaintext highlighter-rouge">add()</code>、<code class="language-plaintext highlighter-rouge">dec()</code>方法内部。并且<code class="language-plaintext highlighter-rouge">synchronized</code>锁住的对象是<code class="language-plaintext highlighter-rouge">this</code>，即<strong>当前实例</strong>，这又使得创建<strong>多个</strong><code class="language-plaintext highlighter-rouge">Counter</code>实例的时候，它们之间<strong>互不影响</strong>，可以并发执行。</p>

<hr />

<p>如果一个类被设计为允许多线程正确访问，这个类就是“线程安全”的（thread-safe），上面的<code class="language-plaintext highlighter-rouge">Counter</code>类就是线程安全的。Java标准库的<code class="language-plaintext highlighter-rouge">java.lang.StringBuffer</code>也是线程安全的。</p>

<p>还有一些不变类，例如<code class="language-plaintext highlighter-rouge">String</code>，<code class="language-plaintext highlighter-rouge">Integer</code>，<code class="language-plaintext highlighter-rouge">LocalDate</code>，它们的所有成员变量都是<code class="language-plaintext highlighter-rouge">final</code>，多线程同时访问时只能读不能写，这些不变类也是线程安全的。</p>

<p>最后，类似<code class="language-plaintext highlighter-rouge">Math</code>这些只提供静态方法，没有成员变量的类，也是线程安全的。</p>

<p>除了上述几种少数情况，大部分类，例如<code class="language-plaintext highlighter-rouge">ArrayList</code>，都是非线程安全的类，我们不能在多线程中修改它们。但是，如果所有线程都只读取，不写入，那么<code class="language-plaintext highlighter-rouge">ArrayList</code>是可以安全地在线程间共享的。</p>

<p><strong>没有特殊说明时，一个类默认是非线程安全的</strong>。</p>

<hr />

<p>当锁住的是<code class="language-plaintext highlighter-rouge">this</code>实例时，实际上可以用<code class="language-plaintext highlighter-rouge">synchronized</code>关键字修饰这个<strong>方法</strong>。它表示整个方法都用<code class="language-plaintext highlighter-rouge">this</code>实例加锁。</p>

<p>而对于<code class="language-plaintext highlighter-rouge">static</code>方法，是没有<code class="language-plaintext highlighter-rouge">this</code>实例的，因为<code class="language-plaintext highlighter-rouge">static</code>方法是针对类而不是实例。但是任何一个类都有一个由JVM自动创建的<code class="language-plaintext highlighter-rouge">Class</code>实例，因此，对<code class="language-plaintext highlighter-rouge">static</code>方法添加<code class="language-plaintext highlighter-rouge">synchronized</code>，锁住的是该类的<code class="language-plaintext highlighter-rouge">Class</code>实例。即类似：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">synchronized</span><span class="o">(</span><span class="nc">Counter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">...</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>如果在<strong>方法</strong>上使用<code class="language-plaintext highlighter-rouge">synchronized</code>关键字，则表示整个方法都会被加锁，只有获取到锁的线程才能执行该方法。其他线程在获取到锁之前会被阻塞，直到锁被释放后，开始竞争锁。这样确保了在同一时间只有一个线程可以进入该方法的代码块执行。</p>

<p>如果对相同类的两个方法<strong>同时</strong>使用<code class="language-plaintext highlighter-rouge">synchronized</code>关键字，那么这两个方法将会使用<strong>同一把锁</strong>，即<code class="language-plaintext highlighter-rouge">this</code>。这种情况下，如果一个线程已经获取了锁在执行其中一个方法，那其他线程就不能同时执行这两个方法中的任意一个。</p>

<p>如果希望两个方法<strong>不使用同一把锁</strong>，则<strong>不能在方法上</strong>使用<code class="language-plaintext highlighter-rouge">synchronized</code>关键字。</p>

<p>对于单条赋值语句：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<p>不需要同步，因为读取一个 <code class="language-plaintext highlighter-rouge">int</code> 变量是原子操作，不会出现线程安全问题。<br />
但是如果是两条赋值语句：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">first</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">last</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Pair</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Pair</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pair</span><span class="o">();</span>
        <span class="n">p</span><span class="o">.</span><span class="na">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
        <span class="n">p</span><span class="o">.</span><span class="na">last</span> <span class="o">=</span> <span class="n">last</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">get</code>方法返回一个包含两个<code class="language-plaintext highlighter-rouge">int</code>值的对象<code class="language-plaintext highlighter-rouge">Pair</code>。如果在调用<code class="language-plaintext highlighter-rouge">get</code>方法的过程中，另一个线程修改了<code class="language-plaintext highlighter-rouge">first</code>或<code class="language-plaintext highlighter-rouge">last</code>的值，就可能导致返回的<code class="language-plaintext highlighter-rouge">Pair</code>对象中的<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>不是<strong>原子性地对应的</strong>。</p>

<p>为了确保返回的<code class="language-plaintext highlighter-rouge">Pair</code>对象中的<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>是<strong>原子性地对应的</strong>，需要在<code class="language-plaintext highlighter-rouge">get</code>方法和修改<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>值的<code class="language-plaintext highlighter-rouge">set</code>方法内部使用<code class="language-plaintext highlighter-rouge">synchronized</code>关键字。</p>

<p>这样既确保在同一时刻只有一个线程能够修改或者获取<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>的值，保证了获取<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>的过程是原子的。</p>

<p>如果只在<code class="language-plaintext highlighter-rouge">get</code>方法内加锁，只能保证在<strong>同一时刻</strong>只有一个线程能够<strong>通过<code class="language-plaintext highlighter-rouge">get</code>方法</strong>获取到<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>的值，我们不需要这个特性，这个特性反而是负面的。还不能保证获取<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>的过程是原子的。</p>

<p>原子性指的是一个操作是不可分割的整体，要么全部执行成功，要么全部不执行，不会出现中间状态。在这里，原子性是指保证在读取<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>时，它们的值是一致的，不存在读到<code class="language-plaintext highlighter-rouge">first</code>更新后、<code class="language-plaintext highlighter-rouge">last</code>更新前的情况。</p>

<p>使用<code class="language-plaintext highlighter-rouge">synchronized</code>确保了这种一致性，但并没有保证是<strong>同时获取了</strong>这两个值，因此把其他的对<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>写入操作的也锁了才能保证一致性。</p>

<p>如果不需要保证<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>的<strong>一致性</strong>，即<code class="language-plaintext highlighter-rouge">first</code>和<code class="language-plaintext highlighter-rouge">last</code>没有什么关系，那么不需要对这两个变量进行同步操作。同步的目的是为了<strong>保证程序逻辑正确</strong>。</p>

<h2 id="死锁">死锁</h2>

<p>Java的线程锁是可重入的锁。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">dec</span><span class="o">(-</span><span class="n">n</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">dec</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>一旦线程执行到<code class="language-plaintext highlighter-rouge">add()</code>方法内部，说明它已经获取了当前实例的<code class="language-plaintext highlighter-rouge">this</code>锁。如果传入的<code class="language-plaintext highlighter-rouge">n &lt; 0</code>，将在<code class="language-plaintext highlighter-rouge">add()</code>方法内部调用<code class="language-plaintext highlighter-rouge">dec()</code>方法。由于<code class="language-plaintext highlighter-rouge">dec()</code>方法也需要获取<code class="language-plaintext highlighter-rouge">this</code>锁，那么对同一个线程，能否在获取到锁以后继续获取同一个锁？</p>

<p>答案是肯定的。JVM允许同一个线程重复获取同一个锁，这种能被同一个线程反复获取的锁，就叫做可重入锁。</p>

<p>由于Java的线程锁是可重入锁，所以，获取锁的时候，不但要判断是否是第一次获取，还要记录这是第几次获取。每获取一次锁，记录+1，每退出<code class="language-plaintext highlighter-rouge">synchronized</code>块，记录-1，减到0的时候，才会真正释放锁。</p>

<p><strong>死锁</strong></p>

<p>一个线程可以获取一个锁后，再继续获取另一个锁。例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">synchronized</span><span class="o">(</span><span class="n">lockA</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 获得lockA的锁</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">+=</span> <span class="n">m</span><span class="o">;</span>
        <span class="kd">synchronized</span><span class="o">(</span><span class="n">lockB</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 获得lockB的锁</span>
            <span class="k">this</span><span class="o">.</span><span class="na">another</span> <span class="o">+=</span> <span class="n">m</span><span class="o">;</span>
        <span class="o">}</span> <span class="c1">// 释放lockB的锁</span>
    <span class="o">}</span> <span class="c1">// 释放lockA的锁</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">dec</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">synchronized</span><span class="o">(</span><span class="n">lockB</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 获得lockB的锁</span>
        <span class="k">this</span><span class="o">.</span><span class="na">another</span> <span class="o">-=</span> <span class="n">m</span><span class="o">;</span>
        <span class="kd">synchronized</span><span class="o">(</span><span class="n">lockA</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 获得lockA的锁</span>
            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">-=</span> <span class="n">m</span><span class="o">;</span>
        <span class="o">}</span> <span class="c1">// 释放lockA的锁</span>
    <span class="o">}</span> <span class="c1">// 释放lockB的锁</span>
<span class="o">}</span>
</code></pre></div></div>
<p>在获取多个锁的时候，不同线程获取多个不同对象的锁<strong>可能</strong>导致死锁。对于上述代码，线程1和线程2如果分别执行<code class="language-plaintext highlighter-rouge">add()</code>和<code class="language-plaintext highlighter-rouge">dec()</code>方法时：</p>
<ul>
  <li>线程1：进入<code class="language-plaintext highlighter-rouge">add()</code>，获得<code class="language-plaintext highlighter-rouge">lockA</code>；</li>
  <li>线程2：进入<code class="language-plaintext highlighter-rouge">dec()</code>，获得<code class="language-plaintext highlighter-rouge">lockB</code>。</li>
</ul>

<p>随后：</p>
<ul>
  <li>线程1：准备获得<code class="language-plaintext highlighter-rouge">lockB</code>，失败，等待锁释放中；</li>
  <li>线程2：准备获得<code class="language-plaintext highlighter-rouge">lockA</code>，失败，等待锁释放中。</li>
</ul>

<p>此时，两个线程各自持有不同的锁，然后各自试图获取对方手里的锁，造成了双方无限等待下去，这就是死锁。</p>

<p>死锁发生后，没有任何机制能解除死锁，只能强制结束JVM进程。如何避免死锁呢？答案是：线程获取锁的顺序要一致。<strong>所有</strong>使用一组相同的锁的<strong>线程</strong>，获取锁的顺序要保持一致。</p>

<p>避免死锁的一个有效策略是保持线程获取锁的顺序一致。这样可以避免循环等待条件，从而减少死锁的发生。还有其他一些避免死锁的策略，比如尽量减少锁的持有时间、使用超时机制来获取锁、以及使用锁的层次结构等。</p>

<p>死锁是指两个或多个线程在执行过程中，因争夺资源而造成的一种僵局，若无外力作用，这些线程都将无法继续执行下去。死锁发生必须同时满足以下四个条件，称为死锁的必要条件：</p>

<ol>
  <li><strong>互斥条件（Mutual Exclusion）</strong>：一个资源每次只能被一个线程使用，即在一段时间内某资源只能被一个线程占用。如果此时有其他线程请求该资源，请求线程只能等待。</li>
  <li><strong>请求与保持条件（Hold and Wait）</strong>：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li>
  <li><strong>不可抢占条件（No Preemption）</strong>：已获得的资源在未使用完之前，不能被强行剥夺，只能由持有资源的线程自行释放。</li>
  <li><strong>循环等待条件（Circular Wait）</strong>：若干线程之间形成一种头尾相接的循环等待资源关系。</li>
</ol>

<p>当以上四个条件同时满足时，就会导致死锁的发生。为了避免死锁，可以采用破坏这些条件的方法，如破坏循环等待条件、引入超时机制等。</p>
<h2 id="wait和notify">wait和notify</h2>
<p>在Java程序中，<code class="language-plaintext highlighter-rouge">synchronized</code>解决了多线程竞争的问题。例如，对于一个任务管理器，多个线程同时往队列中添加任务，可以用<code class="language-plaintext highlighter-rouge">synchronized</code>加锁：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TaskQueue</span> <span class="o">{</span>
    <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">addTask</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="nc">String</span> <span class="nf">getTask</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>但是<code class="language-plaintext highlighter-rouge">synchronized</code>并没有解决多线程协调的问题。</p>

<p><code class="language-plaintext highlighter-rouge">getTask()</code>的<code class="language-plaintext highlighter-rouge">while()</code>循环永远不会退出，因为锁没有释放，其他线程根本无法调用<code class="language-plaintext highlighter-rouge">addTask()</code>。实际上代码应该实现以下效果：</p>

<ul>
  <li>线程1可以调用<code class="language-plaintext highlighter-rouge">addTask()</code>不断往队列中添加任务；</li>
  <li>线程2可以调用<code class="language-plaintext highlighter-rouge">getTask()</code>从队列中获取任务。如果队列为空，则<code class="language-plaintext highlighter-rouge">getTask()</code>应该等待，直到队列中至少有一个任务时再返回。</li>
</ul>

<p>多线程协调运行的原则就是：当条件不满足时，线程进入等待状态；当条件满足时，线程被唤醒，继续执行任务。</p>

<p>可以通过调用<code class="language-plaintext highlighter-rouge">wait()</code>方法让线程进入等待状态，调用<code class="language-plaintext highlighter-rouge">wait()</code>方法会一直等待到被其他线程唤醒后才会返回。必须在<code class="language-plaintext highlighter-rouge">synchronized</code>块中才能调用<code class="language-plaintext highlighter-rouge">wait()</code>方法，也只能在锁对象上调用<code class="language-plaintext highlighter-rouge">wait()</code>方法，因为<code class="language-plaintext highlighter-rouge">wait()</code>方法调用时，会<strong>释放线程获得的锁</strong>，<code class="language-plaintext highlighter-rouge">wait()</code>方法返回后，线程又会重新<strong>试图获得之前放弃的锁</strong>。</p>

<p>如何让等待的线程被重新唤醒，然后从<code class="language-plaintext highlighter-rouge">wait()</code>方法返回？答案是在<strong>相同</strong>的锁对象上调用<code class="language-plaintext highlighter-rouge">notify()</code>方法。那么代码修改如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TaskQueue</span><span class="o">();</span>
        <span class="c1">//启动5个获取任务</span>
        <span class="kt">var</span> <span class="n">ts</span> <span class="o">=</span> <span class="n">getThreads</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
        <span class="c1">//添加10个任务，每隔100ms</span>
        <span class="kt">var</span> <span class="n">add</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"添加任务: "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
                <span class="n">q</span><span class="o">.</span><span class="na">addTask</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
                <span class="k">try</span> <span class="o">{</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">_</span><span class="o">)</span> <span class="o">{}</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">add</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">add</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
        <span class="c1">//中断</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">var</span> <span class="n">t</span> <span class="o">:</span> <span class="n">ts</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">t</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Thread</span><span class="o">&gt;</span> <span class="nf">getThreads</span><span class="o">(</span><span class="nc">TaskQueue</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">ts</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Thread</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">getTask</span><span class="o">();</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"，线程："</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">"，执行任务: "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">return</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">});</span>
            <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="n">ts</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">ts</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">TaskQueue</span> <span class="o">{</span>
    <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">addTask</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">notifyAll</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="nc">String</span> <span class="nf">getTask</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>使用<code class="language-plaintext highlighter-rouge">notifyAll()</code>会唤醒<strong>所有</strong>等待该锁的线程，而<code class="language-plaintext highlighter-rouge">notify()</code>只会唤醒其中<strong>一个</strong>线程。在使用<code class="language-plaintext highlighter-rouge">notify()</code>时，如果唤醒的线程不是所期望的线程，那么其他线程可能会一直等待下去，造成资源的浪费和程序性能的下降。因此，通常情况下推荐使用<code class="language-plaintext highlighter-rouge">notifyAll()</code>来确保所有等待线程都有机会被唤醒。</p>

<p><code class="language-plaintext highlighter-rouge">wait()</code>方法返回时需要重新获得<code class="language-plaintext highlighter-rouge">this</code>锁。假设有3个线程被唤醒，唤醒后，首先等待执行<code class="language-plaintext highlighter-rouge">addTask()</code>的线程结束此方法后，才能释放<code class="language-plaintext highlighter-rouge">this</code>锁，随后，这3个线程中只能有一个获取到<code class="language-plaintext highlighter-rouge">this</code>锁，<strong>剩下两个将等待锁释放后继续竞争锁</strong>，竞争成功后开始运行。</p>

<p>如果在<code class="language-plaintext highlighter-rouge">getTask()</code>不是使用<code class="language-plaintext highlighter-rouge">while</code>而是使用<code class="language-plaintext highlighter-rouge">if</code>，则剩下的两个将依次得到锁后直接执行<code class="language-plaintext highlighter-rouge">queue.remove();</code>，而此时队列中已经没有东西了，则会抛出异常，终止此线程。</p>

<p>是<code class="language-plaintext highlighter-rouge">while</code>的话,则剩下的两个依次得到锁后后会再次判断<code class="language-plaintext highlighter-rouge">queue.isEmpty()</code>，如果是则会继续等待。</p>

<p>当然，如果改用<code class="language-plaintext highlighter-rouge">notify()</code>+<code class="language-plaintext highlighter-rouge">if</code>则不会出现问题,因为一次只唤醒一个线程:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TaskQueue</span> <span class="o">{</span>
    <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">addTask</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="nc">String</span> <span class="nf">getTask</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>方法：</strong></p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">wait()</code>：在锁对象上等待，直到其他线程调用该对象的<code class="language-plaintext highlighter-rouge">notify()</code>或<code class="language-plaintext highlighter-rouge">notifyAll()</code>方法唤醒该线程。</li>
  <li><code class="language-plaintext highlighter-rouge">void wait(long timeout)</code>：同<code class="language-plaintext highlighter-rouge">wait()</code>，但如果在指定时间内未收到通知，则当前线程会自动唤醒。</li>
  <li><code class="language-plaintext highlighter-rouge">void wait(long timeout, int nanos)</code>：类似于<code class="language-plaintext highlighter-rouge">wait(long timeout)</code>方法，但还可以指定纳秒级别的超时时间。</li>
  <li><code class="language-plaintext highlighter-rouge">notify()</code>：唤醒在锁对象上等待的单个线程。</li>
  <li><code class="language-plaintext highlighter-rouge">notifyAll()</code>：唤醒在锁对象上等待的所有线程。</li>
</ol>

<h2 id="reentrantlock">ReentrantLock</h2>
<p>从<strong>Java 5</strong>开始，引入了一个高级的处理并发的<code class="language-plaintext highlighter-rouge">java.util.concurrent</code>包，它提供了大量更高级的并发功能，能大大简化多线程程序的编写。</p>

<p>Java提供了<code class="language-plaintext highlighter-rouge">synchronized</code>关键字用于加锁，但这种锁一是很重，二是获取时必须一直等待，没有额外的尝试机制。</p>

<p><code class="language-plaintext highlighter-rouge">java.util.concurrent.locks</code>包提供的<code class="language-plaintext highlighter-rouge">ReentrantLock</code>用于替代<code class="language-plaintext highlighter-rouge">synchronized</code>加锁。对比：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>如果用<code class="language-plaintext highlighter-rouge">ReentrantLock</code>替代，可以把代码改造为：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">synchronized</code>是Java语言层面提供的语法，所以不需要考虑异常。而<code class="language-plaintext highlighter-rouge">ReentrantLock</code>是Java代码实现的锁，<strong>就必须先获取锁，然后在<code class="language-plaintext highlighter-rouge">finally</code>中正确释放锁</strong>。</p>

<p>顾名思义，<code class="language-plaintext highlighter-rouge">ReentrantLock</code>是可重入锁，它和<code class="language-plaintext highlighter-rouge">synchronized</code>一样，一个线程可以多次获取同一个锁。</p>

<p>和<code class="language-plaintext highlighter-rouge">synchronized</code>不同的是，<code class="language-plaintext highlighter-rouge">ReentrantLock</code>可以<strong>尝试获取锁</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">lock</span><span class="o">.</span><span class="na">tryLock</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">))</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>上述代码在尝试获取锁的时候，最多等待1秒。如果1秒后仍未获取到锁，<code class="language-plaintext highlighter-rouge">tryLock()</code>返回<code class="language-plaintext highlighter-rouge">false</code>，程序就可以做一些额外处理，而不是无限等待下去。</p>

<p>所以，使用<code class="language-plaintext highlighter-rouge">ReentrantLock</code>比直接使用<code class="language-plaintext highlighter-rouge">synchronized</code>更安全，线程在<code class="language-plaintext highlighter-rouge">tryLock()</code>失败的时候不会导致死锁。</p>

<p><code class="language-plaintext highlighter-rouge">tryLock()</code>:尝试获取锁，如果锁当前是空闲的，则获取锁并立即返回<code class="language-plaintext highlighter-rouge">true</code>；如果锁不可用，则立即返回<code class="language-plaintext highlighter-rouge">false</code>，而不会等待。下面是一个典型的使用示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="o">...;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">lock</span><span class="o">.</span><span class="na">tryLock</span><span class="o">())</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// 操作受保护的状态</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="c1">// 执行备选操作</span>
<span class="o">}</span>
</code></pre></div></div>
<p>这种用法确保如果成功获取了锁，则在最后释放锁，如果没有获取到锁，则不会尝试释放锁。<code class="language-plaintext highlighter-rouge">tryLock()</code>方法的返回值为<code class="language-plaintext highlighter-rouge">true</code>表示成功获取锁，为<code class="language-plaintext highlighter-rouge">false</code>表示未能获取锁。</p>

<p><code class="language-plaintext highlighter-rouge">tryLock(long time, TimeUnit unit)</code>这个方法尝试在给定的等待时间内获取锁，如果锁当前是空闲的，则获取锁并立即返回<code class="language-plaintext highlighter-rouge">true</code>；如果锁不可用，则当前线程将被禁用以进行线程调度，并且处于计时等待状态，直到以下三种情况发生之一：</p>

<ol>
  <li>当前线程成功获取了锁；</li>
  <li>其他某个线程中断了当前线程，且支持锁获取时中断；</li>
  <li>指定的等待时间过去了。</li>
</ol>

<p>如果成功获取了锁，则返回<code class="language-plaintext highlighter-rouge">true</code>。</p>

<p>如果在方法调用前当前线程的中断状态被设置，或者在获取锁的过程中被中断，且支持锁获取时中断，则会抛出<code class="language-plaintext highlighter-rouge">InterruptedException</code>异常，并且会清除当前线程的中断状态。</p>

<p>如果指定的等待时间过去了但没有获取到锁，则返回<code class="language-plaintext highlighter-rouge">false</code>。如果指定的等待时间小于或等于零，则方法不会等待。</p>

<p>实现注意事项：</p>

<ol>
  <li>在某些情况下，锁的获取可能无法被中断，或者中断锁获取可能是一项昂贵的操作。这提醒开发者在使用锁时要注意这一点，避免过度依赖锁的中断操作。</li>
  <li>会优先响应中断，而不是正常方法返回，或者报告超时。</li>
  <li>锁的实现可能会检测到一些错误使用情况，比如可能导致死锁的调用，这种情况下锁可能会抛出异常。开发者需要了解这些情况并遵循实现的文档说明，以避免出现异常情况。</li>
</ol>

<p>参数：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">time</code> - 等待获取锁的最长时间</li>
  <li><code class="language-plaintext highlighter-rouge">unit</code> - <code class="language-plaintext highlighter-rouge">time</code> 参数的时间单位</li>
</ul>

<p>返回值：</p>
<ul>
  <li>如果获取了锁则返回<code class="language-plaintext highlighter-rouge">true</code>，如果等待时间过去了但没有获取到锁则返回<code class="language-plaintext highlighter-rouge">false</code></li>
</ul>

<p>抛出：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">InterruptedException</code> - 如果当前线程在获取锁时被中断（且支持锁获取时中断）</li>
</ul>

<hr />

<p><strong>方法：</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">lock()</code>: 获取锁。如果锁不可用，当前线程将被阻塞，直到获取到锁为止。</li>
  <li><code class="language-plaintext highlighter-rouge">lockInterruptibly()</code>: 获取锁，但是可以响应中断。如果锁不可用，当前线程将被阻塞，直到获取到锁或者被中断为止。</li>
  <li><code class="language-plaintext highlighter-rouge">tryLock()</code>: 尝试获取锁，如果锁可用立即返回<code class="language-plaintext highlighter-rouge">true</code>，否则返回<code class="language-plaintext highlighter-rouge">false</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">tryLock(long timeout, TimeUnit unit)</code>: 在指定的时间内尝试获取锁。如果在指定时间内获取到了锁，返回<code class="language-plaintext highlighter-rouge">true</code>，否则返回<code class="language-plaintext highlighter-rouge">false</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">unlock()</code>: 释放锁。</li>
  <li><code class="language-plaintext highlighter-rouge">getHoldCount()</code>: 返回当前线程持有此锁的次数。</li>
  <li><code class="language-plaintext highlighter-rouge">getQueueLength()</code>: 返回等待获取此锁的线程估计数。</li>
  <li><code class="language-plaintext highlighter-rouge">hasQueuedThreads()</code>: 查询是否有线程正在等待获取此锁。</li>
  <li><code class="language-plaintext highlighter-rouge">isFair()</code>: 查询是否是公平锁。</li>
  <li><code class="language-plaintext highlighter-rouge">isHeldByCurrentThread()</code>: 查询当前线程是否持有此锁。</li>
  <li><code class="language-plaintext highlighter-rouge">isLocked()</code>: 查询此锁是否被任意线程持有。</li>
  <li><code class="language-plaintext highlighter-rouge">Condition newCondition()</code>：创建一个绑定到此锁实例的新<code class="language-plaintext highlighter-rouge">Condition</code>实例，用于线程间通信。</li>
</ul>

<h2 id="condition">Condition</h2>
<p>使用<code class="language-plaintext highlighter-rouge">ReentrantLock</code>比直接使用<code class="language-plaintext highlighter-rouge">synchronized</code>更安全，可以替代<code class="language-plaintext highlighter-rouge">synchronized</code>进行线程同步。</p>

<p>但是<code class="language-plaintext highlighter-rouge">synchronized</code>可以配合<code class="language-plaintext highlighter-rouge">wait</code>和<code class="language-plaintext highlighter-rouge">notify</code>实现线程在条件不满足时等待，条件满足时唤醒，用<code class="language-plaintext highlighter-rouge">ReentrantLock</code>怎么编写<code class="language-plaintext highlighter-rouge">wait</code>和<code class="language-plaintext highlighter-rouge">notify</code>的功能呢？</p>

<p>答案是使用<code class="language-plaintext highlighter-rouge">Condition</code>对象来实现<code class="language-plaintext highlighter-rouge">wait</code>和<code class="language-plaintext highlighter-rouge">notify</code>的功能。</p>

<p>仍然以<code class="language-plaintext highlighter-rouge">TaskQueue</code>为例，把前面用<code class="language-plaintext highlighter-rouge">synchronized</code>实现的功能通过<code class="language-plaintext highlighter-rouge">ReentrantLock</code>和<code class="language-plaintext highlighter-rouge">Condition</code>来实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TaskQueue</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Condition</span> <span class="n">condition</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addTask</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="c1">// 可以替换为LockSupport.unpark(Thread.currentThread());</span>
            <span class="n">condition</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span><span class="c1">//唤醒一个</span>
            <span class="n">condition</span><span class="o">.</span><span class="na">signalAll</span><span class="o">();</span><span class="c1">//唤醒全部</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTask</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="c1">// 可以替换为LockSupport.park()</span>
                <span class="n">condition</span><span class="o">.</span><span class="na">await</span><span class="o">();</span><span class="c1">//等待</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>使用<code class="language-plaintext highlighter-rouge">Condition</code>时，引用的<code class="language-plaintext highlighter-rouge">Condition</code>对象必须从<code class="language-plaintext highlighter-rouge">Lock</code>实例的<code class="language-plaintext highlighter-rouge">newCondition()</code>返回，这样才能获得一个绑定了<code class="language-plaintext highlighter-rouge">Lock</code>实例的<code class="language-plaintext highlighter-rouge">Condition</code>实例。</p>

<p><code class="language-plaintext highlighter-rouge">Condition</code>提供的<code class="language-plaintext highlighter-rouge">await()</code>、<code class="language-plaintext highlighter-rouge">signal()</code>、<code class="language-plaintext highlighter-rouge">signalAll()</code>原理和<code class="language-plaintext highlighter-rouge">synchronized</code>锁对象的<code class="language-plaintext highlighter-rouge">wait()</code>、<code class="language-plaintext highlighter-rouge">notify()</code>、<code class="language-plaintext highlighter-rouge">notifyAll()</code>是一致的，并且其行为也是一样的：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">await()</code>会释放当前锁，进入等待状态；</li>
  <li><code class="language-plaintext highlighter-rouge">awaitUninterruptibly()</code>: 与<code class="language-plaintext highlighter-rouge">await()</code>类似，但不会响应中断。</li>
  <li><code class="language-plaintext highlighter-rouge">long awaitNanos(long nanosTimeout)</code>：类似于<code class="language-plaintext highlighter-rouge">await()</code>，但最多等待指定的纳秒数。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean await(long time, TimeUnit unit)</code>：类似于<code class="language-plaintext highlighter-rouge">await()</code>，但最多等待指定的时间。</li>
  <li><code class="language-plaintext highlighter-rouge">signal()</code>会唤醒某个等待线程；</li>
  <li><code class="language-plaintext highlighter-rouge">signalAll()</code>会唤醒所有等待线程；</li>
  <li>唤醒线程从<code class="language-plaintext highlighter-rouge">await()</code>返回一样需要重新获得之前放弃的锁。</li>
</ul>

<p>和<code class="language-plaintext highlighter-rouge">tryLock()</code>类似，<code class="language-plaintext highlighter-rouge">await()</code>可以在等待指定时间后，如果还没有被其他线程通过<code class="language-plaintext highlighter-rouge">signal()</code>或<code class="language-plaintext highlighter-rouge">signalAll()</code>唤醒，可以自己醒来：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">.</span><span class="na">await</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECOND</span><span class="o">))</span> <span class="o">{</span>
    <span class="c1">// 被其他线程唤醒</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="c1">// 指定时间内没有被其他线程唤醒</span>
<span class="o">}</span>
</code></pre></div></div>
<p>可见，使用<code class="language-plaintext highlighter-rouge">Condition</code>配合<code class="language-plaintext highlighter-rouge">Lock</code>，可以实现更灵活的线程同步。</p>

<p><strong>注意<code class="language-plaintext highlighter-rouge">lock.newCondition();</code>每次都返回一个新的<code class="language-plaintext highlighter-rouge">Condition</code></strong>，这样写就不在一个频道了，肯定无法唤醒：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TaskQueue</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Condition</span> <span class="n">condition</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Condition</span> <span class="n">condition2</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addTask</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="n">condition</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span><span class="c1">//唤醒一个</span>
            <span class="n">condition</span><span class="o">.</span><span class="na">signalAll</span><span class="o">();</span><span class="c1">//唤醒全部</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTask</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">condition2</span><span class="o">.</span><span class="na">await</span><span class="o">();</span><span class="c1">//等待</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">condition</code>和<code class="language-plaintext highlighter-rouge">condition2</code>是两个独立的条件对象，它们可以分别用于不同的线程等待和唤醒操作。这样可以<strong>更精细地控制线程的等待和唤醒逻辑</strong>，确保线程在正确的条件下被唤醒。通过使用不同的<code class="language-plaintext highlighter-rouge">Condition</code>对象，可以更好地组织和管理线程的等待和唤醒操作，提高多线程程序的效率和可维护性。</p>
<h2 id="readwritelock">ReadWriteLock</h2>
<p><code class="language-plaintext highlighter-rouge">ReentrantLock</code>保证了只有一个线程可以执行临界区代码。</p>

<p>但是有些时候，这种保护有点过头。任何时刻，只允许一个线程修改，但是读取也被限制为一个线程了。</p>

<p>实际上我们想要的是：允许多个线程同时读，但只要有一个线程在写，其他线程就必须等待。</p>

<p>使用<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>可以解决这个问题，它保证：</p>

<ul>
  <li>只允许一个线程写入（其他线程既不能写入也不能读取）；</li>
  <li>没有写入时，多个线程允许同时读（提高性能）。</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">ReadWriteLock</code>并不是写优先于读，它只是提供了更灵活的读写锁机制，允许多个线程同时读取数据，但只允许一个线程写入数据。</p>

<ol>
  <li>多个线程可以同时获取读锁（共享锁），以便同时读取共享资源，这样可以提高并发性能。</li>
  <li>写锁是排它的，即只有一个线程可以获取写锁，当有线程持有写锁时，<strong>其他线程无法获取读锁或写锁</strong>。</li>
</ol>

<hr />

<p>当有多个读线程持有读锁时，写线程必须等待<strong>所有的线程释放弃读锁</strong>后才能获取写锁。这保证了在写操作进行时，不会有任何其他线程持有读锁，从而确保了写操作的<strong>独占性</strong>，避免了写操作和读操作的并发冲突，从而保证了数据的一致性和正确性。</p>

<p>当<strong>申请写锁</strong>的时候，如果当前有若干取得读锁正在读的线程，那么就<strong>不允许后续准备申请读锁的线程去拿读锁了</strong>，这时会等到当前读锁全部释放后，拿到写锁。这么做是防止如果写锁没有高优先级，在大量线程不停读的情况下，写不进去。</p>

<p>一般来说<strong>写锁</strong>的优先级要<strong>高于读锁</strong>，假定读很多几乎不会间断，如果突然来个写锁，那么只需等当前正在读的释放读锁后，写就立刻获得写锁，其它后续读都得等，不然你想，在一直都有读的情况下，永远写不了。</p>

<p>通过读写锁的机制，写锁在请求时会阻塞后续的读锁请求，直到写锁被获取并完成写操作。这种机制确保了写操作的优先级，避免了写锁长时间等待的情况，从而防止了写锁被饿死的情况发生。</p>

<hr />

<p>用<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>实现这个功能十分容易。需要创建一个<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>实例，然后分别获取读锁和写锁：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ReadWriteLock</span> <span class="n">rwlock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantReadWriteLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">rlock</span> <span class="o">=</span> <span class="n">rwlock</span><span class="o">.</span><span class="na">readLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">wlock</span> <span class="o">=</span> <span class="n">rwlock</span><span class="o">.</span><span class="na">writeLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">counts</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">inc</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">wlock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span> <span class="c1">// 加写锁</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">counts</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">wlock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span> <span class="c1">// 释放写锁</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">rlock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span> <span class="c1">// 加读锁</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">counts</span><span class="o">,</span> <span class="n">counts</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">rlock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span> <span class="c1">// 释放读锁</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>把读写操作分别用读锁和写锁来加锁，在读取时，多个线程可以同时获得读锁，这样就大大提高了并发读的执行效率。</p>

<p>使用<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>时，适用条件是同一个数据，有大量线程读取，但仅有少数线程修改。</p>

<p>例如，一个论坛的帖子，回复可以看做写入操作，它是不频繁的，但是，浏览可以看做读取操作，是非常频繁的，这种情况就可以使用<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>。</p>

<p>测试一下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.Lock</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReadWriteLock</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantReadWriteLock</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Point</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">();</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="c1">// 超出出后停止</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">y</span><span class="o">&lt;</span><span class="mi">100000000</span><span class="o">;</span><span class="n">x</span><span class="o">++,</span><span class="n">y</span><span class="o">++){</span>
                <span class="n">point</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="nc">Thread</span> <span class="n">thread2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="c1">// 线程thread执行完后关闭</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">()){</span>
                <span class="kt">int</span><span class="o">[]</span> <span class="n">ints</span><span class="o">;</span>
                <span class="n">ints</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">ints</span><span class="o">[</span><span class="mi">0</span><span class="o">]-</span><span class="n">ints</span><span class="o">[</span><span class="mi">1</span><span class="o">]!=-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"x="</span><span class="o">+</span><span class="n">ints</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="s">",y="</span><span class="o">+</span><span class="n">ints</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">))</span> <span class="o">{</span>
                        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stringIntegerEntry</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">stringIntegerEntry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="nc">Integer</span> <span class="n">value</span> <span class="o">=</span> <span class="n">stringIntegerEntry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="n">count</span><span class="o">+=</span><span class="n">value</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">+</span><span class="s">",count:"</span><span class="o">+</span><span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"一共"</span><span class="o">+</span><span class="n">count</span><span class="o">+</span><span class="s">"条同步问题"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"耗时："</span><span class="o">+(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()-</span><span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ReadWriteLock</span> <span class="n">reentrantLock</span><span class="o">=</span><span class="k">new</span> <span class="nc">ReentrantReadWriteLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">w</span><span class="o">=</span><span class="n">reentrantLock</span><span class="o">.</span><span class="na">writeLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">r</span><span class="o">=</span><span class="n">reentrantLock</span><span class="o">.</span><span class="na">readLock</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">w</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">w</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="n">r</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">r</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>耗时7000ms，不使用锁：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">ps</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">};</span>
        <span class="k">this</span><span class="o">.</span><span class="na">ps</span> <span class="o">=</span> <span class="n">ps</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">ps</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>耗时1600ms。</p>

<hr />

<p><strong>构造方法</strong>：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ReentrantReadWriteLock()</code>：创建一个新的<code class="language-plaintext highlighter-rouge">ReentrantReadWriteLock</code>实例。这个实例包含一个读锁和一个写锁。</li>
  <li><code class="language-plaintext highlighter-rouge">ReentrantReadWriteLock(boolean fair)</code>：创建一个新的<code class="language-plaintext highlighter-rouge">ReentrantReadWriteLock</code>实例，可以选择是否公平地管理获取锁的顺序。如果<code class="language-plaintext highlighter-rouge">fair</code>为<code class="language-plaintext highlighter-rouge">true</code>，则表示使用公平的策略；如果<code class="language-plaintext highlighter-rouge">fair</code>为<code class="language-plaintext highlighter-rouge">false</code>，则表示使用非公平的策略。</li>
</ol>

<p><strong><code class="language-plaintext highlighter-rouge">ReentrantReadWriteLock</code>是一个支持类似于<code class="language-plaintext highlighter-rouge">ReentrantLock</code>的语义的<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>实现。它具有以下特性：</strong></p>

<ul>
  <li><strong>获取顺序</strong>：该类不强制要求读取器或写入器优先顺序。但是，它支持一个可选的公平性策略。
    <ul>
      <li><strong>非公平模式（默认）</strong>：当以非公平模式（默认）构造时，对读锁和写锁的进入顺序是未指定的，但受到重入约束的限制。一个连续争用的非公平锁可能会无限期地延迟一个或多个读取器或写入器线程，但通常具有比公平锁更高的吞吐量。</li>
      <li><strong>公平模式</strong>：当以公平模式构造时，线程按照近似到达顺序的策略竞争进入。当当前持有锁被释放时，要么最长等待的单个写入器线程将被分配写入锁，要么如果有一组读取器线程等待时间比所有等待的写入器线程都长，则该组将被分配读取锁。</li>
    </ul>
  </li>
  <li><strong>重入性</strong>：此锁允许读取器和写入器以类似于<code class="language-plaintext highlighter-rouge">ReentrantLock</code>的方式重新获取读取或写入锁。直到写入线程持有的所有写入锁都被释放前，都不允许其他线程获取读锁。</li>
  <li><strong>锁降级</strong>：通过获取写锁，然后获取读锁，然后释放写锁，可以将写锁降级为读锁。但是，不能从读锁升级为写锁。</li>
  <li><strong>锁获取中断</strong>：读锁和写锁都支持在获取锁时中断。</li>
  <li><strong>条件支持</strong>：写锁提供了一个<code class="language-plaintext highlighter-rouge">Condition</code>实现，行为与<code class="language-plaintext highlighter-rouge">ReentrantLock</code>提供的<code class="language-plaintext highlighter-rouge">Condition</code>实现对于<code class="language-plaintext highlighter-rouge">ReentrantLock</code>一样。当然，这个<code class="language-plaintext highlighter-rouge">Condition</code><strong>只能与写锁一起使用</strong>。读锁不支持<code class="language-plaintext highlighter-rouge">Condition</code>，<code class="language-plaintext highlighter-rouge">readLock().newCondition()</code>会抛出<code class="language-plaintext highlighter-rouge">UnsupportedOperationException</code>异常。</li>
  <li><strong>仪表化</strong>：这个类支持用于确定锁是否被持有或争用的方法。这些方法设计用于监视系统状态，而不是用于同步控制。</li>
</ul>

<h2 id="stampedlock">StampedLock</h2>
<p><code class="language-plaintext highlighter-rouge">ReadWriteLock</code>可以解决多线程同时读，但只有一个线程能写的问题。</p>

<p><code class="language-plaintext highlighter-rouge">ReadWriteLock</code>有个潜在的问题：如果有线程正在读，写线程需要等待读线程释放锁后才能获取写锁，即读的过程中不允许写，这是一种<strong>悲观的读锁</strong>。</p>

<p>要进一步提升并发执行效率，<strong>Java 8</strong>引入了新的读写锁：<code class="language-plaintext highlighter-rouge">StampedLock</code>。</p>

<p><code class="language-plaintext highlighter-rouge">StampedLock</code>和<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>相比，改进之处在于：读的过程中也允许获取写锁后写入！这样一来，我们读的数据就可能不一致，所以，需要一点额外的代码来判断读的过程中是否有写入，这种读锁是一种<strong>乐观锁</strong>。</p>

<p>乐观锁的意思就是乐观地估计读的过程中大概率不会有写入，因此被称为乐观锁。反过来，悲观锁则是读的过程中拒绝有写入，也就是写入必须等待。显然乐观锁的并发效率更高，但一旦有小概率的写入导致读取的数据不一致，需要能检测出来，再读一遍就行。</p>

<p><strong>乐观锁不会上锁</strong>，在获得乐观锁时会得到一个版本号，然后在读数据操作完毕后，再次检查版本号，如果不匹配，则表示数据已经被其他线程修改过，需要进行相应的处理（例如回滚或重新尝试更新）。乐观锁省去了加锁的步骤，减少了锁竞争，但需要额外的代码，处理数据冲突的情况。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">StampedLock</span> <span class="n">stampedLock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StampedLock</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="n">stampedLock</span><span class="o">.</span><span class="na">writeLock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">stampedLock</span><span class="o">.</span><span class="na">unlockWrite</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="c1">// 获得一个乐观读锁</span>
        <span class="kt">long</span> <span class="n">stamp</span> <span class="o">=</span> <span class="n">stampedLock</span><span class="o">.</span><span class="na">tryOptimisticRead</span><span class="o">();</span> 
        <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="c1">// 验证</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">stampedLock</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">stamp</span><span class="o">)){</span>
            <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="n">stampedLock</span><span class="o">.</span><span class="na">readLock</span><span class="o">();</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
                <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                <span class="n">stampedLock</span><span class="o">.</span><span class="na">unlockRead</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>和<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>相比，写入的加锁是完全一样的，不同的是读取。</p>

<p>首先通过<code class="language-plaintext highlighter-rouge">tryOptimisticRead()</code>获取一个乐观读锁，并返回版本号。</p>

<p>接着进行读取，读取完成后，通过<code class="language-plaintext highlighter-rouge">validate()</code>去验证版本号，如果在读取过程中<strong>没有写入</strong>，版本号不变，<strong>验证成功</strong>，就可以放心地继续后续操作。如果在读取过程中有写入，版本号会发生变化，<strong>验证失败</strong>。在失败的时候，再通过获取悲观读锁再次读取。</p>

<p><code class="language-plaintext highlighter-rouge">StampedLock</code>每次读写会记录时间戳， 尝试乐观读<code class="language-plaintext highlighter-rouge">tryOptimisticRead</code>后，通过<code class="language-plaintext highlighter-rouge">validate</code>确认是否有更新的<strong>写操作时间戳</strong>，有则加普通读锁重读。而<code class="language-plaintext highlighter-rouge">ReadWriteLock</code> 相比<code class="language-plaintext highlighter-rouge">StampedLock</code>，少了一个尝试读的过程和记录、比较时间戳的操作。</p>

<p>在<code class="language-plaintext highlighter-rouge">StampedLock</code>中，<code class="language-plaintext highlighter-rouge">unlock</code>方法用于释放读锁或写锁。如果持有的是读锁，应该使用<code class="language-plaintext highlighter-rouge">unlockRead</code>方法释放；如果持有的是写锁，应该使用<code class="language-plaintext highlighter-rouge">unlockWrite</code>方法释放。这两个方法都需要传入获取锁时返回的<code class="language-plaintext highlighter-rouge">stamp</code>作为参数。</p>

<p>另外，如果尝试获取乐观读锁（<code class="language-plaintext highlighter-rouge">tryOptimisticRead</code>）成功，后续需要使用<code class="language-plaintext highlighter-rouge">validate</code>方法验证乐观读锁的<code class="language-plaintext highlighter-rouge">stamp</code>是否仍然有效，如果无效则需要重新尝试获取乐观读锁或者进行其他处理，但并<strong>不需要显式释放</strong>乐观读锁。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">StampedLock</code>把读锁细分为乐观读和悲观读，能进一步提升并发效率。但这也是有代价的：一是代码更加复杂，二是<code class="language-plaintext highlighter-rouge">StampedLock</code>中的<strong>写锁（write lock）是不可重入的</strong>，这意味着如果一个线程已经持有写锁，再次尝试获取写锁会导致死锁。</p>

<p>读锁（read lock）是<strong>可重入</strong>的，同一个线程可以多次获取读锁而不会导致死锁。这种设计在一定程度上降低了使用<code class="language-plaintext highlighter-rouge">StampedLock</code>时出现死锁的可能性。</p>

<p>Java 对于 <code class="language-plaintext highlighter-rouge">ReadWriteLock</code> 的读锁的抢锁的策略做了限制，当阻塞队列中第一个线程是一个写线程的时候，那读锁就不会参与抢锁，而是直接阻塞，这在一定程度上解决了写锁饿死的问题，JDK8 中的 <code class="language-plaintext highlighter-rouge">StampedLock</code> 进一步解决了写锁被读锁阻塞的问题，在乐观锁的读锁状态下，写锁可以直接进行获取锁，不用进行抢锁，而且 <code class="language-plaintext highlighter-rouge">StampLock</code> 对于抢锁失败阻塞造成频繁的上下文切换也进行了优化，线程在抢锁时（底层使用 CAS 实现）如果失败不会直接阻塞，而是通过自旋不断尝试获取锁，直到尝试次数达到上限（单核CPU为0，多核为2^16）才会进行阻塞，等待被唤醒，唤醒后依旧进行自旋，如果依旧无法获得锁，那么再阻塞等待被唤醒。</p>

<p><code class="language-plaintext highlighter-rouge">StampedLock</code>还提供了更复杂的将悲观读锁升级为写锁的功能，它主要使用在if-then-update的场景：即先读，如果读的数据满足条件，就返回，如果读的数据不满足条件，再尝试写。</p>

<p><code class="language-plaintext highlighter-rouge">StampedLock</code> 支持在三种模式之间有条件地提供转换的方法。</p>

<p>例如，方法<code class="language-plaintext highlighter-rouge">tryConvertToWriteLock(long)</code>尝试“升级”模式，如果已在写入模式中或在读取模式中且没有其他读取者或在乐观模式中且锁可用，则返回有效的写标记。</p>

<p><code class="language-plaintext highlighter-rouge">StampedLocks</code> 是可序列化的，<strong>但反序列化始终为初始解锁状态</strong>，因此对于远程锁定而言并不实用。</p>

<p><strong><code class="language-plaintext highlighter-rouge">StampedLock</code>与<code class="language-plaintext highlighter-rouge">ReadWriteLock</code>不同的方法主要包括以下几种：</strong></p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">tryOptimisticRead()</code>：尝试获取乐观读锁，如果当前没有写锁被持有，则返回一个非零的标记，否则返回零。</li>
  <li><code class="language-plaintext highlighter-rouge">validate(long)</code>：验证乐观读锁的标记是否仍然有效，即是否有写操作发生。如果在获取乐观读锁后没有写操作，则返回true，否则返回false。</li>
  <li><code class="language-plaintext highlighter-rouge">tryConvertToWriteLock(long)</code>：尝试将乐观读锁转换为写锁。如果当前没有其他线程持有写锁，并且没有其他读锁存在，则可以成功转换，返回一个有效的写锁标记，否则返回零。</li>
  <li><code class="language-plaintext highlighter-rouge">tryConvertToReadLock(long)</code>：尝试将写锁转换为读锁。如果当前没有其他线程持有写锁，并且没有其他读锁存在，则可以成功转换，返回一个有效的读锁标记，否则返回零。</li>
  <li><code class="language-plaintext highlighter-rouge">tryConvertToOptimisticRead(long)</code>：尝试将写锁或读锁转换为乐观读锁。如果当前没有其他线程持有写锁，则可以成功转换，返回一个有效的乐观读锁标记，否则返回零。</li>
</ol>

<p><strong>测试：</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.locks.StampedLock</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Point</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">();</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="c1">// 超出出后停止</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">y</span><span class="o">&lt;</span><span class="mi">100000000</span><span class="o">;</span><span class="n">x</span><span class="o">++,</span><span class="n">y</span><span class="o">++){</span>
                <span class="n">point</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="nc">Thread</span> <span class="n">thread2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()-&gt;{</span>
            <span class="c1">// 线程thread执行完后关闭</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">thread</span><span class="o">.</span><span class="na">isAlive</span><span class="o">()){</span>
                <span class="kt">int</span><span class="o">[]</span> <span class="n">ints</span><span class="o">;</span>
                <span class="n">ints</span> <span class="o">=</span> <span class="n">point</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">ints</span><span class="o">[</span><span class="mi">0</span><span class="o">]-</span><span class="n">ints</span><span class="o">[</span><span class="mi">1</span><span class="o">]!=-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="nc">String</span> <span class="n">s</span><span class="o">=</span><span class="s">"x="</span><span class="o">+</span><span class="n">ints</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="s">",y="</span><span class="o">+</span><span class="n">ints</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">))</span> <span class="o">{</span>
                        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">)+</span><span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="n">thread</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stringIntegerEntry</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">stringIntegerEntry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="nc">Integer</span> <span class="n">value</span> <span class="o">=</span> <span class="n">stringIntegerEntry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="n">count</span><span class="o">+=</span><span class="n">value</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">+</span><span class="s">",count:"</span><span class="o">+</span><span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"一共"</span><span class="o">+</span><span class="n">count</span><span class="o">+</span><span class="s">"条同步问题"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"耗时："</span><span class="o">+(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()-</span><span class="n">start</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"乐观：%d,悲观转换写：%d,悲观写：%d,乐观占比：%s%n"</span><span class="o">,</span> <span class="n">point</span><span class="o">.</span><span class="na">he</span><span class="o">,</span> <span class="n">point</span><span class="o">.</span><span class="na">be1</span><span class="o">,</span> <span class="n">point</span><span class="o">.</span><span class="na">be2</span><span class="o">,</span> <span class="n">point</span><span class="o">.</span><span class="na">he</span> <span class="o">/</span> <span class="o">(</span><span class="n">point</span><span class="o">.</span><span class="na">be1</span> <span class="o">+</span> <span class="n">point</span><span class="o">.</span><span class="na">be2</span> <span class="o">+</span> <span class="n">point</span><span class="o">.</span><span class="na">he</span> <span class="o">+</span> <span class="mf">0.0</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">StampedLock</span> <span class="n">stampedLock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StampedLock</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">he</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">be1</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">be2</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="n">stampedLock</span><span class="o">.</span><span class="na">writeLock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">stampedLock</span><span class="o">.</span><span class="na">unlockWrite</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">get</span><span class="o">(){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="kt">long</span> <span class="n">stamp</span> <span class="o">=</span> <span class="n">stampedLock</span><span class="o">.</span><span class="na">tryOptimisticRead</span><span class="o">();</span> <span class="c1">// 获得一个乐观读锁</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">stampedLock</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">stamp</span><span class="o">)){</span>
            <span class="c1">// 如果不一致，则回写为旧数据，尝试转换为写锁</span>
            <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="n">stampedLock</span><span class="o">.</span><span class="na">tryConvertToWriteLock</span><span class="o">(</span><span class="n">stamp</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">l</span><span class="o">!=</span><span class="mi">0</span><span class="o">){</span>
                <span class="n">be1</span><span class="o">++;</span>
                <span class="k">this</span><span class="o">.</span><span class="na">x</span><span class="o">=</span><span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
                <span class="k">this</span><span class="o">.</span><span class="na">y</span><span class="o">=</span><span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
                <span class="n">stampedLock</span><span class="o">.</span><span class="na">unlockWrite</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
            <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                <span class="c1">//转换失败，获取写锁</span>
                <span class="kt">long</span> <span class="n">l1</span> <span class="o">=</span> <span class="n">stampedLock</span><span class="o">.</span><span class="na">writeLock</span><span class="o">();</span>
                <span class="n">be2</span><span class="o">++;</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">copy</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
                    <span class="n">copy</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                    <span class="n">stampedLock</span><span class="o">.</span><span class="na">unlockWrite</span><span class="o">(</span><span class="n">l1</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">he</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>一共0条同步问题
耗时：7238
乐观：594759493,悲观转换写：0,悲观写：8128226,乐观占比：0.986517844461184
</code></pre></div></div>
<p>挺有用的。</p>
<h2 id="semaphore">Semaphore</h2>
<p>各种锁的实现，本质上锁的目的是保护一种受限资源，保证同一时刻只有一个线程能访问（ReentrantLock），或者只有一个线程能写入（ReadWriteLock）。</p>

<p>还有一种受限资源，它需要保证同一时刻最多有N个线程能访问，比如同一时刻最多创建100个数据库连接，最多允许10个用户下载等。</p>

<p>这种限制数量的锁，如果用Lock数组来实现，就太麻烦了。</p>

<p>这种情况就可以使用<code class="language-plaintext highlighter-rouge">Semaphore</code>，例如，最多允许3个线程同时访问：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccessLimitControl</span> <span class="o">{</span>
    <span class="c1">// 任意时刻仅允许最多3个线程获取许可:</span>
    <span class="kd">final</span> <span class="nc">Semaphore</span> <span class="n">semaphore</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Semaphore</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">access</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 如果超过了许可数量,其他线程将在此等待:</span>
        <span class="n">semaphore</span><span class="o">.</span><span class="na">acquire</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// TODO:</span>
            <span class="k">return</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">semaphore</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>使用<code class="language-plaintext highlighter-rouge">Semaphore</code>先调用<code class="language-plaintext highlighter-rouge">acquire()</code>获取，然后通过<code class="language-plaintext highlighter-rouge">try ... finally</code>保证在<code class="language-plaintext highlighter-rouge">finally</code>中使用<code class="language-plaintext highlighter-rouge">release()</code>释放。</p>

<p>调用<code class="language-plaintext highlighter-rouge">acquire()</code>可能会进入等待，直到满足条件为止。也可以使用<code class="language-plaintext highlighter-rouge">tryAcquire()</code>指定等待时间：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">semaphore</span><span class="o">.</span><span class="na">tryAcquire</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">))</span> <span class="o">{</span>
    <span class="c1">// 指定等待时间3秒内获取到许可:</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">semaphore</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">Semaphore</code>本质上就是一个信号计数器，用于限制同一时间的最大访问数量。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">Semaphore</code>类提供了以下几个常用的方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">acquire()</code>: 获取一个许可，如果没有许可可用，则阻塞直到有许可可用为止。</li>
  <li><code class="language-plaintext highlighter-rouge">release()</code>: 释放一个许可，将其返回给信号量。</li>
  <li><code class="language-plaintext highlighter-rouge">tryAcquire()</code>: 尝试获取一个许可，如果成功则返回<code class="language-plaintext highlighter-rouge">true</code>，否则立即返回<code class="language-plaintext highlighter-rouge">false</code>，不会阻塞。</li>
  <li><code class="language-plaintext highlighter-rouge">tryAcquire(long timeout, TimeUnit unit)</code>: 尝试获取一个许可，如果在指定的时间内成功获取许可则返回<code class="language-plaintext highlighter-rouge">true</code>，否则返回<code class="language-plaintext highlighter-rouge">false</code>，不会阻塞超过指定时间。</li>
  <li><code class="language-plaintext highlighter-rouge">availablePermits()</code>: 返回当前可用的许可数。</li>
  <li><code class="language-plaintext highlighter-rouge">drainPermits()</code>: 获取并返回立即可用的所有许可，并将可用许可数归零。</li>
  <li><code class="language-plaintext highlighter-rouge">reducePermits(int reduction)</code>: 减少许可数，可能导致信号量内部状态的变化。</li>
</ul>

<p>除了这些方法，<code class="language-plaintext highlighter-rouge">Semaphore</code>还提供了一些构造方法用于初始化许可数量，以及一些其他辅助方法用于查询状态等。<code class="language-plaintext highlighter-rouge">Semaphore</code>的用法通常是在需要控制并发访问数量的地方，使用<code class="language-plaintext highlighter-rouge">acquire()</code>方法获取许可，在任务完成后使用<code class="language-plaintext highlighter-rouge">release()</code>方法释放许可。</p>

<p><code class="language-plaintext highlighter-rouge">Semaphore</code>类提供了以下几种构造方法：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Semaphore(int permits)</code>: 创建一个具有给定许可数的<code class="language-plaintext highlighter-rouge">Semaphore</code>实例。这个许可数表示同时可以访问某一资源的线程数。</li>
  <li><code class="language-plaintext highlighter-rouge">Semaphore(int permits, boolean fair)</code>: 创建一个具有给定许可数和公平性设置的<code class="language-plaintext highlighter-rouge">Semaphore</code>实例。如果<code class="language-plaintext highlighter-rouge">fair</code>为<code class="language-plaintext highlighter-rouge">true</code>，则使用公平的许可获取顺序；否则，使用非公平的许可获取顺序。</li>
</ol>

<p>公平的许可获取顺序指的是当有多个线程在等待获取许可时，<code class="language-plaintext highlighter-rouge">Semaphore</code>会按照它们等待获取许可的先后顺序来分配许可。也就是说，等待时间最长的线程会最先获得许可，而等待时间最短的线程会最后获得许可。这种方式可以确保所有线程都有公平的机会获取许可，避免了某些线程长期被阻塞的情况。</p>
<h2 id="concurrent集合">Concurrent集合</h2>
<p>在前面已经通过<code class="language-plaintext highlighter-rouge">ReentrantLock</code>和<code class="language-plaintext highlighter-rouge">Condition</code>实现了一个<code class="language-plaintext highlighter-rouge">BlockingQueue</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskQueue</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReentrantLock</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Condition</span> <span class="n">condition</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addTask</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="n">condition</span><span class="o">.</span><span class="na">signalAll</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTask</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">condition</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">BlockingQueue</code>的意思就是说，当一个线程调用这个<code class="language-plaintext highlighter-rouge">TaskQueue</code>的<code class="language-plaintext highlighter-rouge">getTask()</code>方法时，该方法内部可能会让线程变成等待状态，直到队列条件满足不为空，线程被唤醒后，<code class="language-plaintext highlighter-rouge">getTask()</code>方法才会返回。<br />
因为<code class="language-plaintext highlighter-rouge">BlockingQueue</code>非常有用，所以不必自己编写，可以直接使用Java标准库的<code class="language-plaintext highlighter-rouge">java.util.concurrent</code>包提供的线程安全的集合：<code class="language-plaintext highlighter-rouge">ArrayBlockingQueue</code>。<br />
除了<code class="language-plaintext highlighter-rouge">BlockingQueue</code>外，针对<code class="language-plaintext highlighter-rouge">List</code>、<code class="language-plaintext highlighter-rouge">Map</code>、<code class="language-plaintext highlighter-rouge">Set</code>、<code class="language-plaintext highlighter-rouge">Deque</code>等，<code class="language-plaintext highlighter-rouge">java.util.concurrent</code>包也提供了对应的并发集合类。我们归纳一下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">interface</th>
      <th style="text-align: left">non-thread-safe</th>
      <th style="text-align: left">thread-safe</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">List</td>
      <td style="text-align: left">ArrayList</td>
      <td style="text-align: left">CopyOnWriteArrayList</td>
    </tr>
    <tr>
      <td style="text-align: left">Map</td>
      <td style="text-align: left">HashMap</td>
      <td style="text-align: left">ConcurrentHashMap</td>
    </tr>
    <tr>
      <td style="text-align: left">Set</td>
      <td style="text-align: left">HashSet / TreeSet</td>
      <td style="text-align: left">CopyOnWriteArraySet</td>
    </tr>
    <tr>
      <td style="text-align: left">Queue</td>
      <td style="text-align: left">ArrayDeque / LinkedList</td>
      <td style="text-align: left">ArrayBlockingQueue / LinkedBlockingQueue</td>
    </tr>
    <tr>
      <td style="text-align: left">Deque</td>
      <td style="text-align: left">ArrayDeque / LinkedList</td>
      <td style="text-align: left">LinkedBlockingDeque</td>
    </tr>
  </tbody>
</table>

<p>使用这些并发集合与使用非线程安全的集合类完全相同。以<code class="language-plaintext highlighter-rouge">ConcurrentHashMap</code>为例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
<span class="c1">// 在不同的线程读写:</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"1"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"B"</span><span class="o">,</span> <span class="s">"2"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"1"</span><span class="o">);</span>
</code></pre></div></div>
<p>因为所有的同步和加锁的逻辑都在集合内部实现，对外部调用者来说，只需要正常按接口引用，其他代码和原来的非线程安全代码完全一样。即当我们需要多线程访问时，把：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>
<p>改为：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>
<p>就可以了。</p>

<p><code class="language-plaintext highlighter-rouge">java.util.Collections</code>工具类还提供了一个旧的线程安全集合转换器，可以这么用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span> <span class="n">unsafeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">();</span>
<span class="nc">Map</span> <span class="n">threadSafeMap</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="n">unsafeMap</span><span class="o">);</span>
</code></pre></div></div>
<p>但是它实际上是用一个包装类包装了非线程安全的<code class="language-plaintext highlighter-rouge">Map</code>，然后对所有读写方法都用<code class="language-plaintext highlighter-rouge">synchronized</code>加锁，这样获得的线程安全集合的性能比<code class="language-plaintext highlighter-rouge">java.util.concurrent</code>集合要低很多，所以不推荐使用。</p>
<h2 id="atomic">Atomic</h2>
<p>Java的<code class="language-plaintext highlighter-rouge">java.util.concurrent</code>包除了提供底层锁、并发集合外，还提供了一组原子操作的封装类，它们位于<code class="language-plaintext highlighter-rouge">java.util.concurrent.atomic</code>包。</p>

<p>以<code class="language-plaintext highlighter-rouge">AtomicInteger</code>为例，它提供的主要操作有：</p>

<ul>
  <li>增加值并返回新值：<code class="language-plaintext highlighter-rouge">int addAndGet(int delta)</code></li>
  <li>加1后返回新值：<code class="language-plaintext highlighter-rouge">int incrementAndGet()</code></li>
  <li>获取当前值：<code class="language-plaintext highlighter-rouge">int get()</code></li>
  <li>用CAS方式设置：<code class="language-plaintext highlighter-rouge">int compareAndSet(int expect, int update)</code></li>
</ul>

<p>Atomic类是通过无锁（lock-free）的方式实现的线程安全（thread-safe）访问。它的主要原理是利用了CAS：Compare and Set。</p>

<p>CAS原子操作属于处理器汇编指令集，值相同则写入，否则跳转，所以是lock-free不需要额外加锁。<br />
在CAS基础上的Atomic，先暂存原值并操作，后根据CAS比较的结果判断<strong>操作的独立有效性，值相同则有效，反之无效。</strong><br />
如果我们自己通过CAS编写<code class="language-plaintext highlighter-rouge">incrementAndGet()</code>，它大概长这样：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">incrementAndGet</span><span class="o">(</span><span class="nc">AtomicInteger</span> <span class="kt">var</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">prev</span><span class="o">,</span> <span class="n">next</span><span class="o">;</span>
    <span class="k">do</span> <span class="o">{</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="kt">var</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="n">next</span> <span class="o">=</span> <span class="n">prev</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span> <span class="o">!</span> <span class="kt">var</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">prev</span><span class="o">,</span> <span class="n">next</span><span class="o">));</span>
    <span class="k">return</span> <span class="n">next</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>在这个操作中CAS是指<code class="language-plaintext highlighter-rouge">var.compareAndSet(prev, next)</code>，如果<code class="language-plaintext highlighter-rouge">var</code>的当前值是<code class="language-plaintext highlighter-rouge">prev</code>，那么就更新为<code class="language-plaintext highlighter-rouge">next</code>，返回<code class="language-plaintext highlighter-rouge">true</code>。如果<code class="language-plaintext highlighter-rouge">var</code>的当前值不是<code class="language-plaintext highlighter-rouge">prev</code>，就什么也不干，返回<code class="language-plaintext highlighter-rouge">false</code>。通过CAS操作并配合<code class="language-plaintext highlighter-rouge">do ... while</code>循环，即使其他线程修改了<code class="language-plaintext highlighter-rouge">AtomicInteger</code>的值，最终的结果也是正确的。</p>

<p>CAS是原子操作，但多核CPU下多个线程同时执行CAS操作为什么依旧是线程安全的呢？因为计算机底层实现保证了V（即上面的变量Var）指向内存的互斥性和立即可见性，可以理解为<strong>CAS操作是底层保证的线程安全。</strong></p>

<p>利用<code class="language-plaintext highlighter-rouge">AtomicLong</code>可以编写一个多线程安全的全局唯一ID生成器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">IdGenerator</span> <span class="o">{</span>
    <span class="nc">AtomicLong</span> <span class="kt">var</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AtomicLong</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getNextId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kt">var</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>通常情况下，我们并不需要直接用<code class="language-plaintext highlighter-rouge">do ... while</code>循环调用<code class="language-plaintext highlighter-rouge">compareAndSet</code>实现复杂的并发操作，而是用<code class="language-plaintext highlighter-rouge">incrementAndGet()</code>这样的封装好的方法，因此，使用起来非常简单。</p>

<p>在高度竞争的情况下，还可以使用<strong>Java 8</strong>提供的<code class="language-plaintext highlighter-rouge">LongAdder</code>和<code class="language-plaintext highlighter-rouge">LongAccumulator</code>。</p>

<p><code class="language-plaintext highlighter-rouge">LongAdder</code>和<code class="language-plaintext highlighter-rouge">LongAccumulator</code>都是用来累加长整型值的工具类，但它们的使用场景和实现略有不同。</p>

<p><strong>LongAdder</strong>：适用于高并发情况下的累加操作。它采用了分段锁（Cell数组）的方式来减小锁的竞争，从而提高了并发性能。使用<code class="language-plaintext highlighter-rouge">LongAdder</code>时，通常不需要担心多线程竞争导致的性能问题，适用于计数器等需要频繁增加的场景。</p>

<p>示例代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LongAdder</span> <span class="n">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LongAdder</span><span class="o">();</span>
<span class="n">adder</span><span class="o">.</span><span class="na">increment</span><span class="o">();</span> <span class="c1">// 增加值</span>
<span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">adder</span><span class="o">.</span><span class="na">sum</span><span class="o">();</span> <span class="c1">// 获取总和</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span><span class="c1">// 1</span>
</code></pre></div></div>
<p><strong>LongAccumulator</strong>：适用于需要自定义累加规则的情况。它提供了一个函数和一个初始值，可以根据自定义的函数对输入的值进行累加。使用<code class="language-plaintext highlighter-rouge">LongAccumulator</code>时，可以定义一个累加函数，该函数接受两个参数（当前值和新值），并返回一个新值。</p>

<p>示例代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LongBinaryOperator</span> <span class="n">accumulatorFunction</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span> <span class="c1">// 定义累加函数</span>
<span class="kt">long</span> <span class="n">identity</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 初始值</span>
<span class="nc">LongAccumulator</span> <span class="n">accumulator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LongAccumulator</span><span class="o">(</span><span class="n">accumulatorFunction</span><span class="o">,</span> <span class="n">identity</span><span class="o">);</span>
<span class="n">accumulator</span><span class="o">.</span><span class="na">accumulate</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">// 累加新值</span>
<span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">accumulator</span><span class="o">.</span><span class="na">get</span><span class="o">();</span> <span class="c1">// 获取结果</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span><span class="c1">//3</span>
</code></pre></div></div>
<p>总的来说，<code class="language-plaintext highlighter-rouge">LongAdder</code>适用于高并发下的累加操作，而<code class="language-plaintext highlighter-rouge">LongAccumulator</code>适用于需要自定义累加规则的情况。</p>
<h2 id="线程池">线程池</h2>
<p>Java语言虽然内置了多线程支持，启动一个新线程非常方便，但是，创建线程需要操作系统资源（线程资源，栈空间等），频繁创建和销毁大量线程需要消耗大量时间。</p>

<p>如果可以复用一组线程：</p>

<pre><code class="language-ascii">┌─────┐ execute  ┌──────────────────┐
│Task1│─────────&gt;│ThreadPool        │
├─────┤          │┌───────┐┌───────┐│
│Task2│          ││Thread1││Thread2││
├─────┤          │└───────┘└───────┘│
│Task3│          │┌───────┐┌───────┐│
├─────┤          ││Thread3││Thread4││
│Task4│          │└───────┘└───────┘│
├─────┤          └──────────────────┘
│Task5│
├─────┤
│Task6│
└─────┘
  ...
</code></pre>
<p>那么就可以把很多小任务让一组线程来执行，而不是一个任务对应一个新线程。这种能接收大量小任务并进行分发处理的就是线程池。</p>

<p>简单地说，线程池内部<strong>维护了若干个线程</strong>，没有任务的时候，这些线程都处于等待状态。如果有<strong>新任务</strong>，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。</p>

<p>Java标准库提供了<code class="language-plaintext highlighter-rouge">ExecutorService</code>接口表示线程池，它的典型用法如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建固定大小的线程池:</span>
<span class="nc">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
<span class="c1">// 提交任务:</span>
<span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task1</span><span class="o">);</span>
<span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task2</span><span class="o">);</span>
<span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task3</span><span class="o">);</span>
<span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task4</span><span class="o">);</span>
<span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task5</span><span class="o">);</span>
</code></pre></div></div>
<p>因为<code class="language-plaintext highlighter-rouge">ExecutorService</code>只是接口，Java标准库提供的几个常用实现类有：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">FixedThreadPool</code>：线程数固定的线程池；</li>
  <li><code class="language-plaintext highlighter-rouge">CachedThreadPool</code>：线程数根据任务动态调整的线程池；</li>
  <li><code class="language-plaintext highlighter-rouge">SingleThreadExecutor</code>：仅单线程执行的线程池。</li>
</ul>

<h3 id="fixedthreadpool">FixedThreadPool</h3>
<p>创建这些线程池的方法都被封装到<code class="language-plaintext highlighter-rouge">Executors</code>这个类中。以<code class="language-plaintext highlighter-rouge">FixedThreadPool</code>为例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个固定大小的线程池:</span>
<span class="nc">ExecutorService</span> <span class="n">es</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">finalI</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
    <span class="n">es</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">finalI</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"线程 %s 开始任务: %s%n"</span><span class="o">,</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span><span class="n">name</span><span class="o">);</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">_</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"线程 %s 结束任务: %s%n"</span><span class="o">,</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span> <span class="n">name</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">});</span>
<span class="o">}</span>
<span class="c1">// 关闭线程池:</span>
<span class="n">es</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</code></pre></div></div>
<p>控制台：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>线程 pool-1-thread-4 开始任务: 4
线程 pool-1-thread-2 开始任务: 2
线程 pool-1-thread-3 开始任务: 3
线程 pool-1-thread-1 开始任务: 1
线程 pool-1-thread-4 结束任务: 4
线程 pool-1-thread-4 开始任务: 5
线程 pool-1-thread-1 结束任务: 1
线程 pool-1-thread-1 开始任务: 6
线程 pool-1-thread-3 结束任务: 3
线程 pool-1-thread-2 结束任务: 2
线程 pool-1-thread-1 结束任务: 6
线程 pool-1-thread-4 结束任务: 5
</code></pre></div></div>
<p>一次性放入6个任务，由于线程池只有固定的4个线程，因此，前4个任务会同时执行，等到有线程空闲后，才会执行后面的两个任务。</p>

<p>线程池在程序结束的时候要关闭。使用<code class="language-plaintext highlighter-rouge">shutdown()</code>方法关闭线程池的时候，会等待<strong>正在执行</strong>的任务先完成，然后再关闭。<code class="language-plaintext highlighter-rouge">shutdownNow()</code>则会立刻停止正在执行的任务，<code class="language-plaintext highlighter-rouge">awaitTermination()</code>则会等待指定的时间让线程池关闭。</p>

<hr />

<h3 id="cachedthreadpool">CachedThreadPool</h3>
<p>如果把线程池改为<code class="language-plaintext highlighter-rouge">CachedThreadPool</code>，由于这个线程池的实现会根据任务数量动态调整线程池的大小，所以6个任务可一次性全部同时执行。</p>

<p>如果想把线程池的大小限制在4～10个之间动态调整怎么办？我们查看<code class="language-plaintext highlighter-rouge">Executors.newCachedThreadPool()</code>方法的源码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">ExecutorService</span> <span class="nf">newCachedThreadPool</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span>
                                    <span class="mi">60L</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span>
                                    <span class="k">new</span> <span class="nc">SynchronousQueue</span><span class="o">&lt;</span><span class="nc">Runnable</span><span class="o">&gt;());</span>
<span class="o">}</span>
</code></pre></div></div>
<p>因此，想创建指定动态范围的线程池，可以这么写：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="nc">ExecutorService</span> <span class="n">es</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadPoolExecutor</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">max</span><span class="o">,</span>
        <span class="mi">60L</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span> <span class="k">new</span> <span class="nc">SynchronousQueue</span><span class="o">&lt;</span><span class="nc">Runnable</span><span class="o">&gt;());</span>
</code></pre></div></div>
<h3 id="singlethreadexecutor">SingleThreadExecutor</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ExecutorService</span> <span class="n">es</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
<span class="nc">Runnable</span> <span class="n">callable</span><span class="o">=()-&gt;{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
<span class="o">};</span>
<span class="n">es</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">callable</span><span class="o">);</span>
<span class="c1">// 关闭线程池:</span>
<span class="n">es</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</code></pre></div></div>
<h3 id="threadpoolexecutor">ThreadPoolExecutor</h3>
<p><code class="language-plaintext highlighter-rouge">ThreadPoolExecutor</code>类是Java中用于管理线程池的一个重要类，它实现了<code class="language-plaintext highlighter-rouge">ExecutorService</code>接口。以下是<code class="language-plaintext highlighter-rouge">ThreadPoolExecutor</code>类的一些常用方法：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">execute(Runnable command)</code>: 提交一个不需要返回值的任务给线程池执行。</li>
  <li><code class="language-plaintext highlighter-rouge">submit(Callable&lt;T&gt; task)</code>: 提交一个有返回值的任务给线程池执行，并返回一个表示任务的未来结果的 <code class="language-plaintext highlighter-rouge">Future</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">shutdown()</code>: 启动有序关闭，在该关闭中先前提交的任务将被执行，但不会接受新任务。如果已经关闭，则调用没有其他影响。</li>
  <li><code class="language-plaintext highlighter-rouge">shutdownNow()</code>: 尝试停止所有正在执行的活动任务，暂停等待任务的处理，并返回等待执行的任务列表。此方法不保证能够停止正在处理的活动执行任务，但是会尽最大努力。</li>
  <li><code class="language-plaintext highlighter-rouge">isShutdown()</code>: 如果此执行程序已关闭，则返回 <code class="language-plaintext highlighter-rouge">true</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">isTerminating()</code>: 如果此执行程序已经启动关闭过程，则返回 <code class="language-plaintext highlighter-rouge">true</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">isTerminated()</code>: 如果所有任务在关闭后都已完成，则返回 <code class="language-plaintext highlighter-rouge">true</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">awaitTermination(long timeout, TimeUnit unit)</code>: 请求关闭，并阻塞直到所有任务完成执行，或发生超时，或当前线程被中断，以先发生者为准。</li>
  <li><code class="language-plaintext highlighter-rouge">setCorePoolSize(int corePoolSize)</code>: 设置核心线程数。</li>
  <li><code class="language-plaintext highlighter-rouge">getCorePoolSize()</code>: 获取核心线程数。</li>
  <li><code class="language-plaintext highlighter-rouge">setMaximumPoolSize(int maximumPoolSize)</code>: 设置最大线程数。</li>
  <li><code class="language-plaintext highlighter-rouge">getMaximumPoolSize()</code>: 获取最大线程数。</li>
  <li><code class="language-plaintext highlighter-rouge">getPoolSize()</code>: 获取当前线程池中的线程数量。</li>
  <li><code class="language-plaintext highlighter-rouge">getActiveCount()</code>: 获取当前线程池中正在执行任务的线程数量。</li>
  <li><code class="language-plaintext highlighter-rouge">getQueue()</code>: 获取用于保存等待执行任务的队列。</li>
  <li><code class="language-plaintext highlighter-rouge">getRejectedExecutionHandler()</code>: 获取用于处理无法执行的任务的处理程序。</li>
  <li><code class="language-plaintext highlighter-rouge">setRejectedExecutionHandler(RejectedExecutionHandler handler)</code>: 设置用于处理无法执行的任务的处理程序。</li>
  <li><code class="language-plaintext highlighter-rouge">prestartCoreThread()</code>: 预启动一个核心线程，不等待任务。</li>
  <li><code class="language-plaintext highlighter-rouge">prestartAllCoreThreads()</code>: 预启动所有核心线程，不等待任务。</li>
  <li><code class="language-plaintext highlighter-rouge">allowsCoreThreadTimeOut()</code>: 判断核心线程在执行完当前任务后是否允许超时。如果允许超时，则核心线程在空闲一定时间后会被回收；如果不允许超时，则核心线程会一直保持存活状态，即使空闲也不会被回收。。</li>
  <li><code class="language-plaintext highlighter-rouge">allowCoreThreadTimeOut(boolean value)</code>:设置核心线程是否在执行完当前任务后允许超时。如果设置为<code class="language-plaintext highlighter-rouge">true</code>，则核心线程在空闲一定时间后会被回收；如果设置为<code class="language-plaintext highlighter-rouge">false</code>，则核心线程会一直保持存活状态，即使空闲也不会被回收。</li>
  <li><code class="language-plaintext highlighter-rouge">remove(Runnable task)</code>: 从工作队列中删除指定的任务。</li>
  <li><code class="language-plaintext highlighter-rouge">purge()</code>: 从工作队列中删除所有已经取消的任务。</li>
</ul>

<p>这些方法使得我们可以方便地管理线程池的行为，如调整线程数、查看线程池状态等。<br />
实际上前面的<code class="language-plaintext highlighter-rouge">FixedThreadPool</code>、<code class="language-plaintext highlighter-rouge">CachedThreadPool</code>、<code class="language-plaintext highlighter-rouge">SingleThreadExecutor</code>，实例化的都是<code class="language-plaintext highlighter-rouge">ThreadPoolExecutor</code>。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ExecutorService</span> <span class="n">es0</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="nc">ExecutorService</span> <span class="n">es1</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>
<span class="nc">ExecutorService</span> <span class="n">es2</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</code></pre></div></div>
<p>相当于:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个固定大小为10个线程的线程池</span>
<span class="nc">ThreadPoolExecutor</span> <span class="n">es0</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">0L</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">,</span> <span class="k">new</span> <span class="nc">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="nc">Runnable</span><span class="o">&gt;());</span>
<span class="c1">// 创建一个根据需要创建新线程的线程池</span>
<span class="nc">ThreadPoolExecutor</span> <span class="n">es1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="mi">60L</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span> <span class="k">new</span> <span class="nc">SynchronousQueue</span><span class="o">&lt;</span><span class="nc">Runnable</span><span class="o">&gt;());</span>
<span class="c1">// 创建一个只有一个工作线程的线程池</span>
<span class="nc">ThreadPoolExecutor</span> <span class="n">es2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0L</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">,</span> <span class="k">new</span> <span class="nc">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="nc">Runnable</span><span class="o">&gt;());</span>
</code></pre></div></div>
<h3 id="scheduledthreadpool">ScheduledThreadPool</h3>
<p>还有一种任务，需要定期反复执行，例如，每秒刷新证券价格。这种任务本身固定，需要反复执行的，可以使用<code class="language-plaintext highlighter-rouge">ScheduledThreadPool</code>。放入<code class="language-plaintext highlighter-rouge">ScheduledThreadPool</code>的任务可以定期反复执行。创建一个<code class="language-plaintext highlighter-rouge">ScheduledThreadPool</code>仍然是通过<code class="language-plaintext highlighter-rouge">Executors</code>类：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ScheduledExecutorService</span> <span class="n">ses</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
</code></pre></div></div>
<p>可以提交一次性任务，它会在指定延迟后只执行一次：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1秒后执行一次性任务:</span>
<span class="n">ses</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="nc">Task</span><span class="o">(</span><span class="s">"one-time"</span><span class="o">),</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</code></pre></div></div>
<p>如果任务以固定的<strong>每3秒</strong>执行，我们可以这样写：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 2秒后开始执行定时任务，每3秒执行:</span>
<span class="n">ses</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="k">new</span> <span class="nc">Task</span><span class="o">(</span><span class="s">"fixed-rate"</span><span class="o">),</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</code></pre></div></div>
<p>如果任务以固定的3秒为<strong>间隔</strong>执行，我们可以这样写：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 2秒后开始执行定时任务，以3秒为间隔执行:</span>
<span class="n">ses</span><span class="o">.</span><span class="na">scheduleWithFixedDelay</span><span class="o">(</span><span class="k">new</span> <span class="nc">Task</span><span class="o">(</span><span class="s">"fixed-delay"</span><span class="o">),</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</code></pre></div></div>
<p>注意<code class="language-plaintext highlighter-rouge">FixedRate</code>和<code class="language-plaintext highlighter-rouge">FixedDelay</code>的区别。<code class="language-plaintext highlighter-rouge">FixedRate</code>是指任务总是以固定时间间隔触发，<strong>不管任务执行多长时间</strong>：</p>
<pre><code class="language-ascii">│░░░░   │░░░░░░ │░░░    │░░░░░  │░░░  
├───────┼───────┼───────┼───────┼────&gt;
│&lt;─────&gt;│&lt;─────&gt;│&lt;─────&gt;│&lt;─────&gt;│
</code></pre>
<p>而<code class="language-plaintext highlighter-rouge">FixedDelay</code>是指，上一次任务执行完毕后，等待固定的时间间隔，再执行下一次任务：</p>
<pre><code class="language-ascii">│░░░│       │░░░░░│       │░░│       │░
└───┼───────┼─────┼───────┼──┼───────┼──&gt;
    │&lt;─────&gt;│     │&lt;─────&gt;│  │&lt;─────&gt;│
</code></pre>
<p>因此，使用<code class="language-plaintext highlighter-rouge">ScheduledThreadPool</code>时，我们要根据需要选择执行一次、<code class="language-plaintext highlighter-rouge">FixedRate</code>执行还是<code class="language-plaintext highlighter-rouge">FixedDelay</code>执行。</p>

<p>在<code class="language-plaintext highlighter-rouge">scheduleAtFixedRate</code>方法中，如果某次任务<strong>执行时间超过</strong>了指定的<strong>周期</strong>，如果任务的任何执行时间超过其周期，则后续执行会延迟启动，不会同时执行。后续任务会在上个任务执行完毕后立即执行以持续补时差，直到回归正常(时间-&gt;任务)一一对应的序列。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ScheduledExecutorService</span> <span class="n">ses</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">ses</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(()-&gt;{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"开始"</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"结束"</span><span class="o">);</span>
<span class="o">},</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</code></pre></div></div>
<p>这个例子本来是间隔0.1s执行的，但任务至少需要1s才能执行完，因此每次任务都会贴着执行 即后续输出都是输出：<code class="language-plaintext highlighter-rouge">结束</code>后马上输出<code class="language-plaintext highlighter-rouge">开始...</code>。</p>

<p>对于<code class="language-plaintext highlighter-rouge">scheduleAtFixedRate</code>和<code class="language-plaintext highlighter-rouge">scheduleWithFixedDelay</code>方法，如果任务<strong>抛出异常</strong>，后续任务<strong>会停止执行</strong>，且异常不会抛出到控制台，线程将被迫停止并由RUNNABLE状态进入 WAITING 状态。如果希望任务出现异常后仍然继续执行后续任务，可以在任务内部捕获异常，并处理异常后继续执行。</p>

<p>使用 <code class="language-plaintext highlighter-rouge">shutdown()</code> 方法关闭线程池时，会等待已提交的任务（包括正在执行的任务和还未开始执行的任务）全部执行完成，然后关闭线程池。</p>

<p>如果某个定时任务的第一次执行时间点尚未到达，而在此之前调用了 <code class="language-plaintext highlighter-rouge">shutdown()</code> 方法，那么这个定时任务<strong>将不会被执行</strong>。这是因为 <code class="language-plaintext highlighter-rouge">shutdown()</code> 方法会等待正在执行的任务完成，而尚未开始执行的任务会被取消。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ScheduledExecutorService</span> <span class="n">ses</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">ses</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(()-&gt;{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"开始"</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"结束"</span><span class="o">);</span>
<span class="o">},</span> <span class="mi">1000</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
<span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">999</span><span class="o">);</span>
<span class="c1">// 关闭线程池:</span>
<span class="n">ses</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</code></pre></div></div>
<p>如果 <code class="language-plaintext highlighter-rouge">shutdown()</code> 方法调用的时机在定时任务执行时，则定时任务会在执行完本次任务后关闭。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ScheduledExecutorService</span> <span class="n">ses</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">ses</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(()-&gt;{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"开始"</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"结束"</span><span class="o">);</span>
<span class="o">},</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
<span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">499</span><span class="o">);</span>
<span class="c1">// 关闭线程池:</span>
<span class="n">ses</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</code></pre></div></div>
<p>如果 <code class="language-plaintext highlighter-rouge">shutdown()</code> 方法调用的时机在定时任务间隔时（非第一次运行前的延迟），则定时任务会在间隔结束后再执行一次后关闭。这是因为 <code class="language-plaintext highlighter-rouge">shutdown()</code> 方法不会取消已经计划的下一次任务。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ScheduledExecutorService</span> <span class="n">ses</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="n">ses</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(()-&gt;{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"开始"</span><span class="o">+</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"结束"</span><span class="o">);</span>
<span class="o">},</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
<span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1499</span><span class="o">);</span>
<span class="c1">// 关闭线程池:</span>
<span class="n">ses</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</code></pre></div></div>
<hr />

<p>除了继承自<code class="language-plaintext highlighter-rouge">ThreadPoolExecutor</code>的方法外，<code class="language-plaintext highlighter-rouge">ScheduledThreadPoolExecutor</code>还添加了以下方法：</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">schedule(Callable&lt;V&gt; callable, long delay, TimeUnit unit)</code>：延迟执行<code class="language-plaintext highlighter-rouge">Callable</code>任务，并在任务完成后返回结果。返回一个<code class="language-plaintext highlighter-rouge">ScheduledFuture</code>表示该任务的未来结果。</li>
  <li><code class="language-plaintext highlighter-rouge">schedule(Runnable command, long delay, TimeUnit unit)</code>：延迟执行<code class="language-plaintext highlighter-rouge">Runnable</code>任务。返回一个<code class="language-plaintext highlighter-rouge">ScheduledFuture</code>表示该任务的未来结果。</li>
  <li><code class="language-plaintext highlighter-rouge">scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)</code>：在每次执行结束后等待固定的延迟时间后再执行任务，即任务开始后，等待<code class="language-plaintext highlighter-rouge">initialDelay</code>后开始执行第一次任务，之后每次任务执行结束后再等待<code class="language-plaintext highlighter-rouge">delay</code>后执行下一次任务。返回一个<code class="language-plaintext highlighter-rouge">ScheduledFuture</code>表示该任务的未来结果。</li>
  <li><code class="language-plaintext highlighter-rouge">scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)</code>：按固定的频率执行任务，即任务开始后，等待<code class="language-plaintext highlighter-rouge">initialDelay</code>后开始执行第一次任务，之后每隔<code class="language-plaintext highlighter-rouge">period</code>执行一次。如果任务的执行时间超过<code class="language-plaintext highlighter-rouge">period</code>，则后续任务会立即执行，不会等待。返回一个<code class="language-plaintext highlighter-rouge">ScheduledFuture</code>表示该任务的未来结果。</li>
</ol>

<p>这些方法都是用于实现定时任务的调度。</p>
<h3 id="timer">Timer</h3>
<p>Java标准库还提供了一个<code class="language-plaintext highlighter-rouge">java.util.Timer</code>类，这个类也可以定期执行任务，但是，一个<code class="language-plaintext highlighter-rouge">Timer</code>会对应一个<code class="language-plaintext highlighter-rouge">Thread</code>，所以，一个<code class="language-plaintext highlighter-rouge">Timer</code>只能定期执行一个任务，多个定时任务必须启动多个<code class="language-plaintext highlighter-rouge">Timer</code>，而一个<code class="language-plaintext highlighter-rouge">ScheduledThreadPool</code>就可以调度多个定时任务，所以，完全可以用<code class="language-plaintext highlighter-rouge">ScheduledThreadPool</code>取代旧的<code class="language-plaintext highlighter-rouge">Timer</code>。</p>

<p><code class="language-plaintext highlighter-rouge">java.util.Timer</code>类也可以用于定期执行任务，但与<code class="language-plaintext highlighter-rouge">ScheduledThreadPoolExecutor</code>相比，<code class="language-plaintext highlighter-rouge">Timer</code>存在一些局限性和缺点。</p>

<p><strong><code class="language-plaintext highlighter-rouge">Timer</code>的特点：</strong></p>

<ol>
  <li><strong>单线程执行</strong>：<code class="language-plaintext highlighter-rouge">Timer</code>内部维护了一个线程，用于执行所有任务。如果某个任务执行时间过长，会影响后续任务的执行。</li>
  <li><strong>异常处理</strong>：<code class="language-plaintext highlighter-rouge">Timer</code>在执行任务时，如果任务抛出未捕获的异常，会导致<code class="language-plaintext highlighter-rouge">Timer</code>线程终止，影响后续任务的执行。</li>
  <li><strong>灵活性差</strong>：<code class="language-plaintext highlighter-rouge">Timer</code>的调度方式比较简单，无法灵活控制任务的执行方式。</li>
  <li><strong>不适合长期运行</strong>：由于<code class="language-plaintext highlighter-rouge">Timer</code>是单线程执行任务，长期运行的任务可能会影响其他任务的执行。</li>
</ol>

<p>示例代码：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Timer</span><span class="o">();</span>
<span class="c1">// 1秒后执行一次性任务:</span>
<span class="n">timer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="nc">TimerTask</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"一次性任务"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">},</span> <span class="mi">1000</span><span class="o">);</span>
<span class="c1">// 每隔3秒执行一次任务，任务开始后2秒再次执行：</span>
<span class="n">timer</span><span class="o">.</span><span class="na">schedule</span><span class="o">(</span><span class="k">new</span> <span class="nc">TimerTask</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"定时任务"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">},</span> <span class="mi">2000</span><span class="o">,</span> <span class="mi">3000</span><span class="o">);</span>
<span class="c1">// 10秒后终止</span>
<span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span>
<span class="n">timer</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</code></pre></div></div>
<p><strong>注意事项：</strong></p>
<ol>
  <li>使用<code class="language-plaintext highlighter-rouge">Timer</code>时要注意处理任务抛出的异常，避免影响<code class="language-plaintext highlighter-rouge">Timer</code>线程的执行。</li>
  <li>不适合需要高并发、长期运行的任务，建议使用<code class="language-plaintext highlighter-rouge">ScheduledThreadPoolExecutor</code>。</li>
</ol>

<p>总的来说，如果需要更灵活、可靠的任务调度机制，推荐使用<code class="language-plaintext highlighter-rouge">ScheduledThreadPoolExecutor</code>，而不是<code class="language-plaintext highlighter-rouge">Timer</code>类。</p>
<h2 id="future">Future</h2>
<p>在执行多个任务的时候，使用Java标准库提供的线程池是非常方便的。我们提交的任务只需要实现<code class="language-plaintext highlighter-rouge">Runnable</code>接口，就可以让线程池去执行：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Task</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">result</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="n">longTimeCalculation</span><span class="o">();</span> 
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">Runnable</code>接口有个问题，它的方法没有返回值。如果任务需要一个返回结果，那么只能保存到变量，还要提供额外的方法读取，非常不便。所以，Java标准库还提供了一个<code class="language-plaintext highlighter-rouge">Callable</code>接口，和<code class="language-plaintext highlighter-rouge">Runnable</code>接口比，它多了一个返回值：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Task</span> <span class="kd">implements</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">longTimeCalculation</span><span class="o">();</span> 
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>并且<code class="language-plaintext highlighter-rouge">Callable</code>接口是一个泛型接口，可以返回指定类型的结果。</p>

<p>现在的问题是，如何获得异步执行的结果？</p>

<p>如果仔细看<code class="language-plaintext highlighter-rouge">ExecutorService.submit()</code>方法，可以看到，它返回了一个<code class="language-plaintext highlighter-rouge">Future</code>类型，一个<code class="language-plaintext highlighter-rouge">Future</code>类型的实例代表一个<strong>未来能获取结果</strong>的对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> 
<span class="c1">// 定义任务:</span>
<span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Task</span><span class="o">();</span>
<span class="c1">// 提交任务并获得Future:</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
<span class="c1">// 从Future获取异步执行返回的结果:</span>
<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">();</span> <span class="c1">// 可能阻塞</span>
</code></pre></div></div>
<p>当提交一个<code class="language-plaintext highlighter-rouge">Callable</code>任务后，会同时获得一个<code class="language-plaintext highlighter-rouge">Future</code>对象，然后，在主线程某个时刻调用<code class="language-plaintext highlighter-rouge">Future</code>对象的<code class="language-plaintext highlighter-rouge">get()</code>方法，就可以获得异步执行的结果。在调用<code class="language-plaintext highlighter-rouge">get()</code>时，如果异步任务已经完成，就直接获得结果。如果异步任务还没有完成，那么<code class="language-plaintext highlighter-rouge">get()</code>会<strong>阻塞</strong>，直到任务完成后才返回结果。</p>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ExecutorService</span> <span class="n">ses</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=()-&gt;{</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="k">return</span> <span class="s">"你好"</span><span class="o">;</span>
<span class="o">};</span>
<span class="nc">Future</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">=</span><span class="n">ses</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
<span class="c1">// 关闭线程池:</span>
<span class="n">ses</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</code></pre></div></div>
<hr />

<p>一个<code class="language-plaintext highlighter-rouge">Future&lt;V&gt;</code>接口表示一个未来可能会返回的结果，即表示一个异步计算的结果。它定义了以下方法：</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">boolean cancel(boolean mayInterruptIfRunning)</code>：尝试取消任务的执行。如果任务已经完成、已经被取消或者由于某些原因不能取消，则此尝试将失败，返回 <code class="language-plaintext highlighter-rouge">false</code>。如果取消成功，并且任务尚未开始执行，则任务不应该运行。如果任务已经开始执行，则应该中断任务的执行。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isCancelled()</code>：如果任务已经被取消，则返回 true。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean isDone()</code>：如果任务已经完成（无论是正常完成、取消还是由于执行过程中出现异常），则返回 true。</li>
  <li><code class="language-plaintext highlighter-rouge">V get()</code>：等待计算完成，然后返回其结果。</li>
  <li><code class="language-plaintext highlighter-rouge">V get(long timeout, TimeUnit unit)</code>：等待计算完成，最多等待给定的时间。如果在超时时间内计算完成，则返回结果；如果超时，则抛出 <code class="language-plaintext highlighter-rouge">TimeoutException</code>。</li>
</ol>

<hr />

<p><strong>单独使用：</strong></p>

<p>步骤：</p>

<ol>
  <li>创建一个实现<code class="language-plaintext highlighter-rouge">Callable</code>的实现类</li>
  <li>实现<code class="language-plaintext highlighter-rouge">call</code>方法，将此线程需要执行的操作声明在call()中</li>
  <li>创建<code class="language-plaintext highlighter-rouge">Callable</code>接口实现类的对象</li>
  <li>将此<code class="language-plaintext highlighter-rouge">Callable</code>接口实现类的对象作为传递到<code class="language-plaintext highlighter-rouge">FutureTask</code>构造器中，创建<code class="language-plaintext highlighter-rouge">FutureTask</code>的对象</li>
  <li>将<code class="language-plaintext highlighter-rouge">FutureTask</code>的对象作为参数传递到<code class="language-plaintext highlighter-rouge">Thread</code>类的构造器中，创建<code class="language-plaintext highlighter-rouge">Thread</code>对象，并调用<code class="language-plaintext highlighter-rouge">start()</code></li>
  <li>获取<code class="language-plaintext highlighter-rouge">Callable</code>中<code class="language-plaintext highlighter-rouge">call</code>方法的返回值</li>
</ol>

<p>即：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Callable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=()-&gt;{</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="k">return</span> <span class="s">"你好"</span><span class="o">;</span>
<span class="o">};</span>
<span class="nc">FutureTask</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">futureTask</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FutureTask</span><span class="o">&lt;&gt;(</span><span class="n">task</span><span class="o">);</span>
<span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">futureTask</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">futureTask</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</code></pre></div></div>
<h2 id="completablefuture">CompletableFuture</h2>
<p>使用<code class="language-plaintext highlighter-rouge">Future</code>获得异步执行结果时，要么调用阻塞方法<code class="language-plaintext highlighter-rouge">get()</code>，要么轮询看<code class="language-plaintext highlighter-rouge">isDone()</code>是否为<code class="language-plaintext highlighter-rouge">true</code>，这两种方法都不是很好，因为主线程也会被迫等待。</p>

<p>从<strong>Java 8</strong>开始引入了<code class="language-plaintext highlighter-rouge">CompletableFuture</code>，它针对<code class="language-plaintext highlighter-rouge">Future</code>做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法。</p>

<p>以获取股票价格为例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 创建异步执行任务:</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">cf</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(</span><span class="nl">Main:</span><span class="o">:</span><span class="n">fetchPrice</span><span class="o">);</span>
        <span class="c1">// 如果执行成功:</span>
        <span class="n">cf</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">((</span><span class="n">result</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"price: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="c1">// 如果执行异常:</span>
        <span class="n">cf</span><span class="o">.</span><span class="na">exceptionally</span><span class="o">((</span><span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">});</span>
        <span class="c1">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">Double</span> <span class="nf">fetchPrice</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mf">0.3</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"fetch price failed!"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="mi">5</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">20</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>创建一个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>是通过<code class="language-plaintext highlighter-rouge">CompletableFuture.supplyAsync()</code>实现的，它需要一个实现了<code class="language-plaintext highlighter-rouge">Supplier</code>接口的对象：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Supplier</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">T</span> <span class="nf">get</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>这里用lambda语法简化了一下，直接传入<code class="language-plaintext highlighter-rouge">Main::fetchPrice</code>，因为<code class="language-plaintext highlighter-rouge">Main.fetchPrice()</code>静态方法的签名符合<code class="language-plaintext highlighter-rouge">Supplier</code>接口的定义（除了方法名外）。</p>

<p>紧接着，<code class="language-plaintext highlighter-rouge">CompletableFuture</code>已经被提交给默认的线程池执行了，我们需要定义的是<code class="language-plaintext highlighter-rouge">CompletableFuture</code>完成时和异常时需要回调的实例。完成时，<code class="language-plaintext highlighter-rouge">CompletableFuture</code>会调用<code class="language-plaintext highlighter-rouge">Consumer</code>对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>异常时，<code class="language-plaintext highlighter-rouge">CompletableFuture</code>会调用<code class="language-plaintext highlighter-rouge">Function</code>对象：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>这里都用lambda语法简化了代码。</p>

<p>可见<code class="language-plaintext highlighter-rouge">CompletableFuture</code>的优点是：</p>

<ul>
  <li>异步任务结束时，会自动回调某个对象的方法；</li>
  <li>异步任务出错时，会自动回调某个对象的方法；</li>
  <li>主线程设置好回调后，不再关心异步任务的执行。</li>
</ul>

<p>如果只是实现了异步回调机制，还看不出<code class="language-plaintext highlighter-rouge">CompletableFuture</code>相比<code class="language-plaintext highlighter-rouge">Future</code>的优势。<code class="language-plaintext highlighter-rouge">CompletableFuture</code>更强大的功能是，多个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>可以串行执行，例如，定义两个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>，第一个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>根据证券名称查询证券代码，第二个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>根据证券代码查询证券价格，这两个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>实现串行操作如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 第一个任务:</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">cfQuery</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">queryCode</span><span class="o">(</span><span class="s">"中国石油"</span><span class="o">));</span>
        <span class="c1">// cfQuery成功后继续执行下一个任务:</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">cfFetch</span> <span class="o">=</span> <span class="n">cfQuery</span><span class="o">.</span><span class="na">thenApplyAsync</span><span class="o">((</span><span class="n">code</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">fetchPrice</span><span class="o">(</span><span class="n">code</span><span class="o">));</span>
        <span class="c1">// cfFetch成功后打印结果:</span>
        <span class="n">cfFetch</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">((</span><span class="n">result</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"price: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="c1">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">String</span> <span class="nf">queryCode</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">_</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="s">"601857"</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">Double</span> <span class="nf">fetchPrice</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">_</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="mi">5</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">20</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>除了串行执行外，多个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>还可以并行执行。例如，我们考虑这样的场景：</p>

<p>同时从新浪和网易查询证券代码，只要任意一个返回结果，就进行下一步查询价格，查询价格也同时从新浪和网易查询，只要任意一个返回结果，就完成操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 两个CompletableFuture执行异步查询:</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">cfQueryFromSina</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">queryCode</span><span class="o">(</span><span class="s">"中国石油"</span><span class="o">,</span> <span class="s">"https://finance.sina.com.cn/code/"</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">cfQueryFrom163</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">queryCode</span><span class="o">(</span><span class="s">"中国石油"</span><span class="o">,</span> <span class="s">"https://money.163.com/code/"</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="c1">// 用anyOf合并为一个新的CompletableFuture:</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">cfQuery</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">anyOf</span><span class="o">(</span><span class="n">cfQueryFromSina</span><span class="o">,</span> <span class="n">cfQueryFrom163</span><span class="o">);</span>
        <span class="c1">// 两个CompletableFuture执行异步查询:</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">cfFetchFromSina</span> <span class="o">=</span> <span class="n">cfQuery</span><span class="o">.</span><span class="na">thenApplyAsync</span><span class="o">((</span><span class="n">code</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">fetchPrice</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span> <span class="n">code</span><span class="o">,</span> <span class="s">"https://finance.sina.com.cn/price/"</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">cfFetchFrom163</span> <span class="o">=</span> <span class="n">cfQuery</span><span class="o">.</span><span class="na">thenApplyAsync</span><span class="o">((</span><span class="n">code</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nf">fetchPrice</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span> <span class="n">code</span><span class="o">,</span> <span class="s">"https://money.163.com/price/"</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="c1">// 用anyOf合并为一个新的CompletableFuture:</span>
        <span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">cfFetch</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">anyOf</span><span class="o">(</span><span class="n">cfFetchFromSina</span><span class="o">,</span> <span class="n">cfFetchFrom163</span><span class="o">);</span>
        <span class="c1">// 最终结果:</span>
        <span class="n">cfFetch</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">((</span><span class="n">result</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"price: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="c1">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">String</span> <span class="nf">queryCode</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"query code from "</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">"..."</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">100</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="s">"601857"</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">Double</span> <span class="nf">fetchPrice</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">,</span> <span class="nc">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"query price from "</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">"..."</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">long</span><span class="o">)</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">100</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="mi">5</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">20</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>除了<code class="language-plaintext highlighter-rouge">anyOf()</code>可以实现“任意个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>只要一个成功”，<code class="language-plaintext highlighter-rouge">allOf()</code>可以实现“所有<code class="language-plaintext highlighter-rouge">CompletableFuture</code>都必须成功”，这些组合操作可以实现非常复杂的异步流程控制。</p>

<p><code class="language-plaintext highlighter-rouge">CompletableFuture</code>类提供了许多方法来处理异步计算的结果或执行其他操作。以下是一些常用方法：</p>

<h3 id="异步执行指定的任务">异步执行指定的任务</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">static CompletableFuture&lt;Void&gt; runAsync(Runnable runnable)</code>：在默认的 <code class="language-plaintext highlighter-rouge">ForkJoinPool.commonPool()</code> 中<strong>异步执行</strong>指定的<code class="language-plaintext highlighter-rouge">Runnable</code>任务。</li>
  <li><code class="language-plaintext highlighter-rouge">static CompletableFuture&lt;Void&gt; runAsync(Runnable runnable, Executor executor)</code>：在<strong>指定</strong>的<code class="language-plaintext highlighter-rouge">Executor</code>线程池上异步执行<code class="language-plaintext highlighter-rouge">Runnable</code>任务。</li>
  <li><code class="language-plaintext highlighter-rouge">static &lt;U&gt; CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier)</code>：异步执行指定的<code class="language-plaintext highlighter-rouge">Supplier</code>任务，<code class="language-plaintext highlighter-rouge">Supplier</code>任务需返回一个<strong>结果</strong>，该方法会<strong>返回一个包含结果的<code class="language-plaintext highlighter-rouge">CompletableFuture</code>对象</strong>，该对象在<strong>计算完成时</strong>将<strong>返回</strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">static &lt;U&gt; CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier, Executor executor)</code>：在<strong>指定</strong>的<code class="language-plaintext highlighter-rouge">Executor</code>线程池上异步执行<code class="language-plaintext highlighter-rouge">Supplier</code>任务，<code class="language-plaintext highlighter-rouge">Supplier</code>任务需返回一个结果，该方法会返回一个包含结果的<code class="language-plaintext highlighter-rouge">CompletableFuture</code>对象，该对象在计算完成时将返回结果。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<h3 id="执行完成">执行完成</h3>
<p><strong>上个任务执行完成时，再执行给定的方法</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenRun(Runnable action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，执行给定的方法。如果有多个<code class="language-plaintext highlighter-rouge">thenRun()</code>,则一个一个执行。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenRunAsync(Runnable action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，<strong>异步</strong>地执行给定的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenRunAsync(Runnable action, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池异步地运行给定的方法。</li>
</ul>

<p>示例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span><span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);}</span>
        <span class="k">return</span> <span class="mi">10</span><span class="o">;</span>
    <span class="o">});</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRun</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRun</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRunAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRunAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
    <span class="nc">ExecutorService</span> <span class="n">e</span><span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRunAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()),</span><span class="n">e</span><span class="o">);</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">static</span> <span class="kt">void</span> <span class="nf">hi</span><span class="o">(</span><span class="nc">String</span> <span class="n">i</span><span class="o">){</span>
    <span class="k">try</span> <span class="o">{</span><span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"你好:"</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>你好:ForkJoinPool.commonPool-worker-1
你好:ForkJoinPool.commonPool-worker-2
你好:ForkJoinPool.commonPool-worker-3
你好:pool-1-thread-1
你好:ForkJoinPool.commonPool-worker-1
</code></pre></div></div>
<p>打印间隔为：1234行瞬间显示，行间隔1秒后5行显示。如果同时定义了同步和异步，则异步不管同步，而同步排队运行。<code class="language-plaintext highlighter-rouge">thenRun()</code>定义的匿名类实例方法始终在一个线程<code class="language-plaintext highlighter-rouge">ForkJoinPool.commonPool-worker-1</code>上执行。</p>

<p><strong>回调执行时机</strong></p>

<p><code class="language-plaintext highlighter-rouge">thenRun</code>执行的时候，如果任务<strong>没执行完</strong>就注册回调，则<strong>等待任务执行完</strong>再执行回调，如果任务已经执行完了就<strong>直接执行回调</strong>，后续的所有等待<code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时都是这个逻辑。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRun</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRun</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"我是主线程"</span><span class="o">);</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRunAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
    <span class="n">stage</span><span class="o">.</span><span class="na">thenRunAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">hi</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"我是主线程"</span><span class="o">);</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">static</span> <span class="kt">void</span> <span class="nf">hi</span><span class="o">(</span><span class="nc">String</span> <span class="n">i</span><span class="o">){</span>
    <span class="k">try</span> <span class="o">{</span><span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"你好:"</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">你好:</span><span class="n">main</span>
<span class="nl">你好:</span><span class="n">main</span>
<span class="n">我是主线程</span>
<span class="n">我是主线程</span>
<span class="nl">你好:</span><span class="nc">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="mi">1</span>
<span class="nl">你好:</span><span class="nc">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="mi">2</span>
</code></pre></div></div>
<p>打印间隔为1先显示，间隔1秒之后2、3、4行瞬间显示，隔1秒之后5、6行瞬间显示。</p>

<p>因定义<code class="language-plaintext highlighter-rouge">thenRun()</code>时<code class="language-plaintext highlighter-rouge">supplyAsync()</code>已经执行完了，所以直接执行<code class="language-plaintext highlighter-rouge">thenRun()</code>内的方法了，<strong>而且</strong>执行的线程是主线程，并阻塞了主线程，在执行到<code class="language-plaintext highlighter-rouge">thenRunAsync()</code>后正常开线程异步执行。</p>

<p>将其<strong>结果</strong>传入给定的方法执行：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenAccept(Consumer&lt;? super T&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，将其结果传入到给定的方法执行。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenAcceptAsync(Consumer&lt;? super T&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，<strong>异步</strong>执行给定的方法，并将结果传入该方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenAcceptAsync(Consumer&lt;? super T&gt; action, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池，异步执行给定的方法，并将结果传入该方法。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="n">stage</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
</code></pre></div></div>
<p>还<strong>返回结果</strong>：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; thenApply(Function&lt;? super T,? extends U&gt; fn)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，将其结果传入到给定的方法执行，给定的方法还需返回一个值。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; thenApplyAsync(Function&lt;? super T,? extends U&gt; fn)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，<strong>异步</strong>执行给定的方法，并将结果传入该方法，给定的方法还需返回一个值。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; thenApplyAsync(Function&lt;? super T,? extends U&gt; fn, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池，异步执行给定的方法，并将结果传入该方法，给定的方法还需返回一个值。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="n">stage1</span><span class="o">.</span><span class="na">thenApply</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
<span class="n">stage2</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>
<p>还<strong>返回新的<code class="language-plaintext highlighter-rouge">CompletableFuture</code></strong>：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; thenCompose(Function&lt;? super T,? extends CompletionStage&lt;U&gt;&gt; fn)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，将其结果传入到给定的方法执行，给定的方法还需<strong>返回一个新的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code></strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; thenComposeAsync(Function&lt;? super T,? extends CompletionStage&lt;U&gt;&gt; fn)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，<strong>异步</strong>执行给定的方法，并将结果传入该方法，给定的方法还需返回一个新的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; thenComposeAsync(Function&lt;? super T,? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池，异步执行给定的方法，并将结果传入该方法，给定的方法还需返回一个新的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="n">stage1</span><span class="o">.</span><span class="na">thenCompose</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="o">));</span>
<span class="n">stage2</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<h3 id="执行异常">执行异常</h3>
<p><strong>上个任务执行异常时，再执行给定的操作</strong></p>

<p>对于异常，不存在类似<code class="language-plaintext highlighter-rouge">thenRun()</code>的不传参的方法，也不存在类似<code class="language-plaintext highlighter-rouge">thenAccept()</code>的无返回值的方法。这是因为在处理异常时，需要访问异常信息（Throwable）。</p>

<p>将其<strong>异常</strong>传入给定的方法执行：</p>

<p>还<strong>返回结果</strong>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; exceptionally(Function&lt;Throwable,? extends T&gt; fn)</code>：当 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 遇到<strong>异常</strong>时，将异常传入到给定的方法执行，给定的方法还需<strong>返回一个值</strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; exceptionallyAsync(Function&lt;Throwable,? extends T&gt; fn)</code>：当 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 遇到异常时，<strong>异步</strong>执行给定的方法，并将异常传入该方法，给定的方法还需返回一个值。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; exceptionallyAsync(Function&lt;Throwable,? extends T&gt; fn, Executor executor)</code>：当 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 遇到异常时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池，异步执行给定的方法，并将异常传入该方法，给定的方法还需返回一个值。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">new</span> <span class="nc">Random</span><span class="o">().</span><span class="na">nextFloat</span><span class="o">()&lt;</span><span class="mf">0.99</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"异常"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="mi">10</span><span class="o">;</span>
<span class="o">});</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">exc</span> <span class="o">=</span> <span class="n">stage1</span><span class="o">.</span><span class="na">exceptionally</span><span class="o">(</span><span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">throwable</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">});</span>
<span class="n">exc</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>
<p>还<strong>返回新的<code class="language-plaintext highlighter-rouge">CompletableFuture</code></strong>：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; exceptionallyCompose(Function&lt;Throwable,? extends CompletionStage&lt;T&gt;&gt; fn)</code>：当 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 遇到异常时，将异常传入到给定的方法执行，给定的方法还需<strong>返回一个新的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code></strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; exceptionallyComposeAsync(Function&lt;Throwable,? extends CompletionStage&lt;T&gt;&gt; fn)</code>：当 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 遇到异常时，<strong>异步</strong>执行给定的方法，并将异常传入该方法，给定的方法还需返回一个新的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; exceptionallyComposeAsync(Function&lt;Throwable,? extends CompletionStage&lt;T&gt;&gt; fn,Executor executor)</code>：当 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 遇到异常时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池，异步执行给定的方法，并将异常传入该方法，给定的方法还需返回一个新的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">new</span> <span class="nc">Random</span><span class="o">().</span><span class="na">nextFloat</span><span class="o">()&lt;</span><span class="mf">0.99</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"异常"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="mi">10</span><span class="o">;</span>
<span class="o">});</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">exc</span> <span class="o">=</span> <span class="n">stage1</span><span class="o">.</span><span class="na">exceptionallyCompose</span><span class="o">(</span><span class="n">throwable</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">throwable</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="k">return</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()-&gt;</span> <span class="mi">2</span><span class="o">);</span>
<span class="o">});</span>
<span class="n">exc</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<h3 id="执行完成或异常">执行完成或异常</h3>
<p><strong>上个任务执行完成或异常时，再执行给定的操作</strong></p>

<p>同样的对于异常，不存在类似<code class="language-plaintext highlighter-rouge">thenRun()</code>的不传参的方法，但是存在类似<code class="language-plaintext highlighter-rouge">thenAccept()</code>的无返回值的方法，即<code class="language-plaintext highlighter-rouge">whenComplete()</code>。</p>

<p>将其<strong>异常</strong>与<strong>结果</strong>传入给定的方法执行：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; whenComplete(BiConsumer&lt;? super T,? super Throwable&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，将<strong>结果和异常</strong>传入到给定的方法执行。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，<strong>异步</strong>执行给定的方法，并将结果和异常传入该方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt; whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池，异步执行给定的方法，并将结果和异常传入该方法。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">new</span> <span class="nc">Random</span><span class="o">().</span><span class="na">nextFloat</span><span class="o">()&lt;</span><span class="mf">0.5</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"异常"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="mi">10</span><span class="o">;</span>
<span class="o">});</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">whenComplete</span><span class="o">((</span><span class="n">integer</span><span class="o">,</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">throwable</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"没有异常"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integer</span><span class="o">);</span>
    <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
        <span class="n">throwable</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div></div>
<p>这里返回值不是<code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt;</code>，是<code class="language-plaintext highlighter-rouge">CompletableFuture&lt;T&gt;</code>，其结果和 <code class="language-plaintext highlighter-rouge">stage1</code> 的结果相同，不是同一个对象。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">new</span> <span class="nc">Random</span><span class="o">().</span><span class="na">nextFloat</span><span class="o">()&lt;</span><span class="mf">0.5</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"异常"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="mi">10</span><span class="o">;</span>
<span class="o">});</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stage1</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerCompletionStage</span> <span class="o">=</span> <span class="n">stage1</span><span class="o">.</span><span class="na">whenComplete</span><span class="o">((</span><span class="n">integer</span><span class="o">,</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">throwable</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"没有异常"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integer</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">throwable</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerCompletionStage</span><span class="o">);</span>
<span class="n">integerCompletionStage</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="o">});</span>
<span class="n">integerCompletionStage</span><span class="o">.</span><span class="na">exceptionally</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">});</span>
</code></pre></div></div>
<p>控制台：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java.util.concurrent.CompletableFuture@7cd84586[Not completed]
没有异常  
10
java.util.concurrent.CompletableFuture@1e80bfe8[Completed normally]
10
</code></pre></div></div>
<p>还<strong>返回结果</strong>：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; handle(BiFunction&lt;? super T,Throwable,? extends U&gt; fn)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，将<strong>结果和异常</strong>传入到给定的方法执行，给定的方法还需<strong>返回一个值</strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; handleAsync(BiFunction&lt;? super T,Throwable,? extends U&gt; fn)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，<strong>异步</strong>执行给定的方法，并将结果和异常传入该方法，给定的方法还需返回一个值。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; handleAsync(BiFunction&lt;? super T,Throwable,? extends U&gt; fn, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池，异步执行给定的方法，并将结果和异常传入该方法，给定的方法还需返回一个值。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">new</span> <span class="nc">Random</span><span class="o">().</span><span class="na">nextFloat</span><span class="o">()&lt;</span><span class="mf">0.5</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"异常"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="mi">10</span><span class="o">;</span>
<span class="o">});</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">stage1</span><span class="o">.</span><span class="na">handle</span><span class="o">((</span><span class="n">integer</span><span class="o">,</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">throwable</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"没有异常"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integer</span><span class="o">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">throwable</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">});</span>
<span class="n">handle</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>
<h3 id="与操作">与操作</h3>
<p>两个任务都执行完成时，再执行给定的方法。</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; runAfterBoth(CompletionStage&lt;?&gt; other, Runnable action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 和另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，执行给定的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; runAfterBothAsync(CompletionStage&lt;?&gt; other, Runnable action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 和另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，异步地执行给定的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; runAfterBothAsync(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 和另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池异步地运行给定的方法。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">20</span><span class="o">);</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">runAfterBoth</span><span class="o">(</span><span class="n">stage2</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行"</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div></div>
<p>还将其的<strong>两个结果</strong>传入到给定的方法执行：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenAcceptBoth(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 和另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，将<strong>两个结果</strong>传入到给定的方法执行。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenAcceptBothAsync(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 和另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，<strong>异步</strong>地执行给定的方法，并将两个结果传入该方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; thenAcceptBothAsync(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 和另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池异步地运行给定的方法，并将两个结果传入该方法。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">20</span><span class="o">);</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">thenAcceptBoth</span><span class="o">(</span><span class="n">stage2</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">));</span>
<span class="o">});</span>
</code></pre></div></div>
<p><strong>还返回结果：</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;V&gt; thenCombine(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U,? extends V&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> <strong>和</strong>另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> <strong>都</strong>完成时，将<strong>两个结果</strong>传入到给定的方法执行，给定的方法还需<strong>返回一个值</strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;V&gt; thenCombineAsync(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U,? extends V&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 和另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，<strong>异步</strong>地执行给定的方法，并将两个结果传入该方法，给定的方法还需<strong>返回一个值</strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;V&gt; thenCombineAsync(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U,? extends V&gt; action, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 和另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池异步地运行给定的方法，并将两个结果传入该方法，给定的方法还需<strong>返回一个值</strong>。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">20</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage3</span> <span class="o">=</span> <span class="n">stage1</span><span class="o">.</span><span class="na">thenCombine</span><span class="o">(</span><span class="n">stage2</span><span class="o">,</span> <span class="nl">Integer:</span><span class="o">:</span><span class="n">sum</span><span class="o">);</span>
<span class="n">stage3</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>
<h3 id="或操作">或操作</h3>
<p>两个任务中有一个执行完成时，就执行给定的方法：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; runAfterEither(CompletionStage&lt;?&gt; other, Runnable action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 或另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，执行给定的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; runAfterEitherAsync(CompletionStage&lt;?&gt; other, Runnable action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 或另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，异步地执行给定的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; runAfterEitherAsync(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 或另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池异步地运行给定的方法。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">20</span><span class="o">);</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">runAfterEither</span><span class="o">(</span><span class="n">stage2</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"执行"</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div></div>
<p>也将<strong>结果</strong>传入方法：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; acceptEither(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> <strong>或</strong>另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，将结果传入到给定的方法执行。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; acceptEitherAsync(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 或另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，<strong>异步</strong>地执行给定的方法，并将结果传入到给定的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;Void&gt; acceptEitherAsync(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 或另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池异步地运行给定的方法，并将结果传入到给定的方法。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">20</span><span class="o">);</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">acceptEither</span><span class="o">(</span><span class="n">stage2</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div></div>
<p><strong>还返回结果</strong>：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; applyToEither(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> <strong>或</strong>另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，将结果传入到给定的方法执行，给定的方法还需<strong>返回一个值</strong>。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; applyToEitherAsync(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 或另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，<strong>异步</strong>地执行给定的方法，并将结果传入到给定的方法，给定的方法还需返回一个值。</li>
  <li><code class="language-plaintext highlighter-rouge">CompletableFuture&lt;U&gt; applyToEitherAsync(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn, Executor executor)</code>：当此 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 或另一个 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，使用<strong>指定</strong>的 <code class="language-plaintext highlighter-rouge">Executor</code> 线程池异步地运行给定的方法，并将结果传入到给定的方法，给定的方法还需返回一个值。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletionStage</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">20</span><span class="o">);</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">applyToEither</span><span class="o">(</span><span class="n">stage2</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">);</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>
<h3 id="合并操作">合并操作</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">static CompletableFuture&lt;Void&gt; allOf(CompletableFuture&lt;?&gt;... cfs)</code>：返回一个新的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code>，当所有传入的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 都完成时，它也会完成。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">20</span><span class="o">);</span>
<span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Void</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">allOf</span><span class="o">(</span><span class="n">stage1</span><span class="o">,</span> <span class="n">stage2</span><span class="o">);</span>
<span class="n">all</span><span class="o">.</span><span class="na">thenRun</span><span class="o">(()-&gt;{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"两个都执行完了"</span><span class="o">);</span>
<span class="o">});</span>
<span class="c1">// 相当于：</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">runAfterBoth</span><span class="o">(</span><span class="n">stage2</span><span class="o">,()-&gt;{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"两个都执行完了"</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">static CompletableFuture&lt;Object&gt; anyOf(CompletableFuture&lt;?&gt;... cfs)</code>：返回一个新的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code>，当<strong>任意</strong>一个传入的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 完成时，它也会完成，并<strong>返回</strong>完成的 <code class="language-plaintext highlighter-rouge">CompletableFuture</code> 的<strong>结果</strong>。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage1</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stage2</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="mi">20</span><span class="o">);</span>
<span class="nc">CompletableFuture</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">anyOf</span><span class="o">(</span><span class="n">stage1</span><span class="o">,</span> <span class="n">stage2</span><span class="o">);</span>
<span class="n">all</span><span class="o">.</span><span class="na">thenAccept</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="c1">// 相当于：</span>
<span class="n">stage1</span><span class="o">.</span><span class="na">acceptEither</span><span class="o">(</span><span class="n">stage2</span><span class="o">,</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div></div>
<h3 id="总结">总结</h3>
<p><code class="language-plaintext highlighter-rouge">CompletableFuture</code>的方法命名规律如下：</p>
<ol>
  <li>方法名以<code class="language-plaintext highlighter-rouge">then</code>开头，表示该方法会在当前<code class="language-plaintext highlighter-rouge">CompletableFuture</code><strong>完成后</strong>执行。</li>
  <li>方法名以<code class="language-plaintext highlighter-rouge">Run</code>开头，表示该方法会<strong>执行</strong>一个<code class="language-plaintext highlighter-rouge">Runnable</code>而<strong>不返回</strong>结果。</li>
  <li>方法名以<code class="language-plaintext highlighter-rouge">Accept</code>开头，表示该方法会<strong>接受</strong><code class="language-plaintext highlighter-rouge">CompletableFuture</code>的<strong>结果</strong>，传入回调，但回调<strong>不返回</strong>结果。</li>
  <li>方法名以<code class="language-plaintext highlighter-rouge">Apply</code>开头，表示该方法会<strong>接受</strong><code class="language-plaintext highlighter-rouge">CompletableFuture</code>的<strong>结果</strong>，传入回调，回调需返回一个<strong>结果</strong>，该方法会返回一个包含结果的<code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
  <li>方法名包含<code class="language-plaintext highlighter-rouge">Compose</code>，表示该方法会<strong>接受</strong><code class="language-plaintext highlighter-rouge">CompletableFuture</code>的<strong>结果</strong>，传入回调，回调需返回一个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
  <li>方法名包含<code class="language-plaintext highlighter-rouge">Async</code>，表示该方法会<strong>异步执行</strong>。</li>
  <li>方法名以<code class="language-plaintext highlighter-rouge">exceptionally</code>开头，表示该方法会<strong>接受</strong><code class="language-plaintext highlighter-rouge">CompletableFuture</code>的<strong>异常</strong>，并<strong>返回</strong>一个包含结果的<code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
  <li>方法名包含<code class="language-plaintext highlighter-rouge">Complete</code>，表示该方法会<strong>接受</strong><code class="language-plaintext highlighter-rouge">CompletableFuture</code>的<strong>异常和结果</strong>，传入回调执行，但回调<strong>不返回</strong>结果。</li>
  <li>方法名以<code class="language-plaintext highlighter-rouge">handle</code>开头，表示该方法会<strong>接受</strong><code class="language-plaintext highlighter-rouge">CompletableFuture</code>的<strong>异常和结果</strong>，传入回调执行，回调需返回一个结果，该方法会返回一个包含结果的<code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
  <li>方法名包含<code class="language-plaintext highlighter-rouge">Both</code>，表示该方法会等待两个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>都完成才执行回调。</li>
  <li>方法名包含<code class="language-plaintext highlighter-rouge">Combine</code>，表示该方法会等待两个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>都完成才执行回调，并接收它们两个的结果，传入回调，回调需返回一个结果，该方法会返回一个包含结果的<code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
  <li>方法名包含<code class="language-plaintext highlighter-rouge">Either</code>，表示该方法会等待两个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>任意一个完成就执行回调。</li>
  <li>方法名以<code class="language-plaintext highlighter-rouge">applyToEither</code>开头，表示该方法会等待两个<code class="language-plaintext highlighter-rouge">CompletableFuture</code>任意一个完成就执行回调，并将那一个结果，传入回调，回调需返回一个结果，该方法会返回一个包含结果的<code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
  <li>方法名包含<code class="language-plaintext highlighter-rouge">Of</code>，表示该方法是一个静态工厂方法，用于创建<code class="language-plaintext highlighter-rouge">CompletableFuture</code>。</li>
</ol>

<h2 id="forkjoin">ForkJoin</h2>
<p><strong>Java 7</strong>开始引入了一种新的Fork/Join线程池，它可以执行一种特殊的任务：把一个大任务拆成多个小任务并行执行。</p>

<p>如果要计算一个超大数组的和，最简单的做法是用一个循环在一个线程内完成：</p>

<pre><code class="language-ascii">┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
</code></pre>
<p>还有一种方法，可以把数组拆成两部分，分别计算，最后加起来就是最终结果，这样可以用两个线程并行执行：</p>
<pre><code class="language-ascii">┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
</code></pre>
<p>如果拆成两部分还是很大，还可以继续拆，用4个线程并行执行：</p>
<pre><code class="language-ascii">┌─┬─┬─┬─┬─┬─┐
└─┴─┴─┴─┴─┴─┘
┌─┬─┬─┬─┬─┬─┐
└─┴─┴─┴─┴─┴─┘
┌─┬─┬─┬─┬─┬─┐
└─┴─┴─┴─┴─┴─┘
┌─┬─┬─┬─┬─┬─┐
└─┴─┴─┴─┴─┴─┘
</code></pre>
<p>这就是Fork/Join任务的原理：判断一个任务是否足够小，如果是，直接计算，否则，就分拆成几个小任务分别计算。这个过程可以反复“裂变”成一系列小任务。</p>

<p>使用Fork/Join对大数据进行并行求和：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.*</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 创建2000个随机数组成的数组:</span>
        <span class="kt">long</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">2000</span><span class="o">];</span>
        <span class="kt">long</span> <span class="n">expectedSum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">random</span><span class="o">();</span>
            <span class="n">expectedSum</span> <span class="o">+=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected sum: "</span> <span class="o">+</span> <span class="n">expectedSum</span><span class="o">);</span>
        <span class="c1">// fork/join:</span>
        <span class="nc">ForkJoinTask</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SumTask</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">Long</span> <span class="n">result</span> <span class="o">=</span> <span class="nc">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">().</span><span class="na">invoke</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Fork/join sum: "</span> <span class="o">+</span> <span class="n">result</span> <span class="o">+</span> <span class="s">" in "</span> <span class="o">+</span> <span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">)</span> <span class="o">+</span> <span class="s">" ms."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="kd">static</span> <span class="kt">long</span> <span class="nf">random</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">10000</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SumTask</span> <span class="kd">extends</span> <span class="nc">RecursiveTask</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">THRESHOLD</span> <span class="o">=</span> <span class="mi">500</span><span class="o">;</span>
    <span class="kt">long</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">start</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">end</span><span class="o">;</span>
    <span class="nc">SumTask</span><span class="o">(</span><span class="kt">long</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">array</span> <span class="o">=</span> <span class="n">array</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">start</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">end</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Long</span> <span class="nf">compute</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="no">THRESHOLD</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 如果任务足够小,直接计算:</span>
            <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">sum</span> <span class="o">+=</span> <span class="k">this</span><span class="o">.</span><span class="na">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="c1">// 故意放慢计算速度:</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 任务太大,一分为二:</span>
        <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="o">(</span><span class="n">end</span> <span class="o">+</span> <span class="n">start</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"split %d~%d ==&gt; %d~%d, %d~%d"</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">middle</span><span class="o">,</span> <span class="n">middle</span><span class="o">,</span> <span class="n">end</span><span class="o">));</span>
        <span class="nc">SumTask</span> <span class="n">subtask1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SumTask</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">middle</span><span class="o">);</span>
        <span class="nc">SumTask</span> <span class="n">subtask2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SumTask</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">array</span><span class="o">,</span> <span class="n">middle</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
        <span class="n">invokeAll</span><span class="o">(</span><span class="n">subtask1</span><span class="o">,</span> <span class="n">subtask2</span><span class="o">);</span>
        <span class="nc">Long</span> <span class="n">subresult1</span> <span class="o">=</span> <span class="n">subtask1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="nc">Long</span> <span class="n">subresult2</span> <span class="o">=</span> <span class="n">subtask2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="nc">Long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">subresult1</span> <span class="o">+</span> <span class="n">subresult2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"result = "</span> <span class="o">+</span> <span class="n">subresult1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">subresult2</span> <span class="o">+</span> <span class="s">" ==&gt; "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Expected sum: 9788366
split 0~2000 ==&gt; 0~1000, 1000~2000
split 0~1000 ==&gt; 0~500, 500~1000
split 1000~2000 ==&gt; 1000~1500, 1500~2000
result = 2485485 + 2491717 ==&gt; 4977202
result = 2391591 + 2419573 ==&gt; 4811164
result = 4811164 + 4977202 ==&gt; 9788366
Fork/join sum: 9788366 in 1035 ms.
</code></pre></div></div>
<p>一个大的计算任务0~2000首先分裂为两个小任务0~1000和1000~2000，这两个小任务仍然太大，继续分裂为更小的0~500，500~1000，1000~1500，1500~2000，最后，计算结果被依次合并，得到最终结果。</p>

<p>核心代码<code class="language-plaintext highlighter-rouge">SumTask</code>继承自<code class="language-plaintext highlighter-rouge">RecursiveTask</code>，在<code class="language-plaintext highlighter-rouge">compute()</code>方法中，关键是如何“分裂”出子任务并且提交子任务：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SumTask</span> <span class="kd">extends</span> <span class="nc">RecursiveTask</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">Long</span> <span class="nf">compute</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// “分裂”子任务:</span>
        <span class="nc">SumTask</span> <span class="n">subtask1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SumTask</span><span class="o">(...);</span>
        <span class="nc">SumTask</span> <span class="n">subtask2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SumTask</span><span class="o">(...);</span>
        <span class="c1">// invokeAll会并行运行两个子任务:</span>
        <span class="n">invokeAll</span><span class="o">(</span><span class="n">subtask1</span><span class="o">,</span> <span class="n">subtask2</span><span class="o">);</span>
        <span class="c1">// 获得子任务的结果:</span>
        <span class="nc">Long</span> <span class="n">subresult1</span> <span class="o">=</span> <span class="n">subtask1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="nc">Long</span> <span class="n">subresult2</span> <span class="o">=</span> <span class="n">subtask2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="c1">// 汇总结果:</span>
        <span class="k">return</span> <span class="n">subresult1</span> <span class="o">+</span> <span class="n">subresult2</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Fork/Join线程池在Java标准库中就有应用。Java标准库提供的<code class="language-plaintext highlighter-rouge">java.util.Arrays.parallelSort(array)</code>可以进行并行排序，它的原理就是内部通过Fork/Join对大数组分拆进行并行排序，在多核CPU上就可以大大提高排序的速度。</p>

<p>Fork/Join是一种基于“分治”的算法：通过分解任务，并行执行，最后合并结果得到最终结果。</p>

<p><code class="language-plaintext highlighter-rouge">ForkJoinPool</code>线程池可以把一个大任务分拆成小任务并行执行，任务类必须继承自<code class="language-plaintext highlighter-rouge">RecursiveTask</code>或<code class="language-plaintext highlighter-rouge">RecursiveAction</code>。使用Fork/Join模式可以进行并行计算以提高效率。</p>

<p><code class="language-plaintext highlighter-rouge">commonPool()</code>方法的线程数量，实际上是CPU的核数减1，如果自己创建就是自己指定的值；</p>

<p><code class="language-plaintext highlighter-rouge">ForkJoinPool</code>在单核机器上会挂起，通过设置属性可以临时解决：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-Djava</span>.util.concurrent.ForkJoinPool.common.parallelism<span class="o">=</span>1
</code></pre></div></div>
<p>或者在<code class="language-plaintext highlighter-rouge">main()</code>的第一行开始写</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">()&lt;=</span><span class="mi">1</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"java.util.concurrent.ForkJoinPool.common.parallelism"</span><span class="o">,</span><span class="s">"1"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<hr />

<p><strong>常用的方法：</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinPool.commonPool()</code>：返回一个共享的 <code class="language-plaintext highlighter-rouge">ForkJoinPool</code> 实例，用于执行并行任务。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinPool.submit(ForkJoinTask&lt;?&gt; task)</code>：提交一个 <code class="language-plaintext highlighter-rouge">ForkJoinTask</code> 任务给线程池执行，并返回一个 <code class="language-plaintext highlighter-rouge">Future</code> 对象，用于获取任务的结果或取消任务。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinPool.execute(ForkJoinTask&lt;?&gt; task)</code>：立即执行给定的 <code class="language-plaintext highlighter-rouge">ForkJoinTask</code>，不返回任何结果。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinTask.join()</code>：阻塞当前线程直到任务完成，并返回任务的结果。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinTask.fork()</code>：将任务放入工作队列，允许它在另一个线程上执行。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinTask.invoke()</code>：同步执行任务，并返回任务的结果。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinTask.invokeAll(Collection&lt;? extends ForkJoinTask&lt;T&gt;&gt; tasks)</code>：同步执行给定的任务集合，并返回包含所有任务结果的列表。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinTask.isDone()</code>：检查任务是否已经完成。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinTask.isCancelled()</code>：检查任务是否已经被取消。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinTask.cancel(boolean mayInterruptIfRunning)</code>：尝试取消任务的执行。</li>
</ul>

<p><strong>常用的构造方法：</strong></p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinPool()</code>：创建一个新的 <code class="language-plaintext highlighter-rouge">ForkJoinPool</code>，使用默认的线程数和参数。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinPool(int parallelism)</code>：创建一个新的 <code class="language-plaintext highlighter-rouge">ForkJoinPool</code>，指定并行度（即线程数）。通常，线程数等于处理器的数量。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinPool(int parallelism, ForkJoinPool.ForkJoinWorkerThreadFactory factory, UncaughtExceptionHandler handler, boolean asyncMode)</code>：创建一个新的 <code class="language-plaintext highlighter-rouge">ForkJoinPool</code>，允许指定线程数、线程工厂、异常处理器和是否使用异步模式。</li>
  <li><code class="language-plaintext highlighter-rouge">ForkJoinPool(int parallelism, ForkJoinPool.ForkJoinWorkerThreadFactory factory, UncaughtExceptionHandler handler, boolean asyncMode, int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, ForkJoinPool.ForkJoinWorkerThreadFactory hook, boolean system, int mode)</code>：更加灵活的构造方法，允许指定线程数、线程工厂、异常处理器、异步模式、核心池大小、最大池大小、线程保持活跃时间、时间单位、钩子、是否为系统线程以及模式。</li>
</ol>

<h2 id="threadlocal">ThreadLocal</h2>
<p><code class="language-plaintext highlighter-rouge">Thread</code>对象代表一个线程，可以在代码中调用<code class="language-plaintext highlighter-rouge">Thread.currentThread()</code>获取当前线程。<br />
对于多任务，Java标准库提供的线程池可以方便地执行这些任务，同时复用线程。Web应用程序就是典型的多任务应用，每个用户请求页面时，我们都会创建一个任务，类似：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">checkPermission</span><span class="o">();</span>
    <span class="n">doWork</span><span class="o">();</span>
    <span class="n">saveStatus</span><span class="o">();</span>
    <span class="n">sendResponse</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>然后，通过线程池去执行这些任务。<code class="language-plaintext highlighter-rouge">process()</code>方法，内部需要调用若干其他方法，如何在一个线程内传递状态？</p>

<p><code class="language-plaintext highlighter-rouge">process()</code>方法需要传递的状态就是<code class="language-plaintext highlighter-rouge">User</code>实例。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">checkPermission</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="n">doWork</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="n">saveStatus</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="n">sendResponse</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>但是往往一个方法又会调用其他很多方法，这样会导致<code class="language-plaintext highlighter-rouge">User</code>传递到所有地方：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">doWork</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">queryStatus</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="n">checkStatus</span><span class="o">();</span>
    <span class="n">setNewStatus</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="n">log</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>这种在一个线程中，横跨若干方法调用，需要传递的对象，通常称之为上下文（Context），它是一种状态，可以是用户身份、任务信息等。</p>

<p>给每个方法增加一个context参数非常麻烦，而且有些时候，如果调用链有无法修改源码的第三方库，<code class="language-plaintext highlighter-rouge">User</code>对象就传不进去了。</p>

<p>Java标准库提供了一个特殊的<code class="language-plaintext highlighter-rouge">ThreadLocal</code>，它可以在一个线程中传递同<strong>一个</strong>对象。</p>

<p><code class="language-plaintext highlighter-rouge">ThreadLocal</code>实例通常总是以静态字段初始化如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">threadLocalUser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>
<p>它的典型使用方式如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">processUser</span><span class="o">(</span><span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">threadLocalUser</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">step1</span><span class="o">();</span>
        <span class="n">step2</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="n">threadLocalUser</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>通过设置一个<code class="language-plaintext highlighter-rouge">User</code>实例关联到<code class="language-plaintext highlighter-rouge">ThreadLocal</code>中，在移除之前，所有方法都可以随时获取到该<code class="language-plaintext highlighter-rouge">User</code>实例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">step1</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">u</span> <span class="o">=</span> <span class="n">threadLocalUser</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="n">log</span><span class="o">();</span>
    <span class="n">printUser</span><span class="o">();</span>
<span class="o">}</span>
<span class="kt">void</span> <span class="nf">log</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">u</span> <span class="o">=</span> <span class="n">threadLocalUser</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="n">println</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
<span class="o">}</span>
<span class="kt">void</span> <span class="nf">step2</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">u</span> <span class="o">=</span> <span class="n">threadLocalUser</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="n">checkUser</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>普通的方法调用一定是同一个线程执行的，所以，<code class="language-plaintext highlighter-rouge">step1()</code>、<code class="language-plaintext highlighter-rouge">step2()</code>以及<code class="language-plaintext highlighter-rouge">log()</code>方法内，<code class="language-plaintext highlighter-rouge">threadLocalUser.get()</code>获取的<code class="language-plaintext highlighter-rouge">User</code>对象是同一个实例。</p>

<p>实际上，可以把<code class="language-plaintext highlighter-rouge">ThreadLocal</code>看成一个全局<code class="language-plaintext highlighter-rouge">Map&lt;Thread, Object&gt;</code>：每个线程获取<code class="language-plaintext highlighter-rouge">ThreadLocal</code>变量时，总是使用<code class="language-plaintext highlighter-rouge">Thread</code>自身作为key：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Object</span> <span class="n">threadLocalValue</span> <span class="o">=</span> <span class="n">threadLocalMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">());</span>
</code></pre></div></div>
<p>因此，<code class="language-plaintext highlighter-rouge">ThreadLocal</code>相当于给每个线程都开辟了一个独立的存储空间，各个线程的<code class="language-plaintext highlighter-rouge">ThreadLocal</code>关联的实例互不干扰。</p>

<p>最后，特别注意<code class="language-plaintext highlighter-rouge">ThreadLocal</code>一定要在<code class="language-plaintext highlighter-rouge">finally</code>中清除：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="n">threadLocalUser</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">...</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="n">threadLocalUser</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>这是因为当前线程执行完相关代码后，很可能会被重新放入线程池中，如果<code class="language-plaintext highlighter-rouge">ThreadLocal</code>没有被清除，该线程执行其他代码时，会把上一次的状态带进去。</p>

<p>为了保证能释放<code class="language-plaintext highlighter-rouge">ThreadLocal</code>关联的实例，可以通过<code class="language-plaintext highlighter-rouge">AutoCloseable</code>接口配合<code class="language-plaintext highlighter-rouge">try (resource) {...}</code>结构，让编译器自动为我们关闭。例如，一个保存了当前用户名的<code class="language-plaintext highlighter-rouge">ThreadLocal</code>可以封装为一个<code class="language-plaintext highlighter-rouge">UserContext</code>对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserContext</span> <span class="kd">implements</span> <span class="nc">AutoCloseable</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="nf">UserContext</span><span class="o">(</span><span class="nc">String</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">currentUser</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>使用的时候，借助<code class="language-plaintext highlighter-rouge">try (resource) {...}</code>结构，可以这么写：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UserContext</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">))</span> <span class="o">{</span>
    <span class="c1">// 可任意调用UserContext.currentUser():</span>
    <span class="nc">String</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="nc">UserContext</span><span class="o">.</span><span class="na">currentUser</span><span class="o">();</span>
<span class="o">}</span> <span class="c1">// 在此自动调用UserContext.close()方法释放ThreadLocal关联对象</span>
</code></pre></div></div>
<p>这样就在<code class="language-plaintext highlighter-rouge">UserContext</code>中完全封装了<code class="language-plaintext highlighter-rouge">ThreadLocal</code>，外部代码在<code class="language-plaintext highlighter-rouge">try (resource) {...}</code>内部可以随时调用<code class="language-plaintext highlighter-rouge">UserContext.currentUser()</code>获取当前线程绑定的用户名。</p>

<p><code class="language-plaintext highlighter-rouge">ThreadLocal</code>表示线程的“局部变量”，它确保每个线程的<code class="language-plaintext highlighter-rouge">ThreadLocal</code>变量都是各自独立的；</p>

<p><code class="language-plaintext highlighter-rouge">ThreadLocal</code>适合在一个线程的处理流程中保持上下文（避免了同一参数在所有方法中传递）；</p>

<p>使用<code class="language-plaintext highlighter-rouge">ThreadLocal</code>要用<code class="language-plaintext highlighter-rouge">try ... finally</code>结构，并在<code class="language-plaintext highlighter-rouge">finally</code>中清除。</p>

<p>实际上<code class="language-plaintext highlighter-rouge">ThreadLocal</code>本身不会存储任何数据，<code class="language-plaintext highlighter-rouge">ThreadLocal.set</code>方法是将值存储到<code class="language-plaintext highlighter-rouge">Thread</code>线程本身的<code class="language-plaintext highlighter-rouge">ThreadLocalMap</code>里面了。如果线程执行完毕就死亡了，实时上是不需要调用<code class="language-plaintext highlighter-rouge">ThreadLocal</code>的<code class="language-plaintext highlighter-rouge">remove</code>方法的。因为<code class="language-plaintext highlighter-rouge">ThreadLocalMap</code>是属于线程对象的，线程都死亡了，<code class="language-plaintext highlighter-rouge">ThreadLocalMap</code>里面存的值自然就不存在了。但是，真正的项目开发中基本上都是从线程池里面获取线程的，所以线程执行完<strong>并不会死亡</strong>，而是会被线程池复用。</p>

<h2 id="虚拟线程">虚拟线程</h2>
<p>虚拟线程（Virtual Thread）是<strong>Java 19</strong>引入的一种轻量级线程，它在很多其他语言中被称为协程、纤程、绿色线程、用户态线程等。</p>

<p>在理解虚拟线程前，先回顾一下线程的特点：</p>

<ul>
  <li>线程是由操作系统创建并调度的资源；</li>
  <li>线程切换会耗费大量CPU时间；</li>
  <li>一个系统能同时调度的线程数量是有限的，通常在几百至几千级别。</li>
</ul>

<p>因此，说线程是一种重量级资源。在服务器端，对用户请求，通常都实现为一个线程处理一个请求。由于用户的请求数往往远超操作系统能同时调度的线程数量，所以通常使用线程池来尽量减少频繁创建和销毁线程的成本。</p>

<p>对于需要处理大量IO请求的任务来说，使用线程是低效的，因为一旦读写IO，线程就必须进入等待状态，直到IO数据返回。常见的IO操作包括：</p>

<ul>
  <li>读写文件；</li>
  <li>读写网络，例如HTTP请求；</li>
  <li>读写数据库，本质上是通过JDBC实现网络调用。</li>
</ul>

<p>一个处理HTTP请求的线程，它在读写网络、文件的时候就会进入等待状态：</p>
<pre><code class="language-ascii">Begin
────────
Blocking ──▶ Read HTTP Request
Wait...
Wait...
Wait...
────────
Running
────────
Blocking ──▶ Read Config File
Wait...
────────
Running
────────
Blocking ──▶ Read Database
Wait...
Wait...
Wait...
────────
Running
────────
Blocking ──▶ Send HTTP Response
Wait...
Wait...
────────
End
</code></pre>
<p>真正由CPU执行的代码消耗的时间非常少，线程的大部分时间都在等待IO。我们把这类任务称为IO密集型任务。</p>

<p>为了能高效执行IO密集型任务，Java从<strong>19</strong>开始引入了虚拟线程。虚拟线程的接口和普通线程是一样的，但是执行方式不一样。虚拟线程不是由操作系统调度，而是由普通线程调度，即成百上千个虚拟线程可以由一个普通线程调度。任何时刻，只能执行一个虚拟线程，但是，一旦该虚拟线程执行一个IO操作进入等待时，它会被立刻“挂起”，然后执行下一个虚拟线程。什么时候IO数据返回了，这个挂起的虚拟线程才会被再次调度。因此，若干个虚拟线程可以在一个普通线程中交替运行：</p>

<pre><code class="language-ascii">Begin
───────────
V1 Runing
V1 Blocking ──▶ Read HTTP Request
───────────
V2 Runing
V2 Blocking ──▶ Read HTTP Request
───────────
V3 Runing
V3 Blocking ──▶ Read HTTP Request
───────────
V1 Runing
V1 Blocking ──▶ Read Config File
───────────
V2 Runing
V2 Blocking ──▶ Read Database
───────────
V1 Runing
V1 Blocking ──▶ Read Database
───────────
V3 Runing
V3 Blocking ──▶ Read Database
───────────
V2 Runing
V2 Blocking ──▶ Send HTTP Response
───────────
V1 Runing
V1 Blocking ──▶ Send HTTP Response
───────────
V3 Runing
V3 Blocking ──▶ Send HTTP Response
───────────
End
</code></pre>
<p>如果单独看一个虚拟线程的代码，在一个方法中：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">register</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">config</span> <span class="o">=</span> <span class="n">readConfigFile</span><span class="o">(</span><span class="s">"./config.json"</span><span class="o">);</span> <span class="c1">// #1</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">useFullName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">firstName</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="na">lastName</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">insertInto</span><span class="o">(</span><span class="n">db</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span> <span class="c1">// #2</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">cache</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">redis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span> <span class="c1">// #3</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>涉及到IO读写的#1、#2、#3处，执行到这些地方的时候（进入相关的JNI方法内部时）会自动挂起，并切换到其他虚拟线程执行。等到数据返回后，当前虚拟线程会再次调度并执行，因此，代码看起来是同步执行，但实际上是异步执行的。</p>

<p><strong>使用虚拟线程</strong>
虚拟线程的接口和普通线程一样，唯一区别在于创建虚拟线程只能通过特定方法。</p>

<p>方法一：直接创建虚拟线程并运行：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 传入Runnable实例并立刻运行:</span>
<span class="nc">Thread</span> <span class="n">vt</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">startVirtualThread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Start virtual thread..."</span><span class="o">);</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"End virtual thread."</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div></div>
<p>方法二：创建虚拟线程但不自动运行，而是手动调用<code class="language-plaintext highlighter-rouge">start()</code>开始运行：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建VirtualThread:</span>
<span class="nc">Thread</span><span class="o">.</span><span class="na">ofVirtual</span><span class="o">().</span><span class="na">unstarted</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Start virtual thread..."</span><span class="o">);</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"End virtual thread."</span><span class="o">);</span>
<span class="o">});</span>
<span class="c1">// 运行:</span>
<span class="n">vt</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>
<p>方法三：通过虚拟线程的<code class="language-plaintext highlighter-rouge">ThreadFactory</code>创建虚拟线程，然后手动调用<code class="language-plaintext highlighter-rouge">start()</code>开始运行：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建ThreadFactory:</span>
<span class="nc">ThreadFactory</span> <span class="n">tf</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">ofVirtual</span><span class="o">().</span><span class="na">factory</span><span class="o">();</span>
<span class="c1">// 创建VirtualThread:</span>
<span class="nc">Thread</span> <span class="n">vt</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="na">newThread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Start virtual thread..."</span><span class="o">);</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"End virtual thread."</span><span class="o">);</span>
<span class="o">});</span>
<span class="c1">// 运行:</span>
<span class="n">vt</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</code></pre></div></div>
<p>直接调用<code class="language-plaintext highlighter-rouge">start()</code>实际上是由<code class="language-plaintext highlighter-rouge">ForkJoinPool</code>的线程来调度的。也可以自己创建调度线程，然后运行虚拟线程：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建调度器:</span>
<span class="nc">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newVirtualThreadPerTaskExecutor</span><span class="o">();</span>
<span class="c1">// 创建大量虚拟线程并调度:</span>
<span class="nc">ThreadFactory</span> <span class="n">tf</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">ofVirtual</span><span class="o">().</span><span class="na">factory</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">Thread</span> <span class="n">vt</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="na">newThread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="o">...</span> <span class="o">});</span>
    <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">vt</span><span class="o">);</span>
    <span class="c1">// 也可以直接传入Runnable或Callable:</span>
    <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Start virtual thread..."</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"End virtual thread."</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">});</span>
<span class="o">}</span>
</code></pre></div></div>
<p>由于虚拟线程属于非常轻量级的资源，因此，用时创建，用完就扔，不要池化虚拟线程。</p>

<p>最后注意，虚拟线程在<strong>Java 21</strong>正式发布，在<strong>Java 19/20</strong>是预览功能，默认关闭，需要添加参数<code class="language-plaintext highlighter-rouge">--enable-preview</code>启用：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">--source</span> 19 <span class="nt">--enable-preview</span> Main.java
</code></pre></div></div>
<p><strong>使用限制</strong></p>

<p>只有以虚拟线程方式运行的代码，才会在执行IO操作时自动被挂起并切换到其他虚拟线程。普通线程的IO操作仍然会等待，例如，我们在<code class="language-plaintext highlighter-rouge">main()</code>方法中读写文件，是不会有调度和自动挂起的。</p>

<p>可以自动引发调度切换的操作包括：</p>

<ul>
  <li>文件IO；</li>
  <li>网络IO；</li>
  <li>使用<code class="language-plaintext highlighter-rouge">Concurrent</code>库引发等待；</li>
  <li><code class="language-plaintext highlighter-rouge">Thread.sleep()</code>操作。</li>
</ul>

<p>这是因为JDK为了实现虚拟线程，已经对底层相关操作进行了修改，这样应用层的Java代码无需修改即可使用虚拟线程。无法自动切换的JavaScript语言需要用户手动调用<code class="language-plaintext highlighter-rouge">await</code>来实现异步操作：</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">doWork</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">readFile</span><span class="p">();</span>
    <span class="k">await</span> <span class="nx">sendNetworkData</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>在虚拟线程中，如果绕过JDK的IO接口，直接通过JNI读写文件或网络是无法实现调度的。此外，在<code class="language-plaintext highlighter-rouge">synchronized</code>块内部也无法调度。</p>

<p><strong>Java 19</strong>引入的虚拟线程是为了解决IO密集型任务的吞吐量，它可以高效通过少数线程去调度大量虚拟线程；</p>

<p>虚拟线程在执行到IO操作或Blocking操作时，会自动切换到其他虚拟线程执行，从而避免当前线程等待，能最大化线程的执行效率；</p>

<p>虚拟线程使用普通线程相同的接口，最大的好处是无需修改任何代码，就可以将现有的IO操作异步化获得更大的吞吐能力。</p>

<p>计算密集型任务不应使用虚拟线程，只能通过增加CPU核心解决，或者利用分布式计算资源。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">加密与安全</title><link href="/2024/04/14/%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%AE%89%E5%85%A8/" rel="alternate" type="text/html" title="加密与安全" /><published>2024-04-14T00:00:00+08:00</published><updated>2024-04-14T00:00:00+08:00</updated><id>/2024/04/14/%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%AE%89%E5%85%A8</id><content type="html" xml:base="/2024/04/14/%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%AE%89%E5%85%A8/"><![CDATA[<h1 id="引言">引言</h1>
<p>Base64编码、URL编码、哈希算法、对称加密算法、口令加密算法、 密钥交换算法、 非对称加密算法、签名算法、数字证书。</p>

<h1 id="加密与安全">加密与安全</h1>

<h2 id="编码">编码</h2>

<p>ASCII码就是一种编码，字母<code class="language-plaintext highlighter-rouge">A</code>的编码是十六进制的<code class="language-plaintext highlighter-rouge">0x41</code>，字母<code class="language-plaintext highlighter-rouge">B</code>是<code class="language-plaintext highlighter-rouge">0x42</code>，以此类推。因为ASCII编码最多只能有128个字符，要想对更多的文字进行编码，就需要用Unicode。而中文的中使用Unicode编码就是<code class="language-plaintext highlighter-rouge">0x4e2d</code>，使用UTF-8则需要3个字节编码。因此，最简单的编码是直接给每个字符指定一个若干字节表示的整数，复杂一点的编码就需要根据一个已有的编码推算出来。</p>

<p>比如UTF-8编码，它是一种不定长编码，但可以从给定字符的Unicode编码推算出来。</p>

<h3 id="url编码">URL编码</h3>

<p>URL编码是浏览器发送数据给服务器时使用的编码，它通常附加在URL的参数部分</p>

<p>之所以需要URL编码，是因为出于兼容性考虑，很多服务器只识别ASCII字符。但如果URL中包含中文、日文这些非ASCII字符怎么办？不要紧，URL编码有一套规则：</p>

<ul>
  <li>如果字符是<code class="language-plaintext highlighter-rouge">A</code>~<code class="language-plaintext highlighter-rouge">Z</code>，<code class="language-plaintext highlighter-rouge">a</code>~<code class="language-plaintext highlighter-rouge">z</code>，<code class="language-plaintext highlighter-rouge">0</code>~<code class="language-plaintext highlighter-rouge">9</code>以及<code class="language-plaintext highlighter-rouge">-</code>、<code class="language-plaintext highlighter-rouge">_</code>、<code class="language-plaintext highlighter-rouge">.</code>、<code class="language-plaintext highlighter-rouge">*</code>，则保持不变；</li>
  <li>如果是其他字符，先转换为UTF-8编码，然后对每个字节以<code class="language-plaintext highlighter-rouge">%XX</code>表示。</li>
</ul>

<p>例如：字符<code class="language-plaintext highlighter-rouge">中</code>的UTF-8编码是<code class="language-plaintext highlighter-rouge">0xe4b8ad</code>，因此，它的URL编码是<code class="language-plaintext highlighter-rouge">%E4%B8%AD</code>。URL编码总是大写。</p>

<p>Java标准库提供了一个<code class="language-plaintext highlighter-rouge">URLEncoder</code>类来对任意字符串进行URL编码，而<code class="language-plaintext highlighter-rouge">URLDecoder则</code>可以解码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">encoded</span> <span class="o">=</span> <span class="nc">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="s">"中 文!"</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">encoded</span><span class="o">);</span><span class="c1">//%E4%B8%AD+%E6%96%87%21</span>
<span class="nc">String</span> <span class="n">decoded</span> <span class="o">=</span> <span class="nc">URLDecoder</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">encoded</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">decoded</span><span class="o">);</span><span class="c1">//中 文!</span>
</code></pre></div></div>

<p><strong>和标准的URL编码稍有不同，<code class="language-plaintext highlighter-rouge">URLEncoder</code>把空格字符编码成<code class="language-plaintext highlighter-rouge">+</code></strong>，而现在的URL编码标准要求空格被编码为<code class="language-plaintext highlighter-rouge">%20</code>，不过，服务器都可以处理这两种情况。</p>

<h3 id="base64编码">Base64编码</h3>

<p>Base64编码可以把任意长度的二进制数据变为纯文本，且只包含<code class="language-plaintext highlighter-rouge">A</code>~<code class="language-plaintext highlighter-rouge">Z</code>、<code class="language-plaintext highlighter-rouge">a</code>~<code class="language-plaintext highlighter-rouge">z</code>、<code class="language-plaintext highlighter-rouge">0</code>~<code class="language-plaintext highlighter-rouge">9</code>、<code class="language-plaintext highlighter-rouge">+</code>、<code class="language-plaintext highlighter-rouge">/</code>、<code class="language-plaintext highlighter-rouge">=</code>这些字符。它的原理是把3字节的二进制数据按6bit一组，用4个<code class="language-plaintext highlighter-rouge">int</code>整数表示，然后查表，把<code class="language-plaintext highlighter-rouge">int</code>整数用索引对应到字符，得到编码后的字符串。</p>

<p>举个例子：3个byte数据分别是<code class="language-plaintext highlighter-rouge">ff</code>、<code class="language-plaintext highlighter-rouge">e0</code>、<code class="language-plaintext highlighter-rouge">1</code>，按6bit分组得到<code class="language-plaintext highlighter-rouge">39</code>、<code class="language-plaintext highlighter-rouge">0b</code>、<code class="language-plaintext highlighter-rouge">22</code>和<code class="language-plaintext highlighter-rouge">2d</code>：</p>

<pre><code class="language-ascii">┌───────────────┬───────────────┬───────────────┐
│      ff       │      e0       │       1       │
└───────────────┴───────────────┴───────────────┘
┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
│1│1│1│1│1│1│1│1│1│1│1│0│0│0│0│0│0│0│0│0│0│0│0│1│
└─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘
┌───────────┬───────────┬───────────┬───────────┐
│    63     │    62     │     0     │     1     │
└───────────┴───────────┴───────────┴───────────┘
</code></pre>

<p>因为6位整数的范围总是<code class="language-plaintext highlighter-rouge">0</code>~<code class="language-plaintext highlighter-rouge">63</code>，所以，能用64个字符表示：字符<code class="language-plaintext highlighter-rouge">A</code>~<code class="language-plaintext highlighter-rouge">Z</code>对应索引<code class="language-plaintext highlighter-rouge">0</code>~<code class="language-plaintext highlighter-rouge">25</code>，字符<code class="language-plaintext highlighter-rouge">a</code>~<code class="language-plaintext highlighter-rouge">z</code>对应索引<code class="language-plaintext highlighter-rouge">26</code>~<code class="language-plaintext highlighter-rouge">51</code>，字符<code class="language-plaintext highlighter-rouge">0</code>~<code class="language-plaintext highlighter-rouge">9</code>对应索引<code class="language-plaintext highlighter-rouge">52</code>~<code class="language-plaintext highlighter-rouge">61</code>，最后两个索引<code class="language-plaintext highlighter-rouge">62</code>、<code class="language-plaintext highlighter-rouge">63</code>分别用字符<code class="language-plaintext highlighter-rouge">+</code>和<code class="language-plaintext highlighter-rouge">/</code>表示。</p>

<p>所以对于<code class="language-plaintext highlighter-rouge">ff</code>、<code class="language-plaintext highlighter-rouge">e0</code>、<code class="language-plaintext highlighter-rouge">1</code>，首先变成：<code class="language-plaintext highlighter-rouge">63</code>、<code class="language-plaintext highlighter-rouge">62</code>、<code class="language-plaintext highlighter-rouge">0</code>、<code class="language-plaintext highlighter-rouge">1</code>，再根据表转换为：<code class="language-plaintext highlighter-rouge">/</code>、<code class="language-plaintext highlighter-rouge">+</code>、<code class="language-plaintext highlighter-rouge">A</code>、<code class="language-plaintext highlighter-rouge">B</code>。</p>

<p>如果输入的<code class="language-plaintext highlighter-rouge">byte[]</code>数组长度不是3的整数倍肿么办？这种情况下，需要对输入的末尾补一个或两个<code class="language-plaintext highlighter-rouge">0x00</code>，编码后，在结尾加一个<code class="language-plaintext highlighter-rouge">=</code>表示补充了1个<code class="language-plaintext highlighter-rouge">0x00</code>，加两个<code class="language-plaintext highlighter-rouge">=</code>表示补充了2个<code class="language-plaintext highlighter-rouge">0x00</code>，解码的时候，去掉末尾补充的一个或两个<code class="language-plaintext highlighter-rouge">0x00</code>即可。</p>

<p>实际上，因为编码后的长度加上<code class="language-plaintext highlighter-rouge">=</code>总是4的倍数，所以即使不加<code class="language-plaintext highlighter-rouge">=</code>也可以计算出原始输入的<code class="language-plaintext highlighter-rouge">byte[]</code>。Base64编码的时候<strong>可以</strong>用<code class="language-plaintext highlighter-rouge">withoutPadding()</code>去掉<code class="language-plaintext highlighter-rouge">=</code>，解码出来的结果是一样的。</p>

<p>在Java中，二进制数据就是<code class="language-plaintext highlighter-rouge">byte[]</code>数组。Java标准库提供了<code class="language-plaintext highlighter-rouge">Base64</code>来对<code class="language-plaintext highlighter-rouge">byte[]</code>数组进行编解码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"中 文!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">b64encoded</span> <span class="o">=</span> <span class="nc">Base64</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">().</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b64encoded</span><span class="o">);</span><span class="c1">//5LitIOaWhyE=</span>
<span class="kt">byte</span><span class="o">[]</span> <span class="n">output</span> <span class="o">=</span> <span class="nc">Base64</span><span class="o">.</span><span class="na">getDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">b64encoded</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">s</span><span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">output</span><span class="o">,</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span><span class="c1">//中 文!</span>
</code></pre></div></div>

<p>因为标准的Base64编码会出现<code class="language-plaintext highlighter-rouge">+</code>、<code class="language-plaintext highlighter-rouge">/</code>和<code class="language-plaintext highlighter-rouge">=</code>，所以不适合把Base64编码后的字符串放到URL中。一种针对URL的Base64编码可以在URL中使用的Base64编码，它仅仅是把<code class="language-plaintext highlighter-rouge">+</code>变成<code class="language-plaintext highlighter-rouge">-</code>，<code class="language-plaintext highlighter-rouge">/</code>变成<code class="language-plaintext highlighter-rouge">_</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0xFF</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0xE0</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0x1</span><span class="o">};</span>

<span class="nc">String</span> <span class="n">b64encoded</span> <span class="o">=</span> <span class="nc">Base64</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">().</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b64encoded</span><span class="o">);</span><span class="c1">///+AB</span>
<span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="nc">Base64</span><span class="o">.</span><span class="na">getDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">b64encoded</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span><span class="c1">//[-1, -32, 1]</span>

<span class="nc">String</span> <span class="n">b64encoded2</span> <span class="o">=</span> <span class="nc">Base64</span><span class="o">.</span><span class="na">getUrlEncoder</span><span class="o">().</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b64encoded2</span><span class="o">);</span><span class="c1">//_-AB</span>
<span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="nc">Base64</span><span class="o">.</span><span class="na">getUrlDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">b64encoded2</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span><span class="c1">//[-1, -32, 1]</span>
</code></pre></div></div>

<p>Base64编码的缺点是传输效率会降低，因为它把原始数据的长度增加了1/3。</p>

<p>Base64 编码将每 6 位原始数据编码为 8 位字符（即 1 字节），因此会使数据长度增加约 1/3。这是因为 每 3 个字节原始数据编码后变为 4 个字节的 Base64 字符串。</p>

<h2 id="哈希算法">哈希算法</h2>

<p>哈希算法（Hash）又称<strong>摘要算法</strong>（Digest），它的作用是：对任意一组输入数据进行计算，得到一个<strong>固定长度</strong>的输出<strong>摘要</strong>。</p>

<p>哈希算法最重要的特点就是：</p>

<ul>
  <li>相同的输入<strong>一定</strong>得到相同的输出；</li>
  <li>不同的输入<strong>大概率</strong>得到不同的输出。</li>
</ul>

<p>哈希算法的目的就是为了验证原始数据是否被篡改。</p>

<p>Java字符串的<code class="language-plaintext highlighter-rouge">hashCode()</code>就是一个哈希算法，它的输入是任意字符串，输出是固定的4字节<code class="language-plaintext highlighter-rouge">int</code>整数。</p>

<h3 id="哈希碰撞">哈希碰撞</h3>

<p>哈希碰撞是指，两个不同的输入得到了相同的输出。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%X\n"</span><span class="o">,</span><span class="s">"AaAaAa"</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span> <span class="c1">// 0x7460E8C0</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%X\n"</span><span class="o">,</span><span class="s">"BBAaBB"</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span> <span class="c1">// 0x7460E8C0</span>
</code></pre></div></div>

<p>碰撞是一定会出现的，因为输出的字节长度是固定的，<code class="language-plaintext highlighter-rouge">String</code>的<code class="language-plaintext highlighter-rouge">hashCode()</code>输出是4字节整数，最多只有4294967296种输出，但输入的数据长度是不固定的，有无数种输入。所以，哈希算法是把一个无限的输入集合映射到一个有限的输出集合，必然会产生碰撞。</p>

<p>碰撞不可怕，我们担心的不是碰撞，而是碰撞的概率，因为碰撞概率的高低关系到哈希算法的安全性。一个安全的哈希算法必须满足：</p>

<ul>
  <li>碰撞概率低；</li>
  <li>不能猜测输出。</li>
</ul>

<p>常用的哈希算法有：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">算法</th>
      <th style="text-align: left">输出长度（位）</th>
      <th style="text-align: left">输出长度（字节）</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">MD5</td>
      <td style="text-align: left">128 bits</td>
      <td style="text-align: left">16 bytes</td>
    </tr>
    <tr>
      <td style="text-align: left">SHA-1</td>
      <td style="text-align: left">160 bits</td>
      <td style="text-align: left">20 bytes</td>
    </tr>
    <tr>
      <td style="text-align: left">RipeMD-160</td>
      <td style="text-align: left">160 bits</td>
      <td style="text-align: left">20 bytes</td>
    </tr>
    <tr>
      <td style="text-align: left">SHA-256</td>
      <td style="text-align: left">256 bits</td>
      <td style="text-align: left">32 bytes</td>
    </tr>
    <tr>
      <td style="text-align: left">SHA-512</td>
      <td style="text-align: left">512 bits</td>
      <td style="text-align: left">64 bytes</td>
    </tr>
  </tbody>
</table>

<p>根据碰撞概率，哈希算法的输出长度越长，就越难产生碰撞，也就越安全。以MD5算法为例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个MessageDigest实例:</span>
<span class="nc">MessageDigest</span> <span class="n">md</span> <span class="o">=</span> <span class="nc">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"MD5"</span><span class="o">);</span>
<span class="c1">// 反复调用update,输入数据:</span>
<span class="n">md</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
<span class="n">md</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"World"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
<span class="kt">byte</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">md</span><span class="o">.</span><span class="na">digest</span><span class="o">();</span> <span class="c1">// 16 bytes: 68e109f0f40ca72a15e05cc22786f8e6</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">result</span><span class="o">).</span><span class="na">toString</span><span class="o">(</span><span class="mi">16</span><span class="o">));</span>
</code></pre></div></div>

<p>首先根据哈希算法获取一个<code class="language-plaintext highlighter-rouge">MessageDigest</code>实例，然后，反复调用<code class="language-plaintext highlighter-rouge">update(byte[])</code>输入数据。当输入结束后，调用<code class="language-plaintext highlighter-rouge">digest()</code>方法获得byte[]数组表示的摘要，最后，把它转换为十六进制的字符串。</p>

<h3 id="biginteger的坑"><code class="language-plaintext highlighter-rouge">BigInteger</code>的坑</h3>

<p><strong>注意：如果<code class="language-plaintext highlighter-rouge">result</code>前面有0会在转换为<code class="language-plaintext highlighter-rouge">BigInteger</code>时丢失</strong>，因为<code class="language-plaintext highlighter-rouge">BigInteger</code>类在处理字符串时会忽略前导零，因为在数值上它们没有意义。</p>

<p>如果需要保留前导零，可以使用其他方法，如使用<code class="language-plaintext highlighter-rouge">printf</code>格式化补0到指定位数输出，或者直接使用字节数组。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.math.BigInteger</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">hexString</span> <span class="o">=</span> <span class="s">"000005bd4639f848dd8ed27f1b3f6b0d"</span><span class="o">;</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">result</span><span class="o">=</span><span class="n">hexStringToByteArray</span><span class="o">(</span><span class="n">hexString</span><span class="o">);</span>
        <span class="c1">//5bd4639f848dd8ed27f1b3f6b0d</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="n">result</span><span class="o">).</span><span class="na">toString</span><span class="o">(</span><span class="mi">16</span><span class="o">));</span>
        <span class="c1">//如果知道输出的位数，可以使用printf：000005bd4639f848dd8ed27f1b3f6b0d</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%032x\n"</span><span class="o">,</span><span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="n">result</span><span class="o">));</span>
        <span class="c1">//还可以这样直接传入16进制字符串：000005bd4639f848dd8ed27f1b3f6b0d</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%032x\n"</span><span class="o">,</span><span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="n">hexString</span><span class="o">,</span><span class="mi">16</span><span class="o">));</span>
        <span class="c1">//如果不知道，就直接用字节数组吧：000005bd4639f848dd8ed27f1b3f6b0d</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 16进制字符串转换为字节数组。
     * @param hexString 16进制字符串
     * @return 字节数组
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">hexStringToByteArray</span><span class="o">(</span><span class="nc">String</span> <span class="n">hexString</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">hexString</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">byteArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">len</span> <span class="o">/</span> <span class="mi">2</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">byteArray</span><span class="o">[</span><span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="o">(</span>
                    <span class="o">(</span><span class="nc">Character</span><span class="o">.</span><span class="na">digit</span><span class="o">(</span><span class="n">hexString</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="mi">16</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="o">)</span>
                    <span class="o">+</span> <span class="nc">Character</span><span class="o">.</span><span class="na">digit</span><span class="o">(</span><span class="n">hexString</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">),</span> <span class="mi">16</span><span class="o">)</span>
            <span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">byteArray</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="用途">用途</h3>

<p>因为相同的输入永远会得到相同的输出，因此，如果输入被修改了，得到的输出就会不同。</p>

<p>在网站上下载软件的时候，经常看到下载页显示的哈希，如何判断下载到本地的软件是原始的、未经篡改的文件？只需要自己计算一下下载到本地的文件的哈希值，再与官网公开的哈希值对比，如果相同，说明文件下载正确，否则，说明文件已被篡改。</p>

<p>哈希算法的另一个重要用途是存储用户口令。如果直接将用户的原始口令存放到数据库中，会产生极大的安全风险：数据库管理员能够看到用户明文口令；数据库数据一旦泄漏，黑客即可获取用户明文口令。</p>

<p>不存储用户的原始口令，那么如何对用户进行认证？方法是存储用户口令的哈希，例如，MD5。在用户输入原始口令后，系统计算用户输入的原始口令的MD5并与数据库存储的MD5对比，如果一致，说明口令正确，否则，口令错误。</p>

<p>这样一来，数据库管理员看不到用户的原始口令。即使数据库泄漏，黑客也无法拿到用户的原始口令。想要拿到用户的原始口令，必须用暴力穷举的方法，一个口令一个口令地试，直到某个口令计算的MD5恰好等于指定值。</p>

<p>使用哈希口令时，还要注意防止彩虹表攻击。如果只拿到MD5，从MD5反推明文口令，只能使用暴力穷举的方法。然而黑客并不笨，暴力穷举会消耗大量的算力和时间。但是，如果有一个预先计算好的<strong>常用口令</strong>和它们的MD5的对照表。如果用户使用了常用口令，黑客从MD5一下就能反查到原始口令。因此不要使用弱密码，也不要使用生日等个人信息作为密码的原因，在社工面前找到账号对应的人是很容易的。</p>

<p>即使用户使用了常用口令，也可以采取措施来抵御彩虹表攻击，方法是对每个口令额外添加随机数，这个方法称之为加盐（salt）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">digest</span> <span class="o">=</span> <span class="n">md5</span><span class="o">(</span><span class="n">salt</span><span class="o">+</span><span class="n">inputPassword</span><span class="o">)</span>
</code></pre></div></div>

<p>经过加盐处理的数据库表，内容如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">username</th>
      <th style="text-align: left">salt</th>
      <th style="text-align: left">password</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">bob</td>
      <td style="text-align: left">H1r0a</td>
      <td style="text-align: left">a5022319ff4c56955e22a74abcc2c210</td>
    </tr>
    <tr>
      <td style="text-align: left">alice</td>
      <td style="text-align: left">7$p2w</td>
      <td style="text-align: left">e5de688c99e961ed6e560b972dab8b6a</td>
    </tr>
    <tr>
      <td style="text-align: left">tim</td>
      <td style="text-align: left">z5Sk9</td>
      <td style="text-align: left">1eee304b92dc0d105904e7ab58fd2f64</td>
    </tr>
  </tbody>
</table>

<p>加盐的目的在于使黑客的<strong>彩虹表失效</strong>，即使用户使用常用口令，也无法从MD5反推原始口令。这样，就算黑客拿到了数据库和源代码，也要对每个<code class="language-plaintext highlighter-rouge">salt</code>重新计算彩虹表。这已经不能叫彩虹表了，这就是暴力破解。</p>

<p>就算破解出与<strong>加盐哈希前的密码</strong>一样<strong>加盐哈希的密码</strong>，也不一定能保证就是<strong>原始的密码</strong>，而<strong>只要不是原始的密码</strong>，就算账号所有者的所有网站都设置同一个密码，也只破解了这一家网站的密码，因为每家网站的盐不一样。但是，如果某家网站没有加盐，被破解，那么意味着<strong>原始密码</strong>就被泄露了。</p>

<p>因此不建议所有网站都设置同一个密码，或者按网站的信任程度和重要性使用不同的密码，并且这些密码之间要像哈希生成的特征码一样，不具有通过几个密码推测出规律的可能。</p>

<p>盐的生成可以使用随机数：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">16</span><span class="o">];</span>
<span class="k">new</span> <span class="nf">Random</span><span class="o">().</span><span class="na">nextBytes</span><span class="o">(</span><span class="n">bs</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">HexFormat</span><span class="o">.</span><span class="na">of</span><span class="o">().</span><span class="na">formatHex</span><span class="o">(</span><span class="n">bs</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="sha-1">SHA-1</h3>

<p>SHA-1也是一种哈希算法，它的输出是160 bits，即20字节。SHA-1是由美国国家安全局开发的，SHA算法实际上是一个系列，包括SHA-0（已废弃）、SHA-1、SHA-256、SHA-512等。</p>

<p>在Java中使用SHA-1，和MD5完全一样，只需要把算法名称改为<code class="language-plaintext highlighter-rouge">"SHA-1"</code>。类似的，计算SHA-256，我们需要传入名称<code class="language-plaintext highlighter-rouge">"SHA-256"</code>，计算SHA-512，我们需要传入名称<code class="language-plaintext highlighter-rouge">"SHA-512"</code>。</p>

<p>MD5因为输出长度较短，短时间内破解是可能的，目前已经<strong>不推荐使用</strong>。</p>

<h2 id="bouncycastle">BouncyCastle</h2>

<p>Java标准库提供了一系列常用的哈希算法。</p>

<p>但如果我们要用的某种算法，Java标准库没有提供怎么办？</p>

<p>方法一：自己写一个，难度很大；</p>

<p>方法二：找一个现成的第三方库，直接使用。</p>

<p><a href="https://www.bouncycastle.org/">BouncyCastle</a>就是一个提供了很多哈希算法和加密算法的第三方库。它提供了Java标准库没有的一些算法，例如，RipeMD160哈希算法。</p>

<p>首先，把BouncyCastle提供的jar包放到classpath中。这个jar包就是<code class="language-plaintext highlighter-rouge">bcprov-jdk18on-xxx.jar</code>，可以从<a href="https://www.bouncycastle.org/latest_releases.html">官方网站</a>下载。</p>

<p>Java标准库的<code class="language-plaintext highlighter-rouge">java.security</code>包提供了一种标准机制，允许第三方提供商无缝接入。要使用BouncyCastle提供的RipeMD160算法，需要先把BouncyCastle注册一下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 注册BouncyCastle:</span>
<span class="nc">Security</span><span class="o">.</span><span class="na">addProvider</span><span class="o">(</span><span class="k">new</span> <span class="nc">BouncyCastleProvider</span><span class="o">());</span>
<span class="c1">// 按名称正常调用:</span>
<span class="nc">MessageDigest</span> <span class="n">md</span> <span class="o">=</span> <span class="nc">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RipeMD160"</span><span class="o">);</span>
<span class="n">md</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"HelloWorld"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
<span class="kt">byte</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">md</span><span class="o">.</span><span class="na">digest</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其中，注册BouncyCastle是通过下面的语句实现的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Security</span><span class="o">.</span><span class="na">addProvider</span><span class="o">(</span><span class="k">new</span> <span class="nc">BouncyCastleProvider</span><span class="o">());</span>
</code></pre></div></div>

<p>注册只需要在启动时进行一次，后续就可以使用BouncyCastle提供的所有哈希算法和加密算法。</p>

<h2 id="hmac算法">Hmac算法</h2>

<p>在前面讲到哈希算法时，我们说，存储用户的哈希口令时，要加盐存储，目的就在于抵御彩虹表攻击。</p>

<p>我们回顾一下哈希算法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">digest</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">input</span><span class="o">)</span>
</code></pre></div></div>

<p>正是因为相同的输入会产生相同的输出，我们加盐的目的就在于，使得输入有所变化：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">digest</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">salt</span> <span class="o">+</span> <span class="n">input</span><span class="o">)</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">salt</code>可以看作是一个额外的“认证码”，同样的输入，不同的认证码，会产生不同的输出。因此，要验证输出的哈希，必须同时提供“认证码”。</p>

<p>Hmac算法就是一种基于密钥的消息认证码算法，它的全称是Hash-based Message Authentication Code，是一种更安全的消息摘要算法。</p>

<p>Hmac算法<strong>总是和某种哈希算法配合起来用的</strong>。例如，我们使用MD5算法，对应的就是HmacMD5算法，它相当于“加盐”的MD5：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HmacMD5 ≈ md5(secure_random_key, input)
</code></pre></div></div>

<p>因此，HmacMD5可以看作带有一个安全的key的MD5。使用HmacMD5而不是用MD5加<code class="language-plaintext highlighter-rouge">salt</code>，有如下好处：</p>

<ul>
  <li>HmacMD5使用的<code class="language-plaintext highlighter-rouge">key</code>长度是64字节，更安全；</li>
  <li>Hmac是标准算法，同样适用于SHA-1等其他哈希算法；</li>
  <li>Hmac输出和原有的哈希算法长度一致。</li>
</ul>

<p>可见，Hmac本质上就是把<code class="language-plaintext highlighter-rouge">key</code>混入摘要的算法。验证此哈希时，除了原始的输入数据，还要提供<code class="language-plaintext highlighter-rouge">key</code>。</p>

<p>为了保证安全，我们不会自己指定<code class="language-plaintext highlighter-rouge">key</code>，而是通过Java标准库的KeyGenerator生成一个安全的随机的key。下面是使用HmacMD5的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">KeyGenerator</span> <span class="n">keyGen</span> <span class="o">=</span> <span class="nc">KeyGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"HmacMD5"</span><span class="o">);</span>
    <span class="nc">SecretKey</span> <span class="n">key</span> <span class="o">=</span> <span class="n">keyGen</span><span class="o">.</span><span class="na">generateKey</span><span class="o">();</span>
    <span class="c1">// 打印随机生成的key:</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">skey</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">();</span>
    <span class="n">out</span><span class="o">(</span><span class="n">skey</span><span class="o">);</span>
    <span class="nc">Mac</span> <span class="n">mac</span> <span class="o">=</span> <span class="nc">Mac</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"HmacMD5"</span><span class="o">);</span>
    <span class="n">mac</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">key</span><span class="o">);</span><span class="c1">//传入key</span>
    <span class="n">mac</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"HelloWorld"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span><span class="c1">//添加数据</span>
    <span class="kt">byte</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mac</span><span class="o">.</span><span class="na">doFinal</span><span class="o">();</span><span class="c1">//调用</span>
    <span class="n">out</span><span class="o">(</span><span class="n">result</span><span class="o">);</span><span class="c1">//a7f9bf40c2929734...</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>和MD5相比，使用HmacMD5的步骤是：</p>

<ol>
  <li>通过名称<code class="language-plaintext highlighter-rouge">HmacMD5</code>获取<code class="language-plaintext highlighter-rouge">KeyGenerator</code>实例；</li>
  <li>通过<code class="language-plaintext highlighter-rouge">KeyGenerator</code>创建一个<code class="language-plaintext highlighter-rouge">SecretKey</code>实例；</li>
  <li>通过名称<code class="language-plaintext highlighter-rouge">HmacMD5</code>获取<code class="language-plaintext highlighter-rouge">Mac</code>实例；</li>
  <li>用<code class="language-plaintext highlighter-rouge">SecretKey</code>初始化<code class="language-plaintext highlighter-rouge">Mac</code>实例；</li>
  <li>对<code class="language-plaintext highlighter-rouge">Mac</code>实例反复调用<code class="language-plaintext highlighter-rouge">update(byte[])</code>输入数据；</li>
  <li>调用<code class="language-plaintext highlighter-rouge">Mac</code>实例的<code class="language-plaintext highlighter-rouge">doFinal()</code>获取最终的哈希值。</li>
</ol>

<p>可以用Hmac算法取代原有的自定义的加盐算法，因此，存储用户名和口令的数据库结构如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">username</th>
      <th style="text-align: left">secret_key (64 bytes)</th>
      <th style="text-align: left">password</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">bob</td>
      <td style="text-align: left">a8c06e05f92e…5e16</td>
      <td style="text-align: left">7e0387872a57c85ef6dddbaa12f376de</td>
    </tr>
    <tr>
      <td style="text-align: left">alice</td>
      <td style="text-align: left">e6a343693985…f4be</td>
      <td style="text-align: left">c1f929ac2552642b302e739bc0cdbaac</td>
    </tr>
    <tr>
      <td style="text-align: left">tim</td>
      <td style="text-align: left">f27a973dfdc0…6003</td>
      <td style="text-align: left">af57651c3a8a73303515804d4af43790</td>
    </tr>
  </tbody>
</table>

<p>有了Hmac计算的哈希和<code class="language-plaintext highlighter-rouge">SecretKey</code>，我们想要验证怎么办？这时，<code class="language-plaintext highlighter-rouge">SecretKey</code>不能从<code class="language-plaintext highlighter-rouge">KeyGenerator</code>生成，而是从一个<code class="language-plaintext highlighter-rouge">byte[]</code>数组恢复：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.KeyGenerator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.Mac</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.SecretKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.SecretKeySpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">KeyGenerator</span> <span class="n">keyGen</span> <span class="o">=</span> <span class="nc">KeyGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"HmacMD5"</span><span class="o">);</span>
        <span class="nc">SecretKey</span> <span class="n">key</span> <span class="o">=</span> <span class="n">keyGen</span><span class="o">.</span><span class="na">generateKey</span><span class="o">();</span>
        <span class="c1">// 打印随机生成的key:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">skey</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">();</span>
        <span class="n">out</span><span class="o">(</span><span class="n">skey</span><span class="o">);</span>
        <span class="nc">Mac</span> <span class="n">mac</span> <span class="o">=</span> <span class="nc">Mac</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"HmacMD5"</span><span class="o">);</span>
        <span class="n">mac</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">key</span><span class="o">);</span><span class="c1">//传入key</span>
        <span class="n">mac</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"HelloWorld"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span><span class="c1">//添加数据</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mac</span><span class="o">.</span><span class="na">doFinal</span><span class="o">();</span><span class="c1">//调用</span>
        <span class="n">out</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="c1">// 通过字节数组恢复key。</span>
        <span class="nc">SecretKey</span> <span class="n">restoreTheKey</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecretKeySpec</span><span class="o">(</span><span class="n">skey</span><span class="o">,</span> <span class="s">"HmacMD5"</span><span class="o">);</span>
        <span class="nc">Mac</span> <span class="n">mac2</span> <span class="o">=</span> <span class="nc">Mac</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"HmacMD5"</span><span class="o">);</span>
        <span class="n">mac2</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">restoreTheKey</span><span class="o">);</span>
        <span class="n">mac2</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"HelloWorld"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">mac2</span><span class="o">.</span><span class="na">doFinal</span><span class="o">();</span>
        <span class="n">out</span><span class="o">(</span><span class="n">result2</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>恢复<code class="language-plaintext highlighter-rouge">SecretKey</code>的语句就是<code class="language-plaintext highlighter-rouge">new SecretKeySpec(hkey, "HmacMD5")</code>。</p>

<h2 id="对称加密算法">对称加密算法</h2>

<p>对称加密算法就是传统的用一个密码进行加密和解密。</p>

<p>从程序的角度看，所谓加密，就是这样一个函数，它接收密码和明文，然后输出密文：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>secret = encrypt(key, message);
</code></pre></div></div>

<p>而解密则相反，它接收密码和密文，然后输出明文：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plain = decrypt(key, secret);
</code></pre></div></div>

<p>在软件开发中，常用的对称加密算法有：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">算法</th>
      <th style="text-align: left">密钥长度</th>
      <th style="text-align: left">工作模式</th>
      <th style="text-align: left">填充模式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">DES</td>
      <td style="text-align: left">56/64</td>
      <td style="text-align: left">ECB/CBC/PCBC/CTR/…</td>
      <td style="text-align: left">NoPadding/PKCS5Padding/…</td>
    </tr>
    <tr>
      <td style="text-align: left">AES</td>
      <td style="text-align: left">128/192/256</td>
      <td style="text-align: left">ECB/CBC/PCBC/CTR/…</td>
      <td style="text-align: left">NoPadding/PKCS5Padding/PKCS7Padding/…</td>
    </tr>
    <tr>
      <td style="text-align: left">IDEA</td>
      <td style="text-align: left">128</td>
      <td style="text-align: left">ECB</td>
      <td style="text-align: left">PKCS5Padding/PKCS7Padding/…</td>
    </tr>
  </tbody>
</table>

<p>密钥长度直接决定加密强度，而工作模式和填充模式可以看成是对称加密算法的参数和格式选择。Java标准库提供的算法实现并不包括所有的工作模式和所有填充模式，但是通常我们只需要挑选常用的使用就可以了。</p>

<p>最后注意，DES算法由于密钥过短，可以在短时间内被暴力破解，所以现在已经不安全了。</p>

<h3 id="ecb模式">ECB模式</h3>

<p>AES算法是目前应用最广泛的加密算法。我们先用ECB模式加密并解密：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.SecretKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.SecretKeySpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.GeneralSecurityException</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 128位密钥 = 16 bytes Key:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"1234567890abcdef"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="s">"Hello, world!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"原文: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">data</span><span class="o">);</span><span class="c1">// 原文</span>
        <span class="c1">// 加密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">encrypted</span> <span class="o">=</span> <span class="n">encrypt</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"密文: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">encrypted</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">encrypted</span><span class="o">);</span><span class="c1">// 密文</span>
        <span class="c1">// 解密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">decrypted</span> <span class="o">=</span> <span class="n">decrypt</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">encrypted</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"解密: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">decrypted</span><span class="o">,</span> <span class="s">"UTF-8"</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">decrypted</span><span class="o">);</span><span class="c1">// 解密</span>
    <span class="o">}</span>

    <span class="c1">// 加密:</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">encrypt</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"AES/ECB/PKCS5Padding"</span><span class="o">);</span>
        <span class="nc">SecretKey</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecretKeySpec</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">"AES"</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">keySpec</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 解密:</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">decrypt</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"AES/ECB/PKCS5Padding"</span><span class="o">);</span>
        <span class="nc">SecretKey</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecretKeySpec</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">"AES"</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">keySpec</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>原文: Hello, world!，16进制：48656c6c6f2c20776f726c6421
密文: ��D�E����\�，16进制：db188644e9450610b9edbec41aee5cde
解密: Hello, world!，16进制：48656c6c6f2c20776f726c6421
</code></pre></div></div>

<p>Java标准库提供的对称加密接口非常简单，使用时按以下步骤编写代码：</p>

<ol>
  <li>根据算法名称/工作模式/填充模式获取<code class="language-plaintext highlighter-rouge">Cipher</code>实例；</li>
  <li>根据算法名称初始化一个<code class="language-plaintext highlighter-rouge">SecretKey</code>实例，密钥必须是指定长度；</li>
  <li>使用<code class="language-plaintext highlighter-rouge">SecretKey</code>初始化<code class="language-plaintext highlighter-rouge">Cipher</code>实例，并设置加密或解密模式；</li>
  <li>传入明文或密文，获得密文或明文。</li>
</ol>

<p>ECB模式是最简单的AES加密模式，它只需要一个固定长度的密钥，固定的明文会生成固定的密文，这种一对一的加密方式会导致安全性降低。</p>

<p>对于AES加密算法，<strong>不论使用哪种模式</strong>（如ECB、CBC等），<strong>密钥长度必须</strong>为16字节（128位）、24字节（192位）或32字节（256位）。这是由AES算法的规范确定的，以确保加密过程的安全性和正确性。如果密钥长度不符合这些要求，将无法正确使用AES算法进行加密。</p>

<hr />

<h3 id="cbc模式">CBC模式</h3>

<p>更好的方式是通过CBC模式，它需要一个随机数作为IV参数，这样对于同一份明文，每次生成的密文都不同：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.IvParameterSpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.SecretKeySpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.GeneralSecurityException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.SecureRandom</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 256位密钥 = 32 bytes Key:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"1234567890abcdef1234567890abcdef"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="s">"Hello, world!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"原文: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">data</span><span class="o">);</span><span class="c1">// 原文</span>
        <span class="c1">// 加密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">encrypted</span> <span class="o">=</span> <span class="n">encrypt</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"密文: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">encrypted</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">encrypted</span><span class="o">);</span><span class="c1">// 密文</span>
        <span class="c1">// 解密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">decrypted</span> <span class="o">=</span> <span class="n">decrypt</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">encrypted</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"解密: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">decrypted</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">decrypted</span><span class="o">);</span><span class="c1">// 解密</span>
    <span class="o">}</span>


    <span class="c1">// 加密:</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">encrypt</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"AES/CBC/PKCS5Padding"</span><span class="o">);</span>
        <span class="nc">SecretKeySpec</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecretKeySpec</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">"AES"</span><span class="o">);</span>
        <span class="c1">// CBC模式需要生成一个16 bytes的initialization vector:</span>
        <span class="nc">SecureRandom</span> <span class="n">sr</span> <span class="o">=</span> <span class="nc">SecureRandom</span><span class="o">.</span><span class="na">getInstanceStrong</span><span class="o">();</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span> <span class="o">=</span> <span class="n">sr</span><span class="o">.</span><span class="na">generateSeed</span><span class="o">(</span><span class="mi">16</span><span class="o">);</span>
        <span class="nc">IvParameterSpec</span> <span class="n">ivps</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IvParameterSpec</span><span class="o">(</span><span class="n">iv</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">keySpec</span><span class="o">,</span> <span class="n">ivps</span><span class="o">);</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
        <span class="c1">// IV不需要保密，把IV和密文拼一起返回:</span>
        <span class="k">return</span> <span class="nf">join</span><span class="o">(</span><span class="n">iv</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 解密:</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">decrypt</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">key</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="c1">// 把input分割成IV和密文:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">16</span><span class="o">];</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">input</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">16</span><span class="o">];</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">iv</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">16</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="c1">// 解密:</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"AES/CBC/PKCS5Padding"</span><span class="o">);</span>
        <span class="nc">SecretKeySpec</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SecretKeySpec</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">"AES"</span><span class="o">);</span>
        <span class="nc">IvParameterSpec</span> <span class="n">ivps</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IvParameterSpec</span><span class="o">(</span><span class="n">iv</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">keySpec</span><span class="o">,</span> <span class="n">ivps</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">join</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">bs1</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bs2</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">bs1</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="n">bs2</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">bs1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">bs1</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">bs2</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">bs1</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">bs2</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>CBC（Cipher Block Chaining）模式还需要一个16字节的初始向量（IV）。对于IV（Initialization Vector，初始化向量）参数，在AES算法中，它的长度<strong>是固定的</strong>，<strong>为16字节</strong>（128位）。无论使用哪种模式（如CBC、CTR等），IV参数的长度都应为16字节。IV的作用是为了在每次加密操作时引入随机性，即使是在使用相同密钥加密相同数据的情况下也能产生不同的密文。</p>

<p><strong>为保证安全，随机数必须使用<code class="language-plaintext highlighter-rouge">SecureRandom</code>生成</strong>，虽然也管不到你用<code class="language-plaintext highlighter-rouge">Random</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">=</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">16</span><span class="o">];</span>
<span class="k">new</span> <span class="nf">Random</span><span class="o">().</span><span class="na">nextBytes</span><span class="o">(</span><span class="n">iv</span><span class="o">);</span>
<span class="nc">IvParameterSpec</span> <span class="n">ivps</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IvParameterSpec</span><span class="o">(</span><span class="n">iv</span><span class="o">);</span>
</code></pre></div></div>

<p>因为多了一个<code class="language-plaintext highlighter-rouge">IvParameterSpec</code>实例，因此，初始化方法需要调用<code class="language-plaintext highlighter-rouge">Cipher</code>的一个重载方法并传入<code class="language-plaintext highlighter-rouge">IvParameterSpec</code>。</p>

<p>其实也就多了个随机数变量而已，<strong>注意随机数必须16字节，key必须为16/24/32字节</strong>。</p>

<h2 id="口令加密算法">口令加密算法</h2>

<p>AES加密，密钥长度是固定的128/192/256位。这是因为对称加密算法决定了口令<strong>必须是固定长度</strong>，然后对明文进行分块加密。又因为安全需求，口令长度往往都是128位以上，即至少16个字符。</p>

<p>用户输入的口令并不能<strong>直接</strong>作为AES的密钥进行加密（<strong>除非长度恰好</strong>是128/192/256位），并且用户输入的口令一般都有规律，安全性远远不如安全随机数产生的随机口令。因此，用户输入的口令，通常还需要使用PBE算法，采用随机数杂凑计算出真正的密钥，再进行加密。</p>

<p>PBE就是Password Based Encryption的缩写，它的作用如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="n">generate</span><span class="o">(</span><span class="n">userPassword</span><span class="o">,</span> <span class="n">secureRandomPassword</span><span class="o">);</span>
</code></pre></div></div>

<p>PBE的作用就是把用户输入的口令和一个安全随机的口令采用杂凑后计算出真正的密钥。以AES密钥为例，我们让用户输入一个口令，然后生成一个随机数，通过PBE算法计算出真正的AES口令，再进行加密，代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.bouncycastle.jce.provider.BouncyCastleProvider</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.SecretKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.SecretKeyFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.PBEKeySpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.spec.PBEParameterSpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.GeneralSecurityException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.SecureRandom</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.Security</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 把BouncyCastle作为Provider添加到java.security:</span>
        <span class="nc">Security</span><span class="o">.</span><span class="na">addProvider</span><span class="o">(</span><span class="k">new</span> <span class="nc">BouncyCastleProvider</span><span class="o">());</span>
        <span class="c1">// 16 bytes随机Salt:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">salt</span> <span class="o">=</span> <span class="nc">SecureRandom</span><span class="o">.</span><span class="na">getInstanceStrong</span><span class="o">().</span><span class="na">generateSeed</span><span class="o">(</span><span class="mi">16</span><span class="o">);</span>
        <span class="c1">// 加密口令:</span>
        <span class="nc">String</span> <span class="n">password</span> <span class="o">=</span> <span class="s">"hello12345"</span><span class="o">;</span>
        <span class="c1">// 数据</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="s">"Hello, world!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"原文: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">data</span><span class="o">);</span><span class="c1">// 原文</span>

        <span class="c1">// 加密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">encrypted</span> <span class="o">=</span> <span class="n">encrypt</span><span class="o">(</span><span class="n">password</span><span class="o">,</span><span class="n">salt</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"密文: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">encrypted</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">encrypted</span><span class="o">);</span><span class="c1">// 密文</span>
        <span class="c1">// 解密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">decrypted</span> <span class="o">=</span> <span class="n">decrypt</span><span class="o">(</span><span class="n">password</span><span class="o">,</span><span class="n">salt</span><span class="o">,</span> <span class="n">encrypted</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"解密: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">decrypted</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"，16进制："</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">decrypted</span><span class="o">);</span><span class="c1">// 解密</span>
    <span class="o">}</span>


    <span class="c1">// 加密:</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">encrypt</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">salt</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="c1">// 通过password生成key</span>
        <span class="nc">PBEKeySpec</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PBEKeySpec</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
        <span class="nc">SecretKeyFactory</span> <span class="n">skeyFactory</span> <span class="o">=</span> <span class="nc">SecretKeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"PBEwithSHA1and128bitAES-CBC-BC"</span><span class="o">);</span>
        <span class="nc">SecretKey</span> <span class="n">skey</span> <span class="o">=</span> <span class="n">skeyFactory</span><span class="o">.</span><span class="na">generateSecret</span><span class="o">(</span><span class="n">keySpec</span><span class="o">);</span>
        <span class="c1">// 盐</span>
        <span class="nc">PBEParameterSpec</span> <span class="n">pbeps</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PBEParameterSpec</span><span class="o">(</span><span class="n">salt</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
        <span class="c1">// 加密</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"PBEwithSHA1and128bitAES-CBC-BC"</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">skey</span><span class="o">,</span> <span class="n">pbeps</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 解密:</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">decrypt</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">salt</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="c1">// 通过password生成key</span>
        <span class="nc">PBEKeySpec</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PBEKeySpec</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
        <span class="nc">SecretKeyFactory</span> <span class="n">skeyFactory</span> <span class="o">=</span> <span class="nc">SecretKeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"PBEwithSHA1and128bitAES-CBC-BC"</span><span class="o">);</span>
        <span class="nc">SecretKey</span> <span class="n">skey</span> <span class="o">=</span> <span class="n">skeyFactory</span><span class="o">.</span><span class="na">generateSecret</span><span class="o">(</span><span class="n">keySpec</span><span class="o">);</span>
        <span class="c1">// 盐</span>
        <span class="nc">PBEParameterSpec</span> <span class="n">pbeps</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PBEParameterSpec</span><span class="o">(</span><span class="n">salt</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"PBEwithSHA1and128bitAES-CBC-BC"</span><span class="o">);</span>
        <span class="c1">// 解密</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">skey</span><span class="o">,</span> <span class="n">pbeps</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>



</code></pre></div></div>

<p>使用PBE时，还需要引入BouncyCastle，并指定算法是<code class="language-plaintext highlighter-rouge">PBEwithSHA1and128bitAES-CBC-BC</code>。观察代码，实际上真正的AES密钥是调用<code class="language-plaintext highlighter-rouge">Cipher</code>的<code class="language-plaintext highlighter-rouge">init()</code>方法时同时传入<code class="language-plaintext highlighter-rouge">SecretKey</code>和<code class="language-plaintext highlighter-rouge">PBEParameterSpec</code>实现的。在创建<code class="language-plaintext highlighter-rouge">PBEParameterSpec</code>的时候，我们还指定了循环次数<code class="language-plaintext highlighter-rouge">1000</code>，循环次数越多，暴力破解需要的计算量就越大。</p>

<p>如果把salt和循环次数固定，就得到了一个通用的“口令”加密软件。如果我们把随机生成的salt存储在U盘，就得到了一个“口令”加USB Key的加密软件，它的好处在于，即使用户使用了一个非常弱的口令，没有USB Key仍然无法解密，因为USB Key存储的随机数密钥安全性非常高。</p>

<h2 id="密钥交换算法">密钥交换算法</h2>

<p>对称加密算法解决了数据加密的问题。我们以AES加密为例，在现实世界中，小明要向路人甲发送一个加密文件，他可以先生成一个AES密钥，对文件进行加密，然后把加密文件发送给对方。因为对方要解密，就必须需要小明生成的密钥。</p>

<p>现在问题来了：如何传递密钥？</p>

<p>在不安全的信道上传递加密文件是没有问题的，因为黑客拿到加密文件没有用。但是，如何如何在不安全的信道上安全地传输密钥？</p>

<p>要解决这个问题，密钥交换算法即DH算法：Diffie-Hellman算法应运而生。</p>

<p>DH算法解决了密钥在双方不直接传递密钥的情况下完成密钥交换，这个神奇的交换原理完全由数学理论支持。</p>

<p>假设甲乙双方需要传递密钥，他们之间可以这么做：</p>

<ol>
  <li>甲首先选择一个素数<code class="language-plaintext highlighter-rouge">p</code>，例如97，底数<code class="language-plaintext highlighter-rouge">g</code>是<code class="language-plaintext highlighter-rouge">p</code>的一个本原根，例如5，随机数<code class="language-plaintext highlighter-rouge">a</code>，例如123，然后计算<code class="language-plaintext highlighter-rouge">A=g^a mod p</code>，结果是34，然后，甲发送<code class="language-plaintext highlighter-rouge">p＝97</code>，<code class="language-plaintext highlighter-rouge">g=5</code>，<code class="language-plaintext highlighter-rouge">A=34</code>给乙；</li>
  <li>乙方收到后，也选择一个随机数<code class="language-plaintext highlighter-rouge">b</code>，例如，456，然后计算<code class="language-plaintext highlighter-rouge">B = g^b mod p</code>，结果是75，乙再同时计算<code class="language-plaintext highlighter-rouge">s = A^b mod p</code>，结果是22；</li>
  <li>乙把计算的<code class="language-plaintext highlighter-rouge">B=75</code>发给甲，甲计算<code class="language-plaintext highlighter-rouge">s ＝ B^a mod p</code>，计算结果与乙算出的结果一样，都是22。</li>
</ol>

<p>所以最终双方协商出的密钥<code class="language-plaintext highlighter-rouge">s</code>是22。注意到这个密钥<code class="language-plaintext highlighter-rouge">s</code>并没有在网络上传输。而通过网络传输的<code class="language-plaintext highlighter-rouge">p</code>，<code class="language-plaintext highlighter-rouge">g</code>，<code class="language-plaintext highlighter-rouge">A</code>和<code class="language-plaintext highlighter-rouge">B</code>是无法推算出<code class="language-plaintext highlighter-rouge">s</code>的，因为实际算法选择的素数是非常大的。</p>

<p>所以，更确切地说，DH算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。</p>

<p>如果我们把<code class="language-plaintext highlighter-rouge">a</code>看成甲的私钥，<code class="language-plaintext highlighter-rouge">A</code>看成甲的公钥，<code class="language-plaintext highlighter-rouge">b</code>看成乙的私钥，<code class="language-plaintext highlighter-rouge">B</code>看成乙的公钥，DH算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥<code class="language-plaintext highlighter-rouge">secretKey</code>，DH算法通过数学定律保证了双方各自计算出的<code class="language-plaintext highlighter-rouge">secretKey</code>是相同的。</p>

<p>使用Java实现DH算法的代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.crypto.KeyAgreement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.spec.X509EncodedKeySpec</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Bob和Alice:</span>
        <span class="nc">Person</span> <span class="n">bob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">);</span>
        <span class="nc">Person</span> <span class="n">alice</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">);</span>

        <span class="c1">// 各自生成KeyPair:</span>
        <span class="n">bob</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">();</span>
        <span class="n">alice</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">();</span>

        <span class="c1">// 双方交换各自的PublicKey:</span>
        <span class="c1">// Bob根据Alice的PublicKey生成自己的本地密钥:</span>
        <span class="n">bob</span><span class="o">.</span><span class="na">generateSecretKey</span><span class="o">(</span><span class="n">alice</span><span class="o">.</span><span class="na">publicKey</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">());</span>
        <span class="c1">// Alice根据Bob的PublicKey生成自己的本地密钥:</span>
        <span class="n">alice</span><span class="o">.</span><span class="na">generateSecretKey</span><span class="o">(</span><span class="n">bob</span><span class="o">.</span><span class="na">publicKey</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">());</span>

        <span class="c1">// 检查双方的本地密钥是否相同:注意公key私key后面一部分不一样。</span>
        <span class="n">bob</span><span class="o">.</span><span class="na">printKeys</span><span class="o">();</span>
        <span class="n">alice</span><span class="o">.</span><span class="na">printKeys</span><span class="o">();</span>
        <span class="c1">// 双方的SecretKey相同，后续通信将使用SecretKey作为密钥进行AES加解密...</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">PublicKey</span> <span class="n">publicKey</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">PrivateKey</span> <span class="n">privateKey</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">secretKey</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 生成本地KeyPair:</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">generateKeyPair</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">KeyPairGenerator</span> <span class="n">kpGen</span> <span class="o">=</span> <span class="nc">KeyPairGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"DH"</span><span class="o">);</span>
            <span class="n">kpGen</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="mi">512</span><span class="o">);</span>
            <span class="nc">KeyPair</span> <span class="n">kp</span> <span class="o">=</span> <span class="n">kpGen</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">();</span>
            <span class="k">this</span><span class="o">.</span><span class="na">privateKey</span> <span class="o">=</span> <span class="n">kp</span><span class="o">.</span><span class="na">getPrivate</span><span class="o">();</span>
            <span class="k">this</span><span class="o">.</span><span class="na">publicKey</span> <span class="o">=</span> <span class="n">kp</span><span class="o">.</span><span class="na">getPublic</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">GeneralSecurityException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">generateSecretKey</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">receivedPubKeyBytes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// 从byte[]恢复PublicKey:</span>
            <span class="nc">X509EncodedKeySpec</span> <span class="n">keySpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">X509EncodedKeySpec</span><span class="o">(</span><span class="n">receivedPubKeyBytes</span><span class="o">);</span>
            <span class="nc">KeyFactory</span> <span class="n">kf</span> <span class="o">=</span> <span class="nc">KeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"DH"</span><span class="o">);</span>
            <span class="nc">PublicKey</span> <span class="n">receivedPublicKey</span> <span class="o">=</span> <span class="n">kf</span><span class="o">.</span><span class="na">generatePublic</span><span class="o">(</span><span class="n">keySpec</span><span class="o">);</span>
            <span class="c1">// 生成本地密钥:</span>
            <span class="nc">KeyAgreement</span> <span class="n">keyAgreement</span> <span class="o">=</span> <span class="nc">KeyAgreement</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"DH"</span><span class="o">);</span>
            <span class="n">keyAgreement</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">privateKey</span><span class="o">);</span> <span class="c1">// 自己的PrivateKey</span>
            <span class="n">keyAgreement</span><span class="o">.</span><span class="na">doPhase</span><span class="o">(</span><span class="n">receivedPublicKey</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// 对方的PublicKey</span>
            <span class="c1">// 生成SecretKey密钥:</span>
            <span class="k">this</span><span class="o">.</span><span class="na">secretKey</span> <span class="o">=</span> <span class="n">keyAgreement</span><span class="o">.</span><span class="na">generateSecret</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">GeneralSecurityException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printKeys</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Name: "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Private key: "</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">privateKey</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Public key: "</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">publicKey</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Secret key: "</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">secretKey</span><span class="o">);</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是DH算法并未解决中间人攻击，即甲乙双方并不能确保与自己通信的是否真的是对方。消除中间人攻击需要其他方法。</p>

<p>假设甲乙在交换公钥时被丙截获，丙把自己的公钥分别发送给甲乙两人，就变成了，甲丙通信，丙乙通信。所以使用对称加密不能防止中间人攻击</p>

<p>Diffie-Hellman密钥交换算法的最低和最高密钥长度取决于使用的具体实现和协议要求。一般来说，DH密钥的长度必须是64的倍数，并且范围在512到8192之间（包括512和8192）。</p>

<p>本原根是一个数学概念，在数论中使用。简单来说，对于一个素数$p$，如果有一个数$g$，满足$g$的不同次幂对$p$取模的结果能够覆盖从$1$到$p-1$的所有可能的余数，而且没有重复，那么$g$就是模$p$的本原根。</p>

<p>举个例子，考虑素数$p=7$。我们要找到一个数$g$，满足$g$的不同次幂对$7$取模的结果覆盖了$1$到$6$的所有余数。对于$p=7$，数$3$就是一个本原根，因为$3^1 \equiv 3 \pmod{7}$，$3^2 \equiv 2 \pmod{7}$，$3^3 \equiv 6 \pmod{7}$，$3^4 \equiv 4 \pmod{7}$，$3^5 \equiv 5 \pmod{7}$，$3^6 \equiv 1 \pmod{7}$。这里$3$的不同次幂依次覆盖了$1$到$6$的所有余数，且没有重复。</p>

<h2 id="非对称加密算法">非对称加密算法</h2>

<p>从DH算法我们可以看到，公钥-私钥组成的密钥对是非常有用的加密方式，因为公钥是可以公开的，而私钥是完全保密的，由此奠定了非对称加密的基础。</p>

<p>非对称加密就是加密和解密使用的不是相同的密钥：只有同一个公钥-私钥对才能正常加解密。</p>

<p>因此，如果小明要加密一个文件发送给小红，他应该首先向小红索取她的公钥，然后，他用小红的公钥加密，把加密文件发送给小红，此文件只能由小红的私钥解开，因为小红的私钥在她自己手里，所以，除了小红，没有任何人能解开此文件。</p>

<p>非对称加密的典型算法就是RSA算法，它是由Ron Rivest，Adi Shamir，Leonard Adleman这三个哥们一起发明的，所以用他们仨的姓的首字母缩写表示。</p>

<p>非对称加密相比对称加密的显著优点在于，对称加密需要协商密钥，而非对称加密可以安全地公开各自的公钥，在N个人之间通信的时候：使用非对称加密只需要N个密钥对，每个人只管理自己的密钥对。而使用对称加密需要则需要<code class="language-plaintext highlighter-rouge">N*(N-1)/2</code>个密钥，因此每个人需要管理<code class="language-plaintext highlighter-rouge">N-1</code>个密钥，密钥管理难度大，而且非常容易泄漏。</p>

<p>既然非对称加密这么好，那我们抛弃对称加密，完全使用非对称加密行不行？也不行。因为非对称加密的缺点就是运算速度非常慢，比对称加密要慢很多。</p>

<p>所以，在实际应用的时候，非对称加密总是和对称加密一起使用。假设小明需要给小红需要传输加密文件，他俩首先交换了各自的公钥，然后：</p>

<ol>
  <li>小明生成一个随机的AES口令，然后用小红的公钥通过RSA加密这个口令，并发给小红；</li>
  <li>小红用自己的RSA私钥解密得到AES口令；</li>
  <li>双方使用这个共享的AES口令用AES加密通信。</li>
</ol>

<p>可见非对称加密实际上应用在第一步，即加密“AES口令”。这也是我们在浏览器中常用的HTTPS协议的做法，即浏览器和服务器先通过RSA交换AES口令，接下来双方通信实际上采用的是速度较快的AES对称加密，而不是缓慢的RSA非对称加密。</p>

<p>Java标准库提供了RSA算法的实现，示例代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.UnsupportedEncodingException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span><span class="o">,</span> <span class="nc">UnsupportedEncodingException</span> <span class="o">{</span>
        <span class="c1">// 明文:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">plain</span> <span class="o">=</span> <span class="s">"Hello, encrypt use RSA"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
        <span class="c1">// 创建公钥／私钥对:</span>
        <span class="nc">Person</span> <span class="n">alice</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">);</span>

        <span class="kt">byte</span><span class="o">[]</span> <span class="n">pk</span> <span class="o">=</span> <span class="n">alice</span><span class="o">.</span><span class="na">getPublicKey</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"public key: "</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">pk</span><span class="o">);</span>

        <span class="c1">// 用Alice的公钥加密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">encrypted</span> <span class="o">=</span> <span class="n">alice</span><span class="o">.</span><span class="na">encrypt</span><span class="o">(</span><span class="n">plain</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"encrypted: "</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">encrypted</span><span class="o">);</span><span class="c1">//密文</span>


        <span class="kt">byte</span><span class="o">[]</span> <span class="n">sk</span> <span class="o">=</span> <span class="n">alice</span><span class="o">.</span><span class="na">getPrivateKey</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"private key: "</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">sk</span><span class="o">);</span>

        <span class="c1">// Alice用自己的私钥解密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">decrypted</span> <span class="o">=</span> <span class="n">alice</span><span class="o">.</span><span class="na">decrypt</span><span class="o">(</span><span class="n">encrypted</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">decrypted</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="c1">// 私钥:</span>
    <span class="nc">PrivateKey</span> <span class="n">sk</span><span class="o">;</span>
    <span class="c1">// 公钥:</span>
    <span class="nc">PublicKey</span> <span class="n">pk</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="c1">// 生成公钥／私钥对:</span>
        <span class="nc">KeyPairGenerator</span> <span class="n">kpGen</span> <span class="o">=</span> <span class="nc">KeyPairGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RSA"</span><span class="o">);</span>
        <span class="n">kpGen</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
        <span class="nc">KeyPair</span> <span class="n">kp</span> <span class="o">=</span> <span class="n">kpGen</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sk</span> <span class="o">=</span> <span class="n">kp</span><span class="o">.</span><span class="na">getPrivate</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">pk</span> <span class="o">=</span> <span class="n">kp</span><span class="o">.</span><span class="na">getPublic</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="c1">// 把私钥导出为字节</span>
    <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getPrivateKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">sk</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="c1">// 把公钥导出为字节</span>
    <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getPublicKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">pk</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="c1">// 用公钥加密:</span>
    <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">encrypt</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RSA"</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">pk</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// 用私钥解密:</span>
    <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">decrypt</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RSA"</span><span class="o">);</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">sk</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>RSA的公钥和私钥都可以通过<code class="language-plaintext highlighter-rouge">getEncoded()</code>方法获得以<code class="language-plaintext highlighter-rouge">byte[]</code>表示的二进制数据，并根据需要保存到文件中。要从<code class="language-plaintext highlighter-rouge">byte[]</code>数组恢复公钥或私钥，可以这么写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">byte</span><span class="o">[]</span> <span class="n">pkData</span> <span class="o">=</span> <span class="o">...</span>
<span class="kt">byte</span><span class="o">[]</span> <span class="n">skData</span> <span class="o">=</span> <span class="o">...</span>
<span class="nc">KeyFactory</span> <span class="n">kf</span> <span class="o">=</span> <span class="nc">KeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RSA"</span><span class="o">);</span>
<span class="c1">// 恢复公钥:</span>
<span class="nc">X509EncodedKeySpec</span> <span class="n">pkSpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">X509EncodedKeySpec</span><span class="o">(</span><span class="n">pkData</span><span class="o">);</span>
<span class="nc">PublicKey</span> <span class="n">pk</span> <span class="o">=</span> <span class="n">kf</span><span class="o">.</span><span class="na">generatePublic</span><span class="o">(</span><span class="n">pkSpec</span><span class="o">);</span>
<span class="c1">// 恢复私钥:</span>
<span class="nc">PKCS8EncodedKeySpec</span> <span class="n">skSpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PKCS8EncodedKeySpec</span><span class="o">(</span><span class="n">skData</span><span class="o">);</span>
<span class="nc">PrivateKey</span> <span class="n">sk</span> <span class="o">=</span> <span class="n">kf</span><span class="o">.</span><span class="na">generatePrivate</span><span class="o">(</span><span class="n">skSpec</span><span class="o">);</span>
</code></pre></div></div>

<p>以RSA算法为例，它的密钥有256/512/1024/2048/4096等不同的长度。长度越长，密码强度越大，当然计算速度也越慢。</p>

<p>如果修改待加密的<code class="language-plaintext highlighter-rouge">byte[]</code>数据的大小，可以发现，使用512bit的RSA加密时，明文长度不能超过53字节，使用1024bit的RSA加密时，明文长度不能超过117字节，这也是为什么使用RSA的时候，总是配合AES一起使用，即用AES加密任意长度的明文，用RSA加密AES口令。此外，只使用非对称加密算法不能防止中间人攻击。</p>

<p>对称加密只需记住别人的密码，就可以了，识别到是小红发的邮件，用小红的密码密码打开就可以了，发邮件，用自己的密码加密，发出去就可以了。这个问题是，有多少人就需要记多少人的密码，太麻烦了。
非对称加密，你只要记住自己的密码（秘钥），别人发给你的邮件，你也别管是谁的了，用你秘钥就可以打开。解邮件是很爽，但是，发邮件，就有问题了，你得记住每个人的公钥，然后，进行加密，这和记私钥有啥区别呢？</p>

<p>不过，好消息是，公钥之所以叫公钥，就是他不需要进行保密，你可以把你的公钥放在信封上和加密信，一起发给别人，别人也可以，把公钥放在信封上面，把邮件发给你，你就可以拿到别人的公钥了，然后就可以用别人的公钥加密文件一起发给别人了。所以，不需要记住别人的公钥，因为别人会告诉你。</p>

<p>中间人攻击是指：小红给你的发的邮件，被小明，拦截了，然后把信封上面的小红的公钥，换成了，小明的公钥。</p>

<h2 id="签名算法">签名算法</h2>

<p>使用非对称加密算法的时候，对于一个公钥-私钥对，通常是用公钥加密，私钥解密。</p>

<p>如果使用私钥加密，公钥解密是否可行呢？实际上是完全可行的。</p>

<p>不过我们再仔细想一想，私钥是保密的，而公钥是公开的，用私钥加密，那相当于所有人都可以用公钥解密。这个加密有什么意义？</p>

<p>这个加密的意义在于，如果小明用自己的私钥加密了一条消息，比如<code class="language-plaintext highlighter-rouge">小明喜欢小红</code>，然后他公开了加密消息，由于任何人都可以用小明的公钥解密，从而使得任何人都可以确认<code class="language-plaintext highlighter-rouge">小明喜欢小红</code>这条消息肯定是小明发出的，其他人不能伪造这个消息，小明也不能抵赖这条消息不是自己写的。</p>

<p>因此，私钥加密得到的密文实际上就是数字签名，要验证这个签名是否正确，只能用私钥持有者的公钥进行解密验证。使用数字签名的目的是为了确认某个信息确实是由某个发送方发送的，任何人都不可能伪造消息，并且，发送方也不能抵赖。</p>

<p>在实际应用的时候，签名实际上并不是针对原始消息，而是针对原始消息的哈希进行签名，即：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">signature</span> <span class="o">=</span> <span class="n">encrypt</span><span class="o">(</span><span class="n">privateKey</span><span class="o">,</span> <span class="n">sha256</span><span class="o">(</span><span class="n">message</span><span class="o">))</span>
</code></pre></div></div>

<p>对签名进行验证实际上就是用公钥解密：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hash</span> <span class="o">=</span> <span class="n">decrypt</span><span class="o">(</span><span class="n">publicKey</span><span class="o">,</span> <span class="n">signature</span><span class="o">)</span>
</code></pre></div></div>

<p>然后把解密后的哈希与原始消息的哈希进行对比。</p>

<p>因为用户总是使用自己的私钥进行签名，所以，私钥就相当于用户身份。而公钥用来给外部验证用户身份。</p>

<p>常用数字签名算法有：</p>

<ul>
  <li>MD5withRSA</li>
  <li>SHA1withRSA</li>
  <li>SHA256withRSA</li>
</ul>

<p>它们实际上就是指定某种哈希算法进行RSA签名的方式。</p>

<h3 id="sha1withrsa">SHA1withRSA</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.UnsupportedEncodingException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span><span class="o">,</span> <span class="nc">UnsupportedEncodingException</span> <span class="o">{</span>
        <span class="c1">// 生成RSA公钥/私钥:</span>
        <span class="nc">KeyPairGenerator</span> <span class="n">kpGen</span> <span class="o">=</span> <span class="nc">KeyPairGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RSA"</span><span class="o">);</span>
        <span class="n">kpGen</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
        <span class="nc">KeyPair</span> <span class="n">kp</span> <span class="o">=</span> <span class="n">kpGen</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">();</span>
        <span class="nc">PrivateKey</span> <span class="n">sk</span> <span class="o">=</span> <span class="n">kp</span><span class="o">.</span><span class="na">getPrivate</span><span class="o">();</span>
        <span class="nc">PublicKey</span> <span class="n">pk</span> <span class="o">=</span> <span class="n">kp</span><span class="o">.</span><span class="na">getPublic</span><span class="o">();</span>

        <span class="c1">// 待签名的消息或摘要:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Hello, I am Bob!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>

        <span class="c1">// 用自己的私钥签名:</span>
        <span class="nc">Signature</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Signature</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"SHA1withRSA"</span><span class="o">);</span>
        <span class="n">s</span><span class="o">.</span><span class="na">initSign</span><span class="o">(</span><span class="n">sk</span><span class="o">);</span>
        <span class="n">s</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">signed</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">sign</span><span class="o">();</span>
        <span class="c1">// 将消息与签名公开，签名用来验证消息没有被篡改</span>
        <span class="n">out</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">signed</span><span class="o">);</span>

        <span class="c1">// 用某人公开的公钥验证，解析公开的签名和消息，是否是对应人的。</span>
        <span class="nc">Signature</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Signature</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"SHA1withRSA"</span><span class="o">);</span>
        <span class="n">v</span><span class="o">.</span><span class="na">initVerify</span><span class="o">(</span><span class="n">pk</span><span class="o">);</span>
        <span class="n">v</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">message</span><span class="o">,</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"这消息保真吗? "</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">signed</span><span class="o">));</span>
        <span class="c1">// 消息被篡改：</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">message2</span> <span class="o">=</span> <span class="s">"Hello, I am Gay"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
        <span class="n">v</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">message2</span><span class="o">,</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"这消息保真吗? "</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">signed</span><span class="o">));</span>
        <span class="c1">// 用其他人的key，公钥对不上：</span>
        <span class="nc">PublicKey</span> <span class="n">pk2</span> <span class="o">=</span> <span class="n">kpGen</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">().</span><span class="na">getPublic</span><span class="o">();</span>
        <span class="n">v</span><span class="o">.</span><span class="na">initVerify</span><span class="o">(</span><span class="n">pk2</span><span class="o">);</span>
        <span class="n">v</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">message</span><span class="o">,</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"这消息保真吗? "</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">signed</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>48656c6c6f2c204920616d20426f6221
3aa37bb696a9c9e808cf42e45e17a79d24139972ba409cce9be475fd00d97968e68a110f667e0cca5a5ed177919c5c20b2a3720bbfc0caa5ae128887da7312ab1be5b3ac409d3917853212a3a14eb96899054db49152fd57299922f3794e874325be498f824044f763753b2eb2c855e06d823c3f1fbaf8240eaf65a25cdac0fd
Hello, I am Bob!这消息保真吗? true
Hello, I am Gay这消息保真吗? false
Hello, I am Bob!这消息保真吗? false
</code></pre></div></div>

<p>使用其他公钥，或者验证签名的时候修改原始信息，都无法验证成功。</p>

<h3 id="使用signedobject">使用<code class="language-plaintext highlighter-rouge">SignedObject</code></h3>

<p>实际上可以用<code class="language-plaintext highlighter-rouge">SignedObject</code>携带消息数据，它还会记录签名和签名的算法名称。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span><span class="o">,</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ClassNotFoundException</span> <span class="o">{</span>
        <span class="c1">// 生成RSA密钥对</span>
        <span class="nc">KeyPairGenerator</span> <span class="n">keyPairGenerator</span> <span class="o">=</span> <span class="nc">KeyPairGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RSA"</span><span class="o">);</span>
        <span class="n">keyPairGenerator</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
        <span class="nc">KeyPair</span> <span class="n">keyPair</span> <span class="o">=</span> <span class="n">keyPairGenerator</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">();</span>
        <span class="nc">PrivateKey</span> <span class="n">privateKey</span> <span class="o">=</span> <span class="n">keyPair</span><span class="o">.</span><span class="na">getPrivate</span><span class="o">();</span>
        <span class="nc">PublicKey</span> <span class="n">publicKey</span> <span class="o">=</span> <span class="n">keyPair</span><span class="o">.</span><span class="na">getPublic</span><span class="o">();</span>

        <span class="c1">// 创建消息</span>
        <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Hello, world!"</span><span class="o">;</span>
        <span class="nc">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="nc">Signature</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"SHA256withRSA"</span><span class="o">);</span>
        <span class="c1">// 使用私钥对消息进行签名，创建含消息数据和签名的对象，SignedObject也会记录签名算法名称。</span>
        <span class="nc">SignedObject</span> <span class="n">signedObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SignedObject</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">privateKey</span><span class="o">,</span> <span class="n">signature</span><span class="o">);</span>

        <span class="c1">// 数据的字节数组表示</span>
        <span class="nc">ByteArrayOutputStream</span> <span class="n">byteArrayOutputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ByteArrayOutputStream</span><span class="o">();</span><span class="c1">//内存模拟</span>
        <span class="nc">ObjectOutputStream</span> <span class="n">objectOutputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="n">byteArrayOutputStream</span><span class="o">);</span>
        <span class="n">objectOutputStream</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">signedObject</span><span class="o">);</span><span class="c1">//序列化</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">p7Data</span> <span class="o">=</span> <span class="n">byteArrayOutputStream</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span><span class="c1">//读取字节</span>

        <span class="c1">// 数据保存到文件或发送给其他方</span>
        <span class="n">out</span><span class="o">(</span><span class="n">p7Data</span><span class="o">);</span>


        <span class="nc">ByteArrayInputStream</span> <span class="n">byteArrayInputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ByteArrayInputStream</span><span class="o">(</span><span class="n">p7Data</span><span class="o">);</span><span class="c1">//内存模拟</span>
        <span class="nc">ObjectInputStream</span> <span class="n">objectInputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="n">byteArrayInputStream</span><span class="o">);</span>

        <span class="nc">SignedObject</span> <span class="n">signedObjectReceived</span> <span class="o">=</span> <span class="o">(</span><span class="nc">SignedObject</span><span class="o">)</span> <span class="n">objectInputStream</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span><span class="c1">//反序列化</span>
        <span class="c1">// 在接收方，可以使用公钥来验证消息，签名已经在对象里了</span>
        <span class="kt">boolean</span> <span class="n">verified</span> <span class="o">=</span> <span class="n">signedObjectReceived</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">publicKey</span><span class="o">,</span> <span class="n">signature</span><span class="o">);</span>
        <span class="c1">// 拿到消息</span>
        <span class="nc">String</span> <span class="n">verifiedMessage</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">signedObjectReceived</span><span class="o">.</span><span class="na">getObject</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">verifiedMessage</span><span class="o">+</span><span class="s">"，保真吗？"</span><span class="o">+</span><span class="n">verified</span><span class="o">);</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>控制台：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aced00057372001a6a6176612e73656375726974792e5369676e65644f626a65637409ffbd682a3cd5ff0200035b0007636f6e74656e747400025b425b00097369676e617475726571007e00014c000c746865616c676f726974686d7400124c6a6176612f6c616e672f537472696e673b7870757200025b42acf317f8060854e0020000787000000014aced000574000d48656c6c6f2c20776f726c64217571007e000400000080ad39f5b20d2178c282f04fd90a50ad55a4c444fea270919d61ce8813d7c74ffb6275357c25a1025890db1e78fbae9910f943c2955e6e0734b1ef9cdd83f6ddfa0d2d5d680999146dd3b5021d8c546e1b6e45c587d935a57cfbd32232188bfbe3ea0308a0ae7bc4036dfe0a9d3e495f713297bc33236c7f7981b8637bbc69de5574000d53484132353677697468525341
Hello, world!，保真吗？true
</code></pre></div></div>

<p>自建一个也非常容易，<code class="language-plaintext highlighter-rouge">SignedObject</code>是一个支持序列化，内部并封装了消息数据、签名信息和签名算法，实例化时要求传入消息数据，私钥，签名算法，内部不会保留私钥。还有验证方法<code class="language-plaintext highlighter-rouge">verify</code>，因为内部保存了签名信息，因此只需要传入公钥和签名算法即可。以及返回消息数据的<code class="language-plaintext highlighter-rouge">getObject</code>方法。<strong>注意！传入的消息数据如果是对象需要实现序列化。</strong></p>

<p><strong>DSA签名</strong></p>

<p>除了RSA可以签名外，还可以使用DSA算法进行签名。DSA是Digital Signature Algorithm的缩写，它使用ElGamal数字签名算法。</p>

<p>DSA只能配合SHA使用，常用的算法有：</p>

<ul>
  <li>SHA1withDSA</li>
  <li>SHA256withDSA</li>
  <li>SHA512withDSA</li>
</ul>

<p>和RSA数字签名相比，DSA的优点是更快。</p>

<p><strong>ECDSA签名</strong></p>

<p>椭圆曲线签名算法ECDSA：Elliptic Curve Digital Signature Algorithm也是一种常用的签名算法，它的特点是可以从私钥推出公钥。比特币的签名算法就采用了ECDSA算法，使用标准椭圆曲线secp256k1。BouncyCastle提供了ECDSA的完整实现。</p>

<p>P1格式和P7格式是数字证书的编码格式，通常用于存储和传输证书及其相关信息。</p>

<p><strong>P1格式</strong></p>

<p>P1格式是一种简单的ASCII文本格式，通常用于存储私钥。P1格式的私钥文件以”—–BEGIN PRIVATE KEY—–“开头，以”—–END PRIVATE KEY—–“结尾，中间包含私钥的内容。</p>

<p>P1只是一种秘钥文件的规范，指明了文件中包含的内容是私钥或公钥，以及如何编码这些内容。在处理P1格式的秘钥文件时，需要注意文件中包含的标记（例如<code class="language-plaintext highlighter-rouge">-----BEGIN PRIVATE KEY-----</code>和<code class="language-plaintext highlighter-rouge">-----END PRIVATE KEY-----</code>）以及可能的Base64编码。根据具体的规范和编码，需要适当地处理文件内容以提取秘钥的原始数据，并使用相应的类和方法来解析和恢复秘钥对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.spec.InvalidKeySpecException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.spec.PKCS8EncodedKeySpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.spec.X509EncodedKeySpec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Base64</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">//生成P1格式公钥私钥文件</span>
        <span class="n">newP1</span><span class="o">();</span>

        <span class="c1">//读取P1格式公钥私钥文件</span>
        <span class="nc">Object</span><span class="o">[]</span> <span class="n">object</span> <span class="o">=</span> <span class="n">loadP1</span><span class="o">();</span>
        <span class="nc">PrivateKey</span> <span class="n">sk</span><span class="o">=</span> <span class="o">(</span><span class="nc">PrivateKey</span><span class="o">)</span> <span class="n">object</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
        <span class="nc">PublicKey</span> <span class="n">pk</span><span class="o">=</span> <span class="o">(</span><span class="nc">PublicKey</span><span class="o">)</span> <span class="n">object</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

        <span class="c1">// 待签名的消息或摘要:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Hello, I am Bob!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>

        <span class="c1">// 用自己的私钥签名:</span>
        <span class="nc">Signature</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Signature</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"SHA1withRSA"</span><span class="o">);</span>
        <span class="n">s</span><span class="o">.</span><span class="na">initSign</span><span class="o">(</span><span class="n">sk</span><span class="o">);</span>
        <span class="n">s</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">signed</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">sign</span><span class="o">();</span>
        <span class="c1">// 将消息与签名公开，签名用来验证消息没有被篡改</span>
        <span class="n">out</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">signed</span><span class="o">);</span>

        <span class="c1">// 用某人公开的公钥验证，解析公开的签名和消息，是否是对应人的。</span>
        <span class="nc">Signature</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Signature</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"SHA1withRSA"</span><span class="o">);</span>
        <span class="n">v</span><span class="o">.</span><span class="na">initVerify</span><span class="o">(</span><span class="n">pk</span><span class="o">);</span>
        <span class="n">v</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">message</span><span class="o">,</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)+</span><span class="s">"这消息保真吗? "</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">signed</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">newP1</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">NoSuchAlgorithmException</span> <span class="o">{</span>
        <span class="c1">// 生成RSA公钥/私钥:</span>
        <span class="nc">KeyPairGenerator</span> <span class="n">kpGen</span> <span class="o">=</span> <span class="nc">KeyPairGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RSA"</span><span class="o">);</span>
        <span class="n">kpGen</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
        <span class="nc">KeyPair</span> <span class="n">kp</span> <span class="o">=</span> <span class="n">kpGen</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">();</span>
        <span class="nc">PrivateKey</span> <span class="n">sk</span> <span class="o">=</span> <span class="n">kp</span><span class="o">.</span><span class="na">getPrivate</span><span class="o">();</span>
        <span class="nc">PublicKey</span> <span class="n">pk</span> <span class="o">=</span> <span class="n">kp</span><span class="o">.</span><span class="na">getPublic</span><span class="o">();</span>

        <span class="c1">// P1格式公钥</span>
        <span class="nc">String</span> <span class="n">base64EncodedPublicKey</span> <span class="o">=</span> <span class="nc">Base64</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">().</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">pk</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">p1FormattedPublicKey</span> <span class="o">=</span> <span class="s">"-----BEGIN PUBLIC KEY-----\n"</span> <span class="o">+</span>
                <span class="n">base64EncodedPublicKey</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span>
                <span class="s">"-----END PUBLIC KEY-----\n"</span><span class="o">;</span>
        <span class="c1">// 将P1格式的公钥保存到文件</span>
        <span class="nc">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"publicKey.p1"</span><span class="o">);</span>
        <span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">p1FormattedPublicKey</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
        <span class="n">fos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="c1">// P1格式私钥</span>
        <span class="nc">String</span> <span class="n">base64EncodedPrivateKey</span> <span class="o">=</span> <span class="nc">Base64</span><span class="o">.</span><span class="na">getEncoder</span><span class="o">().</span><span class="na">encodeToString</span><span class="o">(</span><span class="n">sk</span><span class="o">.</span><span class="na">getEncoded</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">p1FormattedPrivateKey</span> <span class="o">=</span> <span class="s">"-----BEGIN PRIVATE KEY-----\n"</span> <span class="o">+</span>
                <span class="n">base64EncodedPrivateKey</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span>
                <span class="s">"-----END PRIVATE KEY-----\n"</span><span class="o">;</span>

        <span class="c1">// 将P1格式的私钥保存到文件</span>
        <span class="nc">FileOutputStream</span> <span class="n">fos2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"privateKey.p1"</span><span class="o">);</span>
        <span class="n">fos2</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">p1FormattedPrivateKey</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
        <span class="n">fos2</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">Object</span><span class="o">[]</span> <span class="nf">loadP1</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">InvalidKeySpecException</span><span class="o">,</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">NoSuchAlgorithmException</span> <span class="o">{</span>
        <span class="c1">// 加载P1格式的私钥</span>
        <span class="nc">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"privateKey.p1"</span><span class="o">);</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">privateKeyBytes</span> <span class="o">=</span> <span class="n">fis</span><span class="o">.</span><span class="na">readAllBytes</span><span class="o">();</span>
        <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="c1">// 移除文本标记</span>
        <span class="nc">String</span> <span class="n">s1</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">privateKeyBytes</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"-----BEGIN PRIVATE KEY-----"</span><span class="o">,</span> <span class="s">""</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"-----END PRIVATE KEY-----"</span><span class="o">,</span> <span class="s">""</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"\\s+"</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
        <span class="n">privateKeyBytes</span><span class="o">=</span><span class="nc">Base64</span><span class="o">.</span><span class="na">getDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
        <span class="nc">KeyFactory</span> <span class="n">kf</span> <span class="o">=</span> <span class="nc">KeyFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">"RSA"</span><span class="o">);</span>

        <span class="c1">// 恢复私钥:</span>
        <span class="nc">PKCS8EncodedKeySpec</span> <span class="n">skSpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PKCS8EncodedKeySpec</span><span class="o">(</span><span class="n">privateKeyBytes</span><span class="o">);</span>
        <span class="nc">PrivateKey</span> <span class="n">sk</span> <span class="o">=</span> <span class="n">kf</span><span class="o">.</span><span class="na">generatePrivate</span><span class="o">(</span><span class="n">skSpec</span><span class="o">);</span>

        <span class="c1">// 加载P1格式的公钥</span>
        <span class="nc">FileInputStream</span> <span class="n">fis2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"publicKey.p1"</span><span class="o">);</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">publicKeyBytes</span> <span class="o">=</span> <span class="n">fis2</span><span class="o">.</span><span class="na">readAllBytes</span><span class="o">();</span>
        <span class="n">fis2</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="c1">// 移除文本标记</span>
        <span class="nc">String</span> <span class="n">s2</span><span class="o">=</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">publicKeyBytes</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"-----BEGIN PUBLIC KEY-----"</span><span class="o">,</span> <span class="s">""</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"-----END PUBLIC KEY-----"</span><span class="o">,</span> <span class="s">""</span><span class="o">)</span>
                <span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"\\s+"</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
        <span class="n">publicKeyBytes</span> <span class="o">=</span><span class="nc">Base64</span><span class="o">.</span><span class="na">getDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
        <span class="nc">X509EncodedKeySpec</span> <span class="n">pkSpec</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">X509EncodedKeySpec</span><span class="o">(</span><span class="n">publicKeyBytes</span><span class="o">);</span>
        <span class="nc">PublicKey</span> <span class="n">pk</span> <span class="o">=</span> <span class="n">kf</span><span class="o">.</span><span class="na">generatePublic</span><span class="o">(</span><span class="n">pkSpec</span><span class="o">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[]{</span><span class="n">sk</span><span class="o">,</span><span class="n">pk</span><span class="o">};</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>P7格式是一种用于存储加密数据和证书链的格式。P7格式的文件以”—–BEGIN PKCS7—–“开头，以”—–END PKCS7—–“结尾，中间包含加密数据和证书链的信息。</p>

<p>当第三方接口要求使用P7格式签名时，是要求将加密数据和证书链一起打包成P7格式的数据，用于传输或存储。</p>

<p><strong>SM2算法</strong>是一种基于椭圆曲线的非对称加密算法，是中国制定的国家密码算法标准之一。SM2算法提供了数字签名、密钥交换、公钥加密等功能，被广泛应用于各种安全领域，如电子认证、数字签名、信息传输加密等。由于SM2算法是非对称加密算法，因此在使用时需要生成一对公钥和私钥，公钥用于加密或验证签名，私钥用于解密或生成签名。</p>

<h2 id="数字证书">数字证书</h2>

<p>摘要算法用来确保数据没有被篡改，非对称加密算法可以对数据进行加解密，签名算法可以确保数据完整性和抗否认性，把这些算法集合到一起，并搞一套完善的标准，这就是数字证书。</p>

<p>因此，数字证书就是集合了多种密码学算法，用于实现数据加解密、身份认证、签名等多种功能的一种安全标准。</p>

<p>数字证书可以防止中间人攻击，因为它采用链式签名认证，即通过根证书（Root CA）去签名下一级证书，这样层层签名，直到最终的用户证书。而Root CA证书内置于操作系统中，所以，任何经过CA认证的数字证书都可以对其本身进行校验，确保证书本身不是伪造的。</p>

<p>上网时常用的HTTPS协议就是数字证书的应用。浏览器会自动验证证书的有效性。</p>

<p>要使用数字证书，首先需要创建证书。正常情况下，一个合法的数字证书需要经过CA签名，这需要认证域名并支付一定的费用。开发的时候，我们可以使用<strong>自签名</strong>的证书，这种证书可以正常开发调试，但不能对外作为服务使用，因为其他客户端并不认可未经CA签名的证书。</p>

<p>在Java程序中，数字证书存储在一种Java专用的key store文件中，JDK提供了一系列命令来创建和管理key store。用下面的命令创建一个key store，并设定口令123456：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keytool <span class="nt">-storepass</span> 123456 <span class="nt">-genkeypair</span> <span class="nt">-keyalg</span> RSA <span class="nt">-keysize</span> 1024 <span class="nt">-sigalg</span> SHA1withRSA <span class="nt">-validity</span> 3650 <span class="nt">-alias</span> mycert <span class="nt">-keystore</span> my.keystore <span class="nt">-dname</span> <span class="s2">"CN=www.sample.com, OU=sample, O=sample, L=BJ, ST=BJ, C=CN"</span>
</code></pre></div></div>

<p>几个主要的参数是：</p>

<ul>
  <li>keyalg：指定RSA加密算法；</li>
  <li>sigalg：指定SHA1withRSA签名算法；</li>
  <li>validity：指定证书有效期3650天；</li>
  <li>alias：指定证书在程序中引用的名称；</li>
  <li>dname：最重要的<code class="language-plaintext highlighter-rouge">CN=www.sample.com</code>指定了<code class="language-plaintext highlighter-rouge">Common Name</code>，如果证书用在HTTPS中，这个名称必须与域名完全一致。</li>
</ul>

<p>执行上述命令，JDK会在当前目录创建一个<code class="language-plaintext highlighter-rouge">my.keystore</code>文件，并存<strong>储创建成功的一个私钥和一个证书</strong>，它的别名是<code class="language-plaintext highlighter-rouge">mycert</code>。可以使用以下命令列出密钥库的内容：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keytool <span class="nt">-list</span> <span class="nt">-v</span> <span class="nt">-keystore</span> my.keystore <span class="nt">-storepass</span> 123456
</code></pre></div></div>

<p>请注意，虽然这个密钥库包含私钥，但这只是一个自签名证书，不会被浏览器等受信任的 CA 所信任，因此在实际生产环境中，您需要从受信任的 CA 获取证书以及相应的私钥，而不是使用自签名证书。</p>

<p>使用 Java KeyStore (JKS) 工具生成密钥库（keystore），默认情况下，生成的密钥库将包含证书以及相应的私钥。这是因为在实际使用中，密钥库通常用于存储证书和私钥对，以便安全地管理和使用它们。</p>

<p>还可以使用 <code class="language-plaintext highlighter-rouge">-storetype pkcs12</code> 选项来生成 PKCS12 格式的密钥库：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keytool <span class="nt">-storepass</span> 123456 <span class="nt">-genkeypair</span> <span class="nt">-keyalg</span> RSA <span class="nt">-keysize</span> 1024 <span class="nt">-sigalg</span> SHA1withRSA <span class="nt">-validity</span> 3650 <span class="nt">-alias</span> mycert <span class="nt">-keystore</span> my.p12 <span class="nt">-storetype</span> PKCS12 <span class="nt">-dname</span> <span class="s2">"CN=www.sample.com, OU=sample, O=sample, L=BJ, ST=BJ, C=CN"</span>
</code></pre></div></div>

<p>这个命令使用 <code class="language-plaintext highlighter-rouge">keytool</code> 工具生成了一个包含 RSA 密钥对的 PKCS12 格式的密钥库文件 <code class="language-plaintext highlighter-rouge">my.p12</code>。具体参数的含义如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-storepass 123456</code>: 设置密钥库的密码为 <code class="language-plaintext highlighter-rouge">123456</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">-genkeypair</code>: 生成密钥对。</li>
  <li><code class="language-plaintext highlighter-rouge">-keyalg RSA</code>: 使用 RSA 算法生成密钥对。</li>
  <li><code class="language-plaintext highlighter-rouge">-keysize 1024</code>: 设置密钥大小为 1024 位。</li>
  <li><code class="language-plaintext highlighter-rouge">-sigalg SHA1withRSA</code>: 使用 SHA1withRSA 签名算法。</li>
  <li><code class="language-plaintext highlighter-rouge">-validity 3650</code>: 设置证书的有效期为 3650 天。</li>
  <li><code class="language-plaintext highlighter-rouge">-alias mycert</code>: 设置别名为 <code class="language-plaintext highlighter-rouge">mycert</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">-keystore my.p12</code>: 指定生成的密钥库文件名为 <code class="language-plaintext highlighter-rouge">my.p12</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">-storetype PKCS12</code>: 指定密钥库类型为 PKCS12。</li>
  <li><code class="language-plaintext highlighter-rouge">-dname "CN=www.sample.com, OU=sample, O=sample, L=BJ, ST=BJ, C=CN"</code>: 设置证书主题信息，包括通用名称 (CN)、组织单位 (OU)、组织 (O)、城市 (L)、州/省 (ST) 和国家代码 (C)。</li>
</ul>

<p>这条命令的作用是生成一个包含指定 RSA 密钥对和证书信息的 PKCS12 格式的密钥库文件 <code class="language-plaintext highlighter-rouge">my.p12</code>。</p>

<p>有了key store存储的证书，就可以通过数字证书进行加解密和签名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.GeneralSecurityException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.KeyStore</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.PrivateKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.Signature</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.security.cert.X509Certificate</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span>  <span class="o">{</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"Hello, use X.509 cert!"</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
        <span class="c1">// 读取KeyStore:</span>
        <span class="nc">KeyStore</span> <span class="n">ks</span> <span class="o">=</span> <span class="n">loadKeyStore</span><span class="o">(</span><span class="s">"my.p12"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">);</span>
        <span class="c1">// 读取私钥:,用alias指定的名字</span>
        <span class="nc">PrivateKey</span> <span class="n">privateKey</span> <span class="o">=</span> <span class="o">(</span><span class="nc">PrivateKey</span><span class="o">)</span> <span class="n">ks</span><span class="o">.</span><span class="na">getKey</span><span class="o">(</span><span class="s">"mycert"</span><span class="o">,</span> <span class="s">"123456"</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
        <span class="c1">// 读取证书:</span>
        <span class="nc">X509Certificate</span> <span class="n">certificate</span> <span class="o">=</span> <span class="o">(</span><span class="nc">X509Certificate</span><span class="o">)</span> <span class="n">ks</span><span class="o">.</span><span class="na">getCertificate</span><span class="o">(</span><span class="s">"mycert"</span><span class="o">);</span>
        <span class="c1">// 公钥加密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">encrypted</span> <span class="o">=</span> <span class="n">encrypt</span><span class="o">(</span><span class="n">certificate</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">encrypted</span><span class="o">);</span>
        <span class="c1">// 私钥解密:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">decrypted</span> <span class="o">=</span> <span class="n">decrypt</span><span class="o">(</span><span class="n">privateKey</span><span class="o">,</span> <span class="n">encrypted</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"decrypted: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">decrypted</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
        <span class="c1">// 用私钥签名:</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">sign</span><span class="o">(</span><span class="n">privateKey</span><span class="o">,</span> <span class="n">certificate</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
        <span class="n">out</span><span class="o">(</span><span class="n">sign</span><span class="o">);</span>
        <span class="c1">// 用公钥验证签名:</span>
        <span class="kt">boolean</span> <span class="n">verified</span> <span class="o">=</span> <span class="n">verify</span><span class="o">(</span><span class="n">certificate</span><span class="o">,</span> <span class="n">message</span><span class="o">,</span> <span class="n">sign</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"verify: "</span> <span class="o">+</span> <span class="n">verified</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="nc">KeyStore</span> <span class="nf">loadKeyStore</span><span class="o">(</span><span class="nc">String</span> <span class="n">keyStoreFile</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">InputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="nc">Main</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">keyStoreFile</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"file not found in classpath: "</span> <span class="o">+</span> <span class="n">keyStoreFile</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">KeyStore</span> <span class="n">ks</span> <span class="o">=</span> <span class="nc">KeyStore</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="nc">KeyStore</span><span class="o">.</span><span class="na">getDefaultType</span><span class="o">());</span>
            <span class="n">ks</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">password</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">());</span>
            <span class="k">return</span> <span class="n">ks</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">encrypt</span><span class="o">(</span><span class="nc">X509Certificate</span> <span class="n">certificate</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">certificate</span><span class="o">.</span><span class="na">getPublicKey</span><span class="o">().</span><span class="na">getAlgorithm</span><span class="o">());</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">certificate</span><span class="o">.</span><span class="na">getPublicKey</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">decrypt</span><span class="o">(</span><span class="nc">PrivateKey</span> <span class="n">privateKey</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">privateKey</span><span class="o">.</span><span class="na">getAlgorithm</span><span class="o">());</span>
        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="nc">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">privateKey</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">sign</span><span class="o">(</span><span class="nc">PrivateKey</span> <span class="n">privateKey</span><span class="o">,</span> <span class="nc">X509Certificate</span> <span class="n">certificate</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">message</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="nc">Signature</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">certificate</span><span class="o">.</span><span class="na">getSigAlgName</span><span class="o">());</span>
        <span class="n">signature</span><span class="o">.</span><span class="na">initSign</span><span class="o">(</span><span class="n">privateKey</span><span class="o">);</span>
        <span class="n">signature</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">signature</span><span class="o">.</span><span class="na">sign</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">verify</span><span class="o">(</span><span class="nc">X509Certificate</span> <span class="n">certificate</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">message</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">sig</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">GeneralSecurityException</span> <span class="o">{</span>
        <span class="nc">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="nc">Signature</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">certificate</span><span class="o">.</span><span class="na">getSigAlgName</span><span class="o">());</span>
        <span class="n">signature</span><span class="o">.</span><span class="na">initVerify</span><span class="o">(</span><span class="n">certificate</span><span class="o">);</span>
        <span class="n">signature</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">signature</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">sig</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">out</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">o</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%02x"</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>从key store直接读取了私钥-公钥对，私钥以<code class="language-plaintext highlighter-rouge">PrivateKey</code>实例表示，公钥以<code class="language-plaintext highlighter-rouge">X509Certificate</code>表示，实际上数字证书只包含公钥，因此，读取证书并不需要口令，只有读取私钥才需要。如果部署到Web服务器上，例如Nginx，需要把私钥导出为Private Key格式，把证书导出为X509Certificate格式。</p>

<p>以HTTPS协议为例，浏览器和服务器建立安全连接的步骤如下：</p>

<ol>
  <li>浏览器向服务器发起请求，服务器向浏览器发送自己的数字证书；</li>
  <li>浏览器用操作系统内置的Root CA来验证服务器的证书是否有效，如果有效，就使用该证书加密一个随机的AES口令并发送给服务器；</li>
  <li>服务器用自己的私钥解密获得AES口令，并在后续通讯中使用AES加密。</li>
</ol>

<p>上述流程只是一种最常见的单向验证。如果服务器还要验证客户端，那么客户端也需要把自己的证书发送给服务器验证，这种场景常见于网银等。</p>

<p>注意：数字证书存储的是公钥，以及相关的证书链和算法信息。私钥必须严格保密，如果数字证书对应的私钥泄漏，就会造成严重的安全威胁。如果CA证书的私钥泄漏，那么该CA证书签发的所有证书将不可信。数字证书服务商<a href="https://en.wikipedia.org/wiki/DigiNotar">DigiNotar</a>就发生过私钥泄漏导致公司破产的事故。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">简单实现HashMap</title><link href="/2024/04/08/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0HashMap/" rel="alternate" type="text/html" title="简单实现HashMap" /><published>2024-04-08T00:00:00+08:00</published><updated>2024-04-08T00:00:00+08:00</updated><id>/2024/04/08/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0HashMap</id><content type="html" xml:base="/2024/04/08/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0HashMap/"><![CDATA[<h1 id="引言">引言</h1>
<p>简单实现HashMap，包括哈希冲突处理，扩容处理，可设置默认大小与负载因子，默认大小会自动提高到最近的2的幂，扩容时容量翻倍。</p>

<h1 id="简单实现hashmap">简单实现HashMap</h1>

<p>实现的方法：</p>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>V put(K key, V value)</td>
      <td>把<code class="language-plaintext highlighter-rouge">key</code>和<code class="language-plaintext highlighter-rouge">value</code>做映射并放入<code class="language-plaintext highlighter-rouge">Map</code>。如果放入的<code class="language-plaintext highlighter-rouge">key</code><strong>已经存在</strong>，则会更新<code class="language-plaintext highlighter-rouge">value</code>并返回被删除的旧的<code class="language-plaintext highlighter-rouge">value</code>，否则，返回<code class="language-plaintext highlighter-rouge">null</code>。</td>
    </tr>
    <tr>
      <td>V get(K key)</td>
      <td>通过<code class="language-plaintext highlighter-rouge">key</code>获取到对应的<code class="language-plaintext highlighter-rouge">value</code>。如果<code class="language-plaintext highlighter-rouge">key</code>不存在，则返回<code class="language-plaintext highlighter-rouge">null</code>。</td>
    </tr>
    <tr>
      <td>Set<code class="language-plaintext highlighter-rouge">&lt;K&gt;</code> keySet()</td>
      <td>返回<code class="language-plaintext highlighter-rouge">key</code>的<code class="language-plaintext highlighter-rouge">Set</code>集合。</td>
    </tr>
    <tr>
      <td>V remove(K key)</td>
      <td>通过<code class="language-plaintext highlighter-rouge">key</code>获取到对应的键值对删除，并弹出<code class="language-plaintext highlighter-rouge">value</code>。如果<code class="language-plaintext highlighter-rouge">key</code>不存在，则返回<code class="language-plaintext highlighter-rouge">null</code>。</td>
    </tr>
  </tbody>
</table>

<p>包括哈希冲突处理，扩容处理，可设置默认大小与负载因子，默认大小会自动提高到最近的2的幂，扩容时容量翻倍。</p>

<p>扩容操作包括以下步骤：</p>

<ol>
  <li>创建一个新的数组，大小是原数组的两倍。</li>
  <li>将原数组中的元素<strong>重新计算哈希值</strong>，并根据新数组的大小<strong>重新分配位置</strong>。</li>
  <li>将重新计算位置后的元素放入新数组中。</li>
  <li>将新数组设置为 <code class="language-plaintext highlighter-rouge">HashMap</code> 的数组，替换原数组。</li>
</ol>

<p>与重新生成一个HashMap相比，扩容不需要重新建立键值对，也不需要判断<code class="language-plaintext highlighter-rouge">key</code>覆盖，但在哈希冲突后依然要重新建立链表。</p>

<p>链表为空时没有销毁，而是保留，以备下次使用，提高性能。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>


<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">MyHashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyHashMap</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="mf">0.75</span><span class="no">F</span><span class="o">);</span>
<span class="c1">//        Map&lt;String, String&gt; map = new HashMap&lt;&gt;(1, 0.75F);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="s">"123"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"你好"</span><span class="o">)==</span><span class="kc">null</span><span class="o">?</span><span class="s">"不存在"</span><span class="o">:</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"你好"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">"你好"</span><span class="o">)==</span><span class="kc">null</span><span class="o">?</span><span class="s">"不存在"</span><span class="o">:</span><span class="s">"已删除"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"篮球"</span><span class="o">,</span> <span class="s">"小蔡"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"游泳"</span><span class="o">,</span> <span class="s">"小红"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"跑步"</span><span class="o">,</span> <span class="s">"小刚"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"唱歌"</span><span class="o">,</span> <span class="s">"小美"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"唱歌"</span><span class="o">,</span> <span class="s">"小美~"</span><span class="o">)+</span><span class="s">"已弹出"</span><span class="o">);</span><span class="c1">//弹出被覆盖Value</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"画画"</span><span class="o">,</span> <span class="s">"小强"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"编程"</span><span class="o">,</span> <span class="s">"小明"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">"篮球"</span><span class="o">)==</span><span class="kc">null</span><span class="o">?</span><span class="s">"不存在"</span><span class="o">:</span><span class="s">"已删除"</span><span class="o">);</span><span class="c1">//删除key为篮球的键值对</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"唱、跳、rap、篮球"</span><span class="o">,</span> <span class="s">"小蔡"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">devOut</span><span class="o">());</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">k</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"key="</span><span class="o">+</span><span class="n">k</span><span class="o">+</span><span class="s">",value = "</span><span class="o">+</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * 自定义hashMap
 * @param &lt;K&gt; key
 * @param &lt;V&gt; value
 */</span>
<span class="kd">class</span> <span class="nc">MyHashMap</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;{</span>
    <span class="kd">private</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>
    <span class="cm">/** 数组大小*/</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">=</span><span class="mi">16</span><span class="o">;</span>
    <span class="cm">/** 填充因子 */</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">actualSize</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="cm">/** 负载因子 */</span>
    <span class="kd">private</span> <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">=</span><span class="mf">0.75f</span><span class="o">;</span>

    <span class="cm">/**
     *
     * @param initialCapacity 数组初始长度
     * @param loadFactor 负载因子
     */</span>
    <span class="kd">public</span> <span class="nf">MyHashMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialCapacity</span><span class="o">,</span><span class="kt">float</span> <span class="n">loadFactor</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">initialCapacity</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"非法初始容量: "</span> <span class="o">+</span> <span class="n">initialCapacity</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="nc">Float</span><span class="o">.</span><span class="na">isNaN</span><span class="o">(</span><span class="n">loadFactor</span><span class="o">)||</span><span class="n">loadFactor</span> <span class="o">&lt;=</span> <span class="mf">0.0</span><span class="no">F</span> <span class="o">||</span> <span class="n">loadFactor</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"非法负载因子: "</span> <span class="o">+</span> <span class="n">loadFactor</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">initialCapacity</span> <span class="o">&gt;</span> <span class="mi">1073741824</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">initialCapacity</span> <span class="o">=</span> <span class="mi">1073741824</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 提升到2的整数幂</span>
        <span class="k">this</span><span class="o">.</span><span class="na">size</span><span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">nextPowerOfTwo</span><span class="o">(</span><span class="n">initialCapacity</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">loadFactor</span><span class="o">=</span><span class="n">loadFactor</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">MyHashMap</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 如果capacity不是2的整数幂，则增加到大于capacity的最近的2的整数幂
     * @param capacity 待提升数字
     * @return 2的整数幂
     */</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">nextPowerOfTwo</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">((</span><span class="n">capacity</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">capacity</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">capacity</span><span class="o">;</span> <span class="c1">// 如果a已经是2的整数幂，则直接返回a</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">power</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">power</span> <span class="o">&lt;</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">power</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 不断左移，直到找到大于a的最近的2的整数幂</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">power</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="no">V</span> <span class="nf">get</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getKeyHash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]==</span><span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="k">instanceof</span> <span class="no">KV</span><span class="o">)</span>  <span class="o">{</span>
            <span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span><span class="o">=(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;)</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">];</span>
            <span class="k">return</span> <span class="n">item</span><span class="o">.</span><span class="na">getV</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">){</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;)</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">];</span>
            <span class="k">for</span> <span class="o">(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getK</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">)){</span>
                    <span class="k">return</span> <span class="n">item</span><span class="o">.</span><span class="na">getV</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 获取key哈希值。
     * @param key 键
     * @return key的哈希值
     */</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getKeyHash</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">hash</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">hash</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">hash</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">%</span> <span class="n">size</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">hash</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="no">V</span> <span class="nf">put</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getKeyHash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="c1">//哈希桶是空的</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]=</span><span class="k">new</span> <span class="no">KV</span><span class="o">&lt;&gt;(</span><span class="n">key</span><span class="o">,</span><span class="n">value</span><span class="o">);</span>
            <span class="n">actualSize</span><span class="o">++;</span>
            <span class="n">expansion</span><span class="o">();</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 哈希桶已占用,哈希冲突</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="k">instanceof</span> <span class="no">KV</span><span class="o">)</span>  <span class="o">{</span>
            <span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span><span class="o">=(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;)</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">];</span>
            <span class="no">K</span> <span class="n">k</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getK</span><span class="o">();</span>
            <span class="c1">//覆盖检测</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">key</span><span class="o">)){</span>
                <span class="no">V</span> <span class="n">v</span><span class="o">=</span><span class="n">item</span><span class="o">.</span><span class="na">getV</span><span class="o">();</span>
                <span class="n">item</span><span class="o">.</span><span class="na">setV</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
                <span class="c1">//如果覆盖，则弹出旧值</span>
                <span class="k">return</span> <span class="n">v</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">//无覆盖则生成链表,并添加</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="c1">//旧元素</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
            <span class="c1">//新元素</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="no">KV</span><span class="o">&lt;&gt;(</span><span class="n">key</span><span class="o">,</span><span class="n">value</span><span class="o">));</span>
            <span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]=</span><span class="n">list</span><span class="o">;</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">){</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;)</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">];</span>
            <span class="c1">//是否为空链表</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="no">KV</span><span class="o">&lt;&gt;(</span><span class="n">key</span><span class="o">,</span><span class="n">value</span><span class="o">));</span>
                <span class="n">actualSize</span><span class="o">++;</span>
                <span class="n">expansion</span><span class="o">();</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">//覆盖检测</span>
            <span class="k">for</span> <span class="o">(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">K</span> <span class="n">k</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getK</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">key</span><span class="o">)){</span>
                    <span class="no">V</span> <span class="n">v</span><span class="o">=</span><span class="n">item</span><span class="o">.</span><span class="na">getV</span><span class="o">();</span>
                    <span class="n">item</span><span class="o">.</span><span class="na">setV</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
                    <span class="c1">//如果覆盖，则弹出旧值</span>
                    <span class="k">return</span> <span class="n">v</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c1">//无覆盖则添加</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="no">KV</span><span class="o">&lt;&gt;(</span><span class="n">key</span><span class="o">,</span><span class="n">value</span><span class="o">));</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 删除指定key的键值对
     * @param key key
     * @return value
     */</span>
    <span class="kd">public</span> <span class="no">V</span> <span class="nf">remove</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getKeyHash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 是一个元素,则删除,并弹出value</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="k">instanceof</span> <span class="no">KV</span><span class="o">)</span>  <span class="o">{</span>
            <span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span><span class="o">=(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;)</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">];</span>
            <span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]=</span><span class="kc">null</span><span class="o">;</span>
            <span class="n">actualSize</span><span class="o">--;</span>
            <span class="k">return</span> <span class="n">item</span><span class="o">.</span><span class="na">getV</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="c1">// 是链表,则遍历,找到key相等的删除并弹出</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">){</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;)</span><span class="n">array</span><span class="o">[</span><span class="n">hash</span><span class="o">];</span>
            <span class="k">for</span> <span class="o">(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">K</span> <span class="n">k</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getK</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">key</span><span class="o">)){</span>
                    <span class="no">V</span> <span class="n">v</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getV</span><span class="o">();</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
                    <span class="c1">// 如果链表为空则降低填充因子</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                        <span class="n">actualSize</span><span class="o">--;</span>
                    <span class="o">}</span>
                    <span class="k">return</span> <span class="n">v</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 返回所有key
     * @return Set&lt;K&gt;
     */</span>
    <span class="kd">public</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="no">K</span><span class="o">&gt;</span> <span class="nf">keySet</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="no">K</span><span class="o">&gt;</span> <span class="n">keySet</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="n">traverse</span><span class="o">((</span><span class="n">t</span><span class="o">)-&gt;{</span>
                <span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span><span class="o">=(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;)</span><span class="n">t</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
                <span class="n">keySet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getK</span><span class="o">());</span>
        <span class="o">});</span>
        <span class="k">return</span> <span class="n">keySet</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 遍历MyHashMap,每个元素调用都调用一次callback
     * @param callback 回调函数,每个元素调用一次
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="nc">Callback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Object</span> <span class="n">o</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span><span class="k">continue</span><span class="o">;}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="no">KV</span><span class="o">)</span>  <span class="o">{</span>
                <span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span><span class="o">=(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;)</span><span class="n">o</span><span class="o">;</span>
                <span class="n">callback</span><span class="o">.</span><span class="na">onCallback</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">){</span>
                <span class="nc">List</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;)</span><span class="n">o</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">callback</span><span class="o">.</span><span class="na">onCallback</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 扩容
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">expansion</span><span class="o">(){</span>
        <span class="k">if</span> <span class="o">((</span><span class="kt">float</span><span class="o">)</span> <span class="n">actualSize</span> <span class="o">/</span><span class="n">size</span><span class="o">&gt;=</span><span class="n">loadFactor</span><span class="o">){</span>
            <span class="c1">// 创建一个新的数组，大小是原数组的两倍。</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"扩容前："</span><span class="o">+</span><span class="n">devOut</span><span class="o">());</span>
            <span class="nc">Object</span><span class="o">[]</span> <span class="n">newArray</span><span class="o">=</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">size</span><span class="o">*</span><span class="mi">2</span><span class="o">];</span>
            <span class="c1">//重新设置哈希算法,容量翻倍</span>
            <span class="k">this</span><span class="o">.</span><span class="na">size</span><span class="o">*=</span><span class="mi">2</span><span class="o">;</span>
            <span class="c1">// 重新计算填充因子</span>
            <span class="kt">var</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">()</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">actualSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="o">};</span>
            <span class="c1">// 将原数组中的元素重新计算哈希值，并根据新数组的大小重新分配位置。</span>
            <span class="c1">// 将重新计算位置后的元素放入新数组中。</span>

            <span class="n">traverse</span><span class="o">((</span><span class="n">t</span><span class="o">)-&gt;{</span>
                <span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">t0</span><span class="o">=(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;)</span><span class="n">t</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
                <span class="no">K</span> <span class="n">key</span><span class="o">=</span><span class="n">t0</span><span class="o">.</span><span class="na">getK</span><span class="o">();</span>
                <span class="no">V</span> <span class="n">value</span><span class="o">=</span><span class="n">t0</span><span class="o">.</span><span class="na">getV</span><span class="o">();</span>
                <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getKeyHash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
                <span class="c1">// 哈希桶是空的</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">newArray</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
                    <span class="n">newArray</span><span class="o">[</span><span class="n">hash</span><span class="o">]=</span><span class="n">t0</span><span class="o">;</span>
                    <span class="n">ref</span><span class="o">.</span><span class="na">actualSize</span><span class="o">++;</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="c1">// 哈希桶已占用,哈希冲突</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">newArray</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="k">instanceof</span> <span class="no">KV</span><span class="o">)</span>  <span class="o">{</span>
                    <span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span><span class="o">=(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;)</span><span class="n">newArray</span><span class="o">[</span><span class="n">hash</span><span class="o">];</span>
                    <span class="no">K</span> <span class="n">k</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getK</span><span class="o">();</span>
                    <span class="c1">//覆盖检测（添加前就检测了，不会有重复的key）</span>
                    <span class="c1">//无覆盖则生成链表,并添加</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
                    <span class="c1">//旧元素</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
                    <span class="c1">//新元素</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t0</span><span class="o">);</span>
                    <span class="n">newArray</span><span class="o">[</span><span class="n">hash</span><span class="o">]=</span><span class="n">list</span><span class="o">;</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">newArray</span><span class="o">[</span><span class="n">hash</span><span class="o">]</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">){</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;</span> <span class="n">list</span><span class="o">=(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;&gt;)</span><span class="n">newArray</span><span class="o">[</span><span class="n">hash</span><span class="o">];</span>
                    <span class="c1">//是否为空链表（也不用检测了，因为扩容不会执行remove）</span>
                    <span class="c1">//覆盖检测（添加前就检测了，不会有重复的key）</span>
                    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t0</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">});</span>
            <span class="c1">// 将新数组设置为 `HashMap` 的数组，替换原数组。</span>
            <span class="k">this</span><span class="o">.</span><span class="na">array</span><span class="o">=</span><span class="n">newArray</span><span class="o">;</span>
            <span class="c1">// 重设填充因子</span>
            <span class="k">this</span><span class="o">.</span><span class="na">actualSize</span><span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">actualSize</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"扩容后："</span><span class="o">+</span><span class="n">devOut</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 定义一个回调接口</span>
    <span class="kd">interface</span> <span class="nc">Callback</span><span class="o">{</span>
         <span class="kt">void</span> <span class="nf">onCallback</span><span class="o">(</span><span class="nc">Object</span><span class="o">...</span><span class="na">t</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">StringBuffer</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">"{"</span><span class="o">);</span>
        <span class="kt">var</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">()</span> <span class="o">{</span>
            <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">};</span>
        <span class="n">traverse</span><span class="o">((</span><span class="n">t</span><span class="o">)-&gt;{</span>
            <span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="n">item</span><span class="o">=(</span><span class="no">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;)</span><span class="n">t</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">item</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
            <span class="n">ref</span><span class="o">.</span><span class="na">flag</span> <span class="o">=</span><span class="kc">true</span><span class="o">;</span>
        <span class="o">});</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">ref</span><span class="o">.</span><span class="na">flag</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"}"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">devOut</span><span class="o">(){</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"当前已用%d个哈希桶，哈希桶总数量：%d，结构：%s"</span><span class="o">,</span> <span class="n">actualSize</span><span class="o">,</span><span class="n">size</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">class</span> <span class="nc">KV</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;{</span>
        <span class="kd">private</span> <span class="no">K</span> <span class="n">k</span><span class="o">;</span><span class="kd">private</span> <span class="no">V</span> <span class="n">v</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nf">KV</span><span class="o">(</span><span class="no">K</span> <span class="n">k</span><span class="o">,</span> <span class="no">V</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span><span class="k">this</span><span class="o">.</span><span class="na">v</span> <span class="o">=</span> <span class="n">v</span><span class="o">;}</span>
        <span class="kd">public</span> <span class="no">K</span> <span class="nf">getK</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">k</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setK</span><span class="o">(</span><span class="no">K</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">;}</span><span class="kd">public</span> <span class="no">V</span> <span class="nf">getV</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">v</span><span class="o">;}</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setV</span><span class="o">(</span><span class="no">V</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">v</span> <span class="o">=</span> <span class="n">v</span><span class="o">;}</span>
        <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="n">k</span> <span class="o">+</span> <span class="s">"="</span> <span class="o">+</span> <span class="n">v</span><span class="o">;</span> <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>控制台输出：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>扩容前：当前已用1个哈希桶，哈希桶总数量：1，结构：[null=123]
扩容后：当前已用1个哈希桶，哈希桶总数量：2，结构：[null=123, null]
com.aotmd.MyHashMap{null=123}
com.aotmd.MyHashMap{}
不存在
不存在
扩容前：当前已用2个哈希桶，哈希桶总数量：2，结构：[跑步=小刚, [篮球=小蔡, 游泳=小红]]
扩容后：当前已用3个哈希桶，哈希桶总数量：4，结构：[跑步=小刚, 篮球=小蔡, null, 游泳=小红]
小美已弹出
已删除
当前已用3个哈希桶，哈希桶总数量：4，结构：[[跑步=小刚, 画画=小强], [编程=小明], null, [游泳=小红, 唱歌=小美~, 唱、跳、rap、篮球=小蔡]]
key=唱歌,value = 小美~
key=跑步,value = 小刚
key=游泳,value = 小红
key=编程,value = 小明
key=唱、跳、rap、篮球,value = 小蔡
key=画画,value = 小强
com.aotmd.MyHashMap{跑步=小刚,画画=小强,编程=小明,游泳=小红,唱歌=小美~,唱、跳、rap、篮球=小蔡}
</code></pre></div></div>
<p>修改一下,使用系统的HashMap,测试一下是否一致:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//MyHashMap&lt;String, String&gt; map = new MyHashMap&lt;&gt;(1, 0.75F);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="mf">0.75</span><span class="no">F</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="s">"123"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"你好"</span><span class="o">)==</span><span class="kc">null</span><span class="o">?</span><span class="s">"不存在"</span><span class="o">:</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"你好"</span><span class="o">));</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">"你好"</span><span class="o">)==</span><span class="kc">null</span><span class="o">?</span><span class="s">"不存在"</span><span class="o">:</span><span class="s">"已删除"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"篮球"</span><span class="o">,</span> <span class="s">"小蔡"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"游泳"</span><span class="o">,</span> <span class="s">"小红"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"跑步"</span><span class="o">,</span> <span class="s">"小刚"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"唱歌"</span><span class="o">,</span> <span class="s">"小美"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"唱歌"</span><span class="o">,</span> <span class="s">"小美~"</span><span class="o">)+</span><span class="s">"已弹出"</span><span class="o">);</span><span class="c1">//弹出被覆盖Value</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"画画"</span><span class="o">,</span> <span class="s">"小强"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"编程"</span><span class="o">,</span> <span class="s">"小明"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">"篮球"</span><span class="o">)==</span><span class="kc">null</span><span class="o">?</span><span class="s">"不存在"</span><span class="o">:</span><span class="s">"已删除"</span><span class="o">);</span><span class="c1">//删除key为篮球的键值对</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"唱、跳、rap、篮球"</span><span class="o">,</span> <span class="s">"小蔡"</span><span class="o">);</span>
<span class="c1">//System.out.println(map.devOut());</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">k</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"key="</span><span class="o">+</span><span class="n">k</span><span class="o">+</span><span class="s">",value = "</span><span class="o">+</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
<span class="o">}</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
</code></pre></div></div>
<p>控制台输出：</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{null=123}
{}
不存在
不存在
小美已弹出
已删除
key=唱歌,value = 小美~
key=编程,value = 小明
key=唱、跳、rap、篮球,value = 小蔡
key=跑步,value = 小刚
key=游泳,value = 小红
key=画画,value = 小强
{唱歌=小美~, 编程=小明, 唱、跳、rap、篮球=小蔡, 跑步=小刚, 游泳=小红, 画画=小强}
</code></pre></div></div>
<p>没有问题</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Java集合-常用实现类</title><link href="/2024/04/07/Java%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E5%AE%9E%E7%8E%B0%E7%B1%BB/" rel="alternate" type="text/html" title="Java集合-常用实现类" /><published>2024-04-07T00:00:00+08:00</published><updated>2024-04-07T00:00:00+08:00</updated><id>/2024/04/07/Java%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E5%AE%9E%E7%8E%B0%E7%B1%BB</id><content type="html" xml:base="/2024/04/07/Java%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E5%AE%9E%E7%8E%B0%E7%B1%BB/"><![CDATA[<h1 id="引言">引言</h1>
<p>java集合常用实现类，ArrayList、HashMap、EnumMap、TreeMap、Properties、Set、Queue、PriorityQueue、Deque、Stack、Iterator。</p>

<h1 id="集合">集合</h1>
<p>在Java中，如果一个Java对象可以在内部持有若干其他Java对象，并对外提供访问接口，我们把这种Java对象称为集合。很显然，Java的数组可以看作是一种集合：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">ss</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span> <span class="c1">// 可以持有10个String对象</span>
<span class="n">ss</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="o">;</span> <span class="c1">// 可以放入String对象</span>
<span class="nc">String</span> <span class="n">first</span> <span class="o">=</span> <span class="n">ss</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// 可以获取String对象</span>
</code></pre></div></div>
<p>既然Java提供了数组这种数据类型，可以充当集合，那么，我们为什么还需要其他集合类？这是因为数组有如下限制：</p>
<ul>
  <li>数组初始化后大小不可变；</li>
  <li>数组只能按索引顺序存取。</li>
</ul>

<p>因此，我们需要各种不同类型的集合类来处理不同的数据，例如：</p>
<ul>
  <li>可变大小的顺序链表；</li>
  <li>保证无重复元素的集合；</li>
</ul>

<h1 id="collection">Collection</h1>
<p>Java标准库自带的<code class="language-plaintext highlighter-rouge">java.util</code>包提供了集合类：<code class="language-plaintext highlighter-rouge">Collection</code>，它是除<code class="language-plaintext highlighter-rouge">Map</code>外所有其他集合类的根接口。Java的<code class="language-plaintext highlighter-rouge">java.util</code>包主要提供了以下三种类型的集合：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">List</code>：一种有序列表的集合，例如，按索引排列的<code class="language-plaintext highlighter-rouge">Student</code>的<code class="language-plaintext highlighter-rouge">List</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">Set</code>：一种保证没有重复元素的集合，例如，所有无重复名称的<code class="language-plaintext highlighter-rouge">Student</code>的<code class="language-plaintext highlighter-rouge">Set</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">Map</code>：一种通过键值（key-value）查找的映射表集合，例如，根据<code class="language-plaintext highlighter-rouge">Student</code>的<code class="language-plaintext highlighter-rouge">name</code>查找对应<code class="language-plaintext highlighter-rouge">Student</code>的<code class="language-plaintext highlighter-rouge">Map</code>。</li>
</ul>

<p>Java集合的设计有几个特点：一是实现了接口和实现类相分离，例如，有序表的接口是<code class="language-plaintext highlighter-rouge">List</code>，具体的实现类有<code class="language-plaintext highlighter-rouge">ArrayList</code>，<code class="language-plaintext highlighter-rouge">LinkedList</code>等，二是支持泛型，我们可以限制在一个集合中只能放入同一种数据类型的元素，例如：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 只能放入String类型</span>
</code></pre></div></div>
<p>最后，Java访问集合总是通过统一的方式——迭代器（Iterator）来实现，它最明显的好处在于无需知道集合内部元素是按什么方式存储的。</p>

<p>由于Java的集合设计非常久远，中间经历过大规模改进，我们要注意到有一小部分集合类是遗留类，不应该继续使用：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Hashtable</code>：一种线程安全的<code class="language-plaintext highlighter-rouge">Map</code>实现；</li>
  <li><code class="language-plaintext highlighter-rouge">Vector</code>：一种线程安全的<code class="language-plaintext highlighter-rouge">List</code>实现；</li>
  <li><code class="language-plaintext highlighter-rouge">Stack</code>：基于<code class="language-plaintext highlighter-rouge">Vector</code>实现的<code class="language-plaintext highlighter-rouge">LIFO</code>的栈。</li>
</ul>

<p>还有一小部分接口是遗留接口，也不应该继续使用：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Enumeration&lt;E&gt;</code>：已被<code class="language-plaintext highlighter-rouge">Iterator&lt;E&gt;</code>取代。</li>
</ul>

<h1 id="list">List</h1>
<p><strong><code class="language-plaintext highlighter-rouge">List</code>的子接口</strong>除了<code class="language-plaintext highlighter-rouge">List</code>接口外，还有<code class="language-plaintext highlighter-rouge">Deque</code>（双端队列）和<code class="language-plaintext highlighter-rouge">Queue</code>（队列）等接口，它们分别代表具有不同特性的列表。<code class="language-plaintext highlighter-rouge">Deque</code>支持在两端添加和删除元素，而<code class="language-plaintext highlighter-rouge">Queue</code>通常采用先进先出（FIFO）的方式管理元素。</p>

<p>在<strong>Java 8</strong> 中，集合框架引入了一些新的特性，如<code class="language-plaintext highlighter-rouge">forEach()</code>方法、<code class="language-plaintext highlighter-rouge">stream</code>流操作、函数式接口等，可以更方便地对集合进行操作和处理。</p>

<p>在实际应用中，需要增删元素的有序列表，我们使用最多的是<code class="language-plaintext highlighter-rouge">ArrayList</code>。</p>

<p><code class="language-plaintext highlighter-rouge">ArrayList</code>把添加和删除的操作封装起来，让我们操作<code class="language-plaintext highlighter-rouge">List</code>类似于操作数组，却不用关心内部元素如何移动。</p>

<p><code class="language-plaintext highlighter-rouge">List&lt;E&gt;</code>接口有几个主要的接口方法：</p>

<ul>
  <li>在末尾添加一个元素：<code class="language-plaintext highlighter-rouge">boolean add(E e)</code></li>
  <li>在指定索引添加一个元素：<code class="language-plaintext highlighter-rouge">boolean add(int index, E e)</code></li>
  <li>删除指定索引的元素：<code class="language-plaintext highlighter-rouge">E remove(int index)</code></li>
  <li>删除某个元素：<code class="language-plaintext highlighter-rouge">boolean remove(Object e)</code></li>
  <li>获取指定索引的元素：<code class="language-plaintext highlighter-rouge">E get(int index)</code></li>
  <li>获取链表大小（包含元素的个数）：<code class="language-plaintext highlighter-rouge">int size()</code></li>
</ul>

<p>实现<code class="language-plaintext highlighter-rouge">List</code>接口并非只能通过数组（即<code class="language-plaintext highlighter-rouge">ArrayList</code>的实现方式）来实现，另一种<code class="language-plaintext highlighter-rouge">LinkedList</code>通过“链表”也实现了List接口。在<code class="language-plaintext highlighter-rouge">LinkedList</code>中，它的内部每个元素都指向在<code class="language-plaintext highlighter-rouge">LinkedList</code>中，它的内部每个元素都指向下一个元素：</p>
<pre><code class="language-ascii">        ┌───┬───┐   ┌───┬───┐   ┌───┬───┐   ┌───┬───┐
HEAD ──&gt;│ A │ ●─┼──&gt;│ B │ ●─┼──&gt;│ C │ ●─┼──&gt;│ D │   │
        └───┴───┘   └───┴───┘   └───┴───┘   └───┴───┘
</code></pre>

<p>我们来比较一下<code class="language-plaintext highlighter-rouge">ArrayList</code>和<code class="language-plaintext highlighter-rouge">LinkedList</code>：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">ArrayList</th>
      <th style="text-align: left">LinkedList</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">获取指定元素</td>
      <td style="text-align: left">速度很快</td>
      <td style="text-align: left">需要从头开始查找元素</td>
    </tr>
    <tr>
      <td style="text-align: left">添加元素到末尾</td>
      <td style="text-align: left">速度很快</td>
      <td style="text-align: left">速度很快</td>
    </tr>
    <tr>
      <td style="text-align: left">在指定位置添加/删除</td>
      <td style="text-align: left">需要移动元素</td>
      <td style="text-align: left">不需要移动元素</td>
    </tr>
    <tr>
      <td style="text-align: left">内存占用</td>
      <td style="text-align: left">少</td>
      <td style="text-align: left">较大</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">ArrayList</code>适合随机访问，而<code class="language-plaintext highlighter-rouge">LinkedList</code>适合插入和删除操作频繁的场景。</p>

<p>通常情况下，我们总是优先使用<code class="language-plaintext highlighter-rouge">ArrayList</code>。<code class="language-plaintext highlighter-rouge">List</code>接口<strong>允许</strong>添加<strong>重复</strong>的元素，<code class="language-plaintext highlighter-rouge">List</code>还<strong>允许添加</strong><code class="language-plaintext highlighter-rouge">null</code>。</p>

<p>除了使用<code class="language-plaintext highlighter-rouge">ArrayList</code>和<code class="language-plaintext highlighter-rouge">LinkedList</code>，我们还可以通过<code class="language-plaintext highlighter-rouge">List</code>接口提供的<code class="language-plaintext highlighter-rouge">of()</code>方法，根据给定元素快速创建<code class="language-plaintext highlighter-rouge">List</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</code></pre></div></div>
<p>但是<code class="language-plaintext highlighter-rouge">List.of()</code>方法不接受<code class="language-plaintext highlighter-rouge">null</code>值，如果传入<code class="language-plaintext highlighter-rouge">null</code>，会抛出<code class="language-plaintext highlighter-rouge">NullPointerException</code>异常。</p>
<h2 id="遍历list">遍历List</h2>
<p>可以用<code class="language-plaintext highlighter-rouge">for</code>循环根据索引配合<code class="language-plaintext highlighter-rouge">get(int)</code>方法遍历，但这种方式并不推荐，一是代码复杂，二是因为<code class="language-plaintext highlighter-rouge">get(int)</code>方法只有<code class="language-plaintext highlighter-rouge">ArrayList</code>的实现是高效的，换成<code class="language-plaintext highlighter-rouge">LinkedList</code>后，索引越大，访问速度越慢。</p>

<p>迭代器<code class="language-plaintext highlighter-rouge">Iterator</code>本身也是一个对象，但它是由<code class="language-plaintext highlighter-rouge">List</code>的<strong>实例</strong>调用<code class="language-plaintext highlighter-rouge">iterator()</code>方法的时候创建的。<code class="language-plaintext highlighter-rouge">Iterator</code>对象知道如何遍历一个<code class="language-plaintext highlighter-rouge">List</code>，并且不同的<code class="language-plaintext highlighter-rouge">List</code>类型，返回的<code class="language-plaintext highlighter-rouge">Iterator</code>对象实现也是不同的，但<strong>总是</strong>具有<strong>最高</strong>的访问效率。</p>

<p><code class="language-plaintext highlighter-rouge">Iterator</code>对象有两个方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">boolean hasNext()</code>判断是否有下一个元素</li>
  <li><code class="language-plaintext highlighter-rouge">E next()</code>返回下一个元素。</li>
</ul>

<p>使用<code class="language-plaintext highlighter-rouge">Iterator</code>遍历<code class="language-plaintext highlighter-rouge">List</code>代码如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
    <span class="nc">Integer</span> <span class="n">next</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>由于<code class="language-plaintext highlighter-rouge">Iterator</code>遍历是如此常用，所以，Java的<code class="language-plaintext highlighter-rouge">for each</code>循环本身就可以帮我们使用<code class="language-plaintext highlighter-rouge">Iterator</code>遍历。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">next</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>只要实现了<code class="language-plaintext highlighter-rouge">Iterable</code>接口的集合类都可以直接用<code class="language-plaintext highlighter-rouge">for each</code>循环来遍历，Java编译器本身并不知道如何遍历集合对象，但它会自动把<code class="language-plaintext highlighter-rouge">for each</code>循环变成<code class="language-plaintext highlighter-rouge">Iterator</code>的调用，原因就在于<code class="language-plaintext highlighter-rouge">Iterable</code>接口定义了一个<code class="language-plaintext highlighter-rouge">Iterator&lt;E&gt; iterator()</code>方法，强迫集合类必须返回一个<code class="language-plaintext highlighter-rouge">Iterator</code>实例。</p>

<p>在使用迭代器遍历集合时，如果在遍历过程中<strong>修改</strong>了集合的结构（例如添加或删除元素），会导致<code class="language-plaintext highlighter-rouge">ConcurrentModificationException</code>异常。为了避免这种情况，可以使用迭代器的<code class="language-plaintext highlighter-rouge">remove()</code>方法来删除元素，而不是直接调用集合的删除方法。</p>

<h2 id="list和array转换">List和Array转换</h2>
<p>把<code class="language-plaintext highlighter-rouge">List</code>变为<code class="language-plaintext highlighter-rouge">Array</code>有三种方法：</p>

<p><strong>1.</strong>调用<code class="language-plaintext highlighter-rouge">toArray()</code>方法直接返回一个<code class="language-plaintext highlighter-rouge">Object[]</code>数组，这种方法会丢失类型信息，所以实际应用很少。</p>

<p><strong>2.</strong>给<code class="language-plaintext highlighter-rouge">toArray(T[])</code>传入一个类型相同的<code class="language-plaintext highlighter-rouge">Array</code>，<code class="language-plaintext highlighter-rouge">List</code>内部自动把元素复制到传入的<code class="language-plaintext highlighter-rouge">Array</code>中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span> <span class="mi">34</span><span class="o">,</span> <span class="mi">56</span><span class="o">);</span>
    <span class="nc">Integer</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Integer</span><span class="o">[</span><span class="mi">3</span><span class="o">]);</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">n</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">toArray(T[])</code>是泛型方法，因此<code class="language-plaintext highlighter-rouge">T</code>是<strong>独立</strong>的，可以传入其他类型的数组，比如<code class="language-plaintext highlighter-rouge">Number</code>类型，如果传入不兼容类型的数组，则会抛出<code class="language-plaintext highlighter-rouge">ArrayStoreException</code>，如果传入的数组长度小了，则会自动创建一个刚好够大的数组，如果多了则对多的部分填<code class="language-plaintext highlighter-rouge">null</code>。</p>

<p>最常用的是传入一个“恰好”大小的数组：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Integer</span><span class="o">[</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()]);</span>
</code></pre></div></div>
<p><strong>3.</strong>更简洁的写法是使用<code class="language-plaintext highlighter-rouge">List</code>接口定义的<code class="language-plaintext highlighter-rouge">T[] toArray(IntFunction&lt;T[]&gt; generator)</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
</code></pre></div></div>
<p>当使用 <code class="language-plaintext highlighter-rouge">toArray(IntFunction&lt;A[]&gt; generator)</code> 方法时，它会使用传入的 <code class="language-plaintext highlighter-rouge">generator</code> 函数来创建一个新的 <code class="language-plaintext highlighter-rouge">Integer</code> 数组，数组的大小通常为列表的大小。<code class="language-plaintext highlighter-rouge">IntFunction&lt;A[]&gt; generator</code> 是一个函数式接口，接受一个整数参数并返回一个泛型数组。可以通过方法引用 <code class="language-plaintext highlighter-rouge">Integer[]::new</code> 来指定生成的数组类型。<a href="#方法引用">详细解释请看这里</a>。</p>

<p>反过来，把<code class="language-plaintext highlighter-rouge">Array</code>变为<code class="language-plaintext highlighter-rouge">List</code>就简单多了，通过<code class="language-plaintext highlighter-rouge">List.of(T...)</code>方法最简单：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="o">};</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
</code></pre></div></div>
<p>对于JDK 11之前的版本，可以使用<code class="language-plaintext highlighter-rouge">Arrays.asList(T...)</code>方法把数组转换成<code class="language-plaintext highlighter-rouge">List</code>。</p>

<p>因为返回的<code class="language-plaintext highlighter-rouge">List</code>不一定就是<code class="language-plaintext highlighter-rouge">ArrayList</code>或者<code class="language-plaintext highlighter-rouge">LinkedList</code>，因此转换后返回的是一个<strong>只读</strong><code class="language-plaintext highlighter-rouge">List</code>。</p>

<h2 id="equals方法">equals()方法</h2>
<p><code class="language-plaintext highlighter-rouge">boolean contains(Object o)</code>方法判断<code class="language-plaintext highlighter-rouge">List</code>是否包含某个指定元素。</p>

<p><code class="language-plaintext highlighter-rouge">int indexOf(Object o)</code>方法返回某个元素的索引，如果元素不存在，就返回<code class="language-plaintext highlighter-rouge">-1</code>。</p>

<p>实际上<code class="language-plaintext highlighter-rouge">contains()</code>内部也是调用的<code class="language-plaintext highlighter-rouge">indexOf()</code>,<code class="language-plaintext highlighter-rouge">indexOf()</code>内部<strong>会使用</strong><code class="language-plaintext highlighter-rouge">equals()</code><strong>判断是否相等</strong>而不是使用<code class="language-plaintext highlighter-rouge">==</code>判断。<code class="language-plaintext highlighter-rouge">ArrayList&lt;&gt;</code>的<code class="language-plaintext highlighter-rouge">indexOf()</code>的源码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">indexOf</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="no">E</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>因此如果<strong>要使用</strong><code class="language-plaintext highlighter-rouge">List</code>的<code class="language-plaintext highlighter-rouge">contains()</code>、<code class="language-plaintext highlighter-rouge">indexOf()</code>方法，<strong>必须</strong>正确覆写<code class="language-plaintext highlighter-rouge">equals()</code>方法，否则，放进去的实例的<code class="language-plaintext highlighter-rouge">equals()</code>方法就是继承自<code class="language-plaintext highlighter-rouge">Object</code>的<code class="language-plaintext highlighter-rouge">equals()</code>，也就是<code class="language-plaintext highlighter-rouge">==</code>，因此永远不相等。</p>

<hr />

<p><strong>编写equals</strong></p>

<p><code class="language-plaintext highlighter-rouge">equals()</code>方法必须满足以下条件：</p>

<ul>
  <li>自反性（Reflexive）：对于非<code class="language-plaintext highlighter-rouge">null</code>的<code class="language-plaintext highlighter-rouge">x</code>来说，<code class="language-plaintext highlighter-rouge">x.equals(x)</code>必须返回<code class="language-plaintext highlighter-rouge">true</code>；</li>
  <li>对称性（Symmetric）：对于非<code class="language-plaintext highlighter-rouge">null</code>的<code class="language-plaintext highlighter-rouge">x</code>和<code class="language-plaintext highlighter-rouge">y</code>来说，如果<code class="language-plaintext highlighter-rouge">x.equals(y)</code>为<code class="language-plaintext highlighter-rouge">true</code>，则<code class="language-plaintext highlighter-rouge">y.equals(x)</code>也必须为<code class="language-plaintext highlighter-rouge">true</code>；</li>
  <li>传递性（Transitive）：对于非<code class="language-plaintext highlighter-rouge">null</code>的<code class="language-plaintext highlighter-rouge">x</code>、<code class="language-plaintext highlighter-rouge">y</code>和<code class="language-plaintext highlighter-rouge">z</code>来说，如果<code class="language-plaintext highlighter-rouge">x.equals(y)</code>为<code class="language-plaintext highlighter-rouge">true</code>，<code class="language-plaintext highlighter-rouge">y.equals(z)</code>也为<code class="language-plaintext highlighter-rouge">true</code>，那么<code class="language-plaintext highlighter-rouge">x.equals(z)</code>也必须为<code class="language-plaintext highlighter-rouge">true</code>；</li>
  <li>一致性（Consistent）：对于非<code class="language-plaintext highlighter-rouge">null</code>的<code class="language-plaintext highlighter-rouge">x</code>和<code class="language-plaintext highlighter-rouge">y</code>来说，只要<code class="language-plaintext highlighter-rouge">x</code>和<code class="language-plaintext highlighter-rouge">y</code>状态不变，则<code class="language-plaintext highlighter-rouge">x.equals(y)</code>总是一致地返回<code class="language-plaintext highlighter-rouge">true</code>或者<code class="language-plaintext highlighter-rouge">false</code>；</li>
  <li>对<code class="language-plaintext highlighter-rouge">null</code>的比较：即<code class="language-plaintext highlighter-rouge">x.equals(null)</code>永远返回<code class="language-plaintext highlighter-rouge">false</code>。</li>
</ul>

<p>以<code class="language-plaintext highlighter-rouge">Person</code>类为例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>首先，定义“相等”的逻辑含义。对于<code class="language-plaintext highlighter-rouge">Person</code>类，如果<code class="language-plaintext highlighter-rouge">name</code>相等，并且<code class="language-plaintext highlighter-rouge">age</code>相等，我们就认为两个<code class="language-plaintext highlighter-rouge">Person</code>实例相等。对于<strong>引用字段</strong>比较，使用<code class="language-plaintext highlighter-rouge">equals()</code>，对于<strong>基本类型字段</strong>的比较，使用<code class="language-plaintext highlighter-rouge">==</code>。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">Person</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">nameEquals</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="c1">//如果都是null则相等</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">nameEquals</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">//如果this.name不是null则调用它的equals</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">nameEquals</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">nameEquals</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="n">p</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>如果<code class="language-plaintext highlighter-rouge">Person</code>有好几个引用类型的字段，上面的写法就太复杂了。要简化引用类型的比较，我们使用<code class="language-plaintext highlighter-rouge">Objects.equals()</code>静态方法，注意不是<code class="language-plaintext highlighter-rouge">Object</code>而是<code class="language-plaintext highlighter-rouge">Objects</code>：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">Person</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="n">p</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">Objects.equals()</code>静态方法：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">==</span> <span class="n">b</span> <span class="o">||</span> <span class="n">a</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</code></pre></div></div>
<p>是同一个对象或都是<code class="language-plaintext highlighter-rouge">null</code>，<code class="language-plaintext highlighter-rouge">a</code>不是<code class="language-plaintext highlighter-rouge">null</code>则调用<code class="language-plaintext highlighter-rouge">a</code>的<code class="language-plaintext highlighter-rouge">equals</code></p>

<p>要求是同一个类的写法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="nc">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Person</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">!=</span> <span class="n">p</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<h1 id="map">Map</h1>
<p>通过一个键去查询对应的值。使用<code class="language-plaintext highlighter-rouge">List</code>来实现存在效率非常低的问题，因为平均需要扫描一半的元素才能确定，而<code class="language-plaintext highlighter-rouge">Map</code>这种键值（key-value）映射表的数据结构，作用就是能高效通过<code class="language-plaintext highlighter-rouge">key</code>快速查找<code class="language-plaintext highlighter-rouge">value</code>（元素）。</p>

<p><code class="language-plaintext highlighter-rouge">Map</code>也是一个接口，最常用的实现类是<code class="language-plaintext highlighter-rouge">HashMap</code>。除了<code class="language-plaintext highlighter-rouge">HashMap</code>外，还有<code class="language-plaintext highlighter-rouge">TreeMap</code>（基于红黑树实现）和<code class="language-plaintext highlighter-rouge">LinkedHashMap</code>（保持插入顺序或访问顺序）等<code class="language-plaintext highlighter-rouge">Map</code>的实现类，它们可以根据具体的需求选择合适的实现类。</p>

<p><code class="language-plaintext highlighter-rouge">HashMap</code>之所以能根据<code class="language-plaintext highlighter-rouge">key</code>直接拿到<code class="language-plaintext highlighter-rouge">value</code>，原因是它内部通过空间换时间的方法，用一个大数组存储所有<code class="language-plaintext highlighter-rouge">value</code>，并根据key直接计算出<code class="language-plaintext highlighter-rouge">value</code>应该存储在哪个索引。</p>

<p><code class="language-plaintext highlighter-rouge">Map</code>的<code class="language-plaintext highlighter-rouge">key</code>不能重复，<code class="language-plaintext highlighter-rouge">value</code>可以重复。<code class="language-plaintext highlighter-rouge">Map</code><strong>不保证顺序</strong>。</p>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>V put(K key, V value)</td>
      <td>把<code class="language-plaintext highlighter-rouge">key</code>和<code class="language-plaintext highlighter-rouge">value</code>做了映射并放入<code class="language-plaintext highlighter-rouge">Map</code>。如果放入的<code class="language-plaintext highlighter-rouge">key</code><strong>已经存在</strong>，则会更新<code class="language-plaintext highlighter-rouge">value</code>并返回被删除的旧的<code class="language-plaintext highlighter-rouge">value</code>，否则，返回<code class="language-plaintext highlighter-rouge">null</code>。</td>
    </tr>
    <tr>
      <td>V get(K key)</td>
      <td>通过<code class="language-plaintext highlighter-rouge">key</code>获取到对应的<code class="language-plaintext highlighter-rouge">value</code>。如果<code class="language-plaintext highlighter-rouge">key</code>不存在，则返回<code class="language-plaintext highlighter-rouge">null</code>。</td>
    </tr>
    <tr>
      <td>boolean containsKey(K key)</td>
      <td>查询某个<code class="language-plaintext highlighter-rouge">key</code>是否存在。</td>
    </tr>
    <tr>
      <td>boolean containsValue(V value)</td>
      <td>查询某个<code class="language-plaintext highlighter-rouge">value</code>是否存在。</td>
    </tr>
    <tr>
      <td>keySet()</td>
      <td>返回<code class="language-plaintext highlighter-rouge">key</code>的<code class="language-plaintext highlighter-rouge">Set</code>集合。</td>
    </tr>
    <tr>
      <td>entrySet()</td>
      <td>返回此地图中包含的映射的<code class="language-plaintext highlighter-rouge">Set</code>视图。</td>
    </tr>
  </tbody>
</table>

<p><strong>遍历</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"k1"</span><span class="o">,</span><span class="s">"v1"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"k2"</span><span class="o">,</span><span class="s">"v2"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"k3"</span><span class="o">,</span><span class="s">"v3"</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">stringStringEntry</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">stringStringEntry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
    <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">stringStringEntry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"value = "</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
<span class="o">}</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">k</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"value = "</span><span class="o">+</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>使用<code class="language-plaintext highlighter-rouge">key</code>存取<code class="language-plaintext highlighter-rouge">value</code>的时候，就会引出一个问题：</p>

<p>获取<code class="language-plaintext highlighter-rouge">Map</code>的<code class="language-plaintext highlighter-rouge">value</code>时，传入的<code class="language-plaintext highlighter-rouge">key</code>不一定就是放入的那个<code class="language-plaintext highlighter-rouge">key</code>对象。而<code class="language-plaintext highlighter-rouge">Map</code>依然能够正常读取。换句话讲，取<code class="language-plaintext highlighter-rouge">value</code>时，两个<code class="language-plaintext highlighter-rouge">key</code>应该内容相同，但不一定是同一个对象。</p>

<p>因为在<code class="language-plaintext highlighter-rouge">Map</code>的内部，对<code class="language-plaintext highlighter-rouge">key</code>做比较是通过<code class="language-plaintext highlighter-rouge">equals()</code>实现的，这一点和<code class="language-plaintext highlighter-rouge">List</code>查找元素需要正确覆写<code class="language-plaintext highlighter-rouge">equals()</code>是一样的，即正确使用<code class="language-plaintext highlighter-rouge">Map</code><strong>必须保证</strong>：作为<code class="language-plaintext highlighter-rouge">key</code>的对象必须<strong>正确覆写</strong><code class="language-plaintext highlighter-rouge">equals()</code>和<code class="language-plaintext highlighter-rouge">hashCode()</code>方法。</p>

<p>通过<code class="language-plaintext highlighter-rouge">key</code>计算索引的方式就是调用<code class="language-plaintext highlighter-rouge">key</code>对象的<code class="language-plaintext highlighter-rouge">hashCode()</code>方法，它返回一个<code class="language-plaintext highlighter-rouge">int</code>整数。<code class="language-plaintext highlighter-rouge">HashMap</code>正是通过这个方法直接定位<code class="language-plaintext highlighter-rouge">key</code>对应的<code class="language-plaintext highlighter-rouge">value</code>的索引，继而直接返回<code class="language-plaintext highlighter-rouge">value</code>。</p>

<p><code class="language-plaintext highlighter-rouge">hashCode()</code>方法要严格遵循以下规范：</p>

<ol>
  <li>如果两个对象<strong>相等</strong>，则两个对象的<code class="language-plaintext highlighter-rouge">hashCode()</code><strong>必须</strong>相等；</li>
  <li>如果两个对象<strong>不相等</strong>，则两个对象的<code class="language-plaintext highlighter-rouge">hashCode()</code><strong>尽量</strong>不要相等。</li>
  <li><code class="language-plaintext highlighter-rouge">equals()</code>用到的用于比较的每一个字段，都必须在<code class="language-plaintext highlighter-rouge">hashCode()</code>中用于计算；<code class="language-plaintext highlighter-rouge">equals()</code>中没有使用到的字段，绝不可放在<code class="language-plaintext highlighter-rouge">hashCode()</code>中计算。</li>
</ol>

<p>而第二条如果尽量满足，则可以保证查询效率，因为不同的对象，如果返回相同的<code class="language-plaintext highlighter-rouge">hashCode()</code>，会造成<code class="language-plaintext highlighter-rouge">Map</code>内部存储冲突，即<strong>哈希冲突</strong>，使存取的效率下降。</p>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">firstName</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">firstName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">(</span><span class="n">lastName</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">lastName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">age</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>也可以直接使用<code class="language-plaintext highlighter-rouge">Objects.hash()</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">firstName</span><span class="o">,</span><span class="n">lastName</span><span class="o">,</span><span class="n">age</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>对于放入<code class="language-plaintext highlighter-rouge">HashMap</code>的<code class="language-plaintext highlighter-rouge">value</code>对象，没有任何要求。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="s">"123"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="kc">null</span><span class="o">));</span>
</code></pre></div></div>
<p>在<code class="language-plaintext highlighter-rouge"> HashMap</code> 中使用 <code class="language-plaintext highlighter-rouge">null</code> 作为键是可以编译通过的，因为 <code class="language-plaintext highlighter-rouge">HashMap</code> 的实现允许键为 <code class="language-plaintext highlighter-rouge">null</code>。在这种情况下，<code class="language-plaintext highlighter-rouge">null</code> 的哈希码会被计算为 0，并存储在哈希表的第一个位置。因此，当你调用 <code class="language-plaintext highlighter-rouge">map.get(null)</code> 时，会返回键为 <code class="language-plaintext highlighter-rouge">null</code> 对应的值 “123”。但需要注意的是，在使用 <code class="language-plaintext highlighter-rouge">null </code>作为键时要格外小心，因为它可能会导致混淆和错误。</p>
<h2 id="哈希冲突">哈希冲突</h2>
<p>如果不同的两个<code class="language-plaintext highlighter-rouge">key</code>，例如<code class="language-plaintext highlighter-rouge">"a"</code>和<code class="language-plaintext highlighter-rouge">"b"</code>，它们的<code class="language-plaintext highlighter-rouge">hashCode()</code>恰好是相同的，就会造成<strong>哈希冲突</strong>。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Xiao Ming"</span><span class="o">));</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"b"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Xiao Hong"</span><span class="o">));</span>
</code></pre></div></div>
<p>假设<code class="language-plaintext highlighter-rouge">"a"</code>和<code class="language-plaintext highlighter-rouge">"b"</code>这两个<code class="language-plaintext highlighter-rouge">key</code>最终计算出的索引都是5，造成哈希冲突，那么在<code class="language-plaintext highlighter-rouge">HashMap</code>的数组中，实际存储的不是一个<code class="language-plaintext highlighter-rouge">Person</code>实例，而是一个<code class="language-plaintext highlighter-rouge">List</code>，它包含两个<code class="language-plaintext highlighter-rouge">Entry</code>，一个是<code class="language-plaintext highlighter-rouge">"a"</code>的映射，一个是<code class="language-plaintext highlighter-rouge">"b"</code>的映射：</p>
<pre><code class="language-ascii">  ┌───┐
0 │   │
  ├───┤
1 │   │
  ├───┤
2 │   │
  ├───┤
3 │   │
  ├───┤
4 │   │
  ├───┤
5 │ ●─┼───&gt; List&lt;Entry&lt;String, Person&gt;&gt;
  ├───┤
6 │   │
  ├───┤
7 │   │
  └───┘
</code></pre>
<p>在查找的时候，例如：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span>
</code></pre></div></div>
<p>HashMap内部通过<code class="language-plaintext highlighter-rouge">"a"</code>找到的实际上是<code class="language-plaintext highlighter-rouge">List&lt;Entry&lt;String, Person&gt;&gt;</code>，它还需要遍历这个<code class="language-plaintext highlighter-rouge">List</code>，并找到一个<code class="language-plaintext highlighter-rouge">Entry</code>，它的<code class="language-plaintext highlighter-rouge">key</code>字段是<code class="language-plaintext highlighter-rouge">"a"</code>，才能返回对应的<code class="language-plaintext highlighter-rouge">Person</code>实例。</p>

<p>我们把不同的<code class="language-plaintext highlighter-rouge">key</code>具有相同的<code class="language-plaintext highlighter-rouge">hashCode()</code>的情况称之为<strong>哈希冲突</strong>。在冲突的时候，一种最简单的解决办法是用<code class="language-plaintext highlighter-rouge">List</code>存储<code class="language-plaintext highlighter-rouge">hashCode()</code>相同的<code class="language-plaintext highlighter-rouge">key-value</code>。显然，如果冲突的概率越大，这个<code class="language-plaintext highlighter-rouge">List</code>就越长，<code class="language-plaintext highlighter-rouge">Map</code>的<code class="language-plaintext highlighter-rouge">get()</code>方法效率就越低，这就是为什么要尽量满足条件二：如果两个对象不相等，则两个对象的<code class="language-plaintext highlighter-rouge">hashCode()</code>尽量不要相等。</p>

<p>HashMap中依据<code class="language-plaintext highlighter-rouge">key</code>的hash值来确定<code class="language-plaintext highlighter-rouge">value</code>存储位置，所以<strong>一定</strong>要重写<code class="language-plaintext highlighter-rouge">hashCode</code>方法，而重写<code class="language-plaintext highlighter-rouge">equals</code>方法，是为了解决<code class="language-plaintext highlighter-rouge">hash</code><strong>冲突</strong>，如果两个<code class="language-plaintext highlighter-rouge">key</code>的<code class="language-plaintext highlighter-rouge">hash</code>值相同，就会调用<code class="language-plaintext highlighter-rouge">equals</code>方法，比较<code class="language-plaintext highlighter-rouge">key</code>值是否相同。</p>

<p>在存储时：如果<code class="language-plaintext highlighter-rouge">hash</code>值相同，且<code class="language-plaintext highlighter-rouge">equals</code>结果相同就覆盖更新<code class="language-plaintext highlighter-rouge">value</code>值，如果<code class="language-plaintext highlighter-rouge">equals</code>结果不同，即不是同一个<code class="language-plaintext highlighter-rouge">key</code>，<code class="language-plaintext highlighter-rouge">HashMap</code>会将这两个<code class="language-plaintext highlighter-rouge">key-value</code>对以链表或红黑树的形式存储在同一个位置上。</p>

<p>在取值时：如果计算的<code class="language-plaintext highlighter-rouge">hash</code>值所指的索引位置有多个值，则根据<code class="language-plaintext highlighter-rouge">equals</code>方法找到对应的<code class="language-plaintext highlighter-rouge">key-value</code>对。如果<code class="language-plaintext highlighter-rouge">equals</code>结果相同就返回当前<code class="language-plaintext highlighter-rouge">value</code>值，如果不同就遍历<code class="language-plaintext highlighter-rouge">List</code>中下一个元素。即要<code class="language-plaintext highlighter-rouge">key</code>与<code class="language-plaintext highlighter-rouge">hash</code>同时匹配才会认为是同一个<code class="language-plaintext highlighter-rouge">key</code>。</p>

<p>JDK中源码:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))){</span><span class="n">ops</span><span class="o">;}</span>
</code></pre></div></div>
<h2 id="扩容">扩容</h2>
<p><code class="language-plaintext highlighter-rouge">HashMap</code>初始化时<strong>默认</strong>的<strong>数组大小</strong>为16，任何<code class="language-plaintext highlighter-rouge">key</code>，无论它的<code class="language-plaintext highlighter-rouge">hashCode()</code>有多大，都可以简单地通过：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="o">;</span> <span class="c1">// 0xf = 15</span>
</code></pre></div></div>
<p>把索引确定在0～15，即永远不会超出数组范围，上述算法只是一种最简单的实现。</p>

<p>这里的<strong>数组大小指哈希桶的数量</strong>，<strong>不等于</strong>键值对的数量，而是指的是可以容纳的哈希桶的数量。每个哈希桶可以存储<strong>多个键值对</strong>（链表，红黑树），因此即使存储了大量的键值对，如果它们的<strong>哈希值冲突</strong>导致它们应该存储在同一个哈希桶中，实际上只会占用一个哈希桶的空间。<code class="language-plaintext highlighter-rouge">HashMap</code>会根据键值对的数量动态调整数组的大小，以保持较低的<strong>填充因子</strong>，从而保证较好的性能。</p>

<p><code class="language-plaintext highlighter-rouge">HashMap</code>的<strong>填充因子</strong>超过一定阈值时，<code class="language-plaintext highlighter-rouge">HashMap</code>会在内部自动扩容，每次<strong>扩容一倍</strong>。</p>

<p>阈值根据<strong>负载因子</strong>确定,默认为<strong>0.75f</strong>。</p>

<p>如果初始容量为 1024，那么当 <code class="language-plaintext highlighter-rouge">HashMap</code> 的 size 超过 1024 * 负载因子（默认是 0.75f）= 768 时，就会触发扩容操作，此时新的数组大小将是原来的两倍，即 2048。</p>

<p>扩容操作包括以下步骤：</p>

<ol>
  <li>创建一个新的数组，大小是原数组的两倍。</li>
  <li>将原数组中的元素<strong>重新计算哈希值</strong>，并根据新数组的大小<strong>重新分配位置</strong>。</li>
  <li>将重新计算位置后的元素放入新数组中。</li>
  <li>将新数组设置为 <code class="language-plaintext highlighter-rouge">HashMap</code> 的数组，替换原数组。</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">HashMap</code> 的扩容操作是一个比较<strong>耗时</strong>的操作，因为需要重新计算哈希值并重新分配位置。因此，尽量在初始化时指定 <code class="language-plaintext highlighter-rouge">HashMap</code> 的<strong>初始容量</strong>和<strong>负载因子</strong>，避免频繁扩容，提高性能。</p>

<p>在 <strong>HashMap</strong> 中，每个数组元素（哈希桶）可以存储一个链表或红黑树头节点。当<strong>链表</strong>的元素数量<strong>超过</strong>一定阈值（<strong>默认为 8</strong>）时，链表会转换为红黑树，以提高查找效率。当<strong>红黑树</strong>中的节点数量<strong>少于</strong>一个阈值（<strong>默认为6</strong>）时，红黑树会转换回链表结构。这种转换是为了避免在红黑树中维护的额外开销，因为当节点数量较少时，链表可能比红黑树更有效率。</p>

<p>红黑树在<code class="language-plaintext highlighter-rouge">HashMap</code>中是从<strong>JDK 8</strong>开始引入的。<strong>在JDK 8之前</strong>，<code class="language-plaintext highlighter-rouge">HashMap</code>使用的是<strong>数组+链表</strong>的方式来处理哈希冲突。</p>

<p>通常<strong>建议将容量设置为 2 的幂次方</strong>，如果设置的容量不是 2 的幂次方，<code class="language-plaintext highlighter-rouge">HashMap</code> 会自动向上取最接近的 2 的幂次方作为实际的容量。负载因子应该是一个大于0且小于1的浮点数，注意加f。</p>

<p>只能在初始化时设置容量和扩容因子</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">HashMap</span><span class="o">&lt;</span><span class="no">K</span><span class="o">,</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;(</span><span class="mi">16</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">);</span>
</code></pre></div></div>
<h2 id="线程安全问题">线程安全问题</h2>
<p><code class="language-plaintext highlighter-rouge">ArrayList</code>和<code class="language-plaintext highlighter-rouge">HashMap</code>等集合类是非线程安全的，这意味着如果多个线程同时访问这些集合并且至少一个线程修改了集合，就可能导致不确定的结果，比如数据丢失、数据不一致等问题。为了在多线程环境中安全地使用集合，可以使用<code class="language-plaintext highlighter-rouge">Collections</code>工具类提供的<code class="language-plaintext highlighter-rouge">SynchronizedList</code>和<code class="language-plaintext highlighter-rouge">SynchronizedMap</code>方法来获取线程安全的集合：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">synchronizedList</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">synchronizedList</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">synchronizedMap</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;());</span>
</code></pre></div></div>
<p>这样就可以确保在多线程环境中对集合的操作是安全的。需要注意的是，虽然这些方法提供了线程安全的集合，但在高并发的情况下仍然需要谨慎处理，以避免出现性能问题。</p>

<h1 id="enummap">EnumMap</h1>
<p><code class="language-plaintext highlighter-rouge">HashMap</code>是一种通过对key计算<code class="language-plaintext highlighter-rouge">hashCode()</code>，通过空间换时间的方式，直接定位到<code class="language-plaintext highlighter-rouge">value</code>所在的内部数组的索引，因此，查找效率非常高。</p>

<p>如果作为<code class="language-plaintext highlighter-rouge">key</code>的对象是<code class="language-plaintext highlighter-rouge">enum</code>类型，还可以使用<code class="language-plaintext highlighter-rouge">EnumMap</code>，它在内部以一个非常紧凑的数组存储<code class="language-plaintext highlighter-rouge">value</code>，并且根据<code class="language-plaintext highlighter-rouge">enum</code>类型的<code class="language-plaintext highlighter-rouge">key</code><strong>直接定位</strong>到内部数组的索引，并<strong>不需要计算</strong><code class="language-plaintext highlighter-rouge">hashCode()</code>，不但效率最高，而且没有额外的空间浪费。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">DayOfWeek</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EnumMap</span><span class="o">&lt;&gt;(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">MONDAY</span><span class="o">,</span> <span class="s">"星期一"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">TUESDAY</span><span class="o">,</span> <span class="s">"星期二"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">WEDNESDAY</span><span class="o">,</span> <span class="s">"星期三"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">THURSDAY</span><span class="o">,</span> <span class="s">"星期四"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">FRIDAY</span><span class="o">,</span> <span class="s">"星期五"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">SATURDAY</span><span class="o">,</span> <span class="s">"星期六"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">SUNDAY</span><span class="o">,</span> <span class="s">"星期日"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">MONDAY</span><span class="o">));</span>
</code></pre></div></div>
<p>注意实例化时，需要将枚举的<strong>class</strong>传入构造方法。</p>

<p>使用<code class="language-plaintext highlighter-rouge">EnumMap</code>的时候，我们总是用<code class="language-plaintext highlighter-rouge">Map</code>接口来引用它，因此，实际上把<code class="language-plaintext highlighter-rouge">HashMap</code>和<code class="language-plaintext highlighter-rouge">EnumMap</code>互换，在客户端看来没有任何区别。<code class="language-plaintext highlighter-rouge">EnumMap</code>内部就存一个数组，数组大小需要根据<code class="language-plaintext highlighter-rouge">Enum</code>类型的<code class="language-plaintext highlighter-rouge">values.length</code>确定，每个<code class="language-plaintext highlighter-rouge">Enum</code>的实例都有一个唯一索引<code class="language-plaintext highlighter-rouge">ordinal()</code>。</p>

<p>由于<code class="language-plaintext highlighter-rouge">Enum</code>的<code class="language-plaintext highlighter-rouge">ordinal</code>方法提供了一个稳定的顺序，<code class="language-plaintext highlighter-rouge">EnumMap</code>可以直接使用数组来存储<code class="language-plaintext highlighter-rouge">value</code>，而<strong>不需要</strong>进行<code class="language-plaintext highlighter-rouge">hash</code>计算或者<code class="language-plaintext highlighter-rouge">equals</code>比较，因此在效率上有很大的优势。</p>

<p><code class="language-plaintext highlighter-rouge">EnumMap</code>是有序的，它的顺序和<code class="language-plaintext highlighter-rouge">Enum</code>中<code class="language-plaintext highlighter-rouge">enum</code>常量的顺序一致。这一特性在需要按照<code class="language-plaintext highlighter-rouge">Enum</code>定义的顺序进行操作时非常有用。</p>

<h1 id="treemap">TreeMap</h1>
<p>还有一种<code class="language-plaintext highlighter-rouge">Map</code>，它在内部会对Key进行排序，这种<code class="language-plaintext highlighter-rouge">Map</code>就是<code class="language-plaintext highlighter-rouge">SortedMap</code>。<code class="language-plaintext highlighter-rouge">SortedMap</code>是接口，它的实现类是<code class="language-plaintext highlighter-rouge">TreeMap</code>。</p>
<pre><code class="language-ascii">       ┌───┐
       │Map│
       └───┘
         ▲
    ┌────┴─────┐
    │          │
┌───────┐ ┌─────────┐
│HashMap│ │SortedMap│
└───────┘ └─────────┘
               ▲
               │
          ┌─────────┐
          │ TreeMap │
          └─────────┘
</code></pre>
<p><code class="language-plaintext highlighter-rouge">SortedMap</code><strong>保证</strong>遍历时以Key的<strong>顺序</strong>来进行<strong>排序</strong>。例如，放入的Key是<code class="language-plaintext highlighter-rouge">"apple"</code>、<code class="language-plaintext highlighter-rouge">"pear"</code>、<code class="language-plaintext highlighter-rouge">"orange"</code>，遍历的顺序一定是<code class="language-plaintext highlighter-rouge">"apple"</code>、<code class="language-plaintext highlighter-rouge">"orange"</code>、<code class="language-plaintext highlighter-rouge">"pear"</code>，因为<code class="language-plaintext highlighter-rouge">String</code>默认按字母排序。</p>

<p>使用<code class="language-plaintext highlighter-rouge">TreeMap</code>时，放入的Key<strong>必须实现</strong><code class="language-plaintext highlighter-rouge">Comparable</code>接口。<code class="language-plaintext highlighter-rouge">String</code>、<code class="language-plaintext highlighter-rouge">Integer</code>这些类已经实现了<code class="language-plaintext highlighter-rouge">Comparable</code>接口，因此可以直接作为Key使用。作为Value的对象则没有任何要求。<code class="language-plaintext highlighter-rouge">TreeMap</code><strong>不使用</strong><code class="language-plaintext highlighter-rouge">equals()</code>和<code class="language-plaintext highlighter-rouge">hashCode()</code>。</p>

<p>如果作为Key的class没有实现<code class="language-plaintext highlighter-rouge">Comparable</code>接口，那么，<strong>必须</strong>在<strong>创建</strong><code class="language-plaintext highlighter-rouge">TreeMap</code>时同时<strong>指定</strong>一个自定义排序算法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TreeMap</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Person</span> <span class="n">p1</span><span class="o">,</span> <span class="nc">Person</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Tom"</span><span class="o">),</span> <span class="mi">1</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">),</span> <span class="mi">2</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Lily"</span><span class="o">),</span> <span class="mi">3</span><span class="o">);</span>
        <span class="c1">//{Person: Bob}{Person: Lily}{Person: Tom}</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Person</span> <span class="n">key</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">)));</span> <span class="c1">// 2</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span> <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"{Person: "</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"}"</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">Comparator</code>接口要求实现一个比较方法，它负责比较传入的两个元素<code class="language-plaintext highlighter-rouge">a</code>和<code class="language-plaintext highlighter-rouge">b</code>，如果<code class="language-plaintext highlighter-rouge">a&lt;b</code>，则返回负数，通常是<code class="language-plaintext highlighter-rouge">-1</code>，如果<code class="language-plaintext highlighter-rouge">a==b</code>，则返回<code class="language-plaintext highlighter-rouge">0</code>，如果<code class="language-plaintext highlighter-rouge">a&gt;b</code>，则返回正数，通常是<code class="language-plaintext highlighter-rouge">1</code>。<code class="language-plaintext highlighter-rouge">TreeMap</code>内部根据比较结果对Key进行排序。</p>

<h1 id="properties">Properties</h1>

<p>在编写应用程序的时候，经常需要读写配置文件。例如，用户的设置：</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 上次最后打开的文件:</span>
<span class="n">last_open_file</span><span class="o">=</span><span class="sr">/data/</span><span class="n">hello</span><span class="p">.</span><span class="nf">txt</span>
<span class="c1"># 自动保存文件的时间间隔:</span>
<span class="n">auto_save_interval</span><span class="o">=</span><span class="mi">60</span>
</code></pre></div></div>
<p>配置文件的特点是，它的Key-Value一般都是<code class="language-plaintext highlighter-rouge">String</code>-<code class="language-plaintext highlighter-rouge">String</code>类型的，因此我们完全可以用<code class="language-plaintext highlighter-rouge">Map&lt;String, String&gt;</code>来表示它。</p>

<p>因为配置文件非常常用，所以Java集合库提供了一个<code class="language-plaintext highlighter-rouge">Properties</code>来表示一组“配置”。由于历史遗留原因，<code class="language-plaintext highlighter-rouge">Properties</code>内部本质上是一个<code class="language-plaintext highlighter-rouge">Hashtable</code>，但我们只需要用到<code class="language-plaintext highlighter-rouge">Properties</code>自身关于读写配置的接口。</p>

<p><strong>读取配置文件</strong></p>

<p>用<code class="language-plaintext highlighter-rouge">Properties</code>读取配置文件非常简单。Java默认配置文件以<code class="language-plaintext highlighter-rouge">.properties</code>为扩展名，每行以<code class="language-plaintext highlighter-rouge">key=value</code>表示，以<code class="language-plaintext highlighter-rouge">#</code>号开头的是注释。以下是一个典型的配置文件：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># setting.properties
</span>
<span class="py">last_open_file</span><span class="p">=</span><span class="s">/data/hello.txt</span>
<span class="py">auto_save_interval</span><span class="p">=</span><span class="s">60</span>
</code></pre></div></div>
<p>可以从文件系统读取这个<code class="language-plaintext highlighter-rouge">.properties</code>文件：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">f</span> <span class="o">=</span> <span class="s">"src/com/aotmd/text.properties"</span><span class="o">;</span>
<span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="nc">FileInputStream</span> <span class="n">fileInputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">fileInputStream</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">filepath</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"last_open_file"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">interval</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"auto_save_interval"</span><span class="o">,</span> <span class="s">"120"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"interval = "</span> <span class="o">+</span> <span class="n">interval</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"filepath = "</span> <span class="o">+</span> <span class="n">filepath</span><span class="o">);</span>
</code></pre></div></div>
<p>用<code class="language-plaintext highlighter-rouge">Properties</code>读取配置文件，一共有三步：</p>
<ol>
  <li>创建<code class="language-plaintext highlighter-rouge">Properties</code>实例；</li>
  <li>调用<code class="language-plaintext highlighter-rouge">load()</code>读取文件；</li>
  <li>调用<code class="language-plaintext highlighter-rouge">getProperty()</code>获取配置。</li>
</ol>

<table>
  <thead>
    <tr>
      <th>返回值类型</th>
      <th>方法</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>String</td>
      <td>getProperty(String key)</td>
      <td>根据指定的键在此属性列表中搜索属性，如果<code class="language-plaintext highlighter-rouge">key</code>不存在，将返回<code class="language-plaintext highlighter-rouge">null</code>。</td>
    </tr>
    <tr>
      <td>String</td>
      <td>getProperty(String key, String defaultValue)</td>
      <td>获取指定键的属性值，如果该键不存在，则返回<code class="language-plaintext highlighter-rouge">defaultValue</code>。</td>
    </tr>
    <tr>
      <td>Object</td>
      <td>setProperty(String key, String value)</td>
      <td>设置指定键的值。如果键已经存在，则更新其值。</td>
    </tr>
    <tr>
      <td>Set<code class="language-plaintext highlighter-rouge">&lt;String&gt;</code></td>
      <td>stringPropertyNames()</td>
      <td>返回属性列表中的键集，其中该键及其对应的值是字符串。</td>
    </tr>
    <tr>
      <td>Enumeration&lt;?&gt;</td>
      <td>propertyNames()</td>
      <td>返回此属性列表中的键集，其中键及其对应的值不一定是字符串。</td>
    </tr>
    <tr>
      <td>void</td>
      <td>list(PrintStream out)</td>
      <td>将属性列表输出到指定的输出流。</td>
    </tr>
    <tr>
      <td>void</td>
      <td>list(PrintWriter out)</td>
      <td>将属性列表输出到指定的输出流。</td>
    </tr>
    <tr>
      <td>void</td>
      <td>load(InputStream inStream)</td>
      <td>从输入流中读取属性列表（键和元素对）。</td>
    </tr>
    <tr>
      <td>void</td>
      <td>store(OutputStream out, String comments)</td>
      <td>将此属性列表（键和元素对）以适合使用<code class="language-plaintext highlighter-rouge">load(InputStream)</code>方法加载的格式写入<code class="language-plaintext highlighter-rouge">out</code>。<code class="language-plaintext highlighter-rouge">comments</code>写入的注释</td>
    </tr>
  </tbody>
</table>

<p>也可以从<code class="language-plaintext highlighter-rouge">classpath</code>读取<code class="language-plaintext highlighter-rouge">.properties</code>文件，因为<code class="language-plaintext highlighter-rouge">load(InputStream)</code>方法接收一个<code class="language-plaintext highlighter-rouge">InputStream</code>实例，表示一个字节流，它不一定是文件流，也可以是从jar包中读取的资源流：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Properties</span> <span class="n">props1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="n">props1</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">"./text.properties"</span><span class="o">));</span>
<span class="nc">String</span> <span class="n">filepath1</span> <span class="o">=</span> <span class="n">props1</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"last_open_file"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">interval1</span> <span class="o">=</span> <span class="n">props1</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"auto_save_interval"</span><span class="o">,</span> <span class="s">"120"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"interval = "</span> <span class="o">+</span> <span class="n">interval</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"filepath = "</span> <span class="o">+</span> <span class="n">filepath</span><span class="o">);</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">Main.class.getResourceAsStream("./text.properties")</code>用于获取位于与<code class="language-plaintext highlighter-rouge">Main.class</code>相同目录下的<code class="language-plaintext highlighter-rouge">text.properties</code>文件的输入流。</p>

<p><code class="language-plaintext highlighter-rouge">getResourceAsStream()</code>是一个用于获取资源的方法，它会返回一个<code class="language-plaintext highlighter-rouge">InputStream</code>对象，可以用于读取资源文件的内容。</p>

<p><code class="language-plaintext highlighter-rouge">"./text.properties"</code>表示相对于<code class="language-plaintext highlighter-rouge">Main.class</code>所在目录的路径，即在<code class="language-plaintext highlighter-rouge">Main.class</code>所在目录下寻找名为<code class="language-plaintext highlighter-rouge">text.properties</code>的文件。</p>

<p>如果有多个<code class="language-plaintext highlighter-rouge">.properties</code>文件，可以反复调用<code class="language-plaintext highlighter-rouge">load()</code>读取，后读取的key-value会覆盖已读取的key-value：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="n">props</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">Main</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">"/common/setting.properties"</span><span class="o">));</span>
<span class="n">props</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"C:\\conf\\setting.properties"</span><span class="o">));</span>
</code></pre></div></div>
<p>上面的代码演示了<code class="language-plaintext highlighter-rouge">Properties</code>的一个常用用法：可以把默认配置文件放到classpath中，然后，根据机器的环境编写另一个配置文件，覆盖某些默认的配置。</p>

<p><code class="language-plaintext highlighter-rouge">Properties</code>设计的目的是存储<code class="language-plaintext highlighter-rouge">String</code>类型的key－value，但<code class="language-plaintext highlighter-rouge">Properties</code>实际上是从<code class="language-plaintext highlighter-rouge">Hashtable</code>派生的，它的设计实际上是有问题的，但是为了保持兼容性，现在已经没法修改了。除了<code class="language-plaintext highlighter-rouge">getProperty()</code>和<code class="language-plaintext highlighter-rouge">setProperty()</code>方法外，还有从<code class="language-plaintext highlighter-rouge">Hashtable</code>继承下来的<code class="language-plaintext highlighter-rouge">get()</code>和<code class="language-plaintext highlighter-rouge">put()</code>方法，这些方法的参数签名是<code class="language-plaintext highlighter-rouge">Object</code>，我们在使用<code class="language-plaintext highlighter-rouge">Properties</code>的时候，不要去调用这些从<code class="language-plaintext highlighter-rouge">Hashtable</code>继承下来的方法。</p>

<p><strong>写入配置文件</strong>
如果通过<code class="language-plaintext highlighter-rouge">setProperty()</code>修改了<code class="language-plaintext highlighter-rouge">Properties</code>实例，可以把配置写入文件，以便下次启动时获得最新配置。写入配置文件使用<code class="language-plaintext highlighter-rouge">store()</code>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">f</span> <span class="o">=</span> <span class="s">"src/com/aotmd/text.properties"</span><span class="o">;</span>
<span class="nc">Properties</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Properties</span><span class="o">();</span>
<span class="n">props</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"language"</span><span class="o">,</span> <span class="s">"你好"</span><span class="o">);</span>
<span class="nc">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">store</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="n">fos</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">),</span> <span class="s">"这是写入的properties注释"</span><span class="o">);</span>

<span class="nc">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
<span class="n">props</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">fis</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
<span class="nc">String</span> <span class="n">language</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"language"</span> <span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"language = "</span> <span class="o">+</span> <span class="n">language</span><span class="o">);</span>
</code></pre></div></div>
<p>早期版本的Java规定<code class="language-plaintext highlighter-rouge">.properties</code>文件编码是ASCII编码（ISO8859-1），如果涉及到中文就必须用<code class="language-plaintext highlighter-rouge">name=\u4e2d\u6587</code>来表示，非常别扭。从JDK9开始，Java的<code class="language-plaintext highlighter-rouge">.properties</code>文件可以使用UTF-8编码了。</p>
<h1 id="set">Set</h1>
<p><code class="language-plaintext highlighter-rouge">Map</code>用于存储key-value的映射，对于充当key的对象，是不能重复的，并且，不但<strong>需要</strong>正确覆写<code class="language-plaintext highlighter-rouge">equals()</code>方法，还要<strong>正确覆写</strong><code class="language-plaintext highlighter-rouge">hashCode()</code>方法。</p>

<p>如果我们只需要存储不重复的key，并不需要存储映射的value，那么就可以使用<code class="language-plaintext highlighter-rouge">Set</code>。</p>

<p><code class="language-plaintext highlighter-rouge">Set</code>用于存储不重复的元素集合，它主要提供以下几个方法：</p>

<ul>
  <li>将元素添加进<code class="language-plaintext highlighter-rouge">Set&lt;E&gt;</code>：<code class="language-plaintext highlighter-rouge">boolean add(E e)</code></li>
  <li>将元素从<code class="language-plaintext highlighter-rouge">Set&lt;E&gt;</code>删除：<code class="language-plaintext highlighter-rouge">boolean remove(Object e)</code></li>
  <li>判断是否包含元素：<code class="language-plaintext highlighter-rouge">boolean contains(Object e)</code>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"abc"</span><span class="o">));</span> <span class="c1">// true</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"xyz"</span><span class="o">));</span> <span class="c1">// true</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"xyz"</span><span class="o">));</span> <span class="c1">// false，添加失败，因为元素已存在</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"xyz"</span><span class="o">));</span> <span class="c1">// true，元素存在</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"XYZ"</span><span class="o">));</span> <span class="c1">// false，元素不存在</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">"hello"</span><span class="o">));</span> <span class="c1">// false，删除失败，因为元素不存在</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">());</span> <span class="c1">// 2，一共两个元素</span>
</code></pre></div>    </div>
    <p><code class="language-plaintext highlighter-rouge">Set</code>实际上<strong>相当于</strong>只存储key、不存储value的<code class="language-plaintext highlighter-rouge">Map</code>。经常用<code class="language-plaintext highlighter-rouge">Set</code>去除重复元素。</p>
  </li>
</ul>

<p>放入<code class="language-plaintext highlighter-rouge">Set</code>的元素和<code class="language-plaintext highlighter-rouge">Map</code>的key类似，都要<strong>正确实现</strong><code class="language-plaintext highlighter-rouge">equals()</code>和<code class="language-plaintext highlighter-rouge">hashCode()</code>方法，否则该元素无法正确地放入<code class="language-plaintext highlighter-rouge">Set</code>。</p>

<p>最常用的<code class="language-plaintext highlighter-rouge">Set</code>实现类是<code class="language-plaintext highlighter-rouge">HashSet</code>，实际上，<code class="language-plaintext highlighter-rouge">HashSet</code>仅仅是对<code class="language-plaintext highlighter-rouge">HashMap</code>的一个简单封装，它的核心代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// 持有一个HashMap:</span>
    <span class="kd">private</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="no">E</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="c1">// 放入HashMap的value:</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Object</span> <span class="no">PRESENT</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="no">PRESENT</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">;}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">o</span><span class="o">);}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="o">==</span> <span class="no">PRESENT</span><span class="o">;}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">Set</code>接口并不保证有序，而<code class="language-plaintext highlighter-rouge">SortedSet</code>接口则保证元素是有序的：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HashSet</code>是<strong>无序</strong>的，因为它实现了<code class="language-plaintext highlighter-rouge">Set</code>接口，并没有实现<code class="language-plaintext highlighter-rouge">SortedSet</code>接口；</li>
  <li><code class="language-plaintext highlighter-rouge">TreeSet</code>是<strong>有序</strong>的，因为它实现了<code class="language-plaintext highlighter-rouge">SortedSet</code>接口。</li>
</ul>

<p>用一张图表示：</p>
<pre><code class="language-ascii">       ┌───┐
       │Set│
       └───┘
         ▲
    ┌────┴─────┐
    │          │
┌───────┐ ┌─────────┐
│HashSet│ │SortedSet│
└───────┘ └─────────┘
               ▲
               │
          ┌─────────┐
          │ TreeSet │
          └─────────┘
</code></pre>
<p>使用<code class="language-plaintext highlighter-rouge">TreeSet</code>和使用<code class="language-plaintext highlighter-rouge">TreeMap</code>的要求一样，添加的元素必须正确实现<code class="language-plaintext highlighter-rouge">Comparable</code>接口，如果没有实现<code class="language-plaintext highlighter-rouge">Comparable</code>接口，那么创建<code class="language-plaintext highlighter-rouge">TreeSet</code>时必须传入一个<code class="language-plaintext highlighter-rouge">Comparator</code>对象。</p>

<p><code class="language-plaintext highlighter-rouge">Set</code>用于存储不重复的元素集合：</p>

<ul>
  <li>放入<code class="language-plaintext highlighter-rouge">HashSet</code>的元素与作为<code class="language-plaintext highlighter-rouge">HashMap</code>的key要求相同；</li>
  <li>放入<code class="language-plaintext highlighter-rouge">TreeSet</code>的元素与作为<code class="language-plaintext highlighter-rouge">TreeMap</code>的Key要求相同；</li>
</ul>

<p>利用<code class="language-plaintext highlighter-rouge">Set</code>可以去除重复元素；</p>

<p>遍历<code class="language-plaintext highlighter-rouge">SortedSet</code>按照元素的排序顺序遍历，也可以自定义排序算法。</p>

<h1 id="queue">Queue</h1>
<p>队列（<code class="language-plaintext highlighter-rouge">Queue</code>）是一种经常使用的集合。<code class="language-plaintext highlighter-rouge">Queue</code>实际上是实现了一个先进先出（FIFO：First In First Out）的有序表。它和<code class="language-plaintext highlighter-rouge">List</code>的区别在于，<code class="language-plaintext highlighter-rouge">List</code>可以在任意位置添加和删除元素，而<code class="language-plaintext highlighter-rouge">Queue</code>只有两个操作：</p>
<ul>
  <li>把元素添加到队列末尾；</li>
  <li>从队列头部取出元素。</li>
</ul>

<p>在Java的标准库中，队列接口<code class="language-plaintext highlighter-rouge">Queue</code>定义了以下几个方法：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">int size()</code>：获取队列长度；</li>
  <li><code class="language-plaintext highlighter-rouge">boolean add(E)</code>/<code class="language-plaintext highlighter-rouge">boolean offer(E)</code>：添加元素到队尾；</li>
  <li><code class="language-plaintext highlighter-rouge">E remove()</code>/<code class="language-plaintext highlighter-rouge">E poll()</code>：获取队首元素并从队列中删除；</li>
  <li><code class="language-plaintext highlighter-rouge">E element()</code>/<code class="language-plaintext highlighter-rouge">E peek()</code>：获取队首元素但并不从队列中删除。</li>
</ul>

<p>对于具体的实现类，有的Queue有最大队列长度限制，有的Queue没有。</p>

<p>注意到添加、删除和获取队列元素总是有两个方法，这是因为在添加或获取元素<strong>失败</strong>时，这两个方法的<strong>行为</strong>是<strong>不同</strong>的。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">throw Exception</th>
      <th style="text-align: left">返回false或null</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">添加元素到队尾</td>
      <td style="text-align: left">add(E e)</td>
      <td style="text-align: left">boolean offer(E e)，添加失败返回false</td>
    </tr>
    <tr>
      <td style="text-align: left">取队首元素并删除</td>
      <td style="text-align: left">E remove()</td>
      <td style="text-align: left">E poll()，失败返回null</td>
    </tr>
    <tr>
      <td style="text-align: left">取队首元素但不删除</td>
      <td style="text-align: left">E element()</td>
      <td style="text-align: left">E peek()，失败返回null</td>
    </tr>
  </tbody>
</table>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span><span class="o">=</span><span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"remove"</span><span class="o">);</span>
<span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"element"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">element</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>

<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"poll"</span><span class="o">);</span>
<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"peek"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">peek</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</code></pre></div></div>

<p><strong>不要</strong>把<code class="language-plaintext highlighter-rouge">null</code>添加到队列中，否则<code class="language-plaintext highlighter-rouge">poll()</code>方法返回<code class="language-plaintext highlighter-rouge">null</code>时，很难确定是取到了<code class="language-plaintext highlighter-rouge">null</code>元素还是队列为空。</p>

<p><code class="language-plaintext highlighter-rouge">LinkedList</code>即实现了<code class="language-plaintext highlighter-rouge">List</code>接口，又实现了<code class="language-plaintext highlighter-rouge">Queue</code>接口，但是，在使用的时候，如果我们把它当作List，就获取List的引用，如果我们把它当作Queue，就获取Queue的引用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 这是一个List:</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="c1">// 这是一个Queue:</span>
<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>

<h1 id="priorityqueue">PriorityQueue</h1>

<p><code class="language-plaintext highlighter-rouge">Queue</code>是一个先进先出（FIFO）的队列。<code class="language-plaintext highlighter-rouge">PriorityQueue</code>和<code class="language-plaintext highlighter-rouge">Queue</code>的区别在于，它的出队顺序与元素的优先级有关，对<code class="language-plaintext highlighter-rouge">PriorityQueue</code>调用<code class="language-plaintext highlighter-rouge">remove()</code>或<code class="language-plaintext highlighter-rouge">poll()</code>方法，返回的总是优先级最高的元素。</p>

<p>要使用<code class="language-plaintext highlighter-rouge">PriorityQueue</code>，我们就必须给每个元素定义“优先级”。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;();</span>
<span class="c1">// 添加3个元素到队列:</span>
<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"apple"</span><span class="o">);</span>
<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"pear"</span><span class="o">);</span>
<span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"banana"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span> <span class="c1">// apple</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span> <span class="c1">// banana</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span> <span class="c1">// pear</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span> <span class="c1">// null,因为队列为空</span>
</code></pre></div></div>

<p>放入的顺序是<code class="language-plaintext highlighter-rouge">"apple"</code>、<code class="language-plaintext highlighter-rouge">"pear"</code>、<code class="language-plaintext highlighter-rouge">"banana"</code>，但是取出的顺序却是<code class="language-plaintext highlighter-rouge">"apple"</code>、<code class="language-plaintext highlighter-rouge">"banana"</code>、<code class="language-plaintext highlighter-rouge">"pear"</code>，这是因为从字符串的排序看，<code class="language-plaintext highlighter-rouge">"apple"</code>排在最前面，<code class="language-plaintext highlighter-rouge">"pear"</code>排在最后面。</p>

<p>放入<code class="language-plaintext highlighter-rouge">PriorityQueue</code>的元素，必须实现<code class="language-plaintext highlighter-rouge">Comparable</code>接口，<code class="language-plaintext highlighter-rouge">PriorityQueue</code>会根据元素的<strong>排序顺序</strong>决定出队的优先级。</p>

<p><code class="language-plaintext highlighter-rouge">PriorityQueue</code>默认按元素比较的顺序排序（必须实现<code class="language-plaintext highlighter-rouge">Comparable</code>接口），也可以通过<code class="language-plaintext highlighter-rouge">Comparator</code>自定义排序算法（元素就不必实现<code class="language-plaintext highlighter-rouge">Comparable</code>接口）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;((</span><span class="n">u1</span><span class="o">,</span><span class="n">u2</span><span class="o">)-&gt;{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">u1</span><span class="o">.</span><span class="na">number</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="n">u2</span><span class="o">.</span><span class="na">number</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
                <span class="c1">// 如果两人的号都是A开头或者都是V开头,比较号的大小:</span>
                <span class="kt">int</span> <span class="n">no1</span><span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">u1</span><span class="o">.</span><span class="na">number</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
                <span class="kt">int</span> <span class="n">no2</span><span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">u2</span><span class="o">.</span><span class="na">number</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
                <span class="k">return</span> <span class="n">no1</span><span class="o">-</span><span class="n">no2</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">u1</span><span class="o">.</span><span class="na">number</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'V'</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// u1的号码是V开头,优先级高:</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="c1">// 添加3个元素到队列:</span>
        <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"Bob"</span><span class="o">,</span> <span class="s">"A1"</span><span class="o">));</span>
        <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">,</span> <span class="s">"A2"</span><span class="o">));</span>
        <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"Boss"</span><span class="o">,</span> <span class="s">"V1"</span><span class="o">));</span>
        <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"Boss"</span><span class="o">,</span> <span class="s">"V10"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span> <span class="c1">// Boss/V1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span> <span class="c1">// Boss/V10</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span> <span class="c1">// Bob/A1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span> <span class="c1">// Alice/A2</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="n">number</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span><span class="k">this</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="n">number</span><span class="o">;}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", number='"</span> <span class="o">+</span> <span class="n">number</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="deque">Deque</h1>

<p><code class="language-plaintext highlighter-rouge">Queue</code>是队列，只能一头进，另一头出。</p>

<p>如果把条件放松一下，允许两头都进，两头都出，这种队列叫双端队列（Double Ended Queue），学名<code class="language-plaintext highlighter-rouge">Deque</code>。</p>

<p>Java集合提供了接口<code class="language-plaintext highlighter-rouge">Deque</code>来实现一个双端队列，它的功能是：</p>

<ul>
  <li>既可以添加到队尾，也可以添加到队首；</li>
  <li>既可以从队首获取，又可以从队尾获取。</li>
</ul>

<p>比较<code class="language-plaintext highlighter-rouge">Queue</code>和<code class="language-plaintext highlighter-rouge">Deque</code>出队和入队的方法：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">Queue</th>
      <th style="text-align: left">Deque</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">添加元素到队尾</td>
      <td style="text-align: left">add(E e) / offer(E e)</td>
      <td style="text-align: left">addLast(E e) / offerLast(E e)</td>
    </tr>
    <tr>
      <td style="text-align: left">取队首元素并删除</td>
      <td style="text-align: left">E remove() / E poll()</td>
      <td style="text-align: left">E removeFirst() / E pollFirst()</td>
    </tr>
    <tr>
      <td style="text-align: left">取队首元素但不删除</td>
      <td style="text-align: left">E element() / E peek()</td>
      <td style="text-align: left">E getFirst() / E peekFirst()</td>
    </tr>
    <tr>
      <td style="text-align: left">添加元素到队首</td>
      <td style="text-align: left">无</td>
      <td style="text-align: left">addFirst(E e) / offerFirst(E e)</td>
    </tr>
    <tr>
      <td style="text-align: left">取队尾元素并删除</td>
      <td style="text-align: left">无</td>
      <td style="text-align: left">E removeLast() / E pollLast()</td>
    </tr>
    <tr>
      <td style="text-align: left">取队尾元素但不删除</td>
      <td style="text-align: left">无</td>
      <td style="text-align: left">E getLast() / E peekLast()</td>
    </tr>
  </tbody>
</table>

<p>对于添加元素到队尾的操作，<code class="language-plaintext highlighter-rouge">Queue</code>提供了<code class="language-plaintext highlighter-rouge">add()</code>/<code class="language-plaintext highlighter-rouge">offer()</code>方法，而<code class="language-plaintext highlighter-rouge">Deque</code>提供了<code class="language-plaintext highlighter-rouge">addLast()</code>/<code class="language-plaintext highlighter-rouge">offerLast()</code>方法。添加元素到队首、取队尾元素的操作在<code class="language-plaintext highlighter-rouge">Queue</code>中不存在，在<code class="language-plaintext highlighter-rouge">Deque</code>中由<code class="language-plaintext highlighter-rouge">addFirst()</code>/<code class="language-plaintext highlighter-rouge">removeLast()</code>等方法提供。</p>

<p><code class="language-plaintext highlighter-rouge">Deque</code>接口实际上扩展自<code class="language-plaintext highlighter-rouge">Queue</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Deque</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{}</span>
</code></pre></div></div>
<p>因此，<code class="language-plaintext highlighter-rouge">Queue</code>提供的<code class="language-plaintext highlighter-rouge">add()</code>/<code class="language-plaintext highlighter-rouge">offer()</code>方法在<code class="language-plaintext highlighter-rouge">Deque</code>中也可以使用，但是，使用<code class="language-plaintext highlighter-rouge">Deque</code>，最好不要调用<code class="language-plaintext highlighter-rouge">offer()</code>，而是调用<code class="language-plaintext highlighter-rouge">offerLast()</code>：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">offerLast</span><span class="o">(</span><span class="s">"A"</span><span class="o">);</span> <span class="c1">// A</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">offerLast</span><span class="o">(</span><span class="s">"B"</span><span class="o">);</span> <span class="c1">// A &lt;- B</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">offerFirst</span><span class="o">(</span><span class="s">"C"</span><span class="o">);</span> <span class="c1">// C &lt;- A &lt;- B</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span> <span class="c1">// C, 剩下A &lt;- B</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">());</span> <span class="c1">// B, 剩下A</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span> <span class="c1">// A</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span> <span class="c1">// null</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>如果直接写<code class="language-plaintext highlighter-rouge">deque.offer()</code>，我们就需要思考，<code class="language-plaintext highlighter-rouge">offer()</code>实际上是<code class="language-plaintext highlighter-rouge">offerLast()</code>，我们明确地写上<code class="language-plaintext highlighter-rouge">offerLast()</code>，不需要思考就能一眼看出这是添加到队尾。</p>

<p>因此，使用<code class="language-plaintext highlighter-rouge">Deque</code>，推荐总是明确调用<code class="language-plaintext highlighter-rouge">offerLast()</code>/<code class="language-plaintext highlighter-rouge">offerFirst()</code>或者<code class="language-plaintext highlighter-rouge">pollFirst()</code>/<code class="language-plaintext highlighter-rouge">pollLast()</code>方法。</p>

<p><code class="language-plaintext highlighter-rouge">Deque</code>是一个接口，它的实现类有<code class="language-plaintext highlighter-rouge">ArrayDeque</code>和<code class="language-plaintext highlighter-rouge">LinkedList</code>。</p>

<p>我们发现<code class="language-plaintext highlighter-rouge">LinkedList</code>真是一个全能选手，它即是<code class="language-plaintext highlighter-rouge">List</code>，又是<code class="language-plaintext highlighter-rouge">Queue</code>，还是<code class="language-plaintext highlighter-rouge">Deque</code>。但是我们在使用的时候，总是用特定的接口来引用它，这是因为持有接口说明代码的抽象层次更高，而且接口本身定义的方法代表了特定的用途。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 不推荐的写法:</span>
<span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="n">d1</span><span class="o">.</span><span class="na">offerLast</span><span class="o">(</span><span class="s">"z"</span><span class="o">);</span>
<span class="c1">// 推荐的写法：</span>
<span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="n">d2</span><span class="o">.</span><span class="na">offerLast</span><span class="o">(</span><span class="s">"z"</span><span class="o">);</span>
</code></pre></div></div>
<p>可见面向抽象编程的一个原则就是：尽量持有接口，而不是具体的实现类。</p>
<h1 id="stack">Stack</h1>
<p>栈（Stack）是一种后进先出（LIFO：Last In First Out）的数据结构。</p>

<p><code class="language-plaintext highlighter-rouge">Queue</code>的特点FIFO：所谓FIFO，是最先进队列的元素一定最早出队列，而LIFO是最后进<code class="language-plaintext highlighter-rouge">Stack</code>的元素一定最早出<code class="language-plaintext highlighter-rouge">Stack</code>的。因此，<code class="language-plaintext highlighter-rouge">Stack</code>是这样一种数据结构：只能不断地往<code class="language-plaintext highlighter-rouge">Stack</code>中压入（push）元素，最后进去的必须最早弹出（pop）来。</p>

<p>在Java中，我们用<code class="language-plaintext highlighter-rouge">Deque</code>可以实现<code class="language-plaintext highlighter-rouge">Stack</code>的功能：</p>

<ul>
  <li>把元素压栈：<code class="language-plaintext highlighter-rouge">push(E)</code>/<code class="language-plaintext highlighter-rouge">addFirst(E)</code>；</li>
  <li>把栈顶的元素“弹出”：<code class="language-plaintext highlighter-rouge">pop()</code>/<code class="language-plaintext highlighter-rouge">removeFirst()</code>；</li>
  <li>取栈顶元素但不弹出：<code class="language-plaintext highlighter-rouge">peek()</code>/<code class="language-plaintext highlighter-rouge">peekFirst()</code>。</li>
</ul>

<p>为什么Java的集合类没有单独的<code class="language-plaintext highlighter-rouge">Stack</code>接口呢？因为有个遗留类名字就叫<code class="language-plaintext highlighter-rouge">Stack</code>，出于兼容性考虑，所以没办法创建<code class="language-plaintext highlighter-rouge">Stack</code>接口，只能用<code class="language-plaintext highlighter-rouge">Deque</code>接口来“模拟”一个<code class="language-plaintext highlighter-rouge">Stack</code>了。</p>

<p>当我们把<code class="language-plaintext highlighter-rouge">Deque</code>作为<code class="language-plaintext highlighter-rouge">Stack</code>使用时，注意只调用<code class="language-plaintext highlighter-rouge">push()</code>/<code class="language-plaintext highlighter-rouge">pop()</code>/<code class="language-plaintext highlighter-rouge">peek()</code>方法，不要调用<code class="language-plaintext highlighter-rouge">addFirst()</code>/<code class="language-plaintext highlighter-rouge">removeFirst()</code>/<code class="language-plaintext highlighter-rouge">peekFirst()</code>方法，这样代码更加清晰。</p>

<p>Stack在计算机中使用非常广泛，JVM在处理Java方法调用的时候就会通过栈这种数据结构维护方法调用的层次。JVM会创建方法调用栈，每调用一个方法时，先将参数压栈，然后执行对应的方法；当方法返回时，返回值压栈，调用方法通过出栈操作获得方法返回值。因为方法调用栈有容量限制，嵌套调用过多会造成栈溢出，即引发<code class="language-plaintext highlighter-rouge">StackOverflowError</code>。</p>

<p>除基取余倒排列：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">String</span> <span class="nf">toHex</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stack</span><span class="o">=</span><span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">s</span> <span class="o">={</span><span class="s">"0"</span><span class="o">,</span><span class="s">"1"</span><span class="o">,</span><span class="s">"2"</span><span class="o">,</span><span class="s">"3"</span><span class="o">,</span><span class="s">"4"</span><span class="o">,</span><span class="s">"5"</span><span class="o">,</span><span class="s">"6"</span><span class="o">,</span><span class="s">"7"</span><span class="o">,</span><span class="s">"8"</span><span class="o">,</span><span class="s">"9"</span><span class="o">,</span><span class="s">"A"</span><span class="o">,</span><span class="s">"B"</span><span class="o">,</span><span class="s">"C"</span><span class="o">,</span><span class="s">"D"</span><span class="o">,</span><span class="s">"E"</span><span class="o">,</span><span class="s">"F"</span><span class="o">};</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">n</span><span class="o">!=</span><span class="mi">0</span><span class="o">){</span>
        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">n</span><span class="o">%</span><span class="mi">16</span><span class="o">]);</span>
        <span class="n">n</span><span class="o">/=</span><span class="mi">16</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<h1 id="iterator">Iterator</h1>
<p>Java的集合类都可以使用<code class="language-plaintext highlighter-rouge">for each</code>循环，<code class="language-plaintext highlighter-rouge">List</code>、<code class="language-plaintext highlighter-rouge">Set</code>和<code class="language-plaintext highlighter-rouge">Queue</code>会迭代每个元素，<code class="language-plaintext highlighter-rouge">Map</code>会迭代每个key。以<code class="language-plaintext highlighter-rouge">List</code>为例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">,</span> <span class="s">"Orange"</span><span class="o">,</span> <span class="s">"Pear"</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>实际上，Java编译器并不知道如何遍历<code class="language-plaintext highlighter-rouge">List</code>。上述代码能够编译通过，只是因为编译器把<code class="language-plaintext highlighter-rouge">for each</code>循环通过<code class="language-plaintext highlighter-rouge">Iterator</code>改写为了普通的<code class="language-plaintext highlighter-rouge">for</code>循环：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
     <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
     <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>这种通过<code class="language-plaintext highlighter-rouge">Iterator</code>对象遍历集合的模式称为迭代器。</p>

<p>使用迭代器的好处在于，调用方总是以统一的方式遍历各种集合类型，而不必关心它们内部的存储结构。</p>

<p>例如，我们虽然知道<code class="language-plaintext highlighter-rouge">ArrayList</code>在内部是以数组形式存储元素，并且，它还提供了<code class="language-plaintext highlighter-rouge">get(int)</code>方法。虽然我们可以用<code class="language-plaintext highlighter-rouge">for</code>循环遍历：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>但是这样一来，调用方就必须知道集合的内部存储结构。并且，如果把<code class="language-plaintext highlighter-rouge">ArrayList</code>换成<code class="language-plaintext highlighter-rouge">LinkedList</code>，<code class="language-plaintext highlighter-rouge">get(int)</code>方法耗时会随着<code class="language-plaintext highlighter-rouge">index</code>的增加而增加。如果把<code class="language-plaintext highlighter-rouge">ArrayList</code>换成<code class="language-plaintext highlighter-rouge">Set</code>，上述代码就无法编译，因为<code class="language-plaintext highlighter-rouge">Set</code>内部没有索引。</p>

<p>用<code class="language-plaintext highlighter-rouge">Iterator</code>遍历就没有上述问题，因为<code class="language-plaintext highlighter-rouge">Iterator</code>对象是集合对象自己在内部创建的，它自己知道如何高效遍历内部的数据集合，调用方则获得了统一的代码，编译器才能把标准的<code class="language-plaintext highlighter-rouge">for each</code>循环自动转换为<code class="language-plaintext highlighter-rouge">Iterator</code>遍历。</p>

<p>如果我们自己编写了一个集合类，想要使用<code class="language-plaintext highlighter-rouge">for each</code>循环，只需满足以下条件：</p>

<ul>
  <li>集合类实现<code class="language-plaintext highlighter-rouge">Iterable</code>接口，该接口要求返回一个<code class="language-plaintext highlighter-rouge">Iterator</code>对象；</li>
  <li>用<code class="language-plaintext highlighter-rouge">Iterator</code>对象迭代集合内部数据。</li>
</ul>

<p>这里的关键在于，集合类通过调用<code class="language-plaintext highlighter-rouge">iterator()</code>方法，返回一个<code class="language-plaintext highlighter-rouge">Iterator</code>对象，这个对象必须自己知道如何遍历该集合。</p>

<p>一个简单的<code class="language-plaintext highlighter-rouge">Iterator</code>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ReverseList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">rlist</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ReverseList</span><span class="o">&lt;&gt;();</span>
        <span class="n">rlist</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">);</span>
        <span class="n">rlist</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Orange"</span><span class="o">);</span>
        <span class="n">rlist</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Pear"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">rlist</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">ReverseList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Iterator</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
            <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="no">T</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nc">ReverseList</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">++);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>虽然实现类稍微比较复杂，但这是底层集合库，只需编写一次。而调用方则完全按<code class="language-plaintext highlighter-rouge">for each</code>循环编写代码，根本不需要知道集合内部的存储逻辑和遍历逻辑。</p>

<p>在编写<code class="language-plaintext highlighter-rouge">Iterator</code>的时候，通常可以用一个内部类来实现<code class="language-plaintext highlighter-rouge">Iterator</code>接口，这个内部类可以直接访问对应的外部类的所有字段和方法。例如，上述代码中，内部类可以用<code class="language-plaintext highlighter-rouge">ReverseList.this</code>获得当前外部类的<code class="language-plaintext highlighter-rouge">this</code>引用，然后，通过这个<code class="language-plaintext highlighter-rouge">this</code>引用就可以访问<code class="language-plaintext highlighter-rouge">ReverseList</code>的所有字段和方法。</p>

<p><code class="language-plaintext highlighter-rouge">Iterator</code>是一种抽象的数据访问模型。使用<code class="language-plaintext highlighter-rouge">Iterator</code>模式进行迭代的好处有：</p>

<ul>
  <li>对任何集合都采用同一种访问模型；</li>
  <li>调用者对集合内部结构一无所知；</li>
  <li>集合类返回的<code class="language-plaintext highlighter-rouge">Iterator</code>对象知道如何迭代。</li>
</ul>

<p>Java提供了标准的迭代器模型，即集合类实现<code class="language-plaintext highlighter-rouge">java.util.Iterable</code>接口，返回<code class="language-plaintext highlighter-rouge">java.util.Iterator</code>实例。</p>
<h1 id="collections">Collections</h1>
<p><code class="language-plaintext highlighter-rouge">Collections</code>是JDK提供的工具类，同样位于<code class="language-plaintext highlighter-rouge">java.util</code>包中。它提供了一系列静态方法，能更方便地操作各种集合。 注意<strong>Collections</strong>结尾多了一个s，不是<strong>Collection</strong>！</p>

<p><code class="language-plaintext highlighter-rouge">addAll()</code>方法可以给一个<code class="language-plaintext highlighter-rouge">Collection</code>类型的集合添加若干元素。因为方法签名是<code class="language-plaintext highlighter-rouge">Collection</code>，所以我们可以传入<code class="language-plaintext highlighter-rouge">List</code>，<code class="language-plaintext highlighter-rouge">Set</code>等各种集合类型。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">addAll</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">,</span> <span class="no">T</span><span class="o">...</span> <span class="n">elements</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">List&lt;T&gt; emptyList()</code></td>
      <td>创建空List，返回的空集合是<strong>不可变集合</strong>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Map&lt;K, V&gt; emptyMap()</code></td>
      <td>创建空Map，返回的空集合是<strong>不可变集合</strong>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Set&lt;T&gt; emptySet()</code></td>
      <td>创建空Set，返回的空集合是<strong>不可变集合</strong>。</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">List&lt;T&gt; singletonList(T o)</code></td>
      <td>创建一个元素的List，也是<strong>不可变集合</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Map&lt;K, V&gt; singletonMap(K key, V value)</code></td>
      <td>创建一个元素的Map，也是<strong>不可变集合</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Set&lt;T&gt; singleton(T o)</code></td>
      <td>创建一个元素的Set，也是<strong>不可变集合</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sort(list)</code></td>
      <td>对List排序</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">shuffle(list)</code></td>
      <td>对List洗牌，打乱顺序</td>
    </tr>
  </tbody>
</table>

<p>也可以用各个集合接口提供的<code class="language-plaintext highlighter-rouge">of(T...)</code>方法，它既可以创建空集合，也可以创建单元素集合，还可以创建任意个元素的集合。</p>

<p><strong>不可变集合</strong></p>

<p><code class="language-plaintext highlighter-rouge">Collections</code>还提供了一组方法把可变集合封装成不可变集合：</p>

<ul>
  <li>封装成不可变List：<code class="language-plaintext highlighter-rouge">List&lt;T&gt; unmodifiableList(List&lt;? extends T&gt; list)</code></li>
  <li>封装成不可变Set：<code class="language-plaintext highlighter-rouge">Set&lt;T&gt; unmodifiableSet(Set&lt;? extends T&gt; set)</code></li>
  <li>封装成不可变Map：<code class="language-plaintext highlighter-rouge">Map&lt;K, V&gt; unmodifiableMap(Map&lt;? extends K, ? extends V&gt; m)</code></li>
</ul>

<p>这种封装实际上是通过<strong>创建</strong>一个<strong>代理对象</strong>，<strong>拦截</strong>掉所有修改方法实现的。然而，继续对原始的可变<code class="language-plaintext highlighter-rouge">List</code>进行增删是可以的，并且，会直接影响到封装后的“不可变”<code class="language-plaintext highlighter-rouge">List</code>。因此，如果我们希望把一个可变<code class="language-plaintext highlighter-rouge">List</code>封装成不可变<code class="language-plaintext highlighter-rouge">List</code>，那么，返回不可变<code class="language-plaintext highlighter-rouge">List</code>后，最好立刻扔掉可变<code class="language-plaintext highlighter-rouge">List</code>的引用，这样可以保证后续操作不会意外改变原始对象，从而造成“不可变”<code class="language-plaintext highlighter-rouge">List</code>变化了。</p>

<p><strong>线程安全集合</strong></p>

<p><code class="language-plaintext highlighter-rouge">Collections</code>还提供了一组方法，可以把线程不安全的集合变为线程安全的集合：</p>

<ul>
  <li>变为线程安全的List：<code class="language-plaintext highlighter-rouge">List&lt;T&gt; synchronizedList(List&lt;T&gt; list)</code></li>
  <li>变为线程安全的Set：<code class="language-plaintext highlighter-rouge">Set&lt;T&gt; synchronizedSet(Set&lt;T&gt; s)</code></li>
  <li>变为线程安全的Map：<code class="language-plaintext highlighter-rouge">Map&lt;K,V&gt; synchronizedMap(Map&lt;K,V&gt; m)</code></li>
</ul>

<p>从Java 5开始，引入了更高效的并发集合类，所以上述这几个同步方法已经没有什么用了。</p>

<h1 id="其他">其他</h1>

<h2 id="方法引用">方法引用</h2>

<p>展开<code class="language-plaintext highlighter-rouge">Integer[]::new</code>后：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">IntFunction</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">[]&gt;</span> <span class="n">generator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntFunction</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">[]&gt;()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Integer</span><span class="o">[]</span> <span class="nf">apply</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">};</span>
<span class="nc">Integer</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">generator</span><span class="o">);</span>
</code></pre></div></div>

<p>在这里，<code class="language-plaintext highlighter-rouge">IntFunction&lt;Integer[]&gt;</code> 是一个函数式接口，它定义了一个<code class="language-plaintext highlighter-rouge">IntFunction&lt;Integer[]&gt;</code>的匿名实现，实现了<code class="language-plaintext highlighter-rouge">apply</code>方法来创建一个指定大小的<code class="language-plaintext highlighter-rouge">Integer</code>数组。然后，通过<code class="language-plaintext highlighter-rouge">toArray</code>方法将列表转换为该数组。</p>

<p>通过lambda 表达式简化后变成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">IntFunction</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">[]&gt;</span> <span class="n">generator</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
<span class="nc">Integer</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">generator</span><span class="o">);</span>
</code></pre></div></div>

<p>这个 lambda 表达式接受一个整数参数 <code class="language-plaintext highlighter-rouge">size</code>，并返回一个新的 <code class="language-plaintext highlighter-rouge">Integer</code> 数组，长度为 <code class="language-plaintext highlighter-rouge">size</code>。</p>

<p>通过方法引用再次简化后变成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">IntFunction</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">[]&gt;</span> <span class="n">generator</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">;</span>
<span class="nc">Integer</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">generator</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Integer[]::new</code> 表示一个构造函数引用，它接受一个整数参数（数组的长度）并返回一个 <code class="language-plaintext highlighter-rouge">Integer</code> 数组。这样，<code class="language-plaintext highlighter-rouge">toArray(Integer[]::new)</code> 将生成一个与 <code class="language-plaintext highlighter-rouge">list</code> 大小相同的 <code class="language-plaintext highlighter-rouge">Integer</code> 数组，并将 <code class="language-plaintext highlighter-rouge">list</code> 中的元素复制到这个数组中。</p>

<p>详情参见：<a href="/2024/04/25/函数式编程/">函数式编程</a></p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry></feed>