<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-11-13T22:01:23+08:00</updated><id>/feed.xml</id><title type="html">个人博客</title><subtitle></subtitle><author><name>acteds</name></author><entry><title type="html">Redis</title><link href="/2024/09/26/Redis/" rel="alternate" type="text/html" title="Redis" /><published>2024-09-26T00:00:00+08:00</published><updated>2024-09-26T00:00:00+08:00</updated><id>/2024/09/26/Redis</id><content type="html" xml:base="/2024/09/26/Redis/"><![CDATA[<h1 id="引言">引言</h1>

<p>Redis是一个内存数据库。</p>

<h1 id="redis">Redis</h1>

<p>redis在各大操作系统中的安装使用都非常简单，默认配置就是监听<code class="language-plaintext highlighter-rouge">127.0.0.1:6379</code>，且无帐号密码。</p>

<p><a href="https://redis.io/docs/latest/operate/oss_and_stack/install/install-redis/install-redis-on-windows/">在windows通过虚拟机安装redis</a>，或通过doker镜像运行：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull redis
docker run <span class="nt">--name</span> my-redis <span class="nt">-p</span> 6379:6379 <span class="nt">-d</span> redis
</code></pre></div></div>

<p>也可以使用<a href="https://github.com/microsoftarchive/redis">古早版本</a>，输入：<code class="language-plaintext highlighter-rouge">redis-server redis.windows.conf</code> 即可启动redis。</p>

<p>如果要部署Redis为windows下的服务，可以输入：<code class="language-plaintext highlighter-rouge">redis-server --service-install redis.windows.conf</code>。</p>

<p>其他常用命令：</p>

<ul>
  <li>卸载服务：<code class="language-plaintext highlighter-rouge">redis-server --service-uninstall</code></li>
  <li>开启服务：<code class="language-plaintext highlighter-rouge">redis-server --service-start</code></li>
  <li>停止服务：<code class="language-plaintext highlighter-rouge">redis-server --service-stop</code></li>
</ul>

<p>测试：</p>

<p>可以通过set、get指令查看是否成功启动：</p>

<pre><code class="language-cmd">C:\Redis&gt;redis-cli
127.0.0.1:6379&gt;set A 123
127.0.0.1:6379&gt;get A
</code></pre>

<h2 id="通常用法">通常用法</h2>

<p>在Spring Boot中，要访问Redis，可以直接引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-data-redis</code>依赖，它实际上是Spring Data的一个子项目——Spring Data Redis，主要用到了这几个组件：</p>

<ul>
  <li>Lettuce：一个基于Netty的高性能Redis客户端；</li>
  <li>RedisTemplate：一个类似于JdbcTemplate的接口，用于简化Redis的操作。</li>
</ul>

<p>因为Spring Data Redis引入的依赖项很多，如果只是为了使用Redis，完全可以只引入Lettuce，剩下的操作都自己来完成。</p>

<h3 id="直接使用lettuce">直接使用Lettuce</h3>

<p>如何把一个第三方组件引入到Spring Boot中：</p>

<p>首先，添加必要的几个依赖项：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.lettuce<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>lettuce-core<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>commons-pool2<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">spring-boot-starter-parent</code>中已经把常用组件的版本号确定下来了，因此不需要显式设置版本号。</p>

<p>第一步是在配置文件<code class="language-plaintext highlighter-rouge">application.yml</code>中添加Redis的相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">${REDIS_HOST:localhost}</span>
    <span class="na">port</span><span class="pi">:</span> <span class="s">${REDIS_PORT:6379}</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${REDIS_PASSWORD:}</span>
    <span class="na">ssl</span><span class="pi">:</span> <span class="s">${REDIS_SSL:false}</span>
    <span class="na">database</span><span class="pi">:</span> <span class="s">${REDIS_DATABASE:0}</span>
</code></pre></div></div>

<p>然后，通过<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>来加载它：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">host</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">database</span><span class="o">;</span>

    <span class="c1">// getters and setters...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再编写一个<code class="language-plaintext highlighter-rouge">@Bean</code>方法来创建<code class="language-plaintext highlighter-rouge">RedisClient</code>，可以直接放在<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Bean</span>
    <span class="nc">RedisClient</span> <span class="nf">redisClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">""</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">trim</span><span class="o">()))</span> <span class="o">{</span>
     		<span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="o">}</span>
        <span class="nc">RedisURI</span> <span class="n">uri</span> <span class="o">=</span> <span class="nc">RedisURI</span><span class="o">.</span><span class="na">Builder</span><span class="o">.</span><span class="na">redis</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">host</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">port</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withPassword</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withDatabase</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">database</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="k">return</span> <span class="nc">RedisClient</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在启动入口引入该配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@Import</span><span class="o">(</span><span class="nc">RedisConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 加载Redis配置</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果在<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>中标注<code class="language-plaintext highlighter-rouge">@Configuration</code>，则可通过Spring Boot的自动扫描机制自动加载，否则需要使用<code class="language-plaintext highlighter-rouge">@Import</code>手动加载。</p>

<p>用一个<code class="language-plaintext highlighter-rouge">RedisService</code>来封装所有的Redis操作。基础代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">RedisClient</span> <span class="n">redisClient</span><span class="o">;</span>

    <span class="nc">GenericObjectPool</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">redisConnectionPool</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">poolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;&gt;();</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxTotal</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxIdle</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestOnReturn</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestWhileIdle</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span> <span class="o">=</span> <span class="nc">ConnectionPoolSupport</span><span class="o">.</span><span class="na">createGenericObjectPool</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">redisClient</span><span class="o">.</span><span class="na">connect</span><span class="o">(),</span> <span class="n">poolConfig</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PreDestroy</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisClient</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码引入了Commons Pool的一个对象池，用于缓存Redis连接。因为Lettuce本身是基于Netty的异步驱动，在异步访问时并不需要创建连接池，但基于Servlet模型的同步访问时，连接池是有必要的。连接池在<code class="language-plaintext highlighter-rouge">@PostConstruct</code>方法中初始化，在<code class="language-plaintext highlighter-rouge">@PreDestroy</code>方法中关闭。</p>

<p>下一步，是在<code class="language-plaintext highlighter-rouge">RedisService</code>中添加Redis访问方法。为了简化代码，仿照<code class="language-plaintext highlighter-rouge">JdbcTemplate.execute(ConnectionCallback)</code>方法，传入回调函数，可大幅减少样板代码。</p>

<p>首先定义回调函数接口<code class="language-plaintext highlighter-rouge">SyncCommandCallback</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// 在此操作Redis:</span>
    <span class="no">T</span> <span class="nf">doInConnection</span><span class="o">(</span><span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写<code class="language-plaintext highlighter-rouge">executeSync</code>方法，在该方法中，获取Redis连接，利用callback操作Redis，最后释放连接，并返回操作结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">executeSync</span><span class="o">(</span><span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">redisConnectionPool</span><span class="o">.</span><span class="na">borrowObject</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setAutoFlushCommands</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">callback</span><span class="o">.</span><span class="na">doInConnection</span><span class="o">(</span><span class="n">commands</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"executeSync redis failed."</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以针对常用操作把它封装一下，例如<code class="language-plaintext highlighter-rouge">set</code>和<code class="language-plaintext highlighter-rouge">get</code>命令：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>类似的，<code class="language-plaintext highlighter-rouge">hget</code>和<code class="language-plaintext highlighter-rouge">hset</code>操作如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hset</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">hget</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="nf">hgetall</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hgetall</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>常用命令可以提供方法接口，如果要执行任意复杂的操作，就可以通过<code class="language-plaintext highlighter-rouge">executeSync(SyncCommandCallback&lt;T&gt;)</code>来完成。</p>

<p>完成了<code class="language-plaintext highlighter-rouge">RedisService</code>后，就可以使用Redis了。例如，在<code class="language-plaintext highlighter-rouge">UserController</code>中，在Session中只存放登录用户的ID，用户信息存放到Redis，提供两个方法用于读写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">KEY_USER_ID</span> <span class="o">=</span> <span class="s">"__userid__"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">KEY_USERS</span> <span class="o">=</span> <span class="s">"__users__"</span><span class="o">;</span>

    <span class="nd">@Autowired</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>
    <span class="nd">@Autowired</span> <span class="nc">RedisService</span> <span class="n">redisService</span><span class="o">;</span>

    <span class="c1">// 把User写入Redis:</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">putUserIntoRedis</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">redisService</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="no">KEY_USERS</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">user</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="c1">// 从Redis读取User:</span>
    <span class="kd">private</span> <span class="nc">User</span> <span class="nf">getUserFromRedis</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="no">KEY_USER_ID</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">redisService</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="no">KEY_USERS</span><span class="o">,</span> <span class="n">id</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用户登录成功后，把ID放入Session，把<code class="language-plaintext highlighter-rouge">User</code>实例放入Redis：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">doSignin</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"email"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"password"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">signin</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="no">KEY_USER_ID</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">putUserIntoRedis</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"signin.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="n">email</span><span class="o">,</span> <span class="s">"error"</span><span class="o">,</span> <span class="s">"Signin failed"</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"redirect:/profile"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>需要获取<code class="language-plaintext highlighter-rouge">User</code>时，从Redis取出：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">getUserFromRedis</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"redirect:/signin"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"profile.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>从Redis读写Java对象时，序列化和反序列化是应用程序的工作，上述代码使用JSON作为序列化方案，简单可靠。也可将相关序列化操作封装到<code class="language-plaintext highlighter-rouge">RedisService</code>中，这样可以提供更加通用的方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h3 id="lettuce-自定义序列化">Lettuce 自定义序列化</h3>

<p>Lettuce 提供了序列化接口，可以通过 <code class="language-plaintext highlighter-rouge">RedisCodec</code> 自定义序列化规则。以下展示如何使用 Lettuce 自定义序列化和反序列化对象：</p>

<p>自定义 <code class="language-plaintext highlighter-rouge">RedisCodec</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.core.JsonProcessingException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.lettuce.core.RedisClient</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.lettuce.core.api.StatefulRedisConnection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.lettuce.core.codec.RedisCodec</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.ByteBuffer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonRedisCodec</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">RedisCodec</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JsonRedisCodec</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>  <span class="c1">// Jackson 序列化器</span>
        <span class="k">this</span><span class="o">.</span><span class="na">clazz</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">decodeKey</span><span class="o">(</span><span class="nc">ByteBuffer</span> <span class="n">bytes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">.</span><span class="na">array</span><span class="o">());</span>  <span class="c1">// 解码键</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">decodeValue</span><span class="o">(</span><span class="nc">ByteBuffer</span> <span class="n">bytes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">bytes</span><span class="o">.</span><span class="na">array</span><span class="o">(),</span> <span class="n">clazz</span><span class="o">);</span>  <span class="c1">// 将字节数组反序列化为对象</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">ByteBuffer</span> <span class="nf">encodeKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>  <span class="c1">// 编码键</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">ByteBuffer</span> <span class="nf">encodeValue</span><span class="o">(</span><span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsBytes</span><span class="o">(</span><span class="n">value</span><span class="o">));</span>  <span class="c1">// 将对象序列化为字节数组</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">JsonProcessingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>使用自定义 Codec 操作 Redis：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">io.lettuce.core.RedisClient</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.lettuce.core.api.StatefulRedisConnection</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisServiceLettuce</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">RedisClient</span> <span class="n">redisClient</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">MyObject</span><span class="o">&gt;</span> <span class="n">connection</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">RedisServiceLettuce</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisClient</span> <span class="o">=</span> <span class="nc">RedisClient</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"redis://localhost:6379"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">connection</span> <span class="o">=</span> <span class="n">redisClient</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="k">new</span> <span class="nc">JsonRedisCodec</span><span class="o">&lt;&gt;(</span><span class="nc">MyObject</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>  <span class="c1">// 使用自定义 Codec</span>
    <span class="o">}</span>

    <span class="c1">// 存储对象</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">MyObject</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">sync</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>  <span class="c1">// 使用自定义序列化</span>
    <span class="o">}</span>

    <span class="c1">// 获取对象</span>
    <span class="kd">public</span> <span class="nc">MyObject</span> <span class="nf">getObject</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">connection</span><span class="o">.</span><span class="na">sync</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>  <span class="c1">// 使用自定义反序列化</span>
    <span class="o">}</span>

    <span class="c1">// 关闭连接</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="n">redisClient</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">JsonRedisCodec</code> 类实现了 Lettuce 的 <code class="language-plaintext highlighter-rouge">RedisCodec</code> 接口，用于自定义键和值的序列化和反序列化规则。</p>

<hr />

<p>因此可以对之前的代码做修改为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">RedisClient</span> <span class="n">redisClient</span><span class="o">;</span>

    <span class="nc">GenericObjectPool</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">redisConnectionPool</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">poolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;&gt;();</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxTotal</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxIdle</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestOnReturn</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestWhileIdle</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span> <span class="o">=</span> <span class="nc">ConnectionPoolSupport</span><span class="o">.</span><span class="na">createGenericObjectPool</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">redisClient</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="k">new</span> <span class="nc">JsonRedisCodec</span><span class="o">&lt;&gt;(</span><span class="nc">MyObject</span><span class="o">.</span><span class="na">class</span><span class="o">)),</span> <span class="n">poolConfig</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PreDestroy</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisClient</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>也就是在：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span> <span class="o">=</span> <span class="nc">ConnectionPoolSupport</span><span class="o">.</span><span class="na">createGenericObjectPool</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">redisClient</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="k">new</span> <span class="nc">JsonRedisCodec</span><span class="o">&lt;&gt;(</span><span class="nc">MyObject</span><span class="o">.</span><span class="na">class</span><span class="o">)),</span> <span class="n">poolConfig</span><span class="o">);</span>
</code></pre></div></div>

<p>这行进行了修改。</p>

<h3 id="直接使用jedis">直接使用jedis</h3>

<p>引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>准备连接池：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">JedisPool</span> <span class="nf">jedisPool</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">JedisPoolConfig</span> <span class="n">poolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JedisPoolConfig</span><span class="o">();</span>
    <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxTotal</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
    <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxIdle</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
    <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestOnBorrow</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestWhileIdle</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">JedisPool</span><span class="o">(</span><span class="n">poolConfig</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">,</span> <span class="mi">2000</span><span class="o">,</span> <span class="n">password</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">password</span><span class="o">,</span> <span class="n">database</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">JedisPool</code> 就是 Jedis 的连接池，用于管理 Redis 连接的池化操作。</p>

<p>这里通过 <code class="language-plaintext highlighter-rouge">JedisPoolConfig</code> 配置了最大连接数 (<code class="language-plaintext highlighter-rouge">setMaxTotal</code>) 和最大空闲连接数 (<code class="language-plaintext highlighter-rouge">setMaxIdle</code>)，并启用了连接的健康检查（<code class="language-plaintext highlighter-rouge">setTestOnBorrow</code> 和 <code class="language-plaintext highlighter-rouge">setTestWhileIdle</code>），确保借用连接时是有效的。</p>

<p><code class="language-plaintext highlighter-rouge">RedisService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">JedisPool</span> <span class="n">jedisPool</span><span class="o">;</span>

    <span class="nd">@FunctionalInterface</span>
    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="c1">// 在此操作Redis:</span>
        <span class="no">T</span> <span class="nf">doInConnection</span><span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">executeSync</span><span class="o">(</span><span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">jedisPool</span><span class="o">.</span><span class="na">getResource</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">callback</span><span class="o">.</span><span class="na">doInConnection</span><span class="o">(</span><span class="n">jedis</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"executeSync redis failed."</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">setex</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span><span class="kt">long</span> <span class="n">seconds</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">){</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">((</span><span class="n">jedis</span><span class="o">)-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">setex</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">seconds</span><span class="o">),</span> <span class="n">value</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">keys</span><span class="o">(</span><span class="nc">String</span> <span class="n">pattern</span><span class="o">){</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="n">pattern</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">strings</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteKeys</span><span class="o">(</span><span class="nc">String</span> <span class="n">pattern</span><span class="o">){</span>
        <span class="n">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">keysToDelete</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">jedis</span><span class="o">.</span><span class="na">keys</span><span class="o">(</span><span class="n">pattern</span><span class="o">));</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">keysToDelete</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">jedis</span><span class="o">.</span><span class="na">del</span><span class="o">(</span><span class="n">keysToDelete</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">exists</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">){</span>
        <span class="nc">Boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="n">executeSync</span><span class="o">(</span><span class="n">redisCommands</span> <span class="o">-&gt;</span> <span class="n">redisCommands</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">b</span> <span class="o">?</span> <span class="mi">1L</span> <span class="o">:</span> <span class="mi">0L</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">del</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span><span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">del</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hset</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1L</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hget</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="nf">hgetall</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">hgetAll</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Jedis需要手动处理对象的序列化和反序列化，可以使用 Jackson、Gson 等工具。</p>

<h3 id="自定义连接池">自定义连接池</h3>

<p>如果希望使用 <code class="language-plaintext highlighter-rouge">commons-pool2</code> 来管理 <code class="language-plaintext highlighter-rouge">Jedis</code> 连接池，而不是直接使用 <code class="language-plaintext highlighter-rouge">JedisPool</code>，可以通过 <code class="language-plaintext highlighter-rouge">GenericObjectPool</code> 来实现类似于 Lettuce 的方式。可以手动创建 <code class="language-plaintext highlighter-rouge">Jedis</code> 的连接池，管理 <code class="language-plaintext highlighter-rouge">Jedis</code> 对象的借用和归还。以下是使用 <code class="language-plaintext highlighter-rouge">commons-pool2</code> 来实现 <code class="language-plaintext highlighter-rouge">Jedis</code> 连接池的示例：</p>

<p>引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>commons-pool2<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">RedisService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">RedisConfig</span> <span class="n">redisConfig</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">GenericObjectPool</span><span class="o">&lt;</span><span class="nc">Jedis</span><span class="o">&gt;</span> <span class="n">jedisConnectionPool</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;</span><span class="nc">Jedis</span><span class="o">&gt;</span> <span class="n">poolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;&gt;();</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxTotal</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>  <span class="c1">// 设置最大连接数</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxIdle</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>    <span class="c1">// 设置最大空闲连接数</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestOnBorrow</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>  <span class="c1">// 借用连接时进行健康检查</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestWhileIdle</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 空闲时进行健康检查</span>
        <span class="c1">// 创建连接池</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jedisConnectionPool</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericObjectPool</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nc">JedisFactory</span><span class="o">(),</span> <span class="n">poolConfig</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PreDestroy</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">jedisConnectionPool</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">jedisConnectionPool</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 关闭连接池</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">JedisFactory</span> <span class="kd">extends</span> <span class="nc">BasePooledObjectFactory</span><span class="o">&lt;</span><span class="nc">Jedis</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Jedis</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
            <span class="c1">// 设置连接超时和读取超时为2000毫秒,以及 SSL</span>
            <span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Jedis</span><span class="o">(</span><span class="n">redisConfig</span><span class="o">.</span><span class="na">getHost</span><span class="o">(),</span> <span class="n">redisConfig</span><span class="o">.</span><span class="na">getPort</span><span class="o">(),</span> <span class="mi">2000</span><span class="o">,</span> <span class="mi">2000</span><span class="o">,</span> <span class="n">redisConfig</span><span class="o">.</span><span class="na">isSsl</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">redisConfig</span><span class="o">.</span><span class="na">getPassword</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">jedis</span><span class="o">.</span><span class="na">auth</span><span class="o">(</span><span class="n">redisConfig</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span> <span class="c1">// 设置密码</span>
            <span class="o">}</span>
            <span class="n">jedis</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">redisConfig</span><span class="o">.</span><span class="na">getDatabase</span><span class="o">());</span> <span class="c1">// 选择数据库</span>
            <span class="k">return</span> <span class="n">jedis</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">PooledObject</span><span class="o">&lt;</span><span class="nc">Jedis</span><span class="o">&gt;</span> <span class="nf">wrap</span><span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">DefaultPooledObject</span><span class="o">&lt;&gt;(</span><span class="n">jedis</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">validateObject</span><span class="o">(</span><span class="nc">PooledObject</span><span class="o">&lt;</span><span class="nc">Jedis</span><span class="o">&gt;</span> <span class="n">pooledObject</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">pooledObject</span><span class="o">.</span><span class="na">getObject</span><span class="o">();</span>
            <span class="c1">// 在此处可以验证 Jedis 实例的有效性，例如发送 PING 命令</span>
            <span class="k">return</span> <span class="s">"PONG"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">jedis</span><span class="o">.</span><span class="na">ping</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroyObject</span><span class="o">(</span><span class="nc">PooledObject</span><span class="o">&lt;</span><span class="nc">Jedis</span><span class="o">&gt;</span> <span class="n">pooledObject</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">pooledObject</span><span class="o">.</span><span class="na">getObject</span><span class="o">().</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 关闭 Jedis 实例</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">executeSync</span><span class="o">(</span><span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="n">jedisConnectionPool</span><span class="o">.</span><span class="na">borrowObject</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">callback</span><span class="o">.</span><span class="na">doInConnection</span><span class="o">(</span><span class="n">jedis</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"executeSync redis failed."</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
	<span class="cm">/*以下逻辑不变*/</span>
    <span class="nd">@FunctionalInterface</span>
    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="c1">// 在此操作Redis:</span>
        <span class="no">T</span> <span class="nf">doInConnection</span><span class="o">(</span><span class="nc">Jedis</span> <span class="n">jedis</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li><strong>JedisFactory</strong>：用来创建 <code class="language-plaintext highlighter-rouge">Jedis</code> 实例，类似于工厂模式。</li>
  <li><strong>GenericObjectPoolConfig</strong>：设置连接池的配置，如最大连接数和最大空闲连接数，以及健康检查的配置。</li>
  <li><strong>借用与归还连接</strong>：通过 <code class="language-plaintext highlighter-rouge">jedisConnectionPool.borrowObject()</code> 来借用 <code class="language-plaintext highlighter-rouge">Jedis</code> 实例，执行完操作后，<code class="language-plaintext highlighter-rouge">try-with-resources</code> 结构确保 <code class="language-plaintext highlighter-rouge">Jedis</code> 实例自动归还给连接池。</li>
  <li><strong>资源管理</strong>：在 <code class="language-plaintext highlighter-rouge">@PreDestroy</code> 中关闭连接池，确保资源被正确释放。</li>
</ol>

<h3 id="使用redistemplate">使用<code class="language-plaintext highlighter-rouge">RedisTemplate</code></h3>

<p>要通过 <code class="language-plaintext highlighter-rouge">spring-boot-starter-data-redis</code> 使用 Redis，配置和使用方式相对简单。</p>

<p>添加依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;exclusions&gt;</span>
        <span class="nt">&lt;exclusion&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.lettuce<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>lettuce-core<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/exclusion&gt;</span>
    <span class="nt">&lt;/exclusions&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>这里使用了 <code class="language-plaintext highlighter-rouge">Jedis</code> 作为 Redis 客户端。如果需要使用 Lettuce，只需移除 <code class="language-plaintext highlighter-rouge">Jedis</code> 依赖。</p>

<p>配置 Redis 连接：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">6379</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span> <span class="c1"># 如果不需要密码则留空</span>
    <span class="na">database</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">timeout</span><span class="pi">:</span> <span class="m">6000</span> <span class="c1"># 连接超时</span>
    <span class="na">jedis</span><span class="pi">:</span>
      <span class="na">pool</span><span class="pi">:</span>
        <span class="na">max-active</span><span class="pi">:</span> <span class="m">20</span> <span class="c1"># 最大连接数</span>
        <span class="na">max-idle</span><span class="pi">:</span> <span class="m">5</span> <span class="c1"># 最大空闲连接</span>
        <span class="na">min-idle</span><span class="pi">:</span> <span class="m">1</span> <span class="c1"># 最小空闲连接</span>
</code></pre></div></div>

<p>使用 <code class="language-plaintext highlighter-rouge">RedisTemplate</code>：</p>

<p><code class="language-plaintext highlighter-rouge">RedisTemplate</code> 是 Spring 提供的高层封装，可以用来执行 Redis 操作。可以通过自动注入来使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span><span class="o">;</span>

    <span class="c1">// 设置值</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 获取值</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">getValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 删除值</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">RedisTemplate</code> 自定义序列化</strong></p>

<p>默认的 <code class="language-plaintext highlighter-rouge">RedisTemplate</code> 使用 <code class="language-plaintext highlighter-rouge">JdkSerializationRedisSerializer</code> 进行序列化，可以根据需要更改为 <code class="language-plaintext highlighter-rouge">StringRedisSerializer</code> 或 <code class="language-plaintext highlighter-rouge">Jackson2JsonRedisSerializer</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.connection.RedisConnectionFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.core.RedisTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.redis.serializer.StringRedisSerializer</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">(</span><span class="nc">RedisConnectionFactory</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">template</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">factory</span><span class="o">);</span>

        <span class="c1">// 使用 String 序列化键</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setHashKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>

        <span class="c1">// 使用 JSON 序列化值</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setHashValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>

        <span class="k">return</span> <span class="n">template</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过这些配置，你的应用可以方便地通过 <code class="language-plaintext highlighter-rouge">spring-boot-starter-data-redis</code> 来使用 Redis，并且可以结合 Spring 缓存注解来优化性能。</p>

<h2 id="注解用法">注解用法</h2>

<p>引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;exclusions&gt;</span>
        <span class="nt">&lt;exclusion&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.lettuce<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>lettuce-core<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/exclusion&gt;</span>
    <span class="nt">&lt;/exclusions&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-cache<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">spring-boot-starter-cache</code> 是 Spring Boot 提供的一个启动器，旨在简化缓存的使用。它集成了 Spring 的缓存抽象和多种缓存实现，如 EhCache、Caffeine、Hazelcast、Redis 等。以下是该启动器的一些关键特性：</p>

<ul>
  <li>
    <p><strong>自动配置</strong>：只需在应用程序中添加依赖，并在主类上添加 <code class="language-plaintext highlighter-rouge">@EnableCaching</code> 注解，Spring Boot 会自动配置缓存功能。</p>
  </li>
  <li>
    <p><strong>缓存抽象</strong>：Spring 提供了一套统一的缓存抽象，使得开发者可以使用相同的 API 操作不同的缓存实现。</p>
  </li>
  <li>
    <p><strong>注解支持</strong>：可以使用 <code class="language-plaintext highlighter-rouge">@Cacheable</code>、<code class="language-plaintext highlighter-rouge">@CachePut</code> 和 <code class="language-plaintext highlighter-rouge">@CacheEvict</code> 等注解轻松进行缓存操作。</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">@Cacheable</code>: 指定方法的返回值应缓存。</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">@CachePut</code>: 更新缓存而不影响方法执行。</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">@CacheEvict</code>: 从缓存中移除指定的缓存项。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>支持多种缓存实现</strong>：通过配置可以选择不同的缓存实现，例如使用 Redis 作为缓存存储。</p>
  </li>
  <li>
    <p><strong>灵活配置</strong>：可以在 <code class="language-plaintext highlighter-rouge">application.properties</code> 或 <code class="language-plaintext highlighter-rouge">application.yml</code> 中配置缓存属性，如 TTL、最大容量等。</p>
  </li>
</ul>

<p>Spring 的缓存注解提供了简化缓存管理的手段，主要包括 <code class="language-plaintext highlighter-rouge">@Cacheable</code>、<code class="language-plaintext highlighter-rouge">@CachePut</code>、<code class="language-plaintext highlighter-rouge">@CacheEvict</code> 和 <code class="language-plaintext highlighter-rouge">@Caching</code>。这些注解通过指定缓存策略，可以决定缓存如何存取、更新或清除。</p>

<p><strong><code class="language-plaintext highlighter-rouge">@Cacheable</code></strong>：<strong>添加缓存</strong>，<code class="language-plaintext highlighter-rouge">cacheNames</code> 和 <code class="language-plaintext highlighter-rouge">key</code> 都必须填，如果不填 <code class="language-plaintext highlighter-rouge">key</code> ，默认的 <code class="language-plaintext highlighter-rouge">key</code> 是当前的方法名。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"cacheName"</span><span class="o">},</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#root.methodName"</span><span class="o">)</span>
</code></pre></div></div>
<p>该注解用于缓存方法的<strong>返回值</strong>。在方法执行前，会先检查缓存是否存在指定的值，如果存在则直接返回缓存数据，不再执行方法；如果不存在，则执行方法并将返回值存入缓存。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#id"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 假设这是一个耗时的数据库查询</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里表示，设置<code class="language-plaintext highlighter-rouge">products</code>为<code class="language-plaintext highlighter-rouge">key</code>前缀，并将形参<code class="language-plaintext highlighter-rouge">id</code>的值做为<code class="language-plaintext highlighter-rouge">key</code>，此时实际key类似：<code class="language-plaintext highlighter-rouge">products:key</code>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">@CachePut</code></strong>：更新缓存</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CachePut</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"cacheName"</span><span class="o">},</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#root.methodName"</span><span class="o">)</span>
</code></pre></div></div>
<p>该注解会强制更新缓存，即无论缓存中是否存在数据，方法都会被执行，执行后的返回值会被存入缓存。这适用于需要更新缓存但又希望保留方法原始行为的场景。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CachePut</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#product.id"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">updateProduct</span><span class="o">(</span><span class="nc">Product</span> <span class="n">product</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@CacheEvict</code></strong>：删除缓存</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CacheEvict</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"cacheName"</span><span class="o">},</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#root.methodName"</span><span class="o">,</span> <span class="n">allEntries</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">beforeInvocation</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
</code></pre></div></div>
<p>该注解用于清除缓存，支持清除指定的缓存项或清除整个缓存。<code class="language-plaintext highlighter-rouge">allEntries</code> 属性表示是否清空缓存中的所有条目，<code class="language-plaintext highlighter-rouge">beforeInvocation</code> 属性则决定清除操作是在方法执行前还是执行后进行。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CacheEvict</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#id"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteProduct</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">productRepository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@Caching</code></strong>：聚合操作</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Caching</span><span class="o">(</span><span class="n">cacheable</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@Cacheable</span><span class="o">(</span><span class="s">"cacheName"</span><span class="o">)},</span> <span class="n">put</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@CachePut</span><span class="o">(</span><span class="s">"cacheName"</span><span class="o">)},</span> <span class="n">evict</span> <span class="o">=</span> <span class="o">{</span><span class="nd">@CacheEvict</span><span class="o">(</span><span class="s">"cacheName"</span><span class="o">)})</span>
</code></pre></div></div>
<p>该注解允许对一个方法同时应用多个缓存操作。例如，可以在同一个方法上同时执行缓存查询、缓存更新和缓存清除等操作。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Caching</span><span class="o">(</span>
    <span class="n">cacheable</span> <span class="o">=</span> <span class="o">{</span> <span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#id"</span><span class="o">)</span> <span class="o">},</span>
    <span class="n">put</span> <span class="o">=</span> <span class="o">{</span> <span class="nd">@CachePut</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#result.id"</span><span class="o">)</span> <span class="o">},</span>
    <span class="n">evict</span> <span class="o">=</span> <span class="o">{</span> <span class="nd">@CacheEvict</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"cacheName"</span><span class="o">,</span> <span class="n">allEntries</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="o">}</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">handleProductCache</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>参数详解</strong></p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">value</code></strong>：缓存名称，可以是单个值或者数组，指定要使用的缓存区域。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">key</code></strong>：指定缓存条目的键，支持 SpEL（Spring 表达式语言）。默认是方法的所有参数，例如，方法参数只有一个<code class="language-plaintext highlighter-rouge">id=10</code>，那么<code class="language-plaintext highlighter-rouge">key</code>就是<code class="language-plaintext highlighter-rouge">10</code>，如果有两个：<code class="language-plaintext highlighter-rouge">id=10，name="a1"</code>，那么<code class="language-plaintext highlighter-rouge">key</code>就是<code class="language-plaintext highlighter-rouge">[10,"a1"]</code>。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">condition</code></strong>：缓存条件，支持 SpEL，用于决定是否缓存某个条目。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">unless</code></strong>：条件表达式，返回 <code class="language-plaintext highlighter-rouge">true</code> 时不缓存结果。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">sync</code></strong>：默认为 <code class="language-plaintext highlighter-rouge">false</code>，如果设置为 <code class="language-plaintext highlighter-rouge">true</code>，则会以同步模式生成缓存条目，避免并发问题。</li>
</ul>

<p>通过这些注解，可以轻松实现缓存的存取、更新和删除策略，提升应用性能。</p>

<h3 id="缓存区域">缓存区域</h3>

<p><code class="language-plaintext highlighter-rouge">value</code> 也可以统一写在类上面， <code class="language-plaintext highlighter-rouge">@CacheConfig(value= "product")</code> ，具体的方法上就不用写。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CacheConfig</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"product"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BuyerOrderService</span> <span class="o">{</span>
	<span class="nd">@CachePut</span><span class="o">(</span><span class="n">key</span> <span class="o">=</span> <span class="s">"order"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResultVO</span> <span class="nf">cancel</span><span class="o">(</span><span class="nc">String</span> <span class="n">openid</span><span class="o">,</span><span class="nc">String</span> <span class="n">orderId</span><span class="o">){</span>
        <span class="n">buyerService</span><span class="o">.</span><span class="na">cancelOrder</span><span class="o">(</span><span class="n">openid</span><span class="o">,</span> <span class="n">orderId</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">ResultVOUtils</span><span class="o">.</span><span class="na">success</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">value</code> 属性在缓存注解中用于指定缓存的名称，也可以理解为标识缓存的“命名空间”。这是为了区分不同的缓存存储区域，可以有多个缓存区域来存储不同类型或用途的数据。</p>

<p><strong>使用一个缓存区域</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">value = "products"</code> 表示，<code class="language-plaintext highlighter-rouge">getProductById</code> 方法的返回值会被存储在名为 <code class="language-plaintext highlighter-rouge">products</code> 的缓存空间中。下次调用该方法时，Spring 会先去 <code class="language-plaintext highlighter-rouge">products</code> 这个缓存空间查看是否有对应的缓存条目。</p>

<p><strong>多个缓存区域</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"products"</span><span class="o">,</span> <span class="s">"mainCache"</span><span class="o">})</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">value = {"products", "mainCache"}</code> 表示该方法的结果会同时缓存到 <code class="language-plaintext highlighter-rouge">products</code> 和 <code class="language-plaintext highlighter-rouge">mainCache</code> 这两个缓存空间中。这样在不同的缓存区域都可以找到缓存的结果。</p>

<p><strong>完整的缓存键：</strong></p>

<p>在 Spring 缓存中，<code class="language-plaintext highlighter-rouge">value</code> 和 <code class="language-plaintext highlighter-rouge">key</code> 的组合确实会形成一个完整的缓存键，但它的实际表现形式取决于使用的缓存实现（如 Redis、Ehcache 等）。</p>

<p>假设你设置了：<code class="language-plaintext highlighter-rouge">value = "products"</code>，<code class="language-plaintext highlighter-rouge">key = "key1"</code></p>

<p><strong>Redis</strong>：</p>

<ul>
  <li>Redis 通常会使用 <code class="language-plaintext highlighter-rouge">value</code> 作为命名空间（或者称为“前缀”），而 <code class="language-plaintext highlighter-rouge">key</code> 是具体的键值。</li>
  <li>实际上，当你查询 Redis 时，可能会看到类似这样的键格式：<code class="language-plaintext highlighter-rouge">products::key1</code> 或 <code class="language-plaintext highlighter-rouge">products:key1</code>。</li>
  <li>具体的分隔符和格式依赖于你的配置，通常是由 Redis 客户端或 Spring 的 Redis 相关配置决定的。</li>
</ul>

<p><strong>Ehcache</strong>：</p>

<ul>
  <li>在 Ehcache 中，通常会将 <code class="language-plaintext highlighter-rouge">value</code> 作为缓存名称，而 <code class="language-plaintext highlighter-rouge">key</code> 则是缓存条目的唯一标识。</li>
  <li>在这种情况下，它会将 <code class="language-plaintext highlighter-rouge">products</code> 作为缓存名称，<code class="language-plaintext highlighter-rouge">key1</code> 作为唯一标识，实际使用的缓存键不会有像 <code class="language-plaintext highlighter-rouge">:</code> 这样的分隔符。</li>
</ul>

<h3 id="自定义-key-内容">自定义 <code class="language-plaintext highlighter-rouge">key</code> 内容</h3>

<p>如果默认生成的 <code class="language-plaintext highlighter-rouge">key</code> 不能满足需求，或者你希望使用自定义的键，可以通过 <code class="language-plaintext highlighter-rouge">key</code> 属性指定。例如，使用 Spring 表达式语言 (SpEL) 自定义键的生成方式。</p>

<p><strong>使用单个参数作为 <code class="language-plaintext highlighter-rouge">key</code></strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#id"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过 <code class="language-plaintext highlighter-rouge">key = "#id"</code>，指定 <code class="language-plaintext highlighter-rouge">id</code> 参数为缓存键，避免了默认的参数组合行为。</p>

<p><strong>基于多个参数生成 <code class="language-plaintext highlighter-rouge">key</code></strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#id + '_' + #name"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">getProductByIdAndName</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">findByIdAndName</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在这个例子中，缓存键被自定义为 <code class="language-plaintext highlighter-rouge">id</code> 和 <code class="language-plaintext highlighter-rouge">name</code> 的组合，例如：<code class="language-plaintext highlighter-rouge">"42_exampleProduct"</code>。这样可以避免参数组合时的不必要复杂性。</p>

<p><strong>使用方法名称和参数生成 <code class="language-plaintext highlighter-rouge">key</code></strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#root.methodName + '_' + #id"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过 <code class="language-plaintext highlighter-rouge">#root.methodName</code> 可以引用方法名，并结合参数生成缓存键。例如，对于 <code class="language-plaintext highlighter-rouge">getProductById(42)</code> 调用，缓存键会是 <code class="language-plaintext highlighter-rouge">"getProductById_42"</code>。</p>

<p><strong>使用返回值作为 <code class="language-plaintext highlighter-rouge">key</code>（在 <code class="language-plaintext highlighter-rouge">@CachePut</code> 或 <code class="language-plaintext highlighter-rouge">@CacheEvict</code> 中常用）</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@CachePut</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">"#result.id"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Product</span> <span class="nf">updateProduct</span><span class="o">(</span><span class="nc">Product</span> <span class="n">product</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">productRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在 <code class="language-plaintext highlighter-rouge">@CachePut</code> 中，可以通过 <code class="language-plaintext highlighter-rouge">#result</code> 引用方法的返回值，并将其 <code class="language-plaintext highlighter-rouge">id</code> 属性作为缓存键。</p>

<h1 id="集群环境">集群环境</h1>

<p>要将当前的 Redis 单节点配置修改为集群配置，需要更新 <code class="language-plaintext highlighter-rouge">spring.redis</code> 的配置和 Java 配置类来支持 Redis 集群。</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code> 配置文件修改：</li>
</ol>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">cluster</span><span class="pi">:</span>
      <span class="na">nodes</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">192.168.1.1:6379</span>
        <span class="pi">-</span> <span class="s">192.168.1.2:6379</span>
        <span class="pi">-</span> <span class="s">192.168.1.3:6379</span>
      <span class="na">max-redirects</span><span class="pi">:</span> <span class="m">3</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${REDIS_PASSWORD:}</span>
</code></pre></div></div>

<ol>
  <li>修改 Java 配置类：</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">clusterNodes</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">JedisCluster</span> <span class="nf">jedisCluster</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">HostAndPort</span><span class="o">&gt;</span> <span class="n">nodes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">node</span> <span class="o">:</span> <span class="n">clusterNodes</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>
            <span class="n">nodes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">HostAndPort</span><span class="o">(</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">])));</span>
        <span class="o">}</span>

        <span class="nc">JedisPoolConfig</span> <span class="n">poolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JedisPoolConfig</span><span class="o">();</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxTotal</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxIdle</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestOnBorrow</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestWhileIdle</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nf">JedisCluster</span><span class="o">(</span><span class="n">nodes</span><span class="o">,</span> <span class="mi">2000</span><span class="o">,</span> <span class="mi">2000</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="n">password</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">password</span><span class="o">,</span> <span class="n">poolConfig</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">clusterNodes</code> 是集群的节点列表，使用逗号或空格分隔多个 IP 和端口。</li>
  <li><code class="language-plaintext highlighter-rouge">JedisCluster</code> 用于替代 <code class="language-plaintext highlighter-rouge">JedisPool</code> 来处理 Redis 集群。</li>
  <li>可以设置最大重定向次数，来处理 Redis 集群中的请求重定向。</li>
</ul>

<p>这样就可以连接并使用 Redis 集群。</p>

<p>要将 <code class="language-plaintext highlighter-rouge">RedisService</code> 类适配为 Redis 集群模式，您需要将 <code class="language-plaintext highlighter-rouge">JedisPool</code> 替换为 <code class="language-plaintext highlighter-rouge">JedisCluster</code>。下面是修改后的代码示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JedisCluster</span> <span class="n">jedisCluster</span><span class="o">;</span>

    <span class="nd">@FunctionalInterface</span>
    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="no">T</span> <span class="nf">doInConnection</span><span class="o">(</span><span class="nc">JedisCluster</span> <span class="n">jedis</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">executeSync</span><span class="o">(</span><span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">callback</span><span class="o">.</span><span class="na">doInConnection</span><span class="o">(</span><span class="n">jedisCluster</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"executeSync redis failed."</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">setex</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">long</span> <span class="n">seconds</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">setex</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">seconds</span><span class="o">),</span> <span class="n">value</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">keys</span><span class="o">(</span><span class="nc">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Redis Cluster 不支持 keys 命令，建议使用 SCAN</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">keys</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="nc">String</span> <span class="n">cursor</span> <span class="o">=</span> <span class="s">"0"</span><span class="o">;</span>
        <span class="k">do</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">finalCursor</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">;</span>
            <span class="nc">ScanResult</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">scanResult</span> <span class="o">=</span> <span class="n">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">scan</span><span class="o">(</span><span class="n">finalCursor</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ScanParams</span><span class="o">().</span><span class="na">match</span><span class="o">(</span><span class="n">pattern</span><span class="o">)));</span>
            <span class="n">keys</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">scanResult</span><span class="o">.</span><span class="na">getResult</span><span class="o">());</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">scanResult</span><span class="o">.</span><span class="na">getCursor</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">cursor</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"0"</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">keys</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteKeys</span><span class="o">(</span><span class="nc">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">keysToDelete</span> <span class="o">=</span> <span class="n">keys</span><span class="o">(</span><span class="n">pattern</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">keysToDelete</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">jedis</span><span class="o">.</span><span class="na">del</span><span class="o">(</span><span class="n">keysToDelete</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">exists</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">del</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">del</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hset</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1L</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hget</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="nf">hgetall</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">jedis</span> <span class="o">-&gt;</span> <span class="n">jedis</span><span class="o">.</span><span class="na">hgetAll</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>修改说明：</p>

<ol>
  <li><strong>替换 <code class="language-plaintext highlighter-rouge">JedisPool</code> 为 <code class="language-plaintext highlighter-rouge">JedisCluster</code></strong>：更新了依赖注入和 <code class="language-plaintext highlighter-rouge">executeSync</code> 方法的签名。</li>
  <li><strong>使用 <code class="language-plaintext highlighter-rouge">SCAN</code> 代替 <code class="language-plaintext highlighter-rouge">KEYS</code></strong>：由于 Redis 集群不支持 <code class="language-plaintext highlighter-rouge">KEYS</code> 命令，所以在 <code class="language-plaintext highlighter-rouge">keys</code> 方法中使用 <code class="language-plaintext highlighter-rouge">SCAN</code> 命令。</li>
  <li><strong>保持原有的逻辑和方法</strong>：其余方法的逻辑保持不变。</li>
</ol>

<p>这样修改后，<code class="language-plaintext highlighter-rouge">RedisService</code> 就可以适配 Redis 集群环境。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">MongoDB</title><link href="/2024/09/23/MongoDB/" rel="alternate" type="text/html" title="MongoDB" /><published>2024-09-23T00:00:00+08:00</published><updated>2024-09-23T00:00:00+08:00</updated><id>/2024/09/23/MongoDB</id><content type="html" xml:base="/2024/09/23/MongoDB/"><![CDATA[<h1 id="引言">引言</h1>

<p>MongoDB是一个非关系型数据库。</p>

<h1 id="mongodb">MongoDB</h1>

<h2 id="快速启动">快速启动</h2>

<p>在spring boot中使用，需要引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-mongodb<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">data</span><span class="pi">:</span>
    <span class="na">mongodb</span><span class="pi">:</span>
      <span class="na">uri</span><span class="pi">:</span> <span class="s">${MONGODB_URI:mongodb://账号:密码@10.80.21.115:29018,10.80.21.116:29018/db_schema?authSource=admin}</span>

  <span class="na">jackson</span><span class="pi">:</span>
    <span class="na">serialization</span><span class="pi">:</span>
      <span class="na">FAIL_ON_EMPTY_BEANS</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">write-dates-as-timestamps</span><span class="pi">:</span> <span class="no">false</span> <span class="c1">#使用时间戳，使用数值timestamp表示日期</span>
      <span class="na">indent_output</span><span class="pi">:</span> <span class="no">true</span> <span class="c1">#格式化输出</span>
    <span class="na">date-format</span><span class="pi">:</span> <span class="s">yyyy-MM-dd HH:mm:ss</span>
    <span class="na">time-zone</span><span class="pi">:</span> <span class="s">GMT+8</span>
</code></pre></div></div>

<p>Spring Boot 默认会自动配置 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 和 <code class="language-plaintext highlighter-rouge">MongoClient</code>，但如果需要自定义配置（例如不同的 <code class="language-plaintext highlighter-rouge">MongoClientOptions</code>），可以手动定义 <code class="language-plaintext highlighter-rouge">MongoClient</code> 和 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 的 Bean。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.mongodb.client.MongoClient</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.mongodb.client.MongoClients</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.MongoTemplate</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MongoConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MongoClient</span> <span class="nf">mongoClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">MongoClients</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"mongodb://admin:admin123@localhost:27017/mydatabase"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MongoTemplate</span> <span class="nf">mongoTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MongoTemplate</span><span class="o">(</span><span class="n">mongoClient</span><span class="o">(),</span> <span class="s">"mydatabase"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>创建 MongoDB 数据模型和 Repository</strong></p>

<p>在 Spring Data MongoDB 中，每个 MongoDB 集合都对应一个 Java 类，通常使用 <code class="language-plaintext highlighter-rouge">@Document</code> 注解来标注。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Document</span><span class="o">;</span>

<span class="nd">@Document</span><span class="o">(</span><span class="n">collection</span> <span class="o">=</span> <span class="s">"users"</span><span class="o">)</span> <span class="c1">// 对应 MongoDB 中的 users 集合</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    <span class="c1">// Getters and Setters</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以注入 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 来执行自定义查询：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.MongoTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">MongoTemplate</span> <span class="n">mongoTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">findUserById</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>也可以使用 <code class="language-plaintext highlighter-rouge">MongoRepository</code> 来直接进行数据库操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="mongotemplate"><code class="language-plaintext highlighter-rouge">MongoTemplate</code></h2>

<p><code class="language-plaintext highlighter-rouge">MongoTemplate</code> 是 Spring Data MongoDB 中用于执行 MongoDB 操作的核心类，它提供了丰富的 CRUD（创建、读取、更新、删除）和其他 MongoDB 操作的 API。以下是一些常用的 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 方法分类及其用途：</p>

<p><strong>插入操作 (Insert)</strong></p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T insert(T objectToSave)</code>：插入单个对象到默认集合。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T insert(T objectToSave, String collectionName)</code>：插入单个对象到指定的集合。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; Collection&lt;T&gt; insertAll(Collection&lt;? extends Object&gt; batchToSave)</code>：插入多个对象到它们各自的集合。</p>

<p><strong>作用</strong>：用于将一个或多个对象插入到 MongoDB 中的集合里。</p>

<p><strong>返回值</strong>：返回插入的对象，带有 MongoDB 分配的 <code class="language-plaintext highlighter-rouge">_id</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个新的 Product 对象并插入到默认的集合</span>
<span class="nc">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">,</span> <span class="mi">1200</span><span class="o">);</span>
<span class="nc">Product</span> <span class="n">savedProduct</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>

<span class="c1">// 创建一个新的 Product 对象并插入到指定集合 "electronics"</span>
<span class="nc">Product</span> <span class="n">savedProductInElectronics</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">product</span><span class="o">,</span> <span class="s">"electronics"</span><span class="o">);</span>

<span class="c1">// 插入多个 Product 对象</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Product</span><span class="o">(</span><span class="s">"Mouse"</span><span class="o">,</span> <span class="mi">50</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Product</span><span class="o">(</span><span class="s">"Keyboard"</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">savedProducts</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">insertAll</span><span class="o">(</span><span class="n">products</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">savedProduct</code></strong> 和 <strong><code class="language-plaintext highlighter-rouge">savedProducts</code></strong> 包含了插入后自动生成的 MongoDB <code class="language-plaintext highlighter-rouge">_id</code> 字段，可以用这个 <code class="language-plaintext highlighter-rouge">_id</code> 作为后续的查询条件。</p>

<p><code class="language-plaintext highlighter-rouge">insertAll</code>会根据插入对象的类型，自动将数据插入到相应的集合。</p>

<p><strong>查询操作 (Find)</strong></p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; find(Query query, Class&lt;T&gt; entityClass)</code>：根据查询条件查找符合条件的所有记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; find(Query query, Class&lt;T&gt; entityClass, String collectionName)</code>：根据查询条件从指定集合中查找符合条件的所有记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findOne(Query query, Class&lt;T&gt; entityClass)</code>：根据查询条件查找符合条件的单条记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findById(Object id, Class&lt;T&gt; entityClass)</code>：根据 ID 查找对象。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findById(Object id, Class&lt;T&gt; entityClass, String collectionName)</code>：根据 ID 从指定集合中查找对象。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; findAll(Class&lt;T&gt; entityClass)</code>：查询所有记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; findAll(Class&lt;T&gt; entityClass, String collectionName)</code>：从指定集合中查询所有记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; findDistinct(Query query, String field, Class&lt;T&gt; entityClass, Class&lt;D&gt; resultClass)</code>：获取某个字段的去重值。</p>

<p><strong>作用</strong>：用于从 MongoDB 中查询数据，可以根据不同的条件来查询多个或单个记录。</p>

<p><strong>返回值</strong>：返回符合查询条件的对象或对象列表。<code class="language-plaintext highlighter-rouge">findOne</code> 和 <code class="language-plaintext highlighter-rouge">findById</code> 返回单个对象，<code class="language-plaintext highlighter-rouge">find</code> 返回多个对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 查找所有 Product 对象</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 根据查询条件查找 price 大于 100 的所有记录</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">100</span><span class="o">));</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">expensiveProducts</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 根据 ID 查找某个 Product 对象</span>
<span class="nc">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"12345"</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 获取 category 字段的去重值（所有不同的商品分类）</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">distinctCategories</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findDistinct</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(),</span> <span class="s">"category"</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">find</code></strong>：返回匹配的多个记录。<code class="language-plaintext highlighter-rouge">List&lt;Product&gt;</code> 是包含符合条件的所有产品。</p>

<p><strong><code class="language-plaintext highlighter-rouge">findOne</code></strong>：只返回第一个符合条件的记录。</p>

<p><strong><code class="language-plaintext highlighter-rouge">findDistinct</code></strong>：可以用于获取某个字段的唯一值，例如不同的商品分类。</p>

<p><strong>计数操作 (Count)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">long count(Query query, Class&lt;T&gt; entityClass)</code>：根据查询条件统计记录数。</li>
  <li><code class="language-plaintext highlighter-rouge">long count(Query query, String collectionName)</code>：根据查询条件统计指定集合中的记录数。</li>
</ul>

<p><strong>作用</strong>：计算 MongoDB 集合中符合查询条件的记录数。</p>

<p><strong>返回值</strong>：返回符合条件的记录总数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 计算价格低于 1000 的商品数量</span>
<span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">count</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">1000</span><span class="o">)),</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">count</code></strong> 用于统计符合条件的记录数量，在查询数据量或进行分页时非常有用。</p>

<p><strong>更新操作 (Update)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UpdateResult updateFirst(Query query, Update update, Class&lt;T&gt; entityClass)</code>：根据查询条件更新符合条件的第一条记录。</li>
  <li><code class="language-plaintext highlighter-rouge">UpdateResult updateFirst(Query query, Update update, String collectionName)</code>：根据查询条件更新指定集合中符合条件的第一条记录。</li>
  <li><code class="language-plaintext highlighter-rouge">UpdateResult updateMulti(Query query, Update update, Class&lt;T&gt; entityClass)</code>：根据查询条件更新符合条件的多条记录。</li>
  <li><code class="language-plaintext highlighter-rouge">UpdateResult updateMulti(Query query, Update update, String collectionName)</code>：根据查询条件更新指定集合中符合条件的多条记录。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findAndModify(Query query, Update update, Class&lt;T&gt; entityClass)</code>：查找并更新符合条件的单条记录，并返回更新前的记录。</li>
</ul>

<p><strong>作用</strong>：更新 MongoDB 集合中的数据，可以更新单个记录或多个记录。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">UpdateResult</code> 包含了更新操作的结果，包括受影响的记录数。<code class="language-plaintext highlighter-rouge">findAndModify</code> 返回更新前的记录或更新后的记录，具体取决于配置。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 更新符合条件的第一条记录，将价格设置为 1100</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">));</span>
<span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">1100</span><span class="o">);</span>
<span class="nc">UpdateResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">updateFirst</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">update</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 更新所有价格为 100 以下的商品，将价格增加 10</span>
<span class="nc">Update</span> <span class="n">multiUpdate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">inc</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">UpdateResult</span> <span class="n">multiResult</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">updateMulti</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">100</span><span class="o">)),</span> <span class="n">multiUpdate</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 查找并更新符合条件的记录，返回更新前的记录</span>
<span class="nc">Product</span> <span class="n">oldProduct</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findAndModify</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">update</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">updateFirst</code></strong>：只更新符合条件的第一条记录。</p>

<p><strong><code class="language-plaintext highlighter-rouge">updateMulti</code></strong>：更新所有符合条件的记录。</p>

<p><strong><code class="language-plaintext highlighter-rouge">findAndModify</code></strong>：可以用于实现原子性操作，比如修改某个字段并返回更新前的对象或更新后的对象。</p>

<p><strong>删除操作 (Delete)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DeleteResult remove(Query query, Class&lt;T&gt; entityClass)</code>：根据查询条件删除符合条件的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">DeleteResult remove(Query query, Class&lt;T&gt; entityClass, String collectionName)</code>：根据查询条件删除指定集合中符合条件的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findAndRemove(Query query, Class&lt;T&gt; entityClass)</code>：查找并删除符合条件的单条记录。</li>
</ul>

<p><strong>作用</strong>：删除 MongoDB 集合中的记录，可以删除单条或多条记录。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">DeleteResult</code> 表示删除操作的结果，包含删除的记录数。<code class="language-plaintext highlighter-rouge">findAndRemove</code> 返回被删除的对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 删除所有 name 为 "Laptop" 的记录</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">));</span>
<span class="nc">DeleteResult</span> <span class="n">deleteResult</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 查找并删除符合条件的第一条记录</span>
<span class="nc">Product</span> <span class="n">deletedProduct</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findAndRemove</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">remove</code></strong>：删除操作后，<code class="language-plaintext highlighter-rouge">DeleteResult</code> 包含受影响的记录数。</p>

<p><strong><code class="language-plaintext highlighter-rouge">findAndRemove</code></strong>：查找并删除符合条件的第一条记录，并返回删除的对象。</p>

<p><strong>保存操作 (Save)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; T save(Object objectToSave)</code>：保存对象到默认集合，如果存在 <code class="language-plaintext highlighter-rouge">_id</code> 则更新，否则插入。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; T save(Object objectToSave, String collectionName)</code>：保存对象到指定集合。</li>
</ul>

<p><strong>作用</strong>：保存对象到 MongoDB 中，如果对象已经存在（根据 <code class="language-plaintext highlighter-rouge">_id</code> 字段判断），则更新对象；否则，插入新对象。</p>

<p><strong>返回值</strong>：返回保存后的对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 保存新的 Product 对象</span>
<span class="nc">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"Monitor"</span><span class="o">,</span> <span class="mi">300</span><span class="o">);</span>
<span class="nc">Product</span> <span class="n">savedProduct</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>

<span class="c1">// 如果 _id 已存在则更新，否则插入</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">product</span><span class="o">,</span> <span class="s">"electronics"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">save</code></strong>：用于插入或更新记录，适用于不确定对象是否已经存在的场景。</p>

<p><strong>聚合操作 (Aggregation)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; AggregationResults&lt;T&gt; aggregate(Aggregation aggregation, String collectionName, Class&lt;T&gt; outputType)</code>：执行聚合操作，并将结果映射为指定的类。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; AggregationResults&lt;T&gt; aggregate(Aggregation aggregation, Class&lt;T&gt; inputType, Class&lt;O&gt; outputType)</code>：对指定类型的集合进行聚合操作。</li>
</ul>

<p><strong>作用</strong>：用于执行 MongoDB 的聚合操作，比如分组、求和、计算平均值等，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">GROUP BY</code>、<code class="language-plaintext highlighter-rouge">SUM()</code>、<code class="language-plaintext highlighter-rouge">AVG()</code> 等功能。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">AggregationResults&lt;T&gt;</code>，其中包含聚合查询的结果列表。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 计算每个类别的平均价格</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"category"</span><span class="o">).</span><span class="na">avg</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"avgPrice"</span><span class="o">)</span>
<span class="o">);</span>

<span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">CategoryAveragePrice</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"products"</span><span class="o">,</span> <span class="nc">CategoryAveragePrice</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">CategoryAveragePrice</span> <span class="n">cap</span> <span class="o">:</span> <span class="n">result</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cap</span><span class="o">.</span><span class="na">getCategory</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">cap</span><span class="o">.</span><span class="na">getAvgPrice</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation</code></strong>：适合用于复杂的数据处理任务，如计算统计值、分组数据等。返回值会根据映射类型转换为 <code class="language-plaintext highlighter-rouge">CategoryAveragePrice</code> 类。</p>

<p><strong>索引操作 (Index)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">void ensureIndex(String collectionName, IndexDefinition indexDefinition)</code>：为指定集合创建索引。</li>
  <li><code class="language-plaintext highlighter-rouge">IndexOperations indexOps(String collectionName)</code>：返回索引操作类，用于进一步的索引操作。</li>
</ul>

<p><strong>作用</strong>：用于管理 MongoDB 集合中的索引，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">CREATE INDEX</code>。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">IndexOperations</code> 对象用于进一步操作索引。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 为 Product 集合的 price 字段创建索引</span>
<span class="nc">IndexDefinition</span> <span class="n">priceIndex</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Index</span><span class="o">().</span><span class="na">on</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">);</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">indexOps</span><span class="o">(</span><span class="s">"products"</span><span class="o">).</span><span class="na">ensureIndex</span><span class="o">(</span><span class="n">priceIndex</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">ensureIndex</code></strong>：为指定字段创建索引，可以加快查询速度，特别是当集合中数据量很大时。</p>

<p><strong><code class="language-plaintext highlighter-rouge">indexOps</code></strong>：用于获取集合的索引操作，提供更多对索引的操作接口。</p>

<p><strong>集合操作 (Collection Operations)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MongoCollection&lt;Document&gt; createCollection(String collectionName)</code>：创建集合。</li>
  <li><code class="language-plaintext highlighter-rouge">MongoCollection&lt;Document&gt; createCollection(String collectionName, CollectionOptions collectionOptions)</code>：根据选项创建集合。</li>
  <li><code class="language-plaintext highlighter-rouge">void dropCollection(String collectionName)</code>：删除指定集合。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean collectionExists(String collectionName)</code>：检查集合是否存在。</li>
</ul>

<p><strong>作用</strong>：用于创建、删除集合和检查集合是否存在。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">createCollection</code> 和 <code class="language-plaintext highlighter-rouge">dropCollection</code> 没有返回值，<code class="language-plaintext highlighter-rouge">collectionExists</code> 返回布尔值表示集合是否存在。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个新的集合并设置其容量为 100 个文档</span>
<span class="nc">CollectionOptions</span> <span class="n">options</span> <span class="o">=</span> <span class="nc">CollectionOptions</span><span class="o">.</span><span class="na">empty</span><span class="o">().</span><span class="na">capped</span><span class="o">().</span><span class="na">size</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">createCollection</span><span class="o">(</span><span class="s">"logs"</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>

<span class="c1">// 检查集合 "products" 是否存在</span>
<span class="kt">boolean</span> <span class="n">exists</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">collectionExists</span><span class="o">(</span><span class="s">"products"</span><span class="o">);</span>
<span class="k">if</span> <span class="o">(</span><span class="n">exists</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Collection exists!"</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 删除集合</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">dropCollection</span><span class="o">(</span><span class="s">"oldData"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">createCollection</code></strong>：可以根据需要创建新的集合，并设定集合的选项，如大小限制等。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">collectionExists</code></strong>：用于检查集合是否存在，避免重复创建或删除。</li>
</ul>

<p><strong>Map-Reduce 操作</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; MapReduceResults&lt;T&gt; mapReduce(Query query, String inputCollectionName, String mapFunction, String reduceFunction, Class&lt;T&gt; entityClass)</code>：</li>
</ul>

<p><strong>作用</strong>：执行 MongoDB 的 Map-Reduce 操作，适用于复杂的数据处理任务，类似于 Hadoop 中的 Map-Reduce 操作。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">MapReduceResults&lt;T&gt;</code>，包含 Map-Reduce 计算的结果列表。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 定义 map 函数和 reduce 函数，计算每个类别下商品的总数量</span>
<span class="nc">String</span> <span class="n">mapFunction</span> <span class="o">=</span> <span class="s">"function() { emit(this.category, 1); }"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">reduceFunction</span> <span class="o">=</span> <span class="s">"function(key, values) { return Array.sum(values); }"</span><span class="o">;</span>

<span class="nc">MapReduceResults</span><span class="o">&lt;</span><span class="nc">CategoryCount</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">mapReduce</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Query</span><span class="o">(),</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">mapFunction</span><span class="o">,</span> <span class="n">reduceFunction</span><span class="o">,</span> <span class="nc">CategoryCount</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="k">for</span> <span class="o">(</span><span class="nc">CategoryCount</span> <span class="n">result</span> <span class="o">:</span> <span class="n">results</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getCategory</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">getCount</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">mapReduce</code></strong>：适合用于大规模数据的分布式计算，如聚合、统计等。</p>

<p><strong>投影操作 (Projection)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; Query project(String fieldName, String alias)</code>：对指定字段进行投影并使用别名。</li>
</ul>

<p><strong>作用</strong>：用于查询时只返回指定的字段，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">SELECT column1, column2</code>。</p>

<p><strong>返回值</strong>：返回投影后的对象列表，只有被包含的字段会返回。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 只返回 name 和 price 字段</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">100</span><span class="o">));</span>
<span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s">"price"</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">project</code></strong>：用于查询时减少返回的字段，提高查询效率。</p>

<p><strong>分页操作 (Pagination)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; with(Pageable pageable)</code>：基于分页器执行查询。</li>
</ul>

<p><strong>作用</strong>：实现分页查询。</p>

<p><strong>返回值</strong>：返回当前页的数据。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 查询第 1 页，每页 10 条记录</span>
<span class="nc">PageRequest</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">().</span><span class="na">with</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>with</strong>：在大数据集的查询中，分页操作可以提升性能并减少内存占用。</p>

<p><strong>Bulk 操作 (批量操作)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">BulkOperations bulkOps(BulkOperations.BulkMode bulkMode, String collectionName)</code>：用于执行批量操作。</li>
</ul>

<p><strong>作用</strong>：用于批量插入、更新或删除多个文档。MongoDB 的批量操作可以极大地提高性能，特别是在处理大量数据时。</p>

<p><strong>返回值</strong>：返回 <code class="language-plaintext highlighter-rouge">BulkOperations</code> 对象，用于构建和执行批量操作。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 批量插入或更新商品数据</span>
<span class="nc">BulkOperations</span> <span class="n">bulkOps</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">bulkOps</span><span class="o">(</span><span class="nc">BulkOperations</span><span class="o">.</span><span class="na">BulkMode</span><span class="o">.</span><span class="na">UNORDERED</span><span class="o">,</span> <span class="s">"products"</span><span class="o">);</span>

<span class="n">bulkOps</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">,</span> <span class="mi">1200</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Mouse"</span><span class="o">)),</span>
    <span class="k">new</span> <span class="nf">Update</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">25</span><span class="o">)</span>
<span class="o">);</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Old Mouse"</span><span class="o">)));</span>

<span class="c1">// 执行批量操作</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">bulkOps</code></strong>：批量操作分为两种模式，<code class="language-plaintext highlighter-rouge">ORDERED</code>（有序执行）和 <code class="language-plaintext highlighter-rouge">UNORDERED</code>（无序执行）。<code class="language-plaintext highlighter-rouge">UNORDERED</code> 会跳过失败的操作继续执行其他操作，<code class="language-plaintext highlighter-rouge">ORDERED</code> 则会在失败时终止后续操作。</p>

<h2 id="query"><code class="language-plaintext highlighter-rouge">Query</code></h2>

<p><code class="language-plaintext highlighter-rouge">Query</code> 是 Spring Data MongoDB 提供的一个类，用于定义查询条件。它封装了 MongoDB 的查询语法，可以通过它构建复杂的查询条件，传递给 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 执行数据库查询操作。</p>

<p><code class="language-plaintext highlighter-rouge">Query</code> 通常与 <code class="language-plaintext highlighter-rouge">Criteria</code> 结合使用，来定义字段的筛选条件。<code class="language-plaintext highlighter-rouge">Criteria</code> 类封装了 MongoDB 查询语句中的各种条件运算符，例如等于、包含、范围等。</p>

<p>以下是 <code class="language-plaintext highlighter-rouge">Query</code> 类的一些常用方法：</p>

<p><strong>基本方法</strong></p>

<p><code class="language-plaintext highlighter-rouge">addCriteria(Criteria criteria)</code>：添加一个查询条件。</p>

<p><strong>投影（字段过滤）</strong></p>

<p><code class="language-plaintext highlighter-rouge">fields()</code>：指定返回结果中的字段。可以包括或排除某些字段。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
<span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span> <span class="c1">// 只返回 name 字段，不包括 age，这是错误的，一般情况下include和exclude不能同时使用</span>
</code></pre></div></div>

<p>在 MongoDB 中，查询返回时<strong>默认会包含所有字段</strong>，除非你通过 <code class="language-plaintext highlighter-rouge">include</code> 或 <code class="language-plaintext highlighter-rouge">exclude</code> 来精确控制返回的字段集合。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">include("name")</code></strong>：表示只返回 <code class="language-plaintext highlighter-rouge">name</code> 字段（默认总是返回的 <code class="language-plaintext highlighter-rouge">_id</code> 字段）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">exclude("age")</code></strong>：表示排除 <code class="language-plaintext highlighter-rouge">age</code> 字段，使得返回的结果中不包含 <code class="language-plaintext highlighter-rouge">age</code> 字段。</li>
</ul>

<p>在一条查询中不能同时对同一个查询字段既 <code class="language-plaintext highlighter-rouge">include</code> 又 <code class="language-plaintext highlighter-rouge">exclude</code>，即你不能同时包括和排除字段。</p>

<p>只使用 <code class="language-plaintext highlighter-rouge">include()</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s">"address"</span><span class="o">);</span>
</code></pre></div></div>
<p>这条语句表示只返回 <code class="language-plaintext highlighter-rouge">_id</code>（默认返回）以及 <code class="language-plaintext highlighter-rouge">name</code> 和 <code class="language-plaintext highlighter-rouge">address</code> 字段，其他字段会被排除。最终返回结果类似：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"address"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123 Street"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>只使用 <code class="language-plaintext highlighter-rouge">exclude()</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">exclude</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"salary"</span><span class="o">);</span>
</code></pre></div></div>
<p>这条语句表示排除 <code class="language-plaintext highlighter-rouge">age</code> 和 <code class="language-plaintext highlighter-rouge">salary</code> 字段，返回除它们以外的所有字段。例如，MongoDB 文档中包含 <code class="language-plaintext highlighter-rouge">_id</code>、<code class="language-plaintext highlighter-rouge">name</code>、<code class="language-plaintext highlighter-rouge">age</code> 和 <code class="language-plaintext highlighter-rouge">salary</code> 字段，最终结果可能如下：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">include</code> 和 <code class="language-plaintext highlighter-rouge">exclude</code> 同时使用</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span>
</code></pre></div></div>
<p><strong>这种写法是无效的</strong>，MongoDB 不允许在同一个查询中既有 <code class="language-plaintext highlighter-rouge">include</code> 又有 <code class="language-plaintext highlighter-rouge">exclude</code>。</p>

<p>MongoDB 规则</p>

<ul>
  <li>可以使用多个 <code class="language-plaintext highlighter-rouge">include</code> 来明确指定要返回的字段，除了 <code class="language-plaintext highlighter-rouge">_id</code> 字段（它默认会被返回，除非你显式排除）。</li>
  <li>可以使用多个 <code class="language-plaintext highlighter-rouge">exclude</code> 来排除不需要的字段，其他字段都会被返回。</li>
  <li>如果想排除 <code class="language-plaintext highlighter-rouge">_id</code>，需要显式调用 <code class="language-plaintext highlighter-rouge">exclude("_id")</code>。</li>
</ul>

<p>例如：</p>

<p>返回指定字段，不返回 <code class="language-plaintext highlighter-rouge">_id</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s">"address"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"_id"</span><span class="o">);</span>
</code></pre></div></div>
<p>这条语句返回 <code class="language-plaintext highlighter-rouge">name</code> 和 <code class="language-plaintext highlighter-rouge">address</code> 字段，并且不包含 <code class="language-plaintext highlighter-rouge">_id</code>。返回结果可能如下：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"address"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123 Street"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>排除某些字段，保留 <code class="language-plaintext highlighter-rouge">_id</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">exclude</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"salary"</span><span class="o">);</span>
</code></pre></div></div>
<p>这条语句会排除 <code class="language-plaintext highlighter-rouge">age</code> 和 <code class="language-plaintext highlighter-rouge">salary</code> 字段，返回 <code class="language-plaintext highlighter-rouge">_id</code> 和除 <code class="language-plaintext highlighter-rouge">age</code> 和 <code class="language-plaintext highlighter-rouge">salary</code> 外的所有字段。</p>

<p>重点总结</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">include()</code></strong>：只返回指定的字段，其他字段会被排除。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">exclude()</code></strong>：排除指定的字段，其他字段会被返回。</li>
  <li><strong>不能</strong>在同一个查询中混用 <code class="language-plaintext highlighter-rouge">include</code> 和 <code class="language-plaintext highlighter-rouge">exclude</code>，除了特殊情况下 <code class="language-plaintext highlighter-rouge">_id</code> 可以单独被 <code class="language-plaintext highlighter-rouge">exclude</code>。</li>
</ul>

<p><strong>分页操作</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">skip(long skip)</code>：跳过查询结果中的前 N 条记录，常用于分页。</li>
  <li><code class="language-plaintext highlighter-rouge">limit(int limit)</code>：限制查询结果的记录数量。</li>
</ul>

<p>示例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
<span class="n">query</span><span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span> <span class="c1">// 跳过前 10 条</span>
<span class="n">query</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span> <span class="c1">// 限制只返回 5 条</span>
</code></pre></div></div>

<p><strong>排序操作</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">with(Sort sort)</code>：对查询结果进行排序。可以对一个或多个字段进行升序或降序排列。示例：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.domain.Sort</span><span class="o">;</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
<span class="n">query</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"age"</span><span class="o">));</span> <span class="c1">// 按照 age 升序排列</span>
</code></pre></div></div>

<p><strong>分页与排序配合</strong></p>

<p>可以通过 <code class="language-plaintext highlighter-rouge">Pageable</code> 来实现分页和排序。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.domain.PageRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.Pageable</span><span class="o">;</span>

<span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span> <span class="c1">// 第2页，每页10条</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">().</span><span class="na">with</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 执行查询：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.MongoTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.query.Criteria</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.query.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">MongoTemplate</span> <span class="n">mongoTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">findUsersByAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
        <span class="n">query</span><span class="o">.</span><span class="na">addCriteria</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="n">age</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="criteria"><code class="language-plaintext highlighter-rouge">Criteria</code></h2>

<p><strong>基本操作：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">where(String key)</code></strong>：指定要查询的字段名称。链式调用其他方法来设置查询条件。例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span> <span class="c1">// 查询 age 字段等于 30 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">is(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">=</code>，等于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">lt(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">&lt;</code>，小于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">lte(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">&lt;=</code>，小于等于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">gt(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">&gt;</code>，大于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">gte(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">&gt;=</code>，大于等于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">ne(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">!=</code>，不等于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">in(Collection&lt;?&gt; values)</code></strong>：<code class="language-plaintext highlighter-rouge">in</code>，字段值在给定的集合中，例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">in</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">25</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">35</span><span class="o">));</span> <span class="c1">// 查询 age 为 25, 30 或 35 的记录。</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">nin(Collection&lt;?&gt; values)</code></strong>：<code class="language-plaintext highlighter-rouge">not in</code>，字段值不在给定的集合中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">nin</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">25</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">35</span><span class="o">));</span> <span class="c1">// 查询 age 不为 25, 30 或 35 的记录、</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">regex(String regex)</code></strong>：正则表达式匹配。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">regex</span><span class="o">(</span><span class="s">"^A.*"</span><span class="o">);</span> <span class="c1">// 查询 name 字段以 "A" 开头的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">exists(boolean exists)</code></strong>：检查字段是否存在。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"address"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 查询 address 字段存在的记录</span>
</code></pre></div></div>

<p><strong>嵌套操作</strong>：</p>

<p><strong><code class="language-plaintext highlighter-rouge">elemMatch(Criteria criteria)</code></strong>：用于数组或嵌套对象中的匹配。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">100</span><span class="o">));</span> <span class="c1">// 查询数组中包含 price 大于 100 的元素</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">orOperator(Criteria... criteria)</code></strong>：用于 OR 条件组合查询，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">OR</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">orOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)</span>
<span class="o">);</span> <span class="c1">// 查询 age 小于 20 或 name 为 "John" 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">andOperator(Criteria... criteria)</code></strong>：用于 AND 条件组合查询，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">AND</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">30</span><span class="o">)</span>
<span class="o">);</span> <span class="c1">// 查询 age 大于 20 且小于 30 的记录</span>
</code></pre></div></div>

<p><strong>其他：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">size(int size)</code></strong>：用于查询数组长度为指定值的记录。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"tags"</span><span class="o">).</span><span class="na">size</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">// 查询 tags 数组长度为 3 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">not()</code></strong>：用于取反条件，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">NOT</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">not</span><span class="o">().</span><span class="na">is</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">);</span> <span class="c1">// 查询 name 不为 "Alice" 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">mod(Number divisor, Number remainder)</code></strong>：用于取模操作，查询字段的值是否满足模运算的结果。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">mod</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span> <span class="c1">// 查询 age 能被 5 整除的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">type(int type)</code></strong>：用于查询字段的 BSON 类型。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="c1">// 查询 age 为 BSON 类型 "double" 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">all(Collection&lt;?&gt; values)</code></strong>：用于数组字段的查询，匹配数组字段中包含指定值的记录。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"tags"</span><span class="o">).</span><span class="na">all</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"tag1"</span><span class="o">,</span> <span class="s">"tag2"</span><span class="o">));</span> <span class="c1">// 查询 tags 字段同时包含 "tag1" 和 "tag2" 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isNull()</code></strong>：用于查询字段是否为 <code class="language-plaintext highlighter-rouge">null</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"address"</span><span class="o">).</span><span class="na">isNull</span><span class="o">();</span> <span class="c1">// 查询 address 字段为 null 的记录</span>
</code></pre></div></div>

<p><strong>结合 <code class="language-plaintext highlighter-rouge">Criteria</code> 和 <code class="language-plaintext highlighter-rouge">Query</code> 使用</strong></p>

<p>通常情况下，<code class="language-plaintext highlighter-rouge">Criteria</code> 会与 <code class="language-plaintext highlighter-rouge">Query</code> 结合使用，通过 <code class="language-plaintext highlighter-rouge">Query</code> 类将 <code class="language-plaintext highlighter-rouge">Criteria</code> 传递给 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 执行查询。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
<span class="n">query</span><span class="o">.</span><span class="na">addCriteria</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">25</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">40</span><span class="o">));</span> <span class="c1">// 查询 age 在 25 到 40 之间的记录</span>

<span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>嵌套查询实例：</strong></p>

<p>关于 <code class="language-plaintext highlighter-rouge">elemMatch</code>、<code class="language-plaintext highlighter-rouge">orOperator</code> 和 <code class="language-plaintext highlighter-rouge">andOperator</code> 等嵌套操作的具体使用场景，通常是在查询 MongoDB 中复杂的嵌套文档或数组结构时用到的。为了更清晰地解释这些操作，下面会结合实际的 MongoDB 文档结构，逐个举例说明。</p>

<p>示例 1：<code class="language-plaintext highlighter-rouge">elemMatch</code>（用于数组或嵌套对象匹配）</p>

<p>假设有一个 MongoDB 集合 <code class="language-plaintext highlighter-rouge">products</code>，其文档结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"123"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Laptop"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"color"</span><span class="p">:</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1200</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"color"</span><span class="p">:</span><span class="w"> </span><span class="s2">"silver"</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1300</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>需求</strong>：查询 <code class="language-plaintext highlighter-rouge">items</code> 数组中包含 <code class="language-plaintext highlighter-rouge">price</code> 大于 1200 的文档。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 elemMatch 来匹配数组中的元素</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">1200</span><span class="o">));</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"products"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：<code class="language-plaintext highlighter-rouge">elemMatch</code> 用于查询数组字段 <code class="language-plaintext highlighter-rouge">items</code>，并查找其包含 <code class="language-plaintext highlighter-rouge">price</code> 大于 1200 的元素。</p>

<p>示例 2：<code class="language-plaintext highlighter-rouge">orOperator</code>（用于 <code class="language-plaintext highlighter-rouge">OR</code> 条件查询）</p>

<p>假设有一个 MongoDB 集合 <code class="language-plaintext highlighter-rouge">users</code>，其文档结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"123"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">25</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New York"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"124"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Bob"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"San Francisco"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"125"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Charlie"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">18</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Los Angeles"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>需求</strong>：查询年龄小于 20 岁或名字为 <code class="language-plaintext highlighter-rouge">Alice</code> 的用户。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 orOperator 来进行 OR 组合条件查询</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">orOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">)</span>
<span class="o">);</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"users"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：这里使用了 <code class="language-plaintext highlighter-rouge">orOperator</code> 来表示 <code class="language-plaintext highlighter-rouge">age</code> 小于 20 岁或者 <code class="language-plaintext highlighter-rouge">name</code> 是 <code class="language-plaintext highlighter-rouge">Alice</code> 的用户。这个操作相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">OR</code>。</p>

<p>示例 3：<code class="language-plaintext highlighter-rouge">andOperator</code>（用于 <code class="language-plaintext highlighter-rouge">AND</code> 条件查询）</p>

<p>假设还是使用 <code class="language-plaintext highlighter-rouge">users</code> 集合：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"123"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">25</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New York"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"124"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Bob"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"San Francisco"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"125"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Charlie"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">18</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Los Angeles"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>需求</strong>：查询年龄大于 20 且小于 30 岁的用户。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 andOperator 来进行 AND 组合条件查询</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">30</span><span class="o">)</span>
<span class="o">);</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"users"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：这里使用了 <code class="language-plaintext highlighter-rouge">andOperator</code>，表示 <code class="language-plaintext highlighter-rouge">age</code> 大于 20 且小于 30 的用户。这相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">AND</code> 逻辑。</p>

<p>示例 4：<code class="language-plaintext highlighter-rouge">elemMatch</code> + <code class="language-plaintext highlighter-rouge">andOperator</code>（嵌套查询）</p>

<p>假设有一个集合 <code class="language-plaintext highlighter-rouge">orders</code>，其文档结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"101"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John Doe"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"product"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Laptop"</span><span class="p">,</span><span class="w"> </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1200</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"product"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mouse"</span><span class="p">,</span><span class="w"> </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"102"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Jane Smith"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"product"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Laptop"</span><span class="p">,</span><span class="w"> </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1500</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"product"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Keyboard"</span><span class="p">,</span><span class="w"> </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>需求</strong>：查询订单中包含 <code class="language-plaintext highlighter-rouge">Laptop</code> 且价格大于 1300 的订单。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 elemMatch 和 andOperator 进行复杂嵌套条件查询</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
        <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"product"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">),</span>
        <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">1300</span><span class="o">)</span>
    <span class="o">)</span>
<span class="o">);</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"orders"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：这里的 <code class="language-plaintext highlighter-rouge">elemMatch</code> 用于匹配 <code class="language-plaintext highlighter-rouge">items</code> 数组中的某个元素，它必须同时满足 <code class="language-plaintext highlighter-rouge">product</code> 为 <code class="language-plaintext highlighter-rouge">Laptop</code> 且 <code class="language-plaintext highlighter-rouge">price</code> 大于 1300 的条件。</p>

<p>示例 5：<code class="language-plaintext highlighter-rouge">orOperator</code> + <code class="language-plaintext highlighter-rouge">elemMatch</code>（组合查询）</p>

<p>假设使用相同的 <code class="language-plaintext highlighter-rouge">orders</code> 集合：</p>

<p><strong>需求</strong>：查询订单中包含 <code class="language-plaintext highlighter-rouge">Laptop</code> 且价格大于 1300 或 <code class="language-plaintext highlighter-rouge">Mouse</code> 的订单。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 orOperator 和 elemMatch 进行组合查询</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">orOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span>
        <span class="k">new</span> <span class="nf">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
            <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"product"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">),</span>
            <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">1300</span><span class="o">)</span>
        <span class="o">)</span>
    <span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"product"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Mouse"</span><span class="o">))</span>
<span class="o">);</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"orders"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：在这里，使用了 <code class="language-plaintext highlighter-rouge">orOperator</code> 来表示两种情况之一：要么 <code class="language-plaintext highlighter-rouge">items</code> 中包含 <code class="language-plaintext highlighter-rouge">Laptop</code> 且价格大于 1300，要么 <code class="language-plaintext highlighter-rouge">items</code> 中包含 <code class="language-plaintext highlighter-rouge">Mouse</code>。这相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">OR</code> 逻辑。</p>

<p><strong>特别注意</strong></p>

<p>下面的 MongoDB 查询：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"$or"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"deleteStatus"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"deleteStatus"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$exists"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}],</span><span class="w">
  </span><span class="nl">"tenant_id"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"$or"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"speciality"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"生物学"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"number"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$gt"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">54</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>等效于以下 SQL 语句：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> 
<span class="k">FROM</span> <span class="n">co_common_test1</span> 
<span class="k">WHERE</span> 
  <span class="p">(</span><span class="n">deleteStatus</span> <span class="o">=</span> <span class="k">false</span> <span class="k">OR</span> <span class="n">deleteStatus</span> <span class="k">IS</span> <span class="k">NULL</span><span class="p">)</span>
  <span class="k">AND</span> <span class="n">tenant_id</span> <span class="o">=</span> <span class="s1">'16889087066967307206'</span>
  <span class="k">AND</span> <span class="p">(</span><span class="n">speciality</span> <span class="o">=</span> <span class="s1">'生物学'</span> <span class="k">OR</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">54</span><span class="p">);</span>
</code></pre></div></div>

<p>但是，在 MongoDB 中，一个文档内不能同时包含两个顶层的 <code class="language-plaintext highlighter-rouge">"$or"</code>，因为<strong>每个键必须是唯一的</strong>。如果你尝试这样做，后面的 <code class="language-plaintext highlighter-rouge">"$or"</code> 会覆盖前面的 <code class="language-plaintext highlighter-rouge">"$or"</code>，导致无法正确执行查询。</p>

<p>要解决这个问题并保持你想要的逻辑，可以使用一个顶层的 <code class="language-plaintext highlighter-rouge">"$and"</code> 来组合这两个 <code class="language-plaintext highlighter-rouge">"$or"</code> 逻辑。这是 MongoDB 语法的限制，必须使用 <code class="language-plaintext highlighter-rouge">$and</code> 来组合多个 <code class="language-plaintext highlighter-rouge">"$or"</code>。</p>

<p>可以将查询重构为：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"$or"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"deleteStatus"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"deleteStatus"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$exists"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}]</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"tenant_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"$or"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"speciality"</span><span class="p">:</span><span class="w"> </span><span class="s2">"生物学"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"number"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$gt"</span><span class="p">:</span><span class="w"> </span><span class="mi">54</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}]</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>这对应的 SQL 查询仍然是你期望的：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> 
<span class="k">FROM</span> <span class="n">co_common_test1</span> 
<span class="k">WHERE</span> 
  <span class="p">(</span><span class="n">deleteStatus</span> <span class="o">=</span> <span class="k">false</span> <span class="k">OR</span> <span class="n">deleteStatus</span> <span class="k">IS</span> <span class="k">NULL</span><span class="p">)</span>
  <span class="k">AND</span> <span class="n">tenant_id</span> <span class="o">=</span> <span class="s1">'16889087066967307206'</span>
  <span class="k">AND</span> <span class="p">(</span><span class="n">speciality</span> <span class="o">=</span> <span class="s1">'生物学'</span> <span class="k">OR</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">54</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>总结：</strong> 尽管 SQL 中不需要显式使用 <code class="language-plaintext highlighter-rouge">AND</code> 来组合多个条件，但在 MongoDB 中，必须使用 <code class="language-plaintext highlighter-rouge">"$and"</code> 来组合多个 <code class="language-plaintext highlighter-rouge">"$or"</code>，否则会遇到查询覆盖的问题。</p>

<h2 id="更新操作">更新操作</h2>

<p><strong><code class="language-plaintext highlighter-rouge">Update</code></strong>：</p>

<p><code class="language-plaintext highlighter-rouge">org.springframework.data.mongodb.core.query.Update</code> 是 Spring Data MongoDB 中用于执行数据库更新操作的核心类。它可以用于对 MongoDB 文档进行字段更新、增量修改、数组操作等。以下是一些 <code class="language-plaintext highlighter-rouge">Update</code> 类的常用方法，以及每个方法的用途和实例。</p>

<p><strong><code class="language-plaintext highlighter-rouge">set(String key, Object value)</code></strong> - 设置字段值</p>

<p>用于将指定字段的值更新为新值。如果字段不存在，会创建该字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>  <span class="c1">// 设置字段 "age" 的值为 30</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">unset(String key)</code></strong> - 移除字段</p>

<p>用于移除指定的字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">unset</span><span class="o">(</span><span class="s">"address"</span><span class="o">);</span>  <span class="c1">// 删除字段 "address"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">inc(String key, Number value)</code></strong> - 增加或减少字段值</p>

<p>对数值字段进行增量操作（加法）。如果字段不存在，它将创建该字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">inc</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>  <span class="c1">// 将 "age" 字段的值增加 2</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">push(String key, Object value)</code></strong> - 向数组字段追加元素</p>

<p>将一个元素添加到数组字段中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="s">"Java"</span><span class="o">);</span>  <span class="c1">// 在 "skills" 数组中添加 "Java"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">addToSet(String key, Object value)</code></strong> - 向数组添加唯一元素</p>

<p>如果数组字段中不存在该值，则添加该值（避免重复）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">addToSet</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="s">"Java"</span><span class="o">);</span>  <span class="c1">// 如果 "skills" 数组中不存在 "Java"，则添加</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">pull(String key, Object value)</code></strong> - 从数组中移除指定值</p>

<p>移除数组字段中等于指定值的元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">pull</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="s">"Java"</span><span class="o">);</span>  <span class="c1">// 从 "skills" 数组中移除 "Java"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">pullAll(String key, Object... values)</code></strong> - 从数组中移除多个值</p>

<p>从数组字段中移除多个指定值。</p>

<p><strong>实例</strong>：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">pullAll</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"Java"</span><span class="o">,</span> <span class="s">"Python"</span><span class="o">});</span>  <span class="c1">// 从 "skills" 数组中移除 "Java" 和 "Python"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">pop(String key, Update.Position position)</code></strong> - 从数组的开头或结尾移除元素</p>

<p>用于从数组的开头或结尾移除一个元素。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Update.Position.FIRST</code>：移除第一个元素</li>
  <li><code class="language-plaintext highlighter-rouge">Update.Position.LAST</code>：移除最后一个元素</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">pop</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="nc">Update</span><span class="o">.</span><span class="na">Position</span><span class="o">.</span><span class="na">LAST</span><span class="o">);</span>  <span class="c1">// 移除 "skills" 数组中的最后一个元素</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">rename(String oldName, String newName)</code></strong> - 重命名字段</p>

<p>将指定字段重命名为新名称。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">rename</span><span class="o">(</span><span class="s">"oldFieldName"</span><span class="o">,</span> <span class="s">"newFieldName"</span><span class="o">);</span>  <span class="c1">// 将字段 "oldFieldName" 重命名为 "newFieldName"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">mul(String key, Number factor)</code></strong> - 数值乘法更新</p>

<p>将指定字段的值乘以某个因子。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">mul</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mf">1.1</span><span class="o">);</span>  <span class="c1">// 将 "price" 字段的值乘以 1.1</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">min(String key, Object value)</code></strong> - 仅当新值小于当前值时进行更新</p>

<p>如果传入的新值比现有字段的值小，则更新该字段为新值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>  <span class="c1">// 仅当 "price" 小于 100 时，更新它为 100</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">max(String key, Object value)</code></strong> - 仅当新值大于当前值时进行更新</p>

<p>如果传入的新值比现有字段的值大，则更新该字段为新值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>  <span class="c1">// 仅当 "price" 大于 1000 时，更新它为 1000</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">currentDate(String key)</code></strong> - 设置字段为当前日期</p>

<p>将指定字段的值设置为当前日期时间。</p>

<p><strong>实例</strong>：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">currentDate</span><span class="o">(</span><span class="s">"lastModified"</span><span class="o">);</span>  <span class="c1">// 设置 "lastModified" 字段为当前时间</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">combine(Update... updates)</code></strong> - 组合多个 <code class="language-plaintext highlighter-rouge">Update</code> 对象</p>

<p>将多个 <code class="language-plaintext highlighter-rouge">Update</code> 对象组合成一个 <code class="language-plaintext highlighter-rouge">Update</code> 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"John"</span><span class="o">);</span>
<span class="nc">Update</span> <span class="n">update2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">inc</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="nc">Update</span> <span class="n">combinedUpdate</span> <span class="o">=</span> <span class="nc">Update</span><span class="o">.</span><span class="na">combine</span><span class="o">(</span><span class="n">update1</span><span class="o">,</span> <span class="n">update2</span><span class="o">);</span>  <span class="c1">// 将多个更新组合在一起</span>
</code></pre></div></div>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">UpdateResult</code></strong>：</p>

<p><code class="language-plaintext highlighter-rouge">updateFirst</code> 等更新方法的返回值类型为 <code class="language-plaintext highlighter-rouge">com.mongodb.client.result.UpdateResult</code>。<code class="language-plaintext highlighter-rouge">UpdateResult</code> 类用于表示更新操作的结果，并提供了一些方法来获取有关更新操作的详细信息。它包括以下一些常用方法：</p>

<p><code class="language-plaintext highlighter-rouge">UpdateResult</code> 常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getMatchedCount()</code></strong>:  返回匹配到的文档数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">UpdateResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">updateFirst</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">update</span><span class="o">,</span> <span class="nc">MyClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
   <span class="kt">long</span> <span class="n">matchedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getMatchedCount</span><span class="o">();</span>  <span class="c1">// 返回匹配到的文档数量</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getModifiedCount()</code></strong>:  返回实际被修改的文档数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kt">long</span> <span class="n">modifiedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getModifiedCount</span><span class="o">();</span>  <span class="c1">// 返回修改的文档数量</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">wasAcknowledged()</code></strong>:  检查更新操作是否被 MongoDB 确认。返回 <code class="language-plaintext highlighter-rouge">true</code> 表示操作已确认。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kt">boolean</span> <span class="n">isAcknowledged</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">();</span>  <span class="c1">// 检查操作是否被确认</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getUpsertedId()</code></strong>:  返回因为 <code class="language-plaintext highlighter-rouge">upsert</code> 操作插入的文档的 <code class="language-plaintext highlighter-rouge">_id</code>，如果操作不是 <code class="language-plaintext highlighter-rouge">upsert</code>，则返回 <code class="language-plaintext highlighter-rouge">null</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">BsonValue</span> <span class="n">upsertedId</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getUpsertedId</span><span class="o">();</span>  <span class="c1">// 获取通过 upsert 插入的文档 ID</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">upsertedId</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Upserted ID: "</span> <span class="o">+</span> <span class="n">upsertedId</span><span class="o">);</span>
   <span class="o">}</span>
</code></pre></div></div>

<p>结合 <code class="language-plaintext highlighter-rouge">updateFirst</code> 使用的完整示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">));</span>
<span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>

<span class="c1">// 执行更新操作</span>
<span class="nc">UpdateResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">updateFirst</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">update</span><span class="o">,</span> <span class="nc">MyClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 获取更新结果信息</span>
<span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Matched count: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">getMatchedCount</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Modified count: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">getModifiedCount</span><span class="o">());</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getUpsertedId</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Upserted ID: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">getUpsertedId</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Update was not acknowledged by MongoDB"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getMatchedCount()</code>：匹配的文档数量。</li>
  <li><code class="language-plaintext highlighter-rouge">getModifiedCount()</code>：修改的文档数量。</li>
  <li><code class="language-plaintext highlighter-rouge">wasAcknowledged()</code>：检查操作是否被 MongoDB 确认。</li>
  <li><code class="language-plaintext highlighter-rouge">getUpsertedId()</code>：如果进行了 <code class="language-plaintext highlighter-rouge">upsert</code> 操作并插入新文档，则返回该文档的 <code class="language-plaintext highlighter-rouge">_id</code>。</li>
</ul>

<h2 id="删除操作">删除操作</h2>

<p><code class="language-plaintext highlighter-rouge">com.mongodb.client.result.DeleteResult</code> 是 MongoDB 中删除操作的结果对象，它提供了方法来检查删除操作的执行情况和结果。它和 <code class="language-plaintext highlighter-rouge">UpdateResult</code> 类似，主要用于查看删除操作的结果和影响。</p>

<p><code class="language-plaintext highlighter-rouge">DeleteResult</code> 常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getDeletedCount()</code></strong>:  返回被删除的文档数。该方法用于了解删除操作影响了多少个文档。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">long</span> <span class="n">deletedCount</span> <span class="o">=</span> <span class="n">deleteResult</span><span class="o">.</span><span class="na">getDeletedCount</span><span class="o">();</span>  <span class="c1">// 获取被删除的文档数量</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">wasAcknowledged()</code></strong>:  检查删除操作是否被 MongoDB 确认。返回 <code class="language-plaintext highlighter-rouge">true</code> 表示删除操作已确认，<code class="language-plaintext highlighter-rouge">false</code> 表示操作未被确认。这对于确认操作是否成功完成是非常有用的。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">boolean</span> <span class="n">isAcknowledged</span> <span class="o">=</span> <span class="n">deleteResult</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">();</span>  <span class="c1">// 检查操作是否被确认</span>
</code></pre></div></div>

<p>使用 <code class="language-plaintext highlighter-rouge">DeleteResult</code> 的完整示例</p>

<p>假设你想从 MongoDB 中删除某个集合中的记录，可以通过 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 执行删除操作，并使用 <code class="language-plaintext highlighter-rouge">DeleteResult</code> 来获取结果。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 定义查询条件</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">));</span>

<span class="c1">// 执行删除操作</span>
<span class="nc">DeleteResult</span> <span class="n">deleteResult</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">MyClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 检查删除操作是否被 MongoDB 确认</span>
<span class="k">if</span> <span class="o">(</span><span class="n">deleteResult</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">// 获取被删除的文档数量</span>
    <span class="kt">long</span> <span class="n">deletedCount</span> <span class="o">=</span> <span class="n">deleteResult</span><span class="o">.</span><span class="na">getDeletedCount</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Deleted count: "</span> <span class="o">+</span> <span class="n">deletedCount</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Delete operation was not acknowledged by MongoDB"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="批量操作">批量操作</h2>

<p><code class="language-plaintext highlighter-rouge">BulkOperations</code> 是 Spring Data MongoDB 提供的用于批量执行 MongoDB 操作的接口。它允许你在一次操作中对多个文档执行插入、更新、删除等操作。使用批量操作不仅可以提高效率，还可以减少网络开销和数据库负载。</p>

<p>常用的 <code class="language-plaintext highlighter-rouge">BulkOperations</code> 方法及其作用</p>

<p><strong><code class="language-plaintext highlighter-rouge">insert(List&lt;?&gt; documents)</code></strong>：插入多个文档到集合中。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyDocument</span><span class="o">&gt;</span> <span class="n">documents</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc1"</span><span class="o">),</span> <span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc2"</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">documents</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">updateOne(Query query, Update update)</code></strong>：根据查询条件更新单个文档。相当于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">updateOne</code> 操作。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">));</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">updateMulti(Query query, Update update)</code></strong>: 根据查询条件更新多个文档。相当于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">updateMany</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">updateMulti</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"status"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"active"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"status"</span><span class="o">,</span> <span class="s">"inactive"</span><span class="o">));</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">remove(Query query)</code></strong>：根据查询条件删除文档。相当于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">deleteMany</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">18</span><span class="o">)));</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">replaceOne(Query query, Object replacement)</code></strong>: 查找并替换符合条件的单个文档。类似于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">replaceOne</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MyDocument</span> <span class="n">replacement</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"newDocument"</span><span class="o">);</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">replaceOne</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"OldDocument"</span><span class="o">)),</span> <span class="n">replacement</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">upsert(Query query, Update update)</code></strong>：如果符合条件的文档存在，则更新；如果不存在，则插入新文档。相当于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">upsert</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">25</span><span class="o">));</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">execute()</code></strong>：执行批量操作。执行所有在批量操作中添加的插入、更新、删除等操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BulkWriteResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">bulkOps</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">find(Query query)</code></strong>：根据查询条件查找文档，通常用于后续的 <code class="language-plaintext highlighter-rouge">update</code> 或 <code class="language-plaintext highlighter-rouge">remove</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">30</span><span class="o">)));</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BulkOperations</code> 示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建 BulkOperations 实例</span>
<span class="nc">BulkOperations</span> <span class="n">bulkOps</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">bulkOps</span><span class="o">(</span><span class="nc">BulkOperations</span><span class="o">.</span><span class="na">BulkMode</span><span class="o">.</span><span class="na">ORDERED</span><span class="o">,</span> <span class="nc">MyDocument</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 插入多个文档</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyDocument</span><span class="o">&gt;</span> <span class="n">documents</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc1"</span><span class="o">),</span> <span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc2"</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">documents</span><span class="o">);</span>

<span class="c1">// 更新单个文档</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">));</span>

<span class="c1">// 删除符合条件的文档</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"status"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"inactive"</span><span class="o">)));</span>

<span class="c1">// 执行所有操作</span>
<span class="nc">BulkWriteResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">bulkOps</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</code></pre></div></div>

<p>执行模式</p>
<ul>
  <li><strong>ORDERED</strong>: 批量操作按顺序执行。如果某个操作失败，后续操作将不执行。</li>
  <li><strong>UNORDERED</strong>: 批量操作可以并行执行，即使某个操作失败，其他操作仍会继续执行。</li>
</ul>

<p>常用场景</p>
<ul>
  <li><strong>批量插入</strong>: 大量文档插入时，使用 <code class="language-plaintext highlighter-rouge">bulkOps.insert()</code> 提高性能。</li>
  <li><strong>批量更新</strong>: 需要对多个文档进行同一条件更新时，使用 <code class="language-plaintext highlighter-rouge">bulkOps.updateMulti()</code>。</li>
  <li><strong>批量删除</strong>: 批量删除符合条件的文档时，使用 <code class="language-plaintext highlighter-rouge">bulkOps.remove()</code>。</li>
  <li><strong>高效处理</strong>: 当需要执行多个操作时（如更新和删除），可以通过批量操作一次性提交。</li>
</ul>

<p>通过 <code class="language-plaintext highlighter-rouge">BulkOperations</code>，可以将多种操作打包成一次请求，大幅减少与数据库的交互次数，提升操作效率。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">BulkWriteResult</code> 是 MongoDB 批量操作（<code class="language-plaintext highlighter-rouge">BulkOperations</code>）执行后的结果对象。它用于获取批量写操作的执行结果，提供了插入、更新、删除等操作的统计信息。</p>

<p><code class="language-plaintext highlighter-rouge">BulkWriteResult</code> 常用方法及其作用</p>

<p><strong><code class="language-plaintext highlighter-rouge">getInsertedCount()</code></strong>：返回批量操作中成功插入文档的数量。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">insertedCount</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getInsertedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"插入的文档数量: "</span> <span class="o">+</span> <span class="n">insertedCount</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getMatchedCount()</code></strong>：返回批量更新操作中匹配的文档数量，即符合查询条件的文档数量，不论是否有实际更新发生。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">matchedCount</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getMatchedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"匹配的文档数量: "</span> <span class="o">+</span> <span class="n">matchedCount</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getModifiedCount()</code></strong>：返回批量更新操作中实际被更新的文档数量。注意，只有当文档内容发生改变时，这个值才会增加。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">modifiedCount</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getModifiedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实际更新的文档数量: "</span> <span class="o">+</span> <span class="n">modifiedCount</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getDeletedCount()</code></strong>：返回批量操作中成功删除的文档数量。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">deletedCount</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getDeletedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除的文档数量: "</span> <span class="o">+</span> <span class="n">deletedCount</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getUpserts()</code></strong>：返回批量操作中发生 <code class="language-plaintext highlighter-rouge">upsert</code>（更新插入）的文档信息列表。<code class="language-plaintext highlighter-rouge">upsert</code> 是指如果查询没有匹配到文档，则插入新文档。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">BulkWriteUpsert</span><span class="o">&gt;</span> <span class="n">upserts</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getUpserts</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">BulkWriteUpsert</span> <span class="n">upsert</span> <span class="o">:</span> <span class="n">upserts</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Upserted Document _id: "</span> <span class="o">+</span> <span class="n">upsert</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getInsertedIds()</code></strong>：返回批量操作中成功插入的文档 <code class="language-plaintext highlighter-rouge">_id</code> 列表。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">BsonValue</span><span class="o">&gt;</span> <span class="n">insertedIds</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getInsertedIds</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">BsonValue</span> <span class="n">id</span> <span class="o">:</span> <span class="n">insertedIds</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"插入的文档 _id: "</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">wasAcknowledged()</code></strong>：返回该批量操作是否被 MongoDB 成功确认。通常在 <code class="language-plaintext highlighter-rouge">UNACKNOWLEDGED</code> 模式下，它会返回 <code class="language-plaintext highlighter-rouge">false</code>。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">acknowledged</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(</span><span class="n">acknowledged</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"批量操作已被确认"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"批量操作未被确认"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>示例</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建 BulkOperations 实例</span>
<span class="nc">BulkOperations</span> <span class="n">bulkOps</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">bulkOps</span><span class="o">(</span><span class="nc">BulkOperations</span><span class="o">.</span><span class="na">BulkMode</span><span class="o">.</span><span class="na">ORDERED</span><span class="o">,</span> <span class="nc">MyDocument</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 添加批量操作</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc1"</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"status"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"inactive"</span><span class="o">)));</span>

<span class="c1">// 执行批量操作并获取结果</span>
<span class="nc">BulkWriteResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">bulkOps</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>

<span class="c1">// 获取插入的文档数量</span>
<span class="kt">int</span> <span class="n">insertedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getInsertedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"插入的文档数量: "</span> <span class="o">+</span> <span class="n">insertedCount</span><span class="o">);</span>

<span class="c1">// 获取更新匹配的文档数量</span>
<span class="kt">int</span> <span class="n">matchedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getMatchedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"匹配的文档数量: "</span> <span class="o">+</span> <span class="n">matchedCount</span><span class="o">);</span>

<span class="c1">// 获取实际更新的文档数量</span>
<span class="kt">int</span> <span class="n">modifiedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getModifiedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实际更新的文档数量: "</span> <span class="o">+</span> <span class="n">modifiedCount</span><span class="o">);</span>

<span class="c1">// 获取删除的文档数量</span>
<span class="kt">int</span> <span class="n">deletedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getDeletedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除的文档数量: "</span> <span class="o">+</span> <span class="n">deletedCount</span><span class="o">);</span>

<span class="c1">// 检查批量操作是否被确认</span>
<span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"批量操作已成功确认"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"批量操作未被确认"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>常用场景</strong></p>

<ul>
  <li><strong>批量插入后统计</strong>: 在执行大批量数据插入后，使用 <code class="language-plaintext highlighter-rouge">getInsertedCount()</code> 获取插入的总数。</li>
  <li><strong>批量更新后检查</strong>: 在进行批量更新时，通过 <code class="language-plaintext highlighter-rouge">getMatchedCount()</code> 和 <code class="language-plaintext highlighter-rouge">getModifiedCount()</code> 确认有多少文档被匹配和实际修改。</li>
  <li><strong>批量删除后确认</strong>: 使用 <code class="language-plaintext highlighter-rouge">getDeletedCount()</code> 确认成功删除的文档数量。</li>
  <li><strong>检查 <code class="language-plaintext highlighter-rouge">upsert</code> 操作</strong>: 使用 <code class="language-plaintext highlighter-rouge">getUpserts()</code> 获取执行了 <code class="language-plaintext highlighter-rouge">upsert</code> 的文档信息。</li>
</ul>

<h2 id="排序">排序</h2>

<p><code class="language-plaintext highlighter-rouge">org.springframework.data.domain.Sort</code> 是 Spring Data 中用于排序查询结果的类，它封装了排序逻辑并用于指定查询时的排序规则。可以使用 <code class="language-plaintext highlighter-rouge">Sort</code> 来按照指定字段升序或降序排列数据，通常与分页（<code class="language-plaintext highlighter-rouge">Pageable</code>）和查询（<code class="language-plaintext highlighter-rouge">Query</code>）配合使用。</p>

<p><code class="language-plaintext highlighter-rouge">Sort</code> 的作用是定义数据库查询的排序方式，指定某个字段按升序或降序排列。你可以基于多个字段进行排序，甚至在不同字段上指定不同的排序方向（升序或降序）。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.by(String... properties)</code></strong>：根据属性名生成排序对象，默认是升序排序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"age"</span><span class="o">);</span>  <span class="c1">// 按 name 和 age 字段升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.by(Sort.Order... orders)</code></strong>：根据多个 <code class="language-plaintext highlighter-rouge">Sort.Order</code> 对象创建排序对象，每个字段可以自定义升序或降序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span>
   <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span>      <span class="c1">// 按 name 升序</span>
   <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span>       <span class="c1">// 按 age 降序</span>
<span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.by(List&lt;Sort.Order&gt; orders)</code></strong>：使用 <code class="language-plaintext highlighter-rouge">List&lt;Sort.Order&gt;</code> 对象创建排序规则。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">&gt;</span> <span class="n">orders</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
   <span class="k">new</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">),</span>
   <span class="k">new</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"age"</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="n">orders</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.Order.asc(String property)</code></strong>：创建按指定字段升序排序的 <code class="language-plaintext highlighter-rouge">Order</code> 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>  <span class="c1">// 按 name 升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.Order.desc(String property)</code></strong>：创建按指定字段降序排序的 <code class="language-plaintext highlighter-rouge">Order</code> 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span>  <span class="c1">// 按 age 降序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.with(Sort.Direction direction, String... properties)</code></strong>：指定排序方向和多个字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">,</span> <span class="s">"age"</span><span class="o">);</span>  <span class="c1">// 按 name 和 age 升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">and(Sort sort)</code></strong>：将两个 <code class="language-plaintext highlighter-rouge">Sort</code> 对象组合，等同于 SQL 中多个字段排序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort1</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
<span class="nc">Sort</span> <span class="n">sort2</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span>
<span class="nc">Sort</span> <span class="n">combinedSort</span> <span class="o">=</span> <span class="n">sort1</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">sort2</span><span class="o">);</span>  <span class="c1">// 先按 name 升序，然后按 age 升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getOrderFor(String property)</code></strong>：获取指定属性的排序规则。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
<span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">sort</span><span class="o">.</span><span class="na">getOrderFor</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getDirection</span><span class="o">());</span>  <span class="c1">// 输出: ASC</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">descending()</code></strong>：转换当前排序对象为降序排序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">descending</span><span class="o">();</span>  <span class="c1">// 按 name 降序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">ascending()</code></strong>：转换当前排序对象为升序排序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">ascending</span><span class="o">();</span>  <span class="c1">// 按 name 升序排序</span>
</code></pre></div></div>

<p><strong>常用字段</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.Direction</code></strong>: 枚举类，表示排序方向，有两个可能的值：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ASC</code>（升序）</li>
  <li><code class="language-plaintext highlighter-rouge">DESC</code>（降序）</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">);</span>  <span class="c1">// 按 name 字段升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.Order</code></strong>: 封装了排序规则的对象，可以指定排序方向、字段和忽略大小写等参数。常用字段:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">property</code>：要排序的字段名。</li>
  <li><code class="language-plaintext highlighter-rouge">direction</code>：排序方向，<code class="language-plaintext highlighter-rouge">ASC</code> 或 <code class="language-plaintext highlighter-rouge">DESC</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">ignoreCase</code>：是否忽略大小写。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>示例</strong></p>

<p>单字段排序：按 <code class="language-plaintext highlighter-rouge">name</code> 升序排序:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">);</span>
</code></pre></div></div>

<p>多字段排序：按 <code class="language-plaintext highlighter-rouge">name</code> 升序、<code class="language-plaintext highlighter-rouge">age</code> 降序排序:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span>
    <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span>
    <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span>
<span class="o">);</span>
</code></pre></div></div>

<p>与分页结合</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
<span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="分页">分页</h2>

<p>在 Spring Data 中，分页查询是非常常见的功能。<code class="language-plaintext highlighter-rouge">PageRequest</code> 和 <code class="language-plaintext highlighter-rouge">Pageable</code> 是用于定义分页和排序的核心类，通常与 <code class="language-plaintext highlighter-rouge">Page</code> 和 <code class="language-plaintext highlighter-rouge">Slice</code> 类一起使用来获取分页后的数据结果。</p>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest</code></strong>
<code class="language-plaintext highlighter-rouge">PageRequest</code> 是 <code class="language-plaintext highlighter-rouge">Pageable</code> 的实现类，用于创建分页请求对象，包含分页和排序的信息。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest.of(int page, int size)</code></strong>：创建一个分页请求对象，指定页码和每页大小。<strong>参数</strong>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">page</code>: 页码（从 0 开始）。</li>
  <li><code class="language-plaintext highlighter-rouge">size</code>: 每页的记录数。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span> <span class="c1">// 第 1 页，每页 10 条记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest.of(int page, int size, Sort sort)</code></strong>：创建带排序功能的分页请求。<strong>参数</strong>:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">page</code>: 页码。</li>
  <li><code class="language-plaintext highlighter-rouge">size</code>: 每页大小。</li>
  <li><code class="language-plaintext highlighter-rouge">sort</code>: 排序规则。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">ascending</span><span class="o">());</span> <span class="c1">// 第 1 页，按 name 升序，每页 10 条记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest.previous()</code></strong>：返回上一页的 <code class="language-plaintext highlighter-rouge">PageRequest</code> 对象，如果是第一页则返回第一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">previousPage</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">previous</span><span class="o">();</span> <span class="c1">// 获取上一页的分页信息</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest.next()</code></strong>：返回下一页的 <code class="language-plaintext highlighter-rouge">PageRequest</code> 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">nextPage</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">next</span><span class="o">();</span> <span class="c1">// 获取下一页的分页信息</span>
</code></pre></div></div>

<p>常用字段
<code class="language-plaintext highlighter-rouge">PageRequest</code> 主要实现自 <code class="language-plaintext highlighter-rouge">Pageable</code>，常用的字段来自 <code class="language-plaintext highlighter-rouge">Pageable</code> 接口：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">page</code>: 页码（从 0 开始）。</li>
  <li><code class="language-plaintext highlighter-rouge">size</code>: 每页的大小。</li>
  <li><code class="language-plaintext highlighter-rouge">sort</code>: 排序规则（<code class="language-plaintext highlighter-rouge">Sort</code> 对象）。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">Pageable</code></strong>
<code class="language-plaintext highlighter-rouge">Pageable</code> 是分页信息的接口，用于定义分页和排序规则。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getPageNumber()</code></strong>：返回当前页码（从 0 开始）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">pageNumber</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">getPageNumber</span><span class="o">();</span> <span class="c1">// 获取当前页码</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getPageSize()</code></strong>：返回每页的大小。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">pageSize</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">getPageSize</span><span class="o">();</span> <span class="c1">// 获取每页记录数</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getOffset()</code></strong>：返回从哪条记录开始查询（偏移量）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">getOffset</span><span class="o">();</span> <span class="c1">// 获取查询的起始记录索引</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getSort()</code></strong>：返回当前的排序规则。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">getSort</span><span class="o">();</span> <span class="c1">// 获取排序规则</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isPaged()</code></strong>：检查是否分页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">paged</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">isPaged</span><span class="o">();</span> <span class="c1">// 判断是否分页</span>
</code></pre></div></div>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">Page</code></strong>
<code class="language-plaintext highlighter-rouge">Page</code> 是一个接口，用于封装分页结果集，通常包含分页的元信息（如总页数、总记录数、当前页）以及数据列表。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getContent()</code></strong>：返回当前页的数据内容。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span> <span class="c1">// 获取当前页的用户列表</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getTotalElements()</code></strong>：返回总记录数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">total</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalElements</span><span class="o">();</span> <span class="c1">// 获取总记录数</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getTotalPages()</code></strong>：返回总页数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">totalPages</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalPages</span><span class="o">();</span> <span class="c1">// 获取总页数</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getNumber()</code></strong>：返回当前页码（从 0 开始）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">pageNumber</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getNumber</span><span class="o">();</span> <span class="c1">// 获取当前页码</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getSize()</code></strong>：返回每页大小。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="c1">// 获取每页记录数</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">hasNext()</code></strong>：判断是否有下一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">hasNext</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="c1">// 判断是否有下一页</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">hasPrevious()</code></strong>：判断是否有上一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">hasPrevious</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">hasPrevious</span><span class="o">();</span> <span class="c1">// 判断是否有上一页</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isFirst()</code></strong>：判断是否为第一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">isFirst</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">isFirst</span><span class="o">();</span> <span class="c1">// 判断是否是第一页</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isLast()</code></strong>：判断是否为最后一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">isLast</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">isLast</span><span class="o">();</span> <span class="c1">// 判断是否是最后一页</span>
</code></pre></div></div>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">Slice</code></strong>
<code class="language-plaintext highlighter-rouge">Slice</code> 是分页的一种轻量级版本，它不包含总页数和总记录数的信息，只提供当前页的数据和是否存在下一页的标志。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getContent()</code></strong>：返回当前页的数据内容。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">slice</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span> <span class="c1">// 获取当前页的用户列表</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">hasNext()</code></strong>：判断是否有下一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">hasNext</span> <span class="o">=</span> <span class="n">slice</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="c1">// 判断是否有下一页</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getNumber()</code></strong>：返回当前页码。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">pageNumber</span> <span class="o">=</span> <span class="n">slice</span><span class="o">.</span><span class="na">getNumber</span><span class="o">();</span> <span class="c1">// 获取当前页码</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getSize()</code></strong>：返回每页大小。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">slice</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="c1">// 获取每页记录数</span>
</code></pre></div></div>

<hr />

<p>实例代码</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.domain.Page</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.PageRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.Pageable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.Sort</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">)</span> <span class="o">{</span>
   <span class="k">this</span><span class="o">.</span><span class="na">userRepository</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 分页查询</span>
    <span class="kd">public</span> <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsersByPage</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">ascending</span><span class="o">());</span>
   <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 获取分页结果</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printPagedUsers</span><span class="o">()</span> <span class="o">{</span>
   <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">page</span> <span class="o">=</span> <span class="n">getUsersByPage</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>

   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Total Elements: "</span> <span class="o">+</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalElements</span><span class="o">());</span> <span class="c1">// 总记录数</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Total Pages: "</span> <span class="o">+</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalPages</span><span class="o">());</span>  <span class="c1">// 总页数</span>
   <span class="k">for</span> <span class="o">(</span><span class="nc">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">page</span><span class="o">.</span><span class="na">getContent</span><span class="o">())</span> <span class="o">{</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
   <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>总结</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Pageable</code> 用于定义分页和排序的逻辑。</li>
  <li><code class="language-plaintext highlighter-rouge">PageRequest</code> 是 <code class="language-plaintext highlighter-rouge">Pageable</code> 的具体实现类，帮助我们创建分页和排序请求。</li>
  <li><code class="language-plaintext highlighter-rouge">Page</code> 接口封装了分页后的数据和分页信息（总记录数、总页数等）。</li>
  <li><code class="language-plaintext highlighter-rouge">Slice</code> 类提供类似分页的功能，但不包含总页数等信息，适用于更轻量级的分页场景。</li>
</ul>

<p>这些类一起使用，可以很方便地在 Spring Data 中实现分页查询功能。</p>

<h2 id="聚合">聚合</h2>

<p><code class="language-plaintext highlighter-rouge">Aggregation</code> 是 Spring Data MongoDB 中用于执行复杂数据处理操作的一个工具，类似于 MongoDB 的 <code class="language-plaintext highlighter-rouge">aggregate</code> 操作。它允许对文档执行聚合查询，例如分组、过滤、排序、投影、联表查询等。下面是聚合操作中常用的类、方法、字段的详细解释与实例。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation</code> 类常用方法：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.newAggregation(AggregationOperation... operations)</code></strong>：用于创建聚合管道，接受一系列的 <code class="language-plaintext highlighter-rouge">AggregationOperation</code> 作为参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">25</span><span class="o">)),</span>  <span class="c1">// 匹配 age 大于 25 的文档</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="na">count</span><span class="o">().</span><span class="na">as</span><span class="o">(</span><span class="s">"totalEmployees"</span><span class="o">),</span>  <span class="c1">// 按 department 分组并统计每组员工数</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"totalEmployees"</span><span class="o">))</span>  <span class="c1">// 按 totalEmployees 降序排序</span>
<span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.match(Criteria criteria)</code></strong>：用于定义筛选条件，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">WHERE</code> 语句。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">matchOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gte</span><span class="o">(</span><span class="mi">30</span><span class="o">));</span>  <span class="c1">// 筛选 age 大于等于 30 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.group(String... fields)</code></strong>：按字段分组，类似 SQL 的 <code class="language-plaintext highlighter-rouge">GROUP BY</code>，并且可以在分组后进行数据计算。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">groupOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"department"</span><span class="o">)</span>  <span class="c1">// 按 department 字段分组</span>
    <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"salary"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalSalary"</span><span class="o">)</span>  <span class="c1">// 计算每个部门的薪资总和</span>
    <span class="o">.</span><span class="na">avg</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"averageAge"</span><span class="o">);</span>  <span class="c1">// 计算每个部门的平均年龄</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">fields</code>可以为空，也可以是多个字段。常见的聚合方法有：<code class="language-plaintext highlighter-rouge">count</code>、<code class="language-plaintext highlighter-rouge">sum</code>、<code class="language-plaintext highlighter-rouge">avg</code>、<code class="language-plaintext highlighter-rouge">min</code>、<code class="language-plaintext highlighter-rouge">max</code>。</p>

<p>对于多字段分组，返回的结果通常是一个包含分组键和聚合结果的文档列表。每个文档代表一个分组，包含所分组的字段及其对应的聚合结果。以下是一个示例来说明这种结构：</p>

<p><strong>示例场景</strong>
假设有一个集合存储用户信息，其中有 <code class="language-plaintext highlighter-rouge">gender</code>（性别）、<code class="language-plaintext highlighter-rouge">department</code>（部门）和 <code class="language-plaintext highlighter-rouge">age</code>（年龄）等字段。你希望按 <code class="language-plaintext highlighter-rouge">gender</code> 和 <code class="language-plaintext highlighter-rouge">department</code> 分组，并计算每组的平均年龄。</p>

<p><strong>MongoDB 聚合查询</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"gender"</span><span class="o">,</span> <span class="s">"department"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">avg</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"averageAge"</span><span class="o">)</span>
<span class="o">);</span>
</code></pre></div></div>

<p>假设你的集合中有以下数据：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"male"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IT"</span><span class="p">,</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"male"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IT"</span><span class="p">,</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">35</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">28</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">32</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>经过聚合后，返回的结果可能如下所示：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"male"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IT"</span><span class="p">,</span><span class="w"> </span><span class="nl">"averageAge"</span><span class="p">:</span><span class="w"> </span><span class="mf">32.5</span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w"> </span><span class="nl">"averageAge"</span><span class="p">:</span><span class="w"> </span><span class="mf">30.0</span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>每个文档中的 <code class="language-plaintext highlighter-rouge">_id</code> 字段包含了分组字段（如 <code class="language-plaintext highlighter-rouge">gender</code> 和 <code class="language-plaintext highlighter-rouge">department</code>）。</li>
  <li><code class="language-plaintext highlighter-rouge">averageAge</code> 字段是对该分组的 <code class="language-plaintext highlighter-rouge">age</code> 字段进行计算的聚合结果。</li>
</ul>

<p>对于分组字段，有以下规则：</p>

<p><strong>没有设置分组依据</strong>：</p>

<ul>
  <li>MongoDB 会将所有文档视为一个整体进行全局聚合。</li>
  <li>返回的数据会包含一个 <code class="language-plaintext highlighter-rouge">_id</code> 字段，其值为 <code class="language-plaintext highlighter-rouge">null</code>。</li>
</ul>

<p><strong>有一个字段分组</strong>（如 <code class="language-plaintext highlighter-rouge">Aggregation.group("gender")</code>）：</p>

<ul>
  <li>返回的数据会多一个 <code class="language-plaintext highlighter-rouge">_id</code> 字段，其值为 <code class="language-plaintext highlighter-rouge">gender</code> 列的分组结果。</li>
  <li>这确实有点扭曲，因为它似乎是将分组的字段变成了一个额外的标识符。</li>
</ul>

<p><strong>有多个字段分组</strong>：</p>

<ul>
  <li>如果设置了多个分组依据，返回的数据将根据每个分组依据的值组织，而不再有额外的 <code class="language-plaintext highlighter-rouge">_id</code> 字段。</li>
  <li>每个分组依据将作为返回结果中的一列。</li>
</ul>

<p>如果只分组不聚合，MongoDB 会返回每个组的文档，效果同上。</p>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.project(String... fields)</code></strong>：用于选择输出的字段，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">SELECT</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">projectOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"department"</span><span class="o">,</span> <span class="s">"totalSalary"</span><span class="o">)</span>  <span class="c1">// 选择输出字段</span>
    <span class="o">.</span><span class="na">andExpression</span><span class="o">(</span><span class="s">"totalSalary / 1000"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"salaryInThousands"</span><span class="o">);</span>  <span class="c1">// 添加计算字段</span>
</code></pre></div></div>

<p>如果用类似：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">().</span><span class="na">and</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amount"</span><span class="o">);</span> <span class="c1">//别名</span>
</code></pre></div></div>

<p>的方式设置别名，那么原来的列<code class="language-plaintext highlighter-rouge">data.email</code>将不存在，原来的列会被替换为别名<code class="language-plaintext highlighter-rouge">amount</code>。</p>

<p>你可能会觉得：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">and</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amount"</span><span class="o">);</span> <span class="c1">//别名</span>
</code></pre></div></div>

<p>会保留原列，但实际上不会，它会将 <code class="language-plaintext highlighter-rouge">data.email</code> 替换为 <code class="language-plaintext highlighter-rouge">amount</code>。</p>

<p><strong>要保留原字段，则需要这样写：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">()</span>
    <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amount"</span><span class="o">);</span> <span class="c1">//别名</span>
	<span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">)</span> <span class="c1">// 原字段</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.sort(Sort sort)</code></strong>：对聚合结果进行排序，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">ORDER BY</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">sortOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"totalSalary"</span><span class="o">));</span>  <span class="c1">// 按 totalSalary 降序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.limit(long maxSize)</code></strong>：限制聚合结果的条数，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">LIMIT</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">limitOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>  <span class="c1">// 限制结果返回前 5 条</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.skip(long elementsToSkip)</code></strong>：跳过指定数量的文档，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">OFFSET</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">skipOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>  <span class="c1">// 跳过前 10 条记录</span>
</code></pre></div></div>

<hr />

<p><strong>常用类与方法：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">AggregationOperation</code></strong>：表示聚合操作的接口，每一个具体的聚合步骤都是它的实现类。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.match(Criteria criteria)</code>：用于筛选数据，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$match</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.group(String... fields)</code>：用于分组数据，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$group</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.project(String... fields)</code>：用于选择和转换数据，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$project</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.sort(Sort sort)</code>：用于排序数据，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$sort</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.limit(long maxSize)</code>：用于限制结果集的大小，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$limit</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.skip(long elementsToSkip)</code>：用于跳过指定数量的文档，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$skip</code> 操作。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">AggregationResults&lt;T&gt;</code></strong>：表示聚合操作的结果集，封装了返回的数据。</p>

<p><strong>常用方法：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">getMappedResults()</code></strong>：返回经过映射后的聚合结果列表。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">EmployeeStats</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"employees"</span><span class="o">,</span> <span class="nc">EmployeeStats</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">EmployeeStats</span><span class="o">&gt;</span> <span class="n">statsList</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">();</span>  <span class="c1">// 获取聚合结果</span>
</code></pre></div></div>

<hr />

<p><strong>实例代码：</strong></p>

<p>假设有一个员工集合 <code class="language-plaintext highlighter-rouge">employees</code>，结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
  </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">5000</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>下面是一个完整的聚合操作实例，查询年龄大于 25 岁的员工，按部门分组统计每个部门的总薪资，并按总薪资降序排序，只返回前 3 个部门。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建匹配操作，筛选出 age &gt; 25 的文档</span>
<span class="nc">AggregationOperation</span> <span class="n">match</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">25</span><span class="o">));</span>

<span class="c1">// 创建分组操作，按 department 字段分组并计算总薪资</span>
<span class="nc">AggregationOperation</span> <span class="n">group</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"department"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"salary"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalSalary"</span><span class="o">);</span>

<span class="c1">// 创建排序操作，按 totalSalary 降序排序</span>
<span class="nc">AggregationOperation</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"totalSalary"</span><span class="o">));</span>

<span class="c1">// 创建限制操作，只返回前 3 条结果</span>
<span class="nc">AggregationOperation</span> <span class="n">limit</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>

<span class="c1">// 创建聚合对象，将所有操作串联</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">match</span><span class="o">,</span> <span class="n">group</span><span class="o">,</span> <span class="n">sort</span><span class="o">,</span> <span class="n">limit</span><span class="o">);</span>

<span class="c1">// 执行聚合查询</span>
<span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">DepartmentStats</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"employees"</span><span class="o">,</span> <span class="nc">DepartmentStats</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 获取并输出聚合结果</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">DepartmentStats</span><span class="o">&gt;</span> <span class="n">departmentStats</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">();</span>
<span class="n">departmentStats</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">stat</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stat</span><span class="o">.</span><span class="na">getDepartment</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">stat</span><span class="o">.</span><span class="na">getTotalSalary</span><span class="o">()));</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">DepartmentStats</code> 是一个映射聚合结果的类，它包含 <code class="language-plaintext highlighter-rouge">department</code> 和 <code class="language-plaintext highlighter-rouge">totalSalary</code> 两个字段，用来接收分组后的结果。</p>

<h2 id="投影">投影</h2>

<p>投影是在 MongoDB 中用于控制查询结果中返回哪些字段的操作，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">SELECT</code> 子句。通过投影，您可以只选择您关心的字段，从而减少传输的数据量，提高查询效率。</p>

<p>在 Spring Data MongoDB 中，投影操作主要通过 <code class="language-plaintext highlighter-rouge">Aggregation.project()</code> 方法来实现，此外，在简单查询中也可以通过 <code class="language-plaintext highlighter-rouge">Query.fields()</code> 方法实现。</p>

<hr />

<p><strong>投影操作相关类与方法：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.project(String... fields)</code></strong>：用于选择并格式化输出的字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">projectOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"salary"</span><span class="o">)</span>  <span class="c1">// 选择输出 name 和 salary 字段</span>
    <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"dept"</span><span class="o">);</span>  <span class="c1">// 重命名 department 字段为 dept</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Query.fields()</code></strong>：在简单查询中指定需要返回的字段，不能重命名字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">25</span><span class="o">));</span>  <span class="c1">// 筛选条件</span>
<span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s">"salary"</span><span class="o">);</span>  <span class="c1">// 仅返回 name 和 salary 字段</span>
</code></pre></div></div>

<hr />

<p><strong>投影的作用与优势：</strong></p>

<ul>
  <li><strong>减少数据量</strong>：只选择需要的字段，减少了网络传输和存储的开销。</li>
  <li><strong>提高性能</strong>：减少了 MongoDB 返回的数据量，从而提高了查询性能。</li>
  <li><strong>自定义输出</strong>：可以通过 <code class="language-plaintext highlighter-rouge">Aggregation.project()</code> 进行字段重命名或计算新字段，提供更灵活的输出。</li>
</ul>

<hr />

<p><strong>实例代码：</strong></p>

<p>假设我们有一个员工集合 <code class="language-plaintext highlighter-rouge">employees</code>，结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
  </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">5000</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>下面是一个使用聚合投影的示例，查询所有员工的姓名和薪资，同时重命名 <code class="language-plaintext highlighter-rouge">department</code> 字段为 <code class="language-plaintext highlighter-rouge">dept</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建聚合投影操作</span>
<span class="nc">AggregationOperation</span> <span class="n">project</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"salary"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"dept"</span><span class="o">);</span>  <span class="c1">// 重命名 department 字段为 dept</span>

<span class="c1">// 创建聚合对象</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">project</span><span class="o">);</span>

<span class="c1">// 执行聚合查询</span>
<span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">EmployeeProjection</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"employees"</span><span class="o">,</span> <span class="nc">EmployeeProjection</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 获取并输出投影结果</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">EmployeeProjection</span><span class="o">&gt;</span> <span class="n">projections</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">();</span>
<span class="n">projections</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">proj</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Name: "</span> <span class="o">+</span> <span class="n">proj</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">", Salary: "</span> <span class="o">+</span> <span class="n">proj</span><span class="o">.</span><span class="na">getSalary</span><span class="o">()</span> <span class="o">+</span> <span class="s">", Department: "</span> <span class="o">+</span> <span class="n">proj</span><span class="o">.</span><span class="na">getDept</span><span class="o">()));</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">EmployeeProjection</code> 是一个用于映射投影结果的类，包含 <code class="language-plaintext highlighter-rouge">name</code>、<code class="language-plaintext highlighter-rouge">salary</code> 和 <code class="language-plaintext highlighter-rouge">dept</code> 三个字段，用来接收查询结果。</p>

<h2 id="日志">日志</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">root</span><span class="pi">:</span> <span class="s">${LOG_LEVE:info}</span>
    <span class="na">org.springframework.data.mongodb.core</span><span class="pi">:</span> <span class="s">DEBUG</span>
    <span class="na">org.mongodb.driver.protocol</span><span class="pi">:</span> <span class="s">WARN</span>
</code></pre></div></div>

<h2 id="数据转换">数据转换</h2>

<p><code class="language-plaintext highlighter-rouge">ConvertOperators</code> 是 Spring Data MongoDB 中用于字段类型转换的类。它提供了多个方法来将字段转换为不同的数据类型，常见的用法包括：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">ConvertOperators.Convert.convertValueOf(String field)</code></strong>：用于指定需要转换的字段。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">.to(String type)</code></strong>：指定目标数据类型，<code class="language-plaintext highlighter-rouge">double</code>、<code class="language-plaintext highlighter-rouge">string</code>、<code class="language-plaintext highlighter-rouge">objectId</code>、<code class="language-plaintext highlighter-rouge">bool</code>、<code class="language-plaintext highlighter-rouge">date</code>、<code class="language-plaintext highlighter-rouge">int</code>、<code class="language-plaintext highlighter-rouge">long</code>、<code class="language-plaintext highlighter-rouge">decimal</code>。</li>
</ol>

<p>使用示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="s">"fieldName"</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">);</span>
</code></pre></div></div>

<p>这种转换在聚合操作中非常有用，可以在数据处理时确保字段的类型符合预期，从而避免类型错误。</p>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建投影操作进行字段转换</span>
<span class="nc">ProjectionOperation</span> <span class="n">projectStage</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">).</span><span class="na">onErrorReturn</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">onNullReturn</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">as</span><span class="o">(</span><span class="s">"amount"</span><span class="o">);</span> <span class="c1">//别名</span>

<span class="c1">// 创建聚合操作</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
        <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">)),</span>
        <span class="n">projectStage</span><span class="o">,</span>
        <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">()</span>
                <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"amount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalAmount"</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">Map</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"co_common_test1"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getMappedResults</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="nc">Decimal128</span> <span class="n">totalAmount</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Decimal128</span><span class="o">)</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"totalAmount"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">totalAmount</span><span class="o">);</span>
</code></pre></div></div>

<p>这段代码的目的是在 MongoDB 中进行聚合操作，将 <code class="language-plaintext highlighter-rouge">data.email</code> 字段转换为十进制格式，并计算总和。具体步骤如下：</p>

<ol>
  <li><strong>投影操作 (<code class="language-plaintext highlighter-rouge">ProjectionOperation</code>)</strong>：
    <ul>
      <li>使用 <code class="language-plaintext highlighter-rouge">Aggregation.project("data.email")</code> 创建一个投影阶段，保留 <code class="language-plaintext highlighter-rouge">data.email</code> 字段。</li>
      <li>通过 <code class="language-plaintext highlighter-rouge">ConvertOperators.Convert.convertValueOf("data.email").to("decimal").as("amount")</code> 将 <code class="language-plaintext highlighter-rouge">data.email</code> 转换为十进制格式，并给它起一个别名 <code class="language-plaintext highlighter-rouge">amount</code>。</li>
    </ul>
  </li>
  <li><strong>聚合操作 (<code class="language-plaintext highlighter-rouge">Aggregation</code>)</strong>：
    <ul>
      <li>创建一个新的聚合管道，首先通过 <code class="language-plaintext highlighter-rouge">Aggregation.match(Criteria.where("data.email").exists(true))</code> 过滤出存在 <code class="language-plaintext highlighter-rouge">data.email</code> 字段的文档。</li>
      <li>然后应用之前定义的投影阶段。</li>
      <li>最后，使用 <code class="language-plaintext highlighter-rouge">Aggregation.group().sum("amount").as("totalAmount")</code> 聚合阶段，对转换后的 <code class="language-plaintext highlighter-rouge">amount</code> 字段进行求和，并将结果命名为 <code class="language-plaintext highlighter-rouge">totalAmount</code>。</li>
    </ul>
  </li>
  <li><strong>执行聚合</strong>：
    <ul>
      <li>使用 <code class="language-plaintext highlighter-rouge">mongoTemplate.aggregate()</code> 方法执行聚合操作，查询 <code class="language-plaintext highlighter-rouge">co_common_test1</code> 集合，并将结果映射为 <code class="language-plaintext highlighter-rouge">Map</code> 对象。</li>
      <li>从结果中获取 <code class="language-plaintext highlighter-rouge">totalAmount</code>，并打印出来。</li>
    </ul>
  </li>
</ol>

<p>这段代码主要实现了对 <code class="language-plaintext highlighter-rouge">data.email</code> 字段的类型转换和求和操作，目的是在处理数据时确保数值类型的正确性。</p>

<p>要对多个字段进行转换，可以在投影操作中连续添加多个转换。例如，假设你有 <code class="language-plaintext highlighter-rouge">data.email</code> 和 <code class="language-plaintext highlighter-rouge">data.amount</code> 两个字段要转换为十进制，可以如下操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建投影操作进行多个字段转换</span>
<span class="nc">ProjectionOperation</span> <span class="n">projectStage</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">()</span>
        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">)).</span><span class="na">as</span><span class="o">(</span><span class="s">"emailAmount"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="s">"data.amount"</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">)).</span><span class="na">as</span><span class="o">(</span><span class="s">"amountAmount"</span><span class="o">);</span> <span class="c1">// 别名</span>

<span class="c1">// 创建聚合操作</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
        <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="na">and</span><span class="o">(</span><span class="s">"data.amount"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">)),</span>
        <span class="n">projectStage</span><span class="o">,</span>
        <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">()</span>
                <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"emailAmount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalEmailAmount"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"amountAmount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalAmountAmount"</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">Map</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"co_common_test1"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getMappedResults</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="nc">Decimal128</span> <span class="n">totalEmailAmount</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Decimal128</span><span class="o">)</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"totalEmailAmount"</span><span class="o">);</span>
<span class="nc">Decimal128</span> <span class="n">totalAmountAmount</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Decimal128</span><span class="o">)</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"totalAmountAmount"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">totalEmailAmount</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">totalAmountAmount</span><span class="o">);</span>
</code></pre></div></div>

<p>在这个示例中：</p>

<ol>
  <li><strong>投影操作 (<code class="language-plaintext highlighter-rouge">ProjectionOperation</code>)</strong>：
    <ul>
      <li>使用 <code class="language-plaintext highlighter-rouge">Aggregation.project()</code>，通过 <code class="language-plaintext highlighter-rouge">and()</code> 方法添加多个字段的转换。</li>
      <li>每个字段的转换都使用 <code class="language-plaintext highlighter-rouge">ConvertOperators.Convert.convertValueOf()</code> 方法，并给它们起不同的别名。</li>
    </ul>
  </li>
  <li><strong>聚合操作</strong>：
    <ul>
      <li>通过 <code class="language-plaintext highlighter-rouge">Aggregation.match()</code> 过滤出存在这两个字段的文档。</li>
      <li>在聚合阶段，分别对转换后的 <code class="language-plaintext highlighter-rouge">emailAmount</code> 和 <code class="language-plaintext highlighter-rouge">amountAmount</code> 字段进行求和。</li>
    </ul>
  </li>
</ol>

<p>这样可以轻松处理多个字段的转换和聚合。</p>

<p>这样打印的值是科学计数法，如果需要打印普通值，则需要使用：<code class="language-plaintext highlighter-rouge">totalAmount.bigDecimalValue().toPlainString()</code>。</p>

<h2 id="专有document与map的区别">专有Document与Map的区别</h2>

<p><code class="language-plaintext highlighter-rouge">Document</code> 和 <code class="language-plaintext highlighter-rouge">Map</code> 在 MongoDB 中有一些相似性，但它们在使用和语义上有显著的区别。以下是它们的主要区别：</p>

<ol>
  <li><strong>类型和设计目的</strong></li>
</ol>

<p><strong><code class="language-plaintext highlighter-rouge">Document</code></strong>：在 MongoDB 中，<code class="language-plaintext highlighter-rouge">Document</code> 是一个封装了 BSON 数据的对象，通常用来表示一个文档（即 MongoDB 中的一条记录）。<code class="language-plaintext highlighter-rouge">Document</code> 允许你以键值对的形式存储和查询数据，同时支持嵌套结构，数据的序列化和反序列化是 MongoDB 的核心功能之一。<code class="language-plaintext highlighter-rouge">Document</code> 是 MongoDB Java 驱动中的一个重要类，继承自 <code class="language-plaintext highlighter-rouge">BsonDocument</code>，它是为与 MongoDB 交互而设计的。</p>

<p><strong><code class="language-plaintext highlighter-rouge">Map</code></strong>：<code class="language-plaintext highlighter-rouge">Map</code> 是 Java 中的一个接口，表示一个映射关系，即将键映射到值的集合。<code class="language-plaintext highlighter-rouge">Map</code> 支持多种实现，如 <code class="language-plaintext highlighter-rouge">HashMap</code>、<code class="language-plaintext highlighter-rouge">TreeMap</code> 等，通常用于存储任意的键值对数据。</p>

<ol>
  <li><strong>嵌套结构支持</strong></li>
</ol>

<p><strong><code class="language-plaintext highlighter-rouge">Document</code></strong>：<code class="language-plaintext highlighter-rouge">Document</code> 本身是一个高度结构化的对象，能够嵌套其他 <code class="language-plaintext highlighter-rouge">Document</code> 或 <code class="language-plaintext highlighter-rouge">List</code> 等类型。这意味着你可以轻松地表示复杂的层次化数据结构。例如，可以存储一个嵌套的对象，表示 MongoDB 中的嵌套文档。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Document</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Document</span><span class="o">();</span>
<span class="n">person</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"John Doe"</span><span class="o">);</span>
<span class="n">person</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"address"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Document</span><span class="o">(</span><span class="s">"street"</span><span class="o">,</span> <span class="s">"123 Main St"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"city"</span><span class="o">,</span> <span class="s">"Anytown"</span><span class="o">));</span>
</code></pre></div></div>

<p>这个 <code class="language-plaintext highlighter-rouge">Document</code> 会被存储为一个 MongoDB 文档，<code class="language-plaintext highlighter-rouge">address</code> 是一个子文档。</p>

<p><strong><code class="language-plaintext highlighter-rouge">Map</code></strong>：<code class="language-plaintext highlighter-rouge">Map</code> 只是一个简单的键值对集合，默认没有内建的方式来表示嵌套结构。如果你想在 <code class="language-plaintext highlighter-rouge">Map</code> 中表示嵌套结构，需要手动创建嵌套的 <code class="language-plaintext highlighter-rouge">Map</code> 或使用其他数据结构。例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">personMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">addressMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">addressMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"street"</span><span class="o">,</span> <span class="s">"123 Main St"</span><span class="o">);</span>
<span class="n">addressMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"city"</span><span class="o">,</span> <span class="s">"Anytown"</span><span class="o">);</span>
<span class="n">personMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"John Doe"</span><span class="o">);</span>
<span class="n">personMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"address"</span><span class="o">,</span> <span class="n">addressMap</span><span class="o">);</span>
</code></pre></div></div>

<p>虽然你可以在 <code class="language-plaintext highlighter-rouge">Map</code> 中嵌套 <code class="language-plaintext highlighter-rouge">Map</code>，但是 <code class="language-plaintext highlighter-rouge">Map</code> 本身并不专门设计来处理 MongoDB 的 BSON 类型数据，它只是通用的 Java 数据结构。</p>

<ol>
  <li><strong>数据类型支持</strong>
<strong><code class="language-plaintext highlighter-rouge">Document</code></strong>：<code class="language-plaintext highlighter-rouge">Document</code> 是专为 MongoDB 的 BSON 数据设计的，因此它支持 MongoDB 支持的所有数据类型，包括 <code class="language-plaintext highlighter-rouge">ObjectId</code>、<code class="language-plaintext highlighter-rouge">Decimal128</code>、<code class="language-plaintext highlighter-rouge">Binary</code>、<code class="language-plaintext highlighter-rouge">Date</code>、<code class="language-plaintext highlighter-rouge">Timestamp</code> 等。你可以在 <code class="language-plaintext highlighter-rouge">Document</code> 中使用这些类型，而无需显式地进行转换。</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Document</span> <span class="n">document</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Document</span><span class="o">();</span>
<span class="n">document</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"createdAt"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">());</span>
<span class="n">document</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"userId"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ObjectId</span><span class="o">());</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Map</code></strong>：<code class="language-plaintext highlighter-rouge">Map</code> 是一个通用的数据结构，可以存储任何类型的数据，但不会自动处理 MongoDB 特有的数据类型。你需要手动处理类型转换，尤其是对于 MongoDB 特有的数据类型（如 <code class="language-plaintext highlighter-rouge">ObjectId</code>、<code class="language-plaintext highlighter-rouge">Date</code> 等），在 <code class="language-plaintext highlighter-rouge">Map</code> 中只能存储普通的 Java 对象。</p>

<ol>
  <li>
    <p><strong>序列化与反序列化</strong>
<strong><code class="language-plaintext highlighter-rouge">Document</code></strong>：<code class="language-plaintext highlighter-rouge">Document</code> 在 MongoDB Java 驱动中与 BSON 数据紧密结合，提供了方便的序列化和反序列化功能。你可以直接将 <code class="language-plaintext highlighter-rouge">Document</code> 存储到 MongoDB 中，MongoDB 驱动会自动将 <code class="language-plaintext highlighter-rouge">Document</code> 转换为 BSON 格式，反之亦然。
<strong><code class="language-plaintext highlighter-rouge">Map</code></strong>：<code class="language-plaintext highlighter-rouge">Map</code> 是 Java 的标准集合类，没有内建的 MongoDB 序列化支持。你需要手动将 <code class="language-plaintext highlighter-rouge">Map</code> 转换为 <code class="language-plaintext highlighter-rouge">Document</code>，并在需要时进行反序列化。</p>
  </li>
  <li>
    <p><strong>性能与使用场景</strong>
<strong><code class="language-plaintext highlighter-rouge">Document</code></strong>：<code class="language-plaintext highlighter-rouge">Document</code> 是 MongoDB 数据库中数据的本地表示，适用于需要嵌套结构并且需要与 MongoDB 直接交互的场景。它具有 MongoDB 驱动提供的优化和功能支持，可以有效处理复杂的数据结构和 MongoDB 特定类型的数据。
<strong><code class="language-plaintext highlighter-rouge">Map</code></strong>：<code class="language-plaintext highlighter-rouge">Map</code> 更通用，适用于 Java 应用中存储任何类型的键值对，尤其是对于不特定于 MongoDB 的场景。在 MongoDB 中插入数据时，<code class="language-plaintext highlighter-rouge">Map</code> 需要转换为 <code class="language-plaintext highlighter-rouge">Document</code>。</p>
  </li>
</ol>

<p>示例对比</p>

<p>使用 <code class="language-plaintext highlighter-rouge">Document</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Document</span><span class="o">();</span>
<span class="n">doc</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"John Doe"</span><span class="o">);</span>
<span class="n">doc</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"address"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Document</span><span class="o">(</span><span class="s">"street"</span><span class="o">,</span> <span class="s">"123 Main St"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"city"</span><span class="o">,</span> <span class="s">"Anytown"</span><span class="o">));</span>
</code></pre></div></div>

<p>使用 <code class="language-plaintext highlighter-rouge">Map</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"John Doe"</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">addressMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">addressMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"street"</span><span class="o">,</span> <span class="s">"123 Main St"</span><span class="o">);</span>
<span class="n">addressMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"city"</span><span class="o">,</span> <span class="s">"Anytown"</span><span class="o">);</span>

<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"address"</span><span class="o">,</span> <span class="n">addressMap</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="反序列化">反序列化</h2>

<p>在 MongoDB 中，反序列化是指将存储在数据库中的 BSON 数据转换为 Java 对象的过程。对于 <code class="language-plaintext highlighter-rouge">Document</code> 和 <code class="language-plaintext highlighter-rouge">Map</code>，反序列化的方式和适用场景有所不同。</p>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">Document</code> 反序列化</strong></p>

<p><code class="language-plaintext highlighter-rouge">Document</code> 是 MongoDB Java 驱动专门为 BSON 数据设计的类，因此，MongoDB 驱动会自动将 BSON 数据转换为 <code class="language-plaintext highlighter-rouge">Document</code> 对象，并且 <code class="language-plaintext highlighter-rouge">Document</code> 对象本身提供了灵活的 API 来处理 BSON 数据。</p>

<p><strong>反序列化到 <code class="language-plaintext highlighter-rouge">Document</code></strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 假设 MongoDB 集合中存储的文档是 { "name": "John Doe", "address": { "street": "123 Main St", "city": "Anytown" } }</span>
<span class="nc">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"someId"</span><span class="o">,</span> <span class="nc">Document</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>  <span class="c1">// 输出 "John Doe"</span>
<span class="nc">Document</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Document</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"address"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">address</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"street"</span><span class="o">));</span>  <span class="c1">// 输出 "123 Main St"</span>
</code></pre></div></div>

<p><strong>反序列化到自定义 Java 类</strong></p>

<p>如果你希望将 MongoDB 中的文档反序列化为自定义的 Java 类，可以使用 MongoTemplate 提供的 <code class="language-plaintext highlighter-rouge">findById</code> 或 <code class="language-plaintext highlighter-rouge">find</code> 方法，并将返回类型指定为 Java 类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">address</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>

<span class="c1">// 查询文档并反序列化为 Person 对象</span>
<span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"someId"</span><span class="o">,</span> <span class="nc">Person</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>  <span class="c1">// 输出 "John Doe"</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">getAddress</span><span class="o">().</span><span class="na">getStreet</span><span class="o">());</span>  <span class="c1">// 输出 "123 Main St"</span>
</code></pre></div></div>

<p>MongoDB 驱动会自动将 BSON 文档中的 <code class="language-plaintext highlighter-rouge">address</code> 字段反序列化为 <code class="language-plaintext highlighter-rouge">Address</code> 对象。为了实现反序列化，MongoDB Java 驱动会使用 JavaBean 反射机制，将 BSON 文档的字段映射到 Java 类的字段。</p>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">Map</code> 反序列化</strong></p>

<p>对于 <code class="language-plaintext highlighter-rouge">Map</code>，MongoDB Java 驱动不会自动将 BSON 数据转换为 Java 对象。如果你使用 <code class="language-plaintext highlighter-rouge">Map</code>，需要自己手动处理反序列化过程。</p>

<p>反序列化到 <code class="language-plaintext highlighter-rouge">Map</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 假设 MongoDB 集合中存储的文档是 { "name": "John Doe", "address": { "street": "123 Main St", "city": "Anytown" } }</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"someId"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>  <span class="c1">// 输出 "John Doe"</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"address"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"street"</span><span class="o">));</span>  <span class="c1">// 输出 "123 Main St"</span>
</code></pre></div></div>

<p>在这个例子中，MongoDB 驱动会将 BSON 文档反序列化为 <code class="language-plaintext highlighter-rouge">Map</code> 类型，字段名会映射到 <code class="language-plaintext highlighter-rouge">Map</code> 中的键。</p>

<h3 id="反序列化与嵌套结构">反序列化与嵌套结构</h3>

<p>无论是使用 <code class="language-plaintext highlighter-rouge">Document</code> 还是 <code class="language-plaintext highlighter-rouge">Map</code>，MongoDB 支持嵌套数据结构，所以反序列化时，如果字段包含嵌套的文档或数组，驱动会根据相应的结构转换为 Java 中对应的对象。</p>

<p>使用 <code class="language-plaintext highlighter-rouge">Document</code> 处理嵌套结构</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Address</span> <span class="n">address</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>

<span class="nc">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"someId"</span><span class="o">,</span> <span class="nc">Document</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">();</span>
<span class="n">person</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">doc</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>

<span class="nc">Document</span> <span class="n">addressDoc</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Document</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"address"</span><span class="o">);</span>
<span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Address</span><span class="o">();</span>
<span class="n">address</span><span class="o">.</span><span class="na">setStreet</span><span class="o">(</span><span class="n">addressDoc</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"street"</span><span class="o">));</span>
<span class="n">address</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="n">addressDoc</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"city"</span><span class="o">));</span>
<span class="n">person</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">Map</code> 处理嵌套结构</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"someId"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">addressMap</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;)</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"address"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">street</span> <span class="o">=</span> <span class="n">addressMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"street"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">city</span> <span class="o">=</span> <span class="n">addressMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"city"</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="反序列化时处理复杂数据类型">反序列化时处理复杂数据类型</h3>

<p>对于 MongoDB 中的特定数据类型（如 <code class="language-plaintext highlighter-rouge">ObjectId</code>、<code class="language-plaintext highlighter-rouge">Date</code>、<code class="language-plaintext highlighter-rouge">Decimal128</code> 等），<code class="language-plaintext highlighter-rouge">Document</code> 会自动处理这些类型的转换。而 <code class="language-plaintext highlighter-rouge">Map</code> 需要手动转换这些特殊类型。</p>

<p>反序列化 <code class="language-plaintext highlighter-rouge">ObjectId</code> 类型</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"someId"</span><span class="o">,</span> <span class="nc">Document</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">ObjectId</span> <span class="n">objectId</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">getObjectId</span><span class="o">(</span><span class="s">"_id"</span><span class="o">);</span>
</code></pre></div></div>

<p>反序列化 <code class="language-plaintext highlighter-rouge">Date</code> 类型</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"someId"</span><span class="o">,</span> <span class="nc">Document</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">Date</span> <span class="n">createdAt</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">getDate</span><span class="o">(</span><span class="s">"createdAt"</span><span class="o">);</span>
</code></pre></div></div>

<p>反序列化 <code class="language-plaintext highlighter-rouge">Decimal128</code> 类型</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"someId"</span><span class="o">,</span> <span class="nc">Document</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">Decimal128</span> <span class="n">price</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="nc">Decimal128</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<ol>
  <li><strong>总结</strong></li>
</ol>

<ul>
  <li>
    <p><strong>使用 <code class="language-plaintext highlighter-rouge">Document</code></strong>：<code class="language-plaintext highlighter-rouge">Document</code> 是 MongoDB Java 驱动中为 BSON 数据设计的类，MongoDB 会自动将 BSON 数据反序列化为 <code class="language-plaintext highlighter-rouge">Document</code> 对象，支持复杂的嵌套结构和 MongoDB 特有的数据类型（如 <code class="language-plaintext highlighter-rouge">ObjectId</code>、<code class="language-plaintext highlighter-rouge">Date</code>、<code class="language-plaintext highlighter-rouge">Decimal128</code> 等）。在需要直接与 MongoDB 数据交互时，使用 <code class="language-plaintext highlighter-rouge">Document</code> 是更方便的选择。</p>
  </li>
  <li>
    <p><strong>使用 <code class="language-plaintext highlighter-rouge">Map</code></strong>：<code class="language-plaintext highlighter-rouge">Map</code> 是 Java 中的通用数据结构，用来存储键值对，但没有内建的 MongoDB 数据类型支持。如果你使用 <code class="language-plaintext highlighter-rouge">Map</code> 来存储 MongoDB 中的文档数据，MongoDB 驱动会自动将 BSON 数据反序列化为 <code class="language-plaintext highlighter-rouge">Map</code>，但是你需要手动处理数据类型转换，尤其是对于 MongoDB 特有的数据类型。<code class="language-plaintext highlighter-rouge">Map</code> 不适合用于直接处理 MongoDB 中的数据类型。</p>
  </li>
  <li>
    <p><strong>嵌套结构</strong>：<code class="language-plaintext highlighter-rouge">Document</code> 可以轻松处理嵌套文档，并支持自动映射到嵌套的 Java 对象。而对于 <code class="language-plaintext highlighter-rouge">Map</code>，嵌套数据需要手动处理，将嵌套的 <code class="language-plaintext highlighter-rouge">Map</code> 转换为相应的 Java 对象。</p>
  </li>
</ul>

<p>在实际开发中，使用 <code class="language-plaintext highlighter-rouge">Document</code> 反序列化 MongoDB 文档通常是更方便且高效的做法，特别是在处理复杂数据结构和 MongoDB 特有的数据类型时。</p>

<h2 id="dto注解">DTO注解</h2>

<p>在 Java 中，MongoDB 提供了一些注解，尤其是当你使用 <strong>Spring Data MongoDB</strong> 时，这些注解用于帮助你将 Java 对象（DTO）映射到 MongoDB 中的文档（BSON）格式。下面是一些常见的 MongoDB 注解：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">@Document</code></strong></li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@Document</code> 注解用于标识一个 Java 类是 MongoDB 的文档类。它告诉 Spring Data MongoDB 这个类应该被映射到 MongoDB 的某个集合。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Document</span><span class="o">;</span>

<span class="nd">@Document</span><span class="o">(</span><span class="n">collection</span> <span class="o">=</span> <span class="s">"people"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">collection</code></strong> 属性指定了 MongoDB 集合的名称。如果不指定，默认使用类名的小写形式作为集合名。</li>
</ul>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">@Id</code></strong></li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@Id</code> 注解用于标识文档的主键字段，通常对应 MongoDB 文档中的 <code class="language-plaintext highlighter-rouge">_id</code> 字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Id</code> 用于指定哪个字段在 MongoDB 中是文档的唯一标识符，通常对应 <code class="language-plaintext highlighter-rouge">_id</code> 字段。可以使用 <code class="language-plaintext highlighter-rouge">String</code>、<code class="language-plaintext highlighter-rouge">ObjectId</code> 或其他数据类型来表示主键。</li>
</ul>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">@Field</code></strong></li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@Field</code> 注解用于指定文档中的字段与 Java 类的属性之间的映射关系。它常用于字段名与 Java 属性名不同的情况。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Field</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Field</span><span class="o">(</span><span class="s">"full_name"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>这个注解指定了 MongoDB 文档中的字段名（<code class="language-plaintext highlighter-rouge">full_name</code>）与 Java 类中的属性名（<code class="language-plaintext highlighter-rouge">name</code>）之间的映射关系。</li>
</ul>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">@Transient</code></strong></li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@Transient</code> 注解用于标识一个字段不应当被持久化到 MongoDB 中。也就是说，这个字段不会被存储到数据库中，但仍然可以在应用程序中使用。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Transient</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Transient</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">temporaryField</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Transient</code> 注解的字段不会被持久化到数据库中，适用于临时数据或计算字段。</li>
</ul>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">@DBRef</code></strong></li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@DBRef</code> 注解用于处理 MongoDB 中的引用关系，它用于将一个文档与另一个文档关联。例如，如果你有两个集合，其中一个集合中的文档引用另一个集合中的文档，可以使用 <code class="language-plaintext highlighter-rouge">@DBRef</code> 来建立引用关系。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.DBRef</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Post</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>

    <span class="nd">@DBRef</span>
    <span class="kd">private</span> <span class="nc">Author</span> <span class="n">author</span><span class="o">;</span>  <span class="c1">// 引用其他文档</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@DBRef</code> 会在 MongoDB 中保存一个文档的引用，而不是将整个文档嵌入到当前文档中。这对于处理一对多或多对多关系时非常有用。</li>
</ul>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">@CreatedDate</code> 和 <code class="language-plaintext highlighter-rouge">@LastModifiedDate</code></strong></li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@CreatedDate</code> 和 <code class="language-plaintext highlighter-rouge">@LastModifiedDate</code> 注解用于自动填充文档的创建时间和最后修改时间。它们通常与 <code class="language-plaintext highlighter-rouge">@EnableMongoAuditing</code> 一起使用来启用审计功能。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.annotation.CreatedDate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.LastModifiedDate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@CreatedDate</span>
    <span class="kd">private</span> <span class="nc">Date</span> <span class="n">createdDate</span><span class="o">;</span>

    <span class="nd">@LastModifiedDate</span>
    <span class="kd">private</span> <span class="nc">Date</span> <span class="n">lastModifiedDate</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@CreatedDate</code> 注解会自动填充文档的创建时间，而 <code class="language-plaintext highlighter-rouge">@LastModifiedDate</code> 注解会在文档被修改时自动更新最后修改时间。</li>
</ul>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">@Version</code></strong></li>
</ol>

<p><code class="language-plaintext highlighter-rouge">@Version</code> 注解用于乐观锁控制（Optimistic Locking）。在并发场景下，如果多个线程同时尝试更新同一个文档，可以通过版本号来检测冲突。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Version</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Version</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">version</span><span class="o">;</span>

    <span class="c1">// getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Version</code> 会自动为文档添加一个版本号字段，在每次更新时，版本号会递增。如果版本号不匹配（即文档已被修改），则会抛出 <code class="language-plaintext highlighter-rouge">OptimisticLockingFailureException</code>。</li>
</ul>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">@Aggregation</code> 和 <code class="language-plaintext highlighter-rouge">@Query</code></strong></li>
</ol>

<p>虽然 <code class="language-plaintext highlighter-rouge">@Aggregation</code> 和 <code class="language-plaintext highlighter-rouge">@Query</code> 注解不直接用于 DTO 类，但它们对于在 MongoRepository 接口中进行自定义查询非常有用。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.repository.Aggregation</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.repository.Query</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PersonRepository</span> <span class="kd">extends</span> <span class="nc">MongoRepository</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Query</span><span class="o">(</span><span class="s">"{'name': ?0}"</span><span class="o">)</span>
    <span class="nc">Person</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>

    <span class="nd">@Aggregation</span><span class="o">(</span><span class="n">pipeline</span> <span class="o">=</span> <span class="o">{</span>
        <span class="s">"{ '$match': { 'age': { '$gt': ?0 } } }"</span><span class="o">,</span>
        <span class="s">"{ '$group': { '_id': '$name', 'total': { '$sum': 1 } } }"</span>
    <span class="o">})</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">PersonSummary</span><span class="o">&gt;</span> <span class="nf">findPersonSummariesByAgeGreaterThan</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Query</code> 注解用于定义 MongoDB 查询。</li>
  <li><code class="language-plaintext highlighter-rouge">@Aggregation</code> 注解用于定义聚合查询管道。</li>
</ul>

<hr />

<p>总结</p>

<p>常用的 MongoDB 注解主要集中在数据映射和持久化操作上。对于 DTO 类（Data Transfer Object）来说，通常使用的注解包括：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">@Document</code></strong>：指定文档类和集合的映射。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@Id</code></strong>：标识主键字段。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@Field</code></strong>：指定字段与 MongoDB 文档中的字段映射关系。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@Transient</code></strong>：标记不持久化的字段。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@DBRef</code></strong>：处理文档之间的引用关系。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@CreatedDate</code> 和 <code class="language-plaintext highlighter-rouge">@LastModifiedDate</code></strong>：自动填充时间字段。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@Version</code></strong>：启用乐观锁。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@Query</code> 和 <code class="language-plaintext highlighter-rouge">@Aggregation</code></strong>：在 <code class="language-plaintext highlighter-rouge">MongoRepository</code> 中定义查询。</li>
</ul>

<p><strong>实例：</strong></p>

<p>假设我有如下的数据结构：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$oid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"6708f5f8c7413f0001015635"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"tenant_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"creator"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"张三"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
      </span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"纽约"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"job"</span><span class="p">:</span><span class="w"> </span><span class="s2">"工程师"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">60000</span><span class="p">,</span><span class="w">
      </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"工程师"</span><span class="p">,</span><span class="w"> </span><span class="s2">"开发人员"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"projects"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目A"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"主开发"</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目B"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"测试"</span><span class="w"> </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"有经验的开发人员和工程师"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isActive"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"create_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T09:55:04.671Z"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"last_modified_by"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"update_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T10:01:26.232Z"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>设计如下 DTO 类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Field</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Document</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Document</span><span class="o">(</span><span class="n">collection</span> <span class="o">=</span> <span class="s">"your_collection_name"</span><span class="o">)</span> <span class="c1">// 指定 MongoDB 集合名称</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YourDto</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span> <span class="c1">// MongoDB _id 字段</span>

    <span class="nd">@Field</span><span class="o">(</span><span class="s">"tenant_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">tenantId</span><span class="o">;</span> <span class="c1">// tenant_id 字段</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">creator</span><span class="o">;</span> <span class="c1">// 操作员字段</span>

    <span class="kd">private</span> <span class="nc">Data</span> <span class="n">data</span><span class="o">;</span> <span class="c1">// 嵌套的 data 对象</span>

    <span class="nd">@Field</span><span class="o">(</span><span class="s">"create_time"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">createTime</span><span class="o">;</span> <span class="c1">// 创建时间字段</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">lastModifiedBy</span><span class="o">;</span> <span class="c1">// 最后修改人字段</span>

    <span class="nd">@Field</span><span class="o">(</span><span class="s">"update_time"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">updateTime</span><span class="o">;</span> <span class="c1">// 更新时间字段</span>

    <span class="c1">// Getter 和 Setter 方法</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTenantId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">tenantId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTenantId</span><span class="o">(</span><span class="nc">String</span> <span class="n">tenantId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tenantId</span> <span class="o">=</span> <span class="n">tenantId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCreator</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">creator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreator</span><span class="o">(</span><span class="nc">String</span> <span class="n">creator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">creator</span> <span class="o">=</span> <span class="n">creator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Data</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCreateTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">createTime</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreateTime</span><span class="o">(</span><span class="nc">String</span> <span class="n">createTime</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createTime</span> <span class="o">=</span> <span class="n">createTime</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLastModifiedBy</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">lastModifiedBy</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLastModifiedBy</span><span class="o">(</span><span class="nc">String</span> <span class="n">lastModifiedBy</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lastModifiedBy</span> <span class="o">=</span> <span class="n">lastModifiedBy</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getUpdateTime</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">updateTime</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUpdateTime</span><span class="o">(</span><span class="nc">String</span> <span class="n">updateTime</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">updateTime</span> <span class="o">=</span> <span class="n">updateTime</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 内部类 Data 用来表示嵌套的 data 对象</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Data</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">status</span><span class="o">;</span> <span class="c1">// 状态字段</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> <span class="c1">// 姓名字段</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span> <span class="c1">// 年龄字段</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span> <span class="c1">// 城市字段</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">job</span><span class="o">;</span> <span class="c1">// 职业字段</span>
        <span class="kd">private</span> <span class="kt">double</span> <span class="n">salary</span><span class="o">;</span> <span class="c1">// 薪水字段</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tags</span><span class="o">;</span> <span class="c1">// 标签列表字段</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Project</span><span class="o">&gt;</span> <span class="n">projects</span><span class="o">;</span> <span class="c1">// 项目列表字段</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">description</span><span class="o">;</span> <span class="c1">// 描述字段</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isActive</span><span class="o">;</span> <span class="c1">// 活跃状态字段</span>

        <span class="c1">// Getter 和 Setter 方法</span>

        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isStatus</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">status</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCity</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">city</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCity</span><span class="o">(</span><span class="nc">String</span> <span class="n">city</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">city</span> <span class="o">=</span> <span class="n">city</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getJob</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">job</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setJob</span><span class="o">(</span><span class="nc">String</span> <span class="n">job</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">job</span> <span class="o">=</span> <span class="n">job</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSalary</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">salary</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSalary</span><span class="o">(</span><span class="kt">double</span> <span class="n">salary</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">salary</span> <span class="o">=</span> <span class="n">salary</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getTags</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">tags</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTags</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tags</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">tags</span> <span class="o">=</span> <span class="n">tags</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Project</span><span class="o">&gt;</span> <span class="nf">getProjects</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">projects</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProjects</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Project</span><span class="o">&gt;</span> <span class="n">projects</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">projects</span> <span class="o">=</span> <span class="n">projects</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">description</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDescription</span><span class="o">(</span><span class="nc">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="n">description</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isActive</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">isActive</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setActive</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">active</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">isActive</span> <span class="o">=</span> <span class="n">active</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 内部类 Project 用来表示嵌套的项目对象</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Project</span> <span class="o">{</span>
            <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span> <span class="c1">// 项目名称</span>
            <span class="kd">private</span> <span class="nc">String</span> <span class="n">role</span><span class="o">;</span> <span class="c1">// 角色</span>

            <span class="c1">// Getter 和 Setter 方法</span>

            <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getRole</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">role</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRole</span><span class="o">(</span><span class="nc">String</span> <span class="n">role</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">role</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>解释</strong></p>

<ol>
  <li><strong>字段映射：</strong> 使用 <code class="language-plaintext highlighter-rouge">@Field</code> 注解来显式地映射 MongoDB 中的字段。例如，<code class="language-plaintext highlighter-rouge">tenant_id</code> 字段通过 <code class="language-plaintext highlighter-rouge">@Field("tenant_id")</code> 映射到 <code class="language-plaintext highlighter-rouge">tenantId</code> 字段。</li>
  <li><strong>嵌套对象：</strong> <code class="language-plaintext highlighter-rouge">data</code> 是一个嵌套对象，表示为内部的静态类 <code class="language-plaintext highlighter-rouge">Data</code>。这允许你在 DTO 中表示嵌套的复杂数据结构。</li>
  <li><strong>数组和列表：</strong> <code class="language-plaintext highlighter-rouge">tags</code> 和 <code class="language-plaintext highlighter-rouge">projects</code> 分别是数组和嵌套对象列表，使用 <code class="language-plaintext highlighter-rouge">List</code> 来表示。</li>
  <li><strong>时间字段：</strong> <code class="language-plaintext highlighter-rouge">create_time</code> 和 <code class="language-plaintext highlighter-rouge">update_time</code> 使用 <code class="language-plaintext highlighter-rouge">@Field</code> 注解映射 MongoDB 中的时间字段，字段名与类中字段名称不一致时使用此注解指定。</li>
  <li><strong>操作符字段：</strong> 在实际的数据库交互中（例如查询），MongoDB 中的操作符（如 <code class="language-plaintext highlighter-rouge">$gt</code>）通常不会在 DTO 中表示，但如果需要进行查询时可以通过 <code class="language-plaintext highlighter-rouge">Criteria</code> 来构造条件。</li>
</ol>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 或 <code class="language-plaintext highlighter-rouge">MongoRepository</code></strong></p>

<ol>
  <li><strong>MongoTemplate：</strong></li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="kd">private</span> <span class="nc">MongoTemplate</span> <span class="n">mongoTemplate</span><span class="o">;</span>

<span class="c1">// 保存数据</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">yourDto</span><span class="o">);</span>

<span class="c1">// 查询数据</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"tenant_id"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"***************"</span><span class="o">));</span>
<span class="nc">YourDto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findOne</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">YourDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<ol>
  <li><strong>MongoRepository：</strong></li>
</ol>

<p>如果你使用 <code class="language-plaintext highlighter-rouge">MongoRepository</code>，可以直接定义一个接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java复制代码import</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">mongodb</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">MongoRepository</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">YourDtoRepository</span> <span class="kd">extends</span> <span class="nc">MongoRepository</span><span class="o">&lt;</span><span class="nc">YourDto</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">YourDto</span><span class="o">&gt;</span> <span class="nf">findByTenantId</span><span class="o">(</span><span class="nc">String</span> <span class="n">tenantId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>总结</strong></p>

<ul>
  <li>DTO 类应该与 MongoDB 的数据结构匹配，使用 <code class="language-plaintext highlighter-rouge">@Field</code> 来映射字段名。</li>
  <li>对于嵌套对象和数组，使用嵌套类和 <code class="language-plaintext highlighter-rouge">List</code> 来表示。</li>
  <li>使用 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 或 <code class="language-plaintext highlighter-rouge">MongoRepository</code> 来进行数据库操作。</li>
</ul>

<h2 id="索引">索引</h2>

<p><code class="language-plaintext highlighter-rouge">@Indexed</code> 注解是 Spring Data MongoDB 中的一个用于指定 MongoDB 索引的注解，它可以应用于字段、类等，用来加速查询性能。通过使用 <code class="language-plaintext highlighter-rouge">@Indexed</code> 注解，Spring Data MongoDB 会自动在对应的字段上创建索引，以提高查询效率。</p>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">@Indexed</code> 注解</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Indexed</code> 可以应用于类的字段上，并允许你指定索引的类型、排序等。</p>

<p><strong>在字段上使用 <code class="language-plaintext highlighter-rouge">@Indexed</code></strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.index.Indexed</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Document</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Document</span><span class="o">(</span><span class="n">collection</span> <span class="o">=</span> <span class="s">"your_collection_name"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YourDto</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Indexed</span> <span class="c1">// 默认会创建升序索引</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">tenantId</span><span class="o">;</span> <span class="c1">// tenant_id 字段将被索引</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">creator</span><span class="o">;</span>

    <span class="nd">@Indexed</span><span class="o">(</span><span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="c1">// 唯一索引，确保这个字段的值是唯一的</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">creatorId</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">Data</span> <span class="n">data</span><span class="o">;</span>

    <span class="c1">// 其他字段省略...</span>

    <span class="c1">// Getter 和 Setter 方法</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTenantId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">tenantId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTenantId</span><span class="o">(</span><span class="nc">String</span> <span class="n">tenantId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tenantId</span> <span class="o">=</span> <span class="n">tenantId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCreator</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">creator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreator</span><span class="o">(</span><span class="nc">String</span> <span class="n">creator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">creator</span> <span class="o">=</span> <span class="n">creator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Data</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 内部类 Data 省略...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>在类上使用 <code class="language-plaintext highlighter-rouge">@Indexed</code>（适用于复合索引）</strong></p>

<p>如果你需要创建复合索引（即基于多个字段的索引），你可以使用 <code class="language-plaintext highlighter-rouge">@CompoundIndexes</code> 注解来定义。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.index.CompoundIndex</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.index.CompoundIndexes</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Document</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>

<span class="nd">@Document</span><span class="o">(</span><span class="n">collection</span> <span class="o">=</span> <span class="s">"your_collection_name"</span><span class="o">)</span>
<span class="nd">@CompoundIndexes</span><span class="o">({</span>
    <span class="nd">@CompoundIndex</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"tenant_creator_index"</span><span class="o">,</span> <span class="n">def</span> <span class="o">=</span> <span class="s">"{'tenantId': 1, 'creator': 1}"</span><span class="o">)</span> <span class="c1">// 创建一个基于 tenantId 和 creator 的复合索引</span>
<span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YourDto</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">tenantId</span><span class="o">;</span> <span class="c1">// 将会参与复合索引</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">creator</span><span class="o">;</span> <span class="c1">// 将会参与复合索引</span>

    <span class="c1">// 其他字段和方法省略...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其他 <code class="language-plaintext highlighter-rouge">@Indexed</code> 配置选项</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">unique = true</code>：用于创建唯一索引。对于这个字段，MongoDB 会确保每个值都是唯一的，常用于 <code class="language-plaintext highlighter-rouge">email</code>、<code class="language-plaintext highlighter-rouge">username</code> 等字段。</li>
  <li><code class="language-plaintext highlighter-rouge">direction</code>：控制索引的顺序，<code class="language-plaintext highlighter-rouge">ASC</code>（升序）或 <code class="language-plaintext highlighter-rouge">DESC</code>（降序）。默认为 <code class="language-plaintext highlighter-rouge">ASC</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">dropDups = true</code>：删除重复的文档。只有在创建唯一索引时才有意义，用于清除已经存在的重复数据。</li>
  <li><code class="language-plaintext highlighter-rouge">sparse = true</code>：当你有很多字段为空时，可以选择创建稀疏索引。这个选项会确保只有有值的文档会被索引，而为空的文档不会占用索引空间。</li>
</ul>

<p>示例：使用 <code class="language-plaintext highlighter-rouge">@Indexed</code> 注解</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.index.Indexed</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Document</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Document</span><span class="o">(</span><span class="n">collection</span> <span class="o">=</span> <span class="s">"your_collection_name"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YourDto</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Indexed</span><span class="o">(</span><span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="c1">// 唯一索引，确保该字段的值是唯一的</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>

    <span class="nd">@Indexed</span><span class="o">(</span><span class="n">direction</span> <span class="o">=</span> <span class="nc">IndexDirection</span><span class="o">.</span><span class="na">ASC</span><span class="o">)</span> <span class="c1">// 升序索引</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">tenantId</span><span class="o">;</span>

    <span class="nd">@Indexed</span><span class="o">(</span><span class="n">sparse</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="c1">// 创建稀疏索引</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phoneNumber</span><span class="o">;</span> <span class="c1">// 仅对有值的文档建立索引</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">creator</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">Data</span> <span class="n">data</span><span class="o">;</span>

    <span class="c1">// Getter 和 Setter 方法</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTenantId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">tenantId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTenantId</span><span class="o">(</span><span class="nc">String</span> <span class="n">tenantId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tenantId</span> <span class="o">=</span> <span class="n">tenantId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPhoneNumber</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">phoneNumber</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPhoneNumber</span><span class="o">(</span><span class="nc">String</span> <span class="n">phoneNumber</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phoneNumber</span> <span class="o">=</span> <span class="n">phoneNumber</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCreator</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">creator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreator</span><span class="o">(</span><span class="nc">String</span> <span class="n">creator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">creator</span> <span class="o">=</span> <span class="n">creator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Data</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setData</span><span class="o">(</span><span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 内部类 Data 省略...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>动态创建索引</strong></p>

<p>除了在 DTO 类中使用 <code class="language-plaintext highlighter-rouge">@Indexed</code> 注解来创建索引外，还可以使用 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 来动态创建索引。使用 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 可以更加灵活地管理索引：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.MongoTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.index.Index</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.query.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">IndexService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">MongoTemplate</span> <span class="n">mongoTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createIndexes</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">indexOps</span><span class="o">(</span><span class="nc">YourDto</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">ensureIndex</span><span class="o">(</span><span class="k">new</span> <span class="nc">Index</span><span class="o">().</span><span class="na">on</span><span class="o">(</span><span class="s">"tenantId"</span><span class="o">,</span> <span class="nc">Index</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">));</span>
        <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">indexOps</span><span class="o">(</span><span class="nc">YourDto</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">ensureIndex</span><span class="o">(</span><span class="k">new</span> <span class="nc">Index</span><span class="o">().</span><span class="na">on</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="nc">Index</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">).</span><span class="na">unique</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>总结</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Indexed</code> 用于创建单字段索引，增强查询性能。</li>
  <li>可以在字段上指定 <code class="language-plaintext highlighter-rouge">unique</code>、<code class="language-plaintext highlighter-rouge">sparse</code>、<code class="language-plaintext highlighter-rouge">direction</code> 等选项来定制索引。</li>
  <li><code class="language-plaintext highlighter-rouge">@CompoundIndexes</code> 用于定义复合索引，可以基于多个字段创建复合索引。</li>
  <li>使用 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 可以动态创建和管理索引。</li>
</ul>

<p>通过合理使用 <code class="language-plaintext highlighter-rouge">@Indexed</code> 和其他索引相关配置，可以显著提高数据库查询的性能，特别是在大量数据和频繁查询的场景中。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Seata分布式事务</title><link href="/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/" rel="alternate" type="text/html" title="Seata分布式事务" /><published>2024-09-21T00:00:00+08:00</published><updated>2024-09-21T00:00:00+08:00</updated><id>/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1</id><content type="html" xml:base="/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"><![CDATA[<h1 id="引言">引言</h1>
<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>

<p>官方网站：<a href="https://seata.apache.org/zh-cn/">Apache Seata</a>，Demo1：<a href="https://github.com/apache/incubator-seata-samples/tree/master">apache/incubator-seata-sample</a>，Demo2：<a href="https://github.com/Kerry2019/seata-tcc-demo">Kerry2019/seata-tcc-demo</a>，扩展：<a href="https://seata.apache.org/zh-cn/docs/user/appendix/global-transaction-status">事务状态</a>，<a href="https://seata.apache.org/zh-cn/docs/user/appendix/isolation">事务隔离</a>。。</p>

<h1 id="seata">Seata</h1>

<h2 id="seata-tcc-模式">Seata TCC 模式</h2>

<h3 id="准备环境">准备环境</h3>

<p>首先下载Seata：<a href="https://seata.apache.org/zh-cn/unversioned/download/seata-server/">Seata Java Download  Apache Seata</a>，选择二进制版本。</p>

<p>修改<code class="language-plaintext highlighter-rouge">conf\application.yml</code>，注册到consul，并使用mysql做为存储方式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Seata 服务器配置</span>
<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">7091</span>  <span class="c1"># 设置 Seata 服务器的端口为 7091</span>

<span class="c1"># Spring 应用配置</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">seata-server</span>  <span class="c1"># 设置 Spring 应用的名称为 seata-server</span>

<span class="c1"># 日志配置</span>
<span class="na">logging</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span> <span class="s">classpath:logback-spring.xml</span>  <span class="c1"># 指定 Logback 的配置文件路径</span>
  <span class="na">file</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">${log.home:${user.home}/logs/seata}</span>  <span class="c1"># 指定日志文件的保存路径</span>
  <span class="na">extend</span><span class="pi">:</span>
    <span class="na">logstash-appender</span><span class="pi">:</span>
      <span class="na">destination</span><span class="pi">:</span> <span class="s">127.0.0.1:4560</span>  <span class="c1"># 将日志发送到 Logstash 的地址</span>
    <span class="na">kafka-appender</span><span class="pi">:</span>
      <span class="na">bootstrap-servers</span><span class="pi">:</span> <span class="s">127.0.0.1:9092</span>  <span class="c1"># Kafka 服务器的地址</span>
      <span class="na">topic</span><span class="pi">:</span> <span class="s">logback_to_logstash</span>  <span class="c1"># Kafka 日志主题</span>

<span class="c1"># 控制台用户配置</span>
<span class="na">console</span><span class="pi">:</span>
  <span class="na">user</span><span class="pi">:</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">seata</span>  <span class="c1"># 控制台用户名</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">seata</span>  <span class="c1"># 控制台密码</span>

<span class="c1"># Seata 配置</span>
<span class="na">seata</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="c1"># support: nacos, consul, apollo, zk, etcd3, file</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">file</span> <span class="c1"># 配置 Seata 的配置方式为文件模式</span>
  <span class="na">registry</span><span class="pi">:</span>
    <span class="c1"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">consul</span> <span class="c1"># 使用 Consul 作为注册中心</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">application</span><span class="pi">:</span> <span class="s">seata-server</span>  <span class="c1"># 在 Consul 中注册的服务名称</span>
      <span class="na">server-addr</span><span class="pi">:</span> <span class="s">127.0.0.1:8500</span>  <span class="c1"># Consul 服务器的地址</span>
      <span class="na">acl-token</span><span class="pi">:</span>  <span class="c1"># ACL token，用于 Consul（如果需要，可以设置为空）</span>
      <span class="na">cluster</span><span class="pi">:</span> <span class="s">seata1</span>  <span class="c1"># Consul 集群的名称,即控制中心出现的服务的名称</span>
  <span class="na">store</span><span class="pi">:</span>
    <span class="c1"># support: file 、 db 、 redis 、 raft</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">db</span> <span class="c1"># 配置 Seata 的存储方式为数据库模式</span>
    <span class="na">db</span><span class="pi">:</span>
      <span class="na">datasource</span><span class="pi">:</span> <span class="s">druid</span> <span class="c1"># 使用 Druid 作为数据源</span>
      <span class="na">db-type</span><span class="pi">:</span> <span class="s">mysql</span> <span class="c1"># 数据库类型为 MySQL</span>
      <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span> <span class="c1"># 数据库驱动类名</span>
      <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true</span> <span class="c1"># 数据库连接 URL</span>
      <span class="na">user</span><span class="pi">:</span> <span class="s">root</span> <span class="c1"># 数据库用户名</span>
      <span class="na">password</span><span class="pi">:</span> <span class="s">root</span> <span class="c1"># 数据库密码</span>

  <span class="na">security</span><span class="pi">:</span>
    <span class="na">secretKey</span><span class="pi">:</span> <span class="s">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span> <span class="c1"># 安全密钥</span>
    <span class="na">tokenValidityInMilliseconds</span><span class="pi">:</span> <span class="m">1800000</span> <span class="c1"># Token 的有效时间（30 分钟）</span>
    <span class="na">ignore</span><span class="pi">:</span>
      <span class="c1"># 指定不需要进行安全检查的 URL 路径</span>
      <span class="na">urls</span><span class="pi">:</span> <span class="s">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login,/version.json,/health,/error</span>
</code></pre></div></div>

<p>mysql新建数据库<code class="language-plaintext highlighter-rouge">seata</code>，并运行：<code class="language-plaintext highlighter-rouge">script\server\db\mysql.sql</code>，初始化表。（也可以使用<code class="language-plaintext highlighter-rouge">file</code> 模式）</p>

<p>然后先启动consul，再启动seata，可以访问<code class="language-plaintext highlighter-rouge">http://127.0.0.1:7091/</code>，进入后台，账号密码在上面的配置文件中，即<code class="language-plaintext highlighter-rouge">seata</code>。</p>

<p>客户端配置：</p>

<p>首先consul要注册上：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-consul-discovery<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">demo-service</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8500</span>
      <span class="na">discovery</span><span class="pi">:</span>
        <span class="na">service-name</span><span class="pi">:</span> <span class="s">demo-service</span>
        <span class="na">health-check</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">/actuator/health</span>
          <span class="na">interval</span><span class="pi">:</span> <span class="s">30s</span>

<span class="na">management</span><span class="pi">:</span>
  <span class="na">endpoints</span><span class="pi">:</span>
    <span class="na">web</span><span class="pi">:</span>
      <span class="na">exposure</span><span class="pi">:</span>
        <span class="na">include</span><span class="pi">:</span> <span class="s">health,info</span>
</code></pre></div></div>

<p>然后配置seata：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/io.seata/seata-spring-boot-starter --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.seata<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>seata-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">seata</span><span class="pi">:</span>
  <span class="na">registry</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="c1"># Consul 服务器的地址和端口</span>
      <span class="na">server-addr</span><span class="pi">:</span> <span class="s">127.0.0.1:8500</span>
      <span class="c1"># ACL token 用于访问 Consul。如果 Consul 配置了 ACL，需提供相应的 token。可以为空或省略。</span>
      <span class="na">acl-token</span><span class="pi">:</span>
      <span class="c1"># Consul 集群的名称。可以根据实际情况修改为相应的集群名称。</span>
      <span class="na">cluster</span><span class="pi">:</span> <span class="s">seata1</span>
    <span class="c1"># 注册中心类型，这里设置为 Consul</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">consul</span>

  <span class="c1"># 事务服务组的名称。这个配置用于指定事务服务组，Seata 将使用该组处理分布式事务。</span>
  <span class="c1"># 1.4.2 版本的默认事务分组名称为 `my_test_tx_group`，1.5 版本将改为 `default_tx_group`。</span>
  <span class="na">tx-service-group</span><span class="pi">:</span> <span class="s">default_tx_group</span>

  <span class="na">service</span><span class="pi">:</span>
    <span class="c1"># 事务分组与服务集群的映射关系</span>
    <span class="na">vgroup-mapping</span><span class="pi">:</span>
      <span class="c1"># 事务分组名称与服务集群名称的映射</span>
      <span class="c1"># 这里将 `default_tx_group` 映射到 `seata1` 服务集群</span>
      <span class="na">default_tx_group</span><span class="pi">:</span> <span class="s">seata1</span>

    <span class="c1"># 默认的服务集群配置</span>
    <span class="na">default</span><span class="pi">:</span>
      <span class="c1"># 服务集群列表。在此配置中，指定 `grouplist` 为 `consul`，表明 Seata 将使用 Consul 作为服务发现机制</span>
      <span class="na">grouplist</span><span class="pi">:</span> <span class="s">consul</span>
</code></pre></div></div>

<h3 id="tcc接口示例">TCC接口示例</h3>

<p>TCC 模式（Try-Confirm-Cancel）是一种确保分布式系统中事务一致性的方法，分为三个步骤：</p>

<ol>
  <li>Try：尝试执行某个操作，预留资源，确保所有操作能够成功执行，<strong>不实际执行操作，如果异常，必须能被Cancel阶段完全回滚</strong>。</li>
  <li>Confirm：所有操作成功执行后，提交资源的最终变更，<strong>实际执行操作</strong>。</li>
  <li>Cancel：如果操作失败，撤销预留的资源，回滚操作，<strong>注意：需要手动写代码还原状态</strong>。</li>
</ol>

<p>TCC模式确保了分布式事务的最终一致性，且通过 TCC 模式能减少锁竞争，提高性能。</p>

<p><strong>注意事项</strong></p>

<ul>
  <li>业务操作应确保幂等性，以防止重复操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Try</code> 阶段通常是“冻结资源”，而 <code class="language-plaintext highlighter-rouge">Confirm</code> 阶段是“实际扣减资源”。</li>
</ul>

<p>一个可能需要回滚，且是分布式调用的接口，现在需要<strong>拆分为3个方法</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@LocalTCC</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderServiceImpl</span> <span class="kd">implements</span> <span class="nc">OrderService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">OrderRepository</span> <span class="n">orderRepository</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"prepareCreateOrder"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareCreateOrder</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">userId</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Try 阶段：创建订单</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setProductId</span><span class="o">(</span><span class="n">productId</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setCount</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"PENDING"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">,</span> <span class="n">order</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">commit</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Confirm 阶段：确认订单</span>
        <span class="nc">Long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"CONFIRMED"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">rollback</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Cancel 阶段：取消订单</span>
        <span class="nc">Long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"CANCELLED"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><strong>以上即是对单一接口需要使用seata TCC模式的一个前提。运行流程</strong>：</p>

<ol>
  <li><strong>Try 阶段</strong>：在  <code class="language-plaintext highlighter-rouge">prepareCreateOrder</code> 方法中，会创建“未确认”的订单。</li>
  <li><strong>Confirm 阶段</strong>：如果整个事务正常执行，在 <code class="language-plaintext highlighter-rouge">commit</code> 方法中会<strong>确认订单状态</strong>。</li>
  <li><strong>Cancel 阶段</strong>：如果事务过程中出错，<code class="language-plaintext highlighter-rouge">rollback</code> 方法会<strong>取消订单</strong>。</li>
</ol>

<hr />

<p>以下是对它们的具体解释和关系：</p>

<p><strong>Try 阶段（<code class="language-plaintext highlighter-rouge">prepareCreateOrder</code>）</strong>：</p>

<ul>
  <li>检查业务资源是否满足执行条件（例如：检查库存是否足够）。预留或冻结资源，使得资源在本次操作中不可用（例如：检查库存是否足够、创建一个“待确认”的订单）。</li>
  <li>还可以记录一些重要的上下文信息（例如订单 ID），以便在后续的 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code> 阶段使用。</li>
  <li>这个阶段的操作<strong>必须是可补偿的</strong>（即可以撤销的）。</li>
  <li>如果这个阶段失败，整个事务将被终止，不会继续执行 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code>。</li>
  <li>如果在这个阶段出现异常抛出，则会进入<code class="language-plaintext highlighter-rouge">rollback</code>阶段。</li>
</ul>

<p>在上面的示例， <code class="language-plaintext highlighter-rouge">prepareCreateOrder</code> 方法中，订单服务会创建一个“待确认”的订单，其状态通常是 <code class="language-plaintext highlighter-rouge">PENDING</code> 或类似状态。</p>

<p>这个订单还没有被正式确认，这样做的目的是为订单创建过程预留一个位置，防止后续操作影响该资源。</p>

<p><strong>Confirm 阶段（<code class="language-plaintext highlighter-rouge">commit</code>）：</strong></p>

<ul>
  <li>当整个事务的所有 Try 阶段操作都成功时，Seata 将进入 <code class="language-plaintext highlighter-rouge">commit</code> 阶段。</li>
  <li>这个阶段正式确认事务操作，即最终提交资源变更（例如：实际扣减库存、确认订单，如将订单状态从 <code class="language-plaintext highlighter-rouge">PENDING</code> 改为 <code class="language-plaintext highlighter-rouge">CONFIRMED</code>），完成资源的最终变更。</li>
  <li><strong>注意</strong>：Confirm 操作必须保证最终一致性。它<strong>不应出现失败</strong>，因为这会影响事务的一致性。</li>
  <li>一旦进入 Confirm 阶段，意味着事务已经被提交，后续<strong>不能再回滚</strong>。</li>
</ul>

<p>在上面的示例，在 <code class="language-plaintext highlighter-rouge">commit</code> 方法中，将订单状态从 <code class="language-plaintext highlighter-rouge">PENDING</code> 更改为 <code class="language-plaintext highlighter-rouge">CONFIRMED</code>，表示订单已经正式生成。此时，订单信息已经固定下来，任何异常情况下都不应再取消订单。</p>

<p><strong>Cancel 阶段（<code class="language-plaintext highlighter-rouge">rollback</code>）：</strong></p>

<ul>
  <li>如果 Try 阶段执行失败或在业务中途发生了异常，Seata 会自动调用 <code class="language-plaintext highlighter-rouge">rollback</code> 方法来撤销所有已做的操作。</li>
  <li><strong>撤销 Try 阶段的操作</strong>，回滚已做的变更（例如：释放预扣库存、取消订单）。</li>
  <li>Rollback 需要保证事务的可补偿性，即<strong>能撤销所有在 Try 阶段完成的操作</strong>（例如，如果库存扣减操作成功，但确认阶段失败，你需要恢复库存）。</li>
</ul>

<p>在上面的示例，在 <code class="language-plaintext highlighter-rouge">rollback</code> 方法中，如果订单处于 <code class="language-plaintext highlighter-rouge">PENDING</code> 状态，则将其状态更改为 <code class="language-plaintext highlighter-rouge">CANCELLED</code>，表明订单被取消。这样，整个事务回滚了，订单不会被正式创建，用户也不会产生实际的购买行为。</p>

<h3 id="注解说明">注解说明</h3>

<p><strong><code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解需要<strong>标记在 <code class="language-plaintext highlighter-rouge">try</code> 阶段的方法</strong>，用于指定 TCC 事务的提交和回滚方法。具体参数说明如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 事务的名称，用于标识这个 TCC 事务。</li>
  <li><code class="language-plaintext highlighter-rouge">commitMethod</code>: 提交方法的名称。当事务被确认（Confirm）时调用。</li>
  <li><code class="language-plaintext highlighter-rouge">rollbackMethod</code>: 回滚方法的名称。当事务被取消（Cancel）时调用。</li>
</ul>

<p>这些参数帮助 Seata 在事务的 Confirm 和 Cancel 阶段正确地调用相应的方法，确保分布式事务的正确性。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@LocalTCC</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@LocalTCC</code> 注解用于标识一个实现了 TCC 模式的本地事务服务。它通常不需要参数，它的主要作用是标识类中哪些方法是需要支持 TCC 事务的。Seata 会扫描带有 <code class="language-plaintext highlighter-rouge">@LocalTCC</code> 注解的类，并自动将它们纳入 TCC 事务管理范围。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 是 Seata TCC 模式下用于标识在 TCC 事务的 <code class="language-plaintext highlighter-rouge">Try</code> 方法中需要传递到事务上下文中的参数的注解。这个注解可以帮助 Seata 将这些参数从 <code class="language-plaintext highlighter-rouge">Try</code> 阶段传递到 <code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。</p>

<p><strong>主要属性</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">value</code> / <code class="language-plaintext highlighter-rouge">paramName</code></strong>: 用于指定参数的名称，默认值为空字符串。<code class="language-plaintext highlighter-rouge">value</code> 和 <code class="language-plaintext highlighter-rouge">paramName</code> 是等效的，主要用于获取参数名称以在上下文中查找。</p>

<p><strong><code class="language-plaintext highlighter-rouge">isShardingParam</code></strong> (已废弃):表示是否是分片参数，但这个属性现在已经不再使用。</p>

<p><strong><code class="language-plaintext highlighter-rouge">index</code></strong>:用于指定参数在参数列表中的索引位置。此属性主要用于处理参数是以列表形式传递的情况。</p>

<p><strong><code class="language-plaintext highlighter-rouge">isParamInProperty</code></strong>:表示参数是否是对象的属性。如果 <code class="language-plaintext highlighter-rouge">index</code> 大于等于 0，这个属性指定是否需要从对象的属性中获取参数值。</p>

<p><strong>使用示例</strong></p>

<p>假设你有一个 <code class="language-plaintext highlighter-rouge">Try</code> 方法的签名如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareDecreaseInventory</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span>
</code></pre></div></div>

<p>可以使用 <code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 注解来指定哪些参数需要传递到事务上下文中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"InventoryService"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareDecreaseInventory</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span>
                                         <span class="nd">@BusinessActionContextParameter</span><span class="o">(</span><span class="n">paramName</span> <span class="o">=</span> <span class="s">"productId"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span>
                                         <span class="nd">@BusinessActionContextParameter</span><span class="o">(</span><span class="n">paramName</span> <span class="o">=</span> <span class="s">"count"</span><span class="o">)</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Try 阶段的逻辑</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">productId</code> 和 <code class="language-plaintext highlighter-rouge">count</code> 参数会被传递到 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中，这样它们可以在 <code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 方法中使用。</p>

<p><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 注解的作用类似于 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的 <code class="language-plaintext highlighter-rouge">addActionContext</code> 方法。通过这个注解，可以在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段自动将指定的参数添加到 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中，而不需要手动调用 <code class="language-plaintext highlighter-rouge">addActionContext</code> 方法，Seata 会自动处理这些参数的传递和保存。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 是 Seata 提供的一个注解，用于标记一个全局事务的开始。它主要用于处理分布式事务的场景，将多个本地事务组合成一个全局事务。</p>

<p><strong>作用</strong></p>

<p><strong>开启全局事务</strong>: <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 用于标记一个方法为全局事务的入口点。Seata 会为这个方法创建一个全局事务，并将方法内部调用的所有涉及的本地事务都纳入这个全局事务中。</p>

<p><strong>事务协调</strong>: 在方法执行过程中，Seata 会跟踪并协调这个全局事务中涉及的所有本地事务。如果方法执行成功，Seata 会提交全局事务；如果方法抛出异常，则会回滚全局事务，确保数据一致性。</p>

<p><strong>全局事务的传播</strong>: <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 会将其内部的所有本地事务纳入一个全局事务中，从而实现事务的分布式管理和一致性。</p>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解是 Seata 的核心注解之一，用于定义全局事务的行为和配置。它的参数允许你精确控制事务的超时、回滚策略、锁策略等。在配置分布式事务时，这些参数帮助确保事务的一致性和正确性。</p>

<p><strong>参数详解</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">timeoutMills</code></strong>:指定全局事务的超时时间（单位：毫秒）。如果全局事务在这个时间内没有完成，Seata 会<strong>强制回滚</strong>这个事务。默认值为<code class="language-plaintext highlighter-rouge">60000ms</code>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">name</code></strong>:指定全局事务的名称。可以用来在日志和监控中识别这个全局事务。默认值: 空字符串。</p>

<p><strong><code class="language-plaintext highlighter-rouge">rollbackFor</code></strong>:指定<strong>需要回滚</strong>的异常类型。当方法执行过程中抛出这些异常时，全局事务会被回滚。默认值: 空数组。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">rollbackForClassName</code></strong>:指定<strong>需要回滚</strong>的异常类名。与 <code class="language-plaintext highlighter-rouge">rollbackFor</code> 类似，但使用异常类名的字符串形式。默认值：空数组。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">rollbackForClassName</span> <span class="o">=</span> <span class="o">{</span><span class="s">"java.lang.RuntimeException"</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">noRollbackFor</code></strong>:指定不需要回滚的异常类型。当方法抛出这些异常时，全局事务<strong>不会回滚</strong>。默认值: 空数组。<strong>示例</strong>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">noRollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">noRollbackForClassName</code></strong>: 指定不需要回滚的异常类名。与 <code class="language-plaintext highlighter-rouge">noRollbackFor</code> 类似，但使用异常类名的字符串形式。默认值: 空数组，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">noRollbackForClassName</span> <span class="o">=</span> <span class="o">{</span><span class="s">"java.lang.IllegalArgumentException"</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">propagation</code></strong>:指定全局事务的传播行为。定义了事务的传播方式。默认值: <code class="language-plaintext highlighter-rouge">Propagation.REQUIRED</code>，即如果 transaction 存在，则使用当前事务执行，否则使用新事务执行。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="nc">Propagation</span><span class="o">.</span><span class="na">REQUIRES_NEW</span><span class="o">)</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryInterval</code></strong>:自定义全局锁的重试间隔时间（单位：毫秒）。用于覆盖全局配置中的锁重试间隔。默认值: 0，表示使用全局配置。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockRetryInterval</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">)</span> 
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryInternal</code></strong> (已过时):自定义全局锁的重试间隔时间（单位：毫秒）。与 <code class="language-plaintext highlighter-rouge">lockRetryInterval</code> 类似，但这个参数已经过时，不再推荐使用。默认值: 0，示例:</p>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryTimes</code></strong>:自定义全局锁的重试次数。用于覆盖全局配置中的锁重试次数。默认值: -1，表示使用全局配置，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockRetryTimes</span> <span class="o">=</span> <span class="mi">5</span><span class="o">)</span> 
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockStrategyMode</code></strong>:指定锁的策略模式。可以选择乐观锁（<code class="language-plaintext highlighter-rouge">OPTIMISTIC</code>）或悲观锁（<code class="language-plaintext highlighter-rouge">PESSIMISTIC</code>）。默认值: <code class="language-plaintext highlighter-rouge">LockStrategyMode.PESSIMISTIC</code>，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockStrategyMode</span> <span class="o">=</span> <span class="nc">LockStrategyMode</span><span class="o">.</span><span class="na">OPTIMISTIC</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="使用全局事务">使用全局事务</h3>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解主要用于管理分布式事务的全局事务，确保在不同微服务之间的操作能够保持一致性。它的作用主要集中在 <strong>Try</strong>、<strong>Confirm</strong> 和 <strong>Cancel</strong> 阶段的事务管理上。</p>

<p>在使用 <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解的方法中，也可以自由地使用普通的查询接口或服务方法，只要它们本身不涉及事务的提交或回滚。查询接口一般不参与全局事务的管理，因此不需要处理回滚或提交的问题。具体来说，这些查询接口可以是：</p>

<ul>
  <li><strong>数据库查询</strong>：如使用 MyBatis、JPA、Hibernate 等进行的数据库查询。</li>
  <li><strong>调用其他服务</strong>：如调用其他微服务的 REST API 或 Feign 客户端。</li>
</ul>

<p><strong>需要注意的事项</strong></p>

<p><strong>事务一致性</strong>：</p>

<ul>
  <li>如果<code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 方法中使用了普通的查询接口，需要确保这些操作不会影响到全局事务的一致性。</li>
  <li>确保在全局事务的 Try 阶段中进行的所有操作都能够在 Confirm 和 Cancel 阶段得到正确的处理。</li>
</ul>

<p><strong>性能影响</strong>：</p>

<ul>
  <li>如果查询操作涉及到大量的数据或复杂的逻辑，这可能会对全局事务的性能产生影响。</li>
  <li>确保查询操作是优化过的，并且不会导致长时间的锁定或延迟。</li>
</ul>

<p><strong>异常处理</strong>：</p>

<ul>
  <li>在全局事务中，如果查询接口出现异常，确保这些异常能够被捕获并正确处理，以避免事务的回滚机制被破坏。</li>
</ul>

<p>使用全局事务，调用之前适配好分布式事务的接口示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span>
<span class="nd">@Autowired</span>
<span class="kd">private</span> <span class="nc">OrderService</span> <span class="n">orderService</span><span class="o">;</span>
<span class="nd">@GlobalTransactional</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test1"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test1</span><span class="o">(){</span>
	<span class="n">orderService</span><span class="o">.</span><span class="na">prepareCreateOrder</span><span class="o">(...);</span>
    <span class="o">...</span>
<span class="o">}</span>
<span class="o">...</span>
</code></pre></div></div>

<h3 id="各阶段的数据传递">各阶段的数据传递</h3>

<p>在Seata的TCC（Try-Confirm-Cancel）模式中，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是一个非常关键的对象，它用于在分布式事务的各个阶段（Try、Confirm、Cancel）之间传递数据和上下文信息。它帮助事务中的每个阶段共享信息，确保整个TCC事务的正确执行。</p>

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是由 Seata 框架在调用 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解的 TCC 接口时<strong>自动创建和传递的</strong>。它是分布式事务的上下文对象，包含了事务ID（XID）以及在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段生成的业务参数。以下是 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的来源和生命周期：</p>

<p><strong>在Try阶段生成：</strong></p>
<ul>
  <li>当执行标记为 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 的方法时，Seata会自动创建一个 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象会自动传递给 <code class="language-plaintext highlighter-rouge">Try</code> 方法的参数。</li>
  <li>在 <code class="language-plaintext highlighter-rouge">Try</code> 方法中，可以将需要共享的数据存入 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，这些数据将在后续的 <code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段使用。</li>
</ul>

<p><strong>在Confirm和Cancel阶段使用：</strong></p>
<ul>
  <li>当事务成功（调用 <code class="language-plaintext highlighter-rouge">Confirm</code> 方法）或回滚（调用 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法）时，Seata会将同样的 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象传递给对应的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法可以从 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中获取在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段存储的数据（如业务ID、状态等），确保业务的一致性处理。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的作用</strong></p>

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的主要作用是<strong>传递事务上下文数据</strong>，确保分布式事务各个阶段的数据一致性和可用性。即：</p>

<p><strong>携带全局事务ID（XID）：</strong>Seata TCC事务的每个阶段（Try、Confirm、Cancel）需要关联同一个全局事务ID（XID）。<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中包含了这个事务ID，确保所有阶段都属于同一事务。</p>

<p><strong>传递业务参数：</strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 允许在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段传递参数，并在 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段读取这些参数。你可以在 <code class="language-plaintext highlighter-rouge">Try</code> 方法中将需要的数据（例如订单ID、用户ID等）放入 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，并在 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 中使用。</p>

<p><strong>支持幂等性处理：</strong>在分布式系统中，网络波动或其他异常情况可能会导致 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法被多次调用。通过 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递的数据，可以用来做幂等性检查，避免重复执行业务操作。</p>

<p><strong>支持悬挂控制：</strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 还可以用于处理“悬挂问题”，即当 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段执行在 <code class="language-plaintext highlighter-rouge">Try</code> 之前时，通过 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 可以检测是否存在 <code class="language-plaintext highlighter-rouge">Try</code> 的执行，进而决定是否执行 <code class="language-plaintext highlighter-rouge">Cancel</code>。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code>具有以下方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">getActionContext()</code></strong>：获取在 Try 阶段存储的业务数据。通常在 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code> 阶段，通过 <code class="language-plaintext highlighter-rouge">getActionContext()</code> 方法获取在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段存储的数据。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"key"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li><strong>参数</strong>：<code class="language-plaintext highlighter-rouge">key</code> 是存储数据时的键。</li>
  <li><strong>返回值</strong>：返回与该键关联的值，类型为 <code class="language-plaintext highlighter-rouge">Object</code>，需要进行类型转换。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">addActionContext()</code></strong>：在 Try 阶段保存业务数据，用于后续的 Confirm 或 Rollback 阶段使用。在 <code class="language-plaintext highlighter-rouge">prepare</code> 方法中，调用 <code class="language-plaintext highlighter-rouge">addActionContext()</code> 将业务数据存储在上下文中。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">context</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">,</span> <span class="n">orderId</span><span class="o">);</span>
<span class="n">context</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"userId"</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li><strong>参数</strong>：<code class="language-plaintext highlighter-rouge">key</code>：数据的键，<code class="language-plaintext highlighter-rouge">value</code>：要存储的数据值。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">getXid()</code></strong>：获取全局事务ID（<code class="language-plaintext highlighter-rouge">Xid</code>），用于标识当前事务，在事务处理或日志中非常有用。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">xid</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getXid</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getBranchId()</code></strong>：获取当前分支事务的ID。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">branchId</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBranchId</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isDelayReporting()</code></strong>：判断当前事务是否设置了延迟上报。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">isDelayed</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">isDelayReporting</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getPhase()</code></strong>：获取当前事务的阶段（如 Try、Confirm、Rollback）。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BusinessActionContext</span><span class="o">.</span><span class="na">BusinessActionContextPhase</span> <span class="n">phase</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getPhase</span><span class="o">();</span>
</code></pre></div></div>

<ul>
  <li><strong>返回值</strong>：返回事务的当前阶段，类型为 <code class="language-plaintext highlighter-rouge">BusinessActionContext.BusinessActionContextPhase</code>。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code></strong> <strong>是必须的</strong>。它是Seata框架用来传递事务上下文信息的关键组件，即在TCC这三个方式的第一个形参必须是<code class="language-plaintext highlighter-rouge">BusinessActionContext</code>。</p>

<p>即使你的业务代码中不直接使用 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，你仍然需要在 TCC 接口方法中留一个 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 作为第一个参数，以便 Seata 能够正常控制事务。它负责管理和传递事务上下文信息，从而让 Seata 知道如何协调 Try、Confirm 和 Cancel 阶段的操作。</p>

<hr />

<p>对于使用<code class="language-plaintext highlighter-rouge">BusinessActionContext</code>传递信息，还有一些注意的问题：</p>

<p>在 Seata TCC 模式下，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 会通过分布式系统进行传递，这个过程通常涉及到<strong>序列化</strong>和<strong>反序列化</strong>。在序列化和反序列化的过程中，Java 对象的类型可能发生变化，尤其是涉及基础数据类型时。</p>

<p>示例：<code class="language-plaintext highlighter-rouge">long</code> 类型传值导致的类型变化</p>

<p><strong>Try 阶段：传递 <code class="language-plaintext highlighter-rouge">long</code> 类型值</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@LocalTCC</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TCCInventoryChange</span> <span class="o">{</span>

    <span class="nd">@Transactional</span>
    <span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TCCInventoryChange"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepare</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="kt">long</span> <span class="n">productId</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 将 long 类型的 productId 放入 ActionContext</span>
        <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">,</span> <span class="n">productId</span><span class="o">);</span>  
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>  <span class="c1">// 返回成功</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Commit 阶段：取出 <code class="language-plaintext highlighter-rouge">productId</code></strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">commit</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 试图以 long 类型取出 productId</span>
    <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">);</span>
    <span class="c1">// 处理业务逻辑...</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是，实际在执行时可能会抛出 <code class="language-plaintext highlighter-rouge">ClassCastException</code>，因为 <code class="language-plaintext highlighter-rouge">actionContext.getActionContext("productId")</code> 实际上返回的是 <code class="language-plaintext highlighter-rouge">Integer</code>，而不是 <code class="language-plaintext highlighter-rouge">Long</code>，即使我们在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段传递的是 <code class="language-plaintext highlighter-rouge">long</code> 类型。</p>

<p><strong>问题出现原因：序列化导致的类型变化</strong></p>

<p>这是由于 Java 序列化机制在处理基础数据类型时的行为不同。例如，Java 会自动进行类型提升和转换。在 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 经过序列化和反序列化后，Seata 可能将原本的 <code class="language-plaintext highlighter-rouge">long</code> 类型转换成了 <code class="language-plaintext highlighter-rouge">Integer</code>。</p>

<p>详细说明</p>

<p><strong>序列化与反序列化过程</strong>
   在分布式系统中，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 会在不同的节点间传递，传递时会进行序列化和反序列化。序列化是指将对象转换为字节流以便传输，而反序列化则是将字节流重新转换为对象。在序列化过程中，某些数据类型，特别是基础类型（如 <code class="language-plaintext highlighter-rouge">long</code>、<code class="language-plaintext highlighter-rouge">int</code>），有时会在反序列化后出现类型变化。例如，<code class="language-plaintext highlighter-rouge">long</code> 类型可能会因为存储方式在反序列化后变成 <code class="language-plaintext highlighter-rouge">Integer</code>。</p>

<p><strong>基础类型自动转换</strong>
   Java 在处理基础类型时，可能会进行自动的类型提升或缩减。例如，如果你存储一个数值类型较小的 <code class="language-plaintext highlighter-rouge">long</code>，它在某些情况下可能会被自动转换为 <code class="language-plaintext highlighter-rouge">Integer</code>。特别是在序列化时，Java 可能将小范围的 <code class="language-plaintext highlighter-rouge">long</code>（如 <code class="language-plaintext highlighter-rouge">long</code> 值不超过 <code class="language-plaintext highlighter-rouge">Integer.MAX_VALUE</code>）转换为 <code class="language-plaintext highlighter-rouge">Integer</code>，以节省存储空间。</p>

<p><strong>Seata 内部机制</strong>
   Seata 在 TCC 模式下可能通过 JSON 序列化（如使用 Jackson 或 FastJSON）来传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>。在某些情况下，JSON 序列化的机制会对数值类型进行优化，并且在反序列化时，如果没有明确指定类型，较小范围的 <code class="language-plaintext highlighter-rouge">long</code> 会被当作 <code class="language-plaintext highlighter-rouge">Integer</code> 反序列化。</p>

<p>解决方案</p>

<p>为了避免这种类型转换的问题，尤其是在处理基础数据类型时，可以采取以下几种措施：</p>

<p><strong>使用显式类型检查和转换</strong>
   在获取上下文参数时，显式地检查对象的类型，避免直接进行类型转换。可以先检查 <code class="language-plaintext highlighter-rouge">Object</code> 的类型再进行强制转换：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Object</span> <span class="n">productIdObj</span> <span class="o">=</span> <span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">);</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">productIdObj</span> <span class="k">instanceof</span> <span class="nc">Long</span><span class="o">)</span> <span class="o">{</span>
       <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">productIdObj</span><span class="o">;</span>
   <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">productIdObj</span> <span class="k">instanceof</span> <span class="nc">Integer</span><span class="o">)</span> <span class="o">{</span>
       <span class="c1">// 处理 long 被序列化为 Integer 的情况</span>
       <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">((</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">productIdObj</span><span class="o">).</span><span class="na">longValue</span><span class="o">();</span>
   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
       <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"Unexpected type for productId"</span><span class="o">);</span>
   <span class="o">}</span>
</code></pre></div></div>

<p><strong>序列化时强制指定类型</strong>
   在传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 数据时，使用 <code class="language-plaintext highlighter-rouge">Long</code> 对象来代替基础类型 <code class="language-plaintext highlighter-rouge">long</code>。这样，序列化时会保留对象的精确类型：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">,</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">productId</span><span class="o">));</span>
</code></pre></div></div>

<p><strong>使用 JSON 序列化配置</strong>
   如果使用的是 JSON 序列化框架（如 Jackson 或 FastJSON），可以通过配置序列化框架来确保数值类型不会在序列化或反序列化过程中发生变化。例如，使用 Jackson 的 <code class="language-plaintext highlighter-rouge">DeserializationFeature.USE_LONG_FOR_INTS</code> 选项，可以强制将所有整数类型都反序列化为 <code class="language-plaintext highlighter-rouge">long</code> 类型。</p>

<p>使用 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递基础类型时，序列化导致类型变化的情况主要发生在基础类型（如 <code class="language-plaintext highlighter-rouge">long</code> 和 <code class="language-plaintext highlighter-rouge">int</code>）的自动转换过程中。为了避免这种情况，建议在代码中加入类型检查，或者通过序列化框架的配置确保类型的一致性。</p>

<h3 id="方法返回值类型">方法返回值类型</h3>

<p>在 Seata TCC 模式下，方法的返回值并没有严格的要求，但有一些约定和最佳实践，特别是在 <code class="language-plaintext highlighter-rouge">Try</code>、<code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段执行时：</p>

<p><strong>Try 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Try</code> 方法需要返回一个布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>）的值，表示准备操作是否成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示 Try 阶段执行成功，Seata 会继续执行 <code class="language-plaintext highlighter-rouge">Confirm</code> 阶段。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示 Try 阶段执行失败，Seata 会立即执行 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。</li>
</ul>

<p><strong>Confirm 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Confirm</code> 方法的返回值通常也是布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>），用于告诉 Seata 确认操作是否执行成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示 <code class="language-plaintext highlighter-rouge">Confirm</code> 操作成功，事务可以提交。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示 <code class="language-plaintext highlighter-rouge">Confirm</code> 操作失败，但一般不会影响全局事务，因为全局事务在 <code class="language-plaintext highlighter-rouge">Try</code> 成功后已经被认为提交。</li>
</ul>

<p><strong>Cancel 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Cancel</code> 方法的返回值同样是布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>），用于告诉 Seata 回滚操作是否执行成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示回滚成功，Seata 会认为事务已经被成功回滚。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示回滚失败，此时 Seata 可能会进行重试，直到回滚成功或达到重试上限。</li>
</ul>

<p><strong>返回值的影响</strong></p>

<ul>
  <li><strong>Try 阶段返回值</strong>：<strong>影响全局事务的决策</strong>，如果 Try 返回 <code class="language-plaintext highlighter-rouge">false</code>，Seata 会立即调用 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法，标记事务失败。</li>
  <li><strong>Confirm 阶段返回值</strong>：理论上不会影响全局事务的提交，即使 <code class="language-plaintext highlighter-rouge">Confirm</code> 方法失败，Seata 也会认为事务已经提交成功。</li>
  <li><strong>Cancel 阶段返回值</strong>：如果 <code class="language-plaintext highlighter-rouge">Cancel</code> 返回 <code class="language-plaintext highlighter-rouge">false</code>，Seata 会进行<strong>重试</strong>，确保事务资源被成功回滚。</li>
</ul>

<p><strong>其他返回值</strong></p>

<p>虽然 TCC 的标准返回类型为 <code class="language-plaintext highlighter-rouge">boolean</code>，但如果你有自定义需求，可以返回其他类型的值， Seata <strong>仅关心 <code class="language-plaintext highlighter-rouge">Try</code> 方法的返回值是否为 <code class="language-plaintext highlighter-rouge">true</code></strong>，来决定是否继续 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code>。</p>

<h3 id="调用接口">调用接口</h3>

<p>在Seata的TCC模式下，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是由Seata自动注入的，但它<strong>必须</strong>放在TCC接口方法的<strong>第一个参数位置</strong>，然后才是业务参数。</p>

<p>Seata的TCC拦截器要求 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是第一个参数，这样Seata才能在执行全局事务的各个阶段时自动注入这个上下文。如果放在其他位置，Seata无法识别该参数，从而导致TCC事务处理失败。</p>

<p>当你调用 TCC 的 <code class="language-plaintext highlighter-rouge">prepare</code>方法时，不需要显式创建或传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，Seata会在执行拦截时自动注入。也就是说，当你调用时，可以将 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递为 <code class="language-plaintext highlighter-rouge">null</code>，Seata在执行过程中会为其生成并注入实际的上下文对象。</p>

<p>对于之前省略实参的：<code class="language-plaintext highlighter-rouge">orderService.prepareCreateOrder(...);</code>，正确的调用方式为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">orderService</span><span class="o">.</span><span class="na">prepareCreateOrder</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="n">userId</span><span class="o">,</span><span class="n">productId</span><span class="o">,</span><span class="n">count</span><span class="o">);</span>
</code></pre></div></div>

<p>另外，在Seata的TCC模式下，<code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 是由Seata在全局事务的不同阶段<strong>自动调用</strong>的。你只需要在业务代码中显式调用 <code class="language-plaintext highlighter-rouge">prepare</code>（也称为Try方法）来尝试预留资源。</p>

<p>具体来说：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">prepare</code>（Try阶段）是由你的业务代码<strong>显式调用</strong>的，用于预留资源或执行其他初步操作。</li>
  <li><code class="language-plaintext highlighter-rouge">commit</code>（Confirm阶段）和<code class="language-plaintext highlighter-rouge">rollback</code>（Cancel阶段）会根据全局事务的执行结果（成功或失败）由Seata自动调用，以完成事务提交或回滚。</li>
</ul>

<p><strong>你不需要也不能直接调用 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code>，它们会根据全局事务的状态自动触发</strong>。</p>

<h3 id="与本地事务的比较">与本地事务的比较</h3>

<p>本地事务（使用 <code class="language-plaintext highlighter-rouge">@Transactional</code>）</p>

<ul>
  <li><strong>回滚机制</strong>：当在一个单一的数据源中操作时，Spring 的 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解可以在发生异常时自动进行回滚。这意味着如果在事务过程中出现任何运行时异常（或被配置为回滚的异常），Spring 会自动回滚事务，撤销所有对数据库的更改，确保数据一致性。</li>
  <li><strong>事务管理</strong>：Spring 自动管理事务的开始、提交和回滚。只需配置 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解，并确保异常能够被捕获并且未被处理。</li>
</ul>

<p>分布式事务（使用 Seata TCC、XA、等）</p>

<ul>
  <li><strong>事务模型</strong>：在分布式环境中，事务涉及多个服务或数据源，不能依赖于单一的事务管理机制。因此，需要使用分布式事务解决方案（如 Seata、XA、TCC）来协调这些事务的执行。
    <ul>
      <li><strong>TCC</strong>（Try-Confirm-Cancel）：分为 <code class="language-plaintext highlighter-rouge">Try</code>、<code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。<strong>需要自己实现这些阶段的逻辑，以确保在失败情况下能够进行回滚或恢复</strong>。</li>
      <li><strong>XA</strong>：基于两阶段提交协议，适用于需要强一致性的分布式事务，但实现和维护较复杂。</li>
    </ul>
  </li>
  <li><strong>自定义回滚逻辑</strong>：分布式事务通常需要手动管理回滚逻辑。如果某个服务的操作失败，需要确保其他服务能够正确地执行回滚操作，恢复系统到一致性状态。这通常通过实现 <code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 方法来完成。</li>
</ul>

<p>为什么分布式事务需要更多手动处理？</p>

<ul>
  <li><strong>复杂性</strong>：在分布式环境中，事务涉及多个服务或数据源，它们可能在网络上分布，事务的协调和管理变得更加复杂。</li>
  <li><strong>一致性保障</strong>：为了确保系统的一致性和完整性，需要手动实现各个阶段的逻辑，确保在任何阶段的失败都能够正确地进行回滚或恢复。</li>
  <li><strong>网络和系统故障</strong>：分布式系统中可能会遇到网络延迟、故障或其他不可预见的问题，这要求分布式事务解决方案具备更强的容错性和恢复能力。</li>
</ul>

<p>总之，分布式事务相较于本地事务更复杂，需要额外的事务协调机制和手动管理回滚逻辑。然而，它们为分布式系统提供了必要的一致性保证，使得在多服务或多数据源环境中进行可靠的事务处理成为可能。</p>

<hr />

<p>在使用分布式事务框架（如 Seata 的 TCC 模式）时，<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解在每个方法中的作用和意义如下：</p>

<p><strong>确保本地事务的一致性</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 注解用于标记一个方法需要运行在事务中。它确保方法内的数据库操作是原子的，即要么全部成功，要么全部失败。在 TCC 模式下，即使分布式事务的各个步骤有独立的事务控制，<code class="language-plaintext highlighter-rouge">@Transactional</code> 仍然是必要的：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">prepare</code> 方法</strong>：确保即使在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段操作失败或发生异常，本地事务也能正确回滚，避免数据不一致。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">commit</code> 方法</strong>：确保在 <code class="language-plaintext highlighter-rouge">commit</code> 阶段对数据库的操作是原子的。虽然 <code class="language-plaintext highlighter-rouge">commit</code> 只是确认操作，但仍然需要事务保证操作的一致性。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">rollback</code> 方法</strong>：如果在 <code class="language-plaintext highlighter-rouge">commit</code> 阶段失败，<code class="language-plaintext highlighter-rouge">rollback</code> 方法应当回滚 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段的操作，<code class="language-plaintext highlighter-rouge">@Transactional</code> 确保这一回滚是安全的。</li>
</ul>

<p><strong>提供事务隔离和一致性</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 控制事务的隔离级别、传播行为、超时时间等，确保方法内部的数据库操作符合预期的事务要求：</p>

<ul>
  <li><strong>隔离级别</strong>：防止不同事务之间的干扰，避免读到不一致的数据。</li>
  <li><strong>传播行为</strong>：确定方法执行时事务的传播方式，比如是否加入到当前事务中。</li>
</ul>

<p><strong>异常处理和事务回滚</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 确保方法内部抛出的运行时异常（unchecked exception）会导致事务回滚。这样可以保证在遇到异常时，所有的数据库操作都能够被回滚到操作之前的状态，保持数据的一致性。</p>

<p>虽然 TCC 模式主要处理分布式事务的协调，<strong>但在每个本地事务中，使用 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解仍然是确保数据一致性的关键。</strong></p>

<h3 id="事务幂等悬挂和空回滚">事务幂等、悬挂和空回滚</h3>

<p><strong>空回滚</strong></p>

<p>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。</p>

<p>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</p>

<p><strong>业务悬挂</strong></p>

<p>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</p>

<p>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</p>

<hr />

<p>TCC 模式中存在的三大问题是幂等、悬挂和空回滚，而新版seata解决了上述问题：<a href="https://seata.apache.org/zh-cn/blog/seata-tcc-fence/">链接</a>。</p>

<p>在 Seata1.5.1 版本中，增加了一张事务控制表，表名是 <code class="language-plaintext highlighter-rouge">tcc_fence_log</code> 来解决这个问题。 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解中有一个属性 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 就是来指定是否开启这个机制，这个属性值默认是 <code class="language-plaintext highlighter-rouge">false</code>。</p>

<p>首先，在自己的数据库添加一个事务控制表：<code class="language-plaintext highlighter-rouge">tcc_fence_log</code>， 建表语句如下（MySQL 语法）：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="nv">`tcc_fence_log`</span>
<span class="p">(</span>
    <span class="nv">`xid`</span>           <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>  <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'global id'</span><span class="p">,</span>
    <span class="nv">`branch_id`</span>     <span class="nb">BIGINT</span>        <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'branch id'</span><span class="p">,</span>
    <span class="nv">`action_name`</span>   <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'action name'</span><span class="p">,</span>
    <span class="nv">`status`</span>        <span class="nb">TINYINT</span>       <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'status(tried:1;committed:2;rollbacked:3;suspended:4)'</span><span class="p">,</span>
    <span class="nv">`gmt_create`</span>    <span class="nb">DATETIME</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'create time'</span><span class="p">,</span>
    <span class="nv">`gmt_modified`</span>  <span class="nb">DATETIME</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'update time'</span><span class="p">,</span>
    <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="nv">`xid`</span><span class="p">,</span> <span class="nv">`branch_id`</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nv">`idx_gmt_modified`</span> <span class="p">(</span><span class="nv">`gmt_modified`</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nv">`idx_status`</span> <span class="p">(</span><span class="nv">`status`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span> <span class="o">=</span> <span class="n">InnoDB</span>
<span class="k">DEFAULT</span> <span class="n">CHARSET</span> <span class="o">=</span> <span class="n">utf8mb4</span><span class="p">;</span>
</code></pre></div></div>

<p>然后在<code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code>，开启<code class="language-plaintext highlighter-rouge">useTCCFence</code>即可。</p>

<p>开启<code class="language-plaintext highlighter-rouge">useTCCFence</code>后，TCC阶段的转换逻辑会发生变化：</p>

<table>
  <thead>
    <tr>
      <th>阶段</th>
      <th>useTCCFence</th>
      <th>异常</th>
      <th>程序停止</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>try</td>
      <td>true</td>
      <td>暂停</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Confirm</td>
      <td>true</td>
      <td>重试</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Cancel</td>
      <td>true</td>
      <td>重试</td>
      <td>重试</td>
    </tr>
    <tr>
      <td>try</td>
      <td>false</td>
      <td>多次执行Cancel</td>
      <td>无操作/还原（加本地事务）</td>
    </tr>
    <tr>
      <td>Confirm</td>
      <td>false</td>
      <td>多次重试</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Cancel</td>
      <td>false</td>
      <td>多次重试</td>
      <td>无操作</td>
    </tr>
  </tbody>
</table>

<p>开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后的行为主要与解决 TCC 模式下的悬挂问题有关。悬挂问题指的是在 TCC 模式下，当 Confirm 或 Cancel 阶段因为某种原因没有被执行时，可能会导致资源长时间处于锁定状态，影响系统的正常运行。<code class="language-plaintext highlighter-rouge">useTCCFence</code> 就是用来防止这类问题的发生。</p>

<p>以下是开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后的行为总结：</p>

<ol>
  <li>
    <p><strong>记录尝试操作</strong>：当开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后，在执行 TCC 的 Try 阶段时，Seata 会记录这次操作，并将其持久化到数据库中。</p>
  </li>
  <li>
    <p><strong>检查确认/取消请求</strong>：在 Confirm 或 Cancel 阶段到来之前，Seata 会先检查是否有对应的 Try 操作记录存在。如果没有找到匹配的 Try 记录，则认为这是一个非法的请求，可能是由于网络重试或其他异常情况导致的重复调用。</p>
  </li>
  <li>
    <p><strong>避免悬挂事务</strong>：通过上述机制，可以有效地避免因 Confirm 或 Cancel 请求丢失而造成的悬挂事务问题。如果系统重启或服务宕机后恢复，未完成的 TCC 事务可以通过这些记录来进行补偿处理。</p>
  </li>
  <li>
    <p><strong>清理过期记录</strong>：对于那些已经完成了 Confirm 或 Cancel 操作的 Try 记录，Seata 会在一段时间之后自动清理它们以节省存储空间并保持系统清洁。</p>
  </li>
  <li>
    <p><strong>提高系统稳定性</strong>：整体而言，启用 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 能够帮助增强 TCC 模式的鲁棒性，减少由外部因素引起的服务不稳定状况，确保分布式事务能够按照预期的方式正确地执行完毕。</p>
  </li>
</ol>

<p>需要注意的是，使用 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 功能可能需要对现有的 TCC 业务代码进行一些调整，并且要保证相应的存储支持持久化记录的能力。此外，还需要合理配置超时时间等参数以适应不同的业务场景。</p>

<h3 id="部署">部署</h3>

<p>要将seata部署到k8s上：</p>

<ul>
  <li>首先下载doker镜像</li>
  <li>新建容器设置好端口并运行</li>
  <li>然后修改<code class="language-plaintext highlighter-rouge">seata-server.resources/application.yml</code>文件为你需要的配置。</li>
  <li>将容器打包为镜像：<code class="language-plaintext highlighter-rouge">docker commit [容器ID] [镜像名称:tag]</code></li>
  <li>注意镜像名称，如果要推送到harbor，则需要添加前缀：<code class="language-plaintext highlighter-rouge">local.harbor/</code>。</li>
  <li>推送到harbor：<code class="language-plaintext highlighter-rouge">docker push [name:tag]</code></li>
  <li>使用k8s配置拉取镜像，并保留相应的接口即可</li>
</ul>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">分布式锁的使用</title><link href="/2024/09/20/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8/" rel="alternate" type="text/html" title="分布式锁的使用" /><published>2024-09-20T00:00:00+08:00</published><updated>2024-09-20T00:00:00+08:00</updated><id>/2024/09/20/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8</id><content type="html" xml:base="/2024/09/20/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8/"><![CDATA[<h1 id="引言">引言</h1>

<p>Consul 的分布式锁机制是一种基于键值存储 (KV) 和会话 (Session) 的乐观锁机制，通常用于协调多个分布式系统或微服务之间的并发访问，确保资源的一致性和避免冲突。</p>

<h1 id="consul分布式锁">Consul分布式锁</h1>

<p>Consul 分布式锁的原理</p>

<ol>
  <li>
    <p><strong>KV 键值存储</strong>：Consul 的 KV 存储用于保存锁的状态，锁的持有者会在特定的 KV 键上写入锁相关的信息（如会话 ID）。</p>
  </li>
  <li>
    <p><strong>会话 (Session)</strong>：会话是 Consul 锁机制的核心。每个锁与一个会话相关联，会话可以有一个 TTL（超时时间）。如果持有锁的客户端失去连接，Consul 会自动释放锁（即删除相关会话）。这避免了“死锁”问题。</p>
  </li>
  <li>
    <p><strong>锁的获取</strong>：客户端在尝试获取锁时，需要创建一个 Consul 会话，并使用 <code class="language-plaintext highlighter-rouge">PUT</code> 操作尝试在指定的 KV 键上绑定会话 ID。Consul 会将这个 <code class="language-plaintext highlighter-rouge">PUT</code> 操作视为一次原子性的操作。如果 KV 键已经存在且被其他会话占用，当前操作将失败。</p>
  </li>
  <li>
    <p><strong>锁的释放</strong>：锁持有者可以手动删除绑定的 KV 键或者销毁会话来释放锁。一旦会话销毁，锁将自动释放，其他客户端可以再次尝试获取锁。</p>
  </li>
</ol>

<p>Consul 分布式锁的流程</p>

<ol>
  <li>
    <p><strong>创建会话</strong>：锁的持有者需要先向 Consul 注册一个会话 (<code class="language-plaintext highlighter-rouge">SessionCreate</code>)。会话可以有一个 TTL，表示持有锁的最长时间。</p>
  </li>
  <li><strong>获取锁</strong>：
    <ul>
      <li>使用 <code class="language-plaintext highlighter-rouge">PUT</code> 请求将会话 ID 绑定到特定的 KV 键上。</li>
      <li>如果绑定成功，客户端持有锁；如果该 KV 键已经绑定到其他会话 ID，则锁获取失败。</li>
    </ul>
  </li>
  <li><strong>自动释放锁</strong>：
    <ul>
      <li>如果持有锁的客户端未在会话的 TTL 内刷新会话，Consul 会自动销毁会话并释放锁。</li>
      <li>这确保了如果客户端崩溃或掉线，锁不会长时间被占用。</li>
    </ul>
  </li>
  <li><strong>手动释放锁</strong>：
    <ul>
      <li>客户端可以显式销毁会话 (<code class="language-plaintext highlighter-rouge">SessionDestroy</code>) 或删除与锁关联的 KV 键来释放锁。</li>
    </ul>
  </li>
</ol>

<p>实现 Consul 分布式锁的关键 API</p>

<p><strong>Session Create (创建会话)</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> PUT <span class="se">\</span>
  <span class="nt">--data</span> <span class="s1">'{"LockDelay": "15s", "TTL": "10s", "Name": "my-lock"}'</span> <span class="se">\</span>
  http://localhost:8500/v1/session/create
</code></pre></div></div>
<p>会话的 TTL 表示锁的持有者必须在这个时间范围内继续保持活跃。</p>

<p><strong>Lock (获取锁)</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> PUT <span class="se">\</span>
  <span class="nt">--data</span> <span class="s1">'my-session-id'</span> <span class="se">\</span>
  http://localhost:8500/v1/kv/my-key?acquire<span class="o">=</span>my-session-id
</code></pre></div></div>
<p>通过这个命令，客户端尝试获取与 <code class="language-plaintext highlighter-rouge">my-key</code> 相关的锁。</p>

<p><strong>Release (释放锁)</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> PUT <span class="se">\</span>
  <span class="nt">--data</span> <span class="s1">'my-session-id'</span> <span class="se">\</span>
  http://localhost:8500/v1/kv/my-key?release<span class="o">=</span>my-session-id
</code></pre></div></div>
<p>通过释放命令，客户端可以显式地释放锁。</p>

<p><strong>Session Destroy (销毁会话)</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> PUT <span class="se">\</span>
  http://localhost:8500/v1/session/destroy/my-session-id
</code></pre></div></div>
<p>销毁会话后，锁自动被释放，其他客户端可以获取该锁。</p>

<p><strong>优点</strong></p>

<ul>
  <li><strong>自动锁释放</strong>：通过 TTL 和会话机制，Consul 可以自动处理锁的释放，避免死锁。</li>
  <li><strong>可扩展性</strong>：Consul 作为一个分布式服务注册和发现系统，天然具有扩展能力，因此其锁机制可以用于分布式系统中的并发控制。</li>
  <li><strong>透明性</strong>：锁的状态可以通过 Consul UI 或 API 查询，便于监控。</li>
</ul>

<hr />

<p>以下是基于 Java 的 Consul 分布式锁实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsulLockService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ConsulClient</span> <span class="n">consulClient</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ConsulClient</span> <span class="n">consulClient</span><span class="o">;</span>

	<span class="cm">/**
     * 获取分布式锁
     * @param lockKey
     * @return
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">acquireLock</span><span class="o">(</span><span class="nc">String</span> <span class="n">lockKey</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Step 1: 创建一个会话</span>
        <span class="nc">NewSession</span> <span class="n">newSession</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NewSession</span><span class="o">();</span>
        <span class="n">newSession</span><span class="o">.</span><span class="na">setTtl</span><span class="o">(</span><span class="s">"10s"</span><span class="o">);</span>  <span class="c1">// 设置TTL (Time to Live)，表示锁的有效期</span>
        <span class="n">newSession</span><span class="o">.</span><span class="na">setLockDelay</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// 立即释放锁</span>

        <span class="c1">// 创建 Session，并获取 sessionId</span>
        <span class="nc">Response</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sessionResponse</span> <span class="o">=</span> <span class="n">consulClient</span><span class="o">.</span><span class="na">sessionCreate</span><span class="o">(</span><span class="n">newSession</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">sessionId</span> <span class="o">=</span> <span class="n">sessionResponse</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>

        <span class="c1">// Step 2: 尝试加锁</span>
        <span class="nc">PutParams</span> <span class="n">putParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PutParams</span><span class="o">();</span>
        <span class="n">putParams</span><span class="o">.</span><span class="na">setAcquireSession</span><span class="o">(</span><span class="n">sessionId</span><span class="o">);</span> <span class="c1">// 通过 Session 来加锁</span>

        <span class="nc">Response</span><span class="o">&lt;</span><span class="nc">Boolean</span><span class="o">&gt;</span> <span class="n">lockResponse</span> <span class="o">=</span> <span class="n">consulClient</span><span class="o">.</span><span class="na">setKVValue</span><span class="o">(</span><span class="n">lockKey</span><span class="o">,</span> <span class="s">"locked"</span><span class="o">,</span> <span class="n">putParams</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="nc">Boolean</span><span class="o">.</span><span class="na">TRUE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">lockResponse</span><span class="o">.</span><span class="na">getValue</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">sessionId</span><span class="o">=</span><span class="n">sessionId</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">sessionId</span><span class="o">;</span> <span class="c1">// 锁定成功，返回 sessionId</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">consulClient</span><span class="o">.</span><span class="na">sessionDestroy</span><span class="o">(</span><span class="n">sessionId</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span> <span class="c1">// 锁定失败，销毁会话</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"无法获取锁: "</span> <span class="o">+</span> <span class="n">lockKey</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 释放分布式锁
     * @param lockKey
     * @param sessionId
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">releaseLock</span><span class="o">(</span><span class="nc">String</span> <span class="n">lockKey</span><span class="o">,</span> <span class="nc">String</span> <span class="n">sessionId</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 删除 KV 键值</span>
        <span class="n">consulClient</span><span class="o">.</span><span class="na">deleteKVValue</span><span class="o">(</span><span class="n">lockKey</span><span class="o">);</span>
        <span class="c1">// 销毁会话，释放锁</span>
        <span class="n">consulClient</span><span class="o">.</span><span class="na">sessionDestroy</span><span class="o">(</span><span class="n">sessionId</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>使用场景</strong></p>

<ol>
  <li><strong>数据库写操作</strong>：当多个微服务实例需要同时更新同一个数据库记录时，使用分布式锁可以确保只有一个实例可以进行写操作。</li>
  <li><strong>任务调度</strong>：分布式系统中的多个节点可能会尝试执行相同的定时任务，使用分布式锁可以确保每个任务只被执行一次。</li>
  <li><strong>资源访问控制</strong>：在分布式环境中，多个微服务可能会同时请求同一个共享资源，锁可以确保资源不会被多个实例同时修改。</li>
</ol>

<p><strong>注意事项</strong></p>

<ol>
  <li><strong>锁争抢问题</strong>：由于 Consul 锁基于乐观锁实现，如果锁竞争激烈，可能会有大量的锁获取失败，建议在应用层添加重试机制。</li>
  <li><strong>锁超时问题</strong>：会话 TTL 失效可能导致锁提前释放，因此需要适当地设置 TTL 并确保客户端保持活跃。</li>
  <li><strong>性能与延迟</strong>：由于锁依赖于 Consul 的 KV 存储，延迟和 Consul 的性能会影响锁的响应速度，建议在并发场景中测试锁的性能。</li>
</ol>

<p>Consul 的分布式锁是一种简洁高效的锁机制，尤其适合在分布式环境中确保资源的一致性和避免并发冲突。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">GitLabSSH认证</title><link href="/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81/" rel="alternate" type="text/html" title="GitLabSSH认证" /><published>2024-09-19T00:00:00+08:00</published><updated>2024-09-19T00:00:00+08:00</updated><id>/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81</id><content type="html" xml:base="/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81/"><![CDATA[<h1 id="引言">引言</h1>
<p>对于GitLab的SSH认证，和GitHub认证步骤差不多，主要是SSH密钥可能需要指定的版本。</p>

<h1 id="gitlab">GitLab</h1>

<blockquote>
  <p>要使用 SSH 与 GitLab 通信，您需要：</p>

  <ul>
    <li>OpenSSH 客户端，预装在 GNU/Linux、macOS 和 Windows 10 上。</li>
    <li>SSH 版本 6.5 或更高版本。早期版本使用 MD5 签名，这并不安全。</li>
  </ul>

  <p>要查看系统上安装的 SSH 版本，请运行 <code class="language-plaintext highlighter-rouge">ssh -V</code>。</p>

  <p>支持的 SSH 密钥类型</p>

  <p>要与 GitLab 通信，您可以使用以下 SSH 密钥类型：</p>

  <ul>
    <li><a href="#ed25519-ssh-keys">ED25519</a></li>
    <li><a href="#rsa-ssh-keys">RSA</a></li>
    <li>DSA（在 11.0 版本中<a href="https://about.gitlab.com/releases/2018/06/22/gitlab-11-0-released/#support-for-dsa-ssh-keys">已弃用</a>。</li>
    <li>ECDSA（如 <a href="https://leanpub.com/gocrypto/read#leanpub-auto-ecdsa">Practical Cryptography With Go</a> 中所述，与 DSA 相关的安全问题也适用于 ECDSA。</li>
  </ul>

</blockquote>

<p>对于RSA算法，需要至少2048位密钥，首选ED25519算法。</p>

<h2 id="生成ssh密钥对">生成SSH密钥对</h2>

<p>对于 ED25519：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"&lt;comment&gt;"</span>
</code></pre></div></div>

<p>对于 2048 位 RSA：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 2048 <span class="nt">-C</span> <span class="s2">"&lt;comment&gt;"</span>
</code></pre></div></div>

<h2 id="配置-ssh-以指向不同的目录">配置 SSH 以指向不同的目录</h2>

<p>如果未将 SSH 密钥对保存在默认目录中，请将 SSH 客户端配置为指向存储私钥的目录。</p>

<p>打开终端并运行以下命令：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="si">$(</span>ssh-agent <span class="nt">-s</span><span class="si">)</span>
ssh-add &lt;directory to private SSH key&gt;
</code></pre></div></div>

<p>将这些设置保存在 ~/.ssh/config 文件中。例如：</p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># GitLab.com
</span><span class="n">Host</span> <span class="n">gitlab</span>.<span class="n">com</span>
  <span class="n">PreferredAuthentications</span> <span class="n">publickey</span>
  <span class="n">IdentityFile</span> ~/.<span class="n">ssh</span>/<span class="n">gitlab_com_rsa</span>

<span class="c"># Private GitLab instance
</span><span class="n">Host</span> <span class="n">gitlab</span>.<span class="n">company</span>.<span class="n">com</span>
  <span class="n">PreferredAuthentications</span> <span class="n">publickey</span>
  <span class="n">IdentityFile</span> ~/.<span class="n">ssh</span>/<span class="n">example_com_rsa</span>
</code></pre></div></div>

<p>公共 SSH 密钥对于 GitLab 必须是唯一的，因为它们绑定到您的帐户。当使用 SSH 推送代码时，SSH 密钥是唯一标识符。它必须唯一地映射到单个用户。</p>]]></content><author><name>acteds</name></author><category term="Git" /><category term="GitLab" /><summary type="html"><![CDATA[GITLabSSH认证]]></summary></entry><entry><title type="html">多个Git托管平台的配置</title><link href="/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="多个Git托管平台的配置" /><published>2024-09-19T00:00:00+08:00</published><updated>2024-09-19T00:00:00+08:00</updated><id>/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE/"><![CDATA[<h1 id="引言">引言</h1>

<p>作为一个程序员，在工作中，可能需要将代码推送到公司的自建 Git 代码托管平台上（如 GitLab）。在生活中，当参与一些个人的开源项目，则又需要将代码推送到社区的 Git 代码托管平台上（如 Github 或 Gieet）。</p>

<h1 id="git">Git</h1>

<h2 id="多个git托管平台的配置">多个Git托管平台的配置</h2>

<p>最简单的解决方法就是，多个Git代码托管平台配置同一个SSH公钥。</p>

<p>第二种方法就是使用多组密钥指定给不同的平台：</p>

<p>SSH 允许统一个操作系统中存在多对密钥，因此可以使用 <code class="language-plaintext highlighter-rouge">ssh-keygen</code> 指令生成多组密钥，将不同的密钥分配给不通的 Git 代码托管平台。</p>

<p>通过平台要求的密钥加密算法生成SSH密钥后，可以通过：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-add id_rsa_github
</code></pre></div></div>

<p>这里的<code class="language-plaintext highlighter-rouge">id_rsa_github</code>是SSH密钥的名称。</p>

<p>如果不使用 <code class="language-plaintext highlighter-rouge">ssh-add</code> 指令添加新的密钥到 <code class="language-plaintext highlighter-rouge">ssh agent</code> 中，系统会仍然使用 <code class="language-plaintext highlighter-rouge">id_rsa</code> 作为默认的 SSH Key，因为 <code class="language-plaintext highlighter-rouge">id_rsa</code> 是被默认添加到 <code class="language-plaintext highlighter-rouge">ssh agent</code> 中。</p>

<h3 id="为远程服务器配置密钥">为远程服务器配置密钥</h3>

<p><code class="language-plaintext highlighter-rouge">~/.ssh</code> 目录下存在一个 <code class="language-plaintext highlighter-rouge">config</code> 文件，如果不存在可以使用 <code class="language-plaintext highlighter-rouge">touch config</code> 指令这个文件。</p>

<p>这个文件用于配置 SSH 客户端的信息，例如主机名、端口号、用户名、密钥等，对于 Git 代码托管平台来说，可以通过这个配置为不通的 Git 代码托管平台服务器配置不同的 SSH 密钥。创建 config 文件后，使用 vim 或者其他任意编辑器编辑 config 文件，输入以下内容：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host github
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github

Host company-git
    User git
    # 替换为你公司的 Git 代码托管平台的服务器
    Hostname company-git-repo.com
    # 你公司 SSH 服务的端口号
    Port 22
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_company
</code></pre></div></div>

<p>config 配置文件中的各项配置意思为：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Host</code>：指定连接到的主机名，可以随意指定，相当于实际连接目标主机的<strong>别名</strong>；</li>
  <li><code class="language-plaintext highlighter-rouge">User</code>：指定使用的用户名，通常为 <code class="language-plaintext highlighter-rouge">git</code>，也可以不指定；</li>
  <li><code class="language-plaintext highlighter-rouge">Hostname</code>：指定连接到的主机的实际域名或IP地址。如果是向 Github 推送代码，则为 <code class="language-plaintext highlighter-rouge">github.com</code>，如果是向公司的 Git 代码托管平台推送代码，则填写公司主机的地址</li>
  <li><code class="language-plaintext highlighter-rouge">Port</code>：SSH 服务的端口号，默认为 <code class="language-plaintext highlighter-rouge">22</code>，可以不写</li>
  <li><code class="language-plaintext highlighter-rouge">PreferredAuthentications</code>：指定优先使用的身份验证方法，指定为<code class="language-plaintext highlighter-rouge">publickey</code>，即使用公钥进行身份认证。</li>
  <li><code class="language-plaintext highlighter-rouge">IdentityFile</code>：指定要使用的私钥文件路径，即指向你创建的私钥，这里分别为不通的 Git 代码托管平台指定了不同的私钥</li>
</ul>

<p>然后将<strong>公钥</strong>在对应的平台上添加SSH。</p>

<p>如果出现：<code class="language-plaintext highlighter-rouge">fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists.</code></p>

<p>就需要更改<code class="language-plaintext highlighter-rouge">.ssh</code>文件夹的权限，使其只对文件所有者可读写。（可以留下SYSTEM和Administrators用户组）</p>

<h3 id="配置不同的-git-用户名以及邮箱">配置不同的 git 用户名以及邮箱</h3>

<p>除了解决了不同平台使用不通的公私钥问题外，在不通的仓库提交代码时用的用户名和邮箱也可能需要不一样，比如：</p>

<ul>
  <li>在 Github 上，需要用网名来隐藏我的真实身份，因此提交代码的用户名为 <code class="language-plaintext highlighter-rouge">github-user</code>，邮箱为 <code class="language-plaintext highlighter-rouge">github-user@github.com</code>；</li>
  <li>而在工作中，公司则要求提交代码时的 git 用户名必须为我的真实姓名拼音，邮箱则为公司邮箱。</li>
</ul>

<p>这些配置就跟 SSH 的配置无关了，这些就需要调整我们的 git 配置。</p>

<p>首先，在全局配置一个 git 用户名和邮箱，这里建议使用你在 Github 上想要使用的用户名和邮箱，毕竟 Github 常驻，而公司不常驻：</p>

<pre><code class="language-cmd">git config --global user.email github-user@github.com[更改成你的邮箱]
git config --global user.name github-user[更改成你的网名]
</code></pre>

<p>此时，在 git 的配置文件 <code class="language-plaintext highlighter-rouge">~/.gitconfig</code> 中就可以看到如下的配置段，表示已经配置成功：</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[user]</span>
    <span class="py">name</span> <span class="p">=</span> <span class="s">github-user</span>
    <span class="py">email</span> <span class="p">=</span> <span class="s">github-user@github.com</span>
</code></pre></div></div>

<p>当我们提交代码的时候就会使用这个默认的用户名和邮箱来提交代码了。</p>

<p>除此之外，git 也支持通过在 git 项目内添加一个『本地配置』来单独配置每个项目的用户名和密码。利用这个能力，当我们将公司的代码 clone 到本地之后，进入到代码仓库，<strong>首先要做的第一件事情就是为这个公司的代码仓库设置独立的 git 用户名和密码</strong>。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--local</span> user.name zhangsan[改为你的真实姓名]
git config <span class="nt">--local</span> user.name zhangsan@company.com[改为你公司的邮箱]
</code></pre></div></div>

<p>总结，在使用 Github 提交提交代码的时候，无需在项目内单独设置 git 用户名和邮箱，因为会自动使用我们全局设置好的；当在编写公司项目的时候，当代码拉下来之后要单独为这个项目设置一个用户名和邮箱。</p>

<h2 id="同时配置多个-github-账号">同时配置多个 Github 账号</h2>

<p>还是使用上节的方法生成多个SSH密钥，然后追加到SSH config文件中。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># github 主账号的配置
Host github
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github
    
# github 新账号的配置
Host github_x
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github_x
</code></pre></div></div>

<p>这个时候，你从小号的 Github 中 clone 下来一个仓库，假设地址为 <code class="language-plaintext highlighter-rouge">git@github.com:user_x/blog.git</code>，那么就在终端中输入：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:user_x/blog.git
</code></pre></div></div>

<p>然后 commit 一些代码后，执行 push 操作时，就会发现出错啦：</p>

<pre><code class="language-subunit">ERROR: Permission to user_x/blog.git denied to xxx.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>SSH 授权出问题了。</p>

<p>实际上，在使用 <code class="language-plaintext highlighter-rouge">git push</code> 提交代码的时候，由于代码的仓库源在 Github 上，因此 SSH 连接的主机就是 <code class="language-plaintext highlighter-rouge">github.com</code>，当 SSH 发起连接的时候，它会发现你的 SSH config 文件中配置了<strong>两段 <code class="language-plaintext highlighter-rouge">Hostname</code> 都为 <code class="language-plaintext highlighter-rouge">github.com</code> 的配置</strong>， SSH 会<strong>优先使用第一段</strong>配置中的公钥向 Github 建立身份认证连接。那么当身份认证请求到达 Github 的时候，Github 拿出公钥进行身份认证签名对比后发现不是小号，那么自然就会拒绝你的提交代码的请求。</p>

<p>首先可以解析一下<code class="language-plaintext highlighter-rouge">git@github.com:user_x/blog.git</code> 这一串的组成，<code class="language-plaintext highlighter-rouge">git</code>是建立SSH连接时使用的用户名，<code class="language-plaintext highlighter-rouge">github.com</code>是目标服务器，而<code class="language-plaintext highlighter-rouge">user_x/blog.git</code>是具体代码仓库的路径。</p>

<p>清楚了以上各个部分代表的意思后，可以利用 SSH 建立连接的一个特性：目标服务器可以直接写成为服务器地址，同时也可以写为在 SSH config 文件中配置的 <code class="language-plaintext highlighter-rouge">Host</code>，也就是服务器的别名。</p>

<p>因此可以将仓库的源改为 <code class="language-plaintext highlighter-rouge">git@github_x:user_x/blog.git</code> ：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote set-url origin git@github_x:user_x/blog.git
</code></pre></div></div>

<p>此外别忘了必须使用 <code class="language-plaintext highlighter-rouge">ssh-add</code> 指令将生成的 SSH key 添加到 ssh-agent 的身份验证代理中：<code class="language-plaintext highlighter-rouge">ssh-add ~/.ssh/id_rsa_github_x</code>。否则建立 SSH 连接时，会使用 <code class="language-plaintext highlighter-rouge">id_rsa_github</code> 的密钥对。</p>

<p>可以通过<code class="language-plaintext highlighter-rouge">ssh -T git@github_x</code>，进行测试连接。</p>

<p>其实在clone的时候就可以修改为别名了，这样就不需要再重新设置仓库源了：</p>

<pre><code class="language-cmd">git clone git@github_x:user_x/blog.git
</code></pre>]]></content><author><name>acteds</name></author><category term="Git" /><category term="GitLab" /><category term="Github" /><summary type="html"><![CDATA[GITLabSSH认证]]></summary></entry><entry><title type="html">OpenFeign的使用</title><link href="/2024/09/18/OpenFeign/" rel="alternate" type="text/html" title="OpenFeign的使用" /><published>2024-09-18T00:00:00+08:00</published><updated>2024-09-18T00:00:00+08:00</updated><id>/2024/09/18/OpenFeign</id><content type="html" xml:base="/2024/09/18/OpenFeign/"><![CDATA[<h1 id="引言">引言</h1>

<p><strong>OpenFeign</strong> 是一个声明式的 HTTP 客户端，主要用于简化微服务之间的通信。它通过注解和接口的形式定义远程服务的调用，帮助开发者省去了编写大量 HTTP 请求的样板代码。在 Spring Cloud 中，OpenFeign 与 Spring Boot 和 Spring Cloud 集成良好，能够与负载均衡、断路器等组件搭配使用。</p>

<h1 id="openfeign">OpenFeign</h1>

<p>在微服务架构中，不同的服务通过 HTTP 进行通信。常规做法是手动使用 <code class="language-plaintext highlighter-rouge">RestTemplate</code> 或 <code class="language-plaintext highlighter-rouge">HttpClient</code> 发起 HTTP 请求，这样的代码通常冗长且容易出错。<strong>OpenFeign</strong> 的优势在于它通过接口与注解的形式，使得调用远程服务就像调用本地方法一样简单。</p>

<p><strong>使用场景：</strong></p>

<ul>
  <li><strong>简化服务调用</strong>：你不需要手动构造 HTTP 请求，而是通过调用本地接口来完成服务的远程调用。</li>
  <li><strong>更好的集成性</strong>：OpenFeign 可以与其他 Spring Cloud 组件（如 Ribbon、Hystrix 等）无缝集成，提供负载均衡、超时、断路器等功能。</li>
</ul>

<p><strong>OpenFeign 的优点</strong>：</p>

<ol>
  <li><strong>声明式的编程风格</strong>：使用注解（例如 <code class="language-plaintext highlighter-rouge">@FeignClient</code>、<code class="language-plaintext highlighter-rouge">@RequestMapping</code> 等）定义远程服务调用，使代码简洁、易读。调用远程服务就像调用本地方法一样，无需关心底层的 HTTP 请求细节。</li>
  <li><strong>自动集成负载均衡</strong>：通过与 Spring Cloud Ribbon 集成，OpenFeign 可以自动实现对多个实例的负载均衡。你只需定义服务名，它会根据服务注册中心的实例列表选择目标。</li>
  <li><strong>与 Hystrix 结合</strong>：OpenFeign 可以与 Hystrix 集成，实现熔断和降级策略。在微服务架构中，当某个服务不可用时，Hystrix 可以帮助服务调用快速失败，避免级联故障。</li>
  <li><strong>与 Spring Boot 深度集成</strong>：OpenFeign 在 Spring Cloud 中具有很好的集成支持，能够通过注解、配置文件等方式轻松配置超时、重试等策略。</li>
  <li><strong>自定义配置</strong>：OpenFeign 允许你自定义拦截器、编码器、解码器、日志等，来满足个性化需求。</li>
</ol>

<p><strong>OpenFeign 的缺点</strong>：</p>

<ol>
  <li><strong>依赖反射，性能稍差</strong>：OpenFeign 是基于反射的声明式框架，性能上比手写的 HTTP 客户端（如 <code class="language-plaintext highlighter-rouge">RestTemplate</code>、<code class="language-plaintext highlighter-rouge">HttpClient</code>）稍差，适用于业务较轻或中等的服务调用场景。</li>
  <li><strong>缺少部分高级 HTTP 控制</strong>：OpenFeign 的简洁性是它的优势，但它也使得一些高级的 HTTP 请求控制（例如复杂的请求头操作、流式数据处理等）不如手动编写 HTTP 客户端灵活。</li>
  <li><strong>调试相对复杂</strong>：在使用 OpenFeign 时，问题调试（例如网络问题、超时等）比手写 HTTP 请求更加抽象，出错时可能需要深入了解 Feign 的工作机制。</li>
  <li><strong>依赖服务注册中心</strong>：在分布式系统中，OpenFeign 通常依赖服务注册中心（如 Eureka、Consul 等）来发现服务实例，因此在服务注册中心出现故障时可能会影响服务调用。</li>
</ol>

<hr />

<p>导入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-openfeign<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>程序入口添加注解：<code class="language-plaintext highlighter-rouge">@EnableFeignClients</code>。</p>

<p>可以配置超时时间：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">feign</span><span class="pi">:</span>
  <span class="na">client</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span>
      <span class="na">default</span><span class="pi">:</span>
        <span class="na">connectTimeout</span><span class="pi">:</span> <span class="m">20000</span> <span class="c1"># feign 的超时设置</span>
        <span class="na">readTimeout</span><span class="pi">:</span> <span class="m">60000</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"domainresourcesservice"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">ResourcesServiceFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ResourcesService</span> <span class="o">{</span>
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span><span class="s">"/resources/rolePersionInfo/savePersionRoleAndGroupV2"</span><span class="o">)</span>
    <span class="nc">Wrapper</span> <span class="nf">savePersionRoleAndGroup</span><span class="o">(</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"persionId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">persionId</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"groupIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">groupIds</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"roleIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">roleIds</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"jiean_projectName"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">jiean_projectName</span>
    <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意：<strong><code class="language-plaintext highlighter-rouge">@RequestMapping</code> 注解不能直接用于 <code class="language-plaintext highlighter-rouge">@FeignClient</code> 接口</strong>。<code class="language-plaintext highlighter-rouge">FeignClient</code> 接口不允许在类级别使用 <code class="language-plaintext highlighter-rouge">@RequestMapping</code>，应该仅在方法级别使用 <code class="language-plaintext highlighter-rouge">@GetMapping</code>、<code class="language-plaintext highlighter-rouge">@PostMapping</code>、<code class="language-plaintext highlighter-rouge">@RequestParam</code> 等注解来定义 HTTP 请求。</p>

<p>配置类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">feign.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeginConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">Logger</span><span class="o">.</span><span class="na">Level</span> <span class="nf">feignLoggerLevel</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">Level</span><span class="o">.</span><span class="na">FULL</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>回滚类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourcesServiceFallBack</span> <span class="kd">implements</span> <span class="nc">ResourcesService</span> <span class="o">{</span>
    <span class="cm">/**
     * 新增人员和角色关系表
     * @param jiean_projectName
     * @param persionId
     * @param groupIds
     * @return
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Wrapper</span> <span class="nf">savePersionRoleAndGroup</span><span class="o">(</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"persionId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">persionId</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"groupIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">groupIds</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"roleIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">roleIds</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"jiean_projectName"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">jiean_projectName</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">WrapMapper</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="mi">5001</span><span class="o">,</span><span class="s">"Feign 新增人员和角色关系失败"</span><span class="o">);</span>
    <span class="o">}</span>   
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@FeignClient</code></strong>：用于声明一个 Feign 客户端，并指定该客户端要调用的服务。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">name = "domainresourcesservice"</code></strong>：指定服务的名称。Feign 会根据这个名称从服务注册中心（如 Consul 或 Eureka）获取服务实例的地址，并发起请求。这个名字应该与注册中心中的服务名一致。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">fallback = ResourcesServiceFallBack.class</code></strong>：指定一个回退类，当远程调用失败时会执行 <code class="language-plaintext highlighter-rouge">ResourcesServiceFallBack</code> 中定义的回退逻辑。回退类通常用于实现熔断或降级功能，以提高服务的稳定性。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">configuration = {FeginConfig.class}</code></strong>：指定 Feign 客户端的配置类 <code class="language-plaintext highlighter-rouge">FeginConfig</code>，该类可以包含自定义的 Feign 配置，如超时时间、编码器、解码器、拦截器等。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">@RequestMapping</code></strong>：表示这个接口方法对应的 HTTP 请求。<code class="language-plaintext highlighter-rouge">value = "/resources/rolePersionInfo/savePersionRoleAndGroupV2"</code> 表示该方法将发送到路径 <code class="language-plaintext highlighter-rouge">/resources/rolePersionInfo/savePersionRoleAndGroupV2</code> 的请求。</p>

<ul>
  <li>默认情况下，这是一个 <code class="language-plaintext highlighter-rouge">POST</code> 或 <code class="language-plaintext highlighter-rouge">GET</code> 请求（具体取决于 Feign 的配置），可以根据需求指定请求方法。</li>
</ul>

<p>这段代码是一个 Feign 客户端的接口，它用于调用名为 <code class="language-plaintext highlighter-rouge">domainresourcesservice</code> 的微服务下的 <code class="language-plaintext highlighter-rouge">/resources/rolePersionInfo/savePersionRoleAndGroupV2</code> 接口，执行保存某个用户的角色和组信息操作。</p>

<hr />

<p>在使用 Feign 客户端时，有以下几点需要特别注意：</p>

<p><strong>服务名要一致</strong>：<code class="language-plaintext highlighter-rouge">@FeignClient(name = "domainresourcesservice")</code> 中指定的服务名称 <strong><code class="language-plaintext highlighter-rouge">domainresourcesservice</code></strong> 必须与服务注册中心（如 Consul、Eureka）中的服务名称一致。否则，Feign 客户端将无法找到目标服务的实例，导致请求失败。</p>

<p><strong>回退类 <code class="language-plaintext highlighter-rouge">fallback</code></strong>：<code class="language-plaintext highlighter-rouge">fallback = ResourcesServiceFallBack.class</code> 指定了降级处理类，当远程服务不可用或者超时时，Feign 会自动调用回退方法。这有助于增强系统的容错性，防止服务故障蔓延到整个系统。</p>

<ul>
  <li>确保 <code class="language-plaintext highlighter-rouge">ResourcesServiceFallBack</code> 类已经实现了 <code class="language-plaintext highlighter-rouge">ResourcesService</code> 接口，并提供了具体的回退逻辑。</li>
  <li>如果没有正确配置 Hystrix 或 Resilience4j 等熔断器，回退逻辑可能无法生效。</li>
</ul>

<p><strong>请求参数</strong></p>

<ul>
  <li><strong>参数类型</strong>：确保所有参数在远程服务的 API 中是匹配的。这里使用 <code class="language-plaintext highlighter-rouge">@RequestParam</code> 注解，表示参数会被作为查询参数或表单数据传递。对应的远程服务也应该相应处理这些参数。</li>
  <li><strong>参数格式和验证</strong>：确保传递的参数格式正确。例如，<code class="language-plaintext highlighter-rouge">groupIds</code> 和 <code class="language-plaintext highlighter-rouge">roleIds</code> 可能是逗号分隔的字符串。如果后端要求某种特殊格式，确保在调用时传递的值是正确的。</li>
</ul>

<p><strong>自定义配置</strong></p>

<p><strong>Feign 配置 <code class="language-plaintext highlighter-rouge">FeginConfig.class</code></strong>：如果你有自定义的 Feign 配置（如超时设置、重试机制、编码解码器等），确保 <code class="language-plaintext highlighter-rouge">FeginConfig</code> 配置正确，并且 Feign 客户端能够应用这些配置。</p>

<p>比如，可以在 <code class="language-plaintext highlighter-rouge">FeginConfig</code> 中指定连接超时、读取超时等，以防止因网络延迟导致的请求失败。</p>

<p><strong>错误处理</strong></p>

<ul>
  <li><strong>错误响应处理</strong>：<code class="language-plaintext highlighter-rouge">Wrapper</code> 是接口的返回类型，确保你能够处理远程服务可能返回的错误响应。需要检查 <code class="language-plaintext highlighter-rouge">Wrapper</code> 类是否能处理错误码、错误消息等，并且调用方能够正确处理错误。</li>
  <li><strong>异常处理</strong>：Feign 在请求失败时可能抛出各种异常（如 <code class="language-plaintext highlighter-rouge">FeignException</code>、<code class="language-plaintext highlighter-rouge">ConnectException</code> 等），在接口的实现类中应做好异常捕获和处理，避免应用崩溃。</li>
</ul>

<p><strong>日志与调试</strong></p>

<ul>
  <li>
    <p><strong>启用 Feign 日志</strong>：如果需要调试 Feign 请求，可以在配置中启用 Feign 的详细日志功能，查看请求和响应的完整信息。</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">feign:</span>
  <span class="nl">client:</span>
    <span class="nl">config:</span>
      <span class="k">default</span><span class="o">:</span>
        <span class="nl">loggerLevel:</span> <span class="no">FULL</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>这样可以帮助你调试 Feign 请求的问题，尤其是遇到请求失败或响应不符合预期时。</p>
  </li>
</ul>

<p><strong>超时和重试</strong></p>

<ul>
  <li><strong>超时设置</strong>：如果目标服务响应较慢，可能会导致 Feign 请求超时，导致熔断触发。确保 Feign 配置中设置了适当的超时时间，以平衡性能和可用性。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">Request</span><span class="o">.</span><span class="na">Options</span> <span class="nf">feignOptions</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Request</span><span class="o">.</span><span class="na">Options</span><span class="o">(</span><span class="mi">5000</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span> <span class="c1">// 连接超时 5 秒，读取超时 10 秒</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>服务健康检查与负载均衡</strong></p>

<ul>
  <li><strong>服务健康检查</strong>：确保目标服务在注册中心是健康的，否则 Feign 会找不到可用的实例。可以定期检查目标服务的健康状态。</li>
  <li><strong>负载均衡</strong>：Feign 通常与 Ribbon 一起使用，支持负载均衡调用多实例服务。确保注册中心中的服务实例都能够被正确负载均衡。</li>
</ul>

<p><strong>版本兼容性</strong></p>

<ul>
  <li><strong>服务接口版本兼容</strong>：远程服务的接口可能会发生变更，因此需要定期检查服务接口是否有变化，确保调用方和提供方之间的接口保持兼容性，尤其是请求参数或返回值格式的变化。</li>
</ul>

<p>确保这些关键点能够帮助你在使用 Feign 客户端时避免常见的错误，并确保系统的健壮性和可扩展性。</p>

<hr />

<p>一个简单的完整实例：</p>

<p>假设服务<code class="language-plaintext highlighter-rouge">A</code>，有如下接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/pi"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductInventoryController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ProductInventoryMapper</span> <span class="n">productInventoryMapper</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">productInventoryMapper</span><span class="o">.</span><span class="na">selectAll</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">productInventoryMapper</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>则服务<code class="language-plaintext highlighter-rouge">B</code>，如果需要调用服务<code class="language-plaintext highlighter-rouge">A</code>的接口，可以这样定义Feign：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"A"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">DemoServiceFeignFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DemoServiceFeign</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/pi/getAll"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">();</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/pi/add"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意<code class="language-plaintext highlighter-rouge">ProductInventory</code>类结构要保持一致。</p>

<p>然后可以这样调用Feign：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/feign"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignTestController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">DemoServiceFeign</span> <span class="n">demoServiceFeign</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">getAllUsers</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果不希望在服务 <code class="language-plaintext highlighter-rouge">B</code> 中创建 <code class="language-plaintext highlighter-rouge">ProductInventory</code> 类，可以使用 <code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt;</code> 或 <code class="language-plaintext highlighter-rouge">JSONObject</code> 来代替对象传递数据。这样，<code class="language-plaintext highlighter-rouge">Feign</code> 接口可以通过动态对象来进行调用。</p>

<p>修改后的 Feign 接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"A"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">DemoServiceFeignFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DemoServiceFeign</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/pi/getAll"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllUsers</span><span class="o">();</span>  <span class="c1">// 使用 Map 代替 ProductInventory</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/pi/add"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">productInventory</span><span class="o">);</span>  <span class="c1">// 使用 Map 传递数据</span>
<span class="o">}</span>
</code></pre></div></div>

<p>修改后的调用方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/feign"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignTestController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">DemoServiceFeign</span> <span class="n">demoServiceFeign</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">getAllUsers</span><span class="o">();</span>  <span class="c1">// 获取 Map 类型的结果</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>  <span class="c1">// 传递 Map 类型的数据</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>优点</strong>：避免了在服务 <code class="language-plaintext highlighter-rouge">B</code> 中定义 <code class="language-plaintext highlighter-rouge">ProductInventory</code> 类。</p>

<p><strong>缺点</strong>：使用 <code class="language-plaintext highlighter-rouge">Map</code> 或 <code class="language-plaintext highlighter-rouge">JSONObject</code> 使代码的类型检查变得不那么严格，容易出错，并且不如直接使用实体类那么清晰和安全。</p>

<h2 id="批量带header">批量带<code class="language-plaintext highlighter-rouge">Header</code></h2>

<p>要在Feign调用中为所有的方法添加多个header，可以使用 <code class="language-plaintext highlighter-rouge">RequestInterceptor</code>。下面是如何实现的步骤：</p>

<ol>
  <li><strong>创建一个RequestInterceptor</strong>：</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">feign.RequestInterceptor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">feign.RequestTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RequestInterceptor</span> <span class="nf">requestInterceptor</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">RequestInterceptor</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="nc">RequestTemplate</span> <span class="n">template</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">template</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Header-Name-1"</span><span class="o">,</span> <span class="s">"HeaderValue1"</span><span class="o">);</span>
                <span class="n">template</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Header-Name-2"</span><span class="o">,</span> <span class="s">"HeaderValue2"</span><span class="o">);</span>
                <span class="n">template</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Header-Name-3"</span><span class="o">,</span> <span class="s">"HeaderValue3"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li><strong>在FeignClient中引用FeignConfig</strong>：</li>
</ol>

<p>确保在你的 <code class="language-plaintext highlighter-rouge">@FeignClient</code> 注解中引入配置类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"demo-service"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">DemoServiceFeignFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">configuration</span> <span class="o">=</span> <span class="nc">FeignConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DemoServiceFeign</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/pi/getAll"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">();</span>
    
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/pi/add"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过这种方式，所有的Feign调用将自动带上你在 <code class="language-plaintext highlighter-rouge">RequestInterceptor</code> 中定义的header。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Git的拆分与删除</title><link href="/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4/" rel="alternate" type="text/html" title="Git的拆分与删除" /><published>2024-09-18T00:00:00+08:00</published><updated>2024-09-18T00:00:00+08:00</updated><id>/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4</id><content type="html" xml:base="/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4/"><![CDATA[<h1 id="引言">引言</h1>
<p>拆分仓库可以减少单个仓库的体积，提高开发效率。Git 仓库的历史记录会随着项目的发展而膨胀。拆分仓库有助于删除不必要的历史记录，只保留当前需要的部分，减少仓库的冗余数据。对于删除来说也是如此，在全部的提交中删除不需要的文件或文件夹可以减少仓库的体积。</p>

<h1 id="git">Git</h1>

<h2 id="拆分">拆分</h2>

<p>要将某个文件夹或文件单独生成一个 Git 仓库，并保留其历史记录，可以使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 简单的完成。</p>

<p>要安装<code class="language-plaintext highlighter-rouge">git-fiter-repo</code>，对于环境有如下依赖：</p>

<ul>
  <li>git &gt;= 2.22.0 ；对于某些功能需要 git &gt;= 2.24.0</li>
  <li>python3 &gt;= 3.6</li>
</ul>

<p>然后运行<code class="language-plaintext highlighter-rouge">pip install git-filter-repo</code> 即可，要验证是否安装成功，可以执行：<code class="language-plaintext highlighter-rouge">git filter-repo --version</code>。</p>

<hr />

<p>首先，克隆或者复制包含该文件/文件夹的原始仓库，然后使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 命令，就可以提取目标文件夹或文件，并移除其他无关内容了。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> <span class="o">[</span>&lt;folder-name&gt;|&lt;file-name&gt;]
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--path &lt;folder-name&gt;</code> 或 <code class="language-plaintext highlighter-rouge">--path &lt;file-name&gt;</code>：这个参数指定你要保留的路径。这个命令将只保留该路径中的文件，删除仓库中的其他所有内容。</li>
</ul>

<p>例如，要提取名为 <code class="language-plaintext highlighter-rouge">src</code> 的文件夹，可以运行：<code class="language-plaintext highlighter-rouge">git filter-repo --path src</code>如果提取单个文件，比如 <code class="language-plaintext highlighter-rouge">README.md</code>：<code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code></p>

<p>执行 <code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code> 后，Git 仓库将会只保留 <code class="language-plaintext highlighter-rouge">README.md</code> 文件及其所有历史记录，其他的文件和文件夹（及其对应的提交历史）将会被<strong>完全移除</strong>，包括：</p>

<p><strong>历史记录过滤</strong>：Git 会过滤所有提交记录，只保留那些与 <code class="language-plaintext highlighter-rouge">README.md</code> 文件相关的提交。任何与其他文件或文件夹相关的提交都会被删除。</p>

<p><strong>仓库内容变化</strong>：</p>

<ul>
  <li><strong>保留的文件</strong>：最终的仓库中只会包含 <code class="language-plaintext highlighter-rouge">README.md</code> 文件，且这个文件的所有历史记录都会保留在提交历史中。</li>
  <li><strong>移除的文件和文件夹</strong>：所有其他文件和文件夹会从仓库的所有历史版本中完全消失，不再存在于提交记录中。</li>
</ul>

<p><strong>提交历史</strong>：</p>

<ul>
  <li>仓库中的提交历史会被重新写入，只有那些影响 <code class="language-plaintext highlighter-rouge">README.md</code> 文件的提交会保留，其他提交记录（与其他文件相关的提交）将被丢弃。</li>
</ul>

<p><strong>其他分支和标签</strong>：</p>

<ul>
  <li>这些过滤操作会影响所有的分支和标签。它会对整个仓库的历史进行重写。因此，在其他分支和标签中，只有 <code class="language-plaintext highlighter-rouge">README.md</code> 及其相关的提交会保留。</li>
</ul>

<p>假设有如下仓库结构：</p>

<pre><code class="language-ascii">repo/
├── README.md
├── src/
│   └── main.java
└── docs/
    └── guide.md
</code></pre>
<p>并且有以下提交历史：</p>
<ol>
  <li>创建 <code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li>添加 <code class="language-plaintext highlighter-rouge">src/main.java</code></li>
  <li>修改 <code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li>添加 <code class="language-plaintext highlighter-rouge">docs/guide.md</code></li>
</ol>

<p>当执行 <code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code> 后：</p>
<ul>
  <li>仓库中<strong>只会保留</strong> <code class="language-plaintext highlighter-rouge">README.md</code> 文件。</li>
  <li>提交历史中<strong>只保留</strong>涉及 <code class="language-plaintext highlighter-rouge">README.md</code> 的提交（即提交 1 和 3），其他提交（例如 2 和 4）会被删除。</li>
  <li><code class="language-plaintext highlighter-rouge">src/</code> 和 <code class="language-plaintext highlighter-rouge">docs/</code> 文件夹及其内容（如 <code class="language-plaintext highlighter-rouge">main.java</code> 和 <code class="language-plaintext highlighter-rouge">guide.md</code>）将从仓库的所有历史版本中被<strong>完全移除</strong>，就像它们从未存在过一样。</li>
</ul>

<hr />

<p><strong>保留多个文件或文件夹</strong></p>

<p>在使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 时，如果想保留多个文件或文件夹的历史记录，可以通过 <code class="language-plaintext highlighter-rouge">--path</code> 参数指定多个路径。<code class="language-plaintext highlighter-rouge">git filter-repo</code> 支持同时保留多个文件或文件夹的历史。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> &lt;path1&gt; <span class="nt">--path</span> &lt;path2&gt; <span class="nt">--path</span> &lt;path3&gt; ...
</code></pre></div></div>

<p>假设仓库结构如下：</p>
<pre><code class="language-ascii">repo/
├── README.md
├── src/
│   ├── main.java
│   └── utils.java
└── docs/
    └── guide.md
</code></pre>

<p>需要保留以下文件和文件夹：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li><code class="language-plaintext highlighter-rouge">src/</code> 文件夹</li>
  <li><code class="language-plaintext highlighter-rouge">docs/guide.md</code></li>
</ul>

<p>可以执行以下命令：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> README.md <span class="nt">--path</span> src <span class="nt">--path</span> docs/guide.md
</code></pre></div></div>

<p>保留子文件夹：</p>

<p>也可以只保留某个子文件夹内的部分内容，例如只保留 <code class="language-plaintext highlighter-rouge">src/utils.java</code> 而不是整个 <code class="language-plaintext highlighter-rouge">src</code> 文件夹。命令如下：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> src/utils.java
</code></pre></div></div>

<p>注意事项：</p>
<ul>
  <li>
    <p>如果要保留的文件路径很多，建议提前备份仓库，因为 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 会直接修改历史记录。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">git filter-repo</code> 操作会影响所有分支和标签，所以操作之前需要明确想要保留的内容。</p>
  </li>
</ul>

<h2 id="删除">删除</h2>

<p>要在全部的提交中删除某个文件或者文件夹，可以使用如下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> <span class="o">[</span>&lt;folder-name&gt;|&lt;file-name&gt;] <span class="nt">--invert-paths</span> <span class="nt">--force</span>
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--path &lt;folder-name&gt; | &lt;file-name&gt;</code>：指定要操作的文件夹或文件路径。如果是文件夹，请使用 <code class="language-plaintext highlighter-rouge">/</code> 结尾，如 <code class="language-plaintext highlighter-rouge">logs/</code>。如果是文件，提供完整路径如 <code class="language-plaintext highlighter-rouge">config/secret.txt</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">--invert-paths</code>：该参数表示反转路径过滤，意思是删除指定的路径及其历史，而保留其他所有内容。没有 <code class="language-plaintext highlighter-rouge">--invert-paths</code> 则会保留指定的路径并删除其他内容。</li>
  <li><code class="language-plaintext highlighter-rouge">--force</code>：在某些情况下，如果运行 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 后尝试再次运行时，Git 可能会警告已经处理过一次了。<code class="language-plaintext highlighter-rouge">--force</code> 选项允许你在这些情况下强制执行命令。</li>
</ul>

<p>这会<strong>永久性地修改历史记录</strong>，所有历史中的该文件或文件夹将被彻底移除，因此其他开发人员也需要强制更新他们的本地仓库。</p>

<hr />

<p>如果已经把仓库推送到远程，删除了本地的文件历史后，必须强制推送历史变更：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin <span class="nt">--force</span> <span class="nt">--all</span>
git push origin <span class="nt">--force</span> <span class="nt">--tags</span>
</code></pre></div></div>

<p>如果需要清理已经被删除的文件的本地缓存，可以运行以下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> .git/refs/original/
git reflog expire <span class="nt">--expire</span><span class="o">=</span>now <span class="nt">--all</span>
git gc <span class="nt">--prune</span><span class="o">=</span>now <span class="nt">--aggressive</span>
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="Git" /><summary type="html"><![CDATA[Git的拆分与删除]]></summary></entry><entry><title type="html">Charles证书更新</title><link href="/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0/" rel="alternate" type="text/html" title="Charles证书更新" /><published>2024-09-06T00:00:00+08:00</published><updated>2024-09-06T00:00:00+08:00</updated><id>/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0</id><content type="html" xml:base="/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0/"><![CDATA[<h1 id="引言">引言</h1>
<p>在某一天，正要抓包时，一直出现：</p>

<p><code class="language-plaintext highlighter-rouge">SSL handshake with client failed: When access control was applied the certificate was rejected (access_denied)</code></p>

<p>这就是证书失效了。</p>

<h1 id="详解">详解</h1>

<p>要解决这个问题，非常简单，首先要卸载失效的证书，有几种方式进入证书管理：</p>

<ul>
  <li>win+R：<code class="language-plaintext highlighter-rouge">Certmgr.msc</code>，这个是当前用户的证书。</li>
  <li>按一次win，输入<code class="language-plaintext highlighter-rouge">cer</code>，可以看到一个<code class="language-plaintext highlighter-rouge">管理计算机证书</code>，这个就是管理应用于全部用户证书。</li>
  <li>同上，还可以看到一个<code class="language-plaintext highlighter-rouge">管理用户证书</code>，这是当前用户的证书。</li>
</ul>

<p>通过哪种方式进入都可以，但这两个地方是不同的，可以都找找，侧栏点击一下最上面的<code class="language-plaintext highlighter-rouge">证书-本地计算机</code>，然后点击操作-查找证书-输入<code class="language-plaintext highlighter-rouge">Charles</code>，然后开始查找，找到的都删除，用户证书同理。</p>

<p>卸载完失效的证书后，在<code class="language-plaintext highlighter-rouge">Charles</code>里生成新的证书，<code class="language-plaintext highlighter-rouge">Help</code>-<code class="language-plaintext highlighter-rouge">SSL Proxying</code>-<code class="language-plaintext highlighter-rouge">Reset Charles Root Certificate...</code>，然后重新安装证书：<code class="language-plaintext highlighter-rouge">Help</code>-<code class="language-plaintext highlighter-rouge">SSL Proxying</code>-<code class="language-plaintext highlighter-rouge">Install Charles Root Certificate</code>-<code class="language-plaintext highlighter-rouge">安装证书...</code>-选<code class="language-plaintext highlighter-rouge">当前用户</code>即可-<code class="language-plaintext highlighter-rouge">下一步</code>-<code class="language-plaintext highlighter-rouge">将所有的证书都放入下列存储</code>-<code class="language-plaintext highlighter-rouge">浏览...</code>-<code class="language-plaintext highlighter-rouge">选择受信任的根证书颁发机构</code>-<code class="language-plaintext highlighter-rouge">确定</code>-<code class="language-plaintext highlighter-rouge">下一步</code>-<code class="language-plaintext highlighter-rouge">完成</code>-若有警告点击确认。</p>

<p>这样就完成了证书的更新操作，重启<code class="language-plaintext highlighter-rouge">Charles</code>后即可恢复正常。</p>]]></content><author><name>acteds</name></author><category term="Android" /><summary type="html"><![CDATA[Charles证书更新]]></summary></entry><entry><title type="html">Spring Cloud</title><link href="/2024/08/26/Spring-Clud/" rel="alternate" type="text/html" title="Spring Cloud" /><published>2024-08-26T00:00:00+08:00</published><updated>2024-08-26T00:00:00+08:00</updated><id>/2024/08/26/Spring%20Clud</id><content type="html" xml:base="/2024/08/26/Spring-Clud/"><![CDATA[<h1 id="引言">引言</h1>
<p>Spring Clud笔记。</p>

<h1 id="spring-cloud">Spring Cloud</h1>

<p>为了简化版本和依赖管理，用<code class="language-plaintext highlighter-rouge">parent</code>模块管理最基础的<code class="language-plaintext highlighter-rouge">pom.xml</code>，其他模块直接从<code class="language-plaintext highlighter-rouge">parent</code>继承，能大大简化各自的<code class="language-plaintext highlighter-rouge">pom.xml</code>。<code class="language-plaintext highlighter-rouge">parent</code>模块<code class="language-plaintext highlighter-rouge">pom.xml</code>内容如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>
<span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>parent<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>

    <span class="c">&lt;!-- 继承自SpringBoot Starter Parent --&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="c">&lt;!-- SpringBoot版本 --&gt;</span>
        <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>

    <span class="nt">&lt;properties&gt;</span>
        <span class="c">&lt;!-- 项目版本 --&gt;</span>
        <span class="nt">&lt;project.version&gt;</span>1.0<span class="nt">&lt;/project.version&gt;</span>
        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
        <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>

        <span class="c">&lt;!-- Java编译和运行版本 --&gt;</span>
        <span class="nt">&lt;maven.compiler.source&gt;</span>17<span class="nt">&lt;/maven.compiler.source&gt;</span>
        <span class="nt">&lt;maven.compiler.target&gt;</span>17<span class="nt">&lt;/maven.compiler.target&gt;</span>
        <span class="nt">&lt;java.version&gt;</span>17<span class="nt">&lt;/java.version&gt;</span>

        <span class="c">&lt;!-- 定义第三方组件的版本 --&gt;</span>
        <span class="nt">&lt;pebble.version&gt;</span>3.2.0<span class="nt">&lt;/pebble.version&gt;</span>
        <span class="nt">&lt;springcloud.version&gt;</span>2022.0.0<span class="nt">&lt;/springcloud.version&gt;</span>
        <span class="nt">&lt;springdoc.version&gt;</span>2.0.0<span class="nt">&lt;/springdoc.version&gt;</span>
        <span class="nt">&lt;vertx.version&gt;</span>4.3.1<span class="nt">&lt;/vertx.version&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>

    <span class="c">&lt;!-- 引入SpringCloud依赖 --&gt;</span>
    <span class="nt">&lt;dependencyManagement&gt;</span>
        <span class="nt">&lt;dependencies&gt;</span>
            <span class="nt">&lt;dependency&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;version&gt;</span>${springcloud.version}<span class="nt">&lt;/version&gt;</span>
                <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
                <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
            <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;/dependencies&gt;</span>
    <span class="nt">&lt;/dependencyManagement&gt;</span>

    <span class="c">&lt;!-- 共享的依赖管理 --&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
        <span class="c">&lt;!-- 依赖JUnit5 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-api<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-params<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-engine<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="c">&lt;!-- 依赖SpringTest --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>

    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;pluginManagement&gt;</span>
            <span class="nt">&lt;plugins&gt;</span>
                <span class="c">&lt;!-- 引入创建可执行Jar的插件 --&gt;</span>
                <span class="nt">&lt;plugin&gt;</span>
                    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                    <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;/plugin&gt;</span>
            <span class="nt">&lt;/plugins&gt;</span>
        <span class="nt">&lt;/pluginManagement&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>上述<code class="language-plaintext highlighter-rouge">pom.xml</code>中，除了写死的Spring Boot版本、Java运行版本、项目版本外，其他引入的版本均以<code class="language-plaintext highlighter-rouge">&lt;xxx.version&gt;1.23&lt;/xxx.version&gt;</code>的形式定义，以便后续可以用<code class="language-plaintext highlighter-rouge">${xxx.version}</code>引用版本号，避免了同一个组件出现多个写死的版本定义。</p>

<p>对其他业务模块，引入<code class="language-plaintext highlighter-rouge">parent</code>的<code class="language-plaintext highlighter-rouge">pom.xml</code>可大大简化配置。以<code class="language-plaintext highlighter-rouge">ui</code>模块为例，其<code class="language-plaintext highlighter-rouge">pom.xml</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>
<span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="c">&lt;!-- 指定Parent --&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
        <span class="c">&lt;!-- Parent POM的相对路径 --&gt;</span>
        <span class="nt">&lt;relativePath&gt;</span>../parent/pom.xml<span class="nt">&lt;/relativePath&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>

    <span class="c">&lt;!-- 当前模块名称 --&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>ui<span class="nt">&lt;/artifactId&gt;</span>

    <span class="nt">&lt;dependencies&gt;</span>
        <span class="c">&lt;!-- 依赖SpringCloud Config客户端 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖SpringBoot Actuator --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖Common模块 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>common<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>${project.version}<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖第三方模块 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>pebble-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>${pebble.version}<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>

    <span class="nt">&lt;build&gt;</span>
        <span class="c">&lt;!-- 指定输出文件名 --&gt;</span>
        <span class="nt">&lt;finalName&gt;</span>${project.artifactId}<span class="nt">&lt;/finalName&gt;</span>
        <span class="c">&lt;!-- 创建SpringBoot可执行jar --&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">parent</code>的<code class="language-plaintext highlighter-rouge">pom.xml</code>中引入了Spring Cloud的依赖管理，因此，无需指定相关组件的版本。只有自己编写的组件和未在Spring Boot和Spring Cloud中引入的组件，才需要指定版本。</p>

<p>还需要一个<code class="language-plaintext highlighter-rouge">build</code>模块，把所有模块放到一起编译。建立<code class="language-plaintext highlighter-rouge">build</code>文件夹并创建<code class="language-plaintext highlighter-rouge">pom.xml</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/maven-v4_0_0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>build<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
    <span class="nt">&lt;name&gt;</span>Warp Exchange<span class="nt">&lt;/name&gt;</span>

    <span class="c">&lt;!-- 按相对路径列出所有模块 --&gt;</span>
    <span class="nt">&lt;modules&gt;</span>
        <span class="nt">&lt;module&gt;</span>../common<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../config<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../parent<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../ui<span class="nt">&lt;/module&gt;</span>
    <span class="nt">&lt;/modules&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>还需要创建目录<code class="language-plaintext highlighter-rouge">config-repo</code>来存储Spring Cloud Config服务器端的配置文件。</p>

<p>最后，将所有模块导入IDE，可正常开发、编译、运行。如果要在命令行模式下运行，进入<code class="language-plaintext highlighter-rouge">build</code>文件夹使用Maven编译即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn clean package
</code></pre></div></div>

<hr />

<p><strong>本地开发环境</strong></p>

<p>在本地开发时，需要经常调试代码。除了安装JDK，选择一个IDE外，还需要在本地运行MySQL、Redis、Kafka，以及Kafka依赖的ZooKeeper服务。</p>

<p>可以使用<a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>来运行这些基础服务，需要在<code class="language-plaintext highlighter-rouge">build</code>目录下编写一个<code class="language-plaintext highlighter-rouge">docker-compose.yml</code>文件定义要运行的所有服务：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">zookeeper</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/zookeeper:3.5</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">zookeeper</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">2181:2181"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ALLOW_ANONYMOUS_LOGIN=yes</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/zookeeper-data:/bitnami"</span>

  <span class="na">kafka</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/kafka:3.0</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">kafka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9092:9092"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">zookeeper</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">KAFKA_BROKER_ID=1</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true</span>
      <span class="pi">-</span> <span class="s">ALLOW_PLAINTEXT_LISTENER=yes</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/kafka-data:/bitnami"</span>

  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.2</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">6379:6379"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/redis-data:/data"</span>

  <span class="na">mysql</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">--default-authentication-plugin=mysql_native_password</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_ROOT_PASSWORD=password</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./sql/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql:ro"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/mysql-data:/var/lib/mysql"</span>
</code></pre></div></div>

<p>在上述<code class="language-plaintext highlighter-rouge">docker-compose.yml</code>文件中，定义了MySQL、Redis、Kafka以及Kafka依赖的ZooKeeper服务，各服务均暴露标准端口，且MySQL的<code class="language-plaintext highlighter-rouge">root</code>口令设置为<code class="language-plaintext highlighter-rouge">password</code>，第一次启动MySQL时，使用<code class="language-plaintext highlighter-rouge">sql/schema.sql</code>文件初始化数据库表结构。所有数据盘均挂载到<code class="language-plaintext highlighter-rouge">build</code>目录下的<code class="language-plaintext highlighter-rouge">docker</code>目录。</p>

<p>在<code class="language-plaintext highlighter-rouge">build</code>目录下运行<code class="language-plaintext highlighter-rouge">docker-compose up -d</code>即可启动容器：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>build $ docker-compose up -d
Creating network "build_default" with the default driver
Creating zookeeper ... done
Creating mysql     ... done
Creating redis     ... done
Creating kafka     ... done
</code></pre></div></div>

<p>在Docker Desktop中也可看到运行状态。</p>

<p>如果要删除开发环境的所有数据，首先停止运行Docker容器进程并删除，然后删除<code class="language-plaintext highlighter-rouge">build</code>目录下的<code class="language-plaintext highlighter-rouge">docker</code>目录，重新运行<code class="language-plaintext highlighter-rouge">docker-compose</code>即可。</p>

<h2 id="spring-cloud-config">Spring Cloud Config</h2>

<p>Spring Cloud Config是Spring Cloud的一个子项目，它的主要目的是解决多个Spring Boot应用启动时，应该如何读取配置文件的问题。</p>

<p>对于单体应用，即一个独立的Spring Boot应用，我们会把配置写在<code class="language-plaintext highlighter-rouge">application.yml</code>文件中。如果配置需要针对多个环境，可以用<code class="language-plaintext highlighter-rouge">---</code>分隔并标注好环境：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># application.yml</span>
<span class="c1"># 通用配置:</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost/test</span>

<span class="nn">---</span>

<span class="c1"># test profile:</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://172.16.0.100/test</span>
</code></pre></div></div>

<p>这种配置方式针对单个Spring Boot应用是可行的，但是，针对分布式应用，有多个Spring Boot应用需要启动时，分散在各个应用中的配置既不便于管理，也不便于复用相同的配置。</p>

<p>Spring Cloud Config提供了一个通用的分布式应用的配置解决方案。它把配置分为两部分：</p>

<ul>
  <li>Config Server：配置服务器，负责读取所有配置；</li>
  <li>Config Client：嵌入到各个Spring Boot应用中，<strong>本地无配置信息</strong>，启动时向服务器请求配置。</li>
</ul>

<p>要搭建一个Spring Cloud Config Server，即配置服务器，首先，在<code class="language-plaintext highlighter-rouge">config</code>模块中引入<code class="language-plaintext highlighter-rouge">spring-cloud-config-server</code>依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-config-server<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后，编写一个<code class="language-plaintext highlighter-rouge">ConfigApplication</code>入口，标注<code class="language-plaintext highlighter-rouge">@EnableConfigServer</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableConfigServer</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfigApplication</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">ConfigApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>最后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中设置如何搜索配置。Spring Cloud Config支持多种配置方式，包括从本地文件、Git仓库、数据库等多个地方读取配置。这里选择以本地文件的方式读取配置文件，这也是最简单的一种配置方式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 配置服务器的端口，通常设置为8888:</span>
<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8888</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">config-server</span>
  <span class="na">profiles</span><span class="pi">:</span>
    <span class="c1"># 从文件读取配置时，Config Server激活的profile必须设定为native:</span>
    <span class="na">active</span><span class="pi">:</span> <span class="s">native</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span>
      <span class="na">server</span><span class="pi">:</span>
        <span class="na">native</span><span class="pi">:</span>
          <span class="c1"># 设置配置文件的搜索路径:</span>
          <span class="na">search-locations</span><span class="pi">:</span> <span class="s">file:./config-repo, file:../config-repo, file:../../config-repo</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">config-repo</code>目录下，存放的就是一系列配置文件：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config-repo/
├── application-default.yml
├── application-test.yml
├── application.yml
├── push.yml
├── quotation.yml
├── trading-api.yml
├── trading-engine.yml
├── trading-sequencer.yml
├── ui-default.yml
└── ui.yml
</code></pre></div></div>

<p>至此，配置服务器就完成了，直接运行<code class="language-plaintext highlighter-rouge">ConfigApplication</code>即可启动配置服务器。在开发过程中，保持配置服务器在后台运行即可。</p>

<p>接下来，对于每个负责业务的Spring Boot应用，需要从Spring Cloud Config Server读取配置。读取配置并不是说本地零配置，还是需要一点基础配置信息。以<code class="language-plaintext highlighter-rouge">ui</code>项目为例，编写<code class="language-plaintext highlighter-rouge">application.yml</code>如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="c1"># 设置app名称:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ui</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="c1"># 导入Config Server地址:</span>
    <span class="na">import</span><span class="pi">:</span> <span class="s">configserver:${CONFIG_SERVER:http://localhost:8888}</span>
</code></pre></div></div>

<p>上述默认的Config Server配置为<code class="language-plaintext highlighter-rouge">http://localhost:8888</code>，也可以通过环境变量指定Config Server的地址。</p>

<p>下一步是在<code class="language-plaintext highlighter-rouge">ui</code>模块的<code class="language-plaintext highlighter-rouge">pom.xml</code>中添加依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>接下来正常启动<code class="language-plaintext highlighter-rouge">UIApplication</code>，该应用就会自动从Config Server读取配置。由于指定了应用的名称是<code class="language-plaintext highlighter-rouge">ui</code>，且默认的<code class="language-plaintext highlighter-rouge">profile</code>是<code class="language-plaintext highlighter-rouge">default</code>，因此，Config Server将返回以下4个配置文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ui-default.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-default.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">ui.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>前面的配置文件优先级较高，后面的配置文件优先级较低。如果出现相同的配置项，则在优先级高的配置生效。</p>

<p>可以在浏览器访问<code class="language-plaintext highlighter-rouge">http://localhost:8888/ui/default</code>看到Config Server返回的配置，它是一个JSON文件：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ui"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"profiles"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"default"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"state"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"propertySources"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/ui-default.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/application-default.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/ui.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/application.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>如果启动<code class="language-plaintext highlighter-rouge">UIApplication</code>时传入<code class="language-plaintext highlighter-rouge">SPRING_PROFILES_ACTIVE=test</code>，将profile设置为<code class="language-plaintext highlighter-rouge">test</code>，则Config Server返回的文件如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ui-test.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-test.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">ui.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>可以通过<code class="language-plaintext highlighter-rouge">http://localhost:8888/ui/test</code>查看返回的配置。由于文件<code class="language-plaintext highlighter-rouge">ui-test.yml</code>不存在，因此，实际配置由3个文件合并而成。</p>

<p>可以很容易地看到，一个Spring Boot应用在启动时，首先要设置自己的<code class="language-plaintext highlighter-rouge">name</code>并导入Config Server的URL，再根据当前活动的<code class="language-plaintext highlighter-rouge">profile</code>，由Config Server返回多个配置文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">{name}-{profile}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-{profile}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">{name}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>其中，<code class="language-plaintext highlighter-rouge">{name}-{xxx}.yml</code>是针对某个应用+某个<code class="language-plaintext highlighter-rouge">profile</code>的特定配置，<code class="language-plaintext highlighter-rouge">{name}.yml</code>是针对某个应用+所有profile的配置，<code class="language-plaintext highlighter-rouge">application-{profile}.yml</code>是针对某个<code class="language-plaintext highlighter-rouge">profile</code>的全局配置，<code class="language-plaintext highlighter-rouge">application.yml</code>是所有应用的全局配置。搭配各种配置文件就可以灵活组合配置。一般来说，全局默认的配置放在<code class="language-plaintext highlighter-rouge">application.yml</code>中，例如数据库连接：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost/test</span>
</code></pre></div></div>

<p>这样保证了默认连接到本地数据库，在生产环境中会直接报错而不是连接到错误的数据库。</p>

<p>在生产环境，例如<code class="language-plaintext highlighter-rouge">profile</code>设置为<code class="language-plaintext highlighter-rouge">prod</code>，则可以将数据库连接写在<code class="language-plaintext highlighter-rouge">application-prod.yml</code>中，使得所有生产环境的应用读取到的数据库连接是一致的：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://172.16.0.100/prod_db</span>
</code></pre></div></div>

<p>某个应用自己特定的配置则应当放到<code class="language-plaintext highlighter-rouge">{name}.yml</code>和<code class="language-plaintext highlighter-rouge">{name}-{profile}.yml</code>中。</p>

<p>在设置好各个配置文件后，应当通过浏览器检查Config Server返回的配置是否符合预期。</p>

<p>Spring Cloud Config还支持配置多个profile，以及从加密的配置源读取配置等。如果遇到更复杂的需求，可参考<a href="https://spring.io/projects/spring-cloud-config#learn">Spring Cloud Config的文档</a>。</p>

<h2 id="consul">consul</h2>

<p>Consul 是一个开源的服务发现和配置管理工具，由 HashiCorp 开发。它主要用于微服务架构中，提供服务注册、服务发现、健康检查和配置管理等功能。Consul 的主要特点包括：</p>

<ol>
  <li><strong>服务发现</strong></li>
</ol>

<p>Consul 允许服务在集群中进行注册和发现。服务可以向 Consul 注册其网络地址和其他元数据，其他服务可以通过查询 Consul 来找到这些服务。这样，服务间的通信就不再依赖硬编码的地址，而是通过 Consul 的服务发现功能进行动态定位。</p>

<ol>
  <li><strong>健康检查</strong></li>
</ol>

<p>Consul 提供了内置的健康检查机制，确保注册的服务实例处于健康状态。Consul 可以定期执行 HTTP、TCP、或者自定义命令的健康检查，并根据检查结果决定是否将服务实例从服务列表中移除。这样可以确保负载均衡器只将请求发送到健康的服务实例。</p>

<ol>
  <li><strong>服务注册和注销</strong></li>
</ol>

<p>服务可以在启动时向 Consul 注册自己，并在关闭时注销自己。Consul 维护一个最新的服务列表，并自动更新服务的状态。服务注册可以包括服务的元数据，如版本号、环境等信息。</p>

<ol>
  <li><strong>配置管理</strong></li>
</ol>

<p>Consul 提供了一个键值存储系统，允许应用程序存储和读取配置数据。配置可以被组织成层次结构，并且支持动态更新。应用程序可以在运行时从 Consul 中读取配置，并在配置变更时进行调整。</p>

<ol>
  <li><strong>多数据中心支持</strong></li>
</ol>

<p>Consul 支持跨数据中心的服务发现和配置管理，允许在多个地理位置的数据中心中运行 Consul 实例，并进行数据同步。这使得跨地域的微服务架构可以更容易地进行管理。</p>

<ol>
  <li><strong>安全性</strong></li>
</ol>

<p>Consul 提供了安全特性，如访问控制、加密和身份验证。它支持使用 TLS 对服务之间的通信进行加密，并允许通过 ACL（访问控制列表）来控制对 Consul 数据的访问权限。</p>

<hr />

<p>以下是如何在 Spring Boot 应用程序中使用 Consul 进行服务发现的基本步骤：</p>

<p><strong>添加依赖</strong></p>

<p>在 <code class="language-plaintext highlighter-rouge">pom.xml</code> 文件中添加 Consul 相关的依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-consul-discovery<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><strong>配置 Consul</strong></p>

<p>在 <code class="language-plaintext highlighter-rouge">application.yml</code> 文件中配置 Consul 相关的设置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">host</span><span class="pi">:</span> <span class="s">127.0.0.1</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8500</span>
      <span class="na">discovery</span><span class="pi">:</span>
        <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">service-name</span><span class="pi">:</span> <span class="s">my-service</span>
</code></pre></div></div>

<p><strong>使用 Consul 进行服务发现</strong></p>

<p>在应用程序中，可以使用 <code class="language-plaintext highlighter-rouge">@LoadBalanced</code> 注解和 <code class="language-plaintext highlighter-rouge">RestTemplate</code> 进行服务发现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="nd">@LoadBalanced</span>
    <span class="kd">public</span> <span class="nc">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">RestTemplate</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/call-service"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">callService</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 使用服务名称进行调用</span>
        <span class="k">return</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="s">"http://my-service/some-endpoint"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>相关命令</strong></p>

<p>启动 Consul 服务器（开发模式）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul agent <span class="nt">-dev</span>
</code></pre></div></div>

<p>注册一个服务到 Consul：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"service"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-service"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"primary"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">8080</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul services register service.json
</code></pre></div></div>

<p>查询服务：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul catalog services
</code></pre></div></div>

<p>Consul 提供了一整套解决方案来管理微服务的生命周期和配置，使得微服务架构的管理变得更加高效和可靠。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry></feed>