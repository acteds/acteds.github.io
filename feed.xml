<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-11-06T01:34:31+08:00</updated><id>/feed.xml</id><title type="html">个人博客</title><subtitle></subtitle><author><name>acteds</name></author><entry><title type="html">MongoDB</title><link href="/2024/09/23/MongoDB/" rel="alternate" type="text/html" title="MongoDB" /><published>2024-09-23T00:00:00+08:00</published><updated>2024-09-23T00:00:00+08:00</updated><id>/2024/09/23/MongoDB</id><content type="html" xml:base="/2024/09/23/MongoDB/"><![CDATA[<h1 id="引言">引言</h1>

<p>MongoDB是一个非关系型数据库。</p>

<h1 id="mongodb">MongoDB</h1>

<h2 id="快速启动">快速启动</h2>

<p>在spring boot中使用，需要引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-mongodb<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">data</span><span class="pi">:</span>
    <span class="na">mongodb</span><span class="pi">:</span>
      <span class="na">uri</span><span class="pi">:</span> <span class="s">${MONGODB_URI:mongodb://账号:密码@10.80.21.115:29018,10.80.21.116:29018/db_schema?authSource=admin}</span>

  <span class="na">jackson</span><span class="pi">:</span>
    <span class="na">serialization</span><span class="pi">:</span>
      <span class="na">FAIL_ON_EMPTY_BEANS</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">write-dates-as-timestamps</span><span class="pi">:</span> <span class="no">false</span> <span class="c1">#使用时间戳，使用数值timestamp表示日期</span>
      <span class="na">indent_output</span><span class="pi">:</span> <span class="no">true</span> <span class="c1">#格式化输出</span>
    <span class="na">date-format</span><span class="pi">:</span> <span class="s">yyyy-MM-dd HH:mm:ss</span>
    <span class="na">time-zone</span><span class="pi">:</span> <span class="s">GMT+8</span>
</code></pre></div></div>

<p>Spring Boot 默认会自动配置 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 和 <code class="language-plaintext highlighter-rouge">MongoClient</code>，但如果需要自定义配置（例如不同的 <code class="language-plaintext highlighter-rouge">MongoClientOptions</code>），可以手动定义 <code class="language-plaintext highlighter-rouge">MongoClient</code> 和 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 的 Bean。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.mongodb.client.MongoClient</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.mongodb.client.MongoClients</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.MongoTemplate</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MongoConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MongoClient</span> <span class="nf">mongoClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">MongoClients</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"mongodb://admin:admin123@localhost:27017/mydatabase"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MongoTemplate</span> <span class="nf">mongoTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MongoTemplate</span><span class="o">(</span><span class="n">mongoClient</span><span class="o">(),</span> <span class="s">"mydatabase"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>创建 MongoDB 数据模型和 Repository</strong></p>

<p>在 Spring Data MongoDB 中，每个 MongoDB 集合都对应一个 Java 类，通常使用 <code class="language-plaintext highlighter-rouge">@Document</code> 注解来标注。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.annotation.Id</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.mapping.Document</span><span class="o">;</span>

<span class="nd">@Document</span><span class="o">(</span><span class="n">collection</span> <span class="o">=</span> <span class="s">"users"</span><span class="o">)</span> <span class="c1">// 对应 MongoDB 中的 users 集合</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    <span class="c1">// Getters and Setters</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以注入 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 来执行自定义查询：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.MongoTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">MongoTemplate</span> <span class="n">mongoTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">findUserById</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>也可以使用 <code class="language-plaintext highlighter-rouge">MongoRepository</code> 来直接进行数据库操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUserByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="mongotemplate"><code class="language-plaintext highlighter-rouge">MongoTemplate</code></h2>

<p><code class="language-plaintext highlighter-rouge">MongoTemplate</code> 是 Spring Data MongoDB 中用于执行 MongoDB 操作的核心类，它提供了丰富的 CRUD（创建、读取、更新、删除）和其他 MongoDB 操作的 API。以下是一些常用的 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 方法分类及其用途：</p>

<p><strong>插入操作 (Insert)</strong></p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T insert(T objectToSave)</code>：插入单个对象到默认集合。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T insert(T objectToSave, String collectionName)</code>：插入单个对象到指定的集合。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; Collection&lt;T&gt; insertAll(Collection&lt;? extends Object&gt; batchToSave)</code>：插入多个对象到它们各自的集合。</p>

<p><strong>作用</strong>：用于将一个或多个对象插入到 MongoDB 中的集合里。</p>

<p><strong>返回值</strong>：返回插入的对象，带有 MongoDB 分配的 <code class="language-plaintext highlighter-rouge">_id</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个新的 Product 对象并插入到默认的集合</span>
<span class="nc">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">,</span> <span class="mi">1200</span><span class="o">);</span>
<span class="nc">Product</span> <span class="n">savedProduct</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>

<span class="c1">// 创建一个新的 Product 对象并插入到指定集合 "electronics"</span>
<span class="nc">Product</span> <span class="n">savedProductInElectronics</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">product</span><span class="o">,</span> <span class="s">"electronics"</span><span class="o">);</span>

<span class="c1">// 插入多个 Product 对象</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Product</span><span class="o">(</span><span class="s">"Mouse"</span><span class="o">,</span> <span class="mi">50</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Product</span><span class="o">(</span><span class="s">"Keyboard"</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">savedProducts</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">insertAll</span><span class="o">(</span><span class="n">products</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">savedProduct</code></strong> 和 <strong><code class="language-plaintext highlighter-rouge">savedProducts</code></strong> 包含了插入后自动生成的 MongoDB <code class="language-plaintext highlighter-rouge">_id</code> 字段，可以用这个 <code class="language-plaintext highlighter-rouge">_id</code> 作为后续的查询条件。</p>

<p><code class="language-plaintext highlighter-rouge">insertAll</code>会根据插入对象的类型，自动将数据插入到相应的集合。</p>

<p><strong>查询操作 (Find)</strong></p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; find(Query query, Class&lt;T&gt; entityClass)</code>：根据查询条件查找符合条件的所有记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; find(Query query, Class&lt;T&gt; entityClass, String collectionName)</code>：根据查询条件从指定集合中查找符合条件的所有记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findOne(Query query, Class&lt;T&gt; entityClass)</code>：根据查询条件查找符合条件的单条记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findById(Object id, Class&lt;T&gt; entityClass)</code>：根据 ID 查找对象。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findById(Object id, Class&lt;T&gt; entityClass, String collectionName)</code>：根据 ID 从指定集合中查找对象。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; findAll(Class&lt;T&gt; entityClass)</code>：查询所有记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; findAll(Class&lt;T&gt; entityClass, String collectionName)</code>：从指定集合中查询所有记录。</p>

<p><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; findDistinct(Query query, String field, Class&lt;T&gt; entityClass, Class&lt;D&gt; resultClass)</code>：获取某个字段的去重值。</p>

<p><strong>作用</strong>：用于从 MongoDB 中查询数据，可以根据不同的条件来查询多个或单个记录。</p>

<p><strong>返回值</strong>：返回符合查询条件的对象或对象列表。<code class="language-plaintext highlighter-rouge">findOne</code> 和 <code class="language-plaintext highlighter-rouge">findById</code> 返回单个对象，<code class="language-plaintext highlighter-rouge">find</code> 返回多个对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 查找所有 Product 对象</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 根据查询条件查找 price 大于 100 的所有记录</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">100</span><span class="o">));</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">expensiveProducts</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 根据 ID 查找某个 Product 对象</span>
<span class="nc">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="s">"12345"</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 获取 category 字段的去重值（所有不同的商品分类）</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">distinctCategories</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findDistinct</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(),</span> <span class="s">"category"</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">find</code></strong>：返回匹配的多个记录。<code class="language-plaintext highlighter-rouge">List&lt;Product&gt;</code> 是包含符合条件的所有产品。</p>

<p><strong><code class="language-plaintext highlighter-rouge">findOne</code></strong>：只返回第一个符合条件的记录。</p>

<p><strong><code class="language-plaintext highlighter-rouge">findDistinct</code></strong>：可以用于获取某个字段的唯一值，例如不同的商品分类。</p>

<p><strong>计数操作 (Count)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">long count(Query query, Class&lt;T&gt; entityClass)</code>：根据查询条件统计记录数。</li>
  <li><code class="language-plaintext highlighter-rouge">long count(Query query, String collectionName)</code>：根据查询条件统计指定集合中的记录数。</li>
</ul>

<p><strong>作用</strong>：计算 MongoDB 集合中符合查询条件的记录数。</p>

<p><strong>返回值</strong>：返回符合条件的记录总数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 计算价格低于 1000 的商品数量</span>
<span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">count</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">1000</span><span class="o">)),</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">count</code></strong> 用于统计符合条件的记录数量，在查询数据量或进行分页时非常有用。</p>

<p><strong>更新操作 (Update)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UpdateResult updateFirst(Query query, Update update, Class&lt;T&gt; entityClass)</code>：根据查询条件更新符合条件的第一条记录。</li>
  <li><code class="language-plaintext highlighter-rouge">UpdateResult updateFirst(Query query, Update update, String collectionName)</code>：根据查询条件更新指定集合中符合条件的第一条记录。</li>
  <li><code class="language-plaintext highlighter-rouge">UpdateResult updateMulti(Query query, Update update, Class&lt;T&gt; entityClass)</code>：根据查询条件更新符合条件的多条记录。</li>
  <li><code class="language-plaintext highlighter-rouge">UpdateResult updateMulti(Query query, Update update, String collectionName)</code>：根据查询条件更新指定集合中符合条件的多条记录。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findAndModify(Query query, Update update, Class&lt;T&gt; entityClass)</code>：查找并更新符合条件的单条记录，并返回更新前的记录。</li>
</ul>

<p><strong>作用</strong>：更新 MongoDB 集合中的数据，可以更新单个记录或多个记录。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">UpdateResult</code> 包含了更新操作的结果，包括受影响的记录数。<code class="language-plaintext highlighter-rouge">findAndModify</code> 返回更新前的记录或更新后的记录，具体取决于配置。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 更新符合条件的第一条记录，将价格设置为 1100</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">));</span>
<span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">1100</span><span class="o">);</span>
<span class="nc">UpdateResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">updateFirst</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">update</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 更新所有价格为 100 以下的商品，将价格增加 10</span>
<span class="nc">Update</span> <span class="n">multiUpdate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">inc</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">UpdateResult</span> <span class="n">multiResult</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">updateMulti</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">100</span><span class="o">)),</span> <span class="n">multiUpdate</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 查找并更新符合条件的记录，返回更新前的记录</span>
<span class="nc">Product</span> <span class="n">oldProduct</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findAndModify</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">update</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">updateFirst</code></strong>：只更新符合条件的第一条记录。</p>

<p><strong><code class="language-plaintext highlighter-rouge">updateMulti</code></strong>：更新所有符合条件的记录。</p>

<p><strong><code class="language-plaintext highlighter-rouge">findAndModify</code></strong>：可以用于实现原子性操作，比如修改某个字段并返回更新前的对象或更新后的对象。</p>

<p><strong>删除操作 (Delete)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DeleteResult remove(Query query, Class&lt;T&gt; entityClass)</code>：根据查询条件删除符合条件的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">DeleteResult remove(Query query, Class&lt;T&gt; entityClass, String collectionName)</code>：根据查询条件删除指定集合中符合条件的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; T findAndRemove(Query query, Class&lt;T&gt; entityClass)</code>：查找并删除符合条件的单条记录。</li>
</ul>

<p><strong>作用</strong>：删除 MongoDB 集合中的记录，可以删除单条或多条记录。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">DeleteResult</code> 表示删除操作的结果，包含删除的记录数。<code class="language-plaintext highlighter-rouge">findAndRemove</code> 返回被删除的对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 删除所有 name 为 "Laptop" 的记录</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">));</span>
<span class="nc">DeleteResult</span> <span class="n">deleteResult</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 查找并删除符合条件的第一条记录</span>
<span class="nc">Product</span> <span class="n">deletedProduct</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">findAndRemove</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">remove</code></strong>：删除操作后，<code class="language-plaintext highlighter-rouge">DeleteResult</code> 包含受影响的记录数。</p>

<p><strong><code class="language-plaintext highlighter-rouge">findAndRemove</code></strong>：查找并删除符合条件的第一条记录，并返回删除的对象。</p>

<p><strong>保存操作 (Save)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; T save(Object objectToSave)</code>：保存对象到默认集合，如果存在 <code class="language-plaintext highlighter-rouge">_id</code> 则更新，否则插入。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; T save(Object objectToSave, String collectionName)</code>：保存对象到指定集合。</li>
</ul>

<p><strong>作用</strong>：保存对象到 MongoDB 中，如果对象已经存在（根据 <code class="language-plaintext highlighter-rouge">_id</code> 字段判断），则更新对象；否则，插入新对象。</p>

<p><strong>返回值</strong>：返回保存后的对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 保存新的 Product 对象</span>
<span class="nc">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"Monitor"</span><span class="o">,</span> <span class="mi">300</span><span class="o">);</span>
<span class="nc">Product</span> <span class="n">savedProduct</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>

<span class="c1">// 如果 _id 已存在则更新，否则插入</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">product</span><span class="o">,</span> <span class="s">"electronics"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">save</code></strong>：用于插入或更新记录，适用于不确定对象是否已经存在的场景。</p>

<p><strong>聚合操作 (Aggregation)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; AggregationResults&lt;T&gt; aggregate(Aggregation aggregation, String collectionName, Class&lt;T&gt; outputType)</code>：执行聚合操作，并将结果映射为指定的类。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; AggregationResults&lt;T&gt; aggregate(Aggregation aggregation, Class&lt;T&gt; inputType, Class&lt;O&gt; outputType)</code>：对指定类型的集合进行聚合操作。</li>
</ul>

<p><strong>作用</strong>：用于执行 MongoDB 的聚合操作，比如分组、求和、计算平均值等，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">GROUP BY</code>、<code class="language-plaintext highlighter-rouge">SUM()</code>、<code class="language-plaintext highlighter-rouge">AVG()</code> 等功能。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">AggregationResults&lt;T&gt;</code>，其中包含聚合查询的结果列表。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 计算每个类别的平均价格</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"category"</span><span class="o">).</span><span class="na">avg</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"avgPrice"</span><span class="o">)</span>
<span class="o">);</span>

<span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">CategoryAveragePrice</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"products"</span><span class="o">,</span> <span class="nc">CategoryAveragePrice</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">CategoryAveragePrice</span> <span class="n">cap</span> <span class="o">:</span> <span class="n">result</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cap</span><span class="o">.</span><span class="na">getCategory</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">cap</span><span class="o">.</span><span class="na">getAvgPrice</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation</code></strong>：适合用于复杂的数据处理任务，如计算统计值、分组数据等。返回值会根据映射类型转换为 <code class="language-plaintext highlighter-rouge">CategoryAveragePrice</code> 类。</p>

<p><strong>索引操作 (Index)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">void ensureIndex(String collectionName, IndexDefinition indexDefinition)</code>：为指定集合创建索引。</li>
  <li><code class="language-plaintext highlighter-rouge">IndexOperations indexOps(String collectionName)</code>：返回索引操作类，用于进一步的索引操作。</li>
</ul>

<p><strong>作用</strong>：用于管理 MongoDB 集合中的索引，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">CREATE INDEX</code>。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">IndexOperations</code> 对象用于进一步操作索引。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 为 Product 集合的 price 字段创建索引</span>
<span class="nc">IndexDefinition</span> <span class="n">priceIndex</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Index</span><span class="o">().</span><span class="na">on</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">);</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">indexOps</span><span class="o">(</span><span class="s">"products"</span><span class="o">).</span><span class="na">ensureIndex</span><span class="o">(</span><span class="n">priceIndex</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">ensureIndex</code></strong>：为指定字段创建索引，可以加快查询速度，特别是当集合中数据量很大时。</p>

<p><strong><code class="language-plaintext highlighter-rouge">indexOps</code></strong>：用于获取集合的索引操作，提供更多对索引的操作接口。</p>

<p><strong>集合操作 (Collection Operations)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">MongoCollection&lt;Document&gt; createCollection(String collectionName)</code>：创建集合。</li>
  <li><code class="language-plaintext highlighter-rouge">MongoCollection&lt;Document&gt; createCollection(String collectionName, CollectionOptions collectionOptions)</code>：根据选项创建集合。</li>
  <li><code class="language-plaintext highlighter-rouge">void dropCollection(String collectionName)</code>：删除指定集合。</li>
  <li><code class="language-plaintext highlighter-rouge">boolean collectionExists(String collectionName)</code>：检查集合是否存在。</li>
</ul>

<p><strong>作用</strong>：用于创建、删除集合和检查集合是否存在。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">createCollection</code> 和 <code class="language-plaintext highlighter-rouge">dropCollection</code> 没有返回值，<code class="language-plaintext highlighter-rouge">collectionExists</code> 返回布尔值表示集合是否存在。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个新的集合并设置其容量为 100 个文档</span>
<span class="nc">CollectionOptions</span> <span class="n">options</span> <span class="o">=</span> <span class="nc">CollectionOptions</span><span class="o">.</span><span class="na">empty</span><span class="o">().</span><span class="na">capped</span><span class="o">().</span><span class="na">size</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">createCollection</span><span class="o">(</span><span class="s">"logs"</span><span class="o">,</span> <span class="n">options</span><span class="o">);</span>

<span class="c1">// 检查集合 "products" 是否存在</span>
<span class="kt">boolean</span> <span class="n">exists</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">collectionExists</span><span class="o">(</span><span class="s">"products"</span><span class="o">);</span>
<span class="k">if</span> <span class="o">(</span><span class="n">exists</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Collection exists!"</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 删除集合</span>
<span class="n">mongoTemplate</span><span class="o">.</span><span class="na">dropCollection</span><span class="o">(</span><span class="s">"oldData"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">createCollection</code></strong>：可以根据需要创建新的集合，并设定集合的选项，如大小限制等。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">collectionExists</code></strong>：用于检查集合是否存在，避免重复创建或删除。</li>
</ul>

<p><strong>Map-Reduce 操作</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; MapReduceResults&lt;T&gt; mapReduce(Query query, String inputCollectionName, String mapFunction, String reduceFunction, Class&lt;T&gt; entityClass)</code>：</li>
</ul>

<p><strong>作用</strong>：执行 MongoDB 的 Map-Reduce 操作，适用于复杂的数据处理任务，类似于 Hadoop 中的 Map-Reduce 操作。</p>

<p><strong>返回值</strong>：<code class="language-plaintext highlighter-rouge">MapReduceResults&lt;T&gt;</code>，包含 Map-Reduce 计算的结果列表。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 定义 map 函数和 reduce 函数，计算每个类别下商品的总数量</span>
<span class="nc">String</span> <span class="n">mapFunction</span> <span class="o">=</span> <span class="s">"function() { emit(this.category, 1); }"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">reduceFunction</span> <span class="o">=</span> <span class="s">"function(key, values) { return Array.sum(values); }"</span><span class="o">;</span>

<span class="nc">MapReduceResults</span><span class="o">&lt;</span><span class="nc">CategoryCount</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">mapReduce</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Query</span><span class="o">(),</span> <span class="s">"products"</span><span class="o">,</span> <span class="n">mapFunction</span><span class="o">,</span> <span class="n">reduceFunction</span><span class="o">,</span> <span class="nc">CategoryCount</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="k">for</span> <span class="o">(</span><span class="nc">CategoryCount</span> <span class="n">result</span> <span class="o">:</span> <span class="n">results</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getCategory</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">getCount</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">mapReduce</code></strong>：适合用于大规模数据的分布式计算，如聚合、统计等。</p>

<p><strong>投影操作 (Projection)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; Query project(String fieldName, String alias)</code>：对指定字段进行投影并使用别名。</li>
</ul>

<p><strong>作用</strong>：用于查询时只返回指定的字段，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">SELECT column1, column2</code>。</p>

<p><strong>返回值</strong>：返回投影后的对象列表，只有被包含的字段会返回。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 只返回 name 和 price 字段</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">100</span><span class="o">));</span>
<span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s">"price"</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">project</code></strong>：用于查询时减少返回的字段，提高查询效率。</p>

<p><strong>分页操作 (Pagination)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;T&gt; List&lt;T&gt; with(Pageable pageable)</code>：基于分页器执行查询。</li>
</ul>

<p><strong>作用</strong>：实现分页查询。</p>

<p><strong>返回值</strong>：返回当前页的数据。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 查询第 1 页，每页 10 条记录</span>
<span class="nc">PageRequest</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">().</span><span class="na">with</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>with</strong>：在大数据集的查询中，分页操作可以提升性能并减少内存占用。</p>

<p><strong>Bulk 操作 (批量操作)</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">BulkOperations bulkOps(BulkOperations.BulkMode bulkMode, String collectionName)</code>：用于执行批量操作。</li>
</ul>

<p><strong>作用</strong>：用于批量插入、更新或删除多个文档。MongoDB 的批量操作可以极大地提高性能，特别是在处理大量数据时。</p>

<p><strong>返回值</strong>：返回 <code class="language-plaintext highlighter-rouge">BulkOperations</code> 对象，用于构建和执行批量操作。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 批量插入或更新商品数据</span>
<span class="nc">BulkOperations</span> <span class="n">bulkOps</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">bulkOps</span><span class="o">(</span><span class="nc">BulkOperations</span><span class="o">.</span><span class="na">BulkMode</span><span class="o">.</span><span class="na">UNORDERED</span><span class="o">,</span> <span class="s">"products"</span><span class="o">);</span>

<span class="n">bulkOps</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Product</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">,</span> <span class="mi">1200</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Mouse"</span><span class="o">)),</span>
    <span class="k">new</span> <span class="nf">Update</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">25</span><span class="o">)</span>
<span class="o">);</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Old Mouse"</span><span class="o">)));</span>

<span class="c1">// 执行批量操作</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">bulkOps</code></strong>：批量操作分为两种模式，<code class="language-plaintext highlighter-rouge">ORDERED</code>（有序执行）和 <code class="language-plaintext highlighter-rouge">UNORDERED</code>（无序执行）。<code class="language-plaintext highlighter-rouge">UNORDERED</code> 会跳过失败的操作继续执行其他操作，<code class="language-plaintext highlighter-rouge">ORDERED</code> 则会在失败时终止后续操作。</p>

<h2 id="query"><code class="language-plaintext highlighter-rouge">Query</code></h2>

<p><code class="language-plaintext highlighter-rouge">Query</code> 是 Spring Data MongoDB 提供的一个类，用于定义查询条件。它封装了 MongoDB 的查询语法，可以通过它构建复杂的查询条件，传递给 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 执行数据库查询操作。</p>

<p><code class="language-plaintext highlighter-rouge">Query</code> 通常与 <code class="language-plaintext highlighter-rouge">Criteria</code> 结合使用，来定义字段的筛选条件。<code class="language-plaintext highlighter-rouge">Criteria</code> 类封装了 MongoDB 查询语句中的各种条件运算符，例如等于、包含、范围等。</p>

<p>以下是 <code class="language-plaintext highlighter-rouge">Query</code> 类的一些常用方法：</p>

<p><strong>基本方法</strong></p>

<p><code class="language-plaintext highlighter-rouge">addCriteria(Criteria criteria)</code>：添加一个查询条件。</p>

<p><strong>投影（字段过滤）</strong></p>

<p><code class="language-plaintext highlighter-rouge">fields()</code>：指定返回结果中的字段。可以包括或排除某些字段。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
<span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span> <span class="c1">// 只返回 name 字段，不包括 age，这是错误的，一般情况下include和exclude不能同时使用</span>
</code></pre></div></div>

<p>在 MongoDB 中，查询返回时<strong>默认会包含所有字段</strong>，除非你通过 <code class="language-plaintext highlighter-rouge">include</code> 或 <code class="language-plaintext highlighter-rouge">exclude</code> 来精确控制返回的字段集合。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">include("name")</code></strong>：表示只返回 <code class="language-plaintext highlighter-rouge">name</code> 字段（默认总是返回的 <code class="language-plaintext highlighter-rouge">_id</code> 字段）。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">exclude("age")</code></strong>：表示排除 <code class="language-plaintext highlighter-rouge">age</code> 字段，使得返回的结果中不包含 <code class="language-plaintext highlighter-rouge">age</code> 字段。</li>
</ul>

<p>在一条查询中不能同时对同一个查询字段既 <code class="language-plaintext highlighter-rouge">include</code> 又 <code class="language-plaintext highlighter-rouge">exclude</code>，即你不能同时包括和排除字段。</p>

<p>只使用 <code class="language-plaintext highlighter-rouge">include()</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s">"address"</span><span class="o">);</span>
</code></pre></div></div>
<p>这条语句表示只返回 <code class="language-plaintext highlighter-rouge">_id</code>（默认返回）以及 <code class="language-plaintext highlighter-rouge">name</code> 和 <code class="language-plaintext highlighter-rouge">address</code> 字段，其他字段会被排除。最终返回结果类似：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"address"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123 Street"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>只使用 <code class="language-plaintext highlighter-rouge">exclude()</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">exclude</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"salary"</span><span class="o">);</span>
</code></pre></div></div>
<p>这条语句表示排除 <code class="language-plaintext highlighter-rouge">age</code> 和 <code class="language-plaintext highlighter-rouge">salary</code> 字段，返回除它们以外的所有字段。例如，MongoDB 文档中包含 <code class="language-plaintext highlighter-rouge">_id</code>、<code class="language-plaintext highlighter-rouge">name</code>、<code class="language-plaintext highlighter-rouge">age</code> 和 <code class="language-plaintext highlighter-rouge">salary</code> 字段，最终结果可能如下：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">include</code> 和 <code class="language-plaintext highlighter-rouge">exclude</code> 同时使用</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span>
</code></pre></div></div>
<p><strong>这种写法是无效的</strong>，MongoDB 不允许在同一个查询中既有 <code class="language-plaintext highlighter-rouge">include</code> 又有 <code class="language-plaintext highlighter-rouge">exclude</code>。</p>

<p>MongoDB 规则</p>

<ul>
  <li>可以使用多个 <code class="language-plaintext highlighter-rouge">include</code> 来明确指定要返回的字段，除了 <code class="language-plaintext highlighter-rouge">_id</code> 字段（它默认会被返回，除非你显式排除）。</li>
  <li>可以使用多个 <code class="language-plaintext highlighter-rouge">exclude</code> 来排除不需要的字段，其他字段都会被返回。</li>
  <li>如果想排除 <code class="language-plaintext highlighter-rouge">_id</code>，需要显式调用 <code class="language-plaintext highlighter-rouge">exclude("_id")</code>。</li>
</ul>

<p>例如：</p>

<p>返回指定字段，不返回 <code class="language-plaintext highlighter-rouge">_id</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s">"address"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"_id"</span><span class="o">);</span>
</code></pre></div></div>
<p>这条语句返回 <code class="language-plaintext highlighter-rouge">name</code> 和 <code class="language-plaintext highlighter-rouge">address</code> 字段，并且不包含 <code class="language-plaintext highlighter-rouge">_id</code>。返回结果可能如下：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"address"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123 Street"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>排除某些字段，保留 <code class="language-plaintext highlighter-rouge">_id</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">exclude</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">exclude</span><span class="o">(</span><span class="s">"salary"</span><span class="o">);</span>
</code></pre></div></div>
<p>这条语句会排除 <code class="language-plaintext highlighter-rouge">age</code> 和 <code class="language-plaintext highlighter-rouge">salary</code> 字段，返回 <code class="language-plaintext highlighter-rouge">_id</code> 和除 <code class="language-plaintext highlighter-rouge">age</code> 和 <code class="language-plaintext highlighter-rouge">salary</code> 外的所有字段。</p>

<p>重点总结</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">include()</code></strong>：只返回指定的字段，其他字段会被排除。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">exclude()</code></strong>：排除指定的字段，其他字段会被返回。</li>
  <li><strong>不能</strong>在同一个查询中混用 <code class="language-plaintext highlighter-rouge">include</code> 和 <code class="language-plaintext highlighter-rouge">exclude</code>，除了特殊情况下 <code class="language-plaintext highlighter-rouge">_id</code> 可以单独被 <code class="language-plaintext highlighter-rouge">exclude</code>。</li>
</ul>

<p><strong>分页操作</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">skip(long skip)</code>：跳过查询结果中的前 N 条记录，常用于分页。</li>
  <li><code class="language-plaintext highlighter-rouge">limit(int limit)</code>：限制查询结果的记录数量。</li>
</ul>

<p>示例：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
<span class="n">query</span><span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span> <span class="c1">// 跳过前 10 条</span>
<span class="n">query</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span> <span class="c1">// 限制只返回 5 条</span>
</code></pre></div></div>

<p><strong>排序操作</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">with(Sort sort)</code>：对查询结果进行排序。可以对一个或多个字段进行升序或降序排列。示例：</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.domain.Sort</span><span class="o">;</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
<span class="n">query</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"age"</span><span class="o">));</span> <span class="c1">// 按照 age 升序排列</span>
</code></pre></div></div>

<p><strong>分页与排序配合</strong></p>

<p>可以通过 <code class="language-plaintext highlighter-rouge">Pageable</code> 来实现分页和排序。示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.domain.PageRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.Pageable</span><span class="o">;</span>

<span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span> <span class="c1">// 第2页，每页10条</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">().</span><span class="na">with</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 执行查询：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.MongoTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.query.Criteria</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.mongodb.core.query.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">MongoTemplate</span> <span class="n">mongoTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">findUsersByAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
        <span class="n">query</span><span class="o">.</span><span class="na">addCriteria</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="n">age</span><span class="o">));</span>
        <span class="k">return</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="criteria"><code class="language-plaintext highlighter-rouge">Criteria</code></h2>

<p><strong>基本操作：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">where(String key)</code></strong>：指定要查询的字段名称。链式调用其他方法来设置查询条件。例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span> <span class="c1">// 查询 age 字段等于 30 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">is(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">=</code>，等于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">lt(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">&lt;</code>，小于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">lte(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">&lt;=</code>，小于等于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">gt(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">&gt;</code>，大于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">gte(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">&gt;=</code>，大于等于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">ne(Object value)</code></strong>：<code class="language-plaintext highlighter-rouge">!=</code>，不等于某个值。</p>

<p><strong><code class="language-plaintext highlighter-rouge">in(Collection&lt;?&gt; values)</code></strong>：<code class="language-plaintext highlighter-rouge">in</code>，字段值在给定的集合中，例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">in</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">25</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">35</span><span class="o">));</span> <span class="c1">// 查询 age 为 25, 30 或 35 的记录。</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">nin(Collection&lt;?&gt; values)</code></strong>：<code class="language-plaintext highlighter-rouge">not in</code>，字段值不在给定的集合中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">nin</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">25</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">35</span><span class="o">));</span> <span class="c1">// 查询 age 不为 25, 30 或 35 的记录、</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">regex(String regex)</code></strong>：正则表达式匹配。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">regex</span><span class="o">(</span><span class="s">"^A.*"</span><span class="o">);</span> <span class="c1">// 查询 name 字段以 "A" 开头的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">exists(boolean exists)</code></strong>：检查字段是否存在。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"address"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">// 查询 address 字段存在的记录</span>
</code></pre></div></div>

<p><strong>嵌套操作</strong>：</p>

<p><strong><code class="language-plaintext highlighter-rouge">elemMatch(Criteria criteria)</code></strong>：用于数组或嵌套对象中的匹配。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">100</span><span class="o">));</span> <span class="c1">// 查询数组中包含 price 大于 100 的元素</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">orOperator(Criteria... criteria)</code></strong>：用于 OR 条件组合查询，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">OR</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">orOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)</span>
<span class="o">);</span> <span class="c1">// 查询 age 小于 20 或 name 为 "John" 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">andOperator(Criteria... criteria)</code></strong>：用于 AND 条件组合查询，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">AND</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">30</span><span class="o">)</span>
<span class="o">);</span> <span class="c1">// 查询 age 大于 20 且小于 30 的记录</span>
</code></pre></div></div>

<p><strong>其他：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">size(int size)</code></strong>：用于查询数组长度为指定值的记录。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"tags"</span><span class="o">).</span><span class="na">size</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">// 查询 tags 数组长度为 3 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">not()</code></strong>：用于取反条件，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">NOT</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">not</span><span class="o">().</span><span class="na">is</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">);</span> <span class="c1">// 查询 name 不为 "Alice" 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">mod(Number divisor, Number remainder)</code></strong>：用于取模操作，查询字段的值是否满足模运算的结果。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">mod</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span> <span class="c1">// 查询 age 能被 5 整除的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">type(int type)</code></strong>：用于查询字段的 BSON 类型。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="c1">// 查询 age 为 BSON 类型 "double" 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">all(Collection&lt;?&gt; values)</code></strong>：用于数组字段的查询，匹配数组字段中包含指定值的记录。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"tags"</span><span class="o">).</span><span class="na">all</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"tag1"</span><span class="o">,</span> <span class="s">"tag2"</span><span class="o">));</span> <span class="c1">// 查询 tags 字段同时包含 "tag1" 和 "tag2" 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isNull()</code></strong>：用于查询字段是否为 <code class="language-plaintext highlighter-rouge">null</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"address"</span><span class="o">).</span><span class="na">isNull</span><span class="o">();</span> <span class="c1">// 查询 address 字段为 null 的记录</span>
</code></pre></div></div>

<p><strong>结合 <code class="language-plaintext highlighter-rouge">Criteria</code> 和 <code class="language-plaintext highlighter-rouge">Query</code> 使用</strong></p>

<p>通常情况下，<code class="language-plaintext highlighter-rouge">Criteria</code> 会与 <code class="language-plaintext highlighter-rouge">Query</code> 结合使用，通过 <code class="language-plaintext highlighter-rouge">Query</code> 类将 <code class="language-plaintext highlighter-rouge">Criteria</code> 传递给 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 执行查询。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
<span class="n">query</span><span class="o">.</span><span class="na">addCriteria</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">25</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">40</span><span class="o">));</span> <span class="c1">// 查询 age 在 25 到 40 之间的记录</span>

<span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>嵌套查询实例：</strong></p>

<p>关于 <code class="language-plaintext highlighter-rouge">elemMatch</code>、<code class="language-plaintext highlighter-rouge">orOperator</code> 和 <code class="language-plaintext highlighter-rouge">andOperator</code> 等嵌套操作的具体使用场景，通常是在查询 MongoDB 中复杂的嵌套文档或数组结构时用到的。为了更清晰地解释这些操作，下面会结合实际的 MongoDB 文档结构，逐个举例说明。</p>

<p>示例 1：<code class="language-plaintext highlighter-rouge">elemMatch</code>（用于数组或嵌套对象匹配）</p>

<p>假设有一个 MongoDB 集合 <code class="language-plaintext highlighter-rouge">products</code>，其文档结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"123"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Laptop"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"color"</span><span class="p">:</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1200</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"color"</span><span class="p">:</span><span class="w"> </span><span class="s2">"silver"</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1300</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>需求</strong>：查询 <code class="language-plaintext highlighter-rouge">items</code> 数组中包含 <code class="language-plaintext highlighter-rouge">price</code> 大于 1200 的文档。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 elemMatch 来匹配数组中的元素</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">1200</span><span class="o">));</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"products"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：<code class="language-plaintext highlighter-rouge">elemMatch</code> 用于查询数组字段 <code class="language-plaintext highlighter-rouge">items</code>，并查找其包含 <code class="language-plaintext highlighter-rouge">price</code> 大于 1200 的元素。</p>

<p>示例 2：<code class="language-plaintext highlighter-rouge">orOperator</code>（用于 <code class="language-plaintext highlighter-rouge">OR</code> 条件查询）</p>

<p>假设有一个 MongoDB 集合 <code class="language-plaintext highlighter-rouge">users</code>，其文档结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"123"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">25</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New York"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"124"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Bob"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"San Francisco"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"125"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Charlie"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">18</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Los Angeles"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>需求</strong>：查询年龄小于 20 岁或名字为 <code class="language-plaintext highlighter-rouge">Alice</code> 的用户。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 orOperator 来进行 OR 组合条件查询</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">orOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Alice"</span><span class="o">)</span>
<span class="o">);</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"users"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：这里使用了 <code class="language-plaintext highlighter-rouge">orOperator</code> 来表示 <code class="language-plaintext highlighter-rouge">age</code> 小于 20 岁或者 <code class="language-plaintext highlighter-rouge">name</code> 是 <code class="language-plaintext highlighter-rouge">Alice</code> 的用户。这个操作相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">OR</code>。</p>

<p>示例 3：<code class="language-plaintext highlighter-rouge">andOperator</code>（用于 <code class="language-plaintext highlighter-rouge">AND</code> 条件查询）</p>

<p>假设还是使用 <code class="language-plaintext highlighter-rouge">users</code> 集合：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"123"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">25</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"New York"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"124"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Bob"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"San Francisco"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"125"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Charlie"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">18</span><span class="p">,</span><span class="w">
  </span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Los Angeles"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>需求</strong>：查询年龄大于 20 且小于 30 岁的用户。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 andOperator 来进行 AND 组合条件查询</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">30</span><span class="o">)</span>
<span class="o">);</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"users"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：这里使用了 <code class="language-plaintext highlighter-rouge">andOperator</code>，表示 <code class="language-plaintext highlighter-rouge">age</code> 大于 20 且小于 30 的用户。这相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">AND</code> 逻辑。</p>

<p>示例 4：<code class="language-plaintext highlighter-rouge">elemMatch</code> + <code class="language-plaintext highlighter-rouge">andOperator</code>（嵌套查询）</p>

<p>假设有一个集合 <code class="language-plaintext highlighter-rouge">orders</code>，其文档结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"101"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"John Doe"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"product"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Laptop"</span><span class="p">,</span><span class="w"> </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1200</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"product"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mouse"</span><span class="p">,</span><span class="w"> </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="err">ObjectId(</span><span class="s2">"102"</span><span class="err">)</span><span class="p">,</span><span class="w">
  </span><span class="nl">"customer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Jane Smith"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"product"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Laptop"</span><span class="p">,</span><span class="w"> </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">1500</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"product"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Keyboard"</span><span class="p">,</span><span class="w"> </span><span class="nl">"quantity"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="nl">"price"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>需求</strong>：查询订单中包含 <code class="language-plaintext highlighter-rouge">Laptop</code> 且价格大于 1300 的订单。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 elemMatch 和 andOperator 进行复杂嵌套条件查询</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
        <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"product"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">),</span>
        <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">1300</span><span class="o">)</span>
    <span class="o">)</span>
<span class="o">);</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"orders"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：这里的 <code class="language-plaintext highlighter-rouge">elemMatch</code> 用于匹配 <code class="language-plaintext highlighter-rouge">items</code> 数组中的某个元素，它必须同时满足 <code class="language-plaintext highlighter-rouge">product</code> 为 <code class="language-plaintext highlighter-rouge">Laptop</code> 且 <code class="language-plaintext highlighter-rouge">price</code> 大于 1300 的条件。</p>

<p>示例 5：<code class="language-plaintext highlighter-rouge">orOperator</code> + <code class="language-plaintext highlighter-rouge">elemMatch</code>（组合查询）</p>

<p>假设使用相同的 <code class="language-plaintext highlighter-rouge">orders</code> 集合：</p>

<p><strong>需求</strong>：查询订单中包含 <code class="language-plaintext highlighter-rouge">Laptop</code> 且价格大于 1300 或 <code class="language-plaintext highlighter-rouge">Mouse</code> 的订单。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用 orOperator 和 elemMatch 进行组合查询</span>
<span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">orOperator</span><span class="o">(</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span>
        <span class="k">new</span> <span class="nf">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
            <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"product"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Laptop"</span><span class="o">),</span>
            <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"price"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">1300</span><span class="o">)</span>
        <span class="o">)</span>
    <span class="o">),</span>
    <span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"items"</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"product"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"Mouse"</span><span class="o">))</span>
<span class="o">);</span>

<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"orders"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>解释</strong>：在这里，使用了 <code class="language-plaintext highlighter-rouge">orOperator</code> 来表示两种情况之一：要么 <code class="language-plaintext highlighter-rouge">items</code> 中包含 <code class="language-plaintext highlighter-rouge">Laptop</code> 且价格大于 1300，要么 <code class="language-plaintext highlighter-rouge">items</code> 中包含 <code class="language-plaintext highlighter-rouge">Mouse</code>。这相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">OR</code> 逻辑。</p>

<p><strong>特别注意</strong></p>

<p>下面的 MongoDB 查询：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"$or"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"deleteStatus"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"deleteStatus"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$exists"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}],</span><span class="w">
  </span><span class="nl">"tenant_id"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"$or"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"speciality"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"生物学"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"number"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$gt"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">54</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>等效于以下 SQL 语句：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> 
<span class="k">FROM</span> <span class="n">co_common_test1</span> 
<span class="k">WHERE</span> 
  <span class="p">(</span><span class="n">deleteStatus</span> <span class="o">=</span> <span class="k">false</span> <span class="k">OR</span> <span class="n">deleteStatus</span> <span class="k">IS</span> <span class="k">NULL</span><span class="p">)</span>
  <span class="k">AND</span> <span class="n">tenant_id</span> <span class="o">=</span> <span class="s1">'16889087066967307206'</span>
  <span class="k">AND</span> <span class="p">(</span><span class="n">speciality</span> <span class="o">=</span> <span class="s1">'生物学'</span> <span class="k">OR</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">54</span><span class="p">);</span>
</code></pre></div></div>

<p>但是，在 MongoDB 中，一个文档内不能同时包含两个顶层的 <code class="language-plaintext highlighter-rouge">"$or"</code>，因为<strong>每个键必须是唯一的</strong>。如果你尝试这样做，后面的 <code class="language-plaintext highlighter-rouge">"$or"</code> 会覆盖前面的 <code class="language-plaintext highlighter-rouge">"$or"</code>，导致无法正确执行查询。</p>

<p>要解决这个问题并保持你想要的逻辑，可以使用一个顶层的 <code class="language-plaintext highlighter-rouge">"$and"</code> 来组合这两个 <code class="language-plaintext highlighter-rouge">"$or"</code> 逻辑。这是 MongoDB 语法的限制，必须使用 <code class="language-plaintext highlighter-rouge">$and</code> 来组合多个 <code class="language-plaintext highlighter-rouge">"$or"</code>。</p>

<p>可以将查询重构为：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"$or"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"deleteStatus"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"deleteStatus"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$exists"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}]</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"tenant_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"$or"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w"> </span><span class="nl">"speciality"</span><span class="p">:</span><span class="w"> </span><span class="s2">"生物学"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"number"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$gt"</span><span class="p">:</span><span class="w"> </span><span class="mi">54</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}]</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>这对应的 SQL 查询仍然是你期望的：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> 
<span class="k">FROM</span> <span class="n">co_common_test1</span> 
<span class="k">WHERE</span> 
  <span class="p">(</span><span class="n">deleteStatus</span> <span class="o">=</span> <span class="k">false</span> <span class="k">OR</span> <span class="n">deleteStatus</span> <span class="k">IS</span> <span class="k">NULL</span><span class="p">)</span>
  <span class="k">AND</span> <span class="n">tenant_id</span> <span class="o">=</span> <span class="s1">'16889087066967307206'</span>
  <span class="k">AND</span> <span class="p">(</span><span class="n">speciality</span> <span class="o">=</span> <span class="s1">'生物学'</span> <span class="k">OR</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">54</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>总结：</strong> 尽管 SQL 中不需要显式使用 <code class="language-plaintext highlighter-rouge">AND</code> 来组合多个条件，但在 MongoDB 中，必须使用 <code class="language-plaintext highlighter-rouge">"$and"</code> 来组合多个 <code class="language-plaintext highlighter-rouge">"$or"</code>，否则会遇到查询覆盖的问题。</p>

<h2 id="更新操作">更新操作</h2>

<p><strong><code class="language-plaintext highlighter-rouge">Update</code></strong>：</p>

<p><code class="language-plaintext highlighter-rouge">org.springframework.data.mongodb.core.query.Update</code> 是 Spring Data MongoDB 中用于执行数据库更新操作的核心类。它可以用于对 MongoDB 文档进行字段更新、增量修改、数组操作等。以下是一些 <code class="language-plaintext highlighter-rouge">Update</code> 类的常用方法，以及每个方法的用途和实例。</p>

<p><strong><code class="language-plaintext highlighter-rouge">set(String key, Object value)</code></strong> - 设置字段值</p>

<p>用于将指定字段的值更新为新值。如果字段不存在，会创建该字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>  <span class="c1">// 设置字段 "age" 的值为 30</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">unset(String key)</code></strong> - 移除字段</p>

<p>用于移除指定的字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">unset</span><span class="o">(</span><span class="s">"address"</span><span class="o">);</span>  <span class="c1">// 删除字段 "address"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">inc(String key, Number value)</code></strong> - 增加或减少字段值</p>

<p>对数值字段进行增量操作（加法）。如果字段不存在，它将创建该字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">inc</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>  <span class="c1">// 将 "age" 字段的值增加 2</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">push(String key, Object value)</code></strong> - 向数组字段追加元素</p>

<p>将一个元素添加到数组字段中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="s">"Java"</span><span class="o">);</span>  <span class="c1">// 在 "skills" 数组中添加 "Java"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">addToSet(String key, Object value)</code></strong> - 向数组添加唯一元素</p>

<p>如果数组字段中不存在该值，则添加该值（避免重复）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">addToSet</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="s">"Java"</span><span class="o">);</span>  <span class="c1">// 如果 "skills" 数组中不存在 "Java"，则添加</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">pull(String key, Object value)</code></strong> - 从数组中移除指定值</p>

<p>移除数组字段中等于指定值的元素。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">pull</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="s">"Java"</span><span class="o">);</span>  <span class="c1">// 从 "skills" 数组中移除 "Java"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">pullAll(String key, Object... values)</code></strong> - 从数组中移除多个值</p>

<p>从数组字段中移除多个指定值。</p>

<p><strong>实例</strong>：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">pullAll</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"Java"</span><span class="o">,</span> <span class="s">"Python"</span><span class="o">});</span>  <span class="c1">// 从 "skills" 数组中移除 "Java" 和 "Python"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">pop(String key, Update.Position position)</code></strong> - 从数组的开头或结尾移除元素</p>

<p>用于从数组的开头或结尾移除一个元素。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Update.Position.FIRST</code>：移除第一个元素</li>
  <li><code class="language-plaintext highlighter-rouge">Update.Position.LAST</code>：移除最后一个元素</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">pop</span><span class="o">(</span><span class="s">"skills"</span><span class="o">,</span> <span class="nc">Update</span><span class="o">.</span><span class="na">Position</span><span class="o">.</span><span class="na">LAST</span><span class="o">);</span>  <span class="c1">// 移除 "skills" 数组中的最后一个元素</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">rename(String oldName, String newName)</code></strong> - 重命名字段</p>

<p>将指定字段重命名为新名称。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">rename</span><span class="o">(</span><span class="s">"oldFieldName"</span><span class="o">,</span> <span class="s">"newFieldName"</span><span class="o">);</span>  <span class="c1">// 将字段 "oldFieldName" 重命名为 "newFieldName"</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">mul(String key, Number factor)</code></strong> - 数值乘法更新</p>

<p>将指定字段的值乘以某个因子。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">mul</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mf">1.1</span><span class="o">);</span>  <span class="c1">// 将 "price" 字段的值乘以 1.1</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">min(String key, Object value)</code></strong> - 仅当新值小于当前值时进行更新</p>

<p>如果传入的新值比现有字段的值小，则更新该字段为新值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>  <span class="c1">// 仅当 "price" 小于 100 时，更新它为 100</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">max(String key, Object value)</code></strong> - 仅当新值大于当前值时进行更新</p>

<p>如果传入的新值比现有字段的值大，则更新该字段为新值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="s">"price"</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>  <span class="c1">// 仅当 "price" 大于 1000 时，更新它为 1000</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">currentDate(String key)</code></strong> - 设置字段为当前日期</p>

<p>将指定字段的值设置为当前日期时间。</p>

<p><strong>实例</strong>：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">();</span>
<span class="n">update</span><span class="o">.</span><span class="na">currentDate</span><span class="o">(</span><span class="s">"lastModified"</span><span class="o">);</span>  <span class="c1">// 设置 "lastModified" 字段为当前时间</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">combine(Update... updates)</code></strong> - 组合多个 <code class="language-plaintext highlighter-rouge">Update</code> 对象</p>

<p>将多个 <code class="language-plaintext highlighter-rouge">Update</code> 对象组合成一个 <code class="language-plaintext highlighter-rouge">Update</code> 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Update</span> <span class="n">update1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"John"</span><span class="o">);</span>
<span class="nc">Update</span> <span class="n">update2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">inc</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="nc">Update</span> <span class="n">combinedUpdate</span> <span class="o">=</span> <span class="nc">Update</span><span class="o">.</span><span class="na">combine</span><span class="o">(</span><span class="n">update1</span><span class="o">,</span> <span class="n">update2</span><span class="o">);</span>  <span class="c1">// 将多个更新组合在一起</span>
</code></pre></div></div>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">UpdateResult</code></strong>：</p>

<p><code class="language-plaintext highlighter-rouge">updateFirst</code> 等更新方法的返回值类型为 <code class="language-plaintext highlighter-rouge">com.mongodb.client.result.UpdateResult</code>。<code class="language-plaintext highlighter-rouge">UpdateResult</code> 类用于表示更新操作的结果，并提供了一些方法来获取有关更新操作的详细信息。它包括以下一些常用方法：</p>

<p><code class="language-plaintext highlighter-rouge">UpdateResult</code> 常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getMatchedCount()</code></strong>:  返回匹配到的文档数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">UpdateResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">updateFirst</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">update</span><span class="o">,</span> <span class="nc">MyClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
   <span class="kt">long</span> <span class="n">matchedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getMatchedCount</span><span class="o">();</span>  <span class="c1">// 返回匹配到的文档数量</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getModifiedCount()</code></strong>:  返回实际被修改的文档数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kt">long</span> <span class="n">modifiedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getModifiedCount</span><span class="o">();</span>  <span class="c1">// 返回修改的文档数量</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">wasAcknowledged()</code></strong>:  检查更新操作是否被 MongoDB 确认。返回 <code class="language-plaintext highlighter-rouge">true</code> 表示操作已确认。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kt">boolean</span> <span class="n">isAcknowledged</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">();</span>  <span class="c1">// 检查操作是否被确认</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getUpsertedId()</code></strong>:  返回因为 <code class="language-plaintext highlighter-rouge">upsert</code> 操作插入的文档的 <code class="language-plaintext highlighter-rouge">_id</code>，如果操作不是 <code class="language-plaintext highlighter-rouge">upsert</code>，则返回 <code class="language-plaintext highlighter-rouge">null</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">BsonValue</span> <span class="n">upsertedId</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getUpsertedId</span><span class="o">();</span>  <span class="c1">// 获取通过 upsert 插入的文档 ID</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">upsertedId</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Upserted ID: "</span> <span class="o">+</span> <span class="n">upsertedId</span><span class="o">);</span>
   <span class="o">}</span>
</code></pre></div></div>

<p>结合 <code class="language-plaintext highlighter-rouge">updateFirst</code> 使用的完整示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">));</span>
<span class="nc">Update</span> <span class="n">update</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Update</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>

<span class="c1">// 执行更新操作</span>
<span class="nc">UpdateResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">updateFirst</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="n">update</span><span class="o">,</span> <span class="nc">MyClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 获取更新结果信息</span>
<span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Matched count: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">getMatchedCount</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Modified count: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">getModifiedCount</span><span class="o">());</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getUpsertedId</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Upserted ID: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">getUpsertedId</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Update was not acknowledged by MongoDB"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getMatchedCount()</code>：匹配的文档数量。</li>
  <li><code class="language-plaintext highlighter-rouge">getModifiedCount()</code>：修改的文档数量。</li>
  <li><code class="language-plaintext highlighter-rouge">wasAcknowledged()</code>：检查操作是否被 MongoDB 确认。</li>
  <li><code class="language-plaintext highlighter-rouge">getUpsertedId()</code>：如果进行了 <code class="language-plaintext highlighter-rouge">upsert</code> 操作并插入新文档，则返回该文档的 <code class="language-plaintext highlighter-rouge">_id</code>。</li>
</ul>

<h2 id="删除操作">删除操作</h2>

<p><code class="language-plaintext highlighter-rouge">com.mongodb.client.result.DeleteResult</code> 是 MongoDB 中删除操作的结果对象，它提供了方法来检查删除操作的执行情况和结果。它和 <code class="language-plaintext highlighter-rouge">UpdateResult</code> 类似，主要用于查看删除操作的结果和影响。</p>

<p><code class="language-plaintext highlighter-rouge">DeleteResult</code> 常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getDeletedCount()</code></strong>:  返回被删除的文档数。该方法用于了解删除操作影响了多少个文档。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">long</span> <span class="n">deletedCount</span> <span class="o">=</span> <span class="n">deleteResult</span><span class="o">.</span><span class="na">getDeletedCount</span><span class="o">();</span>  <span class="c1">// 获取被删除的文档数量</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">wasAcknowledged()</code></strong>:  检查删除操作是否被 MongoDB 确认。返回 <code class="language-plaintext highlighter-rouge">true</code> 表示删除操作已确认，<code class="language-plaintext highlighter-rouge">false</code> 表示操作未被确认。这对于确认操作是否成功完成是非常有用的。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">boolean</span> <span class="n">isAcknowledged</span> <span class="o">=</span> <span class="n">deleteResult</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">();</span>  <span class="c1">// 检查操作是否被确认</span>
</code></pre></div></div>

<p>使用 <code class="language-plaintext highlighter-rouge">DeleteResult</code> 的完整示例</p>

<p>假设你想从 MongoDB 中删除某个集合中的记录，可以通过 <code class="language-plaintext highlighter-rouge">MongoTemplate</code> 执行删除操作，并使用 <code class="language-plaintext highlighter-rouge">DeleteResult</code> 来获取结果。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 定义查询条件</span>
<span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">));</span>

<span class="c1">// 执行删除操作</span>
<span class="nc">DeleteResult</span> <span class="n">deleteResult</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">MyClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 检查删除操作是否被 MongoDB 确认</span>
<span class="k">if</span> <span class="o">(</span><span class="n">deleteResult</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">// 获取被删除的文档数量</span>
    <span class="kt">long</span> <span class="n">deletedCount</span> <span class="o">=</span> <span class="n">deleteResult</span><span class="o">.</span><span class="na">getDeletedCount</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Deleted count: "</span> <span class="o">+</span> <span class="n">deletedCount</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Delete operation was not acknowledged by MongoDB"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="批量操作">批量操作</h2>

<p><code class="language-plaintext highlighter-rouge">BulkOperations</code> 是 Spring Data MongoDB 提供的用于批量执行 MongoDB 操作的接口。它允许你在一次操作中对多个文档执行插入、更新、删除等操作。使用批量操作不仅可以提高效率，还可以减少网络开销和数据库负载。</p>

<p>常用的 <code class="language-plaintext highlighter-rouge">BulkOperations</code> 方法及其作用</p>

<p><strong><code class="language-plaintext highlighter-rouge">insert(List&lt;?&gt; documents)</code></strong>：插入多个文档到集合中。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyDocument</span><span class="o">&gt;</span> <span class="n">documents</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc1"</span><span class="o">),</span> <span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc2"</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">documents</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">updateOne(Query query, Update update)</code></strong>：根据查询条件更新单个文档。相当于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">updateOne</code> 操作。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">));</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">updateMulti(Query query, Update update)</code></strong>: 根据查询条件更新多个文档。相当于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">updateMany</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">updateMulti</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"status"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"active"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"status"</span><span class="o">,</span> <span class="s">"inactive"</span><span class="o">));</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">remove(Query query)</code></strong>：根据查询条件删除文档。相当于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">deleteMany</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">lt</span><span class="o">(</span><span class="mi">18</span><span class="o">)));</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">replaceOne(Query query, Object replacement)</code></strong>: 查找并替换符合条件的单个文档。类似于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">replaceOne</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MyDocument</span> <span class="n">replacement</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"newDocument"</span><span class="o">);</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">replaceOne</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"OldDocument"</span><span class="o">)),</span> <span class="n">replacement</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">upsert(Query query, Update update)</code></strong>：如果符合条件的文档存在，则更新；如果不存在，则插入新文档。相当于 MongoDB 中的 <code class="language-plaintext highlighter-rouge">upsert</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">upsert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">25</span><span class="o">));</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">execute()</code></strong>：执行批量操作。执行所有在批量操作中添加的插入、更新、删除等操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BulkWriteResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">bulkOps</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">find(Query query)</code></strong>：根据查询条件查找文档，通常用于后续的 <code class="language-plaintext highlighter-rouge">update</code> 或 <code class="language-plaintext highlighter-rouge">remove</code> 操作。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bulkOps</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">30</span><span class="o">)));</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">BulkOperations</code> 示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建 BulkOperations 实例</span>
<span class="nc">BulkOperations</span> <span class="n">bulkOps</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">bulkOps</span><span class="o">(</span><span class="nc">BulkOperations</span><span class="o">.</span><span class="na">BulkMode</span><span class="o">.</span><span class="na">ORDERED</span><span class="o">,</span> <span class="nc">MyDocument</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 插入多个文档</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyDocument</span><span class="o">&gt;</span> <span class="n">documents</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc1"</span><span class="o">),</span> <span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc2"</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">documents</span><span class="o">);</span>

<span class="c1">// 更新单个文档</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">));</span>

<span class="c1">// 删除符合条件的文档</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"status"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"inactive"</span><span class="o">)));</span>

<span class="c1">// 执行所有操作</span>
<span class="nc">BulkWriteResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">bulkOps</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</code></pre></div></div>

<p>执行模式</p>
<ul>
  <li><strong>ORDERED</strong>: 批量操作按顺序执行。如果某个操作失败，后续操作将不执行。</li>
  <li><strong>UNORDERED</strong>: 批量操作可以并行执行，即使某个操作失败，其他操作仍会继续执行。</li>
</ul>

<p>常用场景</p>
<ul>
  <li><strong>批量插入</strong>: 大量文档插入时，使用 <code class="language-plaintext highlighter-rouge">bulkOps.insert()</code> 提高性能。</li>
  <li><strong>批量更新</strong>: 需要对多个文档进行同一条件更新时，使用 <code class="language-plaintext highlighter-rouge">bulkOps.updateMulti()</code>。</li>
  <li><strong>批量删除</strong>: 批量删除符合条件的文档时，使用 <code class="language-plaintext highlighter-rouge">bulkOps.remove()</code>。</li>
  <li><strong>高效处理</strong>: 当需要执行多个操作时（如更新和删除），可以通过批量操作一次性提交。</li>
</ul>

<p>通过 <code class="language-plaintext highlighter-rouge">BulkOperations</code>，可以将多种操作打包成一次请求，大幅减少与数据库的交互次数，提升操作效率。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">BulkWriteResult</code> 是 MongoDB 批量操作（<code class="language-plaintext highlighter-rouge">BulkOperations</code>）执行后的结果对象。它用于获取批量写操作的执行结果，提供了插入、更新、删除等操作的统计信息。</p>

<p><code class="language-plaintext highlighter-rouge">BulkWriteResult</code> 常用方法及其作用</p>

<p><strong><code class="language-plaintext highlighter-rouge">getInsertedCount()</code></strong>：返回批量操作中成功插入文档的数量。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">insertedCount</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getInsertedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"插入的文档数量: "</span> <span class="o">+</span> <span class="n">insertedCount</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getMatchedCount()</code></strong>：返回批量更新操作中匹配的文档数量，即符合查询条件的文档数量，不论是否有实际更新发生。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">matchedCount</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getMatchedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"匹配的文档数量: "</span> <span class="o">+</span> <span class="n">matchedCount</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getModifiedCount()</code></strong>：返回批量更新操作中实际被更新的文档数量。注意，只有当文档内容发生改变时，这个值才会增加。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">modifiedCount</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getModifiedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实际更新的文档数量: "</span> <span class="o">+</span> <span class="n">modifiedCount</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getDeletedCount()</code></strong>：返回批量操作中成功删除的文档数量。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">deletedCount</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getDeletedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除的文档数量: "</span> <span class="o">+</span> <span class="n">deletedCount</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getUpserts()</code></strong>：返回批量操作中发生 <code class="language-plaintext highlighter-rouge">upsert</code>（更新插入）的文档信息列表。<code class="language-plaintext highlighter-rouge">upsert</code> 是指如果查询没有匹配到文档，则插入新文档。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">BulkWriteUpsert</span><span class="o">&gt;</span> <span class="n">upserts</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getUpserts</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">BulkWriteUpsert</span> <span class="n">upsert</span> <span class="o">:</span> <span class="n">upserts</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Upserted Document _id: "</span> <span class="o">+</span> <span class="n">upsert</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getInsertedIds()</code></strong>：返回批量操作中成功插入的文档 <code class="language-plaintext highlighter-rouge">_id</code> 列表。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">BsonValue</span><span class="o">&gt;</span> <span class="n">insertedIds</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">getInsertedIds</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">BsonValue</span> <span class="n">id</span> <span class="o">:</span> <span class="n">insertedIds</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"插入的文档 _id: "</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">wasAcknowledged()</code></strong>：返回该批量操作是否被 MongoDB 成功确认。通常在 <code class="language-plaintext highlighter-rouge">UNACKNOWLEDGED</code> 模式下，它会返回 <code class="language-plaintext highlighter-rouge">false</code>。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">acknowledged</span> <span class="o">=</span> <span class="n">bulkWriteResult</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(</span><span class="n">acknowledged</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"批量操作已被确认"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"批量操作未被确认"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>示例</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建 BulkOperations 实例</span>
<span class="nc">BulkOperations</span> <span class="n">bulkOps</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">bulkOps</span><span class="o">(</span><span class="nc">BulkOperations</span><span class="o">.</span><span class="na">BulkMode</span><span class="o">.</span><span class="na">ORDERED</span><span class="o">,</span> <span class="nc">MyDocument</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 添加批量操作</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyDocument</span><span class="o">(</span><span class="s">"doc1"</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"John"</span><span class="o">)),</span> <span class="nc">Update</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">30</span><span class="o">));</span>
<span class="n">bulkOps</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"status"</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="s">"inactive"</span><span class="o">)));</span>

<span class="c1">// 执行批量操作并获取结果</span>
<span class="nc">BulkWriteResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">bulkOps</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>

<span class="c1">// 获取插入的文档数量</span>
<span class="kt">int</span> <span class="n">insertedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getInsertedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"插入的文档数量: "</span> <span class="o">+</span> <span class="n">insertedCount</span><span class="o">);</span>

<span class="c1">// 获取更新匹配的文档数量</span>
<span class="kt">int</span> <span class="n">matchedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getMatchedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"匹配的文档数量: "</span> <span class="o">+</span> <span class="n">matchedCount</span><span class="o">);</span>

<span class="c1">// 获取实际更新的文档数量</span>
<span class="kt">int</span> <span class="n">modifiedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getModifiedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"实际更新的文档数量: "</span> <span class="o">+</span> <span class="n">modifiedCount</span><span class="o">);</span>

<span class="c1">// 获取删除的文档数量</span>
<span class="kt">int</span> <span class="n">deletedCount</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getDeletedCount</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"删除的文档数量: "</span> <span class="o">+</span> <span class="n">deletedCount</span><span class="o">);</span>

<span class="c1">// 检查批量操作是否被确认</span>
<span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">wasAcknowledged</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"批量操作已成功确认"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"批量操作未被确认"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>常用场景</strong></p>

<ul>
  <li><strong>批量插入后统计</strong>: 在执行大批量数据插入后，使用 <code class="language-plaintext highlighter-rouge">getInsertedCount()</code> 获取插入的总数。</li>
  <li><strong>批量更新后检查</strong>: 在进行批量更新时，通过 <code class="language-plaintext highlighter-rouge">getMatchedCount()</code> 和 <code class="language-plaintext highlighter-rouge">getModifiedCount()</code> 确认有多少文档被匹配和实际修改。</li>
  <li><strong>批量删除后确认</strong>: 使用 <code class="language-plaintext highlighter-rouge">getDeletedCount()</code> 确认成功删除的文档数量。</li>
  <li><strong>检查 <code class="language-plaintext highlighter-rouge">upsert</code> 操作</strong>: 使用 <code class="language-plaintext highlighter-rouge">getUpserts()</code> 获取执行了 <code class="language-plaintext highlighter-rouge">upsert</code> 的文档信息。</li>
</ul>

<h2 id="排序">排序</h2>

<p><code class="language-plaintext highlighter-rouge">org.springframework.data.domain.Sort</code> 是 Spring Data 中用于排序查询结果的类，它封装了排序逻辑并用于指定查询时的排序规则。可以使用 <code class="language-plaintext highlighter-rouge">Sort</code> 来按照指定字段升序或降序排列数据，通常与分页（<code class="language-plaintext highlighter-rouge">Pageable</code>）和查询（<code class="language-plaintext highlighter-rouge">Query</code>）配合使用。</p>

<p><code class="language-plaintext highlighter-rouge">Sort</code> 的作用是定义数据库查询的排序方式，指定某个字段按升序或降序排列。你可以基于多个字段进行排序，甚至在不同字段上指定不同的排序方向（升序或降序）。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.by(String... properties)</code></strong>：根据属性名生成排序对象，默认是升序排序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"age"</span><span class="o">);</span>  <span class="c1">// 按 name 和 age 字段升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.by(Sort.Order... orders)</code></strong>：根据多个 <code class="language-plaintext highlighter-rouge">Sort.Order</code> 对象创建排序对象，每个字段可以自定义升序或降序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span>
   <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span>      <span class="c1">// 按 name 升序</span>
   <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span>       <span class="c1">// 按 age 降序</span>
<span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.by(List&lt;Sort.Order&gt; orders)</code></strong>：使用 <code class="language-plaintext highlighter-rouge">List&lt;Sort.Order&gt;</code> 对象创建排序规则。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">&gt;</span> <span class="n">orders</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
   <span class="k">new</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">),</span>
   <span class="k">new</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"age"</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="n">orders</span><span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.Order.asc(String property)</code></strong>：创建按指定字段升序排序的 <code class="language-plaintext highlighter-rouge">Order</code> 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>  <span class="c1">// 按 name 升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.Order.desc(String property)</code></strong>：创建按指定字段降序排序的 <code class="language-plaintext highlighter-rouge">Order</code> 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span>  <span class="c1">// 按 age 降序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.with(Sort.Direction direction, String... properties)</code></strong>：指定排序方向和多个字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">,</span> <span class="s">"age"</span><span class="o">);</span>  <span class="c1">// 按 name 和 age 升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">and(Sort sort)</code></strong>：将两个 <code class="language-plaintext highlighter-rouge">Sort</code> 对象组合，等同于 SQL 中多个字段排序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort1</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
<span class="nc">Sort</span> <span class="n">sort2</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"age"</span><span class="o">);</span>
<span class="nc">Sort</span> <span class="n">combinedSort</span> <span class="o">=</span> <span class="n">sort1</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">sort2</span><span class="o">);</span>  <span class="c1">// 先按 name 升序，然后按 age 升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getOrderFor(String property)</code></strong>：获取指定属性的排序规则。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
<span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">sort</span><span class="o">.</span><span class="na">getOrderFor</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getDirection</span><span class="o">());</span>  <span class="c1">// 输出: ASC</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">descending()</code></strong>：转换当前排序对象为降序排序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">descending</span><span class="o">();</span>  <span class="c1">// 按 name 降序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">ascending()</code></strong>：转换当前排序对象为升序排序。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">ascending</span><span class="o">();</span>  <span class="c1">// 按 name 升序排序</span>
</code></pre></div></div>

<p><strong>常用字段</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.Direction</code></strong>: 枚举类，表示排序方向，有两个可能的值：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ASC</code>（升序）</li>
  <li><code class="language-plaintext highlighter-rouge">DESC</code>（降序）</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">);</span>  <span class="c1">// 按 name 字段升序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Sort.Order</code></strong>: 封装了排序规则的对象，可以指定排序方向、字段和忽略大小写等参数。常用字段:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">property</code>：要排序的字段名。</li>
  <li><code class="language-plaintext highlighter-rouge">direction</code>：排序方向，<code class="language-plaintext highlighter-rouge">ASC</code> 或 <code class="language-plaintext highlighter-rouge">DESC</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">ignoreCase</code>：是否忽略大小写。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>示例</strong></p>

<p>单字段排序：按 <code class="language-plaintext highlighter-rouge">name</code> 升序排序:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span> <span class="s">"name"</span><span class="o">);</span>
</code></pre></div></div>

<p>多字段排序：按 <code class="language-plaintext highlighter-rouge">name</code> 升序、<code class="language-plaintext highlighter-rouge">age</code> 降序排序:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span>
    <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span>
    <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span>
<span class="o">);</span>
</code></pre></div></div>

<p>与分页结合</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
<span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="分页">分页</h2>

<p>在 Spring Data 中，分页查询是非常常见的功能。<code class="language-plaintext highlighter-rouge">PageRequest</code> 和 <code class="language-plaintext highlighter-rouge">Pageable</code> 是用于定义分页和排序的核心类，通常与 <code class="language-plaintext highlighter-rouge">Page</code> 和 <code class="language-plaintext highlighter-rouge">Slice</code> 类一起使用来获取分页后的数据结果。</p>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest</code></strong>
<code class="language-plaintext highlighter-rouge">PageRequest</code> 是 <code class="language-plaintext highlighter-rouge">Pageable</code> 的实现类，用于创建分页请求对象，包含分页和排序的信息。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest.of(int page, int size)</code></strong>：创建一个分页请求对象，指定页码和每页大小。<strong>参数</strong>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">page</code>: 页码（从 0 开始）。</li>
  <li><code class="language-plaintext highlighter-rouge">size</code>: 每页的记录数。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span> <span class="c1">// 第 1 页，每页 10 条记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest.of(int page, int size, Sort sort)</code></strong>：创建带排序功能的分页请求。<strong>参数</strong>:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">page</code>: 页码。</li>
  <li><code class="language-plaintext highlighter-rouge">size</code>: 每页大小。</li>
  <li><code class="language-plaintext highlighter-rouge">sort</code>: 排序规则。</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">ascending</span><span class="o">());</span> <span class="c1">// 第 1 页，按 name 升序，每页 10 条记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest.previous()</code></strong>：返回上一页的 <code class="language-plaintext highlighter-rouge">PageRequest</code> 对象，如果是第一页则返回第一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">previousPage</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">previous</span><span class="o">();</span> <span class="c1">// 获取上一页的分页信息</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">PageRequest.next()</code></strong>：返回下一页的 <code class="language-plaintext highlighter-rouge">PageRequest</code> 对象。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pageable</span> <span class="n">nextPage</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">next</span><span class="o">();</span> <span class="c1">// 获取下一页的分页信息</span>
</code></pre></div></div>

<p>常用字段
<code class="language-plaintext highlighter-rouge">PageRequest</code> 主要实现自 <code class="language-plaintext highlighter-rouge">Pageable</code>，常用的字段来自 <code class="language-plaintext highlighter-rouge">Pageable</code> 接口：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">page</code>: 页码（从 0 开始）。</li>
  <li><code class="language-plaintext highlighter-rouge">size</code>: 每页的大小。</li>
  <li><code class="language-plaintext highlighter-rouge">sort</code>: 排序规则（<code class="language-plaintext highlighter-rouge">Sort</code> 对象）。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">Pageable</code></strong>
<code class="language-plaintext highlighter-rouge">Pageable</code> 是分页信息的接口，用于定义分页和排序规则。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getPageNumber()</code></strong>：返回当前页码（从 0 开始）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">pageNumber</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">getPageNumber</span><span class="o">();</span> <span class="c1">// 获取当前页码</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getPageSize()</code></strong>：返回每页的大小。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">pageSize</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">getPageSize</span><span class="o">();</span> <span class="c1">// 获取每页记录数</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getOffset()</code></strong>：返回从哪条记录开始查询（偏移量）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">getOffset</span><span class="o">();</span> <span class="c1">// 获取查询的起始记录索引</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getSort()</code></strong>：返回当前的排序规则。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">getSort</span><span class="o">();</span> <span class="c1">// 获取排序规则</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isPaged()</code></strong>：检查是否分页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">paged</span> <span class="o">=</span> <span class="n">pageable</span><span class="o">.</span><span class="na">isPaged</span><span class="o">();</span> <span class="c1">// 判断是否分页</span>
</code></pre></div></div>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">Page</code></strong>
<code class="language-plaintext highlighter-rouge">Page</code> 是一个接口，用于封装分页结果集，通常包含分页的元信息（如总页数、总记录数、当前页）以及数据列表。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getContent()</code></strong>：返回当前页的数据内容。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span> <span class="c1">// 获取当前页的用户列表</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getTotalElements()</code></strong>：返回总记录数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">total</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalElements</span><span class="o">();</span> <span class="c1">// 获取总记录数</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getTotalPages()</code></strong>：返回总页数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">totalPages</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalPages</span><span class="o">();</span> <span class="c1">// 获取总页数</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getNumber()</code></strong>：返回当前页码（从 0 开始）。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">pageNumber</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getNumber</span><span class="o">();</span> <span class="c1">// 获取当前页码</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getSize()</code></strong>：返回每页大小。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="c1">// 获取每页记录数</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">hasNext()</code></strong>：判断是否有下一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">hasNext</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="c1">// 判断是否有下一页</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">hasPrevious()</code></strong>：判断是否有上一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">hasPrevious</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">hasPrevious</span><span class="o">();</span> <span class="c1">// 判断是否有上一页</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isFirst()</code></strong>：判断是否为第一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">isFirst</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">isFirst</span><span class="o">();</span> <span class="c1">// 判断是否是第一页</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isLast()</code></strong>：判断是否为最后一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">isLast</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="na">isLast</span><span class="o">();</span> <span class="c1">// 判断是否是最后一页</span>
</code></pre></div></div>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">Slice</code></strong>
<code class="language-plaintext highlighter-rouge">Slice</code> 是分页的一种轻量级版本，它不包含总页数和总记录数的信息，只提供当前页的数据和是否存在下一页的标志。</p>

<p>常用方法</p>

<p><strong><code class="language-plaintext highlighter-rouge">getContent()</code></strong>：返回当前页的数据内容。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">slice</span><span class="o">.</span><span class="na">getContent</span><span class="o">();</span> <span class="c1">// 获取当前页的用户列表</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">hasNext()</code></strong>：判断是否有下一页。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">hasNext</span> <span class="o">=</span> <span class="n">slice</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="c1">// 判断是否有下一页</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getNumber()</code></strong>：返回当前页码。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">pageNumber</span> <span class="o">=</span> <span class="n">slice</span><span class="o">.</span><span class="na">getNumber</span><span class="o">();</span> <span class="c1">// 获取当前页码</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getSize()</code></strong>：返回每页大小。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">slice</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span> <span class="c1">// 获取每页记录数</span>
</code></pre></div></div>

<hr />

<p>实例代码</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.domain.Page</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.PageRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.Pageable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.domain.Sort</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">)</span> <span class="o">{</span>
   <span class="k">this</span><span class="o">.</span><span class="na">userRepository</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// 分页查询</span>
    <span class="kd">public</span> <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getUsersByPage</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
   <span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="nc">PageRequest</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">ascending</span><span class="o">());</span>
   <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 获取分页结果</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printPagedUsers</span><span class="o">()</span> <span class="o">{</span>
   <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">page</span> <span class="o">=</span> <span class="n">getUsersByPage</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>

   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Total Elements: "</span> <span class="o">+</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalElements</span><span class="o">());</span> <span class="c1">// 总记录数</span>
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Total Pages: "</span> <span class="o">+</span> <span class="n">page</span><span class="o">.</span><span class="na">getTotalPages</span><span class="o">());</span>  <span class="c1">// 总页数</span>
   <span class="k">for</span> <span class="o">(</span><span class="nc">User</span> <span class="n">user</span> <span class="o">:</span> <span class="n">page</span><span class="o">.</span><span class="na">getContent</span><span class="o">())</span> <span class="o">{</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
   <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>总结</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Pageable</code> 用于定义分页和排序的逻辑。</li>
  <li><code class="language-plaintext highlighter-rouge">PageRequest</code> 是 <code class="language-plaintext highlighter-rouge">Pageable</code> 的具体实现类，帮助我们创建分页和排序请求。</li>
  <li><code class="language-plaintext highlighter-rouge">Page</code> 接口封装了分页后的数据和分页信息（总记录数、总页数等）。</li>
  <li><code class="language-plaintext highlighter-rouge">Slice</code> 类提供类似分页的功能，但不包含总页数等信息，适用于更轻量级的分页场景。</li>
</ul>

<p>这些类一起使用，可以很方便地在 Spring Data 中实现分页查询功能。</p>

<h2 id="聚合">聚合</h2>

<p><code class="language-plaintext highlighter-rouge">Aggregation</code> 是 Spring Data MongoDB 中用于执行复杂数据处理操作的一个工具，类似于 MongoDB 的 <code class="language-plaintext highlighter-rouge">aggregate</code> 操作。它允许对文档执行聚合查询，例如分组、过滤、排序、投影、联表查询等。下面是聚合操作中常用的类、方法、字段的详细解释与实例。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation</code> 类常用方法：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.newAggregation(AggregationOperation... operations)</code></strong>：用于创建聚合管道，接受一系列的 <code class="language-plaintext highlighter-rouge">AggregationOperation</code> 作为参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">25</span><span class="o">)),</span>  <span class="c1">// 匹配 age 大于 25 的文档</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="na">count</span><span class="o">().</span><span class="na">as</span><span class="o">(</span><span class="s">"totalEmployees"</span><span class="o">),</span>  <span class="c1">// 按 department 分组并统计每组员工数</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"totalEmployees"</span><span class="o">))</span>  <span class="c1">// 按 totalEmployees 降序排序</span>
<span class="o">);</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.match(Criteria criteria)</code></strong>：用于定义筛选条件，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">WHERE</code> 语句。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">matchOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gte</span><span class="o">(</span><span class="mi">30</span><span class="o">));</span>  <span class="c1">// 筛选 age 大于等于 30 的记录</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.group(String... fields)</code></strong>：按字段分组，类似 SQL 的 <code class="language-plaintext highlighter-rouge">GROUP BY</code>，并且可以在分组后进行数据计算。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">groupOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"department"</span><span class="o">)</span>  <span class="c1">// 按 department 字段分组</span>
    <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"salary"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalSalary"</span><span class="o">)</span>  <span class="c1">// 计算每个部门的薪资总和</span>
    <span class="o">.</span><span class="na">avg</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"averageAge"</span><span class="o">);</span>  <span class="c1">// 计算每个部门的平均年龄</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">fields</code>可以为空，也可以是多个字段。常见的聚合方法有：<code class="language-plaintext highlighter-rouge">count</code>、<code class="language-plaintext highlighter-rouge">sum</code>、<code class="language-plaintext highlighter-rouge">avg</code>、<code class="language-plaintext highlighter-rouge">min</code>、<code class="language-plaintext highlighter-rouge">max</code>。</p>

<p>对于多字段分组，返回的结果通常是一个包含分组键和聚合结果的文档列表。每个文档代表一个分组，包含所分组的字段及其对应的聚合结果。以下是一个示例来说明这种结构：</p>

<p><strong>示例场景</strong>
假设有一个集合存储用户信息，其中有 <code class="language-plaintext highlighter-rouge">gender</code>（性别）、<code class="language-plaintext highlighter-rouge">department</code>（部门）和 <code class="language-plaintext highlighter-rouge">age</code>（年龄）等字段。你希望按 <code class="language-plaintext highlighter-rouge">gender</code> 和 <code class="language-plaintext highlighter-rouge">department</code> 分组，并计算每组的平均年龄。</p>

<p><strong>MongoDB 聚合查询</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
    <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"gender"</span><span class="o">,</span> <span class="s">"department"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">avg</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"averageAge"</span><span class="o">)</span>
<span class="o">);</span>
</code></pre></div></div>

<p>假设你的集合中有以下数据：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"male"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IT"</span><span class="p">,</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"male"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IT"</span><span class="p">,</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">35</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">28</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">32</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>经过聚合后，返回的结果可能如下所示：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"male"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IT"</span><span class="p">,</span><span class="w"> </span><span class="nl">"averageAge"</span><span class="p">:</span><span class="w"> </span><span class="mf">32.5</span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"gender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"female"</span><span class="p">,</span><span class="w"> </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w"> </span><span class="nl">"averageAge"</span><span class="p">:</span><span class="w"> </span><span class="mf">30.0</span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>每个文档中的 <code class="language-plaintext highlighter-rouge">_id</code> 字段包含了分组字段（如 <code class="language-plaintext highlighter-rouge">gender</code> 和 <code class="language-plaintext highlighter-rouge">department</code>）。</li>
  <li><code class="language-plaintext highlighter-rouge">averageAge</code> 字段是对该分组的 <code class="language-plaintext highlighter-rouge">age</code> 字段进行计算的聚合结果。</li>
</ul>

<p>对于分组字段，有以下规则：</p>

<p><strong>没有设置分组依据</strong>：</p>

<ul>
  <li>MongoDB 会将所有文档视为一个整体进行全局聚合。</li>
  <li>返回的数据会包含一个 <code class="language-plaintext highlighter-rouge">_id</code> 字段，其值为 <code class="language-plaintext highlighter-rouge">null</code>。</li>
</ul>

<p><strong>有一个字段分组</strong>（如 <code class="language-plaintext highlighter-rouge">Aggregation.group("gender")</code>）：</p>

<ul>
  <li>返回的数据会多一个 <code class="language-plaintext highlighter-rouge">_id</code> 字段，其值为 <code class="language-plaintext highlighter-rouge">gender</code> 列的分组结果。</li>
  <li>这确实有点扭曲，因为它似乎是将分组的字段变成了一个额外的标识符。</li>
</ul>

<p><strong>有多个字段分组</strong>：</p>

<ul>
  <li>如果设置了多个分组依据，返回的数据将根据每个分组依据的值组织，而不再有额外的 <code class="language-plaintext highlighter-rouge">_id</code> 字段。</li>
  <li>每个分组依据将作为返回结果中的一列。</li>
</ul>

<p>如果只分组不聚合，MongoDB 会返回每个组的文档，效果同上。</p>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.project(String... fields)</code></strong>：用于选择输出的字段，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">SELECT</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">projectOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"department"</span><span class="o">,</span> <span class="s">"totalSalary"</span><span class="o">)</span>  <span class="c1">// 选择输出字段</span>
    <span class="o">.</span><span class="na">andExpression</span><span class="o">(</span><span class="s">"totalSalary / 1000"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"salaryInThousands"</span><span class="o">);</span>  <span class="c1">// 添加计算字段</span>
</code></pre></div></div>

<p>如果用类似：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">().</span><span class="na">and</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amount"</span><span class="o">);</span> <span class="c1">//别名</span>
</code></pre></div></div>

<p>的方式设置别名，那么原来的列<code class="language-plaintext highlighter-rouge">data.email</code>将不存在，原来的列会被替换为别名<code class="language-plaintext highlighter-rouge">amount</code>。</p>

<p>你可能会觉得：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">and</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amount"</span><span class="o">);</span> <span class="c1">//别名</span>
</code></pre></div></div>

<p>会保留原列，但实际上不会，它会将 <code class="language-plaintext highlighter-rouge">data.email</code> 替换为 <code class="language-plaintext highlighter-rouge">amount</code>。</p>

<p><strong>要保留原字段，则需要这样写：</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">()</span>
    <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amount"</span><span class="o">);</span> <span class="c1">//别名</span>
	<span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">)</span> <span class="c1">// 原字段</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.sort(Sort sort)</code></strong>：对聚合结果进行排序，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">ORDER BY</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">sortOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"totalSalary"</span><span class="o">));</span>  <span class="c1">// 按 totalSalary 降序排序</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.limit(long maxSize)</code></strong>：限制聚合结果的条数，相当于 SQL 中的 <code class="language-plaintext highlighter-rouge">LIMIT</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">limitOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>  <span class="c1">// 限制结果返回前 5 条</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.skip(long elementsToSkip)</code></strong>：跳过指定数量的文档，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">OFFSET</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">skipOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>  <span class="c1">// 跳过前 10 条记录</span>
</code></pre></div></div>

<hr />

<p><strong>常用类与方法：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">AggregationOperation</code></strong>：表示聚合操作的接口，每一个具体的聚合步骤都是它的实现类。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.match(Criteria criteria)</code>：用于筛选数据，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$match</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.group(String... fields)</code>：用于分组数据，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$group</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.project(String... fields)</code>：用于选择和转换数据，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$project</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.sort(Sort sort)</code>：用于排序数据，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$sort</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.limit(long maxSize)</code>：用于限制结果集的大小，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$limit</code> 操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Aggregation.skip(long elementsToSkip)</code>：用于跳过指定数量的文档，等同于 MongoDB 的 <code class="language-plaintext highlighter-rouge">$skip</code> 操作。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">AggregationResults&lt;T&gt;</code></strong>：表示聚合操作的结果集，封装了返回的数据。</p>

<p><strong>常用方法：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">getMappedResults()</code></strong>：返回经过映射后的聚合结果列表。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">EmployeeStats</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"employees"</span><span class="o">,</span> <span class="nc">EmployeeStats</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">EmployeeStats</span><span class="o">&gt;</span> <span class="n">statsList</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">();</span>  <span class="c1">// 获取聚合结果</span>
</code></pre></div></div>

<hr />

<p><strong>实例代码：</strong></p>

<p>假设有一个员工集合 <code class="language-plaintext highlighter-rouge">employees</code>，结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
  </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">5000</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>下面是一个完整的聚合操作实例，查询年龄大于 25 岁的员工，按部门分组统计每个部门的总薪资，并按总薪资降序排序，只返回前 3 个部门。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建匹配操作，筛选出 age &gt; 25 的文档</span>
<span class="nc">AggregationOperation</span> <span class="n">match</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">25</span><span class="o">));</span>

<span class="c1">// 创建分组操作，按 department 字段分组并计算总薪资</span>
<span class="nc">AggregationOperation</span> <span class="n">group</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="s">"department"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"salary"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalSalary"</span><span class="o">);</span>

<span class="c1">// 创建排序操作，按 totalSalary 降序排序</span>
<span class="nc">AggregationOperation</span> <span class="n">sort</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"totalSalary"</span><span class="o">));</span>

<span class="c1">// 创建限制操作，只返回前 3 条结果</span>
<span class="nc">AggregationOperation</span> <span class="n">limit</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>

<span class="c1">// 创建聚合对象，将所有操作串联</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">match</span><span class="o">,</span> <span class="n">group</span><span class="o">,</span> <span class="n">sort</span><span class="o">,</span> <span class="n">limit</span><span class="o">);</span>

<span class="c1">// 执行聚合查询</span>
<span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">DepartmentStats</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"employees"</span><span class="o">,</span> <span class="nc">DepartmentStats</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 获取并输出聚合结果</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">DepartmentStats</span><span class="o">&gt;</span> <span class="n">departmentStats</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">();</span>
<span class="n">departmentStats</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">stat</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stat</span><span class="o">.</span><span class="na">getDepartment</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">stat</span><span class="o">.</span><span class="na">getTotalSalary</span><span class="o">()));</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">DepartmentStats</code> 是一个映射聚合结果的类，它包含 <code class="language-plaintext highlighter-rouge">department</code> 和 <code class="language-plaintext highlighter-rouge">totalSalary</code> 两个字段，用来接收分组后的结果。</p>

<h2 id="投影">投影</h2>

<p>投影是在 MongoDB 中用于控制查询结果中返回哪些字段的操作，类似于 SQL 中的 <code class="language-plaintext highlighter-rouge">SELECT</code> 子句。通过投影，您可以只选择您关心的字段，从而减少传输的数据量，提高查询效率。</p>

<p>在 Spring Data MongoDB 中，投影操作主要通过 <code class="language-plaintext highlighter-rouge">Aggregation.project()</code> 方法来实现，此外，在简单查询中也可以通过 <code class="language-plaintext highlighter-rouge">Query.fields()</code> 方法实现。</p>

<hr />

<p><strong>投影操作相关类与方法：</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">Aggregation.project(String... fields)</code></strong>：用于选择并格式化输出的字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">AggregationOperation</span> <span class="n">projectOperation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"salary"</span><span class="o">)</span>  <span class="c1">// 选择输出 name 和 salary 字段</span>
    <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"dept"</span><span class="o">);</span>  <span class="c1">// 重命名 department 字段为 dept</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">Query.fields()</code></strong>：在简单查询中指定需要返回的字段，不能重命名字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"age"</span><span class="o">).</span><span class="na">gt</span><span class="o">(</span><span class="mi">25</span><span class="o">));</span>  <span class="c1">// 筛选条件</span>
<span class="n">query</span><span class="o">.</span><span class="na">fields</span><span class="o">().</span><span class="na">include</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s">"salary"</span><span class="o">);</span>  <span class="c1">// 仅返回 name 和 salary 字段</span>
</code></pre></div></div>

<hr />

<p><strong>投影的作用与优势：</strong></p>

<ul>
  <li><strong>减少数据量</strong>：只选择需要的字段，减少了网络传输和存储的开销。</li>
  <li><strong>提高性能</strong>：减少了 MongoDB 返回的数据量，从而提高了查询性能。</li>
  <li><strong>自定义输出</strong>：可以通过 <code class="language-plaintext highlighter-rouge">Aggregation.project()</code> 进行字段重命名或计算新字段，提供更灵活的输出。</li>
</ul>

<hr />

<p><strong>实例代码：</strong></p>

<p>假设我们有一个员工集合 <code class="language-plaintext highlighter-rouge">employees</code>，结构如下：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alice"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
  </span><span class="nl">"department"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HR"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">5000</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>下面是一个使用聚合投影的示例，查询所有员工的姓名和薪资，同时重命名 <code class="language-plaintext highlighter-rouge">department</code> 字段为 <code class="language-plaintext highlighter-rouge">dept</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建聚合投影操作</span>
<span class="nc">AggregationOperation</span> <span class="n">project</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"salary"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="s">"department"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"dept"</span><span class="o">);</span>  <span class="c1">// 重命名 department 字段为 dept</span>

<span class="c1">// 创建聚合对象</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">project</span><span class="o">);</span>

<span class="c1">// 执行聚合查询</span>
<span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">EmployeeProjection</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"employees"</span><span class="o">,</span> <span class="nc">EmployeeProjection</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

<span class="c1">// 获取并输出投影结果</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">EmployeeProjection</span><span class="o">&gt;</span> <span class="n">projections</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">();</span>
<span class="n">projections</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">proj</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Name: "</span> <span class="o">+</span> <span class="n">proj</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">", Salary: "</span> <span class="o">+</span> <span class="n">proj</span><span class="o">.</span><span class="na">getSalary</span><span class="o">()</span> <span class="o">+</span> <span class="s">", Department: "</span> <span class="o">+</span> <span class="n">proj</span><span class="o">.</span><span class="na">getDept</span><span class="o">()));</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">EmployeeProjection</code> 是一个用于映射投影结果的类，包含 <code class="language-plaintext highlighter-rouge">name</code>、<code class="language-plaintext highlighter-rouge">salary</code> 和 <code class="language-plaintext highlighter-rouge">dept</code> 三个字段，用来接收查询结果。</p>

<h2 id="日志">日志</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">root</span><span class="pi">:</span> <span class="s">${LOG_LEVE:info}</span>
    <span class="na">org.springframework.data.mongodb.core</span><span class="pi">:</span> <span class="s">DEBUG</span>
    <span class="na">org.mongodb.driver.protocol</span><span class="pi">:</span> <span class="s">WARN</span>
</code></pre></div></div>

<h2 id="数据转换">数据转换</h2>

<p><code class="language-plaintext highlighter-rouge">ConvertOperators</code> 是 Spring Data MongoDB 中用于字段类型转换的类。它提供了多个方法来将字段转换为不同的数据类型，常见的用法包括：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">ConvertOperators.Convert.convertValueOf(String field)</code></strong>：用于指定需要转换的字段。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">.to(String type)</code></strong>：指定目标数据类型，<code class="language-plaintext highlighter-rouge">double</code>、<code class="language-plaintext highlighter-rouge">string</code>、<code class="language-plaintext highlighter-rouge">objectId</code>、<code class="language-plaintext highlighter-rouge">bool</code>、<code class="language-plaintext highlighter-rouge">date</code>、<code class="language-plaintext highlighter-rouge">int</code>、<code class="language-plaintext highlighter-rouge">long</code>、<code class="language-plaintext highlighter-rouge">decimal</code>。</li>
</ol>

<p>使用示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="s">"fieldName"</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">);</span>
</code></pre></div></div>

<p>这种转换在聚合操作中非常有用，可以在数据处理时确保字段的类型符合预期，从而避免类型错误。</p>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建投影操作进行字段转换</span>
<span class="nc">ProjectionOperation</span> <span class="n">projectStage</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">).</span><span class="na">onErrorReturn</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">onNullReturn</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">as</span><span class="o">(</span><span class="s">"amount"</span><span class="o">);</span> <span class="c1">//别名</span>

<span class="c1">// 创建聚合操作</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
        <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">)),</span>
        <span class="n">projectStage</span><span class="o">,</span>
        <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">()</span>
                <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"amount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalAmount"</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">Map</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"co_common_test1"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getMappedResults</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="nc">Decimal128</span> <span class="n">totalAmount</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Decimal128</span><span class="o">)</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"totalAmount"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">totalAmount</span><span class="o">);</span>
</code></pre></div></div>

<p>这段代码的目的是在 MongoDB 中进行聚合操作，将 <code class="language-plaintext highlighter-rouge">data.email</code> 字段转换为十进制格式，并计算总和。具体步骤如下：</p>

<ol>
  <li><strong>投影操作 (<code class="language-plaintext highlighter-rouge">ProjectionOperation</code>)</strong>：
    <ul>
      <li>使用 <code class="language-plaintext highlighter-rouge">Aggregation.project("data.email")</code> 创建一个投影阶段，保留 <code class="language-plaintext highlighter-rouge">data.email</code> 字段。</li>
      <li>通过 <code class="language-plaintext highlighter-rouge">ConvertOperators.Convert.convertValueOf("data.email").to("decimal").as("amount")</code> 将 <code class="language-plaintext highlighter-rouge">data.email</code> 转换为十进制格式，并给它起一个别名 <code class="language-plaintext highlighter-rouge">amount</code>。</li>
    </ul>
  </li>
  <li><strong>聚合操作 (<code class="language-plaintext highlighter-rouge">Aggregation</code>)</strong>：
    <ul>
      <li>创建一个新的聚合管道，首先通过 <code class="language-plaintext highlighter-rouge">Aggregation.match(Criteria.where("data.email").exists(true))</code> 过滤出存在 <code class="language-plaintext highlighter-rouge">data.email</code> 字段的文档。</li>
      <li>然后应用之前定义的投影阶段。</li>
      <li>最后，使用 <code class="language-plaintext highlighter-rouge">Aggregation.group().sum("amount").as("totalAmount")</code> 聚合阶段，对转换后的 <code class="language-plaintext highlighter-rouge">amount</code> 字段进行求和，并将结果命名为 <code class="language-plaintext highlighter-rouge">totalAmount</code>。</li>
    </ul>
  </li>
  <li><strong>执行聚合</strong>：
    <ul>
      <li>使用 <code class="language-plaintext highlighter-rouge">mongoTemplate.aggregate()</code> 方法执行聚合操作，查询 <code class="language-plaintext highlighter-rouge">co_common_test1</code> 集合，并将结果映射为 <code class="language-plaintext highlighter-rouge">Map</code> 对象。</li>
      <li>从结果中获取 <code class="language-plaintext highlighter-rouge">totalAmount</code>，并打印出来。</li>
    </ul>
  </li>
</ol>

<p>这段代码主要实现了对 <code class="language-plaintext highlighter-rouge">data.email</code> 字段的类型转换和求和操作，目的是在处理数据时确保数值类型的正确性。</p>

<p>要对多个字段进行转换，可以在投影操作中连续添加多个转换。例如，假设你有 <code class="language-plaintext highlighter-rouge">data.email</code> 和 <code class="language-plaintext highlighter-rouge">data.amount</code> 两个字段要转换为十进制，可以如下操作：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建投影操作进行多个字段转换</span>
<span class="nc">ProjectionOperation</span> <span class="n">projectStage</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">()</span>
        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">)).</span><span class="na">as</span><span class="o">(</span><span class="s">"emailAmount"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="s">"data.amount"</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">)).</span><span class="na">as</span><span class="o">(</span><span class="s">"amountAmount"</span><span class="o">);</span> <span class="c1">// 别名</span>

<span class="c1">// 创建聚合操作</span>
<span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span>
        <span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="na">and</span><span class="o">(</span><span class="s">"data.amount"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">)),</span>
        <span class="n">projectStage</span><span class="o">,</span>
        <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">()</span>
                <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"emailAmount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalEmailAmount"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"amountAmount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"totalAmountAmount"</span><span class="o">)</span>
<span class="o">);</span>
<span class="nc">Map</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"co_common_test1"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getMappedResults</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="nc">Decimal128</span> <span class="n">totalEmailAmount</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Decimal128</span><span class="o">)</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"totalEmailAmount"</span><span class="o">);</span>
<span class="nc">Decimal128</span> <span class="n">totalAmountAmount</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Decimal128</span><span class="o">)</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"totalAmountAmount"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">totalEmailAmount</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">totalAmountAmount</span><span class="o">);</span>
</code></pre></div></div>

<p>在这个示例中：</p>

<ol>
  <li><strong>投影操作 (<code class="language-plaintext highlighter-rouge">ProjectionOperation</code>)</strong>：
    <ul>
      <li>使用 <code class="language-plaintext highlighter-rouge">Aggregation.project()</code>，通过 <code class="language-plaintext highlighter-rouge">and()</code> 方法添加多个字段的转换。</li>
      <li>每个字段的转换都使用 <code class="language-plaintext highlighter-rouge">ConvertOperators.Convert.convertValueOf()</code> 方法，并给它们起不同的别名。</li>
    </ul>
  </li>
  <li><strong>聚合操作</strong>：
    <ul>
      <li>通过 <code class="language-plaintext highlighter-rouge">Aggregation.match()</code> 过滤出存在这两个字段的文档。</li>
      <li>在聚合阶段，分别对转换后的 <code class="language-plaintext highlighter-rouge">emailAmount</code> 和 <code class="language-plaintext highlighter-rouge">amountAmount</code> 字段进行求和。</li>
    </ul>
  </li>
</ol>

<p>这样可以轻松处理多个字段的转换和聚合。</p>

<p>这样打印的值是科学计数法，如果需要打印普通值，则需要使用：<code class="language-plaintext highlighter-rouge">totalAmount.bigDecimalValue().toPlainString()</code>。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Seata分布式事务</title><link href="/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/" rel="alternate" type="text/html" title="Seata分布式事务" /><published>2024-09-21T00:00:00+08:00</published><updated>2024-09-21T00:00:00+08:00</updated><id>/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1</id><content type="html" xml:base="/2024/09/21/Seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"><![CDATA[<h1 id="引言">引言</h1>
<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>

<p>官方网站：<a href="https://seata.apache.org/zh-cn/">Apache Seata</a>，Demo1：<a href="https://github.com/apache/incubator-seata-samples/tree/master">apache/incubator-seata-sample</a>，Demo2：<a href="https://github.com/Kerry2019/seata-tcc-demo">Kerry2019/seata-tcc-demo</a>，扩展：<a href="https://seata.apache.org/zh-cn/docs/user/appendix/global-transaction-status">事务状态</a>，<a href="https://seata.apache.org/zh-cn/docs/user/appendix/isolation">事务隔离</a>。。</p>

<h1 id="seata">Seata</h1>

<h2 id="seata-tcc-模式">Seata TCC 模式</h2>

<h3 id="准备环境">准备环境</h3>

<p>首先下载Seata：<a href="https://seata.apache.org/zh-cn/unversioned/download/seata-server/">Seata Java Download  Apache Seata</a>，选择二进制版本。</p>

<p>修改<code class="language-plaintext highlighter-rouge">conf\application.yml</code>，注册到consul，并使用mysql做为存储方式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Seata 服务器配置</span>
<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">7091</span>  <span class="c1"># 设置 Seata 服务器的端口为 7091</span>

<span class="c1"># Spring 应用配置</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">seata-server</span>  <span class="c1"># 设置 Spring 应用的名称为 seata-server</span>

<span class="c1"># 日志配置</span>
<span class="na">logging</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span> <span class="s">classpath:logback-spring.xml</span>  <span class="c1"># 指定 Logback 的配置文件路径</span>
  <span class="na">file</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">${log.home:${user.home}/logs/seata}</span>  <span class="c1"># 指定日志文件的保存路径</span>
  <span class="na">extend</span><span class="pi">:</span>
    <span class="na">logstash-appender</span><span class="pi">:</span>
      <span class="na">destination</span><span class="pi">:</span> <span class="s">127.0.0.1:4560</span>  <span class="c1"># 将日志发送到 Logstash 的地址</span>
    <span class="na">kafka-appender</span><span class="pi">:</span>
      <span class="na">bootstrap-servers</span><span class="pi">:</span> <span class="s">127.0.0.1:9092</span>  <span class="c1"># Kafka 服务器的地址</span>
      <span class="na">topic</span><span class="pi">:</span> <span class="s">logback_to_logstash</span>  <span class="c1"># Kafka 日志主题</span>

<span class="c1"># 控制台用户配置</span>
<span class="na">console</span><span class="pi">:</span>
  <span class="na">user</span><span class="pi">:</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">seata</span>  <span class="c1"># 控制台用户名</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">seata</span>  <span class="c1"># 控制台密码</span>

<span class="c1"># Seata 配置</span>
<span class="na">seata</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="c1"># support: nacos, consul, apollo, zk, etcd3, file</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">file</span> <span class="c1"># 配置 Seata 的配置方式为文件模式</span>
  <span class="na">registry</span><span class="pi">:</span>
    <span class="c1"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">consul</span> <span class="c1"># 使用 Consul 作为注册中心</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">application</span><span class="pi">:</span> <span class="s">seata-server</span>  <span class="c1"># 在 Consul 中注册的服务名称</span>
      <span class="na">server-addr</span><span class="pi">:</span> <span class="s">127.0.0.1:8500</span>  <span class="c1"># Consul 服务器的地址</span>
      <span class="na">acl-token</span><span class="pi">:</span>  <span class="c1"># ACL token，用于 Consul（如果需要，可以设置为空）</span>
      <span class="na">cluster</span><span class="pi">:</span> <span class="s">seata1</span>  <span class="c1"># Consul 集群的名称,即控制中心出现的服务的名称</span>
  <span class="na">store</span><span class="pi">:</span>
    <span class="c1"># support: file 、 db 、 redis 、 raft</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">db</span> <span class="c1"># 配置 Seata 的存储方式为数据库模式</span>
    <span class="na">db</span><span class="pi">:</span>
      <span class="na">datasource</span><span class="pi">:</span> <span class="s">druid</span> <span class="c1"># 使用 Druid 作为数据源</span>
      <span class="na">db-type</span><span class="pi">:</span> <span class="s">mysql</span> <span class="c1"># 数据库类型为 MySQL</span>
      <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span> <span class="c1"># 数据库驱动类名</span>
      <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true</span> <span class="c1"># 数据库连接 URL</span>
      <span class="na">user</span><span class="pi">:</span> <span class="s">root</span> <span class="c1"># 数据库用户名</span>
      <span class="na">password</span><span class="pi">:</span> <span class="s">root</span> <span class="c1"># 数据库密码</span>

  <span class="na">security</span><span class="pi">:</span>
    <span class="na">secretKey</span><span class="pi">:</span> <span class="s">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span> <span class="c1"># 安全密钥</span>
    <span class="na">tokenValidityInMilliseconds</span><span class="pi">:</span> <span class="m">1800000</span> <span class="c1"># Token 的有效时间（30 分钟）</span>
    <span class="na">ignore</span><span class="pi">:</span>
      <span class="c1"># 指定不需要进行安全检查的 URL 路径</span>
      <span class="na">urls</span><span class="pi">:</span> <span class="s">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login,/version.json,/health,/error</span>
</code></pre></div></div>

<p>mysql新建数据库<code class="language-plaintext highlighter-rouge">seata</code>，并运行：<code class="language-plaintext highlighter-rouge">script\server\db\mysql.sql</code>，初始化表。（也可以使用<code class="language-plaintext highlighter-rouge">file</code> 模式）</p>

<p>然后先启动consul，再启动seata，可以访问<code class="language-plaintext highlighter-rouge">http://127.0.0.1:7091/</code>，进入后台，账号密码在上面的配置文件中，即<code class="language-plaintext highlighter-rouge">seata</code>。</p>

<p>客户端配置：</p>

<p>首先consul要注册上：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-consul-discovery<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">demo-service</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8500</span>
      <span class="na">discovery</span><span class="pi">:</span>
        <span class="na">service-name</span><span class="pi">:</span> <span class="s">demo-service</span>
        <span class="na">health-check</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">/actuator/health</span>
          <span class="na">interval</span><span class="pi">:</span> <span class="s">30s</span>

<span class="na">management</span><span class="pi">:</span>
  <span class="na">endpoints</span><span class="pi">:</span>
    <span class="na">web</span><span class="pi">:</span>
      <span class="na">exposure</span><span class="pi">:</span>
        <span class="na">include</span><span class="pi">:</span> <span class="s">health,info</span>
</code></pre></div></div>

<p>然后配置seata：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/io.seata/seata-spring-boot-starter --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.seata<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>seata-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">seata</span><span class="pi">:</span>
  <span class="na">registry</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="c1"># Consul 服务器的地址和端口</span>
      <span class="na">server-addr</span><span class="pi">:</span> <span class="s">127.0.0.1:8500</span>
      <span class="c1"># ACL token 用于访问 Consul。如果 Consul 配置了 ACL，需提供相应的 token。可以为空或省略。</span>
      <span class="na">acl-token</span><span class="pi">:</span>
      <span class="c1"># Consul 集群的名称。可以根据实际情况修改为相应的集群名称。</span>
      <span class="na">cluster</span><span class="pi">:</span> <span class="s">seata1</span>
    <span class="c1"># 注册中心类型，这里设置为 Consul</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">consul</span>

  <span class="c1"># 事务服务组的名称。这个配置用于指定事务服务组，Seata 将使用该组处理分布式事务。</span>
  <span class="c1"># 1.4.2 版本的默认事务分组名称为 `my_test_tx_group`，1.5 版本将改为 `default_tx_group`。</span>
  <span class="na">tx-service-group</span><span class="pi">:</span> <span class="s">default_tx_group</span>

  <span class="na">service</span><span class="pi">:</span>
    <span class="c1"># 事务分组与服务集群的映射关系</span>
    <span class="na">vgroup-mapping</span><span class="pi">:</span>
      <span class="c1"># 事务分组名称与服务集群名称的映射</span>
      <span class="c1"># 这里将 `default_tx_group` 映射到 `seata1` 服务集群</span>
      <span class="na">default_tx_group</span><span class="pi">:</span> <span class="s">seata1</span>

    <span class="c1"># 默认的服务集群配置</span>
    <span class="na">default</span><span class="pi">:</span>
      <span class="c1"># 服务集群列表。在此配置中，指定 `grouplist` 为 `consul`，表明 Seata 将使用 Consul 作为服务发现机制</span>
      <span class="na">grouplist</span><span class="pi">:</span> <span class="s">consul</span>
</code></pre></div></div>

<h3 id="tcc接口示例">TCC接口示例</h3>

<p>TCC 模式（Try-Confirm-Cancel）是一种确保分布式系统中事务一致性的方法，分为三个步骤：</p>

<ol>
  <li>Try：尝试执行某个操作，预留资源，确保所有操作能够成功执行，<strong>不实际执行操作，如果异常，必须能被Cancel阶段完全回滚</strong>。</li>
  <li>Confirm：所有操作成功执行后，提交资源的最终变更，<strong>实际执行操作</strong>。</li>
  <li>Cancel：如果操作失败，撤销预留的资源，回滚操作，<strong>注意：需要手动写代码还原状态</strong>。</li>
</ol>

<p>TCC模式确保了分布式事务的最终一致性，且通过 TCC 模式能减少锁竞争，提高性能。</p>

<p><strong>注意事项</strong></p>

<ul>
  <li>业务操作应确保幂等性，以防止重复操作。</li>
  <li><code class="language-plaintext highlighter-rouge">Try</code> 阶段通常是“冻结资源”，而 <code class="language-plaintext highlighter-rouge">Confirm</code> 阶段是“实际扣减资源”。</li>
</ul>

<p>一个可能需要回滚，且是分布式调用的接口，现在需要<strong>拆分为3个方法</strong>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@LocalTCC</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderServiceImpl</span> <span class="kd">implements</span> <span class="nc">OrderService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">OrderRepository</span> <span class="n">orderRepository</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"prepareCreateOrder"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareCreateOrder</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">userId</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Try 阶段：创建订单</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setProductId</span><span class="o">(</span><span class="n">productId</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setCount</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"PENDING"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">,</span> <span class="n">order</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">commit</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Confirm 阶段：确认订单</span>
        <span class="nc">Long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"CONFIRMED"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">rollback</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Cancel 阶段：取消订单</span>
        <span class="nc">Long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="s">"CANCELLED"</span><span class="o">);</span>
        <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><strong>以上即是对单一接口需要使用seata TCC模式的一个前提。运行流程</strong>：</p>

<ol>
  <li><strong>Try 阶段</strong>：在  <code class="language-plaintext highlighter-rouge">prepareCreateOrder</code> 方法中，会创建“未确认”的订单。</li>
  <li><strong>Confirm 阶段</strong>：如果整个事务正常执行，在 <code class="language-plaintext highlighter-rouge">commit</code> 方法中会<strong>确认订单状态</strong>。</li>
  <li><strong>Cancel 阶段</strong>：如果事务过程中出错，<code class="language-plaintext highlighter-rouge">rollback</code> 方法会<strong>取消订单</strong>。</li>
</ol>

<hr />

<p>以下是对它们的具体解释和关系：</p>

<p><strong>Try 阶段（<code class="language-plaintext highlighter-rouge">prepareCreateOrder</code>）</strong>：</p>

<ul>
  <li>检查业务资源是否满足执行条件（例如：检查库存是否足够）。预留或冻结资源，使得资源在本次操作中不可用（例如：检查库存是否足够、创建一个“待确认”的订单）。</li>
  <li>还可以记录一些重要的上下文信息（例如订单 ID），以便在后续的 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code> 阶段使用。</li>
  <li>这个阶段的操作<strong>必须是可补偿的</strong>（即可以撤销的）。</li>
  <li>如果这个阶段失败，整个事务将被终止，不会继续执行 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code>。</li>
  <li>如果在这个阶段出现异常抛出，则会进入<code class="language-plaintext highlighter-rouge">rollback</code>阶段。</li>
</ul>

<p>在上面的示例， <code class="language-plaintext highlighter-rouge">prepareCreateOrder</code> 方法中，订单服务会创建一个“待确认”的订单，其状态通常是 <code class="language-plaintext highlighter-rouge">PENDING</code> 或类似状态。</p>

<p>这个订单还没有被正式确认，这样做的目的是为订单创建过程预留一个位置，防止后续操作影响该资源。</p>

<p><strong>Confirm 阶段（<code class="language-plaintext highlighter-rouge">commit</code>）：</strong></p>

<ul>
  <li>当整个事务的所有 Try 阶段操作都成功时，Seata 将进入 <code class="language-plaintext highlighter-rouge">commit</code> 阶段。</li>
  <li>这个阶段正式确认事务操作，即最终提交资源变更（例如：实际扣减库存、确认订单，如将订单状态从 <code class="language-plaintext highlighter-rouge">PENDING</code> 改为 <code class="language-plaintext highlighter-rouge">CONFIRMED</code>），完成资源的最终变更。</li>
  <li><strong>注意</strong>：Confirm 操作必须保证最终一致性。它<strong>不应出现失败</strong>，因为这会影响事务的一致性。</li>
  <li>一旦进入 Confirm 阶段，意味着事务已经被提交，后续<strong>不能再回滚</strong>。</li>
</ul>

<p>在上面的示例，在 <code class="language-plaintext highlighter-rouge">commit</code> 方法中，将订单状态从 <code class="language-plaintext highlighter-rouge">PENDING</code> 更改为 <code class="language-plaintext highlighter-rouge">CONFIRMED</code>，表示订单已经正式生成。此时，订单信息已经固定下来，任何异常情况下都不应再取消订单。</p>

<p><strong>Cancel 阶段（<code class="language-plaintext highlighter-rouge">rollback</code>）：</strong></p>

<ul>
  <li>如果 Try 阶段执行失败或在业务中途发生了异常，Seata 会自动调用 <code class="language-plaintext highlighter-rouge">rollback</code> 方法来撤销所有已做的操作。</li>
  <li><strong>撤销 Try 阶段的操作</strong>，回滚已做的变更（例如：释放预扣库存、取消订单）。</li>
  <li>Rollback 需要保证事务的可补偿性，即<strong>能撤销所有在 Try 阶段完成的操作</strong>（例如，如果库存扣减操作成功，但确认阶段失败，你需要恢复库存）。</li>
</ul>

<p>在上面的示例，在 <code class="language-plaintext highlighter-rouge">rollback</code> 方法中，如果订单处于 <code class="language-plaintext highlighter-rouge">PENDING</code> 状态，则将其状态更改为 <code class="language-plaintext highlighter-rouge">CANCELLED</code>，表明订单被取消。这样，整个事务回滚了，订单不会被正式创建，用户也不会产生实际的购买行为。</p>

<h3 id="注解说明">注解说明</h3>

<p><strong><code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解需要<strong>标记在 <code class="language-plaintext highlighter-rouge">try</code> 阶段的方法</strong>，用于指定 TCC 事务的提交和回滚方法。具体参数说明如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 事务的名称，用于标识这个 TCC 事务。</li>
  <li><code class="language-plaintext highlighter-rouge">commitMethod</code>: 提交方法的名称。当事务被确认（Confirm）时调用。</li>
  <li><code class="language-plaintext highlighter-rouge">rollbackMethod</code>: 回滚方法的名称。当事务被取消（Cancel）时调用。</li>
</ul>

<p>这些参数帮助 Seata 在事务的 Confirm 和 Cancel 阶段正确地调用相应的方法，确保分布式事务的正确性。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@LocalTCC</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@LocalTCC</code> 注解用于标识一个实现了 TCC 模式的本地事务服务。它通常不需要参数，它的主要作用是标识类中哪些方法是需要支持 TCC 事务的。Seata 会扫描带有 <code class="language-plaintext highlighter-rouge">@LocalTCC</code> 注解的类，并自动将它们纳入 TCC 事务管理范围。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 是 Seata TCC 模式下用于标识在 TCC 事务的 <code class="language-plaintext highlighter-rouge">Try</code> 方法中需要传递到事务上下文中的参数的注解。这个注解可以帮助 Seata 将这些参数从 <code class="language-plaintext highlighter-rouge">Try</code> 阶段传递到 <code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。</p>

<p><strong>主要属性</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">value</code> / <code class="language-plaintext highlighter-rouge">paramName</code></strong>: 用于指定参数的名称，默认值为空字符串。<code class="language-plaintext highlighter-rouge">value</code> 和 <code class="language-plaintext highlighter-rouge">paramName</code> 是等效的，主要用于获取参数名称以在上下文中查找。</p>

<p><strong><code class="language-plaintext highlighter-rouge">isShardingParam</code></strong> (已废弃):表示是否是分片参数，但这个属性现在已经不再使用。</p>

<p><strong><code class="language-plaintext highlighter-rouge">index</code></strong>:用于指定参数在参数列表中的索引位置。此属性主要用于处理参数是以列表形式传递的情况。</p>

<p><strong><code class="language-plaintext highlighter-rouge">isParamInProperty</code></strong>:表示参数是否是对象的属性。如果 <code class="language-plaintext highlighter-rouge">index</code> 大于等于 0，这个属性指定是否需要从对象的属性中获取参数值。</p>

<p><strong>使用示例</strong></p>

<p>假设你有一个 <code class="language-plaintext highlighter-rouge">Try</code> 方法的签名如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareDecreaseInventory</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span>
</code></pre></div></div>

<p>可以使用 <code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 注解来指定哪些参数需要传递到事务上下文中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"InventoryService"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepareDecreaseInventory</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span>
                                         <span class="nd">@BusinessActionContextParameter</span><span class="o">(</span><span class="n">paramName</span> <span class="o">=</span> <span class="s">"productId"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">productId</span><span class="o">,</span>
                                         <span class="nd">@BusinessActionContextParameter</span><span class="o">(</span><span class="n">paramName</span> <span class="o">=</span> <span class="s">"count"</span><span class="o">)</span> <span class="nc">Integer</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Try 阶段的逻辑</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在这个例子中，<code class="language-plaintext highlighter-rouge">productId</code> 和 <code class="language-plaintext highlighter-rouge">count</code> 参数会被传递到 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中，这样它们可以在 <code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 方法中使用。</p>

<p><code class="language-plaintext highlighter-rouge">@BusinessActionContextParameter</code> 注解的作用类似于 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的 <code class="language-plaintext highlighter-rouge">addActionContext</code> 方法。通过这个注解，可以在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段自动将指定的参数添加到 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中，而不需要手动调用 <code class="language-plaintext highlighter-rouge">addActionContext</code> 方法，Seata 会自动处理这些参数的传递和保存。</p>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 是 Seata 提供的一个注解，用于标记一个全局事务的开始。它主要用于处理分布式事务的场景，将多个本地事务组合成一个全局事务。</p>

<p><strong>作用</strong></p>

<p><strong>开启全局事务</strong>: <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 用于标记一个方法为全局事务的入口点。Seata 会为这个方法创建一个全局事务，并将方法内部调用的所有涉及的本地事务都纳入这个全局事务中。</p>

<p><strong>事务协调</strong>: 在方法执行过程中，Seata 会跟踪并协调这个全局事务中涉及的所有本地事务。如果方法执行成功，Seata 会提交全局事务；如果方法抛出异常，则会回滚全局事务，确保数据一致性。</p>

<p><strong>全局事务的传播</strong>: <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 会将其内部的所有本地事务纳入一个全局事务中，从而实现事务的分布式管理和一致性。</p>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解是 Seata 的核心注解之一，用于定义全局事务的行为和配置。它的参数允许你精确控制事务的超时、回滚策略、锁策略等。在配置分布式事务时，这些参数帮助确保事务的一致性和正确性。</p>

<p><strong>参数详解</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">timeoutMills</code></strong>:指定全局事务的超时时间（单位：毫秒）。如果全局事务在这个时间内没有完成，Seata 会<strong>强制回滚</strong>这个事务。默认值为<code class="language-plaintext highlighter-rouge">60000ms</code>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">name</code></strong>:指定全局事务的名称。可以用来在日志和监控中识别这个全局事务。默认值: 空字符串。</p>

<p><strong><code class="language-plaintext highlighter-rouge">rollbackFor</code></strong>:指定<strong>需要回滚</strong>的异常类型。当方法执行过程中抛出这些异常时，全局事务会被回滚。默认值: 空数组。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">rollbackForClassName</code></strong>:指定<strong>需要回滚</strong>的异常类名。与 <code class="language-plaintext highlighter-rouge">rollbackFor</code> 类似，但使用异常类名的字符串形式。默认值：空数组。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">rollbackForClassName</span> <span class="o">=</span> <span class="o">{</span><span class="s">"java.lang.RuntimeException"</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">noRollbackFor</code></strong>:指定不需要回滚的异常类型。当方法抛出这些异常时，全局事务<strong>不会回滚</strong>。默认值: 空数组。<strong>示例</strong>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">noRollbackFor</span> <span class="o">=</span> <span class="o">{</span><span class="nc">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">noRollbackForClassName</code></strong>: 指定不需要回滚的异常类名。与 <code class="language-plaintext highlighter-rouge">noRollbackFor</code> 类似，但使用异常类名的字符串形式。默认值: 空数组，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">noRollbackForClassName</span> <span class="o">=</span> <span class="o">{</span><span class="s">"java.lang.IllegalArgumentException"</span><span class="o">})</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">propagation</code></strong>:指定全局事务的传播行为。定义了事务的传播方式。默认值: <code class="language-plaintext highlighter-rouge">Propagation.REQUIRED</code>，即如果 transaction 存在，则使用当前事务执行，否则使用新事务执行。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="nc">Propagation</span><span class="o">.</span><span class="na">REQUIRES_NEW</span><span class="o">)</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryInterval</code></strong>:自定义全局锁的重试间隔时间（单位：毫秒）。用于覆盖全局配置中的锁重试间隔。默认值: 0，表示使用全局配置。示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockRetryInterval</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">)</span> 
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryInternal</code></strong> (已过时):自定义全局锁的重试间隔时间（单位：毫秒）。与 <code class="language-plaintext highlighter-rouge">lockRetryInterval</code> 类似，但这个参数已经过时，不再推荐使用。默认值: 0，示例:</p>

<p><strong><code class="language-plaintext highlighter-rouge">lockRetryTimes</code></strong>:自定义全局锁的重试次数。用于覆盖全局配置中的锁重试次数。默认值: -1，表示使用全局配置，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockRetryTimes</span> <span class="o">=</span> <span class="mi">5</span><span class="o">)</span> 
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">lockStrategyMode</code></strong>:指定锁的策略模式。可以选择乐观锁（<code class="language-plaintext highlighter-rouge">OPTIMISTIC</code>）或悲观锁（<code class="language-plaintext highlighter-rouge">PESSIMISTIC</code>）。默认值: <code class="language-plaintext highlighter-rouge">LockStrategyMode.PESSIMISTIC</code>，示例:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GlobalTransactional</span><span class="o">(</span><span class="n">lockStrategyMode</span> <span class="o">=</span> <span class="nc">LockStrategyMode</span><span class="o">.</span><span class="na">OPTIMISTIC</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="使用全局事务">使用全局事务</h3>

<p><code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解主要用于管理分布式事务的全局事务，确保在不同微服务之间的操作能够保持一致性。它的作用主要集中在 <strong>Try</strong>、<strong>Confirm</strong> 和 <strong>Cancel</strong> 阶段的事务管理上。</p>

<p>在使用 <code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 注解的方法中，也可以自由地使用普通的查询接口或服务方法，只要它们本身不涉及事务的提交或回滚。查询接口一般不参与全局事务的管理，因此不需要处理回滚或提交的问题。具体来说，这些查询接口可以是：</p>

<ul>
  <li><strong>数据库查询</strong>：如使用 MyBatis、JPA、Hibernate 等进行的数据库查询。</li>
  <li><strong>调用其他服务</strong>：如调用其他微服务的 REST API 或 Feign 客户端。</li>
</ul>

<p><strong>需要注意的事项</strong></p>

<p><strong>事务一致性</strong>：</p>

<ul>
  <li>如果<code class="language-plaintext highlighter-rouge">@GlobalTransactional</code> 方法中使用了普通的查询接口，需要确保这些操作不会影响到全局事务的一致性。</li>
  <li>确保在全局事务的 Try 阶段中进行的所有操作都能够在 Confirm 和 Cancel 阶段得到正确的处理。</li>
</ul>

<p><strong>性能影响</strong>：</p>

<ul>
  <li>如果查询操作涉及到大量的数据或复杂的逻辑，这可能会对全局事务的性能产生影响。</li>
  <li>确保查询操作是优化过的，并且不会导致长时间的锁定或延迟。</li>
</ul>

<p><strong>异常处理</strong>：</p>

<ul>
  <li>在全局事务中，如果查询接口出现异常，确保这些异常能够被捕获并正确处理，以避免事务的回滚机制被破坏。</li>
</ul>

<p>使用全局事务，调用之前适配好分布式事务的接口示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span>
<span class="nd">@Autowired</span>
<span class="kd">private</span> <span class="nc">OrderService</span> <span class="n">orderService</span><span class="o">;</span>
<span class="nd">@GlobalTransactional</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test1"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">test1</span><span class="o">(){</span>
	<span class="n">orderService</span><span class="o">.</span><span class="na">prepareCreateOrder</span><span class="o">(...);</span>
    <span class="o">...</span>
<span class="o">}</span>
<span class="o">...</span>
</code></pre></div></div>

<h3 id="各阶段的数据传递">各阶段的数据传递</h3>

<p>在Seata的TCC（Try-Confirm-Cancel）模式中，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是一个非常关键的对象，它用于在分布式事务的各个阶段（Try、Confirm、Cancel）之间传递数据和上下文信息。它帮助事务中的每个阶段共享信息，确保整个TCC事务的正确执行。</p>

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是由 Seata 框架在调用 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解的 TCC 接口时<strong>自动创建和传递的</strong>。它是分布式事务的上下文对象，包含了事务ID（XID）以及在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段生成的业务参数。以下是 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的来源和生命周期：</p>

<p><strong>在Try阶段生成：</strong></p>
<ul>
  <li>当执行标记为 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 的方法时，Seata会自动创建一个 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象。</li>
  <li><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象会自动传递给 <code class="language-plaintext highlighter-rouge">Try</code> 方法的参数。</li>
  <li>在 <code class="language-plaintext highlighter-rouge">Try</code> 方法中，可以将需要共享的数据存入 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，这些数据将在后续的 <code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段使用。</li>
</ul>

<p><strong>在Confirm和Cancel阶段使用：</strong></p>
<ul>
  <li>当事务成功（调用 <code class="language-plaintext highlighter-rouge">Confirm</code> 方法）或回滚（调用 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法）时，Seata会将同样的 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 对象传递给对应的方法。</li>
  <li><code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法可以从 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中获取在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段存储的数据（如业务ID、状态等），确保业务的一致性处理。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的作用</strong></p>

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 的主要作用是<strong>传递事务上下文数据</strong>，确保分布式事务各个阶段的数据一致性和可用性。即：</p>

<p><strong>携带全局事务ID（XID）：</strong>Seata TCC事务的每个阶段（Try、Confirm、Cancel）需要关联同一个全局事务ID（XID）。<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 中包含了这个事务ID，确保所有阶段都属于同一事务。</p>

<p><strong>传递业务参数：</strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 允许在 <code class="language-plaintext highlighter-rouge">Try</code> 阶段传递参数，并在 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段读取这些参数。你可以在 <code class="language-plaintext highlighter-rouge">Try</code> 方法中将需要的数据（例如订单ID、用户ID等）放入 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，并在 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 中使用。</p>

<p><strong>支持幂等性处理：</strong>在分布式系统中，网络波动或其他异常情况可能会导致 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法被多次调用。通过 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递的数据，可以用来做幂等性检查，避免重复执行业务操作。</p>

<p><strong>支持悬挂控制：</strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 还可以用于处理“悬挂问题”，即当 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段执行在 <code class="language-plaintext highlighter-rouge">Try</code> 之前时，通过 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 可以检测是否存在 <code class="language-plaintext highlighter-rouge">Try</code> 的执行，进而决定是否执行 <code class="language-plaintext highlighter-rouge">Cancel</code>。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">BusinessActionContext</code>具有以下方法：</p>

<p><strong><code class="language-plaintext highlighter-rouge">getActionContext()</code></strong>：获取在 Try 阶段存储的业务数据。通常在 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code> 阶段，通过 <code class="language-plaintext highlighter-rouge">getActionContext()</code> 方法获取在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段存储的数据。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"key"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li><strong>参数</strong>：<code class="language-plaintext highlighter-rouge">key</code> 是存储数据时的键。</li>
  <li><strong>返回值</strong>：返回与该键关联的值，类型为 <code class="language-plaintext highlighter-rouge">Object</code>，需要进行类型转换。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">addActionContext()</code></strong>：在 Try 阶段保存业务数据，用于后续的 Confirm 或 Rollback 阶段使用。在 <code class="language-plaintext highlighter-rouge">prepare</code> 方法中，调用 <code class="language-plaintext highlighter-rouge">addActionContext()</code> 将业务数据存储在上下文中。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">context</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"orderId"</span><span class="o">,</span> <span class="n">orderId</span><span class="o">);</span>
<span class="n">context</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"userId"</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li><strong>参数</strong>：<code class="language-plaintext highlighter-rouge">key</code>：数据的键，<code class="language-plaintext highlighter-rouge">value</code>：要存储的数据值。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">getXid()</code></strong>：获取全局事务ID（<code class="language-plaintext highlighter-rouge">Xid</code>），用于标识当前事务，在事务处理或日志中非常有用。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">xid</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getXid</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getBranchId()</code></strong>：获取当前分支事务的ID。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">branchId</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBranchId</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">isDelayReporting()</code></strong>：判断当前事务是否设置了延迟上报。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">isDelayed</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">isDelayReporting</span><span class="o">();</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">getPhase()</code></strong>：获取当前事务的阶段（如 Try、Confirm、Rollback）。实例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BusinessActionContext</span><span class="o">.</span><span class="na">BusinessActionContextPhase</span> <span class="n">phase</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getPhase</span><span class="o">();</span>
</code></pre></div></div>

<ul>
  <li><strong>返回值</strong>：返回事务的当前阶段，类型为 <code class="language-plaintext highlighter-rouge">BusinessActionContext.BusinessActionContextPhase</code>。</li>
</ul>

<hr />

<p><strong><code class="language-plaintext highlighter-rouge">BusinessActionContext</code></strong> <strong>是必须的</strong>。它是Seata框架用来传递事务上下文信息的关键组件，即在TCC这三个方式的第一个形参必须是<code class="language-plaintext highlighter-rouge">BusinessActionContext</code>。</p>

<p>即使你的业务代码中不直接使用 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，你仍然需要在 TCC 接口方法中留一个 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 作为第一个参数，以便 Seata 能够正常控制事务。它负责管理和传递事务上下文信息，从而让 Seata 知道如何协调 Try、Confirm 和 Cancel 阶段的操作。</p>

<hr />

<p>对于使用<code class="language-plaintext highlighter-rouge">BusinessActionContext</code>传递信息，还有一些注意的问题：</p>

<p>在 Seata TCC 模式下，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 会通过分布式系统进行传递，这个过程通常涉及到<strong>序列化</strong>和<strong>反序列化</strong>。在序列化和反序列化的过程中，Java 对象的类型可能发生变化，尤其是涉及基础数据类型时。</p>

<p>示例：<code class="language-plaintext highlighter-rouge">long</code> 类型传值导致的类型变化</p>

<p><strong>Try 阶段：传递 <code class="language-plaintext highlighter-rouge">long</code> 类型值</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@LocalTCC</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TCCInventoryChange</span> <span class="o">{</span>

    <span class="nd">@Transactional</span>
    <span class="nd">@TwoPhaseBusinessAction</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"TCCInventoryChange"</span><span class="o">,</span> <span class="n">commitMethod</span> <span class="o">=</span> <span class="s">"commit"</span><span class="o">,</span> <span class="n">rollbackMethod</span> <span class="o">=</span> <span class="s">"rollback"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">prepare</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">,</span> <span class="kt">long</span> <span class="n">productId</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 将 long 类型的 productId 放入 ActionContext</span>
        <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">,</span> <span class="n">productId</span><span class="o">);</span>  
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>  <span class="c1">// 返回成功</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Commit 阶段：取出 <code class="language-plaintext highlighter-rouge">productId</code></strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">commit</span><span class="o">(</span><span class="nc">BusinessActionContext</span> <span class="n">actionContext</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 试图以 long 类型取出 productId</span>
    <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">);</span>
    <span class="c1">// 处理业务逻辑...</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是，实际在执行时可能会抛出 <code class="language-plaintext highlighter-rouge">ClassCastException</code>，因为 <code class="language-plaintext highlighter-rouge">actionContext.getActionContext("productId")</code> 实际上返回的是 <code class="language-plaintext highlighter-rouge">Integer</code>，而不是 <code class="language-plaintext highlighter-rouge">Long</code>，即使我们在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段传递的是 <code class="language-plaintext highlighter-rouge">long</code> 类型。</p>

<p><strong>问题出现原因：序列化导致的类型变化</strong></p>

<p>这是由于 Java 序列化机制在处理基础数据类型时的行为不同。例如，Java 会自动进行类型提升和转换。在 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 经过序列化和反序列化后，Seata 可能将原本的 <code class="language-plaintext highlighter-rouge">long</code> 类型转换成了 <code class="language-plaintext highlighter-rouge">Integer</code>。</p>

<p>详细说明</p>

<p><strong>序列化与反序列化过程</strong>
   在分布式系统中，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 会在不同的节点间传递，传递时会进行序列化和反序列化。序列化是指将对象转换为字节流以便传输，而反序列化则是将字节流重新转换为对象。在序列化过程中，某些数据类型，特别是基础类型（如 <code class="language-plaintext highlighter-rouge">long</code>、<code class="language-plaintext highlighter-rouge">int</code>），有时会在反序列化后出现类型变化。例如，<code class="language-plaintext highlighter-rouge">long</code> 类型可能会因为存储方式在反序列化后变成 <code class="language-plaintext highlighter-rouge">Integer</code>。</p>

<p><strong>基础类型自动转换</strong>
   Java 在处理基础类型时，可能会进行自动的类型提升或缩减。例如，如果你存储一个数值类型较小的 <code class="language-plaintext highlighter-rouge">long</code>，它在某些情况下可能会被自动转换为 <code class="language-plaintext highlighter-rouge">Integer</code>。特别是在序列化时，Java 可能将小范围的 <code class="language-plaintext highlighter-rouge">long</code>（如 <code class="language-plaintext highlighter-rouge">long</code> 值不超过 <code class="language-plaintext highlighter-rouge">Integer.MAX_VALUE</code>）转换为 <code class="language-plaintext highlighter-rouge">Integer</code>，以节省存储空间。</p>

<p><strong>Seata 内部机制</strong>
   Seata 在 TCC 模式下可能通过 JSON 序列化（如使用 Jackson 或 FastJSON）来传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>。在某些情况下，JSON 序列化的机制会对数值类型进行优化，并且在反序列化时，如果没有明确指定类型，较小范围的 <code class="language-plaintext highlighter-rouge">long</code> 会被当作 <code class="language-plaintext highlighter-rouge">Integer</code> 反序列化。</p>

<p>解决方案</p>

<p>为了避免这种类型转换的问题，尤其是在处理基础数据类型时，可以采取以下几种措施：</p>

<p><strong>使用显式类型检查和转换</strong>
   在获取上下文参数时，显式地检查对象的类型，避免直接进行类型转换。可以先检查 <code class="language-plaintext highlighter-rouge">Object</code> 的类型再进行强制转换：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Object</span> <span class="n">productIdObj</span> <span class="o">=</span> <span class="n">actionContext</span><span class="o">.</span><span class="na">getActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">);</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">productIdObj</span> <span class="k">instanceof</span> <span class="nc">Long</span><span class="o">)</span> <span class="o">{</span>
       <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">productIdObj</span><span class="o">;</span>
   <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">productIdObj</span> <span class="k">instanceof</span> <span class="nc">Integer</span><span class="o">)</span> <span class="o">{</span>
       <span class="c1">// 处理 long 被序列化为 Integer 的情况</span>
       <span class="kt">long</span> <span class="n">productId</span> <span class="o">=</span> <span class="o">((</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">productIdObj</span><span class="o">).</span><span class="na">longValue</span><span class="o">();</span>
   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
       <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"Unexpected type for productId"</span><span class="o">);</span>
   <span class="o">}</span>
</code></pre></div></div>

<p><strong>序列化时强制指定类型</strong>
   在传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 数据时，使用 <code class="language-plaintext highlighter-rouge">Long</code> 对象来代替基础类型 <code class="language-plaintext highlighter-rouge">long</code>。这样，序列化时会保留对象的精确类型：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">actionContext</span><span class="o">.</span><span class="na">addActionContext</span><span class="o">(</span><span class="s">"productId"</span><span class="o">,</span> <span class="nc">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">productId</span><span class="o">));</span>
</code></pre></div></div>

<p><strong>使用 JSON 序列化配置</strong>
   如果使用的是 JSON 序列化框架（如 Jackson 或 FastJSON），可以通过配置序列化框架来确保数值类型不会在序列化或反序列化过程中发生变化。例如，使用 Jackson 的 <code class="language-plaintext highlighter-rouge">DeserializationFeature.USE_LONG_FOR_INTS</code> 选项，可以强制将所有整数类型都反序列化为 <code class="language-plaintext highlighter-rouge">long</code> 类型。</p>

<p>使用 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递基础类型时，序列化导致类型变化的情况主要发生在基础类型（如 <code class="language-plaintext highlighter-rouge">long</code> 和 <code class="language-plaintext highlighter-rouge">int</code>）的自动转换过程中。为了避免这种情况，建议在代码中加入类型检查，或者通过序列化框架的配置确保类型的一致性。</p>

<h3 id="方法返回值类型">方法返回值类型</h3>

<p>在 Seata TCC 模式下，方法的返回值并没有严格的要求，但有一些约定和最佳实践，特别是在 <code class="language-plaintext highlighter-rouge">Try</code>、<code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段执行时：</p>

<p><strong>Try 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Try</code> 方法需要返回一个布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>）的值，表示准备操作是否成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示 Try 阶段执行成功，Seata 会继续执行 <code class="language-plaintext highlighter-rouge">Confirm</code> 阶段。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示 Try 阶段执行失败，Seata 会立即执行 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。</li>
</ul>

<p><strong>Confirm 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Confirm</code> 方法的返回值通常也是布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>），用于告诉 Seata 确认操作是否执行成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示 <code class="language-plaintext highlighter-rouge">Confirm</code> 操作成功，事务可以提交。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示 <code class="language-plaintext highlighter-rouge">Confirm</code> 操作失败，但一般不会影响全局事务，因为全局事务在 <code class="language-plaintext highlighter-rouge">Try</code> 成功后已经被认为提交。</li>
</ul>

<p><strong>Cancel 阶段返回值要求</strong>：<code class="language-plaintext highlighter-rouge">Cancel</code> 方法的返回值同样是布尔类型（<code class="language-plaintext highlighter-rouge">boolean</code>），用于告诉 Seata 回滚操作是否执行成功。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">true</code></strong>：表示回滚成功，Seata 会认为事务已经被成功回滚。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">false</code></strong>：表示回滚失败，此时 Seata 可能会进行重试，直到回滚成功或达到重试上限。</li>
</ul>

<p><strong>返回值的影响</strong></p>

<ul>
  <li><strong>Try 阶段返回值</strong>：<strong>影响全局事务的决策</strong>，如果 Try 返回 <code class="language-plaintext highlighter-rouge">false</code>，Seata 会立即调用 <code class="language-plaintext highlighter-rouge">Cancel</code> 方法，标记事务失败。</li>
  <li><strong>Confirm 阶段返回值</strong>：理论上不会影响全局事务的提交，即使 <code class="language-plaintext highlighter-rouge">Confirm</code> 方法失败，Seata 也会认为事务已经提交成功。</li>
  <li><strong>Cancel 阶段返回值</strong>：如果 <code class="language-plaintext highlighter-rouge">Cancel</code> 返回 <code class="language-plaintext highlighter-rouge">false</code>，Seata 会进行<strong>重试</strong>，确保事务资源被成功回滚。</li>
</ul>

<p><strong>其他返回值</strong></p>

<p>虽然 TCC 的标准返回类型为 <code class="language-plaintext highlighter-rouge">boolean</code>，但如果你有自定义需求，可以返回其他类型的值， Seata <strong>仅关心 <code class="language-plaintext highlighter-rouge">Try</code> 方法的返回值是否为 <code class="language-plaintext highlighter-rouge">true</code></strong>，来决定是否继续 <code class="language-plaintext highlighter-rouge">Confirm</code> 或 <code class="language-plaintext highlighter-rouge">Cancel</code>。</p>

<h3 id="调用接口">调用接口</h3>

<p>在Seata的TCC模式下，<code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是由Seata自动注入的，但它<strong>必须</strong>放在TCC接口方法的<strong>第一个参数位置</strong>，然后才是业务参数。</p>

<p>Seata的TCC拦截器要求 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 是第一个参数，这样Seata才能在执行全局事务的各个阶段时自动注入这个上下文。如果放在其他位置，Seata无法识别该参数，从而导致TCC事务处理失败。</p>

<p>当你调用 TCC 的 <code class="language-plaintext highlighter-rouge">prepare</code>方法时，不需要显式创建或传递 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code>，Seata会在执行拦截时自动注入。也就是说，当你调用时，可以将 <code class="language-plaintext highlighter-rouge">BusinessActionContext</code> 传递为 <code class="language-plaintext highlighter-rouge">null</code>，Seata在执行过程中会为其生成并注入实际的上下文对象。</p>

<p>对于之前省略实参的：<code class="language-plaintext highlighter-rouge">orderService.prepareCreateOrder(...);</code>，正确的调用方式为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">orderService</span><span class="o">.</span><span class="na">prepareCreateOrder</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span><span class="n">userId</span><span class="o">,</span><span class="n">productId</span><span class="o">,</span><span class="n">count</span><span class="o">);</span>
</code></pre></div></div>

<p>另外，在Seata的TCC模式下，<code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 是由Seata在全局事务的不同阶段<strong>自动调用</strong>的。你只需要在业务代码中显式调用 <code class="language-plaintext highlighter-rouge">prepare</code>（也称为Try方法）来尝试预留资源。</p>

<p>具体来说：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">prepare</code>（Try阶段）是由你的业务代码<strong>显式调用</strong>的，用于预留资源或执行其他初步操作。</li>
  <li><code class="language-plaintext highlighter-rouge">commit</code>（Confirm阶段）和<code class="language-plaintext highlighter-rouge">rollback</code>（Cancel阶段）会根据全局事务的执行结果（成功或失败）由Seata自动调用，以完成事务提交或回滚。</li>
</ul>

<p><strong>你不需要也不能直接调用 <code class="language-plaintext highlighter-rouge">commit</code> 或 <code class="language-plaintext highlighter-rouge">rollback</code>，它们会根据全局事务的状态自动触发</strong>。</p>

<h3 id="与本地事务的比较">与本地事务的比较</h3>

<p>本地事务（使用 <code class="language-plaintext highlighter-rouge">@Transactional</code>）</p>

<ul>
  <li><strong>回滚机制</strong>：当在一个单一的数据源中操作时，Spring 的 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解可以在发生异常时自动进行回滚。这意味着如果在事务过程中出现任何运行时异常（或被配置为回滚的异常），Spring 会自动回滚事务，撤销所有对数据库的更改，确保数据一致性。</li>
  <li><strong>事务管理</strong>：Spring 自动管理事务的开始、提交和回滚。只需配置 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解，并确保异常能够被捕获并且未被处理。</li>
</ul>

<p>分布式事务（使用 Seata TCC、XA、等）</p>

<ul>
  <li><strong>事务模型</strong>：在分布式环境中，事务涉及多个服务或数据源，不能依赖于单一的事务管理机制。因此，需要使用分布式事务解决方案（如 Seata、XA、TCC）来协调这些事务的执行。
    <ul>
      <li><strong>TCC</strong>（Try-Confirm-Cancel）：分为 <code class="language-plaintext highlighter-rouge">Try</code>、<code class="language-plaintext highlighter-rouge">Confirm</code> 和 <code class="language-plaintext highlighter-rouge">Cancel</code> 阶段。<strong>需要自己实现这些阶段的逻辑，以确保在失败情况下能够进行回滚或恢复</strong>。</li>
      <li><strong>XA</strong>：基于两阶段提交协议，适用于需要强一致性的分布式事务，但实现和维护较复杂。</li>
    </ul>
  </li>
  <li><strong>自定义回滚逻辑</strong>：分布式事务通常需要手动管理回滚逻辑。如果某个服务的操作失败，需要确保其他服务能够正确地执行回滚操作，恢复系统到一致性状态。这通常通过实现 <code class="language-plaintext highlighter-rouge">commit</code> 和 <code class="language-plaintext highlighter-rouge">rollback</code> 方法来完成。</li>
</ul>

<p>为什么分布式事务需要更多手动处理？</p>

<ul>
  <li><strong>复杂性</strong>：在分布式环境中，事务涉及多个服务或数据源，它们可能在网络上分布，事务的协调和管理变得更加复杂。</li>
  <li><strong>一致性保障</strong>：为了确保系统的一致性和完整性，需要手动实现各个阶段的逻辑，确保在任何阶段的失败都能够正确地进行回滚或恢复。</li>
  <li><strong>网络和系统故障</strong>：分布式系统中可能会遇到网络延迟、故障或其他不可预见的问题，这要求分布式事务解决方案具备更强的容错性和恢复能力。</li>
</ul>

<p>总之，分布式事务相较于本地事务更复杂，需要额外的事务协调机制和手动管理回滚逻辑。然而，它们为分布式系统提供了必要的一致性保证，使得在多服务或多数据源环境中进行可靠的事务处理成为可能。</p>

<hr />

<p>在使用分布式事务框架（如 Seata 的 TCC 模式）时，<code class="language-plaintext highlighter-rouge">@Transactional</code> 注解在每个方法中的作用和意义如下：</p>

<p><strong>确保本地事务的一致性</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 注解用于标记一个方法需要运行在事务中。它确保方法内的数据库操作是原子的，即要么全部成功，要么全部失败。在 TCC 模式下，即使分布式事务的各个步骤有独立的事务控制，<code class="language-plaintext highlighter-rouge">@Transactional</code> 仍然是必要的：</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">prepare</code> 方法</strong>：确保即使在 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段操作失败或发生异常，本地事务也能正确回滚，避免数据不一致。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">commit</code> 方法</strong>：确保在 <code class="language-plaintext highlighter-rouge">commit</code> 阶段对数据库的操作是原子的。虽然 <code class="language-plaintext highlighter-rouge">commit</code> 只是确认操作，但仍然需要事务保证操作的一致性。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">rollback</code> 方法</strong>：如果在 <code class="language-plaintext highlighter-rouge">commit</code> 阶段失败，<code class="language-plaintext highlighter-rouge">rollback</code> 方法应当回滚 <code class="language-plaintext highlighter-rouge">prepare</code> 阶段的操作，<code class="language-plaintext highlighter-rouge">@Transactional</code> 确保这一回滚是安全的。</li>
</ul>

<p><strong>提供事务隔离和一致性</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 控制事务的隔离级别、传播行为、超时时间等，确保方法内部的数据库操作符合预期的事务要求：</p>

<ul>
  <li><strong>隔离级别</strong>：防止不同事务之间的干扰，避免读到不一致的数据。</li>
  <li><strong>传播行为</strong>：确定方法执行时事务的传播方式，比如是否加入到当前事务中。</li>
</ul>

<p><strong>异常处理和事务回滚</strong></p>

<p><code class="language-plaintext highlighter-rouge">@Transactional</code> 确保方法内部抛出的运行时异常（unchecked exception）会导致事务回滚。这样可以保证在遇到异常时，所有的数据库操作都能够被回滚到操作之前的状态，保持数据的一致性。</p>

<p>虽然 TCC 模式主要处理分布式事务的协调，<strong>但在每个本地事务中，使用 <code class="language-plaintext highlighter-rouge">@Transactional</code> 注解仍然是确保数据一致性的关键。</strong></p>

<h3 id="事务幂等悬挂和空回滚">事务幂等、悬挂和空回滚</h3>

<p><strong>空回滚</strong></p>

<p>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。</p>

<p>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</p>

<p><strong>业务悬挂</strong></p>

<p>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</p>

<p>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</p>

<hr />

<p>TCC 模式中存在的三大问题是幂等、悬挂和空回滚，而新版seata解决了上述问题：<a href="https://seata.apache.org/zh-cn/blog/seata-tcc-fence/">链接</a>。</p>

<p>在 Seata1.5.1 版本中，增加了一张事务控制表，表名是 <code class="language-plaintext highlighter-rouge">tcc_fence_log</code> 来解决这个问题。 <code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code> 注解中有一个属性 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 就是来指定是否开启这个机制，这个属性值默认是 <code class="language-plaintext highlighter-rouge">false</code>。</p>

<p>首先，在自己的数据库添加一个事务控制表：<code class="language-plaintext highlighter-rouge">tcc_fence_log</code>， 建表语句如下（MySQL 语法）：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="nv">`tcc_fence_log`</span>
<span class="p">(</span>
    <span class="nv">`xid`</span>           <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>  <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'global id'</span><span class="p">,</span>
    <span class="nv">`branch_id`</span>     <span class="nb">BIGINT</span>        <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'branch id'</span><span class="p">,</span>
    <span class="nv">`action_name`</span>   <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'action name'</span><span class="p">,</span>
    <span class="nv">`status`</span>        <span class="nb">TINYINT</span>       <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'status(tried:1;committed:2;rollbacked:3;suspended:4)'</span><span class="p">,</span>
    <span class="nv">`gmt_create`</span>    <span class="nb">DATETIME</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'create time'</span><span class="p">,</span>
    <span class="nv">`gmt_modified`</span>  <span class="nb">DATETIME</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">COMMENT</span> <span class="s1">'update time'</span><span class="p">,</span>
    <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="nv">`xid`</span><span class="p">,</span> <span class="nv">`branch_id`</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nv">`idx_gmt_modified`</span> <span class="p">(</span><span class="nv">`gmt_modified`</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nv">`idx_status`</span> <span class="p">(</span><span class="nv">`status`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span> <span class="o">=</span> <span class="n">InnoDB</span>
<span class="k">DEFAULT</span> <span class="n">CHARSET</span> <span class="o">=</span> <span class="n">utf8mb4</span><span class="p">;</span>
</code></pre></div></div>

<p>然后在<code class="language-plaintext highlighter-rouge">@TwoPhaseBusinessAction</code>，开启<code class="language-plaintext highlighter-rouge">useTCCFence</code>即可。</p>

<p>开启<code class="language-plaintext highlighter-rouge">useTCCFence</code>后，TCC阶段的转换逻辑会发生变化：</p>

<table>
  <thead>
    <tr>
      <th>阶段</th>
      <th>useTCCFence</th>
      <th>异常</th>
      <th>程序停止</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>try</td>
      <td>true</td>
      <td>暂停</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Confirm</td>
      <td>true</td>
      <td>重试</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Cancel</td>
      <td>true</td>
      <td>重试</td>
      <td>重试</td>
    </tr>
    <tr>
      <td>try</td>
      <td>false</td>
      <td>多次执行Cancel</td>
      <td>无操作/还原（加本地事务）</td>
    </tr>
    <tr>
      <td>Confirm</td>
      <td>false</td>
      <td>多次重试</td>
      <td>无操作</td>
    </tr>
    <tr>
      <td>Cancel</td>
      <td>false</td>
      <td>多次重试</td>
      <td>无操作</td>
    </tr>
  </tbody>
</table>

<p>开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后的行为主要与解决 TCC 模式下的悬挂问题有关。悬挂问题指的是在 TCC 模式下，当 Confirm 或 Cancel 阶段因为某种原因没有被执行时，可能会导致资源长时间处于锁定状态，影响系统的正常运行。<code class="language-plaintext highlighter-rouge">useTCCFence</code> 就是用来防止这类问题的发生。</p>

<p>以下是开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后的行为总结：</p>

<ol>
  <li>
    <p><strong>记录尝试操作</strong>：当开启 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 后，在执行 TCC 的 Try 阶段时，Seata 会记录这次操作，并将其持久化到数据库中。</p>
  </li>
  <li>
    <p><strong>检查确认/取消请求</strong>：在 Confirm 或 Cancel 阶段到来之前，Seata 会先检查是否有对应的 Try 操作记录存在。如果没有找到匹配的 Try 记录，则认为这是一个非法的请求，可能是由于网络重试或其他异常情况导致的重复调用。</p>
  </li>
  <li>
    <p><strong>避免悬挂事务</strong>：通过上述机制，可以有效地避免因 Confirm 或 Cancel 请求丢失而造成的悬挂事务问题。如果系统重启或服务宕机后恢复，未完成的 TCC 事务可以通过这些记录来进行补偿处理。</p>
  </li>
  <li>
    <p><strong>清理过期记录</strong>：对于那些已经完成了 Confirm 或 Cancel 操作的 Try 记录，Seata 会在一段时间之后自动清理它们以节省存储空间并保持系统清洁。</p>
  </li>
  <li>
    <p><strong>提高系统稳定性</strong>：整体而言，启用 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 能够帮助增强 TCC 模式的鲁棒性，减少由外部因素引起的服务不稳定状况，确保分布式事务能够按照预期的方式正确地执行完毕。</p>
  </li>
</ol>

<p>需要注意的是，使用 <code class="language-plaintext highlighter-rouge">useTCCFence</code> 功能可能需要对现有的 TCC 业务代码进行一些调整，并且要保证相应的存储支持持久化记录的能力。此外，还需要合理配置超时时间等参数以适应不同的业务场景。</p>

<h3 id="部署">部署</h3>

<p>要将seata部署到k8s上：</p>

<ul>
  <li>首先下载doker镜像</li>
  <li>新建容器设置好端口并运行</li>
  <li>然后修改<code class="language-plaintext highlighter-rouge">seata-server.resources/application.yml</code>文件为你需要的配置。</li>
  <li>将容器打包为镜像：<code class="language-plaintext highlighter-rouge">docker commit [容器ID] [镜像名称:tag]</code></li>
  <li>注意镜像名称，如果要推送到harbor，则需要添加前缀：<code class="language-plaintext highlighter-rouge">local.harbor/</code>。</li>
  <li>推送到harbor：<code class="language-plaintext highlighter-rouge">docker push [name:tag]</code></li>
  <li>使用k8s配置拉取镜像，并保留相应的接口即可</li>
</ul>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">分布式锁的使用</title><link href="/2024/09/20/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8/" rel="alternate" type="text/html" title="分布式锁的使用" /><published>2024-09-20T00:00:00+08:00</published><updated>2024-09-20T00:00:00+08:00</updated><id>/2024/09/20/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8</id><content type="html" xml:base="/2024/09/20/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8/"><![CDATA[<h1 id="引言">引言</h1>

<p>Consul 的分布式锁机制是一种基于键值存储 (KV) 和会话 (Session) 的乐观锁机制，通常用于协调多个分布式系统或微服务之间的并发访问，确保资源的一致性和避免冲突。</p>

<h1 id="consul分布式锁">Consul分布式锁</h1>

<p>Consul 分布式锁的原理</p>

<ol>
  <li>
    <p><strong>KV 键值存储</strong>：Consul 的 KV 存储用于保存锁的状态，锁的持有者会在特定的 KV 键上写入锁相关的信息（如会话 ID）。</p>
  </li>
  <li>
    <p><strong>会话 (Session)</strong>：会话是 Consul 锁机制的核心。每个锁与一个会话相关联，会话可以有一个 TTL（超时时间）。如果持有锁的客户端失去连接，Consul 会自动释放锁（即删除相关会话）。这避免了“死锁”问题。</p>
  </li>
  <li>
    <p><strong>锁的获取</strong>：客户端在尝试获取锁时，需要创建一个 Consul 会话，并使用 <code class="language-plaintext highlighter-rouge">PUT</code> 操作尝试在指定的 KV 键上绑定会话 ID。Consul 会将这个 <code class="language-plaintext highlighter-rouge">PUT</code> 操作视为一次原子性的操作。如果 KV 键已经存在且被其他会话占用，当前操作将失败。</p>
  </li>
  <li>
    <p><strong>锁的释放</strong>：锁持有者可以手动删除绑定的 KV 键或者销毁会话来释放锁。一旦会话销毁，锁将自动释放，其他客户端可以再次尝试获取锁。</p>
  </li>
</ol>

<p>Consul 分布式锁的流程</p>

<ol>
  <li>
    <p><strong>创建会话</strong>：锁的持有者需要先向 Consul 注册一个会话 (<code class="language-plaintext highlighter-rouge">SessionCreate</code>)。会话可以有一个 TTL，表示持有锁的最长时间。</p>
  </li>
  <li><strong>获取锁</strong>：
    <ul>
      <li>使用 <code class="language-plaintext highlighter-rouge">PUT</code> 请求将会话 ID 绑定到特定的 KV 键上。</li>
      <li>如果绑定成功，客户端持有锁；如果该 KV 键已经绑定到其他会话 ID，则锁获取失败。</li>
    </ul>
  </li>
  <li><strong>自动释放锁</strong>：
    <ul>
      <li>如果持有锁的客户端未在会话的 TTL 内刷新会话，Consul 会自动销毁会话并释放锁。</li>
      <li>这确保了如果客户端崩溃或掉线，锁不会长时间被占用。</li>
    </ul>
  </li>
  <li><strong>手动释放锁</strong>：
    <ul>
      <li>客户端可以显式销毁会话 (<code class="language-plaintext highlighter-rouge">SessionDestroy</code>) 或删除与锁关联的 KV 键来释放锁。</li>
    </ul>
  </li>
</ol>

<p>实现 Consul 分布式锁的关键 API</p>

<p><strong>Session Create (创建会话)</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> PUT <span class="se">\</span>
  <span class="nt">--data</span> <span class="s1">'{"LockDelay": "15s", "TTL": "10s", "Name": "my-lock"}'</span> <span class="se">\</span>
  http://localhost:8500/v1/session/create
</code></pre></div></div>
<p>会话的 TTL 表示锁的持有者必须在这个时间范围内继续保持活跃。</p>

<p><strong>Lock (获取锁)</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> PUT <span class="se">\</span>
  <span class="nt">--data</span> <span class="s1">'my-session-id'</span> <span class="se">\</span>
  http://localhost:8500/v1/kv/my-key?acquire<span class="o">=</span>my-session-id
</code></pre></div></div>
<p>通过这个命令，客户端尝试获取与 <code class="language-plaintext highlighter-rouge">my-key</code> 相关的锁。</p>

<p><strong>Release (释放锁)</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> PUT <span class="se">\</span>
  <span class="nt">--data</span> <span class="s1">'my-session-id'</span> <span class="se">\</span>
  http://localhost:8500/v1/kv/my-key?release<span class="o">=</span>my-session-id
</code></pre></div></div>
<p>通过释放命令，客户端可以显式地释放锁。</p>

<p><strong>Session Destroy (销毁会话)</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">--request</span> PUT <span class="se">\</span>
  http://localhost:8500/v1/session/destroy/my-session-id
</code></pre></div></div>
<p>销毁会话后，锁自动被释放，其他客户端可以获取该锁。</p>

<p><strong>优点</strong></p>

<ul>
  <li><strong>自动锁释放</strong>：通过 TTL 和会话机制，Consul 可以自动处理锁的释放，避免死锁。</li>
  <li><strong>可扩展性</strong>：Consul 作为一个分布式服务注册和发现系统，天然具有扩展能力，因此其锁机制可以用于分布式系统中的并发控制。</li>
  <li><strong>透明性</strong>：锁的状态可以通过 Consul UI 或 API 查询，便于监控。</li>
</ul>

<hr />

<p>以下是基于 Java 的 Consul 分布式锁实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsulLockService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ConsulClient</span> <span class="n">consulClient</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ConsulClient</span> <span class="n">consulClient</span><span class="o">;</span>

	<span class="cm">/**
     * 获取分布式锁
     * @param lockKey
     * @return
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">acquireLock</span><span class="o">(</span><span class="nc">String</span> <span class="n">lockKey</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Step 1: 创建一个会话</span>
        <span class="nc">NewSession</span> <span class="n">newSession</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NewSession</span><span class="o">();</span>
        <span class="n">newSession</span><span class="o">.</span><span class="na">setTtl</span><span class="o">(</span><span class="s">"10s"</span><span class="o">);</span>  <span class="c1">// 设置TTL (Time to Live)，表示锁的有效期</span>
        <span class="n">newSession</span><span class="o">.</span><span class="na">setLockDelay</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// 立即释放锁</span>

        <span class="c1">// 创建 Session，并获取 sessionId</span>
        <span class="nc">Response</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sessionResponse</span> <span class="o">=</span> <span class="n">consulClient</span><span class="o">.</span><span class="na">sessionCreate</span><span class="o">(</span><span class="n">newSession</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">sessionId</span> <span class="o">=</span> <span class="n">sessionResponse</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>

        <span class="c1">// Step 2: 尝试加锁</span>
        <span class="nc">PutParams</span> <span class="n">putParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PutParams</span><span class="o">();</span>
        <span class="n">putParams</span><span class="o">.</span><span class="na">setAcquireSession</span><span class="o">(</span><span class="n">sessionId</span><span class="o">);</span> <span class="c1">// 通过 Session 来加锁</span>

        <span class="nc">Response</span><span class="o">&lt;</span><span class="nc">Boolean</span><span class="o">&gt;</span> <span class="n">lockResponse</span> <span class="o">=</span> <span class="n">consulClient</span><span class="o">.</span><span class="na">setKVValue</span><span class="o">(</span><span class="n">lockKey</span><span class="o">,</span> <span class="s">"locked"</span><span class="o">,</span> <span class="n">putParams</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="nc">Boolean</span><span class="o">.</span><span class="na">TRUE</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">lockResponse</span><span class="o">.</span><span class="na">getValue</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">sessionId</span><span class="o">=</span><span class="n">sessionId</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">sessionId</span><span class="o">;</span> <span class="c1">// 锁定成功，返回 sessionId</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">consulClient</span><span class="o">.</span><span class="na">sessionDestroy</span><span class="o">(</span><span class="n">sessionId</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span> <span class="c1">// 锁定失败，销毁会话</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"无法获取锁: "</span> <span class="o">+</span> <span class="n">lockKey</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 释放分布式锁
     * @param lockKey
     * @param sessionId
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">releaseLock</span><span class="o">(</span><span class="nc">String</span> <span class="n">lockKey</span><span class="o">,</span> <span class="nc">String</span> <span class="n">sessionId</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 删除 KV 键值</span>
        <span class="n">consulClient</span><span class="o">.</span><span class="na">deleteKVValue</span><span class="o">(</span><span class="n">lockKey</span><span class="o">);</span>
        <span class="c1">// 销毁会话，释放锁</span>
        <span class="n">consulClient</span><span class="o">.</span><span class="na">sessionDestroy</span><span class="o">(</span><span class="n">sessionId</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>使用场景</strong></p>

<ol>
  <li><strong>数据库写操作</strong>：当多个微服务实例需要同时更新同一个数据库记录时，使用分布式锁可以确保只有一个实例可以进行写操作。</li>
  <li><strong>任务调度</strong>：分布式系统中的多个节点可能会尝试执行相同的定时任务，使用分布式锁可以确保每个任务只被执行一次。</li>
  <li><strong>资源访问控制</strong>：在分布式环境中，多个微服务可能会同时请求同一个共享资源，锁可以确保资源不会被多个实例同时修改。</li>
</ol>

<p><strong>注意事项</strong></p>

<ol>
  <li><strong>锁争抢问题</strong>：由于 Consul 锁基于乐观锁实现，如果锁竞争激烈，可能会有大量的锁获取失败，建议在应用层添加重试机制。</li>
  <li><strong>锁超时问题</strong>：会话 TTL 失效可能导致锁提前释放，因此需要适当地设置 TTL 并确保客户端保持活跃。</li>
  <li><strong>性能与延迟</strong>：由于锁依赖于 Consul 的 KV 存储，延迟和 Consul 的性能会影响锁的响应速度，建议在并发场景中测试锁的性能。</li>
</ol>

<p>Consul 的分布式锁是一种简洁高效的锁机制，尤其适合在分布式环境中确保资源的一致性和避免并发冲突。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">GitLabSSH认证</title><link href="/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81/" rel="alternate" type="text/html" title="GitLabSSH认证" /><published>2024-09-19T00:00:00+08:00</published><updated>2024-09-19T00:00:00+08:00</updated><id>/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81</id><content type="html" xml:base="/2024/09/19/GitLabSSH%E8%AE%A4%E8%AF%81/"><![CDATA[<h1 id="引言">引言</h1>
<p>对于GitLab的SSH认证，和GitHub认证步骤差不多，主要是SSH密钥可能需要指定的版本。</p>

<h1 id="gitlab">GitLab</h1>

<blockquote>
  <p>要使用 SSH 与 GitLab 通信，您需要：</p>

  <ul>
    <li>OpenSSH 客户端，预装在 GNU/Linux、macOS 和 Windows 10 上。</li>
    <li>SSH 版本 6.5 或更高版本。早期版本使用 MD5 签名，这并不安全。</li>
  </ul>

  <p>要查看系统上安装的 SSH 版本，请运行 <code class="language-plaintext highlighter-rouge">ssh -V</code>。</p>

  <p>支持的 SSH 密钥类型</p>

  <p>要与 GitLab 通信，您可以使用以下 SSH 密钥类型：</p>

  <ul>
    <li><a href="#ed25519-ssh-keys">ED25519</a></li>
    <li><a href="#rsa-ssh-keys">RSA</a></li>
    <li>DSA（在 11.0 版本中<a href="https://about.gitlab.com/releases/2018/06/22/gitlab-11-0-released/#support-for-dsa-ssh-keys">已弃用</a>。</li>
    <li>ECDSA（如 <a href="https://leanpub.com/gocrypto/read#leanpub-auto-ecdsa">Practical Cryptography With Go</a> 中所述，与 DSA 相关的安全问题也适用于 ECDSA。</li>
  </ul>

</blockquote>

<p>对于RSA算法，需要至少2048位密钥，首选ED25519算法。</p>

<h2 id="生成ssh密钥对">生成SSH密钥对</h2>

<p>对于 ED25519：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"&lt;comment&gt;"</span>
</code></pre></div></div>

<p>对于 2048 位 RSA：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 2048 <span class="nt">-C</span> <span class="s2">"&lt;comment&gt;"</span>
</code></pre></div></div>

<h2 id="配置-ssh-以指向不同的目录">配置 SSH 以指向不同的目录</h2>

<p>如果未将 SSH 密钥对保存在默认目录中，请将 SSH 客户端配置为指向存储私钥的目录。</p>

<p>打开终端并运行以下命令：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="si">$(</span>ssh-agent <span class="nt">-s</span><span class="si">)</span>
ssh-add &lt;directory to private SSH key&gt;
</code></pre></div></div>

<p>将这些设置保存在 ~/.ssh/config 文件中。例如：</p>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># GitLab.com
</span><span class="n">Host</span> <span class="n">gitlab</span>.<span class="n">com</span>
  <span class="n">PreferredAuthentications</span> <span class="n">publickey</span>
  <span class="n">IdentityFile</span> ~/.<span class="n">ssh</span>/<span class="n">gitlab_com_rsa</span>

<span class="c"># Private GitLab instance
</span><span class="n">Host</span> <span class="n">gitlab</span>.<span class="n">company</span>.<span class="n">com</span>
  <span class="n">PreferredAuthentications</span> <span class="n">publickey</span>
  <span class="n">IdentityFile</span> ~/.<span class="n">ssh</span>/<span class="n">example_com_rsa</span>
</code></pre></div></div>

<p>公共 SSH 密钥对于 GitLab 必须是唯一的，因为它们绑定到您的帐户。当使用 SSH 推送代码时，SSH 密钥是唯一标识符。它必须唯一地映射到单个用户。</p>]]></content><author><name>acteds</name></author><category term="Git" /><category term="GitLab" /><summary type="html"><![CDATA[GITLabSSH认证]]></summary></entry><entry><title type="html">多个Git托管平台的配置</title><link href="/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="多个Git托管平台的配置" /><published>2024-09-19T00:00:00+08:00</published><updated>2024-09-19T00:00:00+08:00</updated><id>/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="/2024/09/19/%E5%A4%9A%E4%B8%AAGit%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%85%8D%E7%BD%AE/"><![CDATA[<h1 id="引言">引言</h1>

<p>作为一个程序员，在工作中，可能需要将代码推送到公司的自建 Git 代码托管平台上（如 GitLab）。在生活中，当参与一些个人的开源项目，则又需要将代码推送到社区的 Git 代码托管平台上（如 Github 或 Gieet）。</p>

<h1 id="git">Git</h1>

<h2 id="多个git托管平台的配置">多个Git托管平台的配置</h2>

<p>最简单的解决方法就是，多个Git代码托管平台配置同一个SSH公钥。</p>

<p>第二种方法就是使用多组密钥指定给不同的平台：</p>

<p>SSH 允许统一个操作系统中存在多对密钥，因此可以使用 <code class="language-plaintext highlighter-rouge">ssh-keygen</code> 指令生成多组密钥，将不同的密钥分配给不通的 Git 代码托管平台。</p>

<p>通过平台要求的密钥加密算法生成SSH密钥后，可以通过：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-add id_rsa_github
</code></pre></div></div>

<p>这里的<code class="language-plaintext highlighter-rouge">id_rsa_github</code>是SSH密钥的名称。</p>

<p>如果不使用 <code class="language-plaintext highlighter-rouge">ssh-add</code> 指令添加新的密钥到 <code class="language-plaintext highlighter-rouge">ssh agent</code> 中，系统会仍然使用 <code class="language-plaintext highlighter-rouge">id_rsa</code> 作为默认的 SSH Key，因为 <code class="language-plaintext highlighter-rouge">id_rsa</code> 是被默认添加到 <code class="language-plaintext highlighter-rouge">ssh agent</code> 中。</p>

<h3 id="为远程服务器配置密钥">为远程服务器配置密钥</h3>

<p><code class="language-plaintext highlighter-rouge">~/.ssh</code> 目录下存在一个 <code class="language-plaintext highlighter-rouge">config</code> 文件，如果不存在可以使用 <code class="language-plaintext highlighter-rouge">touch config</code> 指令这个文件。</p>

<p>这个文件用于配置 SSH 客户端的信息，例如主机名、端口号、用户名、密钥等，对于 Git 代码托管平台来说，可以通过这个配置为不通的 Git 代码托管平台服务器配置不同的 SSH 密钥。创建 config 文件后，使用 vim 或者其他任意编辑器编辑 config 文件，输入以下内容：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Host github
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github

Host company-git
    User git
    # 替换为你公司的 Git 代码托管平台的服务器
    Hostname company-git-repo.com
    # 你公司 SSH 服务的端口号
    Port 22
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_company
</code></pre></div></div>

<p>config 配置文件中的各项配置意思为：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Host</code>：指定连接到的主机名，可以随意指定，相当于实际连接目标主机的<strong>别名</strong>；</li>
  <li><code class="language-plaintext highlighter-rouge">User</code>：指定使用的用户名，通常为 <code class="language-plaintext highlighter-rouge">git</code>，也可以不指定；</li>
  <li><code class="language-plaintext highlighter-rouge">Hostname</code>：指定连接到的主机的实际域名或IP地址。如果是向 Github 推送代码，则为 <code class="language-plaintext highlighter-rouge">github.com</code>，如果是向公司的 Git 代码托管平台推送代码，则填写公司主机的地址</li>
  <li><code class="language-plaintext highlighter-rouge">Port</code>：SSH 服务的端口号，默认为 <code class="language-plaintext highlighter-rouge">22</code>，可以不写</li>
  <li><code class="language-plaintext highlighter-rouge">PreferredAuthentications</code>：指定优先使用的身份验证方法，指定为<code class="language-plaintext highlighter-rouge">publickey</code>，即使用公钥进行身份认证。</li>
  <li><code class="language-plaintext highlighter-rouge">IdentityFile</code>：指定要使用的私钥文件路径，即指向你创建的私钥，这里分别为不通的 Git 代码托管平台指定了不同的私钥</li>
</ul>

<p>然后将<strong>公钥</strong>在对应的平台上添加SSH。</p>

<p>如果出现：<code class="language-plaintext highlighter-rouge">fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists.</code></p>

<p>就需要更改<code class="language-plaintext highlighter-rouge">.ssh</code>文件夹的权限，使其只对文件所有者可读写。（可以留下SYSTEM和Administrators用户组）</p>

<h3 id="配置不同的-git-用户名以及邮箱">配置不同的 git 用户名以及邮箱</h3>

<p>除了解决了不同平台使用不通的公私钥问题外，在不通的仓库提交代码时用的用户名和邮箱也可能需要不一样，比如：</p>

<ul>
  <li>在 Github 上，需要用网名来隐藏我的真实身份，因此提交代码的用户名为 <code class="language-plaintext highlighter-rouge">github-user</code>，邮箱为 <code class="language-plaintext highlighter-rouge">github-user@github.com</code>；</li>
  <li>而在工作中，公司则要求提交代码时的 git 用户名必须为我的真实姓名拼音，邮箱则为公司邮箱。</li>
</ul>

<p>这些配置就跟 SSH 的配置无关了，这些就需要调整我们的 git 配置。</p>

<p>首先，在全局配置一个 git 用户名和邮箱，这里建议使用你在 Github 上想要使用的用户名和邮箱，毕竟 Github 常驻，而公司不常驻：</p>

<pre><code class="language-cmd">git config --global user.email github-user@github.com[更改成你的邮箱]
git config --global user.name github-user[更改成你的网名]
</code></pre>

<p>此时，在 git 的配置文件 <code class="language-plaintext highlighter-rouge">~/.gitconfig</code> 中就可以看到如下的配置段，表示已经配置成功：</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[user]</span>
    <span class="py">name</span> <span class="p">=</span> <span class="s">github-user</span>
    <span class="py">email</span> <span class="p">=</span> <span class="s">github-user@github.com</span>
</code></pre></div></div>

<p>当我们提交代码的时候就会使用这个默认的用户名和邮箱来提交代码了。</p>

<p>除此之外，git 也支持通过在 git 项目内添加一个『本地配置』来单独配置每个项目的用户名和密码。利用这个能力，当我们将公司的代码 clone 到本地之后，进入到代码仓库，<strong>首先要做的第一件事情就是为这个公司的代码仓库设置独立的 git 用户名和密码</strong>。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--local</span> user.name zhangsan[改为你的真实姓名]
git config <span class="nt">--local</span> user.name zhangsan@company.com[改为你公司的邮箱]
</code></pre></div></div>

<p>总结，在使用 Github 提交提交代码的时候，无需在项目内单独设置 git 用户名和邮箱，因为会自动使用我们全局设置好的；当在编写公司项目的时候，当代码拉下来之后要单独为这个项目设置一个用户名和邮箱。</p>

<h2 id="同时配置多个-github-账号">同时配置多个 Github 账号</h2>

<p>还是使用上节的方法生成多个SSH密钥，然后追加到SSH config文件中。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># github 主账号的配置
Host github
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github
    
# github 新账号的配置
Host github_x
    User git
    Hostname github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_github_x
</code></pre></div></div>

<p>这个时候，你从小号的 Github 中 clone 下来一个仓库，假设地址为 <code class="language-plaintext highlighter-rouge">git@github.com:user_x/blog.git</code>，那么就在终端中输入：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:user_x/blog.git
</code></pre></div></div>

<p>然后 commit 一些代码后，执行 push 操作时，就会发现出错啦：</p>

<pre><code class="language-subunit">ERROR: Permission to user_x/blog.git denied to xxx.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>SSH 授权出问题了。</p>

<p>实际上，在使用 <code class="language-plaintext highlighter-rouge">git push</code> 提交代码的时候，由于代码的仓库源在 Github 上，因此 SSH 连接的主机就是 <code class="language-plaintext highlighter-rouge">github.com</code>，当 SSH 发起连接的时候，它会发现你的 SSH config 文件中配置了<strong>两段 <code class="language-plaintext highlighter-rouge">Hostname</code> 都为 <code class="language-plaintext highlighter-rouge">github.com</code> 的配置</strong>， SSH 会<strong>优先使用第一段</strong>配置中的公钥向 Github 建立身份认证连接。那么当身份认证请求到达 Github 的时候，Github 拿出公钥进行身份认证签名对比后发现不是小号，那么自然就会拒绝你的提交代码的请求。</p>

<p>首先可以解析一下<code class="language-plaintext highlighter-rouge">git@github.com:user_x/blog.git</code> 这一串的组成，<code class="language-plaintext highlighter-rouge">git</code>是建立SSH连接时使用的用户名，<code class="language-plaintext highlighter-rouge">github.com</code>是目标服务器，而<code class="language-plaintext highlighter-rouge">user_x/blog.git</code>是具体代码仓库的路径。</p>

<p>清楚了以上各个部分代表的意思后，可以利用 SSH 建立连接的一个特性：目标服务器可以直接写成为服务器地址，同时也可以写为在 SSH config 文件中配置的 <code class="language-plaintext highlighter-rouge">Host</code>，也就是服务器的别名。</p>

<p>因此可以将仓库的源改为 <code class="language-plaintext highlighter-rouge">git@github_x:user_x/blog.git</code> ：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote set-url origin git@github_x:user_x/blog.git
</code></pre></div></div>

<p>此外别忘了必须使用 <code class="language-plaintext highlighter-rouge">ssh-add</code> 指令将生成的 SSH key 添加到 ssh-agent 的身份验证代理中：<code class="language-plaintext highlighter-rouge">ssh-add ~/.ssh/id_rsa_github_x</code>。否则建立 SSH 连接时，会使用 <code class="language-plaintext highlighter-rouge">id_rsa_github</code> 的密钥对。</p>

<p>可以通过<code class="language-plaintext highlighter-rouge">ssh -T git@github_x</code>，进行测试连接。</p>

<p>其实在clone的时候就可以修改为别名了，这样就不需要再重新设置仓库源了：</p>

<pre><code class="language-cmd">git clone git@github_x:user_x/blog.git
</code></pre>]]></content><author><name>acteds</name></author><category term="Git" /><category term="GitLab" /><category term="Github" /><summary type="html"><![CDATA[GITLabSSH认证]]></summary></entry><entry><title type="html">OpenFeign的使用</title><link href="/2024/09/18/OpenFeign/" rel="alternate" type="text/html" title="OpenFeign的使用" /><published>2024-09-18T00:00:00+08:00</published><updated>2024-09-18T00:00:00+08:00</updated><id>/2024/09/18/OpenFeign</id><content type="html" xml:base="/2024/09/18/OpenFeign/"><![CDATA[<h1 id="引言">引言</h1>

<p><strong>OpenFeign</strong> 是一个声明式的 HTTP 客户端，主要用于简化微服务之间的通信。它通过注解和接口的形式定义远程服务的调用，帮助开发者省去了编写大量 HTTP 请求的样板代码。在 Spring Cloud 中，OpenFeign 与 Spring Boot 和 Spring Cloud 集成良好，能够与负载均衡、断路器等组件搭配使用。</p>

<h1 id="openfeign">OpenFeign</h1>

<p>在微服务架构中，不同的服务通过 HTTP 进行通信。常规做法是手动使用 <code class="language-plaintext highlighter-rouge">RestTemplate</code> 或 <code class="language-plaintext highlighter-rouge">HttpClient</code> 发起 HTTP 请求，这样的代码通常冗长且容易出错。<strong>OpenFeign</strong> 的优势在于它通过接口与注解的形式，使得调用远程服务就像调用本地方法一样简单。</p>

<p><strong>使用场景：</strong></p>

<ul>
  <li><strong>简化服务调用</strong>：你不需要手动构造 HTTP 请求，而是通过调用本地接口来完成服务的远程调用。</li>
  <li><strong>更好的集成性</strong>：OpenFeign 可以与其他 Spring Cloud 组件（如 Ribbon、Hystrix 等）无缝集成，提供负载均衡、超时、断路器等功能。</li>
</ul>

<p><strong>OpenFeign 的优点</strong>：</p>

<ol>
  <li><strong>声明式的编程风格</strong>：使用注解（例如 <code class="language-plaintext highlighter-rouge">@FeignClient</code>、<code class="language-plaintext highlighter-rouge">@RequestMapping</code> 等）定义远程服务调用，使代码简洁、易读。调用远程服务就像调用本地方法一样，无需关心底层的 HTTP 请求细节。</li>
  <li><strong>自动集成负载均衡</strong>：通过与 Spring Cloud Ribbon 集成，OpenFeign 可以自动实现对多个实例的负载均衡。你只需定义服务名，它会根据服务注册中心的实例列表选择目标。</li>
  <li><strong>与 Hystrix 结合</strong>：OpenFeign 可以与 Hystrix 集成，实现熔断和降级策略。在微服务架构中，当某个服务不可用时，Hystrix 可以帮助服务调用快速失败，避免级联故障。</li>
  <li><strong>与 Spring Boot 深度集成</strong>：OpenFeign 在 Spring Cloud 中具有很好的集成支持，能够通过注解、配置文件等方式轻松配置超时、重试等策略。</li>
  <li><strong>自定义配置</strong>：OpenFeign 允许你自定义拦截器、编码器、解码器、日志等，来满足个性化需求。</li>
</ol>

<p><strong>OpenFeign 的缺点</strong>：</p>

<ol>
  <li><strong>依赖反射，性能稍差</strong>：OpenFeign 是基于反射的声明式框架，性能上比手写的 HTTP 客户端（如 <code class="language-plaintext highlighter-rouge">RestTemplate</code>、<code class="language-plaintext highlighter-rouge">HttpClient</code>）稍差，适用于业务较轻或中等的服务调用场景。</li>
  <li><strong>缺少部分高级 HTTP 控制</strong>：OpenFeign 的简洁性是它的优势，但它也使得一些高级的 HTTP 请求控制（例如复杂的请求头操作、流式数据处理等）不如手动编写 HTTP 客户端灵活。</li>
  <li><strong>调试相对复杂</strong>：在使用 OpenFeign 时，问题调试（例如网络问题、超时等）比手写 HTTP 请求更加抽象，出错时可能需要深入了解 Feign 的工作机制。</li>
  <li><strong>依赖服务注册中心</strong>：在分布式系统中，OpenFeign 通常依赖服务注册中心（如 Eureka、Consul 等）来发现服务实例，因此在服务注册中心出现故障时可能会影响服务调用。</li>
</ol>

<hr />

<p>导入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-openfeign<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>程序入口添加注解：<code class="language-plaintext highlighter-rouge">@EnableFeignClients</code>。</p>

<p>可以配置超时时间：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">feign</span><span class="pi">:</span>
  <span class="na">client</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span>
      <span class="na">default</span><span class="pi">:</span>
        <span class="na">connectTimeout</span><span class="pi">:</span> <span class="m">20000</span> <span class="c1"># feign 的超时设置</span>
        <span class="na">readTimeout</span><span class="pi">:</span> <span class="m">60000</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"domainresourcesservice"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">ResourcesServiceFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ResourcesService</span> <span class="o">{</span>
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span><span class="s">"/resources/rolePersionInfo/savePersionRoleAndGroupV2"</span><span class="o">)</span>
    <span class="nc">Wrapper</span> <span class="nf">savePersionRoleAndGroup</span><span class="o">(</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"persionId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">persionId</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"groupIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">groupIds</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"roleIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">roleIds</span><span class="o">,</span> 
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"jiean_projectName"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">jiean_projectName</span>
    <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意：<strong><code class="language-plaintext highlighter-rouge">@RequestMapping</code> 注解不能直接用于 <code class="language-plaintext highlighter-rouge">@FeignClient</code> 接口</strong>。<code class="language-plaintext highlighter-rouge">FeignClient</code> 接口不允许在类级别使用 <code class="language-plaintext highlighter-rouge">@RequestMapping</code>，应该仅在方法级别使用 <code class="language-plaintext highlighter-rouge">@GetMapping</code>、<code class="language-plaintext highlighter-rouge">@PostMapping</code>、<code class="language-plaintext highlighter-rouge">@RequestParam</code> 等注解来定义 HTTP 请求。</p>

<p>配置类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">feign.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeginConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nc">Logger</span><span class="o">.</span><span class="na">Level</span> <span class="nf">feignLoggerLevel</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">Level</span><span class="o">.</span><span class="na">FULL</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>回滚类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourcesServiceFallBack</span> <span class="kd">implements</span> <span class="nc">ResourcesService</span> <span class="o">{</span>
    <span class="cm">/**
     * 新增人员和角色关系表
     * @param jiean_projectName
     * @param persionId
     * @param groupIds
     * @return
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Wrapper</span> <span class="nf">savePersionRoleAndGroup</span><span class="o">(</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"persionId"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">persionId</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"groupIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">groupIds</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"roleIds"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">roleIds</span><span class="o">,</span>
        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"jiean_projectName"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">jiean_projectName</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">WrapMapper</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="mi">5001</span><span class="o">,</span><span class="s">"Feign 新增人员和角色关系失败"</span><span class="o">);</span>
    <span class="o">}</span>   
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">@FeignClient</code></strong>：用于声明一个 Feign 客户端，并指定该客户端要调用的服务。</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">name = "domainresourcesservice"</code></strong>：指定服务的名称。Feign 会根据这个名称从服务注册中心（如 Consul 或 Eureka）获取服务实例的地址，并发起请求。这个名字应该与注册中心中的服务名一致。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">fallback = ResourcesServiceFallBack.class</code></strong>：指定一个回退类，当远程调用失败时会执行 <code class="language-plaintext highlighter-rouge">ResourcesServiceFallBack</code> 中定义的回退逻辑。回退类通常用于实现熔断或降级功能，以提高服务的稳定性。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">configuration = {FeginConfig.class}</code></strong>：指定 Feign 客户端的配置类 <code class="language-plaintext highlighter-rouge">FeginConfig</code>，该类可以包含自定义的 Feign 配置，如超时时间、编码器、解码器、拦截器等。</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">@RequestMapping</code></strong>：表示这个接口方法对应的 HTTP 请求。<code class="language-plaintext highlighter-rouge">value = "/resources/rolePersionInfo/savePersionRoleAndGroupV2"</code> 表示该方法将发送到路径 <code class="language-plaintext highlighter-rouge">/resources/rolePersionInfo/savePersionRoleAndGroupV2</code> 的请求。</p>

<ul>
  <li>默认情况下，这是一个 <code class="language-plaintext highlighter-rouge">POST</code> 或 <code class="language-plaintext highlighter-rouge">GET</code> 请求（具体取决于 Feign 的配置），可以根据需求指定请求方法。</li>
</ul>

<p>这段代码是一个 Feign 客户端的接口，它用于调用名为 <code class="language-plaintext highlighter-rouge">domainresourcesservice</code> 的微服务下的 <code class="language-plaintext highlighter-rouge">/resources/rolePersionInfo/savePersionRoleAndGroupV2</code> 接口，执行保存某个用户的角色和组信息操作。</p>

<hr />

<p>在使用 Feign 客户端时，有以下几点需要特别注意：</p>

<p><strong>服务名要一致</strong>：<code class="language-plaintext highlighter-rouge">@FeignClient(name = "domainresourcesservice")</code> 中指定的服务名称 <strong><code class="language-plaintext highlighter-rouge">domainresourcesservice</code></strong> 必须与服务注册中心（如 Consul、Eureka）中的服务名称一致。否则，Feign 客户端将无法找到目标服务的实例，导致请求失败。</p>

<p><strong>回退类 <code class="language-plaintext highlighter-rouge">fallback</code></strong>：<code class="language-plaintext highlighter-rouge">fallback = ResourcesServiceFallBack.class</code> 指定了降级处理类，当远程服务不可用或者超时时，Feign 会自动调用回退方法。这有助于增强系统的容错性，防止服务故障蔓延到整个系统。</p>

<ul>
  <li>确保 <code class="language-plaintext highlighter-rouge">ResourcesServiceFallBack</code> 类已经实现了 <code class="language-plaintext highlighter-rouge">ResourcesService</code> 接口，并提供了具体的回退逻辑。</li>
  <li>如果没有正确配置 Hystrix 或 Resilience4j 等熔断器，回退逻辑可能无法生效。</li>
</ul>

<p><strong>请求参数</strong></p>

<ul>
  <li><strong>参数类型</strong>：确保所有参数在远程服务的 API 中是匹配的。这里使用 <code class="language-plaintext highlighter-rouge">@RequestParam</code> 注解，表示参数会被作为查询参数或表单数据传递。对应的远程服务也应该相应处理这些参数。</li>
  <li><strong>参数格式和验证</strong>：确保传递的参数格式正确。例如，<code class="language-plaintext highlighter-rouge">groupIds</code> 和 <code class="language-plaintext highlighter-rouge">roleIds</code> 可能是逗号分隔的字符串。如果后端要求某种特殊格式，确保在调用时传递的值是正确的。</li>
</ul>

<p><strong>自定义配置</strong></p>

<p><strong>Feign 配置 <code class="language-plaintext highlighter-rouge">FeginConfig.class</code></strong>：如果你有自定义的 Feign 配置（如超时设置、重试机制、编码解码器等），确保 <code class="language-plaintext highlighter-rouge">FeginConfig</code> 配置正确，并且 Feign 客户端能够应用这些配置。</p>

<p>比如，可以在 <code class="language-plaintext highlighter-rouge">FeginConfig</code> 中指定连接超时、读取超时等，以防止因网络延迟导致的请求失败。</p>

<p><strong>错误处理</strong></p>

<ul>
  <li><strong>错误响应处理</strong>：<code class="language-plaintext highlighter-rouge">Wrapper</code> 是接口的返回类型，确保你能够处理远程服务可能返回的错误响应。需要检查 <code class="language-plaintext highlighter-rouge">Wrapper</code> 类是否能处理错误码、错误消息等，并且调用方能够正确处理错误。</li>
  <li><strong>异常处理</strong>：Feign 在请求失败时可能抛出各种异常（如 <code class="language-plaintext highlighter-rouge">FeignException</code>、<code class="language-plaintext highlighter-rouge">ConnectException</code> 等），在接口的实现类中应做好异常捕获和处理，避免应用崩溃。</li>
</ul>

<p><strong>日志与调试</strong></p>

<ul>
  <li>
    <p><strong>启用 Feign 日志</strong>：如果需要调试 Feign 请求，可以在配置中启用 Feign 的详细日志功能，查看请求和响应的完整信息。</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">feign:</span>
  <span class="nl">client:</span>
    <span class="nl">config:</span>
      <span class="k">default</span><span class="o">:</span>
        <span class="nl">loggerLevel:</span> <span class="no">FULL</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>这样可以帮助你调试 Feign 请求的问题，尤其是遇到请求失败或响应不符合预期时。</p>
  </li>
</ul>

<p><strong>超时和重试</strong></p>

<ul>
  <li><strong>超时设置</strong>：如果目标服务响应较慢，可能会导致 Feign 请求超时，导致熔断触发。确保 Feign 配置中设置了适当的超时时间，以平衡性能和可用性。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">Request</span><span class="o">.</span><span class="na">Options</span> <span class="nf">feignOptions</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Request</span><span class="o">.</span><span class="na">Options</span><span class="o">(</span><span class="mi">5000</span><span class="o">,</span> <span class="mi">10000</span><span class="o">);</span> <span class="c1">// 连接超时 5 秒，读取超时 10 秒</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>服务健康检查与负载均衡</strong></p>

<ul>
  <li><strong>服务健康检查</strong>：确保目标服务在注册中心是健康的，否则 Feign 会找不到可用的实例。可以定期检查目标服务的健康状态。</li>
  <li><strong>负载均衡</strong>：Feign 通常与 Ribbon 一起使用，支持负载均衡调用多实例服务。确保注册中心中的服务实例都能够被正确负载均衡。</li>
</ul>

<p><strong>版本兼容性</strong></p>

<ul>
  <li><strong>服务接口版本兼容</strong>：远程服务的接口可能会发生变更，因此需要定期检查服务接口是否有变化，确保调用方和提供方之间的接口保持兼容性，尤其是请求参数或返回值格式的变化。</li>
</ul>

<p>确保这些关键点能够帮助你在使用 Feign 客户端时避免常见的错误，并确保系统的健壮性和可扩展性。</p>

<hr />

<p>一个简单的完整实例：</p>

<p>假设服务<code class="language-plaintext highlighter-rouge">A</code>，有如下接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/pi"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductInventoryController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ProductInventoryMapper</span> <span class="n">productInventoryMapper</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">productInventoryMapper</span><span class="o">.</span><span class="na">selectAll</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">productInventoryMapper</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>则服务<code class="language-plaintext highlighter-rouge">B</code>，如果需要调用服务<code class="language-plaintext highlighter-rouge">A</code>的接口，可以这样定义Feign：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"A"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">DemoServiceFeignFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DemoServiceFeign</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/pi/getAll"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">();</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/pi/add"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意<code class="language-plaintext highlighter-rouge">ProductInventory</code>类结构要保持一致。</p>

<p>然后可以这样调用Feign：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/feign"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignTestController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">DemoServiceFeign</span> <span class="n">demoServiceFeign</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">getAllUsers</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果不希望在服务 <code class="language-plaintext highlighter-rouge">B</code> 中创建 <code class="language-plaintext highlighter-rouge">ProductInventory</code> 类，可以使用 <code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt;</code> 或 <code class="language-plaintext highlighter-rouge">JSONObject</code> 来代替对象传递数据。这样，<code class="language-plaintext highlighter-rouge">Feign</code> 接口可以通过动态对象来进行调用。</p>

<p>修改后的 Feign 接口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"A"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">DemoServiceFeignFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">configuration</span> <span class="o">=</span> <span class="o">{</span><span class="nc">FeginConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DemoServiceFeign</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/pi/getAll"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllUsers</span><span class="o">();</span>  <span class="c1">// 使用 Map 代替 ProductInventory</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/pi/add"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">productInventory</span><span class="o">);</span>  <span class="c1">// 使用 Map 传递数据</span>
<span class="o">}</span>
</code></pre></div></div>

<p>修改后的调用方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/feign"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignTestController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">DemoServiceFeign</span> <span class="n">demoServiceFeign</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/getAll"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">getAllUsers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">getAllUsers</span><span class="o">();</span>  <span class="c1">// 获取 Map 类型的结果</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/add"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">productInventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">demoServiceFeign</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">productInventory</span><span class="o">);</span>  <span class="c1">// 传递 Map 类型的数据</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>优点</strong>：避免了在服务 <code class="language-plaintext highlighter-rouge">B</code> 中定义 <code class="language-plaintext highlighter-rouge">ProductInventory</code> 类。</p>

<p><strong>缺点</strong>：使用 <code class="language-plaintext highlighter-rouge">Map</code> 或 <code class="language-plaintext highlighter-rouge">JSONObject</code> 使代码的类型检查变得不那么严格，容易出错，并且不如直接使用实体类那么清晰和安全。</p>

<h2 id="批量带header">批量带<code class="language-plaintext highlighter-rouge">Header</code></h2>

<p>要在Feign调用中为所有的方法添加多个header，可以使用 <code class="language-plaintext highlighter-rouge">RequestInterceptor</code>。下面是如何实现的步骤：</p>

<ol>
  <li><strong>创建一个RequestInterceptor</strong>：</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">feign.RequestInterceptor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">feign.RequestTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RequestInterceptor</span> <span class="nf">requestInterceptor</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">RequestInterceptor</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="nc">RequestTemplate</span> <span class="n">template</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">template</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Header-Name-1"</span><span class="o">,</span> <span class="s">"HeaderValue1"</span><span class="o">);</span>
                <span class="n">template</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Header-Name-2"</span><span class="o">,</span> <span class="s">"HeaderValue2"</span><span class="o">);</span>
                <span class="n">template</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Header-Name-3"</span><span class="o">,</span> <span class="s">"HeaderValue3"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li><strong>在FeignClient中引用FeignConfig</strong>：</li>
</ol>

<p>确保在你的 <code class="language-plaintext highlighter-rouge">@FeignClient</code> 注解中引入配置类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"demo-service"</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="nc">DemoServiceFeignFallBack</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">configuration</span> <span class="o">=</span> <span class="nc">FeignConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DemoServiceFeign</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/pi/getAll"</span><span class="o">)</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ProductInventory</span><span class="o">&gt;</span> <span class="nf">getAllUsers</span><span class="o">();</span>
    
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/pi/add"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">ProductInventory</span> <span class="n">productInventory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通过这种方式，所有的Feign调用将自动带上你在 <code class="language-plaintext highlighter-rouge">RequestInterceptor</code> 中定义的header。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Git的拆分与删除</title><link href="/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4/" rel="alternate" type="text/html" title="Git的拆分与删除" /><published>2024-09-18T00:00:00+08:00</published><updated>2024-09-18T00:00:00+08:00</updated><id>/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4</id><content type="html" xml:base="/2024/09/18/git%E7%9A%84%E6%8B%86%E5%88%86%E4%B8%8E%E5%88%A0%E9%99%A4/"><![CDATA[<h1 id="引言">引言</h1>
<p>拆分仓库可以减少单个仓库的体积，提高开发效率。Git 仓库的历史记录会随着项目的发展而膨胀。拆分仓库有助于删除不必要的历史记录，只保留当前需要的部分，减少仓库的冗余数据。对于删除来说也是如此，在全部的提交中删除不需要的文件或文件夹可以减少仓库的体积。</p>

<h1 id="git">Git</h1>

<h2 id="拆分">拆分</h2>

<p>要将某个文件夹或文件单独生成一个 Git 仓库，并保留其历史记录，可以使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 简单的完成。</p>

<p>要安装<code class="language-plaintext highlighter-rouge">git-fiter-repo</code>，对于环境有如下依赖：</p>

<ul>
  <li>git &gt;= 2.22.0 ；对于某些功能需要 git &gt;= 2.24.0</li>
  <li>python3 &gt;= 3.6</li>
</ul>

<p>然后运行<code class="language-plaintext highlighter-rouge">pip install git-filter-repo</code> 即可，要验证是否安装成功，可以执行：<code class="language-plaintext highlighter-rouge">git filter-repo --version</code>。</p>

<hr />

<p>首先，克隆或者复制包含该文件/文件夹的原始仓库，然后使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 命令，就可以提取目标文件夹或文件，并移除其他无关内容了。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> <span class="o">[</span>&lt;folder-name&gt;|&lt;file-name&gt;]
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--path &lt;folder-name&gt;</code> 或 <code class="language-plaintext highlighter-rouge">--path &lt;file-name&gt;</code>：这个参数指定你要保留的路径。这个命令将只保留该路径中的文件，删除仓库中的其他所有内容。</li>
</ul>

<p>例如，要提取名为 <code class="language-plaintext highlighter-rouge">src</code> 的文件夹，可以运行：<code class="language-plaintext highlighter-rouge">git filter-repo --path src</code>如果提取单个文件，比如 <code class="language-plaintext highlighter-rouge">README.md</code>：<code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code></p>

<p>执行 <code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code> 后，Git 仓库将会只保留 <code class="language-plaintext highlighter-rouge">README.md</code> 文件及其所有历史记录，其他的文件和文件夹（及其对应的提交历史）将会被<strong>完全移除</strong>，包括：</p>

<p><strong>历史记录过滤</strong>：Git 会过滤所有提交记录，只保留那些与 <code class="language-plaintext highlighter-rouge">README.md</code> 文件相关的提交。任何与其他文件或文件夹相关的提交都会被删除。</p>

<p><strong>仓库内容变化</strong>：</p>

<ul>
  <li><strong>保留的文件</strong>：最终的仓库中只会包含 <code class="language-plaintext highlighter-rouge">README.md</code> 文件，且这个文件的所有历史记录都会保留在提交历史中。</li>
  <li><strong>移除的文件和文件夹</strong>：所有其他文件和文件夹会从仓库的所有历史版本中完全消失，不再存在于提交记录中。</li>
</ul>

<p><strong>提交历史</strong>：</p>

<ul>
  <li>仓库中的提交历史会被重新写入，只有那些影响 <code class="language-plaintext highlighter-rouge">README.md</code> 文件的提交会保留，其他提交记录（与其他文件相关的提交）将被丢弃。</li>
</ul>

<p><strong>其他分支和标签</strong>：</p>

<ul>
  <li>这些过滤操作会影响所有的分支和标签。它会对整个仓库的历史进行重写。因此，在其他分支和标签中，只有 <code class="language-plaintext highlighter-rouge">README.md</code> 及其相关的提交会保留。</li>
</ul>

<p>假设有如下仓库结构：</p>

<pre><code class="language-ascii">repo/
├── README.md
├── src/
│   └── main.java
└── docs/
    └── guide.md
</code></pre>
<p>并且有以下提交历史：</p>
<ol>
  <li>创建 <code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li>添加 <code class="language-plaintext highlighter-rouge">src/main.java</code></li>
  <li>修改 <code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li>添加 <code class="language-plaintext highlighter-rouge">docs/guide.md</code></li>
</ol>

<p>当执行 <code class="language-plaintext highlighter-rouge">git filter-repo --path README.md</code> 后：</p>
<ul>
  <li>仓库中<strong>只会保留</strong> <code class="language-plaintext highlighter-rouge">README.md</code> 文件。</li>
  <li>提交历史中<strong>只保留</strong>涉及 <code class="language-plaintext highlighter-rouge">README.md</code> 的提交（即提交 1 和 3），其他提交（例如 2 和 4）会被删除。</li>
  <li><code class="language-plaintext highlighter-rouge">src/</code> 和 <code class="language-plaintext highlighter-rouge">docs/</code> 文件夹及其内容（如 <code class="language-plaintext highlighter-rouge">main.java</code> 和 <code class="language-plaintext highlighter-rouge">guide.md</code>）将从仓库的所有历史版本中被<strong>完全移除</strong>，就像它们从未存在过一样。</li>
</ul>

<hr />

<p><strong>保留多个文件或文件夹</strong></p>

<p>在使用 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 时，如果想保留多个文件或文件夹的历史记录，可以通过 <code class="language-plaintext highlighter-rouge">--path</code> 参数指定多个路径。<code class="language-plaintext highlighter-rouge">git filter-repo</code> 支持同时保留多个文件或文件夹的历史。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> &lt;path1&gt; <span class="nt">--path</span> &lt;path2&gt; <span class="nt">--path</span> &lt;path3&gt; ...
</code></pre></div></div>

<p>假设仓库结构如下：</p>
<pre><code class="language-ascii">repo/
├── README.md
├── src/
│   ├── main.java
│   └── utils.java
└── docs/
    └── guide.md
</code></pre>

<p>需要保留以下文件和文件夹：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">README.md</code></li>
  <li><code class="language-plaintext highlighter-rouge">src/</code> 文件夹</li>
  <li><code class="language-plaintext highlighter-rouge">docs/guide.md</code></li>
</ul>

<p>可以执行以下命令：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> README.md <span class="nt">--path</span> src <span class="nt">--path</span> docs/guide.md
</code></pre></div></div>

<p>保留子文件夹：</p>

<p>也可以只保留某个子文件夹内的部分内容，例如只保留 <code class="language-plaintext highlighter-rouge">src/utils.java</code> 而不是整个 <code class="language-plaintext highlighter-rouge">src</code> 文件夹。命令如下：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> src/utils.java
</code></pre></div></div>

<p>注意事项：</p>
<ul>
  <li>
    <p>如果要保留的文件路径很多，建议提前备份仓库，因为 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 会直接修改历史记录。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">git filter-repo</code> 操作会影响所有分支和标签，所以操作之前需要明确想要保留的内容。</p>
  </li>
</ul>

<h2 id="删除">删除</h2>

<p>要在全部的提交中删除某个文件或者文件夹，可以使用如下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git filter-repo <span class="nt">--path</span> <span class="o">[</span>&lt;folder-name&gt;|&lt;file-name&gt;] <span class="nt">--invert-paths</span> <span class="nt">--force</span>
</code></pre></div></div>

<p>参数解释：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--path &lt;folder-name&gt; | &lt;file-name&gt;</code>：指定要操作的文件夹或文件路径。如果是文件夹，请使用 <code class="language-plaintext highlighter-rouge">/</code> 结尾，如 <code class="language-plaintext highlighter-rouge">logs/</code>。如果是文件，提供完整路径如 <code class="language-plaintext highlighter-rouge">config/secret.txt</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">--invert-paths</code>：该参数表示反转路径过滤，意思是删除指定的路径及其历史，而保留其他所有内容。没有 <code class="language-plaintext highlighter-rouge">--invert-paths</code> 则会保留指定的路径并删除其他内容。</li>
  <li><code class="language-plaintext highlighter-rouge">--force</code>：在某些情况下，如果运行 <code class="language-plaintext highlighter-rouge">git filter-repo</code> 后尝试再次运行时，Git 可能会警告已经处理过一次了。<code class="language-plaintext highlighter-rouge">--force</code> 选项允许你在这些情况下强制执行命令。</li>
</ul>

<p>这会<strong>永久性地修改历史记录</strong>，所有历史中的该文件或文件夹将被彻底移除，因此其他开发人员也需要强制更新他们的本地仓库。</p>

<hr />

<p>如果已经把仓库推送到远程，删除了本地的文件历史后，必须强制推送历史变更：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin <span class="nt">--force</span> <span class="nt">--all</span>
git push origin <span class="nt">--force</span> <span class="nt">--tags</span>
</code></pre></div></div>

<p>如果需要清理已经被删除的文件的本地缓存，可以运行以下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> .git/refs/original/
git reflog expire <span class="nt">--expire</span><span class="o">=</span>now <span class="nt">--all</span>
git gc <span class="nt">--prune</span><span class="o">=</span>now <span class="nt">--aggressive</span>
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="Git" /><summary type="html"><![CDATA[Git的拆分与删除]]></summary></entry><entry><title type="html">Charles证书更新</title><link href="/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0/" rel="alternate" type="text/html" title="Charles证书更新" /><published>2024-09-06T00:00:00+08:00</published><updated>2024-09-06T00:00:00+08:00</updated><id>/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0</id><content type="html" xml:base="/2024/09/06/Charles%E8%AF%81%E4%B9%A6%E6%9B%B4%E6%96%B0/"><![CDATA[<h1 id="引言">引言</h1>
<p>在某一天，正要抓包时，一直出现：</p>

<p><code class="language-plaintext highlighter-rouge">SSL handshake with client failed: When access control was applied the certificate was rejected (access_denied)</code></p>

<p>这就是证书失效了。</p>

<h1 id="详解">详解</h1>

<p>要解决这个问题，非常简单，首先要卸载失效的证书，有几种方式进入证书管理：</p>

<ul>
  <li>win+R：<code class="language-plaintext highlighter-rouge">Certmgr.msc</code>，这个是当前用户的证书。</li>
  <li>按一次win，输入<code class="language-plaintext highlighter-rouge">cer</code>，可以看到一个<code class="language-plaintext highlighter-rouge">管理计算机证书</code>，这个就是管理应用于全部用户证书。</li>
  <li>同上，还可以看到一个<code class="language-plaintext highlighter-rouge">管理用户证书</code>，这是当前用户的证书。</li>
</ul>

<p>通过哪种方式进入都可以，但这两个地方是不同的，可以都找找，侧栏点击一下最上面的<code class="language-plaintext highlighter-rouge">证书-本地计算机</code>，然后点击操作-查找证书-输入<code class="language-plaintext highlighter-rouge">Charles</code>，然后开始查找，找到的都删除，用户证书同理。</p>

<p>卸载完失效的证书后，在<code class="language-plaintext highlighter-rouge">Charles</code>里生成新的证书，<code class="language-plaintext highlighter-rouge">Help</code>-<code class="language-plaintext highlighter-rouge">SSL Proxying</code>-<code class="language-plaintext highlighter-rouge">Reset Charles Root Certificate...</code>，然后重新安装证书：<code class="language-plaintext highlighter-rouge">Help</code>-<code class="language-plaintext highlighter-rouge">SSL Proxying</code>-<code class="language-plaintext highlighter-rouge">Install Charles Root Certificate</code>-<code class="language-plaintext highlighter-rouge">安装证书...</code>-选<code class="language-plaintext highlighter-rouge">当前用户</code>即可-<code class="language-plaintext highlighter-rouge">下一步</code>-<code class="language-plaintext highlighter-rouge">将所有的证书都放入下列存储</code>-<code class="language-plaintext highlighter-rouge">浏览...</code>-<code class="language-plaintext highlighter-rouge">选择受信任的根证书颁发机构</code>-<code class="language-plaintext highlighter-rouge">确定</code>-<code class="language-plaintext highlighter-rouge">下一步</code>-<code class="language-plaintext highlighter-rouge">完成</code>-若有警告点击确认。</p>

<p>这样就完成了证书的更新操作，重启<code class="language-plaintext highlighter-rouge">Charles</code>后即可恢复正常。</p>]]></content><author><name>acteds</name></author><category term="Android" /><summary type="html"><![CDATA[Charles证书更新]]></summary></entry><entry><title type="html">Spring Cloud</title><link href="/2024/08/26/Spring-Clud/" rel="alternate" type="text/html" title="Spring Cloud" /><published>2024-08-26T00:00:00+08:00</published><updated>2024-08-26T00:00:00+08:00</updated><id>/2024/08/26/Spring%20Clud</id><content type="html" xml:base="/2024/08/26/Spring-Clud/"><![CDATA[<h1 id="引言">引言</h1>
<p>Spring Clud笔记。</p>

<h1 id="spring-cloud">Spring Cloud</h1>

<p>为了简化版本和依赖管理，用<code class="language-plaintext highlighter-rouge">parent</code>模块管理最基础的<code class="language-plaintext highlighter-rouge">pom.xml</code>，其他模块直接从<code class="language-plaintext highlighter-rouge">parent</code>继承，能大大简化各自的<code class="language-plaintext highlighter-rouge">pom.xml</code>。<code class="language-plaintext highlighter-rouge">parent</code>模块<code class="language-plaintext highlighter-rouge">pom.xml</code>内容如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>
<span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>parent<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>

    <span class="c">&lt;!-- 继承自SpringBoot Starter Parent --&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="c">&lt;!-- SpringBoot版本 --&gt;</span>
        <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>

    <span class="nt">&lt;properties&gt;</span>
        <span class="c">&lt;!-- 项目版本 --&gt;</span>
        <span class="nt">&lt;project.version&gt;</span>1.0<span class="nt">&lt;/project.version&gt;</span>
        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
        <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>

        <span class="c">&lt;!-- Java编译和运行版本 --&gt;</span>
        <span class="nt">&lt;maven.compiler.source&gt;</span>17<span class="nt">&lt;/maven.compiler.source&gt;</span>
        <span class="nt">&lt;maven.compiler.target&gt;</span>17<span class="nt">&lt;/maven.compiler.target&gt;</span>
        <span class="nt">&lt;java.version&gt;</span>17<span class="nt">&lt;/java.version&gt;</span>

        <span class="c">&lt;!-- 定义第三方组件的版本 --&gt;</span>
        <span class="nt">&lt;pebble.version&gt;</span>3.2.0<span class="nt">&lt;/pebble.version&gt;</span>
        <span class="nt">&lt;springcloud.version&gt;</span>2022.0.0<span class="nt">&lt;/springcloud.version&gt;</span>
        <span class="nt">&lt;springdoc.version&gt;</span>2.0.0<span class="nt">&lt;/springdoc.version&gt;</span>
        <span class="nt">&lt;vertx.version&gt;</span>4.3.1<span class="nt">&lt;/vertx.version&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>

    <span class="c">&lt;!-- 引入SpringCloud依赖 --&gt;</span>
    <span class="nt">&lt;dependencyManagement&gt;</span>
        <span class="nt">&lt;dependencies&gt;</span>
            <span class="nt">&lt;dependency&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;version&gt;</span>${springcloud.version}<span class="nt">&lt;/version&gt;</span>
                <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
                <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
            <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;/dependencies&gt;</span>
    <span class="nt">&lt;/dependencyManagement&gt;</span>

    <span class="c">&lt;!-- 共享的依赖管理 --&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
        <span class="c">&lt;!-- 依赖JUnit5 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-api<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-params<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-engine<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="c">&lt;!-- 依赖SpringTest --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>

    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;pluginManagement&gt;</span>
            <span class="nt">&lt;plugins&gt;</span>
                <span class="c">&lt;!-- 引入创建可执行Jar的插件 --&gt;</span>
                <span class="nt">&lt;plugin&gt;</span>
                    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                    <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;/plugin&gt;</span>
            <span class="nt">&lt;/plugins&gt;</span>
        <span class="nt">&lt;/pluginManagement&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>上述<code class="language-plaintext highlighter-rouge">pom.xml</code>中，除了写死的Spring Boot版本、Java运行版本、项目版本外，其他引入的版本均以<code class="language-plaintext highlighter-rouge">&lt;xxx.version&gt;1.23&lt;/xxx.version&gt;</code>的形式定义，以便后续可以用<code class="language-plaintext highlighter-rouge">${xxx.version}</code>引用版本号，避免了同一个组件出现多个写死的版本定义。</p>

<p>对其他业务模块，引入<code class="language-plaintext highlighter-rouge">parent</code>的<code class="language-plaintext highlighter-rouge">pom.xml</code>可大大简化配置。以<code class="language-plaintext highlighter-rouge">ui</code>模块为例，其<code class="language-plaintext highlighter-rouge">pom.xml</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>
<span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="c">&lt;!-- 指定Parent --&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
        <span class="c">&lt;!-- Parent POM的相对路径 --&gt;</span>
        <span class="nt">&lt;relativePath&gt;</span>../parent/pom.xml<span class="nt">&lt;/relativePath&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>

    <span class="c">&lt;!-- 当前模块名称 --&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>ui<span class="nt">&lt;/artifactId&gt;</span>

    <span class="nt">&lt;dependencies&gt;</span>
        <span class="c">&lt;!-- 依赖SpringCloud Config客户端 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖SpringBoot Actuator --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖Common模块 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>common<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>${project.version}<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="c">&lt;!-- 依赖第三方模块 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>pebble-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>${pebble.version}<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>

    <span class="nt">&lt;build&gt;</span>
        <span class="c">&lt;!-- 指定输出文件名 --&gt;</span>
        <span class="nt">&lt;finalName&gt;</span>${project.artifactId}<span class="nt">&lt;/finalName&gt;</span>
        <span class="c">&lt;!-- 创建SpringBoot可执行jar --&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">parent</code>的<code class="language-plaintext highlighter-rouge">pom.xml</code>中引入了Spring Cloud的依赖管理，因此，无需指定相关组件的版本。只有自己编写的组件和未在Spring Boot和Spring Cloud中引入的组件，才需要指定版本。</p>

<p>还需要一个<code class="language-plaintext highlighter-rouge">build</code>模块，把所有模块放到一起编译。建立<code class="language-plaintext highlighter-rouge">build</code>文件夹并创建<code class="language-plaintext highlighter-rouge">pom.xml</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
    <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0
    http://maven.apache.org/maven-v4_0_0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.test<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>build<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
    <span class="nt">&lt;name&gt;</span>Warp Exchange<span class="nt">&lt;/name&gt;</span>

    <span class="c">&lt;!-- 按相对路径列出所有模块 --&gt;</span>
    <span class="nt">&lt;modules&gt;</span>
        <span class="nt">&lt;module&gt;</span>../common<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../config<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../parent<span class="nt">&lt;/module&gt;</span>
        <span class="nt">&lt;module&gt;</span>../ui<span class="nt">&lt;/module&gt;</span>
    <span class="nt">&lt;/modules&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>还需要创建目录<code class="language-plaintext highlighter-rouge">config-repo</code>来存储Spring Cloud Config服务器端的配置文件。</p>

<p>最后，将所有模块导入IDE，可正常开发、编译、运行。如果要在命令行模式下运行，进入<code class="language-plaintext highlighter-rouge">build</code>文件夹使用Maven编译即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn clean package
</code></pre></div></div>

<hr />

<p><strong>本地开发环境</strong></p>

<p>在本地开发时，需要经常调试代码。除了安装JDK，选择一个IDE外，还需要在本地运行MySQL、Redis、Kafka，以及Kafka依赖的ZooKeeper服务。</p>

<p>可以使用<a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>来运行这些基础服务，需要在<code class="language-plaintext highlighter-rouge">build</code>目录下编写一个<code class="language-plaintext highlighter-rouge">docker-compose.yml</code>文件定义要运行的所有服务：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">zookeeper</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/zookeeper:3.5</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">zookeeper</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">2181:2181"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ALLOW_ANONYMOUS_LOGIN=yes</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/zookeeper-data:/bitnami"</span>

  <span class="na">kafka</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/kafka:3.0</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">kafka</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9092:9092"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">zookeeper</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">KAFKA_BROKER_ID=1</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span>
      <span class="pi">-</span> <span class="s">KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true</span>
      <span class="pi">-</span> <span class="s">ALLOW_PLAINTEXT_LISTENER=yes</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/kafka-data:/bitnami"</span>

  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">redis:6.2</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">redis</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">6379:6379"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/redis-data:/data"</span>

  <span class="na">mysql</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">--default-authentication-plugin=mysql_native_password</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_ROOT_PASSWORD=password</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./sql/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql:ro"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">./docker/mysql-data:/var/lib/mysql"</span>
</code></pre></div></div>

<p>在上述<code class="language-plaintext highlighter-rouge">docker-compose.yml</code>文件中，定义了MySQL、Redis、Kafka以及Kafka依赖的ZooKeeper服务，各服务均暴露标准端口，且MySQL的<code class="language-plaintext highlighter-rouge">root</code>口令设置为<code class="language-plaintext highlighter-rouge">password</code>，第一次启动MySQL时，使用<code class="language-plaintext highlighter-rouge">sql/schema.sql</code>文件初始化数据库表结构。所有数据盘均挂载到<code class="language-plaintext highlighter-rouge">build</code>目录下的<code class="language-plaintext highlighter-rouge">docker</code>目录。</p>

<p>在<code class="language-plaintext highlighter-rouge">build</code>目录下运行<code class="language-plaintext highlighter-rouge">docker-compose up -d</code>即可启动容器：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>build $ docker-compose up -d
Creating network "build_default" with the default driver
Creating zookeeper ... done
Creating mysql     ... done
Creating redis     ... done
Creating kafka     ... done
</code></pre></div></div>

<p>在Docker Desktop中也可看到运行状态。</p>

<p>如果要删除开发环境的所有数据，首先停止运行Docker容器进程并删除，然后删除<code class="language-plaintext highlighter-rouge">build</code>目录下的<code class="language-plaintext highlighter-rouge">docker</code>目录，重新运行<code class="language-plaintext highlighter-rouge">docker-compose</code>即可。</p>

<h2 id="spring-cloud-config">Spring Cloud Config</h2>

<p>Spring Cloud Config是Spring Cloud的一个子项目，它的主要目的是解决多个Spring Boot应用启动时，应该如何读取配置文件的问题。</p>

<p>对于单体应用，即一个独立的Spring Boot应用，我们会把配置写在<code class="language-plaintext highlighter-rouge">application.yml</code>文件中。如果配置需要针对多个环境，可以用<code class="language-plaintext highlighter-rouge">---</code>分隔并标注好环境：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># application.yml</span>
<span class="c1"># 通用配置:</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost/test</span>

<span class="nn">---</span>

<span class="c1"># test profile:</span>
<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://172.16.0.100/test</span>
</code></pre></div></div>

<p>这种配置方式针对单个Spring Boot应用是可行的，但是，针对分布式应用，有多个Spring Boot应用需要启动时，分散在各个应用中的配置既不便于管理，也不便于复用相同的配置。</p>

<p>Spring Cloud Config提供了一个通用的分布式应用的配置解决方案。它把配置分为两部分：</p>

<ul>
  <li>Config Server：配置服务器，负责读取所有配置；</li>
  <li>Config Client：嵌入到各个Spring Boot应用中，<strong>本地无配置信息</strong>，启动时向服务器请求配置。</li>
</ul>

<p>要搭建一个Spring Cloud Config Server，即配置服务器，首先，在<code class="language-plaintext highlighter-rouge">config</code>模块中引入<code class="language-plaintext highlighter-rouge">spring-cloud-config-server</code>依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-config-server<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后，编写一个<code class="language-plaintext highlighter-rouge">ConfigApplication</code>入口，标注<code class="language-plaintext highlighter-rouge">@EnableConfigServer</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableConfigServer</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfigApplication</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">ConfigApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>最后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中设置如何搜索配置。Spring Cloud Config支持多种配置方式，包括从本地文件、Git仓库、数据库等多个地方读取配置。这里选择以本地文件的方式读取配置文件，这也是最简单的一种配置方式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 配置服务器的端口，通常设置为8888:</span>
<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8888</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">config-server</span>
  <span class="na">profiles</span><span class="pi">:</span>
    <span class="c1"># 从文件读取配置时，Config Server激活的profile必须设定为native:</span>
    <span class="na">active</span><span class="pi">:</span> <span class="s">native</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span>
      <span class="na">server</span><span class="pi">:</span>
        <span class="na">native</span><span class="pi">:</span>
          <span class="c1"># 设置配置文件的搜索路径:</span>
          <span class="na">search-locations</span><span class="pi">:</span> <span class="s">file:./config-repo, file:../config-repo, file:../../config-repo</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">config-repo</code>目录下，存放的就是一系列配置文件：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config-repo/
├── application-default.yml
├── application-test.yml
├── application.yml
├── push.yml
├── quotation.yml
├── trading-api.yml
├── trading-engine.yml
├── trading-sequencer.yml
├── ui-default.yml
└── ui.yml
</code></pre></div></div>

<p>至此，配置服务器就完成了，直接运行<code class="language-plaintext highlighter-rouge">ConfigApplication</code>即可启动配置服务器。在开发过程中，保持配置服务器在后台运行即可。</p>

<p>接下来，对于每个负责业务的Spring Boot应用，需要从Spring Cloud Config Server读取配置。读取配置并不是说本地零配置，还是需要一点基础配置信息。以<code class="language-plaintext highlighter-rouge">ui</code>项目为例，编写<code class="language-plaintext highlighter-rouge">application.yml</code>如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="c1"># 设置app名称:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">ui</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="c1"># 导入Config Server地址:</span>
    <span class="na">import</span><span class="pi">:</span> <span class="s">configserver:${CONFIG_SERVER:http://localhost:8888}</span>
</code></pre></div></div>

<p>上述默认的Config Server配置为<code class="language-plaintext highlighter-rouge">http://localhost:8888</code>，也可以通过环境变量指定Config Server的地址。</p>

<p>下一步是在<code class="language-plaintext highlighter-rouge">ui</code>模块的<code class="language-plaintext highlighter-rouge">pom.xml</code>中添加依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>接下来正常启动<code class="language-plaintext highlighter-rouge">UIApplication</code>，该应用就会自动从Config Server读取配置。由于指定了应用的名称是<code class="language-plaintext highlighter-rouge">ui</code>，且默认的<code class="language-plaintext highlighter-rouge">profile</code>是<code class="language-plaintext highlighter-rouge">default</code>，因此，Config Server将返回以下4个配置文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ui-default.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-default.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">ui.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>前面的配置文件优先级较高，后面的配置文件优先级较低。如果出现相同的配置项，则在优先级高的配置生效。</p>

<p>可以在浏览器访问<code class="language-plaintext highlighter-rouge">http://localhost:8888/ui/default</code>看到Config Server返回的配置，它是一个JSON文件：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ui"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"profiles"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"default"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"state"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"propertySources"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/ui-default.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/application-default.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/ui.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"file:../config-repo/application.yml"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>如果启动<code class="language-plaintext highlighter-rouge">UIApplication</code>时传入<code class="language-plaintext highlighter-rouge">SPRING_PROFILES_ACTIVE=test</code>，将profile设置为<code class="language-plaintext highlighter-rouge">test</code>，则Config Server返回的文件如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ui-test.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-test.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">ui.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>可以通过<code class="language-plaintext highlighter-rouge">http://localhost:8888/ui/test</code>查看返回的配置。由于文件<code class="language-plaintext highlighter-rouge">ui-test.yml</code>不存在，因此，实际配置由3个文件合并而成。</p>

<p>可以很容易地看到，一个Spring Boot应用在启动时，首先要设置自己的<code class="language-plaintext highlighter-rouge">name</code>并导入Config Server的URL，再根据当前活动的<code class="language-plaintext highlighter-rouge">profile</code>，由Config Server返回多个配置文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">{name}-{profile}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application-{profile}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">{name}.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p>其中，<code class="language-plaintext highlighter-rouge">{name}-{xxx}.yml</code>是针对某个应用+某个<code class="language-plaintext highlighter-rouge">profile</code>的特定配置，<code class="language-plaintext highlighter-rouge">{name}.yml</code>是针对某个应用+所有profile的配置，<code class="language-plaintext highlighter-rouge">application-{profile}.yml</code>是针对某个<code class="language-plaintext highlighter-rouge">profile</code>的全局配置，<code class="language-plaintext highlighter-rouge">application.yml</code>是所有应用的全局配置。搭配各种配置文件就可以灵活组合配置。一般来说，全局默认的配置放在<code class="language-plaintext highlighter-rouge">application.yml</code>中，例如数据库连接：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost/test</span>
</code></pre></div></div>

<p>这样保证了默认连接到本地数据库，在生产环境中会直接报错而不是连接到错误的数据库。</p>

<p>在生产环境，例如<code class="language-plaintext highlighter-rouge">profile</code>设置为<code class="language-plaintext highlighter-rouge">prod</code>，则可以将数据库连接写在<code class="language-plaintext highlighter-rouge">application-prod.yml</code>中，使得所有生产环境的应用读取到的数据库连接是一致的：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://172.16.0.100/prod_db</span>
</code></pre></div></div>

<p>某个应用自己特定的配置则应当放到<code class="language-plaintext highlighter-rouge">{name}.yml</code>和<code class="language-plaintext highlighter-rouge">{name}-{profile}.yml</code>中。</p>

<p>在设置好各个配置文件后，应当通过浏览器检查Config Server返回的配置是否符合预期。</p>

<p>Spring Cloud Config还支持配置多个profile，以及从加密的配置源读取配置等。如果遇到更复杂的需求，可参考<a href="https://spring.io/projects/spring-cloud-config#learn">Spring Cloud Config的文档</a>。</p>

<h2 id="consul">consul</h2>

<p>Consul 是一个开源的服务发现和配置管理工具，由 HashiCorp 开发。它主要用于微服务架构中，提供服务注册、服务发现、健康检查和配置管理等功能。Consul 的主要特点包括：</p>

<ol>
  <li><strong>服务发现</strong></li>
</ol>

<p>Consul 允许服务在集群中进行注册和发现。服务可以向 Consul 注册其网络地址和其他元数据，其他服务可以通过查询 Consul 来找到这些服务。这样，服务间的通信就不再依赖硬编码的地址，而是通过 Consul 的服务发现功能进行动态定位。</p>

<ol>
  <li><strong>健康检查</strong></li>
</ol>

<p>Consul 提供了内置的健康检查机制，确保注册的服务实例处于健康状态。Consul 可以定期执行 HTTP、TCP、或者自定义命令的健康检查，并根据检查结果决定是否将服务实例从服务列表中移除。这样可以确保负载均衡器只将请求发送到健康的服务实例。</p>

<ol>
  <li><strong>服务注册和注销</strong></li>
</ol>

<p>服务可以在启动时向 Consul 注册自己，并在关闭时注销自己。Consul 维护一个最新的服务列表，并自动更新服务的状态。服务注册可以包括服务的元数据，如版本号、环境等信息。</p>

<ol>
  <li><strong>配置管理</strong></li>
</ol>

<p>Consul 提供了一个键值存储系统，允许应用程序存储和读取配置数据。配置可以被组织成层次结构，并且支持动态更新。应用程序可以在运行时从 Consul 中读取配置，并在配置变更时进行调整。</p>

<ol>
  <li><strong>多数据中心支持</strong></li>
</ol>

<p>Consul 支持跨数据中心的服务发现和配置管理，允许在多个地理位置的数据中心中运行 Consul 实例，并进行数据同步。这使得跨地域的微服务架构可以更容易地进行管理。</p>

<ol>
  <li><strong>安全性</strong></li>
</ol>

<p>Consul 提供了安全特性，如访问控制、加密和身份验证。它支持使用 TLS 对服务之间的通信进行加密，并允许通过 ACL（访问控制列表）来控制对 Consul 数据的访问权限。</p>

<hr />

<p>以下是如何在 Spring Boot 应用程序中使用 Consul 进行服务发现的基本步骤：</p>

<p><strong>添加依赖</strong></p>

<p>在 <code class="language-plaintext highlighter-rouge">pom.xml</code> 文件中添加 Consul 相关的依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-consul-discovery<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><strong>配置 Consul</strong></p>

<p>在 <code class="language-plaintext highlighter-rouge">application.yml</code> 文件中配置 Consul 相关的设置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">cloud</span><span class="pi">:</span>
    <span class="na">consul</span><span class="pi">:</span>
      <span class="na">host</span><span class="pi">:</span> <span class="s">127.0.0.1</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">8500</span>
      <span class="na">discovery</span><span class="pi">:</span>
        <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">service-name</span><span class="pi">:</span> <span class="s">my-service</span>
</code></pre></div></div>

<p><strong>使用 Consul 进行服务发现</strong></p>

<p>在应用程序中，可以使用 <code class="language-plaintext highlighter-rouge">@LoadBalanced</code> 注解和 <code class="language-plaintext highlighter-rouge">RestTemplate</code> 进行服务发现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="nd">@LoadBalanced</span>
    <span class="kd">public</span> <span class="nc">RestTemplate</span> <span class="nf">restTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">RestTemplate</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/call-service"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">callService</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 使用服务名称进行调用</span>
        <span class="k">return</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForObject</span><span class="o">(</span><span class="s">"http://my-service/some-endpoint"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>相关命令</strong></p>

<p>启动 Consul 服务器（开发模式）：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul agent <span class="nt">-dev</span>
</code></pre></div></div>

<p>注册一个服务到 Consul：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"service"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-service"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"primary"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">8080</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul services register service.json
</code></pre></div></div>

<p>查询服务：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>consul catalog services
</code></pre></div></div>

<p>Consul 提供了一整套解决方案来管理微服务的生命周期和配置，使得微服务架构的管理变得更加高效和可靠。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">Spring Boot</title><link href="/2024/07/09/Spring-Boot/" rel="alternate" type="text/html" title="Spring Boot" /><published>2024-07-09T00:00:00+08:00</published><updated>2024-07-09T00:00:00+08:00</updated><id>/2024/07/09/Spring%20Boot</id><content type="html" xml:base="/2024/07/09/Spring-Boot/"><![CDATA[<h1 id="引言">引言</h1>
<p>Spring Boot笔记，集成mybatis、使用spring-boot-devtools、打包、瘦身、Actuator、Profiles、Conditional、加载配置文件、禁用自动配置、Filter、生命周期、集成Open API、Redis、Artemis、RabbitMQ、Kafka。</p>

<h1 id="spring-boot">Spring Boot</h1>

<p>Spring框架，它的主要功能包括IoC容器、AOP支持、事务支持、MVC开发以及强大的第三方集成功能等。而Spring Boot是一个基于Spring的套件，它帮我们预组装了Spring的一系列组件，以便以尽可能少的代码和配置来开发基于Spring的Java应用程序。</p>

<p>Spring Boot的目标就是提供一个开箱即用的应用程序架构，基于Spring Boot的预置结构继续开发，省时省力。</p>

<p>Spring Boot3.x版与Spring Boot 2.x版本，两者有以下不同：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: left">Spring Boot 2.x</th>
      <th style="text-align: left">Spring Boot 3.x</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Spring版本</td>
      <td style="text-align: left">Spring 5.x</td>
      <td style="text-align: left">Spring 6.x</td>
    </tr>
    <tr>
      <td style="text-align: left">JDK版本</td>
      <td style="text-align: left">&gt;= 1.8</td>
      <td style="text-align: left">&gt;= 17</td>
    </tr>
    <tr>
      <td style="text-align: left">Tomcat版本</td>
      <td style="text-align: left">9.x</td>
      <td style="text-align: left">10.x</td>
    </tr>
    <tr>
      <td style="text-align: left">Annotation包</td>
      <td style="text-align: left">javax.annotation</td>
      <td style="text-align: left">jakarta.annotation</td>
    </tr>
    <tr>
      <td style="text-align: left">Servlet包</td>
      <td style="text-align: left">javax.servlet</td>
      <td style="text-align: left">jakarta.servlet</td>
    </tr>
    <tr>
      <td style="text-align: left">JMS包</td>
      <td style="text-align: left">javax.jms</td>
      <td style="text-align: left">jakarta.jms</td>
    </tr>
    <tr>
      <td style="text-align: left">JavaMail包</td>
      <td style="text-align: left">javax.mail</td>
      <td style="text-align: left">jakarta.mail</td>
    </tr>
  </tbody>
</table>

<p>如果使用Spring Boot的其他版本，则需要根据需要调整代码。</p>

<p><a href="https://spring.io/projects/spring-boot">Spring Boot的官网</a>。</p>

<h2 id="标准spring-boot应用">标准Spring Boot应用</h2>

<p>新建一个<code class="language-plaintext highlighter-rouge">springboot-hello</code>的工程，创建标准的Maven目录结构如下：</p>

<pre><code class="language-ascii">springboot-hello
├── pom.xml
├── src
│   └── main
│       ├── java
│       └── resources
│           ├── application.yml
│           ├── logback-spring.xml
│           ├── static
│           └── templates
└── target
</code></pre>

<p>其中，在<code class="language-plaintext highlighter-rouge">src/main/resources</code>目录下：</p>

<p><strong>application.yml</strong></p>

<p>是Spring Boot默认的配置文件，它采用<a href="https://yaml.org/">YAML</a>格式而不是<code class="language-plaintext highlighter-rouge">.properties</code>格式，<strong>文件名必须是<code class="language-plaintext highlighter-rouge">application.yml</code>而不是其他名称。</strong></p>

<p>YAML格式比<code class="language-plaintext highlighter-rouge">key=value</code>格式的<code class="language-plaintext highlighter-rouge">.properties</code>文件更易读。比较一下两者的写法：</p>

<p>使用<code class="language-plaintext highlighter-rouge">.properties</code>格式：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># application.properties
</span>
<span class="py">spring.application.name</span><span class="p">=</span><span class="s">${APP_NAME:unnamed}</span>

<span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">jdbc:hsqldb:file:testdb</span>
<span class="py">spring.datasource.username</span><span class="p">=</span><span class="s">sa</span>
<span class="py">spring.datasource.password</span><span class="p">=</span>
<span class="py">spring.datasource.driver-class-name</span><span class="p">=</span><span class="s">org.hsqldb.jdbc.JDBCDriver</span>

<span class="py">spring.datasource.hikari.auto-commit</span><span class="p">=</span><span class="s">false</span>
<span class="py">spring.datasource.hikari.connection-timeout</span><span class="p">=</span><span class="s">3000</span>
<span class="py">spring.datasource.hikari.validation-timeout</span><span class="p">=</span><span class="s">3000</span>
<span class="py">spring.datasource.hikari.max-lifetime</span><span class="p">=</span><span class="s">60000</span>
<span class="py">spring.datasource.hikari.maximum-pool-size</span><span class="p">=</span><span class="s">20</span>
<span class="py">spring.datasource.hikari.minimum-idle</span><span class="p">=</span><span class="s">1</span>
</code></pre></div></div>

<p>使用YAML格式：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># application.yml</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">${APP_NAME:unnamed}</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:mem:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
    <span class="na">hikari</span><span class="pi">:</span>
      <span class="na">auto-commit</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">connection-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">validation-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">max-lifetime</span><span class="pi">:</span> <span class="m">60000</span>
      <span class="na">maximum-pool-size</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">minimum-idle</span><span class="pi">:</span> <span class="m">1</span>
</code></pre></div></div>

<p>可见，YAML是一种层级格式，它和<code class="language-plaintext highlighter-rouge">.properties</code>很容易互相转换，它的优点是去掉了大量重复的前缀，并且更加易读。</p>

<p><strong>也可以使用<code class="language-plaintext highlighter-rouge">application.properties</code>作为配置文件</strong>，但不如YAML格式简单。</p>

<p><strong>使用环境变量</strong></p>

<p>在配置文件中，经常使用如下的格式对某个key进行配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">app</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">${DB_HOST:localhost}</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">${DB_USER:root}</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${DB_PASSWORD:password}</span>
</code></pre></div></div>

<p>这种<code class="language-plaintext highlighter-rouge">${DB_HOST:localhost}</code>意思是，首先从环境变量查找<code class="language-plaintext highlighter-rouge">DB_HOST</code>，如果环境变量定义了，那么使用环境变量的值，否则，使用默认值<code class="language-plaintext highlighter-rouge">localhost</code>。</p>

<p>这使得我们在开发和部署时更加方便，因为开发时无需设定任何环境变量，直接使用默认值即本地数据库，而实际线上运行的时候，只需要传入环境变量即可：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ DB_HOST</span><span class="o">=</span>10.0.1.123 <span class="nv">DB_USER</span><span class="o">=</span>prod <span class="nv">DB_PASSWORD</span><span class="o">=</span>xxxx java <span class="nt">-jar</span> xxx.jar
</code></pre></div></div>

<hr />

<p><strong>logback-spring.xml</strong>是Spring Boot的logback配置文件名称（也可以使用<code class="language-plaintext highlighter-rouge">logback.xml</code>），一个标准的写法如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;configuration&gt;</span>
    <span class="nt">&lt;include</span> <span class="na">resource=</span><span class="s">"org/springframework/boot/logging/logback/defaults.xml"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"CONSOLE"</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.ConsoleAppender"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;encoder&gt;</span>
            <span class="nt">&lt;pattern&gt;</span>${CONSOLE_LOG_PATTERN}<span class="nt">&lt;/pattern&gt;</span>
            <span class="nt">&lt;charset&gt;</span>utf8<span class="nt">&lt;/charset&gt;</span>
        <span class="nt">&lt;/encoder&gt;</span>
    <span class="nt">&lt;/appender&gt;</span>

    <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">"APP_LOG"</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;encoder&gt;</span>
            <span class="nt">&lt;pattern&gt;</span>${FILE_LOG_PATTERN}<span class="nt">&lt;/pattern&gt;</span>
            <span class="nt">&lt;charset&gt;</span>utf8<span class="nt">&lt;/charset&gt;</span>
        <span class="nt">&lt;/encoder&gt;</span>
          <span class="nt">&lt;file&gt;</span>app.log<span class="nt">&lt;/file&gt;</span>
        <span class="nt">&lt;rollingPolicy</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;maxIndex&gt;</span>1<span class="nt">&lt;/maxIndex&gt;</span>
            <span class="nt">&lt;fileNamePattern&gt;</span>app.log.%i<span class="nt">&lt;/fileNamePattern&gt;</span>
        <span class="nt">&lt;/rollingPolicy&gt;</span>
        <span class="nt">&lt;triggeringPolicy</span> <span class="na">class=</span><span class="s">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;MaxFileSize&gt;</span>1MB<span class="nt">&lt;/MaxFileSize&gt;</span>
        <span class="nt">&lt;/triggeringPolicy&gt;</span>
    <span class="nt">&lt;/appender&gt;</span>

    <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">"INFO"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">"CONSOLE"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">"APP_LOG"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/root&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<p>它主要通过<code class="language-plaintext highlighter-rouge">&lt;include resource="..." /&gt;</code>引入了Spring Boot的一个缺省配置，这样我们就可以引用类似<code class="language-plaintext highlighter-rouge">${CONSOLE_LOG_PATTERN}</code>这样的变量。上述配置定义了一个控制台输出和文件输出，可根据需要修改。</p>

<p><code class="language-plaintext highlighter-rouge">static</code>是静态文件目录，<code class="language-plaintext highlighter-rouge">templates</code>是模板文件目录，它们不再存放在<code class="language-plaintext highlighter-rouge">src/main/webapp</code>下，而是直接放到<code class="language-plaintext highlighter-rouge">src/main/resources</code>这个classpath目录，因为在Spring Boot中已经不需要专门的webapp目录了。</p>

<p>以上就是Spring Boot的标准目录结构，它完全是一个基于Java应用的普通Maven项目。</p>

<p>源码的目录结构：</p>

<pre><code class="language-ascii">src/main/java
└── com.aotmd
    ├── Application.java
    ├── entity
    │   └── User.java
    ├── service
    │   └── UserService.java
    └── web
        └── UserController.java
</code></pre>

<p>在存放源码的<code class="language-plaintext highlighter-rouge">src/main/java</code>目录中，Spring Boot对Java包的层级结构有一个要求。根package是<code class="language-plaintext highlighter-rouge">com.aotmd</code>，下面还有<code class="language-plaintext highlighter-rouge">entity</code>、<code class="language-plaintext highlighter-rouge">service</code>、<code class="language-plaintext highlighter-rouge">web</code>等子package。Spring Boot要求<code class="language-plaintext highlighter-rouge">main()</code>方法所在的启动类必须放到根package下，命名不做要求，这里以<code class="language-plaintext highlighter-rouge">Application.java</code>命名，它的内容如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动Spring Boot应用程序只需要一行代码加上一个注解<code class="language-plaintext highlighter-rouge">@SpringBootApplication</code>，该注解实际上又包含了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@SpringBootConfiguration</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@Configuration</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@EnableAutoConfiguration</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@AutoConfigurationPackage</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@ComponentScan</code></li>
</ul>

<p>这样一个注解就相当于启动了自动配置和自动扫描。</p>

<p><code class="language-plaintext highlighter-rouge">pom.xml</code>内容如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span>
         <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
         <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="nt">&lt;groupId&gt;</span>org.example<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-hello<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;properties&gt;</span>
        <span class="nt">&lt;maven.compiler.source&gt;</span>11<span class="nt">&lt;/maven.compiler.source&gt;</span>
        <span class="nt">&lt;maven.compiler.target&gt;</span>11<span class="nt">&lt;/maven.compiler.target&gt;</span>
        <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>
    <span class="nt">&lt;parent&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.2.4.RELEASE<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>
    <span class="nt">&lt;dependencies&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>

        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-jdbc<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
        <span class="c">&lt;!-- 集成Pebble View --&gt;</span>
        <span class="c">&lt;!-- https://mvnrepository.com/artifact/io.pebbletemplates/pebble-spring-boot-starter --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>io.pebbletemplates<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>pebble-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>3.1.3<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>


        <span class="c">&lt;!-- JDBC驱动 --&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>使用Spring Boot时，强烈推荐从<code class="language-plaintext highlighter-rouge">spring-boot-starter-parent</code>继承，因为这样就可以引入Spring Boot的预置配置。</p>

<p>紧接着，引入了依赖<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>和<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>，它们分别引入了Spring MVC相关依赖和Spring JDBC相关依赖，无需指定版本号，因为引入的<code class="language-plaintext highlighter-rouge">&lt;parent&gt;</code>内已经指定了，只有我们自己引入的某些第三方jar包需要指定版本号。这里引入<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>作为View，以及<code class="language-plaintext highlighter-rouge">hsqldb</code>作为嵌入式数据库。<code class="language-plaintext highlighter-rouge">hsqldb</code>已在<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>中预置了版本号，因此此处无需指定版本号。</p>

<p><strong>第三方jar的版本兼容性可以查看<a href="https://mvnrepository.com/artifact/io.pebbletemplates/pebble-spring-boot-starter/3.1.3">mvnrepository</a>下的Compile Dependencies查看兼容性。</strong></p>

<p>根据<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>的<a href="https://pebbletemplates.io/wiki/guide/spring-boot-integration/">文档</a>，加入如下配置到<code class="language-plaintext highlighter-rouge">application.yml</code>：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pebble</span><span class="pi">:</span>
  <span class="c1"># 默认为".peb"，改为"":</span>
  <span class="na">suffix</span><span class="pi">:</span>
  <span class="c1"># 开发阶段禁用模板缓存:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">prefix</span><span class="pi">:</span> <span class="s">/templates/</span>
</code></pre></div></div>

<p>对<code class="language-plaintext highlighter-rouge">Application</code>稍作改动，添加<code class="language-plaintext highlighter-rouge">WebMvcConfigurer</code>这个Bean：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 映射路径`/static/`到classpath路径:</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"classpath:/static/"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在就可以直接运行<code class="language-plaintext highlighter-rouge">Application</code>，Spring Boot自动启动了嵌入式Tomcat，当看到<code class="language-plaintext highlighter-rouge">Started Application in xxx seconds</code>时，Spring Boot应用启动成功。</p>

<p>添加测试：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">class</span> <span class="nc">TestController</span><span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">test</span><span class="o">(){</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"body"</span><span class="o">,</span><span class="s">"你好"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"title"</span><span class="o">,</span><span class="s">"测试"</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"test.html"</span><span class="o">,</span><span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">test.html</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>访问：<code class="language-plaintext highlighter-rouge">http://localhost:8080/test1</code>：</p>

<p>显示：<code class="language-plaintext highlighter-rouge">你好</code></p>

<hr />

<p>之前我们定义的数据源、声明式事务、JdbcTemplate在哪创建的？怎么就可以直接注入到自己编写的<code class="language-plaintext highlighter-rouge">UserService</code>中呢？</p>

<p>这些自动创建的Bean就是Spring Boot的特色：AutoConfiguration。</p>

<p>当引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>时，启动时会自动扫描所有的<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DataSourceAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">DataSource</code>，其中配置项从<code class="language-plaintext highlighter-rouge">application.yml</code>的<code class="language-plaintext highlighter-rouge">spring.datasource</code>读取；</li>
  <li><code class="language-plaintext highlighter-rouge">DataSourceTransactionManagerAutoConfiguration</code>：自动创建了一个基于JDBC的事务管理器；</li>
  <li><code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>：自动创建了一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。</li>
</ul>

<p>因此，自动得到了一个<code class="language-plaintext highlighter-rouge">DataSource</code>、一个<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>。</p>

<p>类似的，当引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>时，自动创建了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ServletWebServerFactoryAutoConfiguration</code>：自动创建一个嵌入式Web服务器，默认是Tomcat；</li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServletAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">HttpEncodingAutoConfiguration</code>：自动创建一个<code class="language-plaintext highlighter-rouge">CharacterEncodingFilter</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">WebMvcAutoConfiguration</code>：自动创建若干与MVC相关的Bean。</li>
  <li>…</li>
</ul>

<p>引入第三方<code class="language-plaintext highlighter-rouge">pebble-spring-boot-starter</code>时，自动创建了：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PebbleAutoConfiguration</code>：自动创建了一个<code class="language-plaintext highlighter-rouge">PebbleViewResolver</code>。</li>
</ul>

<p>Spring Boot大量使用<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>来使得许多组件被自动化配置并创建，而这些创建过程又大量使用了Spring的Conditional功能。例如<code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>，它的代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@ConditionalOnClass</span><span class="o">({</span> <span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">JdbcTemplate</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="nd">@ConditionalOnSingleCandidate</span><span class="o">(</span><span class="nc">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@AutoConfigureAfter</span><span class="o">(</span><span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="nc">JdbcProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">JdbcTemplateConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">NamedParameterJdbcTemplateConfiguration</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcTemplateAutoConfiguration</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当满足条件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnClass</code>：在classpath中能找到<code class="language-plaintext highlighter-rouge">DataSource</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnSingleCandidate(DataSource.class)</code>：在当前Bean的定义中能找到唯一的<code class="language-plaintext highlighter-rouge">DataSource</code>；</li>
</ul>

<p>该<code class="language-plaintext highlighter-rouge">JdbcTemplateAutoConfiguration</code>就会起作用。实际创建由导入的<code class="language-plaintext highlighter-rouge">JdbcTemplateConfiguration</code>完成：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="nc">JdbcOperations</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">JdbcTemplateConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nd">@Primary</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">,</span> <span class="nc">JdbcProperties</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
        <span class="nc">JdbcProperties</span><span class="o">.</span><span class="na">Template</span> <span class="n">template</span> <span class="o">=</span> <span class="n">properties</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">();</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setFetchSize</span><span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getFetchSize</span><span class="o">());</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setMaxRows</span><span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getMaxRows</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">template</span><span class="o">.</span><span class="na">getQueryTimeout</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">setQueryTimeout</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">template</span><span class="o">.</span><span class="na">getQueryTimeout</span><span class="o">().</span><span class="na">getSeconds</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>创建<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>之前，要满足<code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean(JdbcOperations.class)</code>，即不存在<code class="language-plaintext highlighter-rouge">JdbcOperations</code>的Bean。</p>

<p>如果自己创建了一个<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>，例如，在<code class="language-plaintext highlighter-rouge">Application</code>中自己写个方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">createJdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>那么根据条件<code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean(JdbcOperations.class)</code>，Spring Boot就不会再创建一个重复的<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>（因为<code class="language-plaintext highlighter-rouge">JdbcOperations</code>是<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>的父类）。</p>

<p>可见，Spring Boot自动装配功能是通过自动扫描+条件装配实现的，这一套机制在默认情况下工作得很好，但是，如果要手动控制某个Bean的创建，就需要详细地了解Spring Boot自动创建的原理，很多时候还要跟踪<code class="language-plaintext highlighter-rouge">XxxAutoConfiguration</code>，以便设定条件使得某个Bean不会被自动创建。</p>

<hr />

<h2 id="集成mybatis">集成mybatis</h2>

<p>引入对应版本的依赖即可：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.2.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>yml文件添加映射文件位置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">mybatis</span><span class="pi">:</span>
  <span class="na">mapper-locations</span><span class="pi">:</span> <span class="s">classpath:mapper/*.xml</span>

<span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">root</span><span class="pi">:</span> <span class="s">INFO</span>
    <span class="na">com.aotmd</span><span class="pi">:</span> <span class="s">DEBUG</span>
    <span class="na">org.mybatis</span><span class="pi">:</span> <span class="s">DEBUG</span>
</code></pre></div></div>

<p>然后添加之前Spring的非配置部分：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">User</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getCreatedAt</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCreatedAt</span><span class="o">(</span><span class="nc">Long</span> <span class="n">createdAt</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="s">"User{id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", email='"</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", password='"</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", name='"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">'\''</span> <span class="o">+</span> <span class="s">", createdAt="</span> <span class="o">+</span> <span class="n">createdAt</span> <span class="o">+</span> <span class="sc">'}'</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"offset"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">"maxResults"</span><span class="o">)</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">insert2</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">updateName</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
    <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">User</span> <span class="nf">getByEmailAndByPassword</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">"user"</span><span class="o">)</span> <span class="nc">User</span> <span class="n">user</span><span class="o">);</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">init</span><span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//在Spring容器启动时自动创建一个users表</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"DROP TABLE IF EXISTS users"</span><span class="o">);</span>
        <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">"CREATE TABLE IF NOT EXISTS users ("</span>
                <span class="o">+</span> <span class="s">"id BIGINT IDENTITY NOT NULL PRIMARY KEY, "</span>
                <span class="o">+</span> <span class="s">"email VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"password VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"name VARCHAR(100) NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"createdAt BIGINT NOT NULL, "</span>
                <span class="o">+</span> <span class="s">"UNIQUE (email))"</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="c1">// 注入UserMapper:</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 调用Mapper方法:</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span><span class="kt">int</span> <span class="n">maxResults</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">all</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="n">offset</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">all</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">register</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="c1">// 不要设置id，因为使用了自增主键</span>
        <span class="c1">// 保存到数据库:</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">insert2</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="c1">// 现在已经自动获得了id:</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">updateEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">updateName</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">login</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">){</span>
        <span class="c1">// 创建一个User对象:</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
        <span class="c1">// 设置好各个属性:</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
        <span class="n">user</span><span class="o">=</span><span class="n">userMapper</span><span class="o">.</span><span class="na">getByEmailAndByPassword</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getAll</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">signin</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">SignInRequest</span> <span class="n">signinRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">email</span><span class="o">,</span> <span class="n">signinRequest</span><span class="o">.</span><span class="na">password</span><span class="o">,</span><span class="n">signinRequest</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="s">"SIGNIN_FAILED"</span><span class="o">,</span> <span class="s">"message"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SignInRequest</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>映射文件也与之前相同：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.aotmd.UserMapper"</span><span class="nt">&gt;</span><span class="c">&lt;!--命名空间为接口名称--&gt;</span>
    <span class="c">&lt;!--id需与接口方法完全一致,parameterType形参,resultType返回值类型--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getById"</span> <span class="na">parameterType=</span><span class="s">"Long"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getAll"</span>  <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users LIMIT #{offset}, #{maxResults}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"getByEmailAndByPassword"</span> <span class="na">resultType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        SELECT *
        FROM users
        WHERE email = #{user.email} and
        password=#{user.password}
    <span class="nt">&lt;/select&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"insert2"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span> <span class="na">useGeneratedKeys=</span><span class="s">"true"</span> <span class="na">keyProperty=</span><span class="s">"id"</span> <span class="na">keyColumn=</span><span class="s">"id"</span><span class="nt">&gt;</span>
        INSERT INTO users (email, password, name, createdAt)
        VALUES (#{user.email}, #{user.password}, #{user.name}, #{user.createdAt})
    <span class="nt">&lt;/insert&gt;</span>

    <span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateName"</span> <span class="na">parameterType=</span><span class="s">"com.aotmd.User"</span><span class="nt">&gt;</span>
        UPDATE users
        SET name = #{user.name}
        WHERE id = #{user.id}
    <span class="nt">&lt;/update&gt;</span>

    <span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">"deleteById"</span> <span class="na">parameterType=</span><span class="s">"long"</span><span class="nt">&gt;</span>
        DELETE
        FROM users
        WHERE id = #{id}
    <span class="nt">&lt;/delete&gt;</span>
<span class="nt">&lt;/mapper&gt;</span>
</code></pre></div></div>

<p>启动，然后post访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/signin</code>，附带json：<code class="language-plaintext highlighter-rouge">{"email":"tom@example.com","password":"tomcat","name":"test"}</code>，返回body：<code class="language-plaintext highlighter-rouge">{"user":{"id":0,"email":"tom@example.com","password":"tomcat","name":"test","createdAt":***}}</code></p>

<p>再get访问<code class="language-plaintext highlighter-rouge">http://localhost:8080/api/users</code>，得到：<code class="language-plaintext highlighter-rouge">[{"id":0,"email":"tom@example.com","password":"tomcat","name":"test","createdAt":***}]</code></p>

<p>功能正常。</p>

<h2 id="spring-boot-devtools">spring-boot-devtools</h2>

<p>在开发阶段，我们经常要修改代码，然后重启Spring Boot应用。经常手动停止再启动，比较麻烦。</p>

<p>Spring Boot提供了一个开发者工具，可以监控classpath路径上的文件。只要源码或配置文件发生修改，Spring Boot应用可以自动重启。在开发阶段，这个功能比较有用。</p>

<p>要使用这一开发者功能，只需添加如下依赖到<code class="language-plaintext highlighter-rouge">pom.xml</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后，没有然后了。直接启动应用程序，然后试着修改源码，保存，观察日志输出，Spring Boot会自动重新加载。</p>

<p>默认配置下，针对<code class="language-plaintext highlighter-rouge">/static</code>、<code class="language-plaintext highlighter-rouge">/public</code>和<code class="language-plaintext highlighter-rouge">/templates</code>目录中的文件修改，不会自动重启，因为禁用缓存后，这些文件的修改可以实时更新。</p>

<hr />

<p>如果没有效果，那需要修改以下设置：</p>

<ol>
  <li>设置IDEA的编译器：
    <ul>
      <li>File-&gt;Settings…-&gt;Build,Execution,Deployment-&gt;Compiler，勾选”Build project automatically”</li>
      <li>文件-&gt;设置…-&gt;构建、执行、部署-&gt;编译器，勾选”自动构建项目”</li>
    </ul>
  </li>
  <li>应用程序运行时允许编译器自动生成：
    <ul>
      <li>在IntellijIDEA中：按Ctrl+Shift+a，然后键入“注册表”并点击它。然后启用选项“compiler.Automake.Allow.When.app.Running”。</li>
      <li>在新版本这个选项已经被移到了高级设置中，文件-&gt;设置…-&gt;高级设置-&gt;编译器栏-&gt;“即使开发的应用程序当前正在运行，也允许自动make启动”。</li>
    </ul>
  </li>
</ol>

<p>还有可能是项目名称的问题：</p>

<p>在决定类路径上的条目更改时是否应触发重启时，<strong>DevTools会自动忽略名为：</strong><code class="language-plaintext highlighter-rouge">Spring-Boot</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-DevTools</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-Autoconfiguration</code>、<code class="language-plaintext highlighter-rouge">Spring-Boot-Actuator</code>和<code class="language-plaintext highlighter-rouge">Spring-Boot-starter</code>的项目。</p>

<p>使用Ctrl+F9构建项目<strong>会自动触发重新启动</strong>。如果您希望在保存类文件后立即自动触发，可以按照问题中提供的热插拔链接进行操作。</p>

<p>Spring Boot还具有在特定文件发生更改时触发重新启动的选项，可以使用以下属性在应用程序中配置该选项</p>

<blockquote>
  <p>spring.devtools.restart.trigger-file=</p>

  <p>Spring.devtools.restart.rigger-file=</p>
</blockquote>

<p>参见： <a href="https://stackoverflow.com/questions/53569745/spring-boot-developer-tools-auto-restart-doesnt-work-in-intellij">Spring Boot Developer Tools Auto restart doesn’t work in IntelliJ</a></p>

<h2 id="打包spring-boot应用">打包Spring Boot应用</h2>

<p>在Spring Boot应用中，Spring Boot自带一个更简单的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>插件用来打包，只需要在<code class="language-plaintext highlighter-rouge">pom.xml</code>中加入以下配置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>无需任何配置，Spring Boot的这款插件会自动定位应用程序的入口Class，执行以下Maven命令即可打包：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn clean package
</code></pre></div></div>

<p>以<code class="language-plaintext highlighter-rouge">spring-boot-hello</code>项目为例，打包后在<code class="language-plaintext highlighter-rouge">target</code>目录下可以看到两个jar文件：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring-boot-hello-1.0-SNAPSHOT.jar
spring-boot-hello-1.0-SNAPSHOT.jar.original
</code></pre></div></div>

<p>其中，<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar.original</code>是Maven标准打包插件打的jar包，它只包含我们自己的Class，不包含依赖，而<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>是Spring Boot打包插件创建的包含依赖的jar，可以直接运行：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> springboot-exec-jar-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>这样，部署一个Spring Boot应用就非常简单，无需预装任何服务器，只需要上传jar包即可。</p>

<p>在打包的时候，因为打包后的Spring Boot应用不会被修改，因此，默认情况下，<code class="language-plaintext highlighter-rouge">spring-boot-devtools</code>这个依赖不会被打包进去。但是要注意，使用早期的Spring Boot版本时，需要配置一下才能排除<code class="language-plaintext highlighter-rouge">spring-boot-devtools</code>这个依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;excludeDevtools&gt;</span>true<span class="nt">&lt;/excludeDevtools&gt;</span>
    <span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div>

<p>如果不喜欢默认的项目名+版本号作为文件名，可以加一个配置指定文件名：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;finalName&gt;</span>awesome-app<span class="nt">&lt;/finalName&gt;</span>
        ...
    <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>这样打包后的文件名就是<code class="language-plaintext highlighter-rouge">awesome-app.jar</code>。</p>

<hr />

<p>在 IntelliJ IDEA 中运行打包好的 Spring Boot JAR 文件，可以按照以下步骤操作：</p>

<p><strong>方法 1：使用终端运行 JAR 文件</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到终端（View -&gt; Tool Windows -&gt; Terminal）。</li>
  <li>切换到包含 JAR 文件的目录，例如：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">cd </span>target
</code></pre></div>    </div>
  </li>
  <li>使用以下命令运行 JAR 文件：
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> java <span class="nt">-jar</span> your-application.jar
</code></pre></div>    </div>
    <p>替换 <code class="language-plaintext highlighter-rouge">your-application.jar</code> 为实际的 JAR 文件名。</p>
  </li>
</ol>

<p><strong>方法 2：创建运行配置</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到 “Run/Debug Configurations”（Run -&gt; Edit Configurations）。</li>
  <li>点击左上角的 <code class="language-plaintext highlighter-rouge">+</code> 号，选择 <code class="language-plaintext highlighter-rouge">Application</code>。</li>
  <li>配置运行配置：
    <ul>
      <li><strong>Name</strong>: 运行配置的名称，例如 <code class="language-plaintext highlighter-rouge">Run Jar</code>.</li>
      <li><strong>Main class</strong>: 选择 <code class="language-plaintext highlighter-rouge">org.springframework.boot.loader.JarLauncher</code>。</li>
      <li><strong>Program arguments</strong>: 填写 JAR 文件的路径，例如 <code class="language-plaintext highlighter-rouge">path/to/your-application.jar</code>。</li>
    </ul>
  </li>
  <li>点击 “OK” 保存运行配置。</li>
  <li>在 IntelliJ IDEA 的工具栏上选择新创建的运行配置，然后点击 “Run” 按钮。</li>
</ol>

<p><strong>方法 3：使用 JAR 文件配置</strong></p>

<ol>
  <li>打开 IntelliJ IDEA 并导航到 “Run/Debug Configurations”（Run -&gt; Edit Configurations）。</li>
  <li>点击左上角的 <code class="language-plaintext highlighter-rouge">+</code> 号，选择 <code class="language-plaintext highlighter-rouge">JAR Application</code>。</li>
  <li>配置运行配置：
    <ul>
      <li><strong>Name</strong>: 运行配置的名称，例如 <code class="language-plaintext highlighter-rouge">Run Jar</code>.</li>
      <li><strong>Path to JAR</strong>: 选择 JAR 文件的路径，例如 <code class="language-plaintext highlighter-rouge">target/your-application.jar</code>。</li>
      <li><strong>Working Directory</strong>: 设置为项目的根目录。</li>
      <li><strong>VM options</strong>: 根据需要填写，例如 <code class="language-plaintext highlighter-rouge">-Xmx1024m</code>。</li>
    </ul>
  </li>
  <li>点击 “OK” 保存运行配置。</li>
  <li>在 IntelliJ IDEA 的工具栏上选择新创建的运行配置，然后点击 “Run” 按钮。</li>
</ol>

<h2 id="瘦身spring-boot应用">瘦身Spring Boot应用</h2>

<p>使用Spring Boot提供的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>打包Spring Boot应用，可以直接获得一个完整的可运行的jar包，把它上传到服务器上再运行就极其方便。</p>

<p>但是这种方式也不是没有缺点。最大的缺点就是包太大了，动不动几十MB，在网速不给力的情况下，上传服务器非常耗时。引用到的Tomcat、Spring和其他第三方组件，只要版本号不变，这些jar就相当于每次都重复打进去，再重复上传了一遍。</p>

<p>真正经常改动的代码其实是自己编写的代码。如果只打包自己编写的代码，通常jar包也就几百KB。但是，运行的时候，classpath中没有依赖的jar包，肯定会报错。</p>

<p>如何只打自己编写的代码，同时又自动把依赖包下载到某处，并自动引入到classpath中。解决方案就是使用<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>。</p>

<p>修改<code class="language-plaintext highlighter-rouge">&lt;build&gt;</code>-<code class="language-plaintext highlighter-rouge">&lt;plugins&gt;</code>-<code class="language-plaintext highlighter-rouge">&lt;plugin&gt;</code>，给原来的<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>增加一个<code class="language-plaintext highlighter-rouge">&lt;dependency&gt;</code>如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
    ...
    <span class="nt">&lt;build&gt;</span>
        <span class="nt">&lt;plugins&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;dependencies&gt;</span>
                    <span class="nt">&lt;dependency&gt;</span>
                        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
                        <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
                        <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
                    <span class="nt">&lt;/dependency&gt;</span>
                <span class="nt">&lt;/dependencies&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
            <span class="nt">&lt;plugin&gt;</span>
                <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
                <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
                <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
                <span class="nt">&lt;executions&gt;</span>
                    <span class="c">&lt;!--在构建时下载依赖项--&gt;</span>
                    <span class="nt">&lt;execution&gt;</span>
                        <span class="nt">&lt;id&gt;</span>resolve<span class="nt">&lt;/id&gt;</span>
                        <span class="nt">&lt;goals&gt;</span>
                            <span class="nt">&lt;goal&gt;</span>resolve<span class="nt">&lt;/goal&gt;</span>
                        <span class="nt">&lt;/goals&gt;</span>
                        <span class="nt">&lt;inherited&gt;</span>false<span class="nt">&lt;/inherited&gt;</span>
                    <span class="nt">&lt;/execution&gt;</span>
                <span class="nt">&lt;/executions&gt;</span>
            <span class="nt">&lt;/plugin&gt;</span>
        <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>
    <span class="c">&lt;!-- 阿里云maven仓库 --&gt;</span>
    <span class="nt">&lt;repositories&gt;</span>
        <span class="nt">&lt;repository&gt;</span>
            <span class="nt">&lt;id&gt;</span>public<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;name&gt;</span>aliyun nexus<span class="nt">&lt;/name&gt;</span>
            <span class="nt">&lt;url&gt;</span>https://maven.aliyun.com/repository/public<span class="nt">&lt;/url&gt;</span>
            <span class="nt">&lt;releases&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/releases&gt;</span>
        <span class="nt">&lt;/repository&gt;</span>
    <span class="nt">&lt;/repositories&gt;</span>
    <span class="nt">&lt;pluginRepositories&gt;</span>
        <span class="nt">&lt;pluginRepository&gt;</span>
            <span class="nt">&lt;id&gt;</span>public<span class="nt">&lt;/id&gt;</span>
            <span class="nt">&lt;name&gt;</span>aliyun nexus<span class="nt">&lt;/name&gt;</span>
            <span class="nt">&lt;url&gt;</span>https://maven.aliyun.com/repository/public<span class="nt">&lt;/url&gt;</span>
            <span class="nt">&lt;releases&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/releases&gt;</span>
            <span class="nt">&lt;snapshots&gt;</span>
                <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
            <span class="nt">&lt;/snapshots&gt;</span>
        <span class="nt">&lt;/pluginRepository&gt;</span>
    <span class="nt">&lt;/pluginRepositories&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>如果无法自动下载：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>可以把它加入到</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="err">...</span><span class="nt">&gt;</span>
	<span class="nt">&lt;dependencies&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot.experimental<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-thin-layout<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;version&gt;</span>1.0.31.RELEASE<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>

<p>加载完毕后删除。</p>

<p>然后不需要任何其他改动了，直接按正常的流程打包，执行<code class="language-plaintext highlighter-rouge">mvn clean package</code>，<code class="language-plaintext highlighter-rouge">target</code>目录最终生成的可执行<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>只有79KB左右。</p>

<p>直接运行<code class="language-plaintext highlighter-rouge">java -jar spring-boot-hello-1.0-SNAPSHOT.jar</code>，效果和上一节完全一样。显然，79KB的jar肯定无法放下Tomcat和Spring。那么，运行时这个<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>又是怎么找到它自己依赖的jar包呢？</p>

<p>实际上<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>这个插件改变了<code class="language-plaintext highlighter-rouge">spring-boot-maven-plugin</code>的默认行为。它输出的jar包只包含自己代码编译后的class，一个很小的<code class="language-plaintext highlighter-rouge">ThinJarWrapper</code>，以及解析<code class="language-plaintext highlighter-rouge">pom.xml</code>后得到的所有依赖jar的列表。</p>

<p>运行的时候，入口实际上是<code class="language-plaintext highlighter-rouge">ThinJarWrapper</code>，它会先在指定目录搜索看看依赖的jar包是否都存在，如果不存在，先从Maven中央仓库下载到本地，然后，再执行我们自己编写的<code class="language-plaintext highlighter-rouge">main()</code>入口方法。这种方式有点类似很多在线安装程序：用户下载后得到的是一个很小的exe安装程序，执行安装程序时，会首先在线下载所需的若干巨大的文件，再进行真正的安装。</p>

<p>这个<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>在启动时搜索的默认目录是用户主目录的<code class="language-plaintext highlighter-rouge">.m2</code>，也可以指定下载目录，例如，将下载目录指定为当前目录：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-Dthin</span>.root<span class="o">=</span><span class="nb">.</span> <span class="nt">-jar</span> spring-boot-hello-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>上述命令通过环境变量<code class="language-plaintext highlighter-rouge">thin.root</code>传入当前目录，执行后发现当前目录下自动生成了一个<code class="language-plaintext highlighter-rouge">repository</code>目录，这和Maven的默认下载目录<code class="language-plaintext highlighter-rouge">~/.m2/repository</code>的结构是完全一样的，只是它仅包含<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>所需的运行期依赖项。</p>

<p>注意：只有首次运行时会自动下载依赖项，再次运行时由于无需下载，所以启动速度会大大加快。如果删除了repository目录，再次运行时就会再次触发下载。</p>

<p><strong>预热</strong></p>

<p>把79KB大小的<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>直接扔到服务器执行，上传过程就非常快。但是，第一次在服务器上运行<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>时，仍需要从Maven中央仓库下载大量的jar包，所以，<code class="language-plaintext highlighter-rouge">spring-boot-thin-launcher</code>还提供了一个<code class="language-plaintext highlighter-rouge">dryrun</code>选项，专门用来下载依赖项而不执行实际代码：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-Dthin</span>.dryrun<span class="o">=</span><span class="nb">true</span> <span class="nt">-Dthin</span>.root<span class="o">=</span><span class="nb">.</span> <span class="nt">-jar</span> spring-boot-hello-1.0-SNAPSHOT.jar
</code></pre></div></div>

<p>执行上述代码会在当前目录创建<code class="language-plaintext highlighter-rouge">repository</code>目录，并下载所有依赖项，但并不会运行我们编写的<code class="language-plaintext highlighter-rouge">main()</code>方法。此过程称之为“预热”（warm up）。</p>

<p>如果服务器由于安全限制不允许从外网下载文件，那么可以在本地预热，然后把<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>和<code class="language-plaintext highlighter-rouge">repository</code>目录上传到服务器。只要依赖项没有变化，后续改动只需要上传<code class="language-plaintext highlighter-rouge">spring-boot-hello-1.0-SNAPSHOT.jar</code>即可。</p>

<p>如果在maven中使用相对路径引入了自己的jar,使用 <code class="language-plaintext highlighter-rouge">java -jar .\xxx.jar --thin.root=.</code> 会报错。如：<code class="language-plaintext highlighter-rouge">&lt;systemPath&gt;${project.basedir}/src/main/resources/lib/spring-file-storage-0.4.0.jar&lt;/systemPath&gt;</code></p>

<p><code class="language-plaintext highlighter-rouge">thin.root</code>根目录默认用的是本地的m2目录：<code class="language-plaintext highlighter-rouge">${user.home}/.m2</code></p>

<p>把自己的jar直接复制到开发环境和部署环境的m2目录下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;systemPath&gt;</span>
  ${user.home}/.m2/repository/com/***/abc.jar
<span class="nt">&lt;/systemPath&gt;</span>
</code></pre></div></div>

<p>这样就不会提示找不到依赖了。</p>

<p><a href="https://github.com/spring-projects-experimental/spring-boot-thin-launcher">Spring Boot Thin Launcher官网</a></p>

<h2 id="actuator">Actuator</h2>

<p>如果需要对应用程序的状态进行监控，</p>

<p>使用JMX需要把一些监控信息以MBean的形式暴露给JMX Server，而Spring Boot已经内置了一个监控功能叫Actuator。</p>

<p>使用Actuator非常简单，只需添加如下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后正常启动应用程序，Actuator会把它能收集到的所有信息都暴露给JMX。此外，Actuator还可以通过URL<code class="language-plaintext highlighter-rouge">/actuator/</code>挂载一些监控点，例如，输入<code class="language-plaintext highlighter-rouge">http://localhost:8080/actuator/health</code>，可以查看应用程序当前状态：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"UP"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Actuator默认把<strong>所有访问点暴露给JMX</strong>，但处于安全原因，只有<code class="language-plaintext highlighter-rouge">health</code>和<code class="language-plaintext highlighter-rouge">info</code>会暴露给Web。Actuator提供的所有访问点均在官方文档列出，要暴露更多的访问点给Web，需要在<code class="language-plaintext highlighter-rouge">application.yml</code>中加上配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">management</span><span class="pi">:</span>
  <span class="na">endpoints</span><span class="pi">:</span>
    <span class="na">web</span><span class="pi">:</span>
      <span class="na">exposure</span><span class="pi">:</span>
        <span class="na">include</span><span class="pi">:</span> <span class="s">info, health, beans, env, metrics</span>
</code></pre></div></div>

<p>要特别注意暴露的URL的安全性，例如，<code class="language-plaintext highlighter-rouge">/actuator/env</code>可以获取当前机器的所有环境变量，不可暴露给公网。</p>

<h2 id="profiles">Profiles</h2>

<p>Profile本身是Spring提供的功能，Profile表示一个环境的概念，如开发、测试和生产这3个环境：</p>

<ul>
  <li>native</li>
  <li>test</li>
  <li>production</li>
</ul>

<p>或者按git分支定义master、dev这些环境：</p>

<ul>
  <li>master</li>
  <li>dev</li>
</ul>

<p>在启动一个Spring应用程序的时候，可以传入一个或多个环境，例如：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-Dspring</span>.profiles.active<span class="o">=</span><span class="nb">test</span>,master
</code></pre></div></div>

<p>大多数情况下，使用一个环境就足够了。</p>

<p>Spring Boot对Profiles的支持在于，可以在<code class="language-plaintext highlighter-rouge">application.yml</code>中为每个环境进行配置。下面是一个示例配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">${APP_NAME:unnamed}</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
    <span class="na">hikari</span><span class="pi">:</span>
      <span class="na">auto-commit</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">connection-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">validation-timeout</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">max-lifetime</span><span class="pi">:</span> <span class="m">60000</span>
      <span class="na">maximum-pool-size</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">minimum-idle</span><span class="pi">:</span> <span class="m">1</span>

<span class="na">pebble</span><span class="pi">:</span>
  <span class="na">suffix</span><span class="pi">:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">false</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="s">${APP_PORT:8080}</span>

<span class="nn">---</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">test</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8000</span>

<span class="nn">---</span>

<span class="na">spring</span><span class="pi">:</span>
  <span class="na">config</span><span class="pi">:</span>
    <span class="na">activate</span><span class="pi">:</span>
      <span class="na">on-profile</span><span class="pi">:</span> <span class="s">production</span>

<span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>

<span class="na">pebble</span><span class="pi">:</span>
  <span class="na">cache</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p>分隔符<code class="language-plaintext highlighter-rouge">---</code>，最前面的配置是默认配置，不需要指定Profile，后面的每段配置都必须以<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: xxx</code>开头，表示一个Profile。上述配置默认使用8080端口，但是在<code class="language-plaintext highlighter-rouge">test</code>环境下，使用<code class="language-plaintext highlighter-rouge">8000</code>端口，在<code class="language-plaintext highlighter-rouge">production</code>环境下，使用<code class="language-plaintext highlighter-rouge">80</code>端口，并且启用Pebble的缓存。</p>

<p>如果不指定任何Profile，直接启动应用程序，那么Profile实际上就是<code class="language-plaintext highlighter-rouge">default</code>，可以从Spring Boot启动日志看出：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>... INFO 54252 --- [  restartedMain] com.aotmd.Application                    : No active profile set, falling back to default profiles: default
</code></pre></div></div>

<p>上述日志显示未设置Profile，使用默认的Profile为<code class="language-plaintext highlighter-rouge">default</code>。</p>

<p>要以<code class="language-plaintext highlighter-rouge">test</code>环境启动，可输入如下命令：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java -Dspring.profiles.active=test -jar springboot-profiles-1.0-SNAPSHOT.jar
...
INFO 58848 --- [  restartedMain] com.aotmd.Application                    : The following profiles are active: test
...
INFO 13510 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8000 (http) with context path ''
...
</code></pre></div></div>

<p>从日志看到活动的Profile是<code class="language-plaintext highlighter-rouge">test</code>，Tomcat的监听端口是<code class="language-plaintext highlighter-rouge">8000</code>。</p>

<p>通过Profile可以实现一套代码在不同环境启用不同的配置和功能。</p>

<p>在启动一个Spring应用程序的时候，可以传入一个或多个环境。如<code class="language-plaintext highlighter-rouge">-Dspring.profiles.active=test,master</code>，那最终会以哪个为准呢？答案是：先合并配置，如果有冲突，后面的覆盖前面的。</p>

<p>也可以多文件配置，将单文件中用—分割的文档块，分离到单个文件，主配置文件<code class="language-plaintext highlighter-rouge">application.yml</code>，环境配置文件<code class="language-plaintext highlighter-rouge">application-{profile}.yml</code>，因为已经通过文件名称设置了<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: xxx</code>，因此不再需要重复写了，则<code class="language-plaintext highlighter-rouge">application-test.yml</code>的文件内容为：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8000</span>
</code></pre></div></div>

<p>通过主配置文件中<code class="language-plaintext highlighter-rouge">spring.profiles.active: test</code>进行激活环境</p>

<p>或者使用环境参数激活：</p>

<ul>
  <li>VM options参数：<code class="language-plaintext highlighter-rouge">-Dspring.profiles.active=test</code></li>
  <li>Program argument参数：<code class="language-plaintext highlighter-rouge">--spring.profiles.active=test</code></li>
</ul>

<p>在新版本中<code class="language-plaintext highlighter-rouge">spring.profiles: test</code>更换成了<code class="language-plaintext highlighter-rouge">spring.config.activate.on-profile: test</code></p>

<p>假设需要一个存储服务，在本地开发时，直接使用文件存储即可，但是，在测试和生产环境，需要存储到云端，如何通过Profile实现该功能？首先，要定义存储接口<code class="language-plaintext highlighter-rouge">StorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StorageService</span> <span class="o">{</span>

    <span class="c1">// 根据URI打开InputStream:</span>
    <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>

    <span class="c1">// 根据扩展名+InputStream保存并返回URI:</span>
    <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>本地存储可通过<code class="language-plaintext highlighter-rouge">LocalStorageService</code>实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"default"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local:/var/static}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">localStorageRootDir</span><span class="o">;</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">private</span> <span class="nc">File</span> <span class="n">localStorageRoot</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Intializing local storage with root dir: {}"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">localStorageRootDir</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRootDir</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">File</span> <span class="n">targetFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span><span class="o">,</span> <span class="n">uri</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">targetFile</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">extName</span><span class="o">;</span>
        <span class="nc">File</span> <span class="n">targetFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">localStorageRoot</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">targetFile</span><span class="o">)))</span> <span class="o">{</span>
            <span class="n">input</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">fileName</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>而云端存储可通过<code class="language-plaintext highlighter-rouge">CloudStorageService</code>实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"!default"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CloudStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.bucket:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">bucket</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.access-key:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">accessKey</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.cloud.access-secret:}"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">accessSecret</span><span class="o">;</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Initializing cloud storage..."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">openInputStream</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"File not found: "</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">store</span><span class="o">(</span><span class="nc">String</span> <span class="n">extName</span><span class="o">,</span> <span class="nc">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// TODO:</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"Unable to access cloud storage."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LocalStorageService</code>使用了条件装配<code class="language-plaintext highlighter-rouge">@Profile("default")</code>，即默认启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>，而<code class="language-plaintext highlighter-rouge">CloudStorageService</code>使用了条件装配<code class="language-plaintext highlighter-rouge">@Profile("!default")</code>，即非<code class="language-plaintext highlighter-rouge">default</code>环境时，自动启用<code class="language-plaintext highlighter-rouge">CloudStorageService</code>。这样，一套代码，就实现了不同环境启用不同的配置。</p>

<h2 id="conditional">Conditional</h2>

<p>使用Profile能根据不同的Profile进行条件装配，但是Profile控制比较糙，如果想要精细控制，用Profile就很难实现。</p>

<p>Spring本身提供了条件装配<code class="language-plaintext highlighter-rouge">@Conditional</code>，但是要自己编写比较复杂的<code class="language-plaintext highlighter-rouge">Condition</code>来做判断，比较麻烦。Spring Boot则准备好了几个非常有用的条件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>：如果有指定的配置，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnBean</code>：如果有指定的Bean，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code>：如果没有指定的Bean，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingClass</code>：如果没有指定的Class，条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnWebApplication</code>：在Web环境中条件生效；</li>
  <li><code class="language-plaintext highlighter-rouge">@ConditionalOnExpression</code>：根据表达式判断条件是否生效。</li>
</ul>

<p>以最常用的<code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>为例，把上一节的<code class="language-plaintext highlighter-rouge">StorageService</code>改写如下。首先，定义配置<code class="language-plaintext highlighter-rouge">storage.type=xxx</code>，用来判断条件，默认为<code class="language-plaintext highlighter-rouge">local</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">${STORAGE_TYPE:local}</span>
</code></pre></div></div>

<p>设定为<code class="language-plaintext highlighter-rouge">local</code>时，启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"local"</span><span class="o">,</span> <span class="n">matchIfMissing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LocalStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LocalStorageService</code>的注解，当指定配置为<code class="language-plaintext highlighter-rouge">local</code>，或者配置不存在，均启用<code class="language-plaintext highlighter-rouge">LocalStorageService</code>。</p>

<p>设定为<code class="language-plaintext highlighter-rouge">aws</code>时，启用<code class="language-plaintext highlighter-rouge">AwsStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"aws"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>设定为<code class="language-plaintext highlighter-rouge">aliyun</code>时，启用<code class="language-plaintext highlighter-rouge">AliyunStorageService</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"storage.type"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"aliyun"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AliyunStorageService</span> <span class="kd">implements</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>：当指定的配置属性存在且符合预期时，条件生效。</p>

<p><strong>常用属性:</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的属性名称。</li>
  <li><code class="language-plaintext highlighter-rouge">havingValue</code>: 属性值必须与此值匹配才生效。</li>
  <li><code class="language-plaintext highlighter-rouge">matchIfMissing</code>: 如果属性不存在，是否匹配。默认值是 <code class="language-plaintext highlighter-rouge">false</code>。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"feature.enabled"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"true"</span><span class="o">,</span> <span class="n">matchIfMissing</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeatureConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnBean</code>：当指定的Bean存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code> 或 <code class="language-plaintext highlighter-rouge">type</code>: 要检查的Bean类型。</li>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的Bean名称。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnBean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"myBean"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanDependentConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code>：当指定的Bean不存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code> 或 <code class="language-plaintext highlighter-rouge">type</code>: 要检查的Bean类型。</li>
  <li><code class="language-plaintext highlighter-rouge">name</code>: 要检查的Bean名称。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"myBean"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MissingBeanConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingClass</code>：当指定的类不存在时，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code>: 要检查的类名。</li>
</ul>

<p><strong>示例:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnMissingClass</span><span class="o">(</span><span class="s">"com.example.SomeClass"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MissingClassConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnWebApplication</code>：在Web应用环境中，条件生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code>: Web应用的类型，可以是 <code class="language-plaintext highlighter-rouge">SERVLET</code> 或 <code class="language-plaintext highlighter-rouge">REACTIVE</code>。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnWebApplication</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">ConditionalOnWebApplication</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">SERVLET</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebAppConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnExpression</code>：根据SpEL表达式判断条件是否生效。</p>

<p><strong>常用属性:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code>: SpEL表达式。</li>
</ul>

<p><strong>示例:</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnExpression</span><span class="o">(</span><span class="s">"'${env}'.equals('dev')"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DevEnvConfig</span> <span class="o">{</span>
    <span class="c1">// 配置内容</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="加载配置文件">加载配置文件</h2>

<p>加载配置文件可以直接使用注解<code class="language-plaintext highlighter-rouge">@Value</code>，例如，我们定义了一个最大允许上传的文件大小配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="m">102400</span>
</code></pre></div></div>

<p>在某个<code class="language-plaintext highlighter-rouge">FileUploader</code>里，需要获取该配置，可使用<code class="language-plaintext highlighter-rouge">@Value</code>注入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileUploader</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local.max-size:102400}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>

    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在另一个<code class="language-plaintext highlighter-rouge">UploadFilter</code>中，因为要检查文件的MD5，同时也要检查输入流的大小，因此，也需要该配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${storage.local.max-size:100000}"</span><span class="o">)</span>
    <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>

    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>多次引用同一个<code class="language-plaintext highlighter-rouge">@Value</code>不但麻烦，而且<code class="language-plaintext highlighter-rouge">@Value</code>使用字符串，缺少编译器检查，容易造成多处引用不一致（例如，<code class="language-plaintext highlighter-rouge">UploadFilter</code>把缺省值误写为<code class="language-plaintext highlighter-rouge">100000</code>）。</p>

<p>为了更好地管理配置，Spring Boot允许创建一个Bean，持有一组配置，并由Spring Boot自动注入。</p>

<p>假设在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加了如下配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="c1"># 文件存储根目录:</span>
    <span class="na">root-dir</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_ROOT:/var/storage}</span>
    <span class="c1"># 最大文件大小，默认100K:</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_MAX_SIZE:102400}</span>
    <span class="c1"># 是否允许空文件:</span>
    <span class="na">allow-empty</span><span class="pi">:</span> <span class="no">false</span>
    <span class="c1"># 允许的文件类型:</span>
    <span class="na">allow-types</span><span class="pi">:</span> <span class="s">jpg, png, gif</span>
</code></pre></div></div>

<p>可以首先定义一个Java Bean，持有该组配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span><span class="c1">//注意使用驼峰替代横线</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

    <span class="c1">// TODO: getters and setters</span>
<span class="o">}</span>
</code></pre></div></div>

<p>保证Java Bean的属性名称与配置一致即可。然后，添加两个注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"storage.local"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConfigurationProperties("storage.local")</code>表示将从配置项<code class="language-plaintext highlighter-rouge">storage.local</code>读取该项的所有子项配置，并且，<code class="language-plaintext highlighter-rouge">@Configuration</code>表示<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>也是一个Spring管理的Bean，可直接注入到其他Bean中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageService</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">StorageConfiguration</span> <span class="n">storageConfig</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: root-dir = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getRootDir</span><span class="o">());</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: max-size = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getMaxSize</span><span class="o">());</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Load configuration: allowed-types = {}"</span><span class="o">,</span> <span class="n">storageConfig</span><span class="o">.</span><span class="na">getAllowTypes</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样一来，引入<code class="language-plaintext highlighter-rouge">storage.local</code>的相关配置就很容易了，因为只需要注入<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>这个Bean，这样可以由编译器检查类型，无需编写重复的<code class="language-plaintext highlighter-rouge">@Value</code>注解。</p>

<hr />

<p>如果你的配置项有嵌套结构，可以在Java Bean中定义对应的嵌套类。下面是一个示例，其中包括嵌套配置项的处理。</p>

<p>首先，你的<code class="language-plaintext highlighter-rouge">application.yml</code>配置文件内容如下：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">storage</span><span class="pi">:</span>
  <span class="na">local</span><span class="pi">:</span>
    <span class="na">root-dir</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_ROOT:/var/storage}</span>
    <span class="na">max-size</span><span class="pi">:</span> <span class="s">${STORAGE_LOCAL_MAX_SIZE:102400}</span>
    <span class="na">allow-empty</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">allow-types</span><span class="pi">:</span> <span class="s">jpg, png, gif</span>
  <span class="na">remote</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">${STORAGE_REMOTE_URL:http://example.com}</span>
    <span class="na">timeout</span><span class="pi">:</span> <span class="s">${STORAGE_REMOTE_TIMEOUT:5000}</span>
</code></pre></div></div>

<p>接下来，你需要定义对应的Java Bean类来表示这个配置。可以将<code class="language-plaintext highlighter-rouge">local</code>和<code class="language-plaintext highlighter-rouge">remote</code>配置项分别封装到嵌套的类中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.context.properties.ConfigurationProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"storage"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StorageConfiguration</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">Local</span> <span class="n">local</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Remote</span> <span class="n">remote</span><span class="o">;</span>

    <span class="c1">// Getters and setters for `local` and `remote`</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Local</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

        <span class="c1">// Getters and setters for `rootDir`, `maxSize`, `allowEmpty`, and `allowTypes`</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Remote</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">url</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">;</span>

        <span class="c1">// Getters and setters for `url` and `timeout`</span>
    <span class="o">}</span>

    <span class="c1">// Getters and setters for `local` and `remote`</span>
    <span class="kd">public</span> <span class="nc">Local</span> <span class="nf">getLocal</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">local</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLocal</span><span class="o">(</span><span class="nc">Local</span> <span class="n">local</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">local</span> <span class="o">=</span> <span class="n">local</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Remote</span> <span class="nf">getRemote</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">remote</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRemote</span><span class="o">(</span><span class="nc">Remote</span> <span class="n">remote</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">remote</span> <span class="o">=</span> <span class="n">remote</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在上述代码中：</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Configuration</code>注解表示<code class="language-plaintext highlighter-rouge">StorageConfiguration</code>是一个Spring管理的Bean。</li>
  <li><code class="language-plaintext highlighter-rouge">@ConfigurationProperties("storage")</code>注解表示从<code class="language-plaintext highlighter-rouge">storage</code>前缀开始读取配置项。</li>
  <li><code class="language-plaintext highlighter-rouge">Local</code>和<code class="language-plaintext highlighter-rouge">Remote</code>是两个静态嵌套类，用于表示嵌套的配置项。</li>
</ul>

<p>通过这种方式，Spring Boot会自动将配置文件中的值绑定到相应的Java Bean中。</p>

<p>你还需要为嵌套类定义getter和setter方法，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Local</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">;</span>

    <span class="c1">// Getters and setters</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getRootDir</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRootDir</span><span class="o">(</span><span class="nc">String</span> <span class="n">rootDir</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">rootDir</span> <span class="o">=</span> <span class="n">rootDir</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMaxSize</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMaxSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">maxSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxSize</span> <span class="o">=</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAllowEmpty</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAllowEmpty</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">allowEmpty</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">allowEmpty</span> <span class="o">=</span> <span class="n">allowEmpty</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getAllowTypes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">allowTypes</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAllowTypes</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">allowTypes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">allowTypes</span> <span class="o">=</span> <span class="n">allowTypes</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Remote</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">url</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">;</span>

    <span class="c1">// Getters and setters</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getUrl</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">url</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUrl</span><span class="o">(</span><span class="nc">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">url</span> <span class="o">=</span> <span class="n">url</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getTimeout</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">timeout</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTimeout</span><span class="o">(</span><span class="kt">int</span> <span class="n">timeout</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">timeout</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，配置文件中的值就会自动绑定到对应的Java Bean中，并且可以在你的应用程序中通过注入<code class="language-plaintext highlighter-rouge">StorageConfiguration</code> Bean来访问这些配置值。</p>

<h2 id="禁用自动配置">禁用自动配置</h2>

<p>Spring Boot大量使用自动配置和默认配置，极大地减少了代码，通常只需要加上几个注解，并按照默认规则设定一下必要的配置即可。例如，配置JDBC，默认情况下，只需要配置一个<code class="language-plaintext highlighter-rouge">spring.datasource</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:mem:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
</code></pre></div></div>

<p>Spring Boot就会自动创建出<code class="language-plaintext highlighter-rouge">DataSource</code>、<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>、<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>，非常方便。</p>

<p>但是有时候又必须要禁用某些自动配置。例如，系统有主从两个数据库，而Spring Boot的自动配置只能配一个。</p>

<p>这个时候，针对<code class="language-plaintext highlighter-rouge">DataSource</code>相关的自动配置，就必须关掉。需要用<code class="language-plaintext highlighter-rouge">exclude</code>指定需要关掉的自动配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="c1">// 启动自动配置，但排除指定的自动配置:</span>
<span class="nd">@EnableAutoConfiguration</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>或者：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>现在，Spring Boot不再自动创建<code class="language-plaintext highlighter-rouge">DataSource</code>、<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>和<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>了。</p>

<p>还可以通过配置文件禁用：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">autoconfigure</span><span class="pi">:</span>
    <span class="na">exclude</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="s">com.example.autoconfig.MyAutoConfiguration</span>
</code></pre></div></div>

<h2 id="使用自动配置">使用自动配置</h2>

<p><code class="language-plaintext highlighter-rouge">spring.factories </code>这个文件的作用是配置 Spring Boot 的自动配置机制，通过指定自定义的配置类，使得 Spring Boot 能够在应用启动时自动加载和配置该类中的 beans 和相关设置。</p>

<p>具体作用包括：</p>

<ol>
  <li>
    <p><strong>自定义配置</strong>：允许开发者定义应用启动时需要的自定义 bean 和配置信息，确保应用具备所需的功能。</p>
  </li>
  <li>
    <p><strong>简化配置</strong>：通过自动配置，减少手动配置的复杂性，提供开箱即用的功能，提升开发效率。</p>
  </li>
  <li>
    <p><strong>模块化</strong>：可以将应用的不同功能模块分开，方便管理和维护。例如，将与事件传输相关的配置放在 <code class="language-plaintext highlighter-rouge">TransmitterConfig</code> 中。</p>
  </li>
  <li>
    <p><strong>与 Spring Boot 生态兼容</strong>：可以方便地与其他 Spring Boot 自动配置模块结合使用，提供一致的开发体验。</p>
  </li>
</ol>

<p>通常，在应用中使用自动配置能够使得设置更为简洁且易于理解。</p>

<hr />

<p><strong>在自己的模块使用</strong></p>

<p>假设启动类为：<code class="language-plaintext highlighter-rouge">com.test.TestApplication</code>，现在，新建了一个类：<code class="language-plaintext highlighter-rouge">com.test2.Demo</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.test2</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{}</span>
</code></pre></div></div>

<p>想要将这个类注入IOC容器有以下方法：</p>

<ul>
  <li>
    <p>在启动类上打上注释<code class="language-plaintext highlighter-rouge">@Import(Demo.class)</code> ，然后可以为<code class="language-plaintext highlighter-rouge">Demo</code>打上注释<code class="language-plaintext highlighter-rouge">@Configuration</code>，这是可选的。</p>
  </li>
  <li>
    <p>为<code class="language-plaintext highlighter-rouge">Demo</code>打上注释<code class="language-plaintext highlighter-rouge">@Component</code>或其他同类注释，然后在主启动类上指定扫描路径<code class="language-plaintext highlighter-rouge">@ComponentScan(basePackages = {"com.test", "com.test2"})</code>。</p>
  </li>
  <li>
    <p>使用XMl配置。<code class="language-plaintext highlighter-rouge">&lt;beans&gt;&lt;bean id="demo" class="com.test2.Demo"/&gt;&lt;/beans&gt;</code></p>
  </li>
  <li>
    <p>在resources下面创建<code class="language-plaintext highlighter-rouge">META-INF/spring.factories</code>文件，内容为：</p>

    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
 com.test2.Demo
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<p>使用 Spring Boot 的自动配置机制，如果其他项目引入了你的包，它会根据 <code class="language-plaintext highlighter-rouge">spring.factories</code> 文件中的配置自动加载你定义的配置类。这是 Spring Boot 的一个重要特性，使得你的模块可以开箱即用。</p>

<p>当主启动类上使用了 <code class="language-plaintext highlighter-rouge">@EnableAutoConfiguration</code> 时，Spring Boot 会在启动过程中读取依赖包中的 <code class="language-plaintext highlighter-rouge">spring.factories</code> 文件，以确定需要自动装配哪些配置类。主启动类通常会使用 <code class="language-plaintext highlighter-rouge">@SpringBootApplication</code> 注解，其中包含了 <code class="language-plaintext highlighter-rouge">@EnableAutoConfiguration</code>。</p>

<ul>
  <li>在应用启动时，Spring Boot 会扫描类路径下的所有 JAR 包，查找 <code class="language-plaintext highlighter-rouge">META-INF/spring.factories</code> 文件。这个文件中列出了所有需要自动配置的类。</li>
  <li>Spring Boot 会根据 <code class="language-plaintext highlighter-rouge">spring.factories</code> 文件中的配置，尝试加载列出的自动配置类。这些类通常使用条件注解来判断是否应该被实例化和配置。</li>
  <li>自动配置类中的条件注解（如 <code class="language-plaintext highlighter-rouge">@ConditionalOnClass</code>、<code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code> 等）会根据当前环境的条件进行评估，决定是否创建相应的 Beans。</li>
</ul>

<p><strong>关系与优先级</strong></p>

<p>在 Spring Boot 中，依赖包内的 <code class="language-plaintext highlighter-rouge">application.yml</code> 和主模块的 <code class="language-plaintext highlighter-rouge">application.yml</code> 之间的关系主要体现在配置的优先级和覆盖规则上。</p>

<p>Spring Boot 会按照一定的顺序加载配置文件，通常包括：</p>

<ul>
  <li>主模块的 <code class="language-plaintext highlighter-rouge">src/main/resources/application.yml</code></li>
  <li>依赖包中的 <code class="language-plaintext highlighter-rouge">META-INF/application.yml</code></li>
  <li>依赖包中的 <code class="language-plaintext highlighter-rouge">application.yml</code></li>
</ul>

<p><strong>优先级</strong>：</p>

<ul>
  <li>主模块中的 <code class="language-plaintext highlighter-rouge">application.yml</code> 通常具有更高的优先级，意味着如果同一个属性在主模块的配置文件和依赖包的配置文件中都有定义，主模块中的值将覆盖依赖包中的值。</li>
  <li>这使得主模块能够定制或修改依赖包提供的默认配置。</li>
</ul>

<p><strong>注解的使用</strong></p>

<p>可以在依赖包中使用 <code class="language-plaintext highlighter-rouge">@SpringBootApplication</code>。在创建自定义 Spring Boot Starter 时，可以在 Starter 内部使用 <code class="language-plaintext highlighter-rouge">@SpringBootApplication</code>，但通常建议将其放在主应用中，而不是依赖包中。</p>

<p><strong>注意事项</strong></p>

<ul>
  <li><strong>包扫描</strong>：<code class="language-plaintext highlighter-rouge">@SpringBootApplication</code> 注解默认会扫描该注解所在包及其子包。如果在依赖包中使用，确保该包结构与主应用的包结构相符，以便能够正确加载所有组件。</li>
  <li><strong>启动类冲突</strong>：如果多个依赖包中都有 <code class="language-plaintext highlighter-rouge">@SpringBootApplication</code> 注解的启动类，可能会导致启动冲突。在这种情况下，通常建议只有一个启动类。</li>
  <li><strong>避免不必要的复杂性</strong>：如果你的依赖包只是提供一些组件或服务，建议不在依赖包中使用 <code class="language-plaintext highlighter-rouge">@SpringBootApplication</code>，而是在主应用中使用，并通过配置类或其他方式来加载依赖包中的组件。</li>
</ul>

<p>基本上你可以在依赖包中使用所有的 Spring Boot 注解，一般情况下，只会使用 <code class="language-plaintext highlighter-rouge">@ComponentScan</code>指定包扫描注解。</p>

<hr />

<p>要创建一个自定义的自动配置类，可以按照以下步骤进行：</p>

<p><strong>创建配置类</strong>：首先，定义一个配置类，并添加 <code class="language-plaintext highlighter-rouge">@Configuration</code> 注解。这将告知 Spring Boot 这是一个配置类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCustomConfig</span> <span class="o">{</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MyService</span> <span class="nf">myService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyService</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// 可以添加更多的 bean</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>定义自动配置类</strong>：创建一个自动配置类，通常与其他配置文件放在同一包下，或放在 <code class="language-plaintext highlighter-rouge">spring.factories</code> 文件中指定的路径中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.autoconfig</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyAutoConfiguration</span> <span class="o">{</span>
    <span class="c1">// 可选择定义 @Bean 方法</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>创建 <code class="language-plaintext highlighter-rouge">spring.factories</code> 文件</strong>：在 <code class="language-plaintext highlighter-rouge">src/main/resources/META-INF</code> 目录下创建 <code class="language-plaintext highlighter-rouge">spring.factories</code> 文件，指定自动配置类。</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="p">=</span><span class="se">\
</span><span class="s">com.example.autoconfig.MyAutoConfiguration</span>
</code></pre></div></div>

<hr />

<p>如果你有多个配置类，并希望它们都能作为自动配置的一部分，可以按照以下方式组织和实现：</p>

<p><strong>创建多个配置类</strong>：为每个配置功能创建独立的配置类，并使用 <code class="language-plaintext highlighter-rouge">@Configuration</code> 注解标记。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyServiceConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MyService</span> <span class="nf">myService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyService</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnotherServiceConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">AnotherService</span> <span class="nf">anotherService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AnotherService</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>自动配置类</strong>：创建一个主的自动配置类，将所有其他配置类导入到该类中。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.example.autoconfig</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Import</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@Import</span><span class="o">({</span><span class="nc">MyServiceConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">AnotherServiceConfig</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyAutoConfiguration</span> <span class="o">{</span>
    <span class="c1">// 可以选择定义更多的 bean</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">spring.factories</code> 文件</strong>：确保在 <code class="language-plaintext highlighter-rouge">spring.factories</code> 文件中仅指向主自动配置类。</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="p">=</span><span class="se">\
</span><span class="s">com.example.autoconfig.MyAutoConfiguration</span>
</code></pre></div></div>

<p><strong>条件加载（可选）</strong>：如果需要根据特定条件加载某些配置类，可以在配置类中使用条件注解，如 <code class="language-plaintext highlighter-rouge">@ConditionalOnProperty</code>、<code class="language-plaintext highlighter-rouge">@ConditionalOnClass</code> 等。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.condition.ConditionalOnProperty</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@ConditionalOnProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"my.feature.enabled"</span><span class="o">,</span> <span class="n">havingValue</span> <span class="o">=</span> <span class="s">"true"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFeatureConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MyFeature</span> <span class="nf">myFeature</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyFeature</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p><strong>使用多个启动配置</strong></p>

<p>如果你想在 <code class="language-plaintext highlighter-rouge">spring.factories</code> 文件中定义多个自动配置类，可以在同一行中用逗号分隔多个类名，或者在新的一行中列出它们。以下是几种常见的写法：</p>

<p>方法一：用逗号分隔</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="p">=</span><span class="se">\
</span>  <span class="s">com.example.autoconfig.FirstAutoConfiguration,</span><span class="se">\
</span>  <span class="s">com.example.autoconfig.SecondAutoConfiguration</span>
</code></pre></div></div>

<p>方法二：逐行列出</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="p">=</span><span class="se">\
</span>  <span class="s">com.example.autoconfig.FirstAutoConfiguration</span>
<span class="err">com.example.autoconfig.SecondAutoConfiguration</span>
</code></pre></div></div>

<p>自动配置的顺序可能会影响行为，确保在定义时考虑到各个配置类之间的依赖关系。</p>

<h2 id="主从数据库">主从数据库</h2>

<p>要实现主从数据库支持，首先需要把主从数据库配置写到<code class="language-plaintext highlighter-rouge">application.yml</code>中，仍然按照Spring Boot默认的格式写，但<code class="language-plaintext highlighter-rouge">datasource</code>改为<code class="language-plaintext highlighter-rouge">datasource-master</code>和<code class="language-plaintext highlighter-rouge">datasource-slave</code>：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource-master</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
  <span class="na">datasource-slave</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:hsqldb:file:testdb</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
    <span class="na">dirver-class-name</span><span class="pi">:</span> <span class="s">org.hsqldb.jdbc.JDBCDriver</span>
</code></pre></div></div>

<p>两个数据库实际上是同一个库。如果使用MySQL，可以创建一个只读用户，作为<code class="language-plaintext highlighter-rouge">datasource-slave</code>的用户来模拟一个从库。</p>

<p>分别创建两个HikariCP的<code class="language-plaintext highlighter-rouge">DataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MasterDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-master"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SlaveDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-slave"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意到上述class并未添加<code class="language-plaintext highlighter-rouge">@Configuration</code>和<code class="language-plaintext highlighter-rouge">@Component</code>，要使之生效，可以使用<code class="language-plaintext highlighter-rouge">@Import</code>导入：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">MasterDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">SlaveDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述两个<code class="language-plaintext highlighter-rouge">DataSource</code>的Bean名称分别为<code class="language-plaintext highlighter-rouge">masterDataSource</code>和<code class="language-plaintext highlighter-rouge">slaveDataSource</code>，我们还需要一个最终的<code class="language-plaintext highlighter-rouge">@Primary</code>标注的<code class="language-plaintext highlighter-rouge">DataSource</code>，它采用Spring提供的<code class="language-plaintext highlighter-rouge">AbstractRoutingDataSource</code>，代码实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceContext</span> <span class="kd">implements</span> <span class="nc">AutoCloseable</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setDataSourceRoutingKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getDataSourceRoutingKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">RoutingDataSource</code>本身并不是真正的<code class="language-plaintext highlighter-rouge">DataSource</code>，它通过Map关联一组<code class="language-plaintext highlighter-rouge">DataSource</code>，下面的代码创建了包含两个<code class="language-plaintext highlighter-rouge">DataSource</code>的<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>，关联的key分别为<code class="language-plaintext highlighter-rouge">masterDataSource</code>和<code class="language-plaintext highlighter-rouge">slaveDataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">masterDataSource</span><span class="o">,</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">slaveDataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RoutingDataSource</span><span class="o">();</span>
        <span class="c1">// 关联两个DataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setTargetDataSources</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="s">"masterDataSource"</span><span class="o">,</span> <span class="n">masterDataSource</span><span class="o">,</span>
                <span class="s">"slaveDataSource"</span><span class="o">,</span> <span class="n">slaveDataSource</span><span class="o">));</span>
        <span class="c1">// 默认使用masterDataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setDefaultTargetDataSource</span><span class="o">(</span><span class="n">masterDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSourceTransactionManager</span> <span class="nf">dataSourceTransactionManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>仍然需要自己创建<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>和<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>，注入的是标记为<code class="language-plaintext highlighter-rouge">@Primary</code>的<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>。</p>

<p>这样，通过如下的代码就可以切换<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>底层使用的真正的<code class="language-plaintext highlighter-rouge">DataSource</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
<span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(...);</span>
</code></pre></div></div>

<p>只不过写代码切换DataSource即麻烦又容易出错，更好的方式是通过注解配合AOP实现自动切换，这样，客户端代码实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
	<span class="nd">@RoutingWithSlave</span> <span class="c1">// &lt;-- 指示在此方法中使用slave数据库</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>自定义的注解 <code class="language-plaintext highlighter-rouge">@RoutingWithSlave</code> 的作用只是调用 <code class="language-plaintext highlighter-rouge">RoutingDataSourceContext</code> 的构造方法向 <code class="language-plaintext highlighter-rouge">ThreadLocal</code> 储存了字符串 <code class="language-plaintext highlighter-rouge">slaveDataSource</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="nd">@interface</span> <span class="nc">RoutingWithSlave</span><span class="o">{</span>
<span class="o">}</span>
<span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingAspect</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(routingWithSlave)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">RoutingWithSlave</span> <span class="n">routingWithSlave</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意这里使用了形参名称，注意编译时添加<code class="language-plaintext highlighter-rouge">-parameters</code>参数，保留形参名称，参见<a href="/2021/09/14/JavaWeb/#MVC">设计MVC框架</a>。<code class="language-plaintext highlighter-rouge">-parameters</code>的作用是在编译后的类文件中<strong>保留方法参数的名称</strong>。默认情况下，Java编译器在编译过程中会丢弃方法参数的名称，而只保留参数的顺序。</p>

<p>或者使用完全限定名：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(com.aotmd.RoutingWithSlave)"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span>
        <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
    <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果想要确认是否真的切换了<code class="language-plaintext highlighter-rouge">DataSource</code>，可以覆写<code class="language-plaintext highlighter-rouge">determineTargetDataSource()</code>方法并打印出<code class="language-plaintext highlighter-rouge">DataSource</code>的名称：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">DataSource</span> <span class="nf">determineTargetDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">determineTargetDataSource</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"determin target datasource: {}"</span><span class="o">,</span> <span class="n">ds</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以用一个图表示创建的DataSource以及相关Bean的关系：</p>

<pre><code class="language-ascii">┌────────────────────┐       ┌──────────────────┐
│@Primary            │&lt;──────│   JdbcTemplate   │
│RoutingDataSource   │       └──────────────────┘
│ ┌────────────────┐ │       ┌──────────────────┐
│ │MasterDataSource│ │&lt;──────│DataSource        │
│ └────────────────┘ │       │TransactionManager│
│ ┌────────────────┐ │       └──────────────────┘
│ │SlaveDataSource │ │
│ └────────────────┘ │
└────────────────────┘
</code></pre>

<p><code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>引用的都是<code class="language-plaintext highlighter-rouge">RoutingDataSource</code>，所以，这种设计的一个限制就是：在一个请求中，一旦切换了内部数据源，在同一个事务中，不能再切到另一个，否则，<code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>和<code class="language-plaintext highlighter-rouge">JdbcTemplate</code>操作的就不是同一个数据库连接。</p>

<p>完整代码：</p>

<p><code class="language-plaintext highlighter-rouge">RoutingDataSource.java</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Around</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Aspect</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.jdbc.DataSourceProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.context.properties.ConfigurationProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Primary</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceTransactionManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Retention</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.annotation.Target</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">MasterDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-master"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SlaveDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span>
    <span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.datasource-slave"</span><span class="o">)</span>
    <span class="nc">DataSourceProperties</span> <span class="nf">dataSourceProperties</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceProperties</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSourceProperties"</span><span class="o">)</span> <span class="nc">DataSourceProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">props</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 从ThreadLocal中取出key:</span>
        <span class="k">return</span> <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">getDataSourceRoutingKey</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">DataSource</span> <span class="nf">determineTargetDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">determineTargetDataSource</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"determin target datasource: {}"</span><span class="o">,</span> <span class="n">ds</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceContext</span> <span class="kd">implements</span> <span class="nc">AutoCloseable</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setDataSourceRoutingKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getDataSourceRoutingKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ctx</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">RoutingDataSourceConfiguration</span> <span class="o">{</span>
    <span class="nd">@Primary</span>
    <span class="nd">@Bean</span>
    <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">(</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"masterDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">masterDataSource</span><span class="o">,</span>
            <span class="nd">@Autowired</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">)</span> <span class="nc">DataSource</span> <span class="n">slaveDataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">var</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RoutingDataSource</span><span class="o">();</span>
        <span class="c1">// 关联两个DataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setTargetDataSources</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="s">"masterDataSource"</span><span class="o">,</span> <span class="n">masterDataSource</span><span class="o">,</span>
                <span class="s">"slaveDataSource"</span><span class="o">,</span> <span class="n">slaveDataSource</span><span class="o">));</span>
        <span class="c1">// 默认使用masterDataSource:</span>
        <span class="n">ds</span><span class="o">.</span><span class="na">setDefaultTargetDataSource</span><span class="o">(</span><span class="n">masterDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">JdbcTemplate</span> <span class="nf">jdbcTemplate</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">DataSourceTransactionManager</span> <span class="nf">dataSourceTransactionManager</span><span class="o">(</span><span class="nd">@Autowired</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="no">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="no">METHOD</span><span class="o">)</span>
<span class="nd">@interface</span> <span class="nc">RoutingWithSlave</span><span class="o">{</span>

<span class="o">}</span>
<span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">class</span> <span class="nc">RoutingAspect</span> <span class="o">{</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"@annotation(routingWithSlave)"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">routingWithDataSource</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">RoutingWithSlave</span> <span class="n">routingWithSlave</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="nc">RoutingDataSourceContext</span><span class="o">.</span><span class="na">setDataSourceRoutingKey</span><span class="o">(</span><span class="s">"slaveDataSource"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Application.java</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.aotmd"</span><span class="o">)</span>
<span class="nd">@SpringBootApplication</span><span class="o">(</span><span class="n">exclude</span> <span class="o">=</span> <span class="nc">DataSourceAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">({</span> <span class="nc">MasterDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">SlaveDataSourceConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Bean</span>
    <span class="nc">WebMvcConfigurer</span> <span class="nf">createWebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="nc">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 映射路径`/static/`到classpath路径:</span>
                <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">"/static/**"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">"classpath:/static/"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>访问数据库可以用之前的。</p>

<h2 id="filter">Filter</h2>

<p>在Spring Boot中，添加一个<code class="language-plaintext highlighter-rouge">Filter</code>更简单了，可以做到零配置。</p>

<p>Spring Boot会自动扫描所有的<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>类型的Bean，然后，将它们返回的<code class="language-plaintext highlighter-rouge">Filter</code>自动注册到Servlet容器中，无需任何配置。</p>

<p>以<code class="language-plaintext highlighter-rouge">AuthFilter</code>为例，首先编写一个<code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>，它继承自<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthFilterRegistrationBean</span> <span class="kd">extends</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Filter</span> <span class="nf">getFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setOrder</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthFilter</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">class</span> <span class="nc">AuthFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>本身不是<code class="language-plaintext highlighter-rouge">Filter</code>，它实际上是<code class="language-plaintext highlighter-rouge">Filter</code>的工厂。Spring Boot会调用<code class="language-plaintext highlighter-rouge">getFilter()</code>，把返回的<code class="language-plaintext highlighter-rouge">Filter</code>注册到Servlet容器中。因为可以在<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code>中注入需要的资源，然后，在返回的<code class="language-plaintext highlighter-rouge">AuthFilter</code>中，这个内部类可以引用外部类的所有字段，自然也包括注入的<code class="language-plaintext highlighter-rouge">UserService</code>，所以，整个过程完全基于Spring的IoC容器完成。</p>

<p><code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>使用了<code class="language-plaintext highlighter-rouge">setOrder(10)</code>，因为Spring Boot支持给多个<code class="language-plaintext highlighter-rouge">Filter</code>排序，<strong>数字小的在前面</strong>，所以，多个<code class="language-plaintext highlighter-rouge">Filter</code>的顺序是可以固定的。</p>

<p>再编写一个<code class="language-plaintext highlighter-rouge">ApiFilter</code>，专门过滤<code class="language-plaintext highlighter-rouge">/api/*</code>这样的URL。首先编写一个<code class="language-plaintext highlighter-rouge">ApiFilterRegistrationBean</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiFilterRegistrationBean</span> <span class="kd">extends</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">setOrder</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">setFilter</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApiFilter</span><span class="o">());</span>
        <span class="n">setUrlPatterns</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">class</span> <span class="nc">ApiFilter</span> <span class="kd">implements</span> <span class="nc">Filter</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">ApiFilterRegistrationBean</code>和<code class="language-plaintext highlighter-rouge">AuthFilterRegistrationBean</code>又有所不同。因为要过滤URL，而不是针对所有URL生效，因此，在<code class="language-plaintext highlighter-rouge">@PostConstruct</code>方法中，通过<code class="language-plaintext highlighter-rouge">setFilter()</code>设置一个<code class="language-plaintext highlighter-rouge">Filter</code>实例后，再调用<code class="language-plaintext highlighter-rouge">setUrlPatterns()</code>传入要过滤的URL列表。</p>

<hr />

<p><code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 是 Spring Framework 中的一个类，用于注册和配置 Servlet 过滤器。它提供了一些常用的方法来控制过滤器的注册和行为。以下是 <code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 的一些常用方法及其简要说明：</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">setFilter(Filter filter)</code></strong>：设置过滤器实例。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="n">registrationBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;&gt;();</span>
<span class="n">registrationBean</span><span class="o">.</span><span class="na">setFilter</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyFilter</span><span class="o">());</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setUrlPatterns(Collection&lt;String&gt; urlPatterns)</code></strong>：设置过滤器的 URL 模式。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setUrlPatterns</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">addUrlPatterns(String... urlPatterns)</code></strong>：添加过滤器的 URL 模式。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">addUrlPatterns</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setServletNames(Collection&lt;String&gt; servletNames)</code></strong>：设置过滤器要应用的 Servlet 名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setServletNames</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"myServlet"</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">addServletNames(String... servletNames)</code></strong>：添加过滤器要应用的 Servlet 名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">addServletNames</span><span class="o">(</span><span class="s">"myServlet"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setOrder(int order)</code></strong>：设置过滤器的执行顺序，值越小优先级越高。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setDispatcherTypes(EnumSet&lt;DispatcherType&gt; dispatcherTypes)</code></strong>：设置过滤器的分发类型（如 <code class="language-plaintext highlighter-rouge">REQUEST</code>、<code class="language-plaintext highlighter-rouge">FORWARD</code>、<code class="language-plaintext highlighter-rouge">INCLUDE</code> 等）。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setDispatcherTypes</span><span class="o">(</span><span class="nc">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">,</span> <span class="nc">DispatcherType</span><span class="o">.</span><span class="na">FORWARD</span><span class="o">));</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setAsyncSupported(boolean isAsyncSupported)</code></strong>：设置过滤器是否支持异步操作。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setAsyncSupported</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setName(String name)</code></strong>：设置过滤器的名称。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">registrationBean</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"myFilter"</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">setInitParameters(Map&lt;String, String&gt; initParameters)</code></strong>：设置过滤器的初始化参数。
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">initParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">initParams</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"param1"</span><span class="o">,</span> <span class="s">"value1"</span><span class="o">);</span>
<span class="n">registrationBean</span><span class="o">.</span><span class="na">setInitParameters</span><span class="o">(</span><span class="n">initParams</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>以下是一个完整的示例，展示如何使用 <code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 来注册和配置一个过滤器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.web.servlet.FilterRegistrationBean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.Filter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.FilterChain</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.FilterConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.EnumSet</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FilterConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="nf">myFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">FilterRegistrationBean</span><span class="o">&lt;</span><span class="nc">Filter</span><span class="o">&gt;</span> <span class="n">registrationBean</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FilterRegistrationBean</span><span class="o">&lt;&gt;();</span>
        
        <span class="nc">Filter</span> <span class="n">myFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Filter</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">FilterConfig</span> <span class="n">filterConfig</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>
                <span class="c1">// 初始化代码</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
                    <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
                <span class="c1">// 过滤器逻辑</span>
                <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
                <span class="c1">// 销毁代码</span>
            <span class="o">}</span>
        <span class="o">};</span>
        
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setFilter</span><span class="o">(</span><span class="n">myFilter</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setUrlPatterns</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"/api/*"</span><span class="o">));</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setDispatcherTypes</span><span class="o">(</span><span class="nc">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">));</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setAsyncSupported</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"myFilter"</span><span class="o">);</span>
        <span class="n">registrationBean</span><span class="o">.</span><span class="na">setInitParameters</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"param1"</span><span class="o">,</span> <span class="s">"value1"</span><span class="o">));</span>
        
        <span class="k">return</span> <span class="n">registrationBean</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个示例中，<code class="language-plaintext highlighter-rouge">FilterRegistrationBean</code> 被用来注册一个简单的过滤器，并设置了一些常见的配置选项。</p>

<h2 id="在项目启动后运行一段代码">在项目启动后运行一段代码</h2>

<p>在Spring Boot项目启动后运行一段代码，你可以使用<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口。两者的用法类似，都可以在应用程序启动完成后执行特定代码。</p>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">CommandLineRunner</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">CommandLineRunner</code>接口提供了一个<code class="language-plaintext highlighter-rouge">run</code>方法，在Spring Boot启动后立即执行。你可以创建一个实现此接口的类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 在应用程序启动后运行的代码</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Spring Boot 应用程序已启动，执行自定义代码..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">ApplicationRunner</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口与<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>类似，但它接受一个<code class="language-plaintext highlighter-rouge">ApplicationArguments</code>对象，可以更方便地访问应用程序参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.ApplicationArguments</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.ApplicationRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplicationRunner</span> <span class="kd">implements</span> <span class="nc">ApplicationRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">// 在应用程序启动后运行的代码</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Spring Boot 应用程序已启动，执行自定义代码..."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果有多个<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>实现，并且希望它们按特定顺序执行，你可以实现<code class="language-plaintext highlighter-rouge">Ordered</code>接口或使用<code class="language-plaintext highlighter-rouge">@Order</code>注解。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.core.annotation.Order</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner1</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"第一个运行的 CommandLineRunner"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="nd">@Order</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCommandLineRunner2</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"第二个运行的 CommandLineRunner"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样，<code class="language-plaintext highlighter-rouge">MyCommandLineRunner1</code>将会在<code class="language-plaintext highlighter-rouge">MyCommandLineRunner2</code>之前执行。</p>

<p>在Spring Boot应用启动后运行代码的两种常用方法是实现<code class="language-plaintext highlighter-rouge">CommandLineRunner</code>或<code class="language-plaintext highlighter-rouge">ApplicationRunner</code>接口。选择其中之一，并将所需逻辑放入<code class="language-plaintext highlighter-rouge">run</code>方法中。通过实现<code class="language-plaintext highlighter-rouge">Ordered</code>接口或使用<code class="language-plaintext highlighter-rouge">@Order</code>注解，你可以控制多个运行器的执行顺序。</p>

<h2 id="集成open-api">集成Open API</h2>

<p><a href="https://www.openapis.org/">Open API</a>是一个标准，它的主要作用是<strong>描述REST API</strong>，既可以作为文档给开发者阅读，又可以让机器根据这个文档自动生成客户端代码等。</p>

<p>在Spring Boot应用中，假设编写了一堆REST API，只需要在<code class="language-plaintext highlighter-rouge">pom.xml</code>中加入以下依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springdoc<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>直接启动应用，打开浏览器输入<code class="language-plaintext highlighter-rouge">http://localhost:8080/swagger-ui.html</code></p>

<p>立刻可以看到自动生成的API文档，点击某个API还可以交互，即输入API参数，点“Try it out”按钮，获得运行结果。</p>

<p>因为引入<code class="language-plaintext highlighter-rouge">springdoc-openapi-ui</code>这个依赖后，它自动引入Swagger UI用来创建API文档。可以给API加入一些描述信息，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="nd">@Operation</span><span class="o">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s">"Get specific user object by it's id."</span><span class="o">)</span>
	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">User</span> <span class="nf">user</span><span class="o">(</span><span class="nd">@Parameter</span><span class="o">(</span><span class="n">description</span> <span class="o">=</span> <span class="s">"id of the user."</span><span class="o">)</span> <span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUserById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
	<span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@Operation</code>可以对API进行描述，<code class="language-plaintext highlighter-rouge">@Parameter</code>可以对参数进行描述，它们的目的是用于生成API文档的描述信息。</p>

<p>大多数情况下，不需要任何配置，就直接得到了一个运行时动态生成的可交互的API文档，该API文档总是和代码保持同步，大大简化了文档的编写工作。</p>

<p>要自定义文档的样式、控制某些API显示等，请参考<a href="https://springdoc.org/">springdoc文档</a>。</p>

<p><strong>配置反向代理</strong></p>

<p>如果在服务器上，用户访问的域名是<code class="language-plaintext highlighter-rouge">https://example.com</code>，但内部是通过类似Nginx这样的反向代理访问实际的Spring Boot应用，比如<code class="language-plaintext highlighter-rouge">http://localhost:8080</code>，这个时候，在页面<code class="language-plaintext highlighter-rouge">https://example.com/swagger-ui.html</code>上，显示的URL仍然是<code class="language-plaintext highlighter-rouge">http://localhost:8080</code>，这样一来，就无法直接在页面执行API，非常不方便。</p>

<p>这是因为Spring Boot内置的Tomcat默认获取的服务器名称是<code class="language-plaintext highlighter-rouge">localhost</code>，端口是实际监听端口，而不是对外暴露的域名和<code class="language-plaintext highlighter-rouge">80</code>或<code class="language-plaintext highlighter-rouge">443</code>端口。要让Tomcat获取到对外暴露的域名等信息，必须在Nginx配置中传入必要的HTTP Header，常用的配置如下：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Nginx配置</span>
<span class="n">server</span> <span class="p">{</span>
    <span class="o">...</span>
    <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
        <span class="n">proxy_pass</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">localhost</span><span class="p">:</span><span class="mi">8080</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$host</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">Proto</span> <span class="vg">$scheme</span><span class="p">;</span>
        <span class="n">proxy_set_header</span> <span class="no">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>然后，在Spring Boot的<code class="language-plaintext highlighter-rouge">application.yml</code>中，加入如下配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="c1"># 实际监听端口:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">8080</span>
  <span class="c1"># 从反向代理读取相关的HTTP Header:</span>
  <span class="na">forward-headers-strategy</span><span class="pi">:</span> <span class="s">native</span>
</code></pre></div></div>

<p>重启Spring Boot应用，即可在Swagger中显示正确的URL。</p>

<p><strong>使用knife4j</strong></p>

<p>在日常开发中，写接口文档是我们必不可少的，而Knife4j就是一个接口文档工具，可以看作是Swagger的升级版，但是界面比Swagger更好看，功能更丰富</p>

<p>早期，swagger-boostrap-ui是1.x版本，如今swagger-bootsrap-ui到2.x，同时也更改名字Knife4j，适用于单体和微服务项目。</p>

<p><a href="https://doc.xiaominfo.com/">Knife4j官方网站</a>。</p>

<p>导入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.github.xiaoymin<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>knife4j-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.0.1<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>创建配置类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.aotmd</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.swagger.annotations.ApiOperation</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.ApiInfoBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.PathSelectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.builders.RequestHandlerSelectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.service.ApiInfo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.service.ApiKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.spi.DocumentationType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.spring.web.plugins.Docket</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">springfox.documentation.swagger2.annotations.EnableSwagger2</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">collect</span><span class="o">.</span><span class="na">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">;</span>



<span class="cm">/**
 * Swagger2配置信息
 * 这里分了两组显示
 * 第一组是api，当作用户端接口
 * 第二组是admin，当作后台管理接口
 * 也可以根据实际情况来减少或者增加组
 */</span>

<span class="nd">@Configuration</span>
<span class="nd">@EnableSwagger2</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Swagger2Config</span><span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">Docket</span> <span class="nf">createRestApi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Docket</span><span class="o">(</span><span class="nc">DocumentationType</span><span class="o">.</span><span class="na">SWAGGER_2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">apiInfo</span><span class="o">(</span><span class="n">apiInfo</span><span class="o">())</span>
                <span class="o">.</span><span class="na">select</span><span class="o">()</span>
                <span class="c1">//加了ApiOperation注解的类，生成接口文档</span>
                <span class="o">.</span><span class="na">apis</span><span class="o">(</span><span class="nc">RequestHandlerSelectors</span><span class="o">.</span><span class="na">withMethodAnnotation</span><span class="o">(</span><span class="nc">ApiOperation</span><span class="o">.</span><span class="na">class</span><span class="o">))</span>
                <span class="c1">//包下的类，生成接口文档</span>
                <span class="c1">//.apis(RequestHandlerSelectors.basePackage("com.aotmd"))</span>
                <span class="o">.</span><span class="na">paths</span><span class="o">(</span><span class="nc">PathSelectors</span><span class="o">.</span><span class="na">any</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                <span class="o">.</span><span class="na">directModelSubstitute</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">securitySchemes</span><span class="o">(</span><span class="n">security</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">ApiInfo</span> <span class="nf">apiInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiInfoBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">"`文档`"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">description</span><span class="o">(</span><span class="s">"文档"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">termsOfServiceUrl</span><span class="o">(</span><span class="s">"*"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">version</span><span class="o">(</span><span class="s">"2.0.0"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ApiKey</span><span class="o">&gt;</span> <span class="nf">security</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">newArrayList</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">ApiKey</span><span class="o">(</span><span class="s">"token"</span><span class="o">,</span> <span class="s">"token"</span><span class="o">,</span> <span class="s">"header"</span><span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实体类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ApiModel</span><span class="o">(</span><span class="s">"用户实体类"</span><span class="o">)</span>
<span class="nd">@Data</span>
<span class="nd">@Builder</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwaggerUser</span> <span class="o">{</span>
    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">"用户Id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="nd">@ApiModelProperty</span><span class="o">(</span><span class="s">"用户名称"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>控制器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Api</span><span class="o">(</span><span class="n">tags</span> <span class="o">=</span> <span class="s">"用户端控制器"</span><span class="o">)</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiController</span> <span class="o">{</span>

    <span class="nd">@ApiOperation</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"获取数据"</span><span class="o">)</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SwaggerUser</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@ApiParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户Id"</span><span class="o">)</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">,</span>
                                  <span class="nd">@ApiParam</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"name"</span><span class="o">,</span><span class="n">value</span> <span class="o">=</span> <span class="s">"用户名称"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SwaggerUser</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">SwaggerUser</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">id</span><span class="o">(</span><span class="n">id</span><span class="o">).</span><span class="na">name</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>运行后访问<code class="language-plaintext highlighter-rouge">http://127.0.0.1:8080/doc.html</code>即可。</p>

<h2 id="集成redis">集成Redis</h2>

<p>在Spring Boot中，要访问Redis，可以直接引入<code class="language-plaintext highlighter-rouge">spring-boot-starter-data-redis</code>依赖，它实际上是Spring Data的一个子项目——Spring Data Redis，主要用到了这几个组件：</p>

<ul>
  <li>Lettuce：一个基于Netty的高性能Redis客户端；</li>
  <li>RedisTemplate：一个类似于JdbcTemplate的接口，用于简化Redis的操作。</li>
</ul>

<p>因为Spring Data Redis引入的依赖项很多，如果只是为了使用Redis，完全可以只引入Lettuce，剩下的操作都自己来完成。</p>

<p>如何把一个第三方组件引入到Spring Boot中：</p>

<p>首先，添加必要的几个依赖项：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>io.lettuce<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>lettuce-core<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>commons-pool2<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>在<code class="language-plaintext highlighter-rouge">spring-boot-starter-parent</code>中已经把常用组件的版本号确定下来了，因此不需要显式设置版本号。</p>

<p>第一步是在配置文件<code class="language-plaintext highlighter-rouge">application.yml</code>中添加Redis的相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">${REDIS_HOST:localhost}</span>
    <span class="na">port</span><span class="pi">:</span> <span class="s">${REDIS_PORT:6379}</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${REDIS_PASSWORD:}</span>
    <span class="na">ssl</span><span class="pi">:</span> <span class="s">${REDIS_SSL:false}</span>
    <span class="na">database</span><span class="pi">:</span> <span class="s">${REDIS_DATABASE:0}</span>
</code></pre></div></div>

<p>然后，通过<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>来加载它：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">host</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">database</span><span class="o">;</span>

    <span class="c1">// getters and setters...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>再编写一个<code class="language-plaintext highlighter-rouge">@Bean</code>方法来创建<code class="language-plaintext highlighter-rouge">RedisClient</code>，可以直接放在<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>中：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="s">"spring.redis"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfiguration</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Bean</span>
    <span class="nc">RedisClient</span> <span class="nf">redisClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">""</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">.</span><span class="na">trim</span><span class="o">()))</span> <span class="o">{</span>
     		<span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="o">}</span>
        <span class="nc">RedisURI</span> <span class="n">uri</span> <span class="o">=</span> <span class="nc">RedisURI</span><span class="o">.</span><span class="na">Builder</span><span class="o">.</span><span class="na">redis</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">host</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">port</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withPassword</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
                <span class="o">.</span><span class="na">withDatabase</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">database</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
        <span class="k">return</span> <span class="nc">RedisClient</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在启动入口引入该配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@Import</span><span class="o">(</span><span class="nc">RedisConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 加载Redis配置</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>如果在<code class="language-plaintext highlighter-rouge">RedisConfiguration</code>中标注<code class="language-plaintext highlighter-rouge">@Configuration</code>，则可通过Spring Boot的自动扫描机制自动加载，否则需要使用<code class="language-plaintext highlighter-rouge">@Import</code>手动加载。</p>

<p>用一个<code class="language-plaintext highlighter-rouge">RedisService</code>来封装所有的Redis操作。基础代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">RedisClient</span> <span class="n">redisClient</span><span class="o">;</span>

    <span class="nc">GenericObjectPool</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">redisConnectionPool</span><span class="o">;</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">poolConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericObjectPoolConfig</span><span class="o">&lt;&gt;();</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxTotal</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setMaxIdle</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestOnReturn</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">poolConfig</span><span class="o">.</span><span class="na">setTestWhileIdle</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span> <span class="o">=</span> <span class="nc">ConnectionPoolSupport</span><span class="o">.</span><span class="na">createGenericObjectPool</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">redisClient</span><span class="o">.</span><span class="na">connect</span><span class="o">(),</span> <span class="n">poolConfig</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@PreDestroy</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisConnectionPool</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisClient</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码引入了Commons Pool的一个对象池，用于缓存Redis连接。因为Lettuce本身是基于Netty的异步驱动，在异步访问时并不需要创建连接池，但基于Servlet模型的同步访问时，连接池是有必要的。连接池在<code class="language-plaintext highlighter-rouge">@PostConstruct</code>方法中初始化，在<code class="language-plaintext highlighter-rouge">@PreDestroy</code>方法中关闭。</p>

<p>下一步，是在<code class="language-plaintext highlighter-rouge">RedisService</code>中添加Redis访问方法。为了简化代码，仿照<code class="language-plaintext highlighter-rouge">JdbcTemplate.execute(ConnectionCallback)</code>方法，传入回调函数，可大幅减少样板代码。</p>

<p>首先定义回调函数接口<code class="language-plaintext highlighter-rouge">SyncCommandCallback</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// 在此操作Redis:</span>
    <span class="no">T</span> <span class="nf">doInConnection</span><span class="o">(</span><span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>编写<code class="language-plaintext highlighter-rouge">executeSync</code>方法，在该方法中，获取Redis连接，利用callback操作Redis，最后释放连接，并返回操作结果：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">executeSync</span><span class="o">(</span><span class="nc">SyncCommandCallback</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">StatefulRedisConnection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">redisConnectionPool</span><span class="o">.</span><span class="na">borrowObject</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">connection</span><span class="o">.</span><span class="na">setAutoFlushCommands</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="nc">RedisCommands</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">commands</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">sync</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">callback</span><span class="o">.</span><span class="na">doInConnection</span><span class="o">(</span><span class="n">commands</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"executeSync redis failed."</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>可以针对常用操作把它封装一下，例如<code class="language-plaintext highlighter-rouge">set</code>和<code class="language-plaintext highlighter-rouge">get</code>命令：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>类似的，<code class="language-plaintext highlighter-rouge">hget</code>和<code class="language-plaintext highlighter-rouge">hset</code>操作如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hset</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">String</span> <span class="nf">hget</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">field</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">field</span><span class="o">));</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="nf">hgetall</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">executeSync</span><span class="o">(</span><span class="n">commands</span> <span class="o">-&gt;</span> <span class="n">commands</span><span class="o">.</span><span class="na">hgetall</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>常用命令可以提供方法接口，如果要执行任意复杂的操作，就可以通过<code class="language-plaintext highlighter-rouge">executeSync(SyncCommandCallback&lt;T&gt;)</code>来完成。</p>

<p>完成了<code class="language-plaintext highlighter-rouge">RedisService</code>后，就可以使用Redis了。例如，在<code class="language-plaintext highlighter-rouge">UserController</code>中，在Session中只存放登录用户的ID，用户信息存放到Redis，提供两个方法用于读写：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">KEY_USER_ID</span> <span class="o">=</span> <span class="s">"__userid__"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">KEY_USERS</span> <span class="o">=</span> <span class="s">"__users__"</span><span class="o">;</span>

    <span class="nd">@Autowired</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>
    <span class="nd">@Autowired</span> <span class="nc">RedisService</span> <span class="n">redisService</span><span class="o">;</span>

    <span class="c1">// 把User写入Redis:</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">putUserIntoRedis</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">redisService</span><span class="o">.</span><span class="na">hset</span><span class="o">(</span><span class="no">KEY_USERS</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">user</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="c1">// 从Redis读取User:</span>
    <span class="kd">private</span> <span class="nc">User</span> <span class="nf">getUserFromRedis</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Long</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="no">KEY_USER_ID</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">redisService</span><span class="o">.</span><span class="na">hget</span><span class="o">(</span><span class="no">KEY_USERS</span><span class="o">,</span> <span class="n">id</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="nc">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用户登录成功后，把ID放入Session，把<code class="language-plaintext highlighter-rouge">User</code>实例放入Redis：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/signin"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">doSignin</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"email"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"password"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">,</span> <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">signin</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
        <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="no">KEY_USER_ID</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">putUserIntoRedis</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"signin.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="n">email</span><span class="o">,</span> <span class="s">"error"</span><span class="o">,</span> <span class="s">"Signin failed"</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"redirect:/profile"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>需要获取<code class="language-plaintext highlighter-rouge">User</code>时，从Redis取出：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/profile"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">profile</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">getUserFromRedis</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"redirect:/signin"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"profile.html"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>从Redis读写Java对象时，序列化和反序列化是应用程序的工作，上述代码使用JSON作为序列化方案，简单可靠。也可将相关序列化操作封装到<code class="language-plaintext highlighter-rouge">RedisService</code>中，这样可以提供更加通用的方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p>redis在各大操作系统中的安装使用都非常简单，默认配置就是监听<code class="language-plaintext highlighter-rouge">127.0.0.1:6379</code>，且无帐号密码。</p>

<p><a href="https://redis.io/docs/latest/operate/oss_and_stack/install/install-redis/install-redis-on-windows/">在windows通过虚拟机安装redis</a>，或通过doker镜像运行：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull redis
docker run <span class="nt">--name</span> my-redis <span class="nt">-p</span> 6379:6379 <span class="nt">-d</span> redis
</code></pre></div></div>

<p>也可以使用<a href="https://github.com/microsoftarchive/redis">古早版本</a>，输入：<code class="language-plaintext highlighter-rouge">redis-server redis.windows.conf</code> 即可启动redis。</p>

<p>如果要部署Redis为windows下的服务，可以输入：<code class="language-plaintext highlighter-rouge">redis-server --service-install redis.windows.conf</code>。</p>

<p>其他常用命令：</p>

<ul>
  <li>卸载服务：<code class="language-plaintext highlighter-rouge">redis-server --service-uninstall</code></li>
  <li>开启服务：<code class="language-plaintext highlighter-rouge">redis-server --service-start</code></li>
  <li>停止服务：<code class="language-plaintext highlighter-rouge">redis-server --service-stop</code></li>
</ul>

<p>测试：</p>

<p>可以通过set、get指令查看是否成功启动：</p>

<pre><code class="language-cmd">C:\Redis&gt;redis-cli
127.0.0.1:6379&gt;set A 123
127.0.0.1:6379&gt;get A
</code></pre>

<h2 id="集成artemis">集成Artemis</h2>

<p>ActiveMQ Artemis是一个JMS服务器，在<a href="/2024/06/05/Spring/#集成jms">集成JMS</a>一节中介绍如何在Spring中集成Artemis，现在介绍在Spring Boot中集成Artemis。</p>

<p>创建一个<code class="language-plaintext highlighter-rouge">springboot-jms</code>工程，引入的依赖除了<code class="language-plaintext highlighter-rouge">spring-boot-starter-web</code>，<code class="language-plaintext highlighter-rouge">spring-boot-starter-jdbc</code>等以外，新增<code class="language-plaintext highlighter-rouge">spring-boot-starter-artemis</code>：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-artemis<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>同样无需指定版本号。</p>

<p>如何创建Artemis服务器已经在集成JMS一节中详细讲述了，此处不再重复。创建Artemis服务器后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中加入相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">artemis</span><span class="pi">:</span>
    <span class="c1"># 指定连接外部Artemis服务器，而不是启动嵌入式服务:</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">native</span>
    <span class="c1"># 服务器地址和端口号:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">127.0.0.1</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">61616</span>
    <span class="c1"># 连接用户名和口令由创建Artemis服务器时指定:</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s">admin</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">password</span>
</code></pre></div></div>

<p>和Spring版本的JMS代码相比，使用Spring Boot集成JMS时，只要引入了<code class="language-plaintext highlighter-rouge">spring-boot-starter-artemis</code>，Spring Boot会自动创建JMS相关的<code class="language-plaintext highlighter-rouge">ConnectionFactory</code>、<code class="language-plaintext highlighter-rouge">JmsListenerContainerFactory</code>、<code class="language-plaintext highlighter-rouge">JmsTemplate</code>等，无需再手动配置了。</p>

<p>发送消息时只需要引入<code class="language-plaintext highlighter-rouge">JmsTemplate</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">JmsTemplate</span> <span class="n">jmsTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMailMessage</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"..."</span><span class="o">;</span>
        <span class="n">jmsTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">MessageCreator</span><span class="o">()</span> <span class="o">{</span>
            <span class="kd">public</span> <span class="nc">Message</span> <span class="nf">createMessage</span><span class="o">(</span><span class="nc">Session</span> <span class="n">session</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">JMSException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">text</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>接收消息时只需要标注<code class="language-plaintext highlighter-rouge">@JmsListener</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailMessageListener</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@JmsListener</span><span class="o">(</span><span class="n">destination</span> <span class="o">=</span> <span class="s">"jms/queue/mail"</span><span class="o">,</span> <span class="n">concurrency</span> <span class="o">=</span> <span class="s">"10"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMailMessageReceived</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received message: "</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>应用程序收发消息的逻辑和Spring中使用JMS完全相同，只是通过Spring Boot，可以把工程简化到只需要设定Artemis相关配置。</p>

<h2 id="集成rabbitmq">集成RabbitMQ</h2>

<p>JMS是JavaEE的消息服务标准接口，但是，如果Java程序要和另一种语言编写的程序通过消息服务器进行通信，那么JMS就不太适合了。</p>

<p>AMQP是一种使用广泛的独立于语言的消息协议，它的全称是Advanced Message Queuing Protocol，即高级消息队列协议，它定义了一种二进制格式的消息流，任何编程语言都可以实现该协议。实际上，Artemis也支持AMQP，但实际应用最广泛的AMQP服务器是使用<a href="https://www.erlang.org/">Erlang</a>编写的<a href="https://www.rabbitmq.com/">RabbitMQ</a>。</p>

<p><strong>安装RabbitMQ</strong></p>

<p>先从RabbitMQ的官网<a href="https://www.rabbitmq.com/download.html">下载</a>并安装RabbitMQ，安装和启动RabbitMQ请参考官方文档。要验证启动是否成功，可以访问RabbitMQ的管理后台<a href="http://localhost:15672/">http://localhost:15672</a>，RabbitMQ后台管理的默认用户名和口令均为<code class="language-plaintext highlighter-rouge">guest</code>。</p>

<p><strong>AMQP协议</strong></p>

<p>AMQP协议和JMS协议有所不同。在JMS中，有两种类型的消息通道：</p>

<ol>
  <li>点对点的Queue，即Producer发送消息到指定的Queue，接收方从Queue收取消息；</li>
  <li>一对多的Topic，即Producer发送消息到指定的Topic，任意多个在线的接收方均可从Topic获得一份完整的消息副本。</li>
</ol>

<p>而AMQP协议比JMS要复杂一点，它只有Queue，没有Topic，并且引入了Exchange的概念。当Producer想要发送消息的时候，它将消息发送给Exchange，由Exchange将消息根据各种规则投递到一个或多个Queue：</p>

<pre><code class="language-ascii">                                    ┌───────┐
                                ┌──▶│Queue-1│
                  ┌──────────┐  │   └───────┘
              ┌──▶│Exchange-1│──┤
┌──────────┐  │   └──────────┘  │   ┌───────┐
│Producer-1│──┤                 ├──▶│Queue-2│
└──────────┘  │   ┌──────────┐  │   └───────┘
              └──▶│Exchange-2│──┤
                  └──────────┘  │   ┌───────┐
                                └──▶│Queue-3│
                                    └───────┘
</code></pre>

<p>如果某个Exchange总是把消息发送到固定的Queue，那么这个消息通道就相当于JMS的Queue。如果某个Exchange把消息发送到多个Queue，那么这个消息通道就相当于JMS的Topic。和JMS的Topic相比，Exchange的投递规则更灵活，比如一个“登录成功”的消息被投递到Queue-1和Queue-2，而“登录失败”的消息则被投递到Queue-3。这些路由规则称之为Binding，通常都在RabbitMQ的管理后台设置。</p>

<p>在RabbitMQ中，首先创建3个Queue，分别用于发送邮件、短信和App通知：q_app、q_mail、q_sms。</p>

<p>创建Queue时注意到可配置为持久化（Durable）和非持久化（Transient），当Consumer不在线时，持久化的Queue会暂存消息，非持久化的Queue会丢弃消息。</p>

<p>然后在Exchanges中创建一个Direct类型的Exchange，命名为<code class="language-plaintext highlighter-rouge">registration</code>，并添加q_mail、q_sms到Binding。</p>

<p>Binding的规则就是：凡是发送到<code class="language-plaintext highlighter-rouge">registration</code>这个Exchange的消息，均被发送到<code class="language-plaintext highlighter-rouge">q_mail</code>和<code class="language-plaintext highlighter-rouge">q_sms</code>这两个Queue。</p>

<p>再创建一个Direct类型的Exchange，命名为<code class="language-plaintext highlighter-rouge">login</code>，并添加q_app、q_mail、q_sms到Binding，且指定q_sms，Routing Key=”login_failed”。</p>

<p>当发送消息给<code class="language-plaintext highlighter-rouge">login</code>这个Exchange时，如果消息没有指定Routing Key，则被投递到<code class="language-plaintext highlighter-rouge">q_app</code>和<code class="language-plaintext highlighter-rouge">q_mail</code>，如果消息指定了Routing Key=”login_failed”，那么消息被投递到<code class="language-plaintext highlighter-rouge">q_sms</code>。</p>

<p>配置好RabbitMQ后，就可以基于Spring Boot开发AMQP程序。</p>

<p><strong>使用RabbitMQ</strong></p>

<p>首先创建Spring Boot工程<code class="language-plaintext highlighter-rouge">springboot-rabbitmq</code>，并添加如下依赖引入RabbitMQ：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-amqp<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>然后在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加RabbitMQ相关配置：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">rabbitmq</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">5672</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">guest</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">guest</span>
</code></pre></div></div>

<p>并在<code class="language-plaintext highlighter-rouge">Application</code>中添加一个<code class="language-plaintext highlighter-rouge">MessageConverter</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.amqp.support.converter.MessageConverter</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="nd">@Bean</span>
    <span class="nc">MessageConverter</span> <span class="nf">createMessageConverter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Jackson2JsonMessageConverter</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MessageConverter</code>用于将Java对象转换为RabbitMQ的消息。默认情况下，Spring Boot使用<code class="language-plaintext highlighter-rouge">SimpleMessageConverter</code>，只能发送<code class="language-plaintext highlighter-rouge">String</code>和<code class="language-plaintext highlighter-rouge">byte[]</code>类型的消息，不太方便。使用<code class="language-plaintext highlighter-rouge">Jackson2JsonMessageConverter</code>，就可以发送JavaBean对象，由Spring Boot自动序列化为JSON并以文本消息传递。</p>

<p>因为引入了starter，所有RabbitMQ相关的Bean均自动装配。</p>

<p>可以直接注入<code class="language-plaintext highlighter-rouge">RabbitTemplate</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">RabbitTemplate</span> <span class="n">rabbitTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRegistrationMessage</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="s">"registration"</span><span class="o">,</span> <span class="s">""</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendLoginMessage</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">routingKey</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">success</span> <span class="o">?</span> <span class="s">""</span> <span class="o">:</span> <span class="s">"login_failed"</span><span class="o">;</span>
        <span class="n">rabbitTemplate</span><span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="s">"login"</span><span class="o">,</span> <span class="n">routingKey</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>发送消息时，使用<code class="language-plaintext highlighter-rouge">convertAndSend(exchange, routingKey, message)</code>可以指定Exchange、Routing Key以及消息本身。这里传入JavaBean后会自动序列化为JSON文本。上述代码将<code class="language-plaintext highlighter-rouge">RegistrationMessage</code>发送到<code class="language-plaintext highlighter-rouge">registration</code>，将<code class="language-plaintext highlighter-rouge">LoginMessage</code>发送到<code class="language-plaintext highlighter-rouge">login</code>，并根据登录是否成功来指定Routing Key。</p>

<p>接收消息时，需要在消息处理的方法上标注<code class="language-plaintext highlighter-rouge">@RabbitListener</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueMessageListener</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_MAIL</span> <span class="o">=</span> <span class="s">"q_mail"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_SMS</span> <span class="o">=</span> <span class="s">"q_sms"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_APP</span> <span class="o">=</span> <span class="s">"q_app"</span><span class="o">;</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_MAIL</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessageFromMailQueue</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="no">QUEUE_MAIL</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_SMS</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessageFromSmsQueue</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="no">QUEUE_SMS</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_MAIL</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromMailQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_MAIL</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_SMS</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromSmsQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_SMS</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="no">QUEUE_APP</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessageFromAppQueue</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received message: {}"</span><span class="o">,</span> <span class="no">QUEUE_APP</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上述代码一共定义了5个Consumer，监听3个Queue。</p>

<p>启动应用程序，注册一个新用户，然后发送一条<code class="language-plaintext highlighter-rouge">RegistrationMessage</code>消息。此时，根据<code class="language-plaintext highlighter-rouge">registration</code>这个Exchange的设定，会在两个Queue收到消息：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try register by bob@example.com...
user registered: bob@example.com
queue q_mail received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
queue q_sms received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
</code></pre></div></div>

<p>当登录失败时，发送<code class="language-plaintext highlighter-rouge">LoginMessage</code>并设定Routing Key为<code class="language-plaintext highlighter-rouge">login_failed</code>，此时，只有<code class="language-plaintext highlighter-rouge">q_sms</code>会收到消息：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try login by bob@example.com...
queue q_sms received message: [LoginMessage: email=bob@example.com, name=(unknown), success=false]
</code></pre></div></div>

<p>登录成功后，发送<code class="language-plaintext highlighter-rouge">LoginMessage</code>，此时，<code class="language-plaintext highlighter-rouge">q_mail</code>和<code class="language-plaintext highlighter-rouge">q_app</code>将收到消息：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try login by bob@example.com...
queue q_mail received message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
queue q_app received message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
</code></pre></div></div>

<p>RabbitMQ还提供了使用Topic的Exchange（此Topic指消息的标签，并非JMS的Topic概念），可以使用<code class="language-plaintext highlighter-rouge">*</code>进行匹配并路由。可见，掌握RabbitMQ的核心是理解其消息的路由规则。</p>

<p>直接指定一个Queue并投递消息也是可以的，此时指定Routing Key为Queue的名称即可，因为RabbitMQ提供了一个<code class="language-plaintext highlighter-rouge">default exchange</code>用于根据Routing Key查找Queue并直接投递消息到指定的Queue。但是要实现一对多的投递就必须自己配置Exchange。</p>

<p>示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@RabbitListener</span><span class="o">(</span><span class="n">queues</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_APP</span><span class="o">,</span> <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_MAIL</span><span class="o">,</span>
                          <span class="nc">QueueMessageListener</span><span class="o">.</span><span class="na">QUEUE_SMS</span> <span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueMessageListener</span> <span class="o">{</span>

    <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_MAIL</span> <span class="o">=</span> <span class="s">"q_mail"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_SMS</span> <span class="o">=</span> <span class="s">"q_sms"</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">QUEUE_APP</span> <span class="o">=</span> <span class="s">"q_app"</span><span class="o">;</span>

    <span class="nd">@RabbitHandler</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">messageOriginal</span><span class="o">,</span> <span class="nc">RegistrationMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">messageOriginal</span><span class="o">.</span><span class="na">getMessageProperties</span><span class="o">().</span><span class="na">getConsumerQueue</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received registration message: {}"</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@RabbitHandler</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">messageOriginal</span><span class="o">,</span> <span class="nc">LoginMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">messageOriginal</span><span class="o">.</span><span class="na">getMessageProperties</span><span class="o">().</span><span class="na">getConsumerQueue</span><span class="o">();</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"queue {} received login message: {}"</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>解释：</p>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">@RabbitListener(queues = {...})</code></strong>:  这个注解用于声明该类监听哪些队列的消息。在这个示例中，<code class="language-plaintext highlighter-rouge">QueueMessageListener</code> 类监听 <code class="language-plaintext highlighter-rouge">QUEUE_APP</code>、<code class="language-plaintext highlighter-rouge">QUEUE_MAIL</code> 和 <code class="language-plaintext highlighter-rouge">QUEUE_SMS</code> 三个队列的消息。当这些队列有新消息到达时，该类会被触发。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">@RabbitHandler</code></strong>:  该注解用于标记处理消息的方法。一个类可以有多个 <code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 方法，它们会根据消息的类型来自动选择对应的方法进行处理。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">onRegistrationMessage(Message messageOriginal, RegistrationMessage message)</code></strong>:  是一个处理注册消息的方法。<code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 注解表明这个方法会处理 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 类型的消息。
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">Message messageOriginal</code></strong>:  这个参数是原始的 RabbitMQ 消息对象，包含消息的元数据（如消息属性、队列名等）。</li>
      <li><strong><code class="language-plaintext highlighter-rouge">RegistrationMessage message</code></strong>:  这是实际的消息体，Spring 会自动将消息反序列化为 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 对象。</li>
      <li><strong><code class="language-plaintext highlighter-rouge">queueName</code></strong>:  使用 <code class="language-plaintext highlighter-rouge">messageOriginal.getMessageProperties().getConsumerQueue()</code> 获取当前消息来自的队列名称。这在日志中用于记录消息来自哪个队列。</li>
    </ul>
  </li>
</ul>

<p>当 RabbitMQ 中的 <code class="language-plaintext highlighter-rouge">q_mail</code>、<code class="language-plaintext highlighter-rouge">q_sms</code> 或 <code class="language-plaintext highlighter-rouge">q_app</code> 队列有新消息时，<code class="language-plaintext highlighter-rouge">QueueMessageListener</code> 会自动接收消息。Spring AMQP 框架根据消息的类型（例如 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 或 <code class="language-plaintext highlighter-rouge">LoginMessage</code>）来选择合适的 <code class="language-plaintext highlighter-rouge">@RabbitHandler</code> 方法处理消息。</p>

<ul>
  <li>如果消息是 <code class="language-plaintext highlighter-rouge">RegistrationMessage</code> 类型的，则调用<code class="language-plaintext highlighter-rouge">onRegistrationMessage</code> 方法。</li>
  <li>如果消息是 <code class="language-plaintext highlighter-rouge">LoginMessage</code> 类型的，则调用 <code class="language-plaintext highlighter-rouge">onLoginMessage</code> 方法。</li>
</ul>

<p>该机制允许根据消息的不同类型，使用不同的方法进行处理，简化了消息处理逻辑的组织。</p>

<h2 id="集成kafka">集成Kafka</h2>

<p>JMS是JavaEE的标准消息接口，Artemis是一个JMS实现产品，AMQP是跨语言的一个标准消息接口，RabbitMQ是一个AMQP实现产品。</p>

<p>Kafka也是一个消息服务器，它的特点一是快，二是有巨大的吞吐量，Kafka没有实现任何标准的消息接口，它自己提供的API就是Kafka的接口。</p>

<p>Kafka本身是Scala编写的，运行在JVM之上。Producer和Consumer都通过Kafka的客户端使用网络来与之通信。从逻辑上讲，Kafka设计非常简单，它只有一种类似JMS的Topic的消息通道：</p>

<pre><code class="language-ascii">                           ┌──────────┐
                       ┌──▶│Consumer-1│
                       │   └──────────┘
┌────────┐    ┌─────┐  │   ┌──────────┐
│Producer│───▶│Topic│──┼──▶│Consumer-2│
└────────┘    └─────┘  │   └──────────┘
                       │   ┌──────────┐
                       └──▶│Consumer-3│
                           └──────────┘
</code></pre>

<p>Kafka的一个Topic可以有一个至多个Partition，并且可以分布到多台机器上：</p>

<pre><code class="language-ascii">            ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐
             Topic
            │                   │
                ┌───────────┐        ┌──────────┐
            │┌─▶│Partition-1│──┐│┌──▶│Consumer-1│
             │  └───────────┘  │ │   └──────────┘
┌────────┐  ││  ┌───────────┐  │││   ┌──────────┐
│Producer│───┼─▶│Partition-2│──┼─┼──▶│Consumer-2│
└────────┘  ││  └───────────┘  │││   └──────────┘
             │  ┌───────────┐  │ │   ┌──────────┐
            │└─▶│Partition-3│──┘│└──▶│Consumer-3│
                └───────────┘        └──────────┘
            └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
</code></pre>

<p>Kafka只保证<strong>在一个Partition内部，消息是有序的</strong>，但是，存在多个Partition的情况下，Producer发送的3个消息会依次发送到Partition-1、Partition-2和Partition-3，Consumer从3个Partition接收的消息并不一定是Producer发送的顺序，因此，多个Partition只能保证接收消息大概率按发送时间有序，并不能保证完全按Producer发送的顺序。这一点在使用Kafka作为消息服务器时要特别注意，对发送顺序有严格要求的Topic只能有一个Partition。</p>

<p>Kafka的另一个特点是消息发送和接收都尽量使用批处理，一次处理几十甚至上百条消息，比一次一条效率要高很多。</p>

<p>最后要注意的是消息的持久性。Kafka总是将消息写入Partition对应的文件，消息保存多久取决于服务器的配置，可以按照时间删除（默认3天），也可以按照文件大小删除，因此，只要Consumer在离线期内的消息还没有被删除，再次上线仍然可以接收到完整的消息流。这一功能实际上是客户端自己实现的，客户端会存储它接收到的最后一个消息的<code class="language-plaintext highlighter-rouge">offsetId</code>，再次上线后按上次的<code class="language-plaintext highlighter-rouge">offsetId</code>查询。<code class="language-plaintext highlighter-rouge">offsetId</code>是Kafka标识某个Partion的每一条消息的递增整数，客户端通常将它存储在ZooKeeper中。</p>

<p><strong>安装Kafka</strong></p>

<p>首先从Kafka官网<a href="https://kafka.apache.org/downloads">下载</a>最新版Kafaka，解压后在<code class="language-plaintext highlighter-rouge">bin</code>目录找到两个文件：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">zookeeper-server-start.sh</code>：启动ZooKeeper（已内置在Kafka中）；</li>
  <li><code class="language-plaintext highlighter-rouge">kafka-server-start.sh</code>：启动Kafka。</li>
</ul>

<p>先启动ZooKeeper：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./zookeeper-server-start.sh ../config/zookeeper.properties 
</code></pre></div></div>

<p>再启动Kafka：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./kafka-server-start.sh ../config/server.properties
</code></pre></div></div>

<p>看到如下输出表示启动成功：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>... INFO [KafkaServer id=0] started (kafka.server.KafkaServer)
</code></pre></div></div>

<p>如果要关闭Kafka和ZooKeeper，依次按Ctrl-C退出即可。</p>

<p><strong>使用Kafka</strong></p>

<p>在Spring Boot中使用Kafka，首先要引入依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.kafka<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-kafka<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>注意这个依赖是<code class="language-plaintext highlighter-rouge">spring-kafka</code>项目提供的。</p>

<p>然后，在<code class="language-plaintext highlighter-rouge">application.yml</code>中添加Kafka配置：</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">kafka</span><span class="pi">:</span>
    <span class="na">bootstrap-servers</span><span class="pi">:</span> <span class="s">localhost:9092</span>
    <span class="na">consumer</span><span class="pi">:</span>
      <span class="na">auto-offset-reset</span><span class="pi">:</span> <span class="s">latest</span>
      <span class="na">max-poll-records</span><span class="pi">:</span> <span class="m">100</span>
      <span class="na">max-partition-fetch-bytes</span><span class="pi">:</span> <span class="m">1000000</span>
</code></pre></div></div>

<p>除了<code class="language-plaintext highlighter-rouge">bootstrap-servers</code>必须指定外，<code class="language-plaintext highlighter-rouge">consumer</code>相关的配置项均为调优选项。例如，<code class="language-plaintext highlighter-rouge">max-poll-records</code>表示一次最多抓取100条消息。如果要查看配置名称，可以在IDE里定义一个<code class="language-plaintext highlighter-rouge">KafkaProperties.Consumer</code>的变量：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">KafkaProperties</span><span class="o">.</span><span class="na">Consumer</span> <span class="n">c</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</code></pre></div></div>

<p>然后按住Ctrl查看源码即可。</p>

<p><strong>发送消息</strong></p>

<p>Spring Boot自动创建了一个<code class="language-plaintext highlighter-rouge">KafkaTemplate</code>用于发送消息。这是一个泛型类，而默认配置总是使用<code class="language-plaintext highlighter-rouge">String</code>作为Kafka消息的类型，所以注入<code class="language-plaintext highlighter-rouge">KafkaTemplate&lt;String, String&gt;</code>即可：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessagingService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="nd">@Autowired</span> <span class="nc">KafkaTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">kafkaTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRegistrationMessage</span><span class="o">(</span><span class="nc">RegistrationMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">send</span><span class="o">(</span><span class="s">"topic_registration"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendLoginMessage</span><span class="o">(</span><span class="nc">LoginMessage</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="n">send</span><span class="o">(</span><span class="s">"topic_login"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="nc">String</span> <span class="n">topic</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">ProducerRecord</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">pr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProducerRecord</span><span class="o">&lt;&gt;(</span><span class="n">topic</span><span class="o">,</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">msg</span><span class="o">));</span>
        <span class="n">pr</span><span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">"type"</span><span class="o">,</span> <span class="n">msg</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">().</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
        <span class="n">kafkaTemplate</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">pr</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>发送消息时，需指定Topic名称，消息正文。为了发送一个JavaBean，这里没有使用<code class="language-plaintext highlighter-rouge">MessageConverter</code>来转换JavaBean，而是直接把消息类型作为Header添加到消息中，Header名称为<code class="language-plaintext highlighter-rouge">type</code>，值为Class全名。消息正文是序列化的JSON。</p>

<p><strong>接收消息</strong></p>

<p>接收消息可以使用<code class="language-plaintext highlighter-rouge">@KafkaListener</code>注解：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TopicMessageListener</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">getClass</span><span class="o">());</span>

    <span class="nd">@Autowired</span>
    <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_registration"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRegistrationMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">RegistrationMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received registration message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_login"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group1"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoginMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">LoginMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"received login message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@KafkaListener</span><span class="o">(</span><span class="n">topics</span> <span class="o">=</span> <span class="s">"topic_login"</span><span class="o">,</span> <span class="n">groupId</span> <span class="o">=</span> <span class="s">"group2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processLoginMessage</span><span class="o">(</span><span class="nd">@Payload</span> <span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nd">@Header</span><span class="o">(</span><span class="s">"type"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">LoginMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">getType</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"process login message: {}"</span><span class="o">,</span> <span class="n">msg</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getType</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// TODO: use cache:</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;)</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>在接收消息的方法中，使用<code class="language-plaintext highlighter-rouge">@Payload</code>表示传入的是消息正文，使用<code class="language-plaintext highlighter-rouge">@Header</code>可传入消息的指定Header，这里传入<code class="language-plaintext highlighter-rouge">@Header("type")</code>，就是我们发送消息时指定的Class全名。接收消息时，我们需要根据Class全名来反序列化获得JavaBean。</p>

<p>上述代码一共定义了3个Listener，其中有两个方法监听的是同一个Topic，但它们的Group ID不同。假设Producer发送的消息流是A、B、C、D，Group ID不同表示这是<strong>两个不同的Consumer</strong>，它们将分别收取完整的消息流，即各自均收到A、B、C、D。Group ID相同的多个Consumer实际上被视作<strong>一个</strong>Consumer，即如果有两个Group ID相同的Consumer，那么它们各自收到的很可能是A、C和B、D。</p>

<p>运行应用程序，注册新用户后：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try register by bob@example.com...
user registered: bob@example.com
 received registration message: [RegistrationMessage: email=bob@example.com, name=Bob]
</code></pre></div></div>

<p>用户登录后，观察日志输出：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>try login by bob@example.com...
received login message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
process login message: [LoginMessage: email=bob@example.com, name=Bob, success=true]
</code></pre></div></div>

<p>因为Group ID不同，同一个消息被两个Consumer分别独立接收。如果把Group ID改为相同，那么同一个消息只会被两者之一接收。</p>

<p>在Kafka中是如何创建Topic的？又如何指定某个Topic的分区数量？</p>

<p>实际上开发使用的Kafka默认允许自动创建Topic，创建Topic时默认的分区数量是2，可以通过<code class="language-plaintext highlighter-rouge">server.properties</code>修改默认分区数量。</p>

<p>在生产环境中通常会关闭自动创建功能，Topic需要由运维人员先创建好。和RabbitMQ相比，Kafka并不提供网页版管理后台，管理Topic需要使用命令行，比较繁琐，只有云服务商通常会提供更友好的管理后台。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry></feed>