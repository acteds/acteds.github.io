<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://acteds.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://acteds.github.io/" rel="alternate" type="text/html" /><updated>2022-07-15T19:57:42+08:00</updated><id>https://acteds.github.io/feed.xml</id><title type="html">个人博客</title><subtitle></subtitle><author><name>acteds</name></author><entry><title type="html">setTimeout(func,0)的延迟优化</title><link href="https://acteds.github.io/2022/07/15/setTimeout(func,0)%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%BC%98%E5%8C%96/" rel="alternate" type="text/html" title="setTimeout(func,0)的延迟优化" /><published>2022-07-15T00:00:00+08:00</published><updated>2022-07-15T00:00:00+08:00</updated><id>https://acteds.github.io/2022/07/15/setTimeout(func,0)%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%BC%98%E5%8C%96</id><content type="html" xml:base="https://acteds.github.io/2022/07/15/setTimeout(func,0)%E7%9A%84%E5%BB%B6%E8%BF%9F%E4%BC%98%E5%8C%96/">&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;根据&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout#%E5%AE%9E%E9%99%85%E5%BB%B6%E6%97%B6%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%80%BC%E6%9B%B4%E4%B9%85%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%9A%E6%9C%80%E5%B0%8F%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4&quot;&gt;MDN&lt;/a&gt;所言，setTimeout函数的最小延迟&amp;gt;=4ms。
也&lt;a href=&quot;https://dbaron.org/log/20100309-faster-timeouts&quot;&gt;有人&lt;/a&gt;实现了延迟更小的异步方法：
无参数setZeroTimeout():&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javaScript&quot;&gt;// 闭包
(function () {
    var timeouts = [];
    var messageName = &quot;zero-timeout-message&quot;;

    // 类似于setTimeout，但只接受一个函数参数。
    // 没有时间参数(总是0) ，也没有参数(必须使用闭包) 。
    function setZeroTimeout(fn) {
        timeouts.push(fn);
        window.postMessage(messageName, &quot;*&quot;);
    }

    function handleMessage(event) {
        if (event.source == window &amp;amp;&amp;amp; event.data == messageName) {
            event.stopPropagation();
            if (timeouts.length &amp;gt; 0) {
                var fn = timeouts.shift();
                fn();
            }
        }
    }
    window.addEventListener(&quot;message&quot;, handleMessage, true);
    // 添加函数到窗口对象。
    window.setZeroTimeout = setZeroTimeout;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;修改&quot;&gt;修改&lt;/h2&gt;
&lt;h3 id=&quot;不定参数的setzerotimeout&quot;&gt;不定参数的setZeroTimeout()&lt;/h3&gt;
&lt;p&gt;通过一些特性，可以将以上代码变成，能够带参调用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javaScript&quot;&gt;// 闭包
(function () {
    var timeouts = [];
    var messageName = &quot;zero-timeout-message&quot;;
    // 带参数的
    function setZeroTimeout(fn,...arg) {
        timeouts.push({func:fn,data:arg});
        window.postMessage(messageName, &quot;*&quot;);
    }

    function handleMessage(event) {
        if (event.source == window &amp;amp;&amp;amp; event.data == messageName) {
            event.stopPropagation();
            if (timeouts.length &amp;gt; 0) {
                var data = timeouts.shift();
                data.func(...data.data);
            }
        }
    }
    window.addEventListener(&quot;message&quot;, handleMessage, true);
    // 添加函数到窗口对象。
    window.setZeroTimeout = setZeroTimeout;
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;性能测试：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;{
    setZeroTimeout(test1);
    let i = 0;
    let startTime = Date.now();

    function test1() {
        if (++i == 100) {
            let endTime = Date.now();
            console.log('100次调用setZeroTimeout()耗时:' + (endTime - startTime) + 'ms');
            //开始setTimeout测试
            i = 0;
            startTime = Date.now();
            setTimeout(test2, 0);
            function test2() {
                if (++i == 100) {
                    let endTime = Date.now();
                    console.log('100次调用setTimeout()耗时:' + (endTime - startTime) + 'ms');
                } else {
                    setTimeout(test2, 0);
                }
            }
        } else {
            //递归
            setZeroTimeout(test1);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;控制台：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;次调用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setZeroTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;耗时&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;次调用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;耗时&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;466&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;不定参数的setzerointerval&quot;&gt;不定参数的setZeroInterval()&lt;/h2&gt;
&lt;p&gt;顺便拓展一下setInterval()
因为需要考虑取消执行，因此会需要处理多线程问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;// 闭包
(function () {
    let interval = [];
    let messageName = &quot;zero-Interval-message&quot;;
    let idcount = 0;
    let run = true;
    let clearIndex = 0;
    let p = -1;
    // 带参数的
    function setZeroInterval(fn, ...arg) {
        interval.push({
            func: fn,
            data: arg,
            id: ++idcount
        });
        window.postMessage(messageName, &quot;*&quot;);
        return idcount;
    }

    function handleMessage(event) {
        if (event.source == window &amp;amp;&amp;amp; event.data == messageName) {
            event.stopPropagation();
            if (interval.length &amp;gt; 0) {
                if (run) {
                    p++;
                    p = p % interval.length;
                    let data = interval[p];
                    data.func(...data.data);
                }else {
                    interval.splice(clearIndex, 1);
                    run = true;
                };
                //循环调用
                window.postMessage(messageName, &quot;*&quot;);
            }
        }
    }
    function clearZeroInterval(id) {
        let index = interval.findIndex((item) =&amp;gt; {
            return item.id == id;
        });
        if (index != -1) {
            clearIndex = index;
            run = false;
        }
    }
    window.addEventListener(&quot;message&quot;, handleMessage, true);
    // 添加函数到窗口对象
    window.setZeroInterval = setZeroInterval;
    window.clearZeroInterval = clearZeroInterval;
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;性能测试：
单次测试：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;{
    let count = 0;
    let startTime = Date.now();
    let id1 = setZeroInterval(() =&amp;gt; {
        if (++count == 100) {
            var endTime = Date.now();
            console.log('id:'+id1+',100次调用setZeroInterval()耗时:' + (endTime - startTime) + 'ms');
            clearZeroInterval(id1);
            //开始setInterval测试
            count = 0;
            startTime = Date.now();
            let id2 = setInterval(() =&amp;gt; {
                if (++count == 100) {
                    var endTime = Date.now();
                    console.log('id:'+id2+',100次调用setInterval()耗时:' + (endTime - startTime) + 'ms');
                    clearInterval(id2);
                }
            });
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;控制台：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;次调用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setZeroInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;耗时&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;次调用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;耗时&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;391&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;多次测试：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;//多次测试setZeroInterval(),请单独分别复制运行
for (let i = 0; i &amp;lt; 130;i++)
{
    let count = 0;
    let startTime = Date.now();
    let id1 = setZeroInterval(() =&amp;gt; {
        if (++count == 100) {
            var endTime = Date.now();
            console.log('id:'+id1+',100次调用setZeroInterval()耗时:' + (endTime - startTime) + 'ms');
            clearZeroInterval(id1);
        }
    });
}

//多次测试setInterval(),请单独分别复制运行
for (let i = 0; i &amp;lt; 130;i++)
{
    let count = 0;
    let startTime = Date.now();
    let id2 = setInterval(() =&amp;gt; {
        if (++count == 100) {
            var endTime = Date.now();
            console.log('id:'+id2+',100次调用setInterval()耗时:' + (endTime - startTime) + 'ms');
            clearInterval(id2);
        }
    });
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;控制台：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;次调用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setZeroInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;耗时&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;348&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;266&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;次调用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;耗时&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;408&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;根据电脑性能不同，循环次数越多，setZeroInterval()越慢。&lt;/p&gt;</content><author><name>acteds</name></author><category term="JavaScript" /><summary type="html">引言 根据MDN所言，setTimeout函数的最小延迟&amp;gt;=4ms。 也有人实现了延迟更小的异步方法： 无参数setZeroTimeout(): ```javaScript // 闭包 (function () { var timeouts = []; var messageName = “zero-timeout-message”;</summary></entry><entry><title type="html">哔哩哔哩粉丝勋章排序</title><link href="https://acteds.github.io/2022/05/03/%E7%B2%89%E4%B8%9D%E7%89%8C%E5%AD%90%E6%8E%92%E5%BA%8F/" rel="alternate" type="text/html" title="哔哩哔哩粉丝勋章排序" /><published>2022-05-03T00:00:00+08:00</published><updated>2022-05-03T00:00:00+08:00</updated><id>https://acteds.github.io/2022/05/03/%E7%B2%89%E4%B8%9D%E7%89%8C%E5%AD%90%E6%8E%92%E5%BA%8F</id><content type="html" xml:base="https://acteds.github.io/2022/05/03/%E7%B2%89%E4%B8%9D%E7%89%8C%E5%AD%90%E6%8E%92%E5%BA%8F/">&lt;h1 id=&quot;脚本主页&quot;&gt;&lt;a href=&quot;https://greasyfork.org/zh-CN/scripts/444384&quot;&gt;脚本主页&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&quot;功能&quot;&gt;功能&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;修改表格每行的高度,可自定义&lt;/li&gt;
  &lt;li&gt;去除分页&lt;/li&gt;
  &lt;li&gt;按照牌子等级和经验排序&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;效果&quot;&gt;效果&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://link.bilibili.com/p/center/#/user-center/wearing-center/my-medal&quot;&gt;&lt;img src=&quot;https://greasyfork.s3.us-east-2.amazonaws.com/2kku39cn00z8gd7m24pkz1rxw302&quot; alt=&quot;示例图片&quot; title=&quot;点击进入&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>acteds</name></author><category term="JavaScript" /><summary type="html">脚本主页 功能 修改表格每行的高度,可自定义 去除分页 按照牌子等级和经验排序</summary></entry><entry><title type="html">天天基金数据抽取</title><link href="https://acteds.github.io/2021/06/13/%E5%A4%A9%E5%A4%A9%E5%9F%BA%E9%87%91%E6%95%B0%E6%8D%AE%E6%8A%BD%E5%8F%96/" rel="alternate" type="text/html" title="天天基金数据抽取" /><published>2021-06-13T00:00:00+08:00</published><updated>2021-06-13T00:00:00+08:00</updated><id>https://acteds.github.io/2021/06/13/%E5%A4%A9%E5%A4%A9%E5%9F%BA%E9%87%91%E6%95%B0%E6%8D%AE%E6%8A%BD%E5%8F%96</id><content type="html" xml:base="https://acteds.github.io/2021/06/13/%E5%A4%A9%E5%A4%A9%E5%9F%BA%E9%87%91%E6%95%B0%E6%8D%AE%E6%8A%BD%E5%8F%96/">&lt;h1 id=&quot;脚本主页&quot;&gt;&lt;a href=&quot;https://greasyfork.org/zh-CN/scripts/427892&quot;&gt;脚本主页&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&quot;注意事项&quot;&gt;注意事项&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;与月[高\低]点的差距算上了估值.在收盘更新了净值后依然会用当前最新累计净值乘以估值&lt;/li&gt;
  &lt;li&gt;2.0版本更新后可以清理一下存储数据,2.0大幅重构了逻辑.&lt;/li&gt;
  &lt;li&gt;右键可以复制重要属性:累计净值,一年前累计净值,任期回报.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;用以快捷显示&quot;&gt;用以快捷显示:&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;累计净值&lt;/li&gt;
  &lt;li&gt;一年前累计净值&lt;/li&gt;
  &lt;li&gt;最新一个任期回报&lt;/li&gt;
  &lt;li&gt;年平均回报&lt;/li&gt;
  &lt;li&gt;近一年累计净值增长率&lt;/li&gt;
  &lt;li&gt;近一个月(指近20个交易日)最大累计净值&lt;/li&gt;
  &lt;li&gt;当天估值离高点的差值&lt;/li&gt;
  &lt;li&gt;近一个月(指近20个交易日)最小累计净值&lt;/li&gt;
  &lt;li&gt;当天估值离低点的差值&lt;/li&gt;
  &lt;li&gt;当天估值变化率&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://greasyfork.s3.us-east-2.amazonaws.com/7oh66bduywqng9aghegzed1m3j76&quot; alt=&quot;示例图片&quot; /&gt;&lt;/p&gt;</content><author><name>acteds</name></author><category term="JavaScript" /><summary type="html">脚本主页 注意事项 与月[高\低]点的差距算上了估值.在收盘更新了净值后依然会用当前最新累计净值乘以估值 2.0版本更新后可以清理一下存储数据,2.0大幅重构了逻辑. 右键可以复制重要属性:累计净值,一年前累计净值,任期回报.</summary></entry></feed>