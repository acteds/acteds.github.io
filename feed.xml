<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-01-26T01:28:48+08:00</updated><id>/feed.xml</id><title type="html">个人博客</title><subtitle></subtitle><author><name>acteds</name></author><entry><title type="html">Excel导入导出</title><link href="/2024/11/18/Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/" rel="alternate" type="text/html" title="Excel导入导出" /><published>2024-11-18T00:00:00+08:00</published><updated>2024-11-18T00:00:00+08:00</updated><id>/2024/11/18/Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA</id><content type="html" xml:base="/2024/11/18/Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"><![CDATA[<h1 id="引言">引言</h1>

<p>Excel的导入导出、以及CSV文件的导出。</p>

<h1 id="java">Java</h1>

<h2 id="excel导入导出">Excel导入导出</h2>

<p>依赖添加：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
    <span class="c">&lt;!-- Apache POI Core for Excel (xls) support --&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.apache.poi<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>poi<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>5.2.3<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>

    <span class="c">&lt;!-- Apache POI OOXML for Excel 2007+ (xlsx) support --&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.apache.poi<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>poi-ooxml<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>5.2.3<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>

    <span class="c">&lt;!-- Optional: Apache POI for handling Excel (xlsx) schemas --&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.apache.poi<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>poi-ooxml-schemas<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>5.2.3<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>

    <span class="c">&lt;!-- Optional: Apache POI Scratchpad for more advanced Excel functionalities --&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.apache.poi<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>poi-ooxml-scratchpad<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>5.2.3<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<h3 id="导出">导出</h3>

<p>首先新建一个带异常抛出的<code class="language-plaintext highlighter-rouge">Consumer</code>接口。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 带异常抛出的Consumer
 * @author zx
 * @version 1.0
 * @date 2024/11/26 17:34
 */</span>
<span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ConsumerWithException</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="cm">/**
     * 对给定的参数执行此操作，并且可能会引发异常。
     *
     * @param t 输入参数
     * @throws Exception 如果在处理过程中发生任何错误
     */</span>
    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>然后建立一个服务层：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExcelService</span> <span class="o">{}</span>
</code></pre></div></div>

<p>对于导出，可以直接使用<code class="language-plaintext highlighter-rouge">SXSSFWorkbook</code>类，它会动态管理存储在内存中的行，防止内存溢出。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** 在刷新之前保留在内存中的行数，请参见上文。 */</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">rowAccessWindowSize</span> <span class="o">=</span> <span class="no">DEFAULT_WINDOW_SIZE</span><span class="o">;</span>

<span class="cm">/**
* 设置写操作，在刷新之前保留在内存中的行数
* @param rowAccessWindowSize 在刷新之前保留在内存中的行数
*/</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRowAccessWindowSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">rowAccessWindowSize</span><span class="o">)</span> <span class="o">{</span>
<span class="k">this</span><span class="o">.</span><span class="na">rowAccessWindowSize</span> <span class="o">=</span> <span class="n">rowAccessWindowSize</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**
* 导出Excel
* @param os 输出流
* @param chineseTableHeader 中文表头
* @param callback 回调
*/</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">exportExcel</span><span class="o">(</span><span class="nc">OutputStream</span> <span class="n">os</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">chineseTableHeader</span><span class="o">,</span> <span class="nc">ConsumerWithException</span><span class="o">&lt;</span><span class="nc">Sheet</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
<span class="cm">/*设置页码*/</span>
<span class="c1">// 创建Excel工作簿</span>
<span class="k">try</span> <span class="o">(</span><span class="nc">SXSSFWorkbook</span> <span class="n">wb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SXSSFWorkbook</span><span class="o">(</span><span class="n">rowAccessWindowSize</span><span class="o">))</span> <span class="o">{</span>
    <span class="nc">Sheet</span> <span class="n">sheet</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="na">createSheet</span><span class="o">(</span><span class="s">"Sheet1"</span><span class="o">);</span>
    <span class="c1">// 设置每列的宽度</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chineseTableHeader</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">sheet</span><span class="o">.</span><span class="na">setColumnWidth</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="mi">5000</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 创建一个CellStyle对象，用于设置加粗样式</span>
    <span class="nc">CellStyle</span> <span class="n">headerCellStyle</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="na">createCellStyle</span><span class="o">();</span>
    <span class="nc">Font</span> <span class="n">headerFont</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="na">createFont</span><span class="o">();</span>
    <span class="n">headerFont</span><span class="o">.</span><span class="na">setBold</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>  <span class="c1">// 设置加粗</span>
    <span class="n">headerCellStyle</span><span class="o">.</span><span class="na">setFont</span><span class="o">(</span><span class="n">headerFont</span><span class="o">);</span>  <span class="c1">// 将加粗字体应用到样式中</span>

    <span class="c1">// 写入表头</span>
    <span class="nc">Row</span> <span class="n">headerRow</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">createRow</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">colIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">chineseTableHeader</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">headerRow</span><span class="o">.</span><span class="na">createCell</span><span class="o">(</span><span class="n">colIndex</span><span class="o">++);</span>
        <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="n">cell</span><span class="o">.</span><span class="na">setCellStyle</span><span class="o">(</span><span class="n">headerCellStyle</span><span class="o">);</span>  <span class="c1">// 应用加粗样式</span>
    <span class="o">}</span>
    <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">sheet</span><span class="o">);</span>
    <span class="n">wb</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">os</span><span class="o">);</span>
    <span class="n">os</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="n">os</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导出数据抛出异常"</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"导出数据抛出异常"</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这个方法会自动填充表头，并设置加粗样式，然后执行回调方法。</p>

<p>还可以添加一个写入数据行的方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 写入数据行到Excel
 *
 * @param sheet       excel对象
 * @param data        数据
 * @param fieldHeader 属性key
 * @param rowIndex    第几行
 */</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">writeDataRowsToExcel</span><span class="o">(</span><span class="nc">Sheet</span> <span class="n">sheet</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">fieldHeader</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rowIndex</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">colIndex</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">line</span> <span class="o">:</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Row</span> <span class="n">dataRow</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">createRow</span><span class="o">(</span><span class="n">rowIndex</span><span class="o">++);</span>
        <span class="n">colIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">titleKey</span> <span class="o">:</span> <span class="n">fieldHeader</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">dataRow</span><span class="o">.</span><span class="na">createCell</span><span class="o">(</span><span class="n">colIndex</span><span class="o">++);</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">line</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">titleKey</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">titleKey</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;)</span> <span class="n">o</span><span class="o">;</span>
                <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
                <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">String</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">Integer</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">((</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">Double</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">((</span><span class="nc">Double</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">rowIndex</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">excelService</span><span class="o">.</span><span class="na">setRowAccessWindowSize</span><span class="o">(</span><span class="no">NUM_PER_PAGE</span><span class="o">);</span>
<span class="n">excelService</span><span class="o">.</span><span class="na">exportExcel</span><span class="o">(</span><span class="n">outputStream</span><span class="o">,</span> <span class="n">tableHeader</span><span class="o">,</span> <span class="o">(</span><span class="n">sheet</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="c1">// 写入数据行，从第1行开始</span>
    <span class="kt">int</span> <span class="n">rowIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="cm">/*获取数据*/</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="o">...;</span>
    <span class="n">rowIndex</span> <span class="o">=</span> <span class="n">excelService</span><span class="o">.</span><span class="na">writeDataRowsToExcel</span><span class="o">(</span><span class="n">sheet</span><span class="o">,</span> <span class="n">rowsData</span><span class="o">,</span> <span class="n">keys</span><span class="o">,</span> <span class="n">rowIndex</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">rowIndex</code>是下一个空行的索引，如果是分段写入，就需要这个值，如果需要通过这个值获取总行数，注意最后减一。</p>

<h3 id="导入">导入</h3>

<p>添加依赖：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--大xlsx文件导入--&gt;</span>
<span class="c">&lt;!-- https://mvnrepository.com/artifact/com.github.pjfanning/excel-streaming-reader --&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>com.github.pjfanning<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>excel-streaming-reader<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.3.6<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>添加方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 导入Excel
 * @param is 输入流
 * @param callback 回调
 */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">importExcel</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">is</span><span class="o">,</span> <span class="nc">BiConsumer</span><span class="o">&lt;</span><span class="nc">Sheet</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 使用StreamingReader包装后，就只能使用流来操作行了，不能指定获取指定行了</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">Workbook</span> <span class="n">workbook</span> <span class="o">=</span> <span class="nc">StreamingReader</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">rowCacheSize</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>    <span class="c1">// 设置内存中保持的行数，默认是10</span>
            <span class="o">.</span><span class="na">bufferSize</span><span class="o">(</span><span class="mi">4096</span><span class="o">)</span><span class="c1">// 设置读取 InputStream 时的缓冲区大小（字节）</span>
            <span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">is</span><span class="o">))</span> <span class="o">{</span>
        <span class="nc">Sheet</span> <span class="n">sheet</span> <span class="o">=</span> <span class="n">workbook</span><span class="o">.</span><span class="na">getSheetAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">sheet</span><span class="o">.</span><span class="na">getLastRowNum</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">10000</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导入的数据查过10000行"</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"导入的数据查过10000行"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Row</span><span class="o">&gt;</span> <span class="n">rowIterator</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
        <span class="c1">// 获取数据的表头,第一行</span>
        <span class="nc">Row</span> <span class="n">r</span> <span class="o">=</span> <span class="n">rowIterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tableHeader</span> <span class="o">=</span> <span class="nc">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">spliterator</span><span class="o">(),</span> <span class="kc">false</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Cell:</span><span class="o">:</span><span class="n">getStringCellValue</span><span class="o">)</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>

        <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">sheet</span><span class="o">,</span> <span class="n">tableHeader</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导入时发生异常：{}"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"导入时发生异常：{}"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">.rowCacheSize(100)</code> 这里也可以抽出来做为配置项。</p>

<p>执行回调方法会传入两个参数，一个是对象，一个是读取到的表头，注意这里迭代器已经消耗完第一行了。</p>

<p>还可以加一个读每行数据的方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 获取原值
 *
 * @param cell 单元格
 * @return
 */</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">getValue</span><span class="o">(</span><span class="nc">Cell</span> <span class="n">cell</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 单元格类型</span>
    <span class="nc">CellType</span> <span class="n">type</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getCellType</span><span class="o">();</span>
    <span class="c1">// 值</span>
    <span class="nc">Object</span> <span class="n">value</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">NUMERIC</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 字符串或数字类型</span>
        <span class="kt">double</span> <span class="n">numericCellValue</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getNumericCellValue</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">numericCellValue</span> <span class="o">==</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">numericCellValue</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">numericCellValue</span><span class="o">;</span><span class="c1">// 转为整数</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">numericCellValue</span><span class="o">;</span> <span class="c1">//保持为浮动数</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getStringCellValue</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">value</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">excelService</span><span class="o">.</span><span class="na">importExcel</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="o">(</span><span class="n">sheet</span><span class="o">,</span> <span class="n">chineseTableHeader</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="c1">// 得到实际表头</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tableHeader</span> <span class="o">=</span> <span class="n">getTableHeader</span><span class="o">(</span><span class="n">chineseTableHeader</span><span class="o">,</span> <span class="n">importMetadata</span><span class="o">.</span><span class="na">tableColumn</span><span class="o">);</span>
    <span class="c1">// 获得需要写入的数据的索引</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">index</span> <span class="o">=</span> <span class="n">getIndex</span><span class="o">(</span><span class="n">tableHeader</span><span class="o">);</span>
    <span class="c1">// 存储插入到原表的数据</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">insertOriginal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="c1">// 获取迭代器</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Row</span> <span class="n">row</span> <span class="o">:</span> <span class="n">sheet</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 跳过excel空行</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">spliterator</span><span class="o">(),</span> <span class="kc">true</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">Cell:</span><span class="o">:</span><span class="n">getCellType</span><span class="o">).</span><span class="na">allMatch</span><span class="o">(</span><span class="n">cellType</span> <span class="o">-&gt;</span> <span class="n">cellType</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">BLANK</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">continue</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 原数据</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">insertOriginalMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">index</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span><span class="o">-&gt;{</span>
                <span class="c1">// 单元格值</span>
                <span class="nc">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="na">getCell</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="c1">// 键</span>
                <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">tableHeader</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">cell</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">insertOriginalMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">excelService</span><span class="o">.</span><span class="na">getValue</span><span class="o">(</span><span class="n">cell</span><span class="o">);</span>
                <span class="n">excelDataMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
            <span class="o">});</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"数据类型错误："</span><span class="o">+</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 插入原表的数据</span>
        <span class="n">insertOriginal</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">insertOriginal</span><span class="o">);</span>
        <span class="c1">// 如果要插入明细表的数据达到500条则开始插入操作。</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">insertUploadDetail</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">500</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">insertOriginal</span><span class="o">(...);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 将剩余的数据插入</span>
    <span class="n">insertOriginal</span><span class="o">(...);</span>
<span class="o">});</span>
</code></pre></div></div>

<p>导入还可能需要校验数据的合法性，以及数组类型，或者上传明细记录等业务处理，不一一展示。</p>

<p>注意并行流导致的共享变量写入问题，可能导致数据丢失。</p>

<h3 id="文本读取时变为浮点数">文本读取时变为浮点数</h3>

<p>在 Excel 文件中，尤其是对于大型数字（如手机号码、身份证号码等），有时它们会被自动识别为数值类型（<code class="language-plaintext highlighter-rouge">NUMERIC</code>），但实际上你需要将它们作为文本来处理。因为 Excel 会将大数字（如 <code class="language-plaintext highlighter-rouge">18844344316</code>）转换为 <code class="language-plaintext highlighter-rouge">double</code>，可能会失去精度，或者会自动以科学计数法（如 <code class="language-plaintext highlighter-rouge">1.8844344316E10</code>）显示。</p>

<p>为了确保读取正确的文本，可以尝试以下几种方法来获取单元格中的值：</p>

<p><strong>检查单元格是否为文本类型</strong></p>

<p>如果数据在 Excel 中是文本格式（即没有被误识别为数值），你可以直接读取为字符串。对于 <code class="language-plaintext highlighter-rouge">NUMERIC</code> 类型的单元格，你需要检查其值是否为 <code class="language-plaintext highlighter-rouge">double</code>，然后转回为字符串。</p>

<p><strong>强制将 <code class="language-plaintext highlighter-rouge">NUMERIC</code> 类型转为字符串</strong></p>

<p>如果遇到的是 <code class="language-plaintext highlighter-rouge">NUMERIC</code> 类型的单元格，并且该单元格的内容应该是一个大数字（如电话号码），可以使用以下方法将其读取为字符串，而不是 <code class="language-plaintext highlighter-rouge">double</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.apache.poi.ss.usermodel.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.text.DecimalFormat</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExcelReader</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 假设 cell 是当前单元格</span>
        <span class="nc">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="o">...;</span>

        <span class="c1">// 获取单元格类型</span>
        <span class="nc">CellType</span> <span class="n">type</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getCellType</span><span class="o">();</span>

        <span class="c1">// 值</span>
        <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 如果是字符串类型</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getStringCellValue</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">NUMERIC</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 如果是数字类型，处理为字符串</span>
            <span class="kt">double</span> <span class="n">numericValue</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getNumericCellValue</span><span class="o">();</span>

            <span class="c1">// 使用 DecimalFormat 强制转换为字符串，不进行科学计数法</span>
            <span class="nc">DecimalFormat</span> <span class="n">df</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DecimalFormat</span><span class="o">(</span><span class="s">"0"</span><span class="o">);</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">numericValue</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"单元格的值: "</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>使用 <code class="language-plaintext highlighter-rouge">DataFormatter</code> 来处理</strong></p>

<p><code class="language-plaintext highlighter-rouge">DataFormatter</code> 是 Apache POI 提供的一个工具，它可以根据单元格的实际显示格式来读取数据。这对于处理数值格式化问题特别有用，尤其是在数据被自动转换为数值类型时。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.apache.poi.ss.usermodel.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.poi.ss.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExcelReader</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 假设 cell 是当前单元格</span>
        <span class="nc">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="o">...;</span>

        <span class="c1">// 使用 DataFormatter 获取值</span>
        <span class="nc">DataFormatter</span> <span class="n">dataFormatter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataFormatter</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">cellValue</span> <span class="o">=</span> <span class="n">dataFormatter</span><span class="o">.</span><span class="na">formatCellValue</span><span class="o">(</span><span class="n">cell</span><span class="o">);</span>

        <span class="c1">// 输出读取的单元格值</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"单元格的值: "</span> <span class="o">+</span> <span class="n">cellValue</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>设置 Excel 中的单元格格式</strong></p>

<p>如果你控制 Excel 文件的创建，确保该列的格式设置为文本格式。这可以避免 Excel 自动将大数字识别为 <code class="language-plaintext highlighter-rouge">double</code>。</p>

<p>在 Apache POI 中，可以设置单元格格式为文本：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CellStyle</span> <span class="n">cellStyle</span> <span class="o">=</span> <span class="n">workbook</span><span class="o">.</span><span class="na">createCellStyle</span><span class="o">();</span>
<span class="nc">DataFormat</span> <span class="n">format</span> <span class="o">=</span> <span class="n">workbook</span><span class="o">.</span><span class="na">createDataFormat</span><span class="o">();</span>
<span class="n">cellStyle</span><span class="o">.</span><span class="na">setDataFormat</span><span class="o">(</span><span class="n">format</span><span class="o">.</span><span class="na">getFormat</span><span class="o">(</span><span class="s">"@"</span><span class="o">));</span> <span class="c1">// "@" 表示文本格式</span>
<span class="n">cell</span><span class="o">.</span><span class="na">setCellStyle</span><span class="o">(</span><span class="n">cellStyle</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>强制读取为字符串</strong></p>

<p>如果你确定单元格中的数据应该是文本（如电话号码），即使 Excel 将其处理为数值类型，你也可以通过 <code class="language-plaintext highlighter-rouge">getStringCellValue</code> 强制将其作为字符串读取。为了确保数字不被科学计数法转换，你可以先将 <code class="language-plaintext highlighter-rouge">NUMERIC</code> 类型转换为字符串。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">NUMERIC</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cellText</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">cell</span><span class="o">.</span><span class="na">getNumericCellValue</span><span class="o">());</span>
    <span class="c1">// 如果 cellText 显示为科学计数法，可以通过 String.format 转换成标准格式</span>
    <span class="n">value</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%.0f"</span><span class="o">,</span> <span class="n">cell</span><span class="o">.</span><span class="na">getNumericCellValue</span><span class="o">());</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getStringCellValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>读取前将单元格设置为文本类型读取</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cell</span><span class="o">.</span><span class="na">setCellType</span><span class="o">(</span><span class="nc">CellType</span><span class="o">.</span><span class="na">STRING</span><span class="o">);</span> 
</code></pre></div></div>

<p>总结：</p>

<ol>
  <li><strong>对于数字类型（<code class="language-plaintext highlighter-rouge">NUMERIC</code>），使用 <code class="language-plaintext highlighter-rouge">DecimalFormat</code></strong> 来确保数值以文本形式显示，避免科学计数法。</li>
  <li><strong>使用 <code class="language-plaintext highlighter-rouge">DataFormatter</code></strong>，它能够智能处理数值与文本类型，并确保读取时按照实际显示格式处理。</li>
  <li><strong>强制读取为文本</strong>，特别是对于像电话号码、身份证号等数据，不应将其当作数字类型处理，避免出现精度丢失或科学计数法的情况。</li>
</ol>

<h3 id="完整代码">完整代码</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.ilw.formflowprovider.center.service.other</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.github.pjfanning.xlsx.StreamingReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.poi.ss.usermodel.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.poi.xssf.streaming.SXSSFWorkbook</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.BiConsumer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.StreamSupport</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">poi</span><span class="o">.</span><span class="na">xssf</span><span class="o">.</span><span class="na">streaming</span><span class="o">.</span><span class="na">SXSSFWorkbook</span><span class="o">.</span><span class="na">DEFAULT_WINDOW_SIZE</span><span class="o">;</span>

<span class="cm">/**
 * Excel导出服务层
 * @author aotmd
 * @version 1.0
 * @date 2024/11/20 11:05
 */</span>
<span class="nd">@Service</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExcelService</span> <span class="o">{</span>
    <span class="cm">/** 在刷新之前保留在内存中的行数，请参见上文。 */</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">rowAccessWindowSize</span> <span class="o">=</span> <span class="no">DEFAULT_WINDOW_SIZE</span><span class="o">;</span>

    <span class="cm">/**
     * 设置写操作，在刷新之前保留在内存中的行数
     * @param rowAccessWindowSize 在刷新之前保留在内存中的行数
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRowAccessWindowSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">rowAccessWindowSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">rowAccessWindowSize</span> <span class="o">=</span> <span class="n">rowAccessWindowSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 导出Excel
     * @param os 输出流
     * @param chineseTableHeader 中文表头
     * @param callback 回调
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">exportExcel</span><span class="o">(</span><span class="nc">OutputStream</span> <span class="n">os</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">chineseTableHeader</span><span class="o">,</span> <span class="nc">ConsumerWithException</span><span class="o">&lt;</span><span class="nc">Sheet</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/*设置页码*/</span>
        <span class="c1">// 创建Excel工作簿</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">SXSSFWorkbook</span> <span class="n">wb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SXSSFWorkbook</span><span class="o">(</span><span class="n">rowAccessWindowSize</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">Sheet</span> <span class="n">sheet</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="na">createSheet</span><span class="o">(</span><span class="s">"Sheet1"</span><span class="o">);</span>
            <span class="c1">// 设置每列的宽度</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chineseTableHeader</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">sheet</span><span class="o">.</span><span class="na">setColumnWidth</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="mi">5000</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="c1">// 创建一个CellStyle对象，用于设置加粗样式</span>
            <span class="nc">CellStyle</span> <span class="n">headerCellStyle</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="na">createCellStyle</span><span class="o">();</span>
            <span class="nc">Font</span> <span class="n">headerFont</span> <span class="o">=</span> <span class="n">wb</span><span class="o">.</span><span class="na">createFont</span><span class="o">();</span>
            <span class="n">headerFont</span><span class="o">.</span><span class="na">setBold</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>  <span class="c1">// 设置加粗</span>
            <span class="n">headerCellStyle</span><span class="o">.</span><span class="na">setFont</span><span class="o">(</span><span class="n">headerFont</span><span class="o">);</span>  <span class="c1">// 将加粗字体应用到样式中</span>

            <span class="c1">// 写入表头</span>
            <span class="nc">Row</span> <span class="n">headerRow</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">createRow</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">colIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">chineseTableHeader</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">headerRow</span><span class="o">.</span><span class="na">createCell</span><span class="o">(</span><span class="n">colIndex</span><span class="o">++);</span>
                <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
                <span class="n">cell</span><span class="o">.</span><span class="na">setCellStyle</span><span class="o">(</span><span class="n">headerCellStyle</span><span class="o">);</span>  <span class="c1">// 应用加粗样式</span>
            <span class="o">}</span>
            <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">sheet</span><span class="o">);</span>
            <span class="n">wb</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">os</span><span class="o">);</span>
            <span class="n">os</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
            <span class="n">os</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导出数据抛出异常"</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"导出数据抛出异常"</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 导入Excel
     * @param is 输入流
     * @param callback 回调
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">importExcel</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">is</span><span class="o">,</span> <span class="nc">BiConsumer</span><span class="o">&lt;</span><span class="nc">Sheet</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 使用StreamingReader包装后，就只能使用流来操作行了，不能指定获取指定行了</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Workbook</span> <span class="n">workbook</span> <span class="o">=</span> <span class="nc">StreamingReader</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">rowCacheSize</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>    <span class="c1">// 设置内存中保持的行数，默认是10</span>
                <span class="o">.</span><span class="na">bufferSize</span><span class="o">(</span><span class="mi">4096</span><span class="o">)</span><span class="c1">// 设置读取 InputStream 时的缓冲区大小（字节）</span>
                <span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">is</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">Sheet</span> <span class="n">sheet</span> <span class="o">=</span> <span class="n">workbook</span><span class="o">.</span><span class="na">getSheetAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">sheet</span><span class="o">.</span><span class="na">getLastRowNum</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">10000</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导入的数据查过10000行"</span><span class="o">);</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"导入的数据查过10000行"</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Row</span><span class="o">&gt;</span> <span class="n">rowIterator</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="c1">// 获取数据的表头,第一行</span>
            <span class="nc">Row</span> <span class="n">r</span> <span class="o">=</span> <span class="n">rowIterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tableHeader</span> <span class="o">=</span> <span class="nc">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">spliterator</span><span class="o">(),</span> <span class="kc">false</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Cell:</span><span class="o">:</span><span class="n">getStringCellValue</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>

            <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">sheet</span><span class="o">,</span> <span class="n">tableHeader</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导入时发生异常：{}"</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"导入时发生异常：{}"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 写入数据行到Excel
     *
     * @param sheet       excel对象
     * @param data        数据
     * @param fieldHeader 属性key
     * @param rowIndex    第几行,注意最后返回的是新行
     */</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">writeDataRowsToExcel</span><span class="o">(</span><span class="nc">Sheet</span> <span class="n">sheet</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">fieldHeader</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rowIndex</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">colIndex</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">line</span> <span class="o">:</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Row</span> <span class="n">dataRow</span> <span class="o">=</span> <span class="n">sheet</span><span class="o">.</span><span class="na">createRow</span><span class="o">(</span><span class="n">rowIndex</span><span class="o">++);</span>
            <span class="n">colIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">titleKey</span> <span class="o">:</span> <span class="n">fieldHeader</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">dataRow</span><span class="o">.</span><span class="na">createCell</span><span class="o">(</span><span class="n">colIndex</span><span class="o">++);</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">line</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">titleKey</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="nc">Object</span> <span class="n">o</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">titleKey</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;)</span> <span class="n">o</span><span class="o">;</span>
                    <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
                    <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">String</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">Integer</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">((</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="nc">Double</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">cell</span><span class="o">.</span><span class="na">setCellValue</span><span class="o">((</span><span class="nc">Double</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rowIndex</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 获取原值
     *
     * @param cell 单元格
     * @return
     */</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">getValue</span><span class="o">(</span><span class="nc">Cell</span> <span class="n">cell</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 单元格类型</span>
        <span class="nc">CellType</span> <span class="n">type</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getCellType</span><span class="o">();</span>
        <span class="c1">// 值</span>
        <span class="nc">Object</span> <span class="n">value</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">NUMERIC</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 字符串或数字类型</span>
            <span class="kt">double</span> <span class="n">numericCellValue</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getNumericCellValue</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">numericCellValue</span> <span class="o">==</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">numericCellValue</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">value</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">numericCellValue</span><span class="o">;</span><span class="c1">// 转为整数</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">numericCellValue</span><span class="o">;</span> <span class="c1">//保持为浮动数</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="nc">CellType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">cell</span><span class="o">.</span><span class="na">getStringCellValue</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="csv导入导出">CSV导入导出</h2>

<h3 id="导出-1">导出</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CsvService</span> <span class="o">{</span>

    <span class="cm">/**
     * 导出CSV
     * @param tableHeader 表头
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">exportCsv</span><span class="o">(</span><span class="nc">OutputStream</span> <span class="n">os</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tableHeader</span><span class="o">,</span> <span class="nc">ConsumerWithException</span><span class="o">&lt;</span><span class="nc">BufferedWriter</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// 写入BOM头，通知Excel使用UTF-8编码</span>
        <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0xEF</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0xBB</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0xBF</span> <span class="o">});</span>
        <span class="c1">// 将BufferedWriter包裹在BufferedOutputStream中</span>
        <span class="c1">// 写入 CSV 文件</span>
        <span class="c1">// 32KB缓冲区</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="n">os</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">),</span><span class="mi">32</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// 写入表头</span>
            <span class="nc">String</span> <span class="n">headerLine</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="n">tableHeader</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">headerLine</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>  <span class="c1">// 换行</span>
            <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">writer</span><span class="o">);</span><span class="c1">//执行逻辑</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>  <span class="c1">// 确保所有数据都写入到响应流</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导出CSV数据抛出异常"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 写入CSV的数据（带转义处理）
     * @param writer 输出流
     * @param data 数据（数组）
     * @param fieldHeader 字段名
     * @throws IOException
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeCsvData</span><span class="o">(</span><span class="nc">BufferedWriter</span> <span class="n">writer</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">fieldHeader</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">rowData</span> <span class="o">:</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">StringBuilder</span> <span class="n">line</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fieldHeader</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">rowData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">line</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\"\""</span><span class="o">);</span>  <span class="c1">// 对空值进行转义处理</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="nc">String</span> <span class="n">valueStr</span><span class="o">;</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;)</span> <span class="n">value</span><span class="o">;</span>
                        <span class="n">valueStr</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
                    <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                        <span class="n">valueStr</span><span class="o">=</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="c1">// 对字段值进行转义处理</span>
                    <span class="n">valueStr</span> <span class="o">=</span> <span class="n">escapeCsvValue</span><span class="o">(</span><span class="n">valueStr</span><span class="o">);</span>
                    <span class="n">line</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">valueStr</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">);</span>  <span class="c1">// 用双引号包裹数据</span>
                <span class="o">}</span>
                <span class="n">line</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>  <span class="c1">// 每个字段后面加上逗号</span>
            <span class="o">}</span>
            <span class="c1">// 移除行尾的逗号</span>
            <span class="n">line</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>  <span class="c1">// 换行</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 转义CSV中的特殊字符
     * @param value 字段值
     * @return 转义后的字符串
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">escapeCsvValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 替换双引号为两个双引号</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"\""</span><span class="o">,</span> <span class="s">"\"\""</span><span class="o">);</span>
        <span class="c1">// 去除可能的换行符和回车符</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"\n"</span><span class="o">,</span> <span class="s">" "</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="s">"\r"</span><span class="o">,</span> <span class="s">" "</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意设置BOM头，强制指定编码。使用Apipost接口调试时，会自动忽略掉BOM头，不用担心，改用浏览器调试就有正常的BOM头。</p>

<p>使用示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">csvService</span><span class="o">.</span><span class="na">exportCsv</span><span class="o">(</span><span class="n">outputStream</span><span class="o">,</span> <span class="n">tableHeader</span><span class="o">,</span> <span class="o">(</span><span class="n">writer</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">data0</span><span class="o">;</span>
    <span class="c1">// 分页获取数据并追加写入CSV文件</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">maxPage</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="o">...</span>
        <span class="n">csvService</span><span class="o">.</span><span class="na">writeCsvData</span><span class="o">(</span><span class="n">writer</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="n">keys</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div></div>

<h3 id="导入-1">导入</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**导入每批次处理1000条数据*/</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">batchSize</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>

<span class="cm">/**
 * 设置导入每次处理数量
 * @param batchSize 处理数量
 */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBatchSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">batchSize</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">batchSize</span> <span class="o">=</span> <span class="n">batchSize</span><span class="o">;</span>
<span class="o">}</span>
<span class="cm">/**
 * 导入CSV数据
 * @param inputStream 输入流
 * @param callback 处理每行数据的回调函数
 * @throws IOException
 */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">importCsv</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">inputStream</span><span class="o">,</span> <span class="nc">ConsumerWithException</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)))</span> <span class="o">{</span>
        <span class="c1">// 跳过BOM头</span>
        <span class="n">reader</span><span class="o">.</span><span class="na">mark</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">()</span> <span class="o">!=</span> <span class="mh">0xEF</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">reader</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="c1">// 读取表头</span>
        <span class="nc">String</span> <span class="n">headerLine</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">fileHeader</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">headerLine</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">));</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">dataList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">String</span> <span class="n">line</span><span class="o">;</span>
        <span class="c1">// 每批次处理1000条数据</span>
        <span class="n">batchSize</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// 逐行读取并处理CSV数据</span>
        <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">rowData</span> <span class="o">=</span> <span class="n">parseCsvRow</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">fileHeader</span><span class="o">);</span>
            <span class="n">dataList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rowData</span><span class="o">);</span>

            <span class="c1">// 每处理完一个批次数据，调用回调函数</span>
            <span class="k">if</span> <span class="o">(++</span><span class="n">count</span> <span class="o">%</span> <span class="n">batchSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">dataList</span><span class="o">));</span>
                <span class="n">dataList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span> <span class="c1">// 清空当前批次数据</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// 处理剩余的不足一批的数据</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">dataList</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">dataList</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导入CSV数据抛出异常"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"导入CSV文件时出现错误"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/**
 * 解析CSV每行数据并映射为Map
 * @param line CSV中的一行数据
 * @param tableHeader 表头
 * @return 行数据的Map
 */</span>
<span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">parseCsvRow</span><span class="o">(</span><span class="nc">String</span> <span class="n">line</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tableHeader</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">rowData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">tableHeader</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">tableHeader</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">fields</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>

        <span class="c1">// 处理转义字符</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">unescapeCsvValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
        <span class="n">rowData</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">rowData</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**
 * 转义CSV中的特殊字符（例如，双引号、换行符等）
 * @param value 字段值
 * @return 还原转义后的字符串
 */</span>
<span class="kd">private</span> <span class="nc">String</span> <span class="nf">unescapeCsvValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 去除双引号</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"\""</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">"\""</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// 替换双引号为一个双引号</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"\"\""</span><span class="o">,</span> <span class="s">"\""</span><span class="o">);</span>
    <span class="c1">// 去除换行符和回车符</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="s">"\n"</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="s">"\r"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">csvService</span><span class="o">.</span><span class="na">importCsv</span><span class="o">(</span><span class="n">csvInputStream</span><span class="o">,</span> <span class="n">tableHeader</span><span class="o">,</span> <span class="n">dataList</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="c1">// 这里处理导入的数据，比如保存到数据库</span>
    <span class="n">dataList</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"导入的数据："</span> <span class="o">+</span> <span class="n">row</span><span class="o">);</span>
    <span class="o">});</span>
<span class="o">});</span>
</code></pre></div></div>

<h3 id="完整代码-1">完整代码</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.ilw.formflowprovider.center.service.other</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.charset.StandardCharsets</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="cm">/**
 * CSV导出服务层
 * @author aotmd
 * @version 1.0
 * @date 2024/11/20 10:49
 */</span>
<span class="nd">@Slf4j</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CsvService</span> <span class="o">{</span>
    <span class="cm">/**导入每批次处理1000条数据*/</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">batchSize</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>

    <span class="cm">/**
     * 设置导入每次处理数量
     * @param batchSize 处理数量
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBatchSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">batchSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">batchSize</span> <span class="o">=</span> <span class="n">batchSize</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 导出CSV
     * @param tableHeader 表头
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">exportCsv</span><span class="o">(</span><span class="nc">OutputStream</span> <span class="n">os</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tableHeader</span><span class="o">,</span> <span class="nc">ConsumerWithException</span><span class="o">&lt;</span><span class="nc">BufferedWriter</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// 写入BOM头，通知Excel使用UTF-8编码</span>
        <span class="n">os</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0xEF</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0xBB</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span> <span class="mh">0xBF</span> <span class="o">});</span>
        <span class="c1">// 将BufferedWriter包裹在BufferedOutputStream中</span>
        <span class="c1">// 写入 CSV 文件</span>
        <span class="c1">// 32KB缓冲区</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="n">os</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">),</span><span class="mi">32</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// 写入表头</span>
            <span class="nc">String</span> <span class="n">headerLine</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="n">tableHeader</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">headerLine</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>  <span class="c1">// 换行</span>
            <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">writer</span><span class="o">);</span><span class="c1">//执行逻辑</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>  <span class="c1">// 确保所有数据都写入到响应流</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导出CSV数据抛出异常"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 写入CSV的数据（带转义处理）
     * @param writer 输出流
     * @param data 数据（数组）
     * @param fieldHeader 字段名
     * @throws IOException
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeCsvData</span><span class="o">(</span><span class="nc">BufferedWriter</span> <span class="n">writer</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">fieldHeader</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">rowData</span> <span class="o">:</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">StringBuilder</span> <span class="n">line</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fieldHeader</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">rowData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">field</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">line</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\"\""</span><span class="o">);</span>  <span class="c1">// 对空值进行转义处理</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="nc">String</span> <span class="n">valueStr</span><span class="o">;</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;)</span> <span class="n">value</span><span class="o">;</span>
                        <span class="n">valueStr</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">","</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
                    <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                        <span class="n">valueStr</span><span class="o">=</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="c1">// 对字段值进行转义处理</span>
                    <span class="n">valueStr</span> <span class="o">=</span> <span class="n">escapeCsvValue</span><span class="o">(</span><span class="n">valueStr</span><span class="o">);</span>
                    <span class="n">line</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">valueStr</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\""</span><span class="o">);</span>  <span class="c1">// 用双引号包裹数据</span>
                <span class="o">}</span>
                <span class="n">line</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>  <span class="c1">// 每个字段后面加上逗号</span>
            <span class="o">}</span>
            <span class="c1">// 移除行尾的逗号</span>
            <span class="n">line</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>  <span class="c1">// 换行</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 转义CSV中的特殊字符
     * @param value 字段值
     * @return 转义后的字符串
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">escapeCsvValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 替换双引号为两个双引号</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"\""</span><span class="o">,</span> <span class="s">"\"\""</span><span class="o">);</span>
        <span class="c1">// 去除可能的换行符和回车符</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"\n"</span><span class="o">,</span> <span class="s">" "</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="s">"\r"</span><span class="o">,</span> <span class="s">" "</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="cm">/**
     * 导入CSV数据
     * @param inputStream 输入流
     * @param callback 处理每行数据的回调函数
     * @throws IOException
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">importCsv</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">inputStream</span><span class="o">,</span> <span class="nc">ConsumerWithException</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)))</span> <span class="o">{</span>
            <span class="c1">// 跳过BOM头</span>
            <span class="n">reader</span><span class="o">.</span><span class="na">mark</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">()</span> <span class="o">!=</span> <span class="mh">0xEF</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">reader</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="c1">// 读取表头</span>
            <span class="nc">String</span> <span class="n">headerLine</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">fileHeader</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">headerLine</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">));</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">dataList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="nc">String</span> <span class="n">line</span><span class="o">;</span>
            <span class="c1">// 每批次处理1000条数据</span>
            <span class="n">batchSize</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

            <span class="c1">// 逐行读取并处理CSV数据</span>
            <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">rowData</span> <span class="o">=</span> <span class="n">parseCsvRow</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">fileHeader</span><span class="o">);</span>
                <span class="n">dataList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rowData</span><span class="o">);</span>

                <span class="c1">// 每处理完一个批次数据，调用回调函数</span>
                <span class="k">if</span> <span class="o">(++</span><span class="n">count</span> <span class="o">%</span> <span class="n">batchSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">dataList</span><span class="o">));</span>
                    <span class="n">dataList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span> <span class="c1">// 清空当前批次数据</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// 处理剩余的不足一批的数据</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">dataList</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">callback</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">dataList</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"导入CSV数据抛出异常"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"导入CSV文件时出现错误"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 解析CSV每行数据并映射为Map
     * @param line CSV中的一行数据
     * @param tableHeader 表头
     * @return 行数据的Map
     */</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">parseCsvRow</span><span class="o">(</span><span class="nc">String</span> <span class="n">line</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tableHeader</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">rowData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">tableHeader</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">tableHeader</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">fields</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>

            <span class="c1">// 处理转义字符</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">unescapeCsvValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
            <span class="n">rowData</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rowData</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 转义CSV中的特殊字符（例如，双引号、换行符等）
     * @param value 字段值
     * @return 还原转义后的字符串
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">unescapeCsvValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 去除双引号</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"\""</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">"\""</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 替换双引号为一个双引号</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"\"\""</span><span class="o">,</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="c1">// 去除换行符和回车符</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="s">"\n"</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="s">"\r"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">本地环境正常，k8s上中文乱码解决方法</title><link href="/2024/11/15/%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%AD%A3%E5%B8%B8-k8s%E4%B8%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/" rel="alternate" type="text/html" title="本地环境正常，k8s上中文乱码解决方法" /><published>2024-11-15T00:00:00+08:00</published><updated>2024-11-15T00:00:00+08:00</updated><id>/2024/11/15/%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%AD%A3%E5%B8%B8%EF%BC%8Ck8s%E4%B8%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95</id><content type="html" xml:base="/2024/11/15/%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%AD%A3%E5%B8%B8-k8s%E4%B8%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"><![CDATA[<h1 id="引言">引言</h1>

<p>本地环境正常，docker容器正常，k8s上中文乱码。</p>

<h1 id="k8s上中文乱码">k8s上中文乱码</h1>

<p>具体问题为：在本地调试Post方法，对于同一接口，<code class="language-plaintext highlighter-rouge">@RequestBody</code>传递中文参数正常，<code class="language-plaintext highlighter-rouge">@RequestParam</code>传递中文参数正常。打包为docker镜像也正常，部署到k8s则出现问题，对于同一接口，<code class="language-plaintext highlighter-rouge">@RequestBody</code>传递中文参数正常，<code class="language-plaintext highlighter-rouge">@RequestParam</code>传递中文参数乱码。</p>

<p>可能原因：某个节点环境不正常。</p>

<p><code class="language-plaintext highlighter-rouge">dockerfile</code>文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CMD java <span class="nv">$J_ARG</span> <span class="nt">-Dfile</span>.encoding<span class="o">=</span>UTF8
</code></pre></div></div>

<p>这里编码应该为<code class="language-plaintext highlighter-rouge">UTF-8</code>。</p>

<p>修改配置文件也可以：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">http</span><span class="pi">:</span>
    <span class="na">encoding</span><span class="pi">:</span>
      <span class="na">charset</span><span class="pi">:</span> <span class="s">UTF-8</span>
      <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">force</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">多级Map连续设值</title><link href="/2024/11/07/%E5%B5%8C%E5%A5%97Map%E7%9A%84%E5%B9%B3%E9%93%BA%E4%BA%8E%E5%8F%8D%E5%90%91%E6%93%8D%E4%BD%9C/" rel="alternate" type="text/html" title="多级Map连续设值" /><published>2024-11-07T00:00:00+08:00</published><updated>2024-11-07T00:00:00+08:00</updated><id>/2024/11/07/%E5%B5%8C%E5%A5%97Map%E7%9A%84%E5%B9%B3%E9%93%BA%E4%BA%8E%E5%8F%8D%E5%90%91%E6%93%8D%E4%BD%9C</id><content type="html" xml:base="/2024/11/07/%E5%B5%8C%E5%A5%97Map%E7%9A%84%E5%B9%B3%E9%93%BA%E4%BA%8E%E5%8F%8D%E5%90%91%E6%93%8D%E4%BD%9C/"><![CDATA[<h1 id="引言">引言</h1>
<p>将多级Map平铺和反向操作的方法。</p>

<h1 id="map">Map</h1>

<h2 id="flattenmap-方法"><code class="language-plaintext highlighter-rouge">flattenMap</code> 方法</h2>

<p><strong><code class="language-plaintext highlighter-rouge">flattenMap</code></strong>：将一个嵌套的 <code class="language-plaintext highlighter-rouge">Map</code> 转换为平铺的 <code class="language-plaintext highlighter-rouge">Map</code>，每一层的键用 <code class="language-plaintext highlighter-rouge">.</code> 连接，扁平化嵌套结构。</p>

<p><strong>方法定义</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">flattenMap</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">nestedMap</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>参数</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">nestedMap</code></strong> (<code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt;</code>)：一个嵌套的 <code class="language-plaintext highlighter-rouge">Map</code>，其键值可能为更深层次的 <code class="language-plaintext highlighter-rouge">Map</code> 或基本数据类型。</p>

<p><strong>返回值</strong></p>

<p>返回一个平铺的 <code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt;</code>，其中嵌套的结构被展开，键名通过 <code class="language-plaintext highlighter-rouge">.</code> 分隔符表示路径。</p>

<p><strong>功能</strong></p>

<p>该方法将嵌套的 <code class="language-plaintext highlighter-rouge">Map</code> 转换为平铺的 <code class="language-plaintext highlighter-rouge">Map</code>，将嵌套对象的键名通过 <code class="language-plaintext highlighter-rouge">.</code> 符号进行连接，生成扁平化的键值对。</p>

<p>例如，<code class="language-plaintext highlighter-rouge">data.testobj.name</code> 嵌套Map会被平铺为 <code class="language-plaintext highlighter-rouge">data.testobj.name</code> 键。</p>

<p><strong>示例</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">nestedMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">testobj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">testobj</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="n">testobj</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"3"</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">data</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"count"</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>
<span class="n">data</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"testobj"</span><span class="o">,</span> <span class="n">testobj</span><span class="o">);</span>

<span class="n">nestedMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"data"</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
<span class="n">nestedMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"_id"</span><span class="o">,</span> <span class="s">"67089190f180b00a00476c67"</span><span class="o">);</span>
<span class="n">nestedMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"collectionName"</span><span class="o">,</span> <span class="s">"co_common_test1"</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">flatMap</span> <span class="o">=</span> <span class="n">flattenMap</span><span class="o">(</span><span class="n">nestedMap</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>输出</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
    <span class="s">"data.count"</span><span class="o">:</span> <span class="mi">6</span><span class="o">,</span>
    <span class="s">"data.testobj.age"</span><span class="o">:</span> <span class="mi">5</span><span class="o">,</span>
    <span class="s">"data.testobj.name"</span><span class="o">:</span> <span class="s">"3"</span><span class="o">,</span>
    <span class="s">"_id"</span><span class="o">:</span> <span class="s">"67089190f180b00a00476c67"</span><span class="o">,</span>
    <span class="s">"collectionName"</span><span class="o">:</span> <span class="s">"co_common_test1"</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>注意事项</strong></p>

<p>该方法将嵌套的 <code class="language-plaintext highlighter-rouge">Map</code> 结构递归展开，每一层的键名通过 <code class="language-plaintext highlighter-rouge">.</code> 符号进行连接，形成一个平铺的结构。</p>

<p>如果 <code class="language-plaintext highlighter-rouge">nestedMap</code> 中的某个值是非 <code class="language-plaintext highlighter-rouge">Map</code> 类型，则会将该值作为扁平化后的结果。</p>

<h2 id="unflattenmap-方法"><code class="language-plaintext highlighter-rouge">unflattenMap</code> 方法</h2>

<p><strong><code class="language-plaintext highlighter-rouge">unflattenMap</code></strong>：将一个平铺的 <code class="language-plaintext highlighter-rouge">Map</code>（带点的键）转换为嵌套的 <code class="language-plaintext highlighter-rouge">Map</code> 结构，逐级展开。</p>

<p><strong>方法定义</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">unflattenMap</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">flatMap</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>参数</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">flatMap</code></strong> (<code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt;</code>)：一个平铺的 <code class="language-plaintext highlighter-rouge">Map</code>，其键名使用 <code class="language-plaintext highlighter-rouge">.</code> 作为分隔符（例如 <code class="language-plaintext highlighter-rouge">data.count</code>, <code class="language-plaintext highlighter-rouge">data.testobj.name</code>），表示嵌套的结构。</p>

<p><strong>返回值</strong></p>

<p>返回一个嵌套的 <code class="language-plaintext highlighter-rouge">Map&lt;String, Object&gt;</code>，其中键对应的路径会被还原为嵌套的对象结构。</p>

<p><strong>功能</strong></p>

<p>该方法将一个平铺的 <code class="language-plaintext highlighter-rouge">Map</code> 转换为嵌套的 <code class="language-plaintext highlighter-rouge">Map</code>。平铺的 <code class="language-plaintext highlighter-rouge">Map</code> 中的键名是通过 <code class="language-plaintext highlighter-rouge">.</code> 分隔符表示的路径。该方法会根据路径拆分并逐层构建嵌套的 <code class="language-plaintext highlighter-rouge">Map</code> 结构。</p>

<p>例如，<code class="language-plaintext highlighter-rouge">data.testobj.name</code> 会被展开为 <code class="language-plaintext highlighter-rouge">Map</code> 结构：<code class="language-plaintext highlighter-rouge">data -&gt; testobj -&gt; name</code>。</p>

<p><strong>示例</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">flatMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">flatMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"data.count"</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>
<span class="n">flatMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"data.testobj.age"</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="n">flatMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"_id"</span><span class="o">,</span> <span class="s">"67089190f180b00a00476c67"</span><span class="o">);</span>
<span class="n">flatMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"collectionName"</span><span class="o">,</span> <span class="s">"co_common_test1"</span><span class="o">);</span>
<span class="n">flatMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"data.testobj.name"</span><span class="o">,</span> <span class="s">"3"</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">nestedMap</span> <span class="o">=</span> <span class="n">unflattenMap</span><span class="o">(</span><span class="n">flatMap</span><span class="o">);</span>
</code></pre></div></div>
<p><strong>输出</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
    <span class="s">"data"</span><span class="o">:</span> <span class="o">{</span>
        <span class="s">"count"</span><span class="o">:</span> <span class="mi">6</span><span class="o">,</span>
        <span class="s">"testobj"</span><span class="o">:</span> <span class="o">{</span>
            <span class="s">"age"</span><span class="o">:</span> <span class="mi">5</span><span class="o">,</span>
            <span class="s">"name"</span><span class="o">:</span> <span class="s">"3"</span>
        <span class="o">}</span>
    <span class="o">},</span>
    <span class="s">"_id"</span><span class="o">:</span> <span class="s">"67089190f180b00a00476c67"</span><span class="o">,</span>
    <span class="s">"collectionName"</span><span class="o">:</span> <span class="s">"co_common_test1"</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>注意事项</strong></p>

<p>该方法假设所有带点路径的键都需要进行解包，逐级生成嵌套 <code class="language-plaintext highlighter-rouge">Map</code>。</p>

<p>如果 <code class="language-plaintext highlighter-rouge">flatMap</code> 中某个路径已经存在嵌套结构，则该路径的值将被复写为新的值。</p>

<p>这两个方法可以方便地在平铺和嵌套 <code class="language-plaintext highlighter-rouge">Map</code> 之间转换，使得对复杂结构的数据操作更加简便。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">多级Map连续设值</title><link href="/2024/11/06/%E5%A4%9A%E7%BA%A7Map%E8%BF%9E%E7%BB%AD%E8%AE%BE%E5%80%BC/" rel="alternate" type="text/html" title="多级Map连续设值" /><published>2024-11-06T00:00:00+08:00</published><updated>2024-11-06T00:00:00+08:00</updated><id>/2024/11/06/%E5%A4%9A%E7%BA%A7Map%E8%BF%9E%E7%BB%AD%E8%AE%BE%E5%80%BC</id><content type="html" xml:base="/2024/11/06/%E5%A4%9A%E7%BA%A7Map%E8%BF%9E%E7%BB%AD%E8%AE%BE%E5%80%BC/"><![CDATA[<h1 id="引言">引言</h1>
<p>一个简单的，连续设置Map值的方法。</p>

<h1 id="map">Map</h1>

<h2 id="多级map连续设值">多级Map连续设值</h2>

<p>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cm">/**
 * 通过路径连续设置值，分隔符为.号
 * @param map 键值对
 * @param path 路径
 * @param value 设置的值
 * @param &lt;T&gt; 值类型
 */</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">setValueByPath</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">,</span> <span class="nc">String</span> <span class="n">path</span><span class="o">,</span> <span class="no">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">path</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">path</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"路径不能为空"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">String</span><span class="o">[]</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">);</span>
    <span class="nc">Object</span> <span class="n">current</span> <span class="o">=</span> <span class="n">map</span><span class="o">;</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">keys</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">keys</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">current</span> <span class="k">instanceof</span> <span class="nc">Map</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">currentMap</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">current</span><span class="o">;</span>
            <span class="c1">// 如果当前Map中没有该key，创建一个新的Map</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">currentMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">currentMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;());</span>
            <span class="o">}</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">currentMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"路径中的某个节点不是Map类型，路径: "</span> <span class="o">+</span> <span class="n">path</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// 最后一个key，设置值</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">current</span> <span class="k">instanceof</span> <span class="nc">Map</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">currentMap</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">current</span><span class="o">;</span>
        <span class="n">currentMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">keys</span><span class="o">[</span><span class="n">keys</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"设置值时出错，路径指向的目标不是Map类型，路径: "</span> <span class="o">+</span> <span class="n">path</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

<span class="c1">// 测试路径设置</span>
<span class="n">setValueByPath</span><span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="s">"data.count"</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
<span class="n">setValueByPath</span><span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="s">"data.count.details.value"</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>

<span class="c1">// 打印结果</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
</code></pre></div></div>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">MongoDB分组聚合解析器</title><link href="/2024/11/04/MongoDB%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88%E8%A7%A3%E6%9E%90%E5%99%A8/" rel="alternate" type="text/html" title="MongoDB分组聚合解析器" /><published>2024-11-04T00:00:00+08:00</published><updated>2024-11-04T00:00:00+08:00</updated><id>/2024/11/04/MongoDB%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88%E8%A7%A3%E6%9E%90%E5%99%A8</id><content type="html" xml:base="/2024/11/04/MongoDB%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88%E8%A7%A3%E6%9E%90%E5%99%A8/"><![CDATA[<h1 id="引言">引言</h1>
<p>一个对MongoDB分组聚合操作的简单封装类。</p>

<h1 id="mongodb">MongoDB</h1>

<h2 id="mongodb分组聚合解析器">MongoDB分组聚合解析器</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 分组聚合解析器
 * @author aotmd
 * @version 1.1
 * @date 2024/10/30 10:34
 */</span>
<span class="kd">private</span> <span class="kd">class</span> <span class="nc">GroupAggregationGenerator</span><span class="o">{</span>
    <span class="cm">/**字段转换后加的后缀*/</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">TO_DECIMAL</span> <span class="o">=</span> <span class="s">"ToDecimal"</span><span class="o">;</span>
    <span class="cm">/**实际主键名称*/</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">PRIMARY_KEY</span> <span class="o">=</span> <span class="s">"_id"</span><span class="o">;</span>

    <span class="cm">/**
     * 生成分组聚合操作
     * @param groupBy 分组字段
     * @param aggregations 聚合设置
     * @return
     */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">AggregationOperation</span><span class="o">&gt;</span> <span class="nf">buildAggregationOperations</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">groupBy</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">CommonFormParam</span><span class="o">.</span><span class="na">AggregationField</span><span class="o">&gt;</span> <span class="n">aggregations</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 判断是否为空,分组字段和聚合字段都为空，则直接返回</span>
        <span class="k">if</span> <span class="o">((</span><span class="n">aggregations</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">aggregations</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">groupBy</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">groupBy</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="o">}</span>
        <span class="c1">// 分组字段空串检测</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">groupBy</span><span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"分组字段为空"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">aggregations</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"聚合设置为空"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">groupBy</span><span class="o">).</span><span class="na">parallel</span><span class="o">().</span><span class="na">anyMatch</span><span class="o">(</span><span class="nl">StringUtil:</span><span class="o">:</span><span class="n">isBlank</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">b</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"分组字段出现空串"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 字段检测</span>
        <span class="n">aggregations</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="nc">CommonFormParam</span><span class="o">.</span><span class="na">AggregationField</span><span class="o">::</span><span class="n">fieldChecks</span><span class="o">);</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">AggregationOperation</span><span class="o">&gt;</span> <span class="n">operations</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// 处理类型转换，使用投影操作进行转换</span>
        <span class="c1">// 不重复转换</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">processedFields</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="nc">ProjectionOperation</span> <span class="n">project</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">project</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">CommonFormParam</span><span class="o">.</span><span class="na">AggregationField</span> <span class="n">agg</span> <span class="o">:</span> <span class="n">aggregations</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 处理类型转换，如果需要转换为Decimal</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">processedFields</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">getField</span><span class="o">())){</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">isConvertToDecimal</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">project</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">and</span><span class="o">(</span>
                            <span class="nc">ConvertOperators</span><span class="o">.</span><span class="na">Convert</span><span class="o">.</span><span class="na">convertValueOf</span><span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">getField</span><span class="o">())</span>
                                    <span class="o">.</span><span class="na">to</span><span class="o">(</span><span class="s">"decimal"</span><span class="o">)</span>
                                    <span class="o">.</span><span class="na">onErrorReturn</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
                                    <span class="o">.</span><span class="na">onNullReturn</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
                    <span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">getField</span><span class="o">()</span> <span class="o">+</span> <span class="no">TO_DECIMAL</span><span class="o">);</span>
                    <span class="n">processedFields</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">getField</span><span class="o">());</span>
                <span class="o">}</span>
                <span class="c1">// 将原列也保留</span>
                <span class="n">project</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">getField</span><span class="o">()).</span><span class="na">as</span><span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">getField</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">groupBy</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 将分组字段也保留</span>
            <span class="n">project</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 有转换才加入</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">processedFields</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">operations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">project</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 分组操作</span>
        <span class="nc">GroupOperation</span> <span class="n">group</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="n">groupBy</span><span class="o">);</span>

        <span class="c1">// 添加聚合操作</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">CommonFormParam</span><span class="o">.</span><span class="na">AggregationField</span> <span class="n">agg</span> <span class="o">:</span> <span class="n">aggregations</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">field</span> <span class="o">=</span> <span class="n">agg</span><span class="o">.</span><span class="na">getField</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">isConvertToDecimal</span><span class="o">()){</span>
                <span class="n">field</span> <span class="o">+=</span> <span class="no">TO_DECIMAL</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nc">String</span> <span class="n">alias</span> <span class="o">=</span> <span class="n">agg</span><span class="o">.</span><span class="na">getAlias</span><span class="o">();</span>
            <span class="k">switch</span> <span class="o">(</span><span class="n">agg</span><span class="o">.</span><span class="na">getType</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">case</span> <span class="s">"sum"</span><span class="o">:</span>
                    <span class="n">group</span> <span class="o">=</span> <span class="n">group</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="n">field</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="n">alias</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"avg"</span><span class="o">:</span>
                    <span class="n">group</span> <span class="o">=</span> <span class="n">group</span><span class="o">.</span><span class="na">avg</span><span class="o">(</span><span class="n">field</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="n">alias</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"count"</span><span class="o">:</span>
                    <span class="n">group</span> <span class="o">=</span> <span class="n">group</span><span class="o">.</span><span class="na">count</span><span class="o">().</span><span class="na">as</span><span class="o">(</span><span class="n">alias</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"max"</span><span class="o">:</span>
                    <span class="n">group</span> <span class="o">=</span> <span class="n">group</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">field</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="n">alias</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"min"</span><span class="o">:</span>
                    <span class="n">group</span> <span class="o">=</span> <span class="n">group</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">field</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="n">alias</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">default</span><span class="o">:</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"不支持的聚合类型： "</span> <span class="o">+</span> <span class="n">agg</span><span class="o">.</span><span class="na">getType</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">operations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">group</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">operations</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="cm">/**
     * 聚合结果处理方法，将聚合结果处理为符合人类直觉的方式。
     * @param result 聚合结果
     * @param groupBy 分组依据
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">aggregateResultProcessing</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">,</span><span class="nc">String</span><span class="o">[]</span> <span class="n">groupBy</span><span class="o">){</span>
        <span class="n">result</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">map</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="c1">// mango特色：如果没有分组字段，则返回数据多出一个字段_id=null,</span>
            <span class="c1">// 如果有一个分组字段，比如sex，则_id=sex字段的值，比如_id="男"，_id="女"</span>
            <span class="c1">// 如果有两个以上的分组，比如age、sex，则就正常了，就是age=age的值，sex=sex的值。</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">groupBy</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="mi">0</span><span class="o">){</span>
                <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="no">PRIMARY_KEY</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">groupBy</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="mi">1</span><span class="o">){</span>
                <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">groupBy</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
                <span class="c1">// 如果是主键，则不处理</span>
                <span class="k">if</span> <span class="o">(</span><span class="no">PRIMARY_KEY</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s</span><span class="o">)){</span><span class="k">return</span><span class="o">;}</span>
                <span class="c1">// 去掉前缀</span>
                <span class="nc">String</span> <span class="n">s0</span><span class="o">=</span><span class="n">removeKeyPrefix</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s0</span><span class="o">,</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="no">PRIMARY_KEY</span><span class="o">));</span>
                <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="no">PRIMARY_KEY</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 环绕方法，先生成分组聚合操作，然后执行后function得到结果，然后人性化处理结果。
     * @param groupBy 分组依据
     * @param aggregations 聚合设置
     * @param function 执行方法
     * @return 处理后的结果
     */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="nf">wrappingMethod</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">groupBy</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">CommonFormParam</span><span class="o">.</span><span class="na">AggregationField</span><span class="o">&gt;</span> <span class="n">aggregations</span><span class="o">,</span><span class="nc">Function</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">AggregationOperation</span><span class="o">&gt;,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;&gt;</span> <span class="n">function</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">AggregationOperation</span><span class="o">&gt;</span> <span class="n">aggregationOperationList</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">buildAggregationOperations</span><span class="o">(</span><span class="n">groupBy</span><span class="o">,</span> <span class="n">aggregations</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">apply</span> <span class="o">=</span> <span class="n">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">aggregationOperationList</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">aggregateResultProcessing</span><span class="o">(</span><span class="n">apply</span><span class="o">,</span><span class="n">groupBy</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">apply</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>入参：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**聚合设置*/</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">AggregationField</span> <span class="o">{</span>
    <span class="cm">/**要聚合的字段*/</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">field</span><span class="o">;</span>
    <span class="cm">/**聚合类型（如 sum, avg 等）*/</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">type</span><span class="o">;</span>
    <span class="cm">/**聚合结果列的别名*/</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">alias</span><span class="o">;</span>
    <span class="cm">/**可选，默认为否，是否在聚合前需要进行 decimal 转换*/</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">convertToDecimal</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>

    <span class="cm">/**
     * 字段校验
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fieldChecks</span><span class="o">(){</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">field</span><span class="o">)||</span><span class="nc">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">type</span><span class="o">)||</span><span class="nc">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">alias</span><span class="o">)){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"聚合字段设置不全，必须包含字段：field、type、alias"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">GroupAggregationGenerator</span> <span class="n">groupAggregationGenerator</span><span class="o">=</span> <span class="k">new</span> <span class="nc">GroupAggregationGenerator</span><span class="o">();</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">maps</span> <span class="o">=</span> <span class="n">groupAggregationGenerator</span><span class="o">.</span><span class="na">wrappingMethod</span><span class="o">(</span><span class="n">groupBy</span><span class="o">,</span> <span class="n">aggregations</span><span class="o">,</span> <span class="n">aggregationOperationList</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">AggregationOperation</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">criteria</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">criteria</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="n">list</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">aggregationOperationList</span><span class="o">);</span>
    <span class="c1">// 创建聚合对象</span>
    <span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

    <span class="c1">// 执行聚合查询</span>
    <span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="n">collectionName</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="c1">// 获取并输出投影结果</span>
    <span class="k">return</span> <span class="n">results</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">();</span>
<span class="o">});</span>
</code></pre></div></div>

<p>其中，mongoTemplate还能封装一下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * mongo服务层
 * @author aotmd
 * @version 1.0
 * @date 2024/10/22 14:07
 */</span>
<span class="nd">@Service</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MongoService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="nc">MongoTemplate</span> <span class="n">mongoTemplate</span><span class="o">;</span>

    <span class="cm">/**
     * 高级查询，泛型方法
     *
     * @param &lt;T&gt;                  泛型
     * @param collectionName       表名
     * @param valueType            返回值Class
     * @param criteria             查询条件
     * @param aggregationOperationList 集合参数，聚合用
     * @return List
     */</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">aggregate</span><span class="o">(</span><span class="nc">String</span> <span class="n">collectionName</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">valueType</span><span class="o">,</span> <span class="nc">Criteria</span> <span class="n">criteria</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">AggregationOperation</span><span class="o">&gt;</span>  <span class="n">aggregationOperationList</span><span class="o">){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">AggregationOperation</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">=</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">criteria</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Aggregation</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">criteria</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="n">list</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">aggregationOperationList</span><span class="o">);</span>
        <span class="c1">// 创建聚合对象</span>
        <span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

        <span class="c1">// 执行聚合查询</span>
        <span class="nc">AggregationResults</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="n">collectionName</span><span class="o">,</span> <span class="n">valueType</span><span class="o">);</span>

        <span class="c1">// 获取并输出投影结果</span>
        <span class="k">return</span> <span class="n">results</span><span class="o">.</span><span class="na">getMappedResults</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 高级查询，泛型方法
     *
     * @param &lt;T&gt;                  泛型
     * @param collectionName       表名
     * @param valueType            返回值Class
     * @param criteria             查询条件
     * @param aggregationOperation 可变参数，聚合用
     * @return List
     */</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">aggregate</span><span class="o">(</span><span class="nc">String</span> <span class="n">collectionName</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">valueType</span><span class="o">,</span> <span class="nc">Criteria</span> <span class="n">criteria</span><span class="o">,</span> <span class="nc">AggregationOperation</span> <span class="o">...</span> <span class="n">aggregationOperation</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">collectionName</span><span class="o">,</span> <span class="n">valueType</span><span class="o">,</span> <span class="n">criteria</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">aggregationOperation</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>简化为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">GroupAggregationGenerator</span> <span class="n">groupAggregationGenerator</span><span class="o">=</span> <span class="k">new</span> <span class="nc">GroupAggregationGenerator</span><span class="o">();</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="n">maps</span> <span class="o">=</span> <span class="n">groupAggregationGenerator</span><span class="o">.</span><span class="na">wrappingMethod</span><span class="o">(</span><span class="n">groupBy</span><span class="o">,</span> <span class="n">aggregations</span><span class="o">,</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">mongoService</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">collectionName</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">criteria</span><span class="o">,</span> <span class="n">a</span><span class="o">));</span>
</code></pre></div></div>

<p>特别注意：</p>

<p><strong><code class="language-plaintext highlighter-rouge">Decimal128</code> 最多只能表示 34 位有效数字（整数部分与小数部分合计）。如果超出这个范围，会导致精度丢失或舍入错误。</strong></p>

<p>对于聚合结果<code class="language-plaintext highlighter-rouge">Decimal128</code>类型，一般来说都是通过转换为字符串返回，此时可以对数值进行判断，如果超过了34位数字，<code class="language-plaintext highlighter-rouge">Decimal128</code>类型的值会变为科学计数法，实际上会从最后一位开始舍去，若已经舍去到整数位了，那么直接填0，形成类似：<code class="language-plaintext highlighter-rouge">12345678901234567890123456789012340000000000000000</code>，这样的数值。</p>

<p>应对方法为：可以在结果出来后，进行转换与精度判断：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 转换</span>
<span class="n">systemFormData</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span>
    <span class="n">item</span> <span class="o">-&gt;</span> <span class="n">item</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="c1">//! Decimal128 最多只能表示 34 位有效数字。如果超出这个范围，可能会导致精度丢失或舍入错误。</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">Decimal128</span><span class="o">){</span>
            <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">convertDecimal128ToString</span><span class="o">((</span><span class="nc">Decimal128</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
            <span class="n">item</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">})</span>
<span class="o">);</span>
</code></pre></div></div>

<p>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Decimal128转换为字符串
 * @param decimal128 待转换数据
 * @return
 */</span>
<span class="kd">private</span> <span class="nc">String</span> <span class="nf">convertDecimal128ToString</span><span class="o">(</span><span class="nc">Decimal128</span> <span class="n">decimal128</span><span class="o">){</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isDecimal128Overflow</span><span class="o">(</span><span class="n">decimal128</span><span class="o">)){</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Decimal128精度丢失"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">decimal128</span><span class="o">.</span><span class="na">bigDecimalValue</span><span class="o">().</span><span class="na">toPlainString</span><span class="o">();</span>
<span class="o">}</span>
<span class="cm">/**
 * decimal128溢出判断
 * @param decimal128 mongo数据类型
 * @return
 */</span>
<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isDecimal128Overflow</span><span class="o">(</span><span class="nc">Decimal128</span> <span class="n">decimal128</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">BigDecimal</span> <span class="n">bigDecimalValue</span> <span class="o">=</span> <span class="n">decimal128</span><span class="o">.</span><span class="na">bigDecimalValue</span><span class="o">();</span>

    <span class="c1">// 定义 Decimal128 的范围</span>
    <span class="nc">BigDecimal</span> <span class="n">lowerBound</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"-1.0E+34"</span><span class="o">);</span>
    <span class="nc">BigDecimal</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"1.0E+34"</span><span class="o">);</span>
    <span class="c1">// 判断是否溢出</span>
    <span class="k">return</span> <span class="n">bigDecimalValue</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">lowerBound</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">bigDecimalValue</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">upperBound</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="分组和聚合设置文档">分组和聚合设置文档</h3>

<p><strong><code class="language-plaintext highlighter-rouge">groupBy</code></strong></p>

<ul>
  <li><strong>类型</strong>: 数组 (<code class="language-plaintext highlighter-rouge">Array</code>)</li>
  <li><strong>描述</strong>: 分组依据，可以为空数组 (<code class="language-plaintext highlighter-rouge">[]</code>) 表示不进行分组，也可以包含多个字段名进行多字段分组。
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"groupBy"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"job"</span><span class="p">]</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">按照岗位进行分组</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">aggregations</code></strong></p>

<ul>
  <li>
    <p><strong>类型</strong>: 数组 (<code class="language-plaintext highlighter-rouge">Array</code>)</p>
  </li>
  <li>
    <p><strong>描述</strong>: 聚合设置，可以为空数组 (<code class="language-plaintext highlighter-rouge">[]</code>) 表示不进行任何聚合。每个聚合对象包含聚合字段、聚合类型和别名等信息。</p>
  </li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"aggregations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
      </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salary"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">聚合字段列名</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"sum"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">聚合类型：sum、avg、min、max、count</span><span class="w">
      </span><span class="nl">"alias"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salarySum"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">聚合结果列名</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
      </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salary"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"avg"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"alias"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salaryAvg"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"convertToDecimal"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">表示需要进行</span><span class="w"> </span><span class="err">decimal</span><span class="w"> </span><span class="err">转换，返回结果也为</span><span class="w"> </span><span class="err">Decimal</span><span class="w"> </span><span class="err">类型，因此为字符串</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
      </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salary"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"count"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"alias"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salaryCount"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">聚合结果列名</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
      </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salary"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"max"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"alias"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salaryMax"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">聚合结果列名</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
      </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salary"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"min"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"alias"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salaryMin"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">聚合结果列名</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p><strong>聚合对象字段说明</strong></p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">field</code></strong>:
    <ul>
      <li><strong>类型</strong>: 字符串 (<code class="language-plaintext highlighter-rouge">String</code>)</li>
      <li><strong>描述</strong>: 需要进行聚合的字段名。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">type</code></strong>:
    <ul>
      <li><strong>类型</strong>: 字符串 (<code class="language-plaintext highlighter-rouge">String</code>)</li>
      <li><strong>描述</strong>: 指定聚合操作的类型，可以是以下之一：
        <ul>
          <li><code class="language-plaintext highlighter-rouge">sum</code>：计算字段值的总和。</li>
          <li><code class="language-plaintext highlighter-rouge">avg</code>：计算字段值的平均值。</li>
          <li><code class="language-plaintext highlighter-rouge">min</code>：获取字段值的最小值。</li>
          <li><code class="language-plaintext highlighter-rouge">max</code>：获取字段值的最大值。</li>
          <li><code class="language-plaintext highlighter-rouge">count</code>：计算字段的数量。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">alias</code></strong>:
    <ul>
      <li><strong>类型</strong>: 字符串 (<code class="language-plaintext highlighter-rouge">String</code>)</li>
      <li><strong>描述</strong>: 聚合结果的别名，用于在结果集中引用聚合值。</li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">convertToDecimal</code></strong> (可选):
    <ul>
      <li><strong>类型</strong>: 布尔 (<code class="language-plaintext highlighter-rouge">Boolean</code>)</li>
      <li><strong>描述</strong>: 指定是否需要将聚合结果转换为 Decimal 类型。设置为 <code class="language-plaintext highlighter-rouge">true</code> 时，返回的结果将为 Decimal 类型，以字符串形式表示。</li>
    </ul>
  </li>
</ul>

<p>在执行聚合查询时，可以根据 <code class="language-plaintext highlighter-rouge">groupBy</code> 和 <code class="language-plaintext highlighter-rouge">aggregations</code> 字段的配置进行数据分组和聚合，生成所需的统计结果。此配置允许灵活处理多种聚合需求，适应不同的业务场景。</p>]]></content><author><name>acteds</name></author><category term="Java" /><category term="MongoDB" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">MongoDB排序解析方法</title><link href="/2024/11/04/MongoDB%E6%8E%92%E5%BA%8F%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95/" rel="alternate" type="text/html" title="MongoDB排序解析方法" /><published>2024-11-04T00:00:00+08:00</published><updated>2024-11-04T00:00:00+08:00</updated><id>/2024/11/04/MongoDB%E6%8E%92%E5%BA%8F%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95</id><content type="html" xml:base="/2024/11/04/MongoDB%E6%8E%92%E5%BA%8F%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95/"><![CDATA[<h1 id="引言">引言</h1>
<p>一个对MongoDB排序操作的简单封装方法。</p>

<h1 id="mongodb">MongoDB</h1>

<h2 id="mongodb排序方法解析方法">MongoDB排序方法解析方法</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 排序设置解析并应用
 * @param query 条件构建对象
 * @param sortFields 排序设置
 */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">applySorting</span><span class="o">(</span><span class="nc">Query</span> <span class="n">query</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">CommonFormParam</span><span class="o">.</span><span class="na">SortField</span><span class="o">&gt;</span> <span class="n">sortFields</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 检查排序字段并构建排序对象</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">sortFields</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">sortFields</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">seenFields</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">&gt;</span> <span class="n">orders</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">CommonFormParam</span><span class="o">.</span><span class="na">SortField</span> <span class="n">sortField</span> <span class="o">:</span> <span class="n">sortFields</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 验证排序字段</span>
            <span class="n">sortField</span><span class="o">.</span><span class="na">sortChecks</span><span class="o">();</span>
            <span class="nc">String</span> <span class="n">fieldName</span> <span class="o">=</span> <span class="n">sortField</span><span class="o">.</span><span class="na">getField</span><span class="o">();</span>

            <span class="c1">// 检查重复字段</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">seenFields</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">fieldName</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"重复的排序字段: "</span> <span class="o">+</span> <span class="n">removeKeyPrefix</span><span class="o">(</span><span class="n">fieldName</span><span class="o">));</span>
            <span class="o">}</span>
            <span class="n">seenFields</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">fieldName</span><span class="o">);</span>

            <span class="c1">// 根据排序类型添加排序条件</span>
            <span class="n">orders</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sortField</span><span class="o">.</span><span class="na">isSortType</span><span class="o">()</span> <span class="o">?</span>
                    <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">asc</span><span class="o">(</span><span class="n">fieldName</span><span class="o">)</span> <span class="o">:</span>
                    <span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="n">fieldName</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="c1">// 应用排序到查询中</span>
        <span class="n">query</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="n">orders</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>入参：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 排序设置
 */</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SortField</span> <span class="o">{</span>
    <span class="cm">/**排序字段*/</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">field</span><span class="o">;</span>
    <span class="cm">/**true 为顺序，false为倒序,默认顺序*/</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">sortType</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sortChecks</span><span class="o">(){</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">field</span><span class="o">)){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"排序字段设置不全，必须包含字段：field"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>字段详细说明</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">field</code></strong> (String)：表示需要排序的字段名称。</p>

<p>示例：<code class="language-plaintext highlighter-rouge">"status"</code>、<code class="language-plaintext highlighter-rouge">"salary"</code>。</p>

<p><strong><code class="language-plaintext highlighter-rouge">sortType</code></strong> (Boolean)：指定排序方式。</p>

<p><code class="language-plaintext highlighter-rouge">true</code> 表示升序排序（从小到大）。</p>

<p><code class="language-plaintext highlighter-rouge">false</code> 表示降序排序（从大到小）。</p>

<p>示例：<code class="language-plaintext highlighter-rouge">true</code> 表示按照 <code class="language-plaintext highlighter-rouge">field</code> 升序排序，<code class="language-plaintext highlighter-rouge">false</code> 表示降序排序。</p>

<p><strong>排序逻辑</strong></p>

<ul>
  <li><strong>主要排序关键字</strong>：<code class="language-plaintext highlighter-rouge">sortFields</code> 数组的第一个对象表示主要排序关键字，MongoDB 将首先根据这个字段对结果进行排序。</li>
  <li><strong>次要排序关键字</strong>：如果主要排序关键字存在相同值，MongoDB 将继续根据下一个对象中的字段进行排序。</li>
  <li>
    <p><strong>示例排序顺序</strong>：给定以下示例设置：</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"sortFields"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"status"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"sortType"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"salary"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"sortType"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div>    </div>

    <p>结果集将首先按 <code class="language-plaintext highlighter-rouge">status</code> 字段升序排列，对于具有相同 <code class="language-plaintext highlighter-rouge">status</code> 值的记录，将按 <code class="language-plaintext highlighter-rouge">salary</code> 字段降序排列。</p>
  </li>
</ul>]]></content><author><name>acteds</name></author><category term="Java" /><category term="MongoDB" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">ADB相关知识</title><link href="/2024/10/31/ADB%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/" rel="alternate" type="text/html" title="ADB相关知识" /><published>2024-10-31T00:00:00+08:00</published><updated>2024-10-31T00:00:00+08:00</updated><id>/2024/10/31/ADB%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86</id><content type="html" xml:base="/2024/10/31/ADB%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"><![CDATA[<h1 id="引言">引言</h1>
<p>ADB（Android Debug Bridge）是一个命令行工具，用于与 Android 设备进行交互和管理。它是 Android SDK 的一部分，主要用于开发和调试 Android 应用程序。</p>

<h1 id="adb">ADB</h1>

<p>ADB 提供了一个通用的命令接口，可以通过 USB 或 Wi-Fi 连接 Android 设备，允许开发者执行多种操作，包括：</p>

<ol>
  <li><strong>安装和卸载应用</strong>：可以通过命令行在设备上安装或卸载 APK 文件。</li>
  <li><strong>设备管理</strong>：能够列出已连接的设备，检查设备状态，重启设备等。</li>
  <li><strong>调试应用</strong>：开发者可以通过 ADB 向 Android 设备发送调试命令，查看日志（使用 <code class="language-plaintext highlighter-rouge">logcat</code>），捕获屏幕截图等。</li>
  <li><strong>文件传输</strong>：可以通过 ADB 在电脑和 Android 设备之间传输文件。</li>
  <li><strong>运行 shell 命令</strong>：可以直接在设备上执行 shell 命令，以进行更深入的管理。</li>
</ol>

<p>ADB 的基本使用示例：</p>

<p><strong>列出连接的设备</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb devices
</code></pre></div></div>

<p><strong>安装应用</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb <span class="nb">install </span>path/to/app.apk
</code></pre></div></div>

<p><strong>卸载应用</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb uninstall package.name
</code></pre></div></div>

<p><strong>查看设备日志</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb logcat
</code></pre></div></div>

<p><strong>进入设备的 shell</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb shell
</code></pre></div></div>

<p><strong>工作原理：</strong></p>

<p>ADB 通过 TCP/IP 协议与 Android 设备通信。它通常在本地机器和 Android 设备之间建立一个客户端-服务器架构，其中 ADB 服务器在主机上运行，而 ADB 客户端在命令行中运行，Android 设备则充当服务器端。</p>

<h2 id="adb服务器">ADB服务器</h2>

<p>ADB 服务器（ADB Server）是 Android Debug Bridge（ADB）中的一个关键组件，用于管理与 Android 设备之间的通信。它作为一个后台进程在主机上运行，负责协调 ADB 客户端和连接的 Android 设备。以下是 ADB 服务器的主要功能和特点：</p>

<ol>
  <li>
    <p><strong>设备管理</strong>：ADB 服务器维护已连接设备的状态信息，包括设备 ID、状态（如在线或离线）等。当通过 ADB 客户端发出命令时，ADB 服务器会判断当前连接的设备并执行相应操作。</p>
  </li>
  <li>
    <p><strong>命令转发</strong>：当开发者在命令行中使用 ADB 命令时，这些命令首先被发送到 ADB 服务器。ADB 服务器会将这些命令转发到相应的 Android 设备，并将结果返回给客户端。</p>
  </li>
  <li>
    <p><strong>多设备支持</strong>：<strong>ADB 服务器允许同时与多个 Android 设备进行通信</strong>。开发者可以通过不同的设备 ID 来区分不同的设备。</p>
  </li>
  <li>
    <p><strong>简化连接</strong>：ADB 服务器管理与设备之间的 TCP/IP 连接，简化了开发者的连接流程。当开发者首次连接设备时，ADB 服务器会自动启动并进行设备发现。</p>
  </li>
</ol>

<p><strong>工作原理</strong></p>

<ul>
  <li><strong>启动过程</strong>：当运行任何 ADB 命令时，ADB 客户端会首先检查 ADB 服务器是否在运行。如果未运行，ADB 客户端会启动 ADB 服务器。</li>
  <li><strong>端口</strong>：默认情况下，ADB 服务器在 5037 端口上监听请求。可以通过 <code class="language-plaintext highlighter-rouge">adb -P &lt;port&gt;</code> 命令指定其他端口。</li>
  <li><strong>连接方式</strong>：ADB 可以通过 USB 连接设备，也可以通过 Wi-Fi 连接。当设备通过 USB 连接时，ADB 服务器会在设备上启用调试模式，以便进行操作。</li>
</ul>

<p><strong>常见命令</strong></p>

<p><strong>启动 ADB 服务器</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb start-server
</code></pre></div></div>

<p><strong>停止 ADB 服务器</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb kill-server
</code></pre></div></div>

<p><strong>查看已连接设备</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>adb devices
</code></pre></div></div>

<p>ADB 服务器是开发和调试 Android 应用不可或缺的组件，它通过提供统一的接口简化了与设备的交互，帮助开发者高效地进行应用测试和管理。</p>

<p><strong>重要事项</strong></p>

<ol>
  <li><strong>单一端口</strong>：同一时间内，ADB 服务器只能绑定到一个端口。如果尝试在<strong>同一端口</strong>上启动多个 ADB 实例，将导致冲突并出现错误。</li>
  <li><strong>更改端口</strong>：如果你需要在多个实例之间切换，可以使用不同的端口。例如，你可以使用 <code class="language-plaintext highlighter-rouge">adb -L tcp:12345 fork-server server --reply-fd 688</code> 启动另一个 ADB 实例在端口 12345 上运行。</li>
  <li><strong>服务器状态</strong>：如果需要重新启动 ADB 服务器，建议先停止现有的 ADB 实例，以避免端口占用冲突。可以使用 <code class="language-plaintext highlighter-rouge">adb kill-server</code> 命令来停止当前的 ADB 服务器。</li>
</ol>

<p><strong>一个安卓设备只能与一个 ADB 服务器建立连接。</strong>即使在不同的端口上启动多个 ADB 服务器，它们仍然无法同时连接到同一个设备。以下是一些相关细节：</p>

<p><strong>原因</strong></p>

<ol>
  <li><strong>端口和通信</strong>：ADB 服务器通过 TCP/IP 协议与安卓设备通信，通常使用端口 5037。每个设备在同一时间只能被一个 ADB 服务器控制。</li>
  <li><strong>设备状态</strong>：当一个 ADB 服务器连接到设备时，该设备的状态会被标记为 “device”。其他尝试连接的 ADB 服务器将收到设备 “offline” 或 “unauthorized” 的状态，因为设备已经与现有的 ADB 服务器建立了连接。</li>
</ol>

<p><strong>解决方案</strong></p>

<ul>
  <li><strong>ADB 代理</strong>：如果需要在多个环境中使用 ADB，可以考虑使用 ADB 代理来转发命令，但这会增加复杂性。</li>
  <li><strong>连接管理</strong>：确保在启动新的 ADB 服务器之前，先通过 <code class="language-plaintext highlighter-rouge">adb kill-server</code> 停止当前的 ADB 服务器连接，确保只有一个 ADB 实例在与设备通信。</li>
</ul>

<p>每次只允许一个 ADB 服务器与安卓设备建立连接，尝试同时连接多个 ADB 服务器将会导致连接冲突，无法正常工作。</p>]]></content><author><name>acteds</name></author><category term="Android" /><summary type="html"><![CDATA[安卓笔记]]></summary></entry><entry><title type="html">Map过滤器</title><link href="/2024/10/28/Map%E8%BF%87%E6%BB%A4%E5%99%A8/" rel="alternate" type="text/html" title="Map过滤器" /><published>2024-10-28T00:00:00+08:00</published><updated>2024-10-28T00:00:00+08:00</updated><id>/2024/10/28/Map%E8%BF%87%E6%BB%A4%E5%99%A8</id><content type="html" xml:base="/2024/10/28/Map%E8%BF%87%E6%BB%A4%E5%99%A8/"><![CDATA[<h1 id="引言">引言</h1>
<p>一个过滤Map键的类，包括包含字段和排除字段，类似于<code class="language-plaintext highlighter-rouge">mongoTemplate</code>的字段过滤。</p>

<h1 id="map">Map</h1>

<h2 id="map过滤器">Map过滤器</h2>

<p>过滤器：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 结果过滤器
 * @author aotmd
 * @version 1.0
 * @date 2024/10/25 15:34
 */</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FieldFilter</span> <span class="o">{</span>
    <span class="cm">/**实际主键名称*/</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">PRIMARY_KEY</span> <span class="o">=</span> <span class="s">"_id"</span><span class="o">;</span>

    <span class="cm">/**
     * 过滤单条数据的指定字段。
     *
     * @param originalData 原始数据
     * @param include      要包含的字段数组
     * @param exclude      要排除的字段数组
     * @return 过滤后的数据
     */</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">filterFields</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">originalData</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">include</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">exclude</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 如果没有原始数据则直接返回</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">originalData</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">originalData</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">originalData</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 如果include和exclude都没有，则直接返回</span>
        <span class="k">if</span><span class="o">((</span><span class="n">include</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">include</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">exclude</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">exclude</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)){</span>
            <span class="k">return</span> <span class="n">originalData</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 校验 include 和 exclude 的逻辑，一般不能同时存在</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">include</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">include</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">exclude</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">exclude</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 仅允许 exclude 中包含 "_id"</span>
            <span class="k">if</span> <span class="o">(!(</span><span class="n">exclude</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="no">PRIMARY_KEY</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">exclude</span><span class="o">[</span><span class="mi">0</span><span class="o">])))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"不能同时使用 include 和 exclude(排除_id例外)。"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">filteredData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// 处理 include 逻辑</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">include</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">include</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 默认添加_id字段</span>
            <span class="n">filteredData</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="no">PRIMARY_KEY</span><span class="o">,</span><span class="n">originalData</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="no">PRIMARY_KEY</span><span class="o">));</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">field</span> <span class="o">:</span> <span class="n">include</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">addNestedFieldToMap</span><span class="o">(</span><span class="n">filteredData</span><span class="o">,</span> <span class="n">originalData</span><span class="o">,</span> <span class="n">field</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 如果没有指定 include，则将原始数据全部复制到过滤后的数据中</span>
            <span class="n">filteredData</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">originalData</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 处理 exclude 逻辑</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">exclude</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">exclude</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">field</span> <span class="o">:</span> <span class="n">exclude</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">removeNestedFieldFromMap</span><span class="o">(</span><span class="n">filteredData</span><span class="o">,</span> <span class="n">field</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">filteredData</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 过滤多条记录的指定字段。
     *
     * @param dataList  原始数据列表
     * @param include    要包含的字段数组
     * @param exclude    要排除的字段数组
     * @return 过滤后的数据列表
     */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="nf">filterFieldsForMultipleRecords</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">dataList</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">include</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">exclude</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dataList</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">filterFields</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">include</span><span class="o">,</span> <span class="n">exclude</span><span class="o">))</span> <span class="c1">// 对每条记录应用过滤</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 递归添加嵌套字段到目标 Map 中。
     *
     * @param targetMap  目标 Map
     * @param sourceMap  源 Map
     * @param fieldPath  字段路径数组
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addNestedFieldToMap</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">targetMap</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">sourceMap</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">fieldPath</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">fieldPath</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span><span class="o">;}</span>

        <span class="nc">String</span> <span class="n">currentKey</span> <span class="o">=</span> <span class="n">fieldPath</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
        <span class="nc">Object</span> <span class="n">currentLevel</span> <span class="o">=</span> <span class="n">sourceMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentKey</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">currentLevel</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 如果当前字段为 null，抛出异常</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"字段不存在: "</span> <span class="o">+</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">"."</span><span class="o">,</span> <span class="n">fieldPath</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="c1">// 如果当前级别是 Map 且字段路径还有后续级别，则递归处理</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">currentLevel</span> <span class="k">instanceof</span> <span class="nc">Map</span> <span class="o">&amp;&amp;</span> <span class="n">fieldPath</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">nestedMap</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">currentLevel</span><span class="o">;</span>
            <span class="n">targetMap</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">currentKey</span><span class="o">,</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;());</span>
            <span class="n">addNestedFieldToMap</span><span class="o">((</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">targetMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentKey</span><span class="o">),</span> <span class="n">nestedMap</span><span class="o">,</span> <span class="n">sliceArray</span><span class="o">(</span><span class="n">fieldPath</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 为最深层</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">fieldPath</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 如果没有嵌套，则直接添加当前字段</span>
                <span class="n">targetMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">currentKey</span><span class="o">,</span> <span class="n">currentLevel</span><span class="o">);</span>
            <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"字段不存在: "</span> <span class="o">+</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">"."</span><span class="o">,</span> <span class="n">fieldPath</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 递归移除嵌套字段。
     *
     * @param targetMap  目标 Map
     * @param fieldPath  字段路径数组
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">removeNestedFieldFromMap</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">targetMap</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">fieldPath</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">fieldPath</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span><span class="k">return</span><span class="o">;}</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">targetMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">fieldPath</span><span class="o">[</span><span class="mi">0</span><span class="o">])){</span>
            <span class="c1">// 如果当前字段为 null，抛出异常</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"字段不存在: "</span> <span class="o">+</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">"."</span><span class="o">,</span> <span class="n">fieldPath</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">currentKey</span> <span class="o">=</span> <span class="n">fieldPath</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">fieldPath</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">targetMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">currentKey</span><span class="o">);</span> <span class="c1">// 移除指定字段</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">Object</span> <span class="n">nestedObject</span> <span class="o">=</span> <span class="n">targetMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">currentKey</span><span class="o">);</span>
            <span class="c1">// 如果当前对象是 Map，则递归移除</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nestedObject</span> <span class="k">instanceof</span> <span class="nc">Map</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">removeNestedFieldFromMap</span><span class="o">((</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">nestedObject</span><span class="o">,</span> <span class="n">sliceArray</span><span class="o">(</span><span class="n">fieldPath</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
                <span class="c1">// 如果嵌套 Map 为空，则移除外层字段</span>
                <span class="k">if</span> <span class="o">(((</span><span class="nc">Map</span><span class="o">&lt;?,</span> <span class="o">?&gt;)</span> <span class="n">nestedObject</span><span class="o">).</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">targetMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">currentKey</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"字段不存在: "</span> <span class="o">+</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">"."</span><span class="o">,</span> <span class="n">fieldPath</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 工具方法 - 提取字段数组的一部分。
     *
     * @param array 源数组
     * @param start 开始索引
     * @return 新数组
     */</span>
    <span class="kd">private</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">sliceArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="n">array</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">start</span><span class="o">];</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">result</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>用法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">FieldFilter</span> <span class="n">fieldFilter</span><span class="o">=</span><span class="k">new</span> <span class="nc">FieldFilter</span><span class="o">();</span>
<span class="nc">Map</span> <span class="n">map</span><span class="o">=...;</span>
<span class="nc">String</span> <span class="o">[]</span> <span class="n">include</span><span class="o">={</span><span class="s">"name"</span><span class="o">,</span><span class="s">"age"</span><span class="o">};</span>
<span class="nc">String</span> <span class="o">[]</span> <span class="n">exclude</span><span class="o">={};</span>
<span class="nc">Map</span> <span class="n">result</span><span class="o">=</span><span class="n">fieldFilter</span><span class="o">.</span><span class="na">filterFields</span><span class="o">(</span><span class="n">map</span><span class="o">,</span> <span class="n">include</span><span class="o">,</span> <span class="n">exclude</span><span class="o">);</span>
</code></pre></div></div>

<p>注意，主要用来处理MongoDB的数据，因此中间添加了<code class="language-plaintext highlighter-rouge">_id</code>字段，与MongoDB的字段包含排查保持一致，若需他用，请删除<code class="language-plaintext highlighter-rouge">filteredData.put(PRIMARY_KEY,originalData.get(PRIMARY_KEY));</code>。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">多级Map连续取值</title><link href="/2024/10/28/%E5%A4%9A%E7%BA%A7Map%E8%BF%9E%E7%BB%AD%E5%8F%96%E5%80%BC/" rel="alternate" type="text/html" title="多级Map连续取值" /><published>2024-10-28T00:00:00+08:00</published><updated>2024-10-28T00:00:00+08:00</updated><id>/2024/10/28/%E5%A4%9A%E7%BA%A7Map%E8%BF%9E%E7%BB%AD%E5%8F%96%E5%80%BC</id><content type="html" xml:base="/2024/10/28/%E5%A4%9A%E7%BA%A7Map%E8%BF%9E%E7%BB%AD%E5%8F%96%E5%80%BC/"><![CDATA[<h1 id="引言">引言</h1>
<p>一个简单的，连续获取Map值的方法。</p>

<h1 id="map">Map</h1>

<h2 id="多级map连续取值">多级Map连续取值</h2>

<p>方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 通过路径连续获取值，分隔符为.号
 * @param map 键值对
 * @param path 路径
 * @return
 * @param &lt;T&gt; 返回类型(基本类型，非反序列化)
 */</span>
<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">getValueByPath</span><span class="o">(</span><span class="nc">Map</span> <span class="n">map</span><span class="o">,</span> <span class="nc">String</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">);</span>

    <span class="nc">Object</span> <span class="n">current</span> <span class="o">=</span> <span class="n">map</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">current</span> <span class="k">instanceof</span> <span class="nc">Map</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">current</span> <span class="o">=</span> <span class="o">((</span><span class="nc">Map</span><span class="o">&lt;?,</span> <span class="o">?&gt;)</span> <span class="n">current</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// 如果当前不是 Map 类型，则返回 null</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span> <span class="n">current</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>使用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span> <span class="n">map</span><span class="o">=...;</span>
<span class="n">getValueByPath</span><span class="o">(</span><span class="n">map</span><span class="o">,</span><span class="s">"data.name"</span><span class="o">);</span>
</code></pre></div></div>

<p>根据需要可以改变逻辑，当取不到值时抛出异常，而不是<code class="language-plaintext highlighter-rouge">null</code>。</p>]]></content><author><name>acteds</name></author><category term="Java" /><summary type="html"><![CDATA[Java笔记]]></summary></entry><entry><title type="html">MongoDB条件解析器</title><link href="/2024/10/15/MongoDB%E6%9D%A1%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8/" rel="alternate" type="text/html" title="MongoDB条件解析器" /><published>2024-10-15T00:00:00+08:00</published><updated>2024-10-15T00:00:00+08:00</updated><id>/2024/10/15/MongoDB%E6%9D%A1%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8</id><content type="html" xml:base="/2024/10/15/MongoDB%E6%9D%A1%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8/"><![CDATA[<h1 id="引言">引言</h1>
<p>一个将Map转换为<code class="language-plaintext highlighter-rouge">mongoTemplate</code>条件的类。</p>

<h1 id="mongodb">MongoDB</h1>

<h2 id="mongodb条件解析器">MongoDB条件解析器</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**实际主键名称*/</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">PRIMARY_KEY</span> <span class="o">=</span> <span class="s">"_id"</span><span class="o">;</span>
<span class="cm">/**
 * 数据返回后映射的主键名称
 */</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">MAP_PRIMARY_KEY</span> <span class="o">=</span> <span class="s">"_id"</span><span class="o">;</span>
<span class="cm">/**租户ID字段名称*/</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">TENANT_ID</span> <span class="o">=</span> <span class="s">"tenant_id"</span><span class="o">;</span>

<span class="cm">/**乐观锁字段名称*/</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">OPTIMISTIC_LOCK_FIELD</span><span class="o">=</span><span class="s">"version"</span><span class="o">;</span>
<span class="cm">/**假删除标记*/</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DELETE_STATUS</span> <span class="o">=</span> <span class="s">"deleteStatus"</span><span class="o">;</span>
<span class="cm">/**实际非系统数据所在对象字段名称*/</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DATA_NAME</span> <span class="o">=</span> <span class="s">"data"</span><span class="o">;</span>
<span class="cm">/** 条件构建解析类线程存储 */</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">ConditionBuild</span><span class="o">&gt;</span> <span class="no">CONDITION_BUILD_THREAD_LOCAL</span> <span class="o">=</span> <span class="nc">ThreadLocal</span><span class="o">.</span><span class="na">withInitial</span><span class="o">(</span><span class="nl">ConditionBuild:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>

<span class="cm">/**
 * 开始条件构建解析，保证线程安全
 * @return 条件构建解析类
 */</span>
<span class="kd">private</span> <span class="nc">ConditionBuild</span> <span class="nf">startConditionBuild</span><span class="o">(){</span>
    <span class="nc">ConditionBuild</span> <span class="n">conditionBuild</span> <span class="o">=</span> <span class="no">CONDITION_BUILD_THREAD_LOCAL</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="n">conditionBuild</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">conditionBuild</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/**
 * 条件构建解析器
 * @author aotmd
 * @version 3.0
 * @date 2024/10/15 17:34
 */</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ConditionBuild</span> <span class="o">{</span>
    <span class="cm">/**主键字段名*/</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">PRIMARY_KEY</span> <span class="o">=</span> <span class="s">"_id"</span><span class="o">;</span>
    <span class="cm">/**高级操作符，对象数组符合条件*/</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">ELEM_MATCH</span> <span class="o">=</span> <span class="s">"$elemMatch"</span><span class="o">;</span>
    <span class="cm">/**
     * 条件数组堆栈
     */</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Criteria</span><span class="o">&gt;&gt;</span> <span class="n">criteriaStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="cm">/**
     * 堆栈深度
     */</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">stackDepth</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="cm">/**
     * 初始化构建器
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">stackDepth</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"init检测到堆栈深度不为0，请检查上次调用是否正常"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 清空条件</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">criteriaStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Criteria</span><span class="o">&gt;</span> <span class="n">criteriaList</span> <span class="o">:</span> <span class="n">criteriaStack</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">criteriaList</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">criteriaList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 如果列表为空，初始化一个新的 ArrayList</span>
            <span class="n">criteriaStack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
        <span class="o">}</span>
        <span class="cm">/*重置堆栈深度*/</span>
        <span class="n">stackDepth</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/*------------------------------开放方法------------------------------*/</span>
    <span class="cm">/**
     * 添加Criteria条件
     * @param criteria Criteria条件
     * @return 自身
     */</span>
    <span class="kd">public</span> <span class="nc">ConditionBuild</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Criteria</span> <span class="n">criteria</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 假删除条件
     * @return 自身
     */</span>
    <span class="kd">public</span> <span class="nc">ConditionBuild</span> <span class="nf">fakeDeletionCondition</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">stackDepth</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"假删除条件只能在堆栈深度为 0 时调用"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">orOperator</span><span class="o">(</span>
                <span class="n">where</span><span class="o">(</span><span class="no">DELETE_STATUS</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="kc">false</span><span class="o">),</span>
                <span class="n">where</span><span class="o">(</span><span class="no">DELETE_STATUS</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
        <span class="o">);</span>
        <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 多租户条件
     * @param tenantID 租户ID
     * @return 自身
     */</span>
    <span class="kd">public</span> <span class="nc">ConditionBuild</span> <span class="nf">tenantCondition</span><span class="o">(</span><span class="nc">String</span> <span class="n">tenantID</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">stackDepth</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"多租户条件只能在堆栈深度为 0 时调用"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">where</span><span class="o">(</span><span class="no">TENANT_ID</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="n">tenantID</span><span class="o">);</span>
        <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 乐观锁条件
     * @param version 乐观锁当前版本号
     * @return 自身
     */</span>
    <span class="kd">public</span> <span class="nc">ConditionBuild</span> <span class="nf">optimisticLocks</span><span class="o">(</span><span class="kt">int</span> <span class="n">version</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">stackDepth</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"乐观锁条件只能在堆栈深度为 0 时调用"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">where</span><span class="o">(</span><span class="no">OPTIMISTIC_LOCK_FIELD</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="n">version</span><span class="o">);</span>
        <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="cm">/**
     * 条件解析器
     * condition 是一个包含条件的 JSON 字符串,该方法会为条件字段添加前缀，例如：
     * {
     * "status": true,
     * "name": "John Doe",
     * "age": { "$gt": 25 }
     * }
     * @param condition  条件字符串
     * @return 自身
     */</span>
    <span class="kd">public</span> <span class="nc">ConditionBuild</span> <span class="nf">conditionParsing</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">conditionParsing</span><span class="o">(</span><span class="n">condition</span><span class="o">,</span><span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 条件解析器
     * condition 是一个包含条件的 JSON 字符串，例如：
     * {
     * "status": true,
     * "name": "John Doe",
     * "age": { "$gt": 25 }
     * }
     * @param condition  条件字符串
     * @param addPrefix 是否添加前缀
     * @return 自身
     */</span>
    <span class="kd">public</span> <span class="nc">ConditionBuild</span> <span class="nf">conditionParsing</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">condition</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">addPrefix</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 根据 condition 构建查询条件</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">condition</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="c1">// 高级嵌套查询构建</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">advancedNestedQueries</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span><span class="n">addPrefix</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">key</span> <span class="o">=</span> <span class="n">keyNameMapping</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="c1">// 将条件映射到 data 里面，外面的都是系统字段，不应暴露</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">addPrefix</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="no">PRIMARY_KEY</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">key</span> <span class="o">=</span> <span class="n">addKeyPrefix</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c1">// 简单逻辑查询构建</span>
            <span class="n">simpleLogicalQueries</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/*------------------------------重要业务逻辑------------------------------*/</span>

    <span class="cm">/**
     * 高级嵌套逻辑（$or,$and,$elemMatch）
     * $or、$and 只能出现在具体属性外，即控制符前
     * $elemMatch 只能出现在具体属性下。
     *
     * @param key       键
     * @param value     值
     * @param addPrefix 是否添加前缀
     * @return 是否跳过当前循环
     */</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">advancedNestedQueries</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">addPrefix</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"$or"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"$or控制符的值应为数组类型。"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c1">// $or 条件</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">orConditionList</span> <span class="o">=</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;)</span> <span class="n">value</span><span class="o">;</span>
            <span class="c1">// 结果集</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Criteria</span><span class="o">&gt;</span> <span class="n">orCriteriaList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="c1">// 递归</span>
            <span class="n">buildQueriesRecursively</span><span class="o">(</span><span class="n">orCriteriaList</span> <span class="o">,()-&gt;{</span>
                <span class="c1">// 分别构建</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">andCondition</span> <span class="o">:</span> <span class="n">orConditionList</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">conditionParsing</span><span class="o">(</span><span class="n">andCondition</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">});</span>
            <span class="c1">// 处理完毕后通过or{}将结果包围</span>
            <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">orOperator</span><span class="o">(</span><span class="n">orCriteriaList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Criteria</span><span class="o">[</span><span class="mi">0</span><span class="o">])));</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="s">"$and"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"$and控制符的值应为数组类型。"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c1">// $and 条件</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">andConditionList</span> <span class="o">=</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;)</span> <span class="n">value</span><span class="o">;</span>
            <span class="c1">// 结果集</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Criteria</span><span class="o">&gt;</span> <span class="n">andCriteriaList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="c1">// 递归</span>
            <span class="n">buildQueriesRecursively</span><span class="o">(</span><span class="n">andCriteriaList</span><span class="o">,()-&gt;{</span>
                <span class="c1">// 分别构建</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">andCondition</span> <span class="o">:</span> <span class="n">andConditionList</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">conditionParsing</span><span class="o">(</span><span class="n">andCondition</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">});</span>
            <span class="c1">// 处理完毕后通过and{}将结果包围</span>
            <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span><span class="n">andCriteriaList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Criteria</span><span class="o">[</span><span class="mi">0</span><span class="o">])));</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>


        <span class="cm">/*该操作流程需要涉及字段，因此需要判断是否添加字段前缀。*/</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">Map</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="nc">Map</span><span class="o">)</span> <span class="n">value</span><span class="o">).</span><span class="na">containsKey</span><span class="o">(</span><span class="no">ELEM_MATCH</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// 变为强类型</span>
            <span class="nc">Map</span> <span class="n">value1</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(!(</span><span class="n">value1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="no">ELEM_MATCH</span><span class="o">)</span> <span class="k">instanceof</span> <span class="nc">Map</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"$elemMatch控制符的值应为键值对类型。"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c1">// $elemMatch 条件</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">elemMatchCondition</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">value1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="no">ELEM_MATCH</span><span class="o">);</span>
            <span class="c1">// 结果集</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Criteria</span><span class="o">&gt;</span> <span class="n">elemMatchCriteriaList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="c1">// 递归</span>
            <span class="n">buildQueriesRecursively</span><span class="o">(</span><span class="n">elemMatchCriteriaList</span><span class="o">,()-&gt;</span> <span class="o">{</span>
                <span class="c1">// 对象数组内部条件，不不要加前缀。</span>
                <span class="n">conditionParsing</span><span class="o">(</span><span class="n">elemMatchCondition</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
            <span class="o">});</span>
            <span class="c1">// $elemMatch这边也涉及字段，需要根据条件添加前缀。</span>

            <span class="c1">// ID 映射为 _id 字段，并跳过添加前缀逻辑。</span>
            <span class="nc">String</span> <span class="n">newKey</span><span class="o">=</span><span class="n">key</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="no">MAP_PRIMARY_KEY</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">newKey</span> <span class="o">=</span> <span class="no">PRIMARY_KEY</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">// 将条件映射到 data 里面，外面的都是系统字段，不应暴露</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">addPrefix</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="no">PRIMARY_KEY</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">newKey</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">newKey</span> <span class="o">=</span> <span class="n">addKeyPrefix</span><span class="o">(</span><span class="n">newKey</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c1">// 处理完毕后通过elemMatch{and{}}将结果包围</span>
            <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">).</span><span class="na">add</span><span class="o">(</span>
                    <span class="n">where</span><span class="o">(</span><span class="n">newKey</span><span class="o">).</span><span class="na">elemMatch</span><span class="o">(</span>
                            <span class="k">new</span> <span class="nf">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span>
                                    <span class="n">elemMatchCriteriaList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Criteria</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span>
                            <span class="o">)</span>
                    <span class="o">)</span>
            <span class="o">);</span>
            <span class="c1">// 执行完毕后删除$elemMatch,注意会改变原condition,因此弃用，改为在简单条件逻辑构建器置空对应操作。</span>
            <span class="c1">//value1.remove("$elemMatch");</span>
            <span class="cm">/*对于存在$elemMatch的Map的平行key，可以继续处理*/</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">//若都没有执行则放行，执行后续逻辑</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 简单条件逻辑构建器（$gt、$lt、$gte、$lte、$ne、$eq、$in、$nin、$regex、$exists、
     * $size、$mod、$typ、e$all、$isNull）
     * 复杂类型：$not、$notRegex
     * 只允许出现在具体属性下。
     * @param key 键，一般为字段名称
     * @param value   值，一般为控制符Map
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">simpleLogicalQueries</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">Map</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 处理控制操作符 (如 $gt, $lt)</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">operationMap</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">value</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">operationMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">operator</span><span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
                <span class="nc">Object</span> <span class="n">operatorValue</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
                <span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">where</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
                <span class="k">switch</span> <span class="o">(</span><span class="n">operator</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">case</span> <span class="s">"$gt"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">gt</span><span class="o">(</span><span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 大于</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$lt"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">lt</span><span class="o">(</span><span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 小于</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$gte"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">gte</span><span class="o">(</span><span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 大于等于</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$lte"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">lte</span><span class="o">(</span><span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 小于等于</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$ne"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">ne</span><span class="o">(</span><span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 不等于操作符</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$eq"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 等于操作符</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$in"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">in</span><span class="o">((</span><span class="nc">Collection</span><span class="o">&lt;?&gt;)</span> <span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// in 操作符</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$nin"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">nin</span><span class="o">((</span><span class="nc">Collection</span><span class="o">&lt;?&gt;)</span> <span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// not in 操作符</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$regex"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">regex</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span> <span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 正则表达式</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$exists"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">exists</span><span class="o">((</span><span class="kt">boolean</span><span class="o">)</span> <span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 字段存在性检查</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$size"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">size</span><span class="o">((</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 数组大小匹配</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$mod"</span><span class="o">:</span>
                        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;)</span> <span class="n">operatorValue</span><span class="o">;</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">mod</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span> <span class="c1">// 取模操作</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$type"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">type</span><span class="o">((</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 类型匹配,参阅https://www.mongodb.com/zh-cn/docs/manual/reference/operator/query/type/</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$all"</span><span class="o">:</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">all</span><span class="o">((</span><span class="nc">Collection</span><span class="o">&lt;?&gt;)</span> <span class="n">operatorValue</span><span class="o">);</span> <span class="c1">// 数组匹配</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$isNull"</span><span class="o">:</span><span class="c1">// 是否为空</span>
                        <span class="k">if</span> <span class="o">((</span><span class="kt">boolean</span><span class="o">)</span> <span class="n">operatorValue</span><span class="o">){</span>
                            <span class="n">criteria</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span> <span class="c1">// 空值匹配</span>

                        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                            <span class="n">criteria</span><span class="o">.</span><span class="na">ne</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span><span class="c1">// 翻转</span>
                        <span class="o">}</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$not"</span><span class="o">:</span> <span class="c1">// 反向操作符，应用于简单类型</span>
                        <span class="n">criteria</span> <span class="o">=</span> <span class="n">notCondition</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">operatorValue</span><span class="o">);</span><span class="c1">// 传递字段名称，和操作符键值对</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="s">"$notRegex"</span><span class="o">:</span> <span class="c1">// 自造控制符，用以取反逻辑,用户可以使用，系统也可以使用</span>
                        <span class="n">criteria</span><span class="o">.</span><span class="na">not</span><span class="o">().</span><span class="na">regex</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span> <span class="n">operatorValue</span><span class="o">);</span><span class="c1">// 反向正则表达式</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="nl">ELEM_MATCH:</span>
                        <span class="c1">// 已在高级嵌套逻辑进行处理，这里置空,直接结束本轮添加</span>
                        <span class="k">continue</span><span class="o">;</span>
                    <span class="k">default</span><span class="o">:</span>
                        <span class="c1">// 去除前缀，并提示操作符不存在</span>
                        <span class="nc">String</span> <span class="n">operator0</span> <span class="o">=</span> <span class="n">removeKeyPrefix</span><span class="o">(</span><span class="n">operator</span><span class="o">);</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"存在无效控制条件："</span><span class="o">+</span><span class="n">operator0</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">List</span><span class="o">){</span>
            <span class="c1">// 简单条件无数组类型，因此提示错误</span>
            <span class="nc">String</span> <span class="n">key0</span> <span class="o">=</span> <span class="n">removeKeyPrefix</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"存在无效控制条件："</span><span class="o">+</span> <span class="n">key0</span> <span class="o">+</span><span class="s">"，若该值为字段，下级应为键值对"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// 普通等值查询</span>
            <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">where</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">is</span><span class="o">(</span><span class="n">value</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 反向操作，只允许出现在具体属性字段下。
     *
     * @param key   键，字段名称
     * @param value $not下的控制符集合
     * @return 生成好的Criteria
     */</span>
    <span class="kd">private</span> <span class="nc">Criteria</span> <span class="nf">notCondition</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="nc">Map</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"$not控制符的值应为键值对类型。"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="cm">/*强类型解析*/</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">value</span><span class="o">;</span>
        <span class="c1">// 支持的简单操作符列表</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">supportedOperatorsList</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"$eq"</span><span class="o">,</span> <span class="s">"$gt"</span><span class="o">,</span> <span class="s">"$gte"</span><span class="o">,</span> <span class="s">"$lt"</span><span class="o">,</span> <span class="s">"$lte"</span><span class="o">,</span> <span class="s">"$ne"</span><span class="o">,</span> <span class="s">"$regex"</span><span class="o">);</span>
        <span class="c1">// 检测操作符是否支持</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">operator</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">supportedOperatorsList</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">operator</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"$not 仅支持简单的比较操作符："</span> <span class="o">+</span> <span class="n">supportedOperatorsList</span> <span class="o">+</span> <span class="s">"，不支持："</span> <span class="o">+</span> <span class="n">operator</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// 操作符反向替代</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">inverseMap</span> <span class="o">=</span> <span class="n">operatorInverseOverride</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
        <span class="c1">// 去掉中间层$not,重新封装</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">notConditions</span><span class="o">=</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">notConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">inverseMap</span><span class="o">);</span>
        <span class="c1">// 正常调用</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Criteria</span><span class="o">&gt;</span> <span class="n">notCriteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">// 递归</span>
        <span class="n">buildQueriesRecursively</span><span class="o">(</span><span class="n">notCriteria</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="c1">// 已添加过前缀，不再重复添加</span>
            <span class="n">conditionParsing</span><span class="o">(</span><span class="n">notConditions</span><span class="o">,</span><span class="kc">false</span><span class="o">);</span>
        <span class="o">});</span>
        <span class="c1">// 处理完毕后通过and{}将结果包围</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span><span class="n">notCriteria</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Criteria</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
    <span class="o">}</span>


    <span class="cm">/**
     * 操作符反向替代集合
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="no">SUB_MAP</span><span class="o">;</span>
    <span class="cm">/**通过静态代码块，只初始化一次*/</span>
    <span class="kd">static</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">tempMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">tempMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$eq"</span><span class="o">,</span> <span class="s">"$ne"</span><span class="o">);</span>       <span class="c1">// 等于 -&gt; 不等于</span>
        <span class="n">tempMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$ne"</span><span class="o">,</span> <span class="s">"$eq"</span><span class="o">);</span>       <span class="c1">// 不等于 -&gt; 等于</span>
        <span class="n">tempMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$gt"</span><span class="o">,</span> <span class="s">"$lte"</span><span class="o">);</span>      <span class="c1">// 大于 -&gt; 小于等于</span>
        <span class="n">tempMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$gte"</span><span class="o">,</span> <span class="s">"$lt"</span><span class="o">);</span>      <span class="c1">// 大于等于 -&gt; 小于</span>
        <span class="n">tempMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$lt"</span><span class="o">,</span> <span class="s">"$gte"</span><span class="o">);</span>      <span class="c1">// 小于 -&gt; 大于等于</span>
        <span class="n">tempMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$lte"</span><span class="o">,</span> <span class="s">"$gt"</span><span class="o">);</span>      <span class="c1">// 小于等于 -&gt; 大于</span>
        <span class="n">tempMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$regex"</span><span class="o">,</span> <span class="s">"$notRegex"</span><span class="o">);</span> <span class="c1">// 正则匹配 -&gt; 取反正则匹配（自定义的取反逻辑）</span>
        <span class="no">SUB_MAP</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableMap</span><span class="o">(</span><span class="n">tempMap</span><span class="o">);</span> <span class="c1">// 将临时 Map 转换为不可变 Map</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 操作符反向替代
     * @param map 原操作符
     * @return 反向替代后的操作符集合
     */</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">operatorInverseOverride</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 用来保存需要替换的键值对</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">inverseMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// 迭代原始Map，找到需要替换的key</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">map</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">operator</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="c1">// 检查当前key是否需要替换</span>
            <span class="k">if</span> <span class="o">(</span><span class="no">SUB_MAP</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">operator</span><span class="o">))</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">newOperator</span> <span class="o">=</span> <span class="no">SUB_MAP</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">operator</span><span class="o">);</span>
                <span class="c1">// 替换key不替换操作符</span>
                <span class="n">inverseMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">newOperator</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>  <span class="c1">// 将替换后的键和值存入临时Map</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">inverseMap</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="cm">/*------------------------------终结方法------------------------------*/</span>
    <span class="cm">/**
     * 与条件组合，终结操作
     * @return 条件Criteria
     */</span>
    <span class="kd">public</span> <span class="nc">Criteria</span> <span class="nf">andCriteriaBuild</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">stackDepth</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"andCriteriaBuild终结操作，只能在堆栈深度为 0 时调用"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="cm">/*Query机制问题，在第一层只能有一个and和or，因此套一层and就可以回避这个问题了*/</span>
        <span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Criteria</span><span class="o">().</span><span class="na">andOperator</span><span class="o">(</span><span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">).</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Criteria</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
        <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">criteria</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 与条件组合,并添加到新条件查询器，终结操作
     *
     * @return Query
     */</span>
    <span class="kd">public</span> <span class="nc">Query</span> <span class="nf">andCriteriaQueryBuild</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">stackDepth</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"andCriteriaQueryBuild终结操作，只能在堆栈深度为 0 时调用"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Query</span><span class="o">();</span>
        <span class="nc">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">andCriteriaBuild</span><span class="o">();</span>
        <span class="n">query</span><span class="o">.</span><span class="na">addCriteria</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">query</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/*------------------------------支撑方法------------------------------*/</span>

    <span class="cm">/**
     * 主键映射
     * @param keyName 键列名
     * @return
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">keyNameMapping</span><span class="o">(</span><span class="nc">String</span> <span class="n">keyName</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">keyName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="no">MAP_PRIMARY_KEY</span><span class="o">)){</span>
            <span class="k">return</span> <span class="no">PRIMARY_KEY</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">keyName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 为键添加前缀，映射到指定对象
     * @param key 键
     * @return 映射后的key
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">addKeyPrefix</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">key</span><span class="o">)){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"出现空字符串"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 为主键则不添加前缀，如果加了前缀也不添加前缀</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">PRIMARY_KEY</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="no">DATA_NAME</span> <span class="o">+</span> <span class="s">"."</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">DATA_NAME</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">key</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 删除键被添加的前缀
     * @param key 键
     * @return 还原后的key
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">removeKeyPrefix</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">key</span><span class="o">)){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"出现空字符串"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// 为主键则不操作，如果没有加前缀也不删除前缀</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">PRIMARY_KEY</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">key</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="no">DATA_NAME</span> <span class="o">+</span> <span class="s">"."</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 去掉前缀并返回</span>
        <span class="k">return</span> <span class="n">key</span><span class="o">.</span><span class="na">substring</span><span class="o">((</span><span class="no">DATA_NAME</span> <span class="o">+</span> <span class="s">"."</span><span class="o">).</span><span class="na">length</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 递归构建条件
     * @param resultCriteria 解析后的Criteria
     * @param runnable 自定义操作
     */</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">buildQueriesRecursively</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Criteria</span><span class="o">&gt;</span> <span class="n">resultCriteria</span><span class="o">,</span> <span class="nc">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 加堆栈深度</span>
        <span class="n">incrementDepth</span><span class="o">();</span>
        <span class="n">runnable</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
        <span class="n">resultCriteria</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">));</span>
        <span class="c1">// 减堆栈深度并清空</span>
        <span class="n">decrementDepth</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 堆栈深度增加，不应该被调用，只会被buildQueriesRecursively调用
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">incrementDepth</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">stackDepth</span><span class="o">++;</span>
        <span class="c1">// 判断当前深度是否已经存在对应的 List，如果没有则创建新的</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">criteriaStack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">stackDepth</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">criteriaStack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span> <span class="c1">// 新增一个新的 list 用来存储该深度的条件</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 堆栈深度减少，并清空当前深度的列表，不应该被调用，只会被buildQueriesRecursively调用
     */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">decrementDepth</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">stackDepth</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">criteriaStack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stackDepth</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span> <span class="c1">// 清空当前深度的列表</span>
            <span class="n">stackDepth</span><span class="o">--;</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"未成对出现的堆栈深度！"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="使用">使用</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 根据条件（condition），读取指定表单（collectionName）中的一条或多条数据详情，不通过缓存，直接从MongoDB中读取。
 *
 * @param tenantID 租户ID
 * @param collectionName 表名、集合名
 * @param condition      条件
 * @return 查询结果
 */</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&gt;</span> <span class="nf">getFormData</span><span class="o">(</span><span class="nc">String</span> <span class="n">tenantID</span><span class="o">,</span> <span class="nc">String</span> <span class="n">collectionName</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">condition</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Query</span> <span class="n">query</span> <span class="o">=</span> <span class="n">startConditionBuild</span><span class="o">()</span>
            <span class="o">.</span><span class="na">conditionParsing</span><span class="o">(</span><span class="n">condition</span><span class="o">)</span>
            <span class="o">.</span><span class="na">tenantCondition</span><span class="o">(</span><span class="n">tenantID</span><span class="o">)</span>
            <span class="o">.</span><span class="na">fakeDeletionCondition</span><span class="o">()</span>
            <span class="o">.</span><span class="na">andCriteriaQueryBuild</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">mongoTemplate</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">query</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">collectionName</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="测试用例">测试用例</h2>

<p>MongoDB数据：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$oid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"6708f5f8c7413f0001015635"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"tenant_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"creator"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"张三"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w">
      </span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"纽约"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"job"</span><span class="p">:</span><span class="w"> </span><span class="s2">"工程师"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">60000</span><span class="p">,</span><span class="w">
      </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"工程师"</span><span class="p">,</span><span class="w"> </span><span class="s2">"开发人员"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"projects"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目A"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"主开发"</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目B"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"测试"</span><span class="w"> </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"有经验的开发人员和工程师"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isActive"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"create_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T09:55:04.671Z"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"last_modified_by"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"update_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T10:01:26.232Z"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$oid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"6708f5f8c7413f0001015636"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"tenant_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"creator"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"李四"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">45</span><span class="p">,</span><span class="w">
      </span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"洛杉矶"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"job"</span><span class="p">:</span><span class="w"> </span><span class="s2">"开发人员"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">70000</span><span class="p">,</span><span class="w">
      </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"开发人员"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"projects"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目X"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"主开发"</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目Z"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"辅助"</span><span class="w"> </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"科技公司首席开发人员"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isActive"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"create_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T09:55:04.671Z"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"last_modified_by"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"update_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T10:01:26.232Z"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$oid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"6708f5f8c7413f0001015637"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"tenant_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"creator"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"王五"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">55</span><span class="p">,</span><span class="w">
      </span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"芝加哥"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"job"</span><span class="p">:</span><span class="w"> </span><span class="s2">"失业"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
      </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"经理"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"projects"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目X"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"主开发"</span><span class="w"> </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"曾任经理，具有技术经验"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isActive"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"create_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T09:55:04.671Z"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"last_modified_by"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员3"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"update_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T10:01:26.232Z"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$oid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"6708f5f8c7413f0001015638"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"tenant_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"creator"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员4"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"赵六"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="mi">28</span><span class="p">,</span><span class="w">
      </span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"旧金山"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"job"</span><span class="p">:</span><span class="w"> </span><span class="s2">"工程师"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="mi">80000</span><span class="p">,</span><span class="w">
      </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"工程师"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"projects"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目A"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"主开发"</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w"> </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"项目B"</span><span class="p">,</span><span class="w"> </span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"辅助"</span><span class="w"> </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"具有AI经验的软件工程师"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isActive"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"create_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T09:55:04.671Z"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="nl">"last_modified_by"</span><span class="p">:</span><span class="w"> </span><span class="s2">"操作员4"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"update_time"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-12T10:01:26.232Z"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">POST</code>-<code class="language-plaintext highlighter-rouge">Body</code>，主要看查询条件（<code class="language-plaintext highlighter-rouge">condition</code>）：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
	</span><span class="nl">"tenantID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="p">,</span><span class="w">
	</span><span class="nl">"collectionID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"6705ea2b006a991a7ad4d848"</span><span class="p">,</span><span class="w">
	</span><span class="nl">"condition"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"dataID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"6708f5f8c7413f0001015635"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">查询指定_id</span><span class="w">
		</span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">查询状态为</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="err">的记录</span><span class="w">
		</span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$eq"</span><span class="p">:</span><span class="w"> </span><span class="s2">"张三"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">查询名称为</span><span class="w"> </span><span class="s2">"张三"</span><span class="w"> </span><span class="err">的记录</span><span class="w">
			</span><span class="nl">"$not"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">排除李开头</span><span class="p">,</span><span class="err">或者直接使用$notRegex控制符</span><span class="w">
				</span><span class="nl">"$regex"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^李.*"</span><span class="w">
			</span><span class="p">},</span><span class="w">
			</span><span class="nl">"$type"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="err">//是字符串，数字代表的类型，参阅：https://www.mongodb.com/zh-cn/docs/manual/reference/operator/query/type/</span><span class="w">
		</span><span class="p">},</span><span class="w">
		</span><span class="err">//若字段是一个对象，假设person是对象，现在想判断该对象的sex，那么可以写成：</span><span class="w">
		</span><span class="err">//</span><span class="nl">"person.sex"</span><span class="p">:</span><span class="s2">"男"</span><span class="p">,</span><span class="w">
		</span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">年龄范围条件</span><span class="w">
			</span><span class="nl">"$gte"</span><span class="p">:</span><span class="w"> </span><span class="mi">25</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">年龄大于或等于</span><span class="w"> </span><span class="mi">25</span><span class="w">
			</span><span class="nl">"$lt"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">年龄小于</span><span class="w"> </span><span class="mi">50</span><span class="w">
		</span><span class="p">},</span><span class="w">
		</span><span class="nl">"$or"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">或条件</span><span class="p">,</span><span class="err">必须先套一层</span><span class="p">[]</span><span class="w">
			</span><span class="p">{</span><span class="w">
				</span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">并且条件，两个条件同时满足</span><span class="w">
					</span><span class="p">{</span><span class="w">
						</span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"纽约"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">城市为</span><span class="w"> </span><span class="s2">"纽约"</span><span class="w">
					</span><span class="p">},</span><span class="w">
					</span><span class="p">{</span><span class="w">
						</span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"张三"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">名称为</span><span class="w"> </span><span class="s2">"张三"</span><span class="w">
					</span><span class="p">}</span><span class="w">
				</span><span class="p">]</span><span class="w">
			</span><span class="p">},</span><span class="w">
			</span><span class="p">{</span><span class="w">
				</span><span class="nl">"city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"洛杉矶"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">或者城市为</span><span class="w"> </span><span class="s2">"洛杉矶"</span><span class="w">
			</span><span class="p">}</span><span class="w">
		</span><span class="p">],</span><span class="w">
		</span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">并且条件，两个条件同时满足</span><span class="p">,</span><span class="err">必须先套一层</span><span class="p">[]</span><span class="w">
			</span><span class="p">{</span><span class="w">
				</span><span class="nl">"job"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
					</span><span class="nl">"$ne"</span><span class="p">:</span><span class="w"> </span><span class="s2">"失业"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">职位不等于</span><span class="w"> </span><span class="s2">"失业"</span><span class="w">
				</span><span class="p">}</span><span class="w">
			</span><span class="p">},</span><span class="w">
			</span><span class="p">{</span><span class="w">
				</span><span class="nl">"salary"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
					</span><span class="nl">"$gte"</span><span class="p">:</span><span class="w"> </span><span class="mi">50000</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">薪水大于或等于</span><span class="w"> </span><span class="mi">50000</span><span class="w">
					</span><span class="nl">"$mod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
						</span><span class="mi">4</span><span class="p">,</span><span class="w">
						</span><span class="mi">0</span><span class="w">
					</span><span class="p">]</span><span class="w"> </span><span class="err">//可以被</span><span class="mi">4</span><span class="err">整除</span><span class="w">
				</span><span class="p">}</span><span class="w">
			</span><span class="p">}</span><span class="w">
		</span><span class="p">],</span><span class="w">
		</span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">标签条件</span><span class="w">
			</span><span class="nl">"$in"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">标签必须在这个数组中</span><span class="w">
				</span><span class="s2">"工程师"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"开发人员"</span><span class="w">
			</span><span class="p">],</span><span class="w">
			</span><span class="nl">"$size"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">数组长度为</span><span class="mi">2</span><span class="w">
			</span><span class="nl">"$all"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="err">//标签数组必须包含该数组的所有内容</span><span class="w">
				</span><span class="s2">"工程师"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"开发人员"</span><span class="w">
			</span><span class="p">],</span><span class="w">
			</span><span class="nl">"$isNull"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">同</span><span class="w"> </span><span class="nl">"$ne"</span><span class="p">:</span><span class="kc">null</span><span class="w">
		</span><span class="p">},</span><span class="w">
		</span><span class="nl">"projects"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">项目条件</span><span class="w">
			</span><span class="nl">"$elemMatch"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">//若要使用</span><span class="w"> </span><span class="err">$elemMatch</span><span class="p">,</span><span class="err">必须在$elemMatch前先套一层</span><span class="p">{}</span><span class="w">
				</span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"主开发"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">查询项目中角色为</span><span class="w"> </span><span class="s2">"主开发"</span><span class="w">
			</span><span class="p">},</span><span class="w">
			</span><span class="nl">"$size"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">数组长度为</span><span class="mi">2</span><span class="w">
		</span><span class="p">},</span><span class="w">
		</span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">描述条件</span><span class="w">
			</span><span class="nl">"$regex"</span><span class="p">:</span><span class="w"> </span><span class="s2">".*开发人员.*"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">描述中包含</span><span class="w"> </span><span class="s2">"开发人员"</span><span class="w"> </span><span class="err">字样</span><span class="w">
		</span><span class="p">},</span><span class="w">
		</span><span class="nl">"isActive"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">活动状态</span><span class="w">
			</span><span class="nl">"$exists"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">存在</span><span class="w"> </span><span class="err">isActive</span><span class="w"> </span><span class="err">字段</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>发送请求后，<code class="language-plaintext highlighter-rouge">MongoTemplate</code>日志：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">o.s.data.mongodb.core.MongoTemplate:</span><span class="w"> </span><span class="err">find</span><span class="w"> </span><span class="err">using</span><span class="w"> </span><span class="err">query:</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$oid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"6708f5f8c7413f0001015635"</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.status"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"张三"</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"data.name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="nl">"$not"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
					</span><span class="nl">"$regex"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^李.*"</span><span class="p">,</span><span class="w">
					</span><span class="nl">"$options"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="w">
				</span><span class="p">}</span><span class="w">
			</span><span class="p">}</span><span class="w">
		</span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$type"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.age"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$gte"</span><span class="p">:</span><span class="w"> </span><span class="mi">25</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.age"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$lt"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"$or"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="nl">"data.city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"纽约"</span><span class="w">
			</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="nl">"data.name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"张三"</span><span class="w">
			</span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
		</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"data.city"</span><span class="p">:</span><span class="w"> </span><span class="s2">"洛杉矶"</span><span class="w">
		</span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"data.job"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="nl">"$ne"</span><span class="p">:</span><span class="w"> </span><span class="s2">"失业"</span><span class="w">
			</span><span class="p">}</span><span class="w">
		</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"data.salary"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="nl">"$gte"</span><span class="p">:</span><span class="w"> </span><span class="mi">50000</span><span class="w">
			</span><span class="p">}</span><span class="w">
		</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"data.salary"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="nl">"$mod"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">]</span><span class="w">
			</span><span class="p">}</span><span class="w">
		</span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.tags"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$in"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"工程师"</span><span class="p">,</span><span class="w"> </span><span class="s2">"开发人员"</span><span class="w"> </span><span class="p">]</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.tags"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$size"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.tags"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$all"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"工程师"</span><span class="p">,</span><span class="w"> </span><span class="s2">"开发人员"</span><span class="w"> </span><span class="p">]</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.tags"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$ne"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.projects"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$elemMatch"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
					</span><span class="nl">"role"</span><span class="p">:</span><span class="w"> </span><span class="s2">"主开发"</span><span class="w">
				</span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
			</span><span class="p">}</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.projects"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$size"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.description"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$regex"</span><span class="p">:</span><span class="w"> </span><span class="s2">".*开发人员.*"</span><span class="p">,</span><span class="w">
			</span><span class="nl">"$options"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"data.isActive"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"$exists"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"tenant_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"16889087066967307206"</span><span class="w">
	</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
		</span><span class="nl">"$or"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"deleteStatus"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
		</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
			</span><span class="nl">"deleteStatus"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="nl">"$exists"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
			</span><span class="p">}</span><span class="w">
		</span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
	</span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="err">fields:</span><span class="w"> </span><span class="err">Document</span><span class="w"> </span><span class="p">{</span><span class="w">
	</span><span class="p">{}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="err">for</span><span class="w"> </span><span class="err">class:</span><span class="w"> </span><span class="err">interface</span><span class="w"> </span><span class="err">java.util.Map</span><span class="w"> </span><span class="err">in</span><span class="w"> </span><span class="err">collection:</span><span class="w"> </span><span class="err">co_common_test</span><span class="mi">1</span><span class="w">
</span></code></pre></div></div>

<hr />

<p>若通过java代码构建，则样例代码为：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"dataID"</span><span class="o">,</span> <span class="s">"6708f5f8c7413f0001015635"</span><span class="o">);</span> <span class="c1">// 查询指定_id</span>
<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"status"</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// 查询状态为 true 的记录</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">nameConditions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">nameConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$eq"</span><span class="o">,</span> <span class="s">"张三"</span><span class="o">);</span> <span class="c1">// 查询名称为 "张三" 的记录</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">notCondition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">notCondition</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$regex"</span><span class="o">,</span> <span class="s">"^李.*"</span><span class="o">);</span>
<span class="n">nameConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$not"</span><span class="o">,</span> <span class="n">notCondition</span><span class="o">);</span> <span class="c1">// 排除李开头</span>
<span class="n">nameConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$type"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span> <span class="c1">// 是字符串</span>

<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">nameConditions</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">ageConditions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">ageConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$gte"</span><span class="o">,</span> <span class="mi">25</span><span class="o">);</span> <span class="c1">// 年龄大于或等于 25</span>
<span class="n">ageConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$lt"</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span> <span class="c1">// 年龄小于 50</span>
<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="n">ageConditions</span><span class="o">);</span> <span class="c1">// 年龄范围条件</span>

<span class="c1">// 处理 $or 条件</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">orConditions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">firstAndCondition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">firstAndConditions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="n">firstAndConditions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Collections</span><span class="o">.</span><span class="na">singletonMap</span><span class="o">(</span><span class="s">"city"</span><span class="o">,</span> <span class="s">"纽约"</span><span class="o">));</span> <span class="c1">// 城市为 "纽约"</span>
<span class="n">firstAndConditions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Collections</span><span class="o">.</span><span class="na">singletonMap</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"张三"</span><span class="o">));</span> <span class="c1">// 名称为 "张三"</span>
<span class="n">firstAndCondition</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$and"</span><span class="o">,</span> <span class="n">firstAndConditions</span><span class="o">);</span>
<span class="n">orConditions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">firstAndCondition</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">secondOrCondition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">secondOrCondition</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"city"</span><span class="o">,</span> <span class="s">"洛杉矶"</span><span class="o">);</span> <span class="c1">// 或者城市为 "洛杉矶"</span>
<span class="n">orConditions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">secondOrCondition</span><span class="o">);</span>

<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$or"</span><span class="o">,</span> <span class="n">orConditions</span><span class="o">);</span> <span class="c1">// 将 $or 条件添加到查询</span>

<span class="c1">// 处理 $and 条件</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">andConditions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">firstAndJobCondition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">firstAndJobCondition</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$ne"</span><span class="o">,</span> <span class="s">"失业"</span><span class="o">);</span> <span class="c1">// 职位不等于 "失业"</span>
<span class="n">andConditions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Collections</span><span class="o">.</span><span class="na">singletonMap</span><span class="o">(</span><span class="s">"job"</span><span class="o">,</span> <span class="n">firstAndJobCondition</span><span class="o">));</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">secondAndSalaryCondition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">secondAndSalaryCondition</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$gte"</span><span class="o">,</span> <span class="mi">50000</span><span class="o">);</span> <span class="c1">// 薪水大于或等于 50000</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">modValues</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="n">secondAndSalaryCondition</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$mod"</span><span class="o">,</span> <span class="n">modValues</span><span class="o">);</span> <span class="c1">// 可以被4整除</span>
<span class="n">andConditions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Collections</span><span class="o">.</span><span class="na">singletonMap</span><span class="o">(</span><span class="s">"salary"</span><span class="o">,</span> <span class="n">secondAndSalaryCondition</span><span class="o">));</span>

<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$and"</span><span class="o">,</span> <span class="n">andConditions</span><span class="o">);</span> <span class="c1">// 将 $and 条件添加到查询</span>

<span class="c1">// 处理 tags 条件</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">tagsConditions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">tagsConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$in"</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"工程师"</span><span class="o">,</span> <span class="s">"开发人员"</span><span class="o">));</span> <span class="c1">// 标签必须在这个数组中</span>
<span class="n">tagsConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$size"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span> <span class="c1">// 数组长度为2</span>
<span class="n">tagsConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$all"</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"工程师"</span><span class="o">,</span> <span class="s">"开发人员"</span><span class="o">));</span> <span class="c1">// 标签数组必须包含该数组的所有内容</span>
<span class="n">tagsConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$isNull"</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span> <span class="c1">// 同 "$ne":null</span>
<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"tags"</span><span class="o">,</span> <span class="n">tagsConditions</span><span class="o">);</span> <span class="c1">// 将 tags 条件添加到查询</span>

<span class="c1">// 处理 projects 条件</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">projectsConditions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">elemMatchCondition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">elemMatchCondition</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"role"</span><span class="o">,</span> <span class="s">"主开发"</span><span class="o">);</span> <span class="c1">// 查询项目中角色为 "主开发"</span>
<span class="n">projectsConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$elemMatch"</span><span class="o">,</span> <span class="n">elemMatchCondition</span><span class="o">);</span> <span class="c1">// 添加 $elemMatch 条件</span>
<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"projects"</span><span class="o">,</span> <span class="n">projectsConditions</span><span class="o">);</span> <span class="c1">// 将 projects 条件添加到查询</span>

<span class="c1">// 处理 description 条件</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">descriptionConditions</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">descriptionConditions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$regex"</span><span class="o">,</span> <span class="s">".*开发人员.*"</span><span class="o">);</span> <span class="c1">// 描述中包含 "开发人员" 字样</span>
<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"description"</span><span class="o">,</span> <span class="n">descriptionConditions</span><span class="o">);</span> <span class="c1">// 将 description 条件添加到查询</span>

<span class="c1">// 处理 isActive 条件</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">isActiveCondition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">isActiveCondition</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"$exists"</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// 存在 isActive 字段</span>
<span class="n">query</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"isActive"</span><span class="o">,</span> <span class="n">isActiveCondition</span><span class="o">);</span> <span class="c1">// 将 isActive 条件添加到查询</span>

<span class="c1">// 输出构建的 Map</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
</code></pre></div></div>

<p>Map结构：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
	$and = [ {
		job = {
			$ne = 失业
		}
	}, {
		salary = {
			$gte = 50000,
			$mod = [ 4, 0 ]
		}
	} ], projects = {
		$elemMatch = {
			role = 主开发
		}
	}, dataID = 6708f5f8c7413f0001015635, $or = [ {
		$and = [ {
			city = 纽约
		}, {
			name = 张三
		} ]
	}, {
		city = 洛杉矶
	} ], name = {
		$eq = 张三,
		$not = {
			$regex = ^ 李.*
		},
		$type = 2
	}, description = {
		$regex = .*开发人员.*
	}, isActive = {
		$exists = true
	}, age = {
		$gte = 25,
		$lt = 50
	}, status = true, tags = {
		$isNull = false,
		$size = 2,
		$in = [ 工程师, 开发人员 ],
		$all = [ 工程师, 开发人员 ]
	}
}
</code></pre></div></div>

<h2 id="控制符文档">控制符文档</h2>

<p><code class="language-plaintext highlighter-rouge">condition</code> 中使用的控制符及其对应的作用和 <code class="language-plaintext highlighter-rouge">value</code> 要求的文档说明。每个控制符包括其含义、<code class="language-plaintext highlighter-rouge">value</code> 类型要求以及示例。</p>

<h3 id="适用于具体字段下的控制符">适用于具体字段下的控制符</h3>

<p><strong><code class="language-plaintext highlighter-rouge">$gt</code>（大于）</strong></p>

<ul>
  <li>作用: 匹配字段值大于指定值的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 数字、日期等可比较类型。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "price": { "$gt": 100 } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$lt</code>（小于）</strong></p>

<ul>
  <li>作用: 匹配字段值小于指定值的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 数字、日期等可比较类型。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "age": { "$lt": 30 } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$gte</code>（大于等于）</strong></p>

<ul>
  <li>作用: 匹配字段值大于或等于指定值的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 数字、日期等可比较类型。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "score": { "$gte": 60 } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$lte</code>（小于等于）</strong></p>

<ul>
  <li>作用: 匹配字段值小于或等于指定值的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 数字、日期等可比较类型。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "height": { "$lte": 180 } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$ne</code>（不等于）</strong></p>

<ul>
  <li>作用: 匹配字段值不等于指定值的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 任意类型。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "status": { "$ne": "inactive" } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$eq</code>（等于）</strong></p>

<ul>
  <li>作用: 匹配字段值等于指定值的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 任意类型。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "username": { "$eq": "john_doe" } }</code></li>
</ul>

<p>可直接省略为<code class="language-plaintext highlighter-rouge">{ "username": "john_doe" }</code></p>

<p><strong><code class="language-plaintext highlighter-rouge">$in</code>（包含于）</strong></p>

<ul>
  <li>作用: 匹配字段值包含于给定的列表中的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 一个数组或集合。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "category": { "$in": ["electronics", "furniture"] } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$nin</code>（不包含于）</strong></p>

<ul>
  <li>作用: 匹配字段值不在给定列表中的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 一个数组或集合。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "department": { "$nin": ["HR", "Finance"] } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$regex</code>（正则表达式匹配）</strong></p>

<ul>
  <li>作用: 使用正则表达式匹配字段值。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 字符串，表示一个正则表达式。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "email": { "$regex": "^.+@example\\.com$" } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$exists</code>（字段存在性检查）</strong></p>

<ul>
  <li>作用: 检查某字段是否存在。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 布尔值，<code class="language-plaintext highlighter-rouge">true</code> 表示字段必须存在，<code class="language-plaintext highlighter-rouge">false</code> 表示字段不能存在。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "middle_name": { "$exists": false } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$size</code>（数组大小匹配）</strong></p>

<ul>
  <li>作用: 匹配数组字段的大小。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 整数，表示数组的长度。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "tags": { "$size": 3 } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$mod</code>（取模运算）</strong></p>

<ul>
  <li>作用: 对字段值进行取模运算，并匹配结果。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 一个包含两个整数的数组，第一个是除数，第二个是余数。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "quantity": { "$mod": [4, 0] } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$type</code>（类型匹配）</strong></p>

<ul>
  <li>作用: 匹配字段值的 BSON 数据类型。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 一个整数，表示 BSON 类型代码。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "created_at": { "$type": 9 } }</code></li>
</ul>

<p>可用类型：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">类型</th>
      <th style="text-align: left">数值</th>
      <th style="text-align: left">别名</th>
      <th style="text-align: left">注意</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">double</td>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">double</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">字符串</td>
      <td style="text-align: left">2</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">string</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">对象</td>
      <td style="text-align: left">3</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">object</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">阵列</td>
      <td style="text-align: left">4</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">array</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">二进制数据</td>
      <td style="text-align: left">5</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">binData</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">未定义</td>
      <td style="text-align: left">6</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">undefined</code></td>
      <td style="text-align: left">已弃用。</td>
    </tr>
    <tr>
      <td style="text-align: left">ObjectId</td>
      <td style="text-align: left">7</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">objectId</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">布尔</td>
      <td style="text-align: left">8</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">bool</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">Date</td>
      <td style="text-align: left">9</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">date</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">null</td>
      <td style="text-align: left">10</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">null</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">正则表达式</td>
      <td style="text-align: left">11</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">regex</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">数据库指针</td>
      <td style="text-align: left">12</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">dbPointer</code></td>
      <td style="text-align: left">已弃用。</td>
    </tr>
    <tr>
      <td style="text-align: left">JavaScript</td>
      <td style="text-align: left">13</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">javascript</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">符号</td>
      <td style="text-align: left">14</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">symbol</code></td>
      <td style="text-align: left">已弃用。</td>
    </tr>
    <tr>
      <td style="text-align: left">32 位整数</td>
      <td style="text-align: left">16</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">int</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">时间戳</td>
      <td style="text-align: left">17</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">timestamp</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">64 位整型</td>
      <td style="text-align: left">18</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">long</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">Decimal128</td>
      <td style="text-align: left">19</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">decimal</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">Min key</td>
      <td style="text-align: left">-1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">minKey</code></td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: left">Max key</td>
      <td style="text-align: left">127</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">maxKey</code></td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
</table>

<p><strong><code class="language-plaintext highlighter-rouge">$all</code>（数组包含所有元素）</strong></p>

<ul>
  <li>作用: 匹配数组字段包含给定所有值的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 一个数组，表示必须匹配的所有值。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "skills": { "$all": ["java", "spring"] } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$isNull</code>（是否为空值）</strong></p>

<ul>
  <li>作用: 匹配字段值为空（<code class="language-plaintext highlighter-rouge">null</code>）或不为空的记录。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 布尔值，<code class="language-plaintext highlighter-rouge">true</code> 表示匹配空值，<code class="language-plaintext highlighter-rouge">false</code> 表示匹配非空值。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "middle_name": { "$isNull": true } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$not</code>（取反）</strong></p>

<ul>
  <li>作用: 对其他操作符的结果取反。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 必须是键值对的形式，支持的操作符有<code class="language-plaintext highlighter-rouge">$eq</code>、 <code class="language-plaintext highlighter-rouge">$gt</code>、 <code class="language-plaintext highlighter-rouge">$gte</code>、 <code class="language-plaintext highlighter-rouge">$lt</code>、 <code class="language-plaintext highlighter-rouge">$lte</code>、 <code class="language-plaintext highlighter-rouge">$ne</code>、 <code class="language-plaintext highlighter-rouge">$regex</code>。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "age": { "$not": { "$gt": 18 } } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$notRegex</code>（正则表达式取反）</strong></p>

<ul>
  <li>作用: 对正则表达式匹配结果取反。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 字符串，表示一个正则表达式。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "username": { "$notRegex": "^admin.*" } }</code></li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$elemMatch</code>（数组元素匹配）</strong></p>

<ul>
  <li>作用: 用于匹配对象数组中的元素是否满足多个条件，只有当数组中的<strong>某个元素满足所有给定条件时</strong>，该文档才会被匹配。</li>
  <li><code class="language-plaintext highlighter-rouge">value</code> 要求: 一个对象，包含多个条件，每个条件都会被应用于对象数组的每个元素。</li>
  <li>示例: <code class="language-plaintext highlighter-rouge">{ "comments": { "$elemMatch": { "user": "john", "score": { "$gt": 5 } } } }</code></li>
  <li>注意：若<code class="language-plaintext highlighter-rouge">comments</code>的值在已经包含<code class="language-plaintext highlighter-rouge">$elemMatch</code>键的情况下，还有其他的平行键，则这些平行键都不会被执行解析。</li>
</ul>

<p>这条语句会匹配一个评论对象数组，其中 <code class="language-plaintext highlighter-rouge">user</code> 为 <code class="language-plaintext highlighter-rouge">john</code> 并且 <code class="language-plaintext highlighter-rouge">score</code> 大于 5 的文档。</p>

<p><strong>错误处理</strong></p>

<ul>
  <li>如果条件中出现了无效的控制符，系统会抛出异常，并显示相关的无效控制符信息。</li>
</ul>

<p><strong>对象属性引用</strong></p>

<p>假设<code class="language-plaintext highlighter-rouge">person</code>是对象，现在想判断该对象的<code class="language-plaintext highlighter-rouge">sex</code>，那么可以写成：<code class="language-plaintext highlighter-rouge">"person.sex":"男"</code>。</p>

<h3 id="需直接使用的控制符">需直接使用的控制符</h3>

<p>以下是 <code class="language-plaintext highlighter-rouge">$or</code> 和 <code class="language-plaintext highlighter-rouge">$and</code> 控制符的文档，包含其作用和 <code class="language-plaintext highlighter-rouge">value</code> 要求：</p>

<p><strong><code class="language-plaintext highlighter-rouge">$or</code></strong></p>

<ul>
  <li><strong>作用</strong>: 用于指定多个条件中的任何一个条件满足时匹配文档。只有当数组中的某个条件满足时，文档才会被匹配。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">value</code> 要求</strong>: <strong>一个数组</strong>，包含多个条件对象，每个对象可以是一个简单条件或复杂条件。</li>
  <li>
    <p><strong>示例</strong>:</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"$or"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"active"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$gte"</span><span class="p">:</span><span class="w"> </span><span class="mi">30</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
    <p>这条语句会匹配状态为 <code class="language-plaintext highlighter-rouge">active</code> 或年龄大于等于 30 的文档。</p>
  </li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">$and</code></strong></p>

<ul>
  <li><strong>作用</strong>: 用于指定多个条件必须全部满足时匹配文档。只有当所有条件都满足时，文档才会被匹配。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">value</code> 要求</strong>: <strong>一个数组</strong>，包含多个条件对象，每个对象可以是一个简单条件或复杂条件。</li>
  <li><strong>示例</strong>:
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"$and"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"active"</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"age"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"$lt"</span><span class="p">:</span><span class="w"> </span><span class="mi">50</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
    <p>这条语句会匹配状态为 <code class="language-plaintext highlighter-rouge">active</code> 且年龄小于 50 的文档。</p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">$and</code>与<code class="language-plaintext highlighter-rouge">$or</code>可互相嵌套。</p>]]></content><author><name>acteds</name></author><category term="Java" /><category term="MongoDB" /><summary type="html"><![CDATA[Java笔记]]></summary></entry></feed>